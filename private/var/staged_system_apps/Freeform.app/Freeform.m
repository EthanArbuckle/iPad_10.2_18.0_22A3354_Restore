void sub_100006E28(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  CGPoint v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  float64x2_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v42;
  double *v43;
  double v44;
  float64x2_t *v45;
  double v46;
  double v47;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  v3 = (_QWORD *)(a1 + 80);
  sub_100007118(a1 + 80, v2);
  v4 = *(double *)(a1 + 104) * 0.5;
  if (v4 == 0.0)
  {
    v5 = *(_QWORD *)(a1 + 72);
    v6 = v2 - v5;
    if (v2 > v5)
    {
      v7 = 88 * v5;
      do
      {
        v8 = *(_QWORD *)(a1 + 48) + v7;
        v9 = *(_QWORD *)(a1 + 80) + v7;
        v11 = *(_OWORD *)(v8 + 48);
        v10 = *(_OWORD *)(v8 + 64);
        v12 = *(_OWORD *)(v8 + 32);
        *(_QWORD *)(v9 + 80) = *(_QWORD *)(v8 + 80);
        *(_OWORD *)(v9 + 48) = v11;
        *(_OWORD *)(v9 + 64) = v10;
        *(_OWORD *)(v9 + 32) = v12;
        v13 = *(_OWORD *)(v8 + 16);
        *(_OWORD *)v9 = *(_OWORD *)v8;
        *(_OWORD *)(v9 + 16) = v13;
        v7 += 88;
        --v6;
      }
      while (v6);
    }
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 72);
    if (v14 >= v2)
    {
      v21 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v15 = dbl_100EEBFD0[*(_QWORD *)(a1 + 112) == 1];
      v16 = v4 / v15;
      v17 = vcvtpd_s64_f64(v16);
      v18 = v15 * (double)(uint64_t)ceil(v16);
      v19 = (2 * v17) | 1;
      if (v19 <= 1)
        v19 = 1;
      v20 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 72);
      do
      {
        v22 = v20 + 88 * v14;
        v23 = *(_QWORD *)(a1 + 80) + 88 * v14;
        v24 = *(_OWORD *)(v22 + 16);
        *(_OWORD *)v23 = *(_OWORD *)v22;
        *(_OWORD *)(v23 + 16) = v24;
        v25 = *(_OWORD *)(v22 + 32);
        v26 = *(_OWORD *)(v22 + 48);
        v27 = *(_OWORD *)(v22 + 64);
        *(_QWORD *)(v23 + 80) = *(_QWORD *)(v22 + 80);
        *(_OWORD *)(v23 + 48) = v26;
        *(_OWORD *)(v23 + 64) = v27;
        *(_OWORD *)(v23 + 32) = v25;
        v20 = *(_QWORD *)(a1 + 48);
        v28 = *(_QWORD *)(a1 + 72) - 1;
        if ((v17 & 0x8000000000000000) == 0)
        {
          v29 = 0;
          v30 = CGPointZero;
          v31 = v20 + 88 * v14;
          v33 = *(double *)(v31 + 48);
          v32 = (double *)(v31 + 48);
          v34 = v33;
          v35 = v33 - v18;
          v36 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 56) - v20) >> 3) - 1;
          v37 = 0.0;
          do
          {
            if (v34 == v35)
            {
              if (v28 <= v14)
                v28 = v14;
              v38 = *(float64x2_t *)(v20 + 88 * v14);
            }
            else
            {
              v39 = v32;
              v40 = v14;
              if (v14 >= 1)
              {
                while (*v39 > v35)
                {
                  v39 -= 11;
                  if (v40-- <= 1)
                  {
                    v40 = 0;
                    break;
                  }
                }
              }
              if (v40 <= v36)
                v42 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 56) - v20) >> 3) - 1;
              else
                v42 = v40;
              v43 = (double *)(v20 + 136 + 88 * v40);
              while (v42 != v40)
              {
                ++v40;
                v44 = *v43;
                v43 += 11;
                if (v44 >= v35)
                {
                  v42 = v40 - 1;
                  break;
                }
              }
              v45 = (float64x2_t *)(v20 + 88 * v42);
              v46 = v45[3].f64[0];
              if (v28 <= v42)
                v28 = v42;
              if (v46 <= v35)
              {
                v38 = *v45;
                if (v42 != v36)
                {
                  v47 = *(double *)(v20 + 88 * (v42 + 1) + 48) - v46;
                  if (v28 <= v42 + 1)
                    v28 = v42 + 1;
                  if (v47 != 0.0)
                    v38 = vaddq_f64(v38, vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v20 + 88 * (v42 + 1)), v38), (v35 - v46) / v47));
                }
              }
              else
              {
                v38 = *v45;
              }
            }
            v35 = v15 + v35;
            v30 = (CGPoint)vaddq_f64((float64x2_t)v30, v38);
            v37 = v37 + 1.0;
            ++v29;
          }
          while (v29 != v19);
          if (v37 > 0.0)
            *(float64x2_t *)(*v3 + 88 * v14) = vmulq_n_f64((float64x2_t)v30, 1.0 / v37);
        }
        if (*(_BYTE *)(a1 + 16) || v28 < *(_DWORD *)(a1 + 32) - 1)
          v21 = ++v14;
        else
          ++v14;
      }
      while (v14 != v2);
    }
    *(_QWORD *)(a1 + 72) = v21;
  }
}

void sub_100007118(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100007650((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 88 * a2;
  }
}

uint64_t sub_10000715C(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_destroyWeak((id *)(a1 + 120));
  *(_QWORD *)a1 = off_10122C0C0;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_10122C128;
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1000071BC(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_destroyWeak((id *)(a1 + 120));
  *(_QWORD *)a1 = off_10122C0C0;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_10122C128;
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  operator delete();
}

void sub_10000722C(_QWORD *a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  v3 = a3.n128_u64[0];
  v6 = a1[1];
  if (v6)
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v6 + 16))(v6, a2, a3);
  a1[3] = v3;
  a1[14] = a2;
  v7 = objc_opt_class(NSNumber, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("internalSettings.pathSmoothing.timeInterval")));
  v10 = sub_100221D0C(v7, v9);
  v13 = (id)objc_claimAutoreleasedReturnValue(v10);

  v11 = v13;
  if (v13)
  {
    objc_msgSend(v13, "doubleValue");
    a1[13] = v12;
    v11 = v13;
  }

}

void sub_1000072F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100007320(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_100007358()
{
  operator new();
}

uint64_t sub_1000073C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(_QWORD *))(*a1 + 56))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  sub_100007908(a3, *(_QWORD *)(a3 + 8), (char *)(*(_QWORD *)v6 + 88 * a2), *(char **)(v6 + 8), 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v6 + 8) - (*(_QWORD *)v6 + 88 * a2)) >> 3));
  return a1[9];
}

_QWORD *sub_100007444(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_1000074A0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  sub_100007118(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t sub_1000074F4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_1000074FC()
{
  return 0;
}

_QWORD *sub_100007504(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10122C0C0;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10122C128;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10000755C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10122C0C0;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10122C128;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  operator delete();
}

uint64_t sub_1000075C4(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = a2.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2);
  *(_QWORD *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_10000760C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_100007650(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 88 * ((88 * a2 - 88) / 0x58) + 88;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL)
      sub_100007810();
    v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1745D1745D1745DLL)
      v11 = 0x2E8BA2E8BA2E8BALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_100007898(v4, v11);
    else
      v12 = 0;
    v14 = &v12[88 * v8];
    v15 = &v12[88 * v11];
    v16 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v20;
        v21 = *(_OWORD *)(v18 - 56);
        v22 = *(_OWORD *)(v18 - 40);
        v23 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v23;
        *(_OWORD *)(v14 - 40) = v22;
        *(_OWORD *)(v14 - 56) = v21;
        v14 -= 88;
        v18 -= 88;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void sub_100007810()
{
  sub_100007824("vector");
}

void sub_100007824(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100007874(exception, a1);
}

void sub_100007860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100007874(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_100007898(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_1000078E0();
  return operator new(88 * a2);
}

void sub_1000078E0()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

char *sub_100007908(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *__p;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 > 0x2E8BA2E8BA2E8BALL)
      sub_100007810();
    v15 = 0x2E8BA2E8BA2E8BA3 * ((__dst - (uint64_t)v13) >> 3);
    v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x1745D1745D1745DLL)
      v18 = 0x2E8BA2E8BA2E8BALL;
    else
      v18 = v17;
    v43 = v9;
    if (v18)
      v19 = (char *)sub_100007898(v9, v18);
    else
      v19 = 0;
    v31 = &v19[88 * v15];
    __p = v19;
    v40 = v31;
    v42 = &v19[88 * v18];
    v32 = 88 * a5;
    v33 = &v31[88 * a5];
    do
    {
      v34 = *((_OWORD *)v7 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v7;
      *((_OWORD *)v31 + 1) = v34;
      v35 = *((_OWORD *)v7 + 2);
      v36 = *((_OWORD *)v7 + 3);
      v37 = *((_OWORD *)v7 + 4);
      *((_QWORD *)v31 + 10) = *((_QWORD *)v7 + 10);
      *((_OWORD *)v31 + 3) = v36;
      *((_OWORD *)v31 + 4) = v37;
      *((_OWORD *)v31 + 2) = v35;
      v31 += 88;
      v7 += 88;
      v32 -= 88;
    }
    while (v32);
    v41 = v33;
    v5 = (char *)sub_100007C00((void **)a1, (uint64_t)&__p, v5);
    if (v41 != v40)
      v41 = &v40[(v41 - v40 - 88) % 0x58uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - __dst) >> 3) >= a5)
  {
    v21 = &__src[88 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[88 * a5];
    v25 = &v23[-88 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *((_OWORD *)v25 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v25;
        *((_OWORD *)v26 + 1) = v27;
        v28 = *((_OWORD *)v25 + 2);
        v29 = *((_OWORD *)v25 + 3);
        v30 = *((_OWORD *)v25 + 4);
        *((_QWORD *)v26 + 10) = *((_QWORD *)v25 + 10);
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 88;
        v26 += 88;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[88 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_100007BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_100007C00(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  void *v18;
  void *v19;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 88) = v10;
      v11 = *(_OWORD *)(v8 - 56);
      v12 = *(_OWORD *)(v8 - 40);
      v13 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 88);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v13;
      *(_OWORD *)(v9 - 40) = v12;
      *(_OWORD *)(v9 - 56) = v11;
      v8 -= 88;
      v9 -= 88;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v14 = a1[1];
  v15 = *(_QWORD *)(a2 + 16);
  v16 = v14 - __src;
  if (v14 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v14 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v15 + v16;
  v17 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v17;
  v18 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v18;
  v19 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_100007E5C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_1012CAB40));
  v2 = (void *)qword_101414A90;
  qword_101414A90 = v1;

}

void sub_100007ED0(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[10];
  _QWORD v24[10];

  v23[0] = CFSTR("SimSun");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("SimSun"), 0, 0));
  v24[0] = v21;
  v23[1] = CFSTR("NSimSun");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("NSimSun"), 0, 0));
  v24[1] = v19;
  v23[2] = CFSTR("STZhongsong");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("STZhongsong"), 0, 0));
  v24[2] = v17;
  v23[3] = CFSTR("FangSong");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("FangSong"), 0, 0));
  v24[3] = v15;
  v23[4] = CFSTR("Calibri");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("Calibri"), 0, 0));
  v24[4] = v13;
  v23[5] = CFSTR("Calibri-Bold");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("Calibri"), 0, 0));
  v24[5] = v2;
  v23[6] = CFSTR("Calibri-Italic");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("Calibri"), 0, 0));
  v24[6] = v4;
  v23[7] = CFSTR("Calibri-BoldItalic");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Calibri"), 0, 0));
  v24[7] = v6;
  v23[8] = CFSTR("Calibri-Light");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Calibri"), 0, 0));
  v24[8] = v8;
  v23[9] = CFSTR("Calibri-LightItalic");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("Calibri"), 0, 0));
  v24[9] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 10));
  v12 = (void *)qword_101414AA0;
  qword_101414AA0 = v11;

}

void sub_100008738(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100008768(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000092CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000092FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000932C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000935C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000938C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000093BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100009988(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100009BAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100009DFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000A684(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000A6B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000A8E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000A914(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000ACDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000B228(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_10000B26C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x2Cu);
}

uint64_t sub_10000B2A8()
{
  uint64_t v0;

  return v0;
}

void sub_10000B994(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError crl_fileReadUnknownErrorWithUserInfo:](NSError, "crl_fileReadUnknownErrorWithUserInfo:"));
    (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

  }
}

void sub_10000BBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000BBF8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000BC08(uint64_t a1)
{

}

void sub_10000BC10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10000BE8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000BEBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000C2C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000C2F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000C328(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10000C358(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

id sub_10000C698(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addEntry:", a2);
}

void sub_10000C6A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000C6D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000C92C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10000CB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10000CB8C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  CRLFileIOChannel *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  id v15;
  uint64_t *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void *v23;
  void *v24;
  uint64_t v25;
  objc_class *v26;
  NSString *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  _QWORD v33[4];
  NSObject *v34;
  id v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;
  id obj;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  id v49;
  __int16 v50;
  id v51;
  __int16 v52;
  id v53;
  __int16 v54;
  uint64_t v55;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 64))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    v3 = *(id *)(v2 + 56);
    v4 = objc_autoreleasePoolPush();
    if (!v3)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10122C4F0);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7CB8();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10122C510);
      v5 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7C08(v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipFileArchive copyToTemporaryLocationRelativeToURL:error:]_block_invoke"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipFileArchive.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 323, 0, "File should be opened.");

    }
    objc_msgSend(*(id *)(a1 + 32), "createTemporaryDirectoryRelativeToURL:", *(_QWORD *)(a1 + 40));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "URLByAppendingPathComponent:", CFSTR("Temp.zip")));
    if (v8)
    {
      v9 = [CRLFileIOChannel alloc];
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      obj = *(id *)(v10 + 40);
      v11 = -[CRLFileIOChannel initForStreamWritingURL:error:](v9, "initForStreamWritingURL:error:", v8, &obj);
      objc_storeStrong((id *)(v10 + 40), obj);
    }
    else
    {
      v11 = 0;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v11 != 0;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    {
      v37 = 0;
      v38 = &v37;
      v39 = 0x3032000000;
      v40 = sub_10000BBF8;
      v41 = sub_10000BC08;
      v42 = 0;
      v12 = dispatch_group_create();
      dispatch_group_enter(v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "readChannel"));
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_10000D1AC;
      v33[3] = &unk_10122C560;
      v36 = &v37;
      v14 = v12;
      v34 = v14;
      v15 = v11;
      v35 = v15;
      objc_msgSend(v13, "readFromOffset:length:handler:", 0, -1, v33);

      dispatch_group_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
      objc_msgSend(v15, "close");

      v16 = v38;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v38[5] == 0;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      {
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), (id)v16[5]);
        if (qword_10147E368 != -1)
          dispatch_once(&qword_10147E368, &stru_10122C580);
        v17 = off_1013D9068;
        if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "path"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "path"));
          v26 = (objc_class *)objc_opt_class(v38[5], v25);
          v27 = NSStringFromClass(v26);
          v28 = (id)objc_claimAutoreleasedReturnValue(v27);
          v29 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v38[5], "domain"));
          v30 = objc_msgSend((id)v38[5], "code");
          v31 = v38[5];
          *(_DWORD *)buf = 138413570;
          v45 = v23;
          v46 = 2112;
          v47 = v24;
          v48 = 2114;
          v49 = v28;
          v50 = 2114;
          v51 = v29;
          v52 = 2048;
          v53 = v30;
          v54 = 2112;
          v55 = v31;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v17, OS_LOG_TYPE_ERROR, "Failed to copy zip file from %@ to %@. errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", buf, 0x3Eu);

        }
      }

      _Block_object_dispose(&v37, 8);
      v11 = 0;
    }
    else
    {
      if (qword_10147E368 != -1)
        dispatch_once(&qword_10147E368, &stru_10122C5A0);
      v18 = off_1013D9068;
      if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
        sub_100DE7B7C(v18, v8);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (*(_BYTE *)(v19 + 24))
    {
      v20 = *(void **)(a1 + 32);
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v32 = *(id *)(v21 + 40);
      v22 = objc_msgSend(v20, "reopenWithTemporaryURL:error:", v8, &v32);
      objc_storeStrong((id *)(v21 + 40), v32);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      v22 = 0;
    }
    *(_BYTE *)(v19 + 24) = v22;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      objc_msgSend(*(id *)(a1 + 32), "removeTemporaryDirectory");

    objc_autoreleasePoolPop(v4);
    objc_msgSend(v3, "waitForAccessToEnd");

  }
}

void sub_10000D128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000D14C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000D17C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000D1AC(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;

  v7 = a3;
  v8 = a4;
  v9 = (void *)v8;
  if (v7 && !(v8 | *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10000D2A0;
    v14[3] = &unk_10122C538;
    v10 = *(void **)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 48);
    v15 = *(id *)(a1 + 32);
    objc_msgSend(v10, "writeData:handler:", v7, v14);

  }
  if (a2)
  {
    if (v9)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = (id *)(v11 + 40);
      if (!v13)
        objc_storeStrong(v12, a4);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void sub_10000D2A0(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  id v11;

  v7 = a4;
  if (a2)
  {
    v11 = v7;
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = *(_QWORD *)(v8 + 40);
      v9 = (id *)(v8 + 40);
      if (!v10)
        objc_storeStrong(v9, a4);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    v7 = v11;
  }

}

void sub_10000D308(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10000D338(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

uint64_t sub_10000D400(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 48);
  return result;
}

void sub_10000D4D8(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  CRLFileIOChannel *v7;
  id v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  int v15;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 56);
  v3 = v2;
  if (v2)
  {
    v4 = dup((int)objc_msgSend(v2, "fileDescriptor"));
    if ((v4 & 0x80000000) != 0)
    {
      if (qword_10147E368 != -1)
        dispatch_once(&qword_10147E368, &stru_10122C658);
      v12 = off_1013D9068;
      if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
        sub_100DE7DEC(v12);
    }
    else
    {
      v5 = v4;
      if ((objc_msgSend(*(id *)(a1 + 32), "options") & 0x10) != 0 && fcntl(v5, 48, 1) == -1)
      {
        if (qword_10147E368 != -1)
          dispatch_once(&qword_10147E368, &stru_10122C610);
        v6 = off_1013D9068;
        if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
          sub_100DE7D78(v6);
      }
      objc_msgSend(v3, "beginAccess");
      v7 = [CRLFileIOChannel alloc];
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10000D70C;
      v13[3] = &unk_10122C638;
      v15 = v5;
      v14 = v3;
      v8 = -[CRLFileIOChannel initForReadingDescriptor:cleanupHandler:](v7, "initForReadingDescriptor:cleanupHandler:", v5, v13);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

    }
  }
  else
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_10122C678);
    v11 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DE7D38(v11);
  }

}

void sub_10000D6DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

id sub_10000D70C(uint64_t a1)
{
  close(*(_DWORD *)(a1 + 40));
  return _objc_msgSend(*(id *)(a1 + 32), "endAccess");
}

void sub_10000D734(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10000D764(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

ssize_t sub_10000D82C(uint64_t a1)
{
  void *v2;
  ssize_t result;
  char v4;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  if (v2)
    result = (ssize_t)objc_msgSend(v2, "fileDescriptor");
  else
    result = 0xFFFFFFFFLL;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (int)result >= 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v4 = 0;
    result = read(result, &v4, 0);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result == 0;
  }
  return result;
}

void sub_10000DC40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000DC70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10000DD88(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_10000DE34(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10000DE50(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

id sub_10000DE74(id a1)
{
  return a1;
}

char *sub_10000DEA4(int *a1)
{
  return strerror(*a1);
}

uint64_t sub_10000DEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return objc_opt_class(v2, a2);
}

int *sub_10000DEB8()
{
  return __error();
}

void sub_10000E2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10000E310(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000E340(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000E370(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000E3A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000E414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CRLWPLayoutManager;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10000E444(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_10000E4F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000EB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_10000EC88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000ECB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000ECE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000ED18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000F738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_10000F8B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000F8E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000F910(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000F940(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10000FA90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10000FB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10000FC34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_10000FCD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000FDFC()
{
  void *v0;
  void *v1;

  operator delete();
}

uint64_t sub_10000FEEC(uint64_t result, uint64_t a2, int a3, float a4)
{
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2114;
  *(_QWORD *)(a2 + 10) = result;
  return result;
}

void sub_10000FF04(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

void sub_1000101C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000101F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000106EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001071C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000109B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000109E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100010BD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100010C08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100010CD8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

void sub_1000117C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000117F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_100011828(id a1, NSValue *a2)
{
  unint64_t v2;

  -[NSValue rangeValue](a2, "rangeValue");
  return v2 > 1;
}

uint64_t sub_100011A10()
{
  if (qword_101414AD0 != -1)
    dispatch_once(&qword_101414AD0, &stru_10122CA20);
  return qword_101414AC8;
}

void sub_100011A50(id a1)
{
  qword_101414AC8 = (uint64_t)CGColorSpaceCreateDeviceRGB();
}

uint64_t sub_100011A6C()
{
  if (qword_101414AE0 != -1)
    dispatch_once(&qword_101414AE0, &stru_10122CA40);
  return qword_101414AD8;
}

void sub_100011AAC(id a1)
{
  qword_101414AD8 = (uint64_t)CGColorSpaceCreateDeviceCMYK();
}

uint64_t sub_100011AC8()
{
  if (qword_101414AF0 != -1)
    dispatch_once(&qword_101414AF0, &stru_10122CA60);
  return qword_101414AE8;
}

void sub_100011B08(id a1)
{
  qword_101414AE8 = (uint64_t)CGColorSpaceCreateDeviceGray();
}

uint64_t sub_100011B24()
{
  if (qword_101414B00 != -1)
    dispatch_once(&qword_101414B00, &stru_10122CA80);
  return qword_101414AF8;
}

void sub_100011B64(id a1)
{
  qword_101414AF8 = (uint64_t)CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
  if (!qword_101414AF8)
    qword_101414AF8 = (uint64_t)CGColorSpaceCreateDeviceRGB();
}

uint64_t sub_100011BA0()
{
  if (qword_101414B10 != -1)
    dispatch_once(&qword_101414B10, &stru_10122CAA0);
  return qword_101414B08;
}

void sub_100011BE0(id a1)
{
  qword_101414B08 = (uint64_t)CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
  if (!qword_101414B08)
    qword_101414B08 = (uint64_t)CGColorSpaceCreateDeviceRGB();
}

CGColorRef sub_100011C1C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat components[4];

  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  if (qword_101414AD0 != -1)
    dispatch_once(&qword_101414AD0, &stru_10122CA20);
  return CGColorCreate((CGColorSpaceRef)qword_101414AC8, components);
}

CGColorRef sub_100011CA0()
{
  double v0;
  double v1;
  double v2;

  v0 = sub_1003C6618();
  v1 = sub_1003C6618();
  v2 = sub_1003C6618();
  return sub_100011C1C(v0, v1, v2, 1.0);
}

CGPatternRef sub_100011CDC(CGImageRef image, __int128 *a2)
{
  void *v4;
  void *v5;
  void *v6;
  CGFloat y;
  size_t Width;
  size_t Height;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGAffineTransform v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGRect v18;

  if (!image)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CAC0);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE85F4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CAE0);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGPatternRef  _Nonnull CRLCGPatternCreateWithImageAndTransform(CGImageRef _Nonnull, const CGAffineTransform * _Nullable)"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 224, 0, "can't create an image pattern without an image");

  }
  CGImageRetain(image);
  y = CGPointZero.y;
  Width = CGImageGetWidth(image);
  Height = CGImageGetHeight(image);
  if (a2)
  {
    v10 = a2[1];
    v15 = *a2;
    v16 = v10;
    v11 = a2[2];
  }
  else
  {
    v12 = *(_OWORD *)&CGAffineTransformIdentity.c;
    v15 = *(_OWORD *)&CGAffineTransformIdentity.a;
    v16 = v12;
    v11 = *(_OWORD *)&CGAffineTransformIdentity.tx;
  }
  v17 = v11;
  v18.size.height = (double)Height;
  v18.size.width = (double)Width;
  *(_OWORD *)&v14.a = v15;
  *(_OWORD *)&v14.c = v16;
  *(_OWORD *)&v14.tx = v11;
  v18.origin.x = CGPointZero.x;
  v18.origin.y = y;
  return CGPatternCreate(image, v18, &v14, (double)Width, v18.size.height, kCGPatternTilingConstantSpacing, 1, (const CGPatternCallbacks *)&unk_10122CB00);
}

void sub_100011ED0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100011F00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100011F30(CGImage *a1, CGContext *a2)
{
  CGFloat y;
  CGFloat Width;
  CGRect v6;

  y = CGPointZero.y;
  Width = (double)CGImageGetWidth(a1);
  v6.size.height = (double)CGImageGetHeight(a1);
  v6.origin.x = CGPointZero.x;
  v6.origin.y = y;
  v6.size.width = Width;
  CGContextDrawImage(a2, v6, a1);
}

CGColorRef sub_100011F94(CGImage *a1, __int128 *a2)
{
  CGPattern *v2;
  CGColorSpace *Pattern;
  CGColorRef v4;
  uint64_t v6;

  v2 = sub_100011CDC(a1, a2);
  Pattern = CGColorSpaceCreatePattern(0);
  v6 = 0x3FF0000000000000;
  v4 = CGColorCreateWithPattern(Pattern, v2, (const CGFloat *)&v6);
  CGColorSpaceRelease(Pattern);
  CGPatternRelease(v2);
  return v4;
}

CGColorRef sub_100012028(CGColorSpace *a1, double a2, double a3, double a4, double a5)
{
  CGFloat components;
  double v8;
  double v9[2];

  v9[1] = a5;
  sub_1000120D0(&components, &v8, v9, a2, a3, a4);
  if (!a1)
  {
    if (qword_101414AD0 != -1)
      dispatch_once(&qword_101414AD0, &stru_10122CA20);
    a1 = (CGColorSpace *)qword_101414AC8;
  }
  return CGColorCreate(a1, &components);
}

double *sub_1000120D0(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6;
  BOOL v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v6 = a4 * 6.0;
  v7 = a4 == 1.0;
  v8 = 0.0;
  if (!v7)
    v8 = v6;
  v9 = (uint64_t)v8;
  v10 = v8 - (double)(uint64_t)v8;
  v11 = (1.0 - a5) * a6;
  v12 = (1.0 - a5 * v10) * a6;
  v13 = (1.0 - a5 * (1.0 - v10)) * a6;
  v14 = a6;
  v15 = v13;
  switch(v9)
  {
    case 0:
      goto LABEL_10;
    case 1:
      v14 = v12;
      v15 = a6;
      goto LABEL_10;
    case 2:
      v14 = v11;
      v15 = a6;
      v11 = v13;
      goto LABEL_10;
    case 3:
      v14 = v11;
      v15 = v12;
      goto LABEL_8;
    case 4:
      v14 = v13;
      v15 = v11;
LABEL_8:
      v11 = a6;
      goto LABEL_10;
    case 5:
      v14 = a6;
      v15 = v11;
      v11 = v12;
LABEL_10:
      *result = v14;
      *a2 = v15;
      *a3 = v11;
      break;
    default:
      return result;
  }
  return result;
}

double sub_100012190(double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  double v7;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  BOOL v18;
  double v19;

  if (a4 < a5 || a4 < a6)
  {
    if (a5 >= a4)
      v7 = a4;
    else
      v7 = a5;
    if (a4 >= a6)
      v8 = a6;
    else
      v8 = a4;
    v9 = a5 < a4 || a5 < a6;
    if (v9)
      v10 = a6;
    else
      v10 = a5;
    if (v9)
      v11 = v7;
    else
      v11 = v8;
  }
  else
  {
    if (a5 >= a6)
      v11 = a6;
    else
      v11 = a5;
    v10 = a4;
  }
  v12 = 0.0;
  if (v10 <= 0.0)
  {
    v14 = 0.0;
  }
  else
  {
    v13 = v10 - v11;
    v14 = (v10 - v11) / v10;
    if (v14 != 0.0)
    {
      v15 = (v10 - a5) / v13;
      v16 = (v10 - a6) / v13;
      if (v10 == a4)
      {
        if (v11 == a5)
          v12 = v16 + 5.0;
        else
          v12 = 1.0 - v15;
      }
      else
      {
        v18 = v10 == a5;
        v19 = (v10 - a4) / v13;
        if (v18)
        {
          if (v11 == a6)
            v12 = v19 + 1.0;
          else
            v12 = 3.0 - v16;
        }
        else if (v11 == a4)
        {
          v12 = v15 + 3.0;
        }
        else
        {
          v12 = 5.0 - v19;
        }
      }
    }
  }
  *a3 = v10;
  result = v12 / 6.0;
  *a1 = v12 / 6.0;
  *a2 = v14;
  return result;
}

BOOL sub_10001228C(CGColor *a1)
{
  return CGColorGetAlpha(a1) == 0.0;
}

CGFloat sub_1000122A8(CGColor *a1)
{
  CGColorSpace *ColorSpace;
  CGColorSpaceModel Model;
  const CGFloat *v4;
  double v5;
  void *v6;
  void *v7;
  void *v8;
  const CGFloat *Components;
  double v11;
  double v12;
  double v13;
  double v14;

  if (a1)
  {
    ColorSpace = CGColorGetColorSpace(a1);
    Model = CGColorSpaceGetModel(ColorSpace);
    switch(Model)
    {
      case kCGColorSpaceModelMonochrome:
        return *CGColorGetComponents(a1);
      case kCGColorSpaceModelCMYK:
        Components = CGColorGetComponents(a1);
        v11 = Components[3];
        v12 = 1.0 - fmin(v11 + *Components * (1.0 - v11), 1.0);
        v13 = 1.0 - fmin(v11 + Components[1] * (1.0 - v11), 1.0);
        v14 = 1.0 - fmin(v11 + Components[2] * (1.0 - v11), 1.0);
        v5 = fmax(fmax(v12, v13), v14) + fmin(fmin(v12, v13), v14);
        return v5 * 0.5;
      case kCGColorSpaceModelRGB:
        v4 = CGColorGetComponents(a1);
        v5 = fmax(fmax(*v4, v4[1]), v4[2]) + fmin(fmin(*v4, v4[1]), v4[2]);
        return v5 * 0.5;
    }
    NSLog(CFSTR("WARNING: Testing lightness of unsupported color model"));
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CB18);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE8674();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CB38);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLColorLightness(CGColorRef _Nonnull)"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 459, 0, "Trying to get lightness of a nil color");

  }
  return 0.0;
}

void sub_1000124AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000124DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CGFloat sub_10001250C(CGColor *a1)
{
  CGColorSpace *ColorSpace;
  CGColorSpaceModel Model;
  const CGFloat *v4;
  double v5;
  void *v6;
  void *v7;
  void *v8;
  const CGFloat *Components;
  double v11;

  if (a1)
  {
    ColorSpace = CGColorGetColorSpace(a1);
    Model = CGColorSpaceGetModel(ColorSpace);
    switch(Model)
    {
      case kCGColorSpaceModelMonochrome:
        return *CGColorGetComponents(a1);
      case kCGColorSpaceModelCMYK:
        Components = CGColorGetComponents(a1);
        v11 = Components[3];
        v5 = 1.0
           - fmin(v11 + Components[2] * (1.0 - v11), 1.0)
           + 1.0
           - fmin(v11 + *Components * (1.0 - v11), 1.0)
           + 1.0
           - fmin(v11 + Components[1] * (1.0 - v11), 1.0);
        return v5 / 3.0;
      case kCGColorSpaceModelRGB:
        v4 = CGColorGetComponents(a1);
        v5 = *v4 + v4[1] + v4[2];
        return v5 / 3.0;
    }
    NSLog(CFSTR("WARNING: Testing lightness of unsupported color model"));
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CB58);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE86F4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CB78);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLColorAverageLightness(CGColorRef _Nonnull)"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 488, 0, "Trying to get lightness of a nil color");

  }
  return 0.0;
}

void sub_1000126F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100012728(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CGContext *sub_100012758(int a1, double a2, CGFloat a3, CGFloat a4)
{
  CGContext *v8;
  unsigned int v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  CGAffineTransform v15;
  CGAffineTransform transform;
  uint8_t buf[4];
  unsigned int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;

  if (qword_101414AD0 != -1)
    dispatch_once(&qword_101414AD0, &stru_10122CA20);
  v8 = CGBitmapContextCreate(0, (unint64_t)(a2 * a4), (unint64_t)(a3 * a4), 8uLL, (4 * (unint64_t)(a2 * a4) + 31) & 0xFFFFFFFFFFFFFFE0, (CGColorSpaceRef)qword_101414AC8, 0x2002u);
  if (!v8)
  {
    v9 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CB98);
    v10 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110402;
      v18 = v9;
      v19 = 2082;
      v20 = "CGContextRef CRLCreateRGBABitmapContext(CGSize, CGFloat, BOOL)";
      v21 = 2082;
      v22 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m";
      v23 = 1024;
      v24 = 504;
      v25 = 2048;
      v26 = (unint64_t)(a2 * a4);
      v27 = 2048;
      v28 = (unint64_t)(a3 * a4);
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CGBitmapContextCreate returns nil CGContextRef for width %ld, height %ld", buf, 0x36u);
    }
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CBB8);
    v11 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGContextRef CRLCreateRGBABitmapContext(CGSize, CGFloat, BOOL)"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorUtils.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 504, 0, "CGBitmapContextCreate returns nil CGContextRef for width %ld, height %ld", (unint64_t)(a2 * a4), (unint64_t)(a3 * a4));

  }
  CGAffineTransformMakeScale(&transform, a4, a4);
  CGContextConcatCTM(v8, &transform);
  if (a1)
  {
    CGContextTranslateCTM(v8, 0.0, a3);
    CGAffineTransformMakeScale(&v15, 1.0, -1.0);
    CGContextConcatCTM(v8, &v15);
  }
  return v8;
}

unint64_t sub_100012A28(uint64_t a1)
{
  return (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
}

void sub_100012A34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100012A64(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100012BB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100012DC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100012DF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100012F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100012FA4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id v11;

  v11 = a3;
  v7 = a4;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(unsigned __int8 *)(v8 + 24);
  if (v7 && *(_BYTE *)(v8 + 24))
  {
    *(_BYTE *)(v8 + 24) = 0;
    objc_msgSend(*(id *)(a1 + 32), "handleFailureWithHandler:error:", *(_QWORD *)(a1 + 40), v7);
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  }
  if (v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (!*(_DWORD *)(v10 + 24))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
      {
        objc_msgSend(*(id *)(a1 + 32), "prepareBuffer");
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "processData:inflateResult:CRC:isDone:handler:", v11, v10 + 24, *(_QWORD *)(*(_QWORD *)(a1 + 72)+ 8)+ 24, a2, *(_QWORD *)(a1 + 40));
    }
  }

}

void sub_1000132BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000132D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int **v12;
  int v13;
  int v15;
  size_t v16;
  size_t v17;
  unsigned int *v18;
  uLong v19;
  const Bytef *v20;
  uInt v21;
  dispatch_data_t v22;
  dispatch_data_t v23;
  dispatch_data_t subrange;
  dispatch_data_t v25;
  uint64_t v26;
  size_t v27;
  BOOL v28;
  size_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v34;
  char *v35;
  NSObject *log;
  os_log_t loga;
  NSObject *logb;
  unsigned int v39;
  void *v40;
  uint8_t buf[4];
  unsigned int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;

  v8 = a2;
  if (HIDWORD(a5))
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_10122CC60);
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DE8940();
LABEL_49:
    v11 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    goto LABEL_50;
  }
  v9 = *(_QWORD *)(a1 + 32);
  if (!*(_DWORD *)(v9 + 64))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CC80);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE89B0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122CCA0);
    v30 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE87A4(v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipInflateReadChannel processData:inflateResult:CRC:isDone:handler:]_block_invoke"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipInflateReadChannel.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v31, v32, 129, 0, "Buffer should have been initialized.");

    goto LABEL_49;
  }
  *(_DWORD *)(v9 + 40) = a5;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = a4;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = 1;
  if (*(_DWORD *)(v10 + 40))
  {
    v12 = (int **)(a1 + 56);
    while (1)
    {
      if (**v12)
      {
LABEL_51:
        v11 = 1;
        goto LABEL_50;
      }
      v13 = inflate((z_streamp)(v10 + 32), 0);
      **v12 = v13;
      if ((v13 + 5) > 6 || ((1 << (v13 + 5)) & 0x61) == 0)
        break;
      v15 = v13;
      v10 = *(_QWORD *)(a1 + 32);
      if (v13 == 1 || !*(_DWORD *)(v10 + 64))
      {
        v16 = *(_QWORD *)(v10 + 144);
        v17 = v16 - *(unsigned int *)(v10 + 64);
        if (*(_BYTE *)(v10 + 28))
        {
          v18 = *(unsigned int **)(a1 + 64);
          if (v18)
          {
            v19 = *v18;
            v20 = *(const Bytef **)(v10 + 152);
            if (HIDWORD(v17))
            {
              v39 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
              if (qword_10147E370 != -1)
                dispatch_once(&qword_10147E370, &stru_10122CCE0);
              log = off_1013D9070;
              if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109890;
                v42 = v39;
                v43 = 2082;
                v44 = "-[CRLZipInflateReadChannel processData:inflateResult:CRC:isDone:handler:]_block_invoke_2";
                v45 = 2082;
                v46 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipInflateReadChannel.m";
                v47 = 1024;
                v48 = 153;
                _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", buf, 0x22u);
              }
              if (qword_10147E370 != -1)
                dispatch_once(&qword_10147E370, &stru_10122CD00);
              loga = (os_log_t)off_1013D9070;
              if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
              {
                logb = loga;
                v35 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
                *(_DWORD *)buf = 67109378;
                v42 = v39;
                v43 = 2114;
                v44 = v35;
                _os_log_error_impl((void *)&_mh_execute_header, logb, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

              }
              v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLZipInflateReadChannel processData:inflateResult:CRC:isDone:handler:]_block_invoke"));
              v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipInflateReadChannel.m"));
              +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v40, v34, 153, 0, "Out-of-bounds type assignment was clamped to max");

              v21 = -1;
            }
            else
            {
              v21 = v16 - *(_DWORD *)(v10 + 64);
            }
            **(_DWORD **)(a1 + 64) = crc32(v19, v20, v21);
            v10 = *(_QWORD *)(a1 + 32);
            v16 = *(_QWORD *)(v10 + 144);
          }
        }
        v22 = dispatch_data_create(*(const void **)(v10 + 152), v16, 0, _dispatch_data_destructor_free);
        v23 = v22;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144) == v17)
          subrange = v22;
        else
          subrange = dispatch_data_create_subrange(v22, 0, v17);
        v25 = subrange;
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) = 0;
        v26 = *(_QWORD *)(a1 + 32);
        v27 = *(_QWORD *)(v26 + 16);
        v28 = v27 >= v17;
        v29 = v27 - v17;
        if (!v28)
          v29 = 0;
        *(_QWORD *)(v26 + 16) = v29;
        if (v15 != 1)
          objc_msgSend(*(id *)(a1 + 32), "prepareBuffer");

        v10 = *(_QWORD *)(a1 + 32);
      }
      if (!*(_DWORD *)(v10 + 40))
        goto LABEL_51;
    }
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_10122CCC0);
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DE8A48();
    goto LABEL_49;
  }
LABEL_50:

  return v11;
}

void sub_1000138D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100013900(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100013930(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100013960(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100013990(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000139C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000139F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100013A20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100013B20(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100013F54(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_100013F7C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_100014AD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100014B08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100014D50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100014D80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100014F48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100014F78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100015154(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100015184(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001534C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001537C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100015560(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100015590(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001575C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001578C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001599C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000159CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100015BC4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100015BF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100015E90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100015EC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100016084(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000160B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000179DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100017A0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100017DA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100017DD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100017E00(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "p_updateAllButtons");
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_100019580(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x2Cu);
}

void sub_100019840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100019858(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_crlaxShouldPreventMakingVisible");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100019A4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100019AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100019BBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100019FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_10001A074(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001A0A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001A0D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001A104(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001A514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_10001A59C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001A5CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

_OWORD *sub_10001A5FC(_OWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (_QWORD *)result + 1;
    do
    {
      result = sub_10001D42C(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_10001A92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  _Block_object_dispose(&a28, 8);
  sub_10001E288(a10);
  v30 = *(void **)v28;
  if (*(_QWORD *)v28)
  {
    *(_QWORD *)(v28 + 8) = v30;
    operator delete(v30);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10001A974(uint64_t a1, uint64_t a2)
{
  return sub_10001E640(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t sub_10001A980(uint64_t a1)
{
  return sub_10001E288(a1 + 48);
}

void sub_10001A988(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  double v6;
  double *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  double v17[7];

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (!v5
        || (*(unsigned int (**)(uint64_t, _QWORD, double, double, double))(v5 + 16))(v5, v3[6], *((double *)v3 + 4), *((double *)v3 + 5), *((double *)v3 + 7)))
      {
        v6 = sub_10006108C(*(double *)(a1 + 48), *(double *)(a1 + 56), *((double *)v3 + 4), *((double *)v3 + 5));
        if (v6 <= *(double *)(a1 + 64))
        {
          if (!sub_10001C8C0((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), v3 + 6))
            goto LABEL_8;
          v7 = (double *)sub_10001DF18((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), v3 + 6);
          if (!v7)
            sub_10001E2D0("unordered_map::at: key not found");
          if (v6 < v7[9])
          {
LABEL_8:
            sub_10001E344((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), v3 + 6);
            v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48;
            v9 = *(double *)(a1 + 56);
            v10 = *((double *)v3 + 4);
            v11 = *((double *)v3 + 5);
            v12 = *((double *)v3 + 6);
            v13 = *((double *)v3 + 7);
            v17[0] = *(double *)(a1 + 48);
            v17[1] = v9;
            v17[2] = v10;
            v17[3] = v11;
            v17[4] = v12;
            v17[5] = v13;
            v17[6] = sub_10006108C(v17[0], v9, v10, v11);
            sub_10001E3B8(v8, v3 + 6, v3 + 6, (uint64_t)v17);
          }
        }
      }
      v14 = (_QWORD *)v3[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v3[2];
          v16 = *v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v16);
      }
      v3 = v15;
    }
    while (v15 != v2);
  }
}

void sub_10001AB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10001AE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_10001AEB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001AEE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

__n128 sub_10001AF18(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10001AF3C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_10001AF54(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  double *v26;
  double *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double *v31;
  double *v32;
  BOOL v33;
  uint64_t v34;
  double v35;

  v2 = (double *)(a2 + 1);
  v3 = *a2;
  if (*a2 != (double *)(a2 + 1))
  {
    do
    {
      v6 = v3[4];
      v5 = v3[5];
      v34 = 0;
      v35 = 0.0;
      objc_msgSend(*(id *)(a1 + 32), "distanceToPoint:elementIndex:tValue:threshold:findClosestMatch:", &v34, &v35, 1, v6, v5, *(double *)(a1 + 48));
      if (v7 <= *(double *)(a1 + 48))
      {
        objc_msgSend(*(id *)(a1 + 32), "pointAt:fromElement:", v34, v35);
        v9 = v8;
        v11 = v10;
        v12 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
        v13 = *((_QWORD *)v3 + 6);
        v14 = *((_QWORD *)v3 + 7);
        v15 = sub_10006108C(v8, v10, v6, v5);
        v16 = v15;
        v17 = (_QWORD *)v12[7];
        v18 = v12[8];
        if ((unint64_t)v17 >= v18)
        {
          v20 = (_BYTE *)v12[6];
          v21 = 0x6DB6DB6DB6DB6DB7 * (((char *)v17 - v20) >> 3);
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) > 0x492492492492492)
            sub_100007810();
          v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v18 - (_QWORD)v20) >> 3);
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x249249249249249)
            v24 = 0x492492492492492;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)sub_10001E5F8((uint64_t)(v12 + 8), v24);
            v20 = (_BYTE *)v12[6];
            v17 = (_QWORD *)v12[7];
          }
          else
          {
            v25 = 0;
          }
          v26 = (double *)&v25[56 * v21];
          *v26 = v9;
          v26[1] = v11;
          v26[2] = v6;
          v26[3] = v5;
          *((_QWORD *)v26 + 4) = v13;
          *((_QWORD *)v26 + 5) = v14;
          v26[6] = v16;
          v27 = v26;
          if (v17 != (_QWORD *)v20)
          {
            do
            {
              v28 = *(_OWORD *)(v17 - 7);
              v29 = *(_OWORD *)(v17 - 5);
              v30 = *(_OWORD *)(v17 - 3);
              *(v27 - 1) = *((double *)v17 - 1);
              *(_OWORD *)(v27 - 3) = v30;
              *(_OWORD *)(v27 - 5) = v29;
              *(_OWORD *)(v27 - 7) = v28;
              v27 -= 7;
              v17 -= 7;
            }
            while (v17 != (_QWORD *)v20);
            v20 = (_BYTE *)v12[6];
          }
          v19 = v26 + 7;
          v12[6] = v27;
          v12[7] = v26 + 7;
          v12[8] = &v25[56 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(double *)v17 = v9;
          *((double *)v17 + 1) = v11;
          *((double *)v17 + 2) = v6;
          *((double *)v17 + 3) = v5;
          v17[4] = v13;
          v19 = v17 + 7;
          v17[5] = v14;
          *((double *)v17 + 6) = v15;
        }
        v12[7] = v19;
      }
      v31 = (double *)*((_QWORD *)v3 + 1);
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = *(double **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (double *)*((_QWORD *)v3 + 2);
          v33 = *(_QWORD *)v32 == (_QWORD)v3;
          v3 = v32;
        }
        while (!v33);
      }
      v3 = v32;
    }
    while (v32 != v2);
  }
}

void sub_10001B1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10001B2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001B2E8(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  double *v3;
  double *v4;
  double v7;
  double v8;
  double v9;
  double *v10;
  double *v11;
  BOOL v12;

  v3 = (double *)(a2 + 1);
  v4 = (double *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v7 = *(double *)(a1 + 40);
    v8 = *(double *)(a1 + 48);
    v9 = *(double *)(a1 + 56);
    do
    {
      if (sub_10006010C(v4[4], v4[5], v7, v8) <= v9)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        *a3 = 1;
      }
      v10 = (double *)*((_QWORD *)v4 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(double **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (double *)*((_QWORD *)v4 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v4 = v11;
    }
    while (v11 != v3);
  }
}

void sub_10001B678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001B6F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001B720(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10001B750(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  double v8;
  double v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v5 = sub_10001DF18((_QWORD *)(*(_QWORD *)(a1 + 32) + 56), v3 + 6);
      if (v5)
        v6 = (id)v5[3];
      else
        v6 = 0;
      if (*((_BYTE *)v3 + 64))
        v7 = 64;
      else
        v7 = 72;
      v8 = *(double *)(a1 + v7);
      if ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", v6) & 1) == 0)
      {
        if (objc_msgSend(*(id *)(a1 + 48), "isAnyPathNearPoint:withSearchThreshold:", *((double *)v3 + 4), *((double *)v3 + 5), v8 + 1.0))
        {
          objc_msgSend(*(id *)(a1 + 56), "distanceToPoint:elementIndex:tValue:threshold:findClosestMatch:", 0, 0, 0, *((double *)v3 + 4), *((double *)v3 + 5), v8);
          if (v9 <= v8)
            objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
        }
      }

      v10 = (_QWORD *)v3[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v3[2];
          v12 = *v11 == (_QWORD)v3;
          v3 = v11;
        }
        while (!v12);
      }
      v3 = v11;
    }
    while (v11 != v2);
  }
}

void sub_10001B868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001BC70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001BEC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001C0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  uint64_t v18;

  sub_10001CE40(v18, a18);
  sub_10001CE40((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

id sub_10001C140(uint64_t a1, CGFloat a2, CGFloat a3, double a4)
{
  id result;
  _QWORD v9[4];
  char v10;
  CGPoint v11;

  v11.x = a2;
  v11.y = a3;
  result = (id)CGRectContainsPoint(*(CGRect *)(a1 + 40), v11);
  if ((_DWORD)result)
  {
    *(CGFloat *)v9 = a2;
    *(CGFloat *)&v9[1] = a3;
    v9[2] = *(_QWORD *)(a1 + 72);
    *(double *)&v9[3] = a4;
    v10 = 0;
    return objc_msgSend(*(id *)(a1 + 32), "p_addPointInfoStruct:", v9);
  }
  return result;
}

void sub_10001C29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_10001C2BC(uint64_t a1, double a2, double a3)
{
  id result;
  void *v7;
  _QWORD v8[4];
  char v9;

  result = objc_msgSend(*(id *)(a1 + 32), "containsPoint:");
  if ((_DWORD)result)
  {
    v9 = 1;
    *(double *)v8 = a2;
    *(double *)&v8[1] = a3;
    v7 = *(void **)(a1 + 40);
    v8[2] = *(_QWORD *)(a1 + 48);
    v8[3] = 0x7FEFFFFFFFFFFFFFLL;
    return objc_msgSend(v7, "p_addPointInfoStruct:", v8);
  }
  return result;
}

void sub_10001C490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001C6C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001C790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

double *sub_10001C7A8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double *result;
  double v7[2];

  v7[0] = a3;
  v7[1] = a4;
  result = sub_10001D940((_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v7);
  if (result)
    return (double *)(*(uint64_t (**)(_QWORD, double *, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), result + 4, a2);
  return result;
}

_QWORD *sub_10001C8C0(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_10001C974(uint64_t a1, unint64_t *a2, _QWORD *a3, id *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10001CBC8(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v21 + 8 * v4) = v14;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_10001CBAC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  sub_10001CDFC(v2, v1);
  _Unwind_Resume(a1);
}

void sub_10001CBC8(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_10001CCA4(a1, prime);
  }
}

void sub_10001CCA4(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_1000078E0();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_10001CDFC(uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_10001CE40(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10001CE40(a1, *a2);
    sub_10001CE40(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_10001CE80(uint64_t a1, unint64_t *a2, id *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v8;
  sub_10001D0CC(i + 2, a3, a4);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10001CBC8(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v21 + 8 * v4) = v14;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_10001D0B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001D130(v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10001D0CC(_QWORD *a1, id *a2, uint64_t *a3)
{
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = *a2;
  v6 = *a3;
  *a1 = v5;
  a1[1] = v6;
  v7 = a3 + 1;
  v8 = a3[1];
  a1[2] = v8;
  v9 = a1 + 2;
  v10 = a3[2];
  a1[3] = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *a3 = (uint64_t)v7;
    *v7 = 0;
    a3[2] = 0;
  }
  else
  {
    a1[1] = v9;
  }
  return a1;
}

void sub_10001D130(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10001CE40(a2 + 24, *(_QWORD **)(a2 + 32));

  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

_QWORD *sub_10001D180(uint64_t a1, unint64_t *a2, uint64_t a3, id **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  id v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10001CBC8(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_10001D3BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001D130(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D3D8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_10001A5FC((_OWORD *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_10001D414(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001CE40(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_10001D42C(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_10001D4B8(a1, a2, &v12, &v11, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    v7[3] = v9;
    *((_QWORD *)v7 + 8) = *(_QWORD *)(a4 + 32);
    sub_10001D650(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_10001D4B8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_10001D6A4((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_10001D6A4((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_10001D70C((uint64_t)a1, a3, a5);
  }
  if (sub_10001D6A4((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10001D6A4((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))
        return sub_10001D70C((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *sub_10001D650(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_10001D7A8(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL sub_10001D6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v11;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a3 + 16);
  if (v3 != v4)
    return v3 < v4;
  v5 = *(double *)a2 < *(double *)a3;
  if (*(double *)a2 != *(double *)a3)
    return v5;
  v6 = *(double *)(a2 + 8);
  v7 = *(double *)(a3 + 8);
  v5 = v6 < v7;
  if (v6 != v7)
    return v5;
  v8 = *(double *)(a2 + 24);
  v9 = *(double *)(a3 + 24);
  v5 = v8 < v9;
  if (v8 != v9)
    return v5;
  if (*(_BYTE *)(a2 + 32))
    v11 = *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(a3 + 32);
  else
    v11 = 1;
  return !v11;
}

_QWORD *sub_10001D70C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!sub_10001D6A4(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_10001D6A4(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_10001D7A8(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

double *sub_10001D940(_QWORD *a1, double *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  double **v9;
  double *result;
  unint64_t v11;

  v2 = a2[1];
  if (*a2 == 0.0)
    v3 = 0.0;
  else
    v3 = *a2;
  if (v2 == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)a2 + 1);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4 ^ *(_QWORD *)&v3;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v5)
      v8 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v5 - 1);
  }
  v9 = *(double ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  for (result = *v9; result; result = *(double **)result)
  {
    v11 = *((_QWORD *)result + 1);
    if (v11 == v6)
    {
      if (result[2] == *a2 && result[3] == v2)
        return result;
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v5)
          v11 %= *(_QWORD *)&v5;
      }
      else
      {
        v11 &= *(_QWORD *)&v5 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10001DA14(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_10001DA64((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10001DAF0(a1, v3);
  operator delete(v4);
  return 1;
}

_QWORD *sub_10001DA64(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_10001D6A4(v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_10001D6A4(v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t *sub_10001DAF0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10001DB60(v6, a2);
  return v3;
}

uint64_t *sub_10001DB60(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t *sub_10001DEE4(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = sub_10001DF18(a1, a2);
  if (result)
  {
    sub_10001DFCC(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *sub_10001DF18(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_10001DFCC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  char v6;

  v2 = *a2;
  sub_10001E020(a1, a2, (uint64_t)&__p);
  v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6)

    operator delete(v3);
  }
  return v2;
}

_QWORD *sub_10001E020@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_10001E154(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = sub_10001E188(a1, a2);
  if (result)
  {
    sub_10001E240(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *sub_10001E188(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
    v5 = *(_QWORD *)&v2 <= v3 ? v3 % *(_QWORD *)&v2 : *a2;
  else
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_10001E240(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  sub_10001E020(a1, a2, (uint64_t)&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
    sub_10001D130((uint64_t)&v6, v3);
  return v2;
}

uint64_t sub_10001E288(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_10001E2D0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10001E320(exception, a1);
}

void sub_10001E30C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10001E320(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t *sub_10001E344(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = sub_10001DF18(a1, a2);
  if (result)
  {
    sub_10001E378(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_10001E378(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_10001E020(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

char *sub_10001E3B8(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x50uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(v12 + 40) = v14;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a4 + 32);
  *((_QWORD *)v12 + 9) = *(_QWORD *)(a4 + 48);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10001CBC8(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v12 = *v22;
LABEL_38:
    *v22 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_10001E5E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10001E5F8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_1000078E0();
  return operator new(56 * a2);
}

uint64_t sub_10001E640(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *sub_10001E6B0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10001E728(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10001E70C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001E728(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    sub_100007810();
  result = (char *)sub_10001E5F8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

_OWORD *sub_10001E77C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v10;

  v5 = (void **)sub_10001D70C((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v8 = *(_OWORD *)(a3 + 16);
    v6[2] = *(_OWORD *)a3;
    v6[3] = v8;
    *((_QWORD *)v6 + 8) = *(_QWORD *)(a3 + 32);
    sub_10001D650(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t sub_10001E804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      sub_10001D42C((uint64_t **)a1, v4, a2, a2);
      a2 += 40;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_10001E86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001CE40(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

double *sub_10001E884(uint64_t a1, double *a2, uint64_t a3)
{
  unint64_t v3;
  double v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  double **v11;
  double *result;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v23[3];

  v5 = a2[1];
  v6 = *a2;
  if (*a2 == 0.0)
    v6 = 0.0;
  v7 = *((_QWORD *)a2 + 1);
  if (v5 == 0.0)
    v7 = 0;
  v8 = v7 ^ *(_QWORD *)&v6;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7 ^ *(_QWORD *)&v6;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(double ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (result = *v11; result; result = *(double **)result)
      {
        v13 = *((_QWORD *)result + 1);
        if (v13 == v8)
        {
          if (result[2] == *a2 && result[3] == v5)
            return result;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  sub_10001EAD8(a1, v8, a3, (uint64_t)v23);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10001CBC8(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v23[0] = *v21;
    *v21 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v23[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v23[0];
    }
  }
  result = (double *)v23[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_10001EAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11)
{
  if (a10)
    sub_10001EB60((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10001EAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v7 = a1 + 16;
  result = operator new(0x38uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  *((_OWORD *)result + 1) = *(_OWORD *)a3;
  v9 = (_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(a3 + 24);
  result[4] = *(_QWORD *)(a3 + 16);
  result[5] = v10;
  v11 = (char *)(result + 5);
  v12 = *(_QWORD *)(a3 + 32);
  result[6] = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *(_QWORD *)(a3 + 16) = v9;
    *v9 = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  else
  {
    result[4] = v11;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10001EB60(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10001CE40((uint64_t)(a2 + 4), a2[5]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *sub_10001EBA8(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10001CBC8(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_10001EDD4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  sub_10001CDFC(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001EDF0(uint64_t a1)
{
  void *v2;

  sub_10001EE28(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_10001EE28(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      sub_10001CE40((uint64_t)(v2 + 4), v2[5]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

uint64_t sub_10001EE68(uint64_t a1)
{
  void *v2;

  sub_10001EEA0(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_10001EEA0(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_10001EEDC(uint64_t a1)
{
  void *v2;

  sub_10001EF14(a1, *(void **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_10001EF14(uint64_t a1, void *a2)
{
  void *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_QWORD **)v2;
      sub_10001CE40((uint64_t)v2 + 24, *((_QWORD **)v2 + 4));

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_10001EFBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001EFCC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_10001FA20((void **)a1, a2 - v2);
  }
}

void sub_10001F0A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001F294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001F320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001F388(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_10001F4DC(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      sub_100007810();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10001FB2C(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 3;
        v23 = (char *)sub_10001FB2C(v8, v22);
        v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[16 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 16 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v28 = v20 + 16;
    v4 = (char *)sub_10001FCA8((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_10001F6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10001F800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001F8E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001F9DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001FA20(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_100007810();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_10001FB2C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *sub_10001FB2C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_1000078E0();
  return operator new(16 * a2);
}

char *sub_10001FB60(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      sub_100007810();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_10001FC68(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_10001FC68(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_100007810();
  result = (char *)sub_10001FB2C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_10001FCA8(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

id sub_100020860(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_buildMenuTitles:forSelectionPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10002095C(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLiOSCanvasViewControllerAccessibility;
  return objc_msgSendSuper2(&v3, "showEditMenuForSelectionPath:", v1);
}

void sub_100021580(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000215B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100021B5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100021B8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100021BBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100021BEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100022870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, id *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *a19)
{
  id *v19;
  uint64_t v20;

  objc_destroyWeak(v19);
  objc_destroyWeak((id *)(v20 - 168));
  _Unwind_Resume(a1);
}

uint64_t sub_1000228E0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "crlaxKnobPositionAdjustedByDistance:inDirection:", 0, *(double *)(a1 + 48));
  objc_msgSend(v4, "crlaxMoveKnobToRepPositionInNaturalSpace:");

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000229B8;
  v7[3] = &unk_10122D4C0;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(v7, 0.5);
  objc_destroyWeak(&v8);

  return 1;
}

void sub_1000229A4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000229B8(uint64_t a1)
{
  UIAccessibilityNotifications v1;
  id WeakRetained;

  v1 = UIAccessibilityLayoutChangedNotification;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  UIAccessibilityPostNotification(v1, WeakRetained);

}

uint64_t sub_100022A00(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "crlaxKnobPositionAdjustedByDistance:inDirection:", 1, *(double *)(a1 + 48));
  objc_msgSend(v4, "crlaxMoveKnobToRepPositionInNaturalSpace:");

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100022AD8;
  v7[3] = &unk_10122D4C0;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(v7, 0.5);
  objc_destroyWeak(&v8);

  return 1;
}

void sub_100022AC4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100022AD8(uint64_t a1)
{
  UIAccessibilityNotifications v1;
  id WeakRetained;

  v1 = UIAccessibilityLayoutChangedNotification;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  UIAccessibilityPostNotification(v1, WeakRetained);

}

uint64_t sub_100022B20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "crlaxKnobPositionAdjustedByDistance:inDirection:", 2, *(double *)(a1 + 48));
  objc_msgSend(v4, "crlaxMoveKnobToRepPositionInNaturalSpace:");

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100022BF8;
  v7[3] = &unk_10122D4C0;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(v7, 0.5);
  objc_destroyWeak(&v8);

  return 1;
}

void sub_100022BE4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100022BF8(uint64_t a1)
{
  UIAccessibilityNotifications v1;
  id WeakRetained;

  v1 = UIAccessibilityLayoutChangedNotification;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  UIAccessibilityPostNotification(v1, WeakRetained);

}

uint64_t sub_100022C40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "crlaxKnobPositionAdjustedByDistance:inDirection:", 3, *(double *)(a1 + 48));
  objc_msgSend(v4, "crlaxMoveKnobToRepPositionInNaturalSpace:");

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100022D18;
  v7[3] = &unk_10122D4C0;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(v7, 0.5);
  objc_destroyWeak(&v8);

  return 1;
}

void sub_100022D04(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100022D18(uint64_t a1)
{
  UIAccessibilityNotifications v1;
  id WeakRetained;

  v1 = UIAccessibilityLayoutChangedNotification;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  UIAccessibilityPostNotification(v1, WeakRetained);

}

uint64_t sub_100022D60(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v14;

  v3 = a2;
  v14 = 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "knob"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "crlaxCreateKnobTracker"));

  v8 = (objc_class *)objc_opt_class(_TtC8Freeform33CRLShapeConnectionLineKnobTracker, v7);
  v9 = __CRLAccessibilityCastAsClass(v8, (uint64_t)v6, 1, &v14);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (v14)
    abort();
  v11 = (void *)v10;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "knob"));
  objc_msgSend(v12, "crlaxPositionInUnscaledCanvas");
  objc_msgSend(v11, "crlaxAccessibilityRequestsDuplicateItemInsertFromKnobAt:");

  return 1;
}

BOOL sub_100023044(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v12;

  v3 = a2;
  v12 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "knob"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "crlaxCreateKnobTracker"));

  v7 = (objc_class *)objc_opt_class(_TtC8Freeform33CRLShapeConnectionLineKnobTracker, v6);
  v8 = __CRLAccessibilityCastAsClass(v7, (uint64_t)v5, 1, &v12);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (v12)
    abort();
  v10 = (void *)v9;

  if (v10)
    objc_msgSend(v10, "crlaxAccessibilityRequestsConnectionTo:", *(double *)(a1 + 40), *(double *)(a1 + 48));

  return v10 != 0;
}

id sub_1000230F4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "knob"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parentRep"));
  objc_msgSend(v3, "crlaxConvertNaturalPointFromUnscaledCanvas:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  objc_msgSend(v2, "crlaxMoveKnobToRepPositionInNaturalSpace:shouldSnapToMagnets:", 1);

  return _objc_msgSend(*(id *)(a1 + 32), "i_crlaxEnsureReciprocalConnectionsAfterConnectingConnectionLineToRep:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_10002323C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "knob"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parentRep"));
  objc_msgSend(v3, "crlaxConvertNaturalPointFromUnscaledCanvas:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  objc_msgSend(v2, "crlaxMoveKnobToRepPositionInNaturalSpace:shouldSnapToMagnets:", 1);

  return 1;
}

void sub_1000235A4(uint64_t a1)
{
  UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, *(id *)(a1 + 32));
}

id sub_100023830(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "disconnectConnectedConnectionLineEndIfNecessary");
}

id sub_100023964(id a1, PHPickerResult *a2)
{
  return -[PHPickerResult itemProvider](a2, "itemProvider");
}

void sub_100023D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  id *v41;
  id *v42;
  uint64_t v43;

  objc_destroyWeak(v42);
  objc_destroyWeak(v41);
  _Block_object_dispose((const void *)(v43 - 176), 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v43 - 224), 8);
  objc_destroyWeak((id *)(v43 - 184));
  _Unwind_Resume(a1);
}

void sub_100023DB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("PHPickerViewControllerCRLAdditionsLogCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7A80;
  off_1013D7A80 = v2;

}

uint64_t sub_100023DE4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100023DF4(uint64_t a1)
{

}

void sub_100023DFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  id v21;
  id v22;
  id v23;
  id v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100023F40;
  v20[3] = &unk_10122D6D8;
  v25 = *(_OWORD *)(a1 + 48);
  v26 = *(_QWORD *)(a1 + 64);
  v20[4] = *(_QWORD *)(a1 + 32);
  objc_copyWeak(&v28, (id *)(a1 + 80));
  v10 = *(id *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 72);
  v24 = v10;
  v27 = v11;
  v12 = v7;
  v21 = v12;
  v13 = v8;
  v22 = v13;
  v14 = v9;
  v23 = v14;
  v15 = objc_retainBlock(v20);
  ((void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))v15[2])(v15, v16, v17, v18, v19);

  objc_destroyWeak(&v28);
}

void sub_100023F2C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100023F40(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];
  id v28;
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 32));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
  {
    if (qword_10147E340 != -1)
      dispatch_once(&qword_10147E340, &stru_10122D608);
    v2 = off_1013D7A80;
    if (os_log_type_enabled((os_log_t)off_1013D7A80, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(void **)(a1 + 32);
      v4 = v2;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "publicString"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateString"));
      *(_DWORD *)buf = 138543618;
      v33 = v5;
      v34 = 2112;
      v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Ignoring results because user cancelled asset loading", buf, 0x16u);

    }
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

    if (WeakRetained)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
      {
        if (qword_10147E340 != -1)
          dispatch_once(&qword_10147E340, &stru_10122D648);
        v8 = off_1013D7A80;
        if (os_log_type_enabled((os_log_t)off_1013D7A80, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *(void **)(a1 + 32);
          v10 = v8;
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "publicString"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateString"));
          *(_DWORD *)buf = 138543618;
          v33 = v11;
          v34 = 2112;
          v35 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Dismissing progress UI.", buf, 0x16u);

        }
        v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_100024464;
        v27[3] = &unk_10122D690;
        v27[4] = *(_QWORD *)(a1 + 32);
        v31 = *(id *)(a1 + 64);
        v28 = *(id *)(a1 + 40);
        v29 = *(id *)(a1 + 48);
        v30 = *(id *)(a1 + 56);
        objc_msgSend(v13, "dismissViewControllerAnimated:completion:", 1, v27);

      }
      else
      {
        if (qword_10147E340 != -1)
          dispatch_once(&qword_10147E340, &stru_10122D6B0);
        v21 = off_1013D7A80;
        if (os_log_type_enabled((os_log_t)off_1013D7A80, OS_LOG_TYPE_DEFAULT))
        {
          v22 = *(void **)(a1 + 32);
          v23 = v21;
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "publicString"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateString"));
          *(_DWORD *)buf = 138543618;
          v33 = v24;
          v34 = 2112;
          v35 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Assets loaded. Calling completion handler.", buf, 0x16u);

        }
        v26 = *(_QWORD *)(a1 + 64);
        if (v26)
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v26 + 16))(v26, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
    }
    else
    {
      if (qword_10147E340 != -1)
        dispatch_once(&qword_10147E340, &stru_10122D628);
      v14 = off_1013D7A80;
      if (os_log_type_enabled((os_log_t)off_1013D7A80, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(void **)(a1 + 32);
        v16 = v14;
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "publicString"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateString"));
        *(_DWORD *)buf = 138543618;
        v33 = v17;
        v34 = 2112;
        v35 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ User dismissed picker before assets loaded", buf, 0x16u);

      }
      v19 = *(_QWORD *)(a1 + 64);
      if (v19)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSCocoaErrorDomain, 3072, 0));
        (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v19 + 16))(v19, 0, 0, v20);

      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 32));
}

void sub_1000243E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("PHPickerViewControllerCRLAdditionsLogCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7A80;
  off_1013D7A80 = v2;

}

void sub_10002440C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("PHPickerViewControllerCRLAdditionsLogCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7A80;
  off_1013D7A80 = v2;

}

void sub_100024438(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("PHPickerViewControllerCRLAdditionsLogCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7A80;
  off_1013D7A80 = v2;

}

uint64_t sub_100024464(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t result;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;

  if (qword_10147E340 != -1)
    dispatch_once(&qword_10147E340, &stru_10122D668);
  v2 = off_1013D7A80;
  if (os_log_type_enabled((os_log_t)off_1013D7A80, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "publicString"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateString"));
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Finished dismissing progress UI. Calling completion handler.", (uint8_t *)&v8, 0x16u);

  }
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return result;
}

void sub_10002458C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("PHPickerViewControllerCRLAdditionsLogCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7A80;
  off_1013D7A80 = v2;

}

void sub_1000245B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("PHPickerViewControllerCRLAdditionsLogCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7A80;
  off_1013D7A80 = v2;

}

void sub_1000245E4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32));
}

void sub_10002462C(uint64_t a1)
{
  id WeakRetained;
  int v3;
  void *v4;
  void *v5;
  double v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void **v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *);
  void *v24;
  uint64_t v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32));
  if (WeakRetained)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32));
    if (!v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Inserting…"), 0, 0));

      objc_msgSend(*(id *)(a1 + 32), "fractionCompleted");
      if (v6 == 1.0 || fabs(v6 + -1.0) < 0.01)
        v7 = (id)objc_claimAutoreleasedReturnValue(+[NSProgress discreteProgressWithTotalUnitCount:](NSProgress, "discreteProgressWithTotalUnitCount:", -1));
      else
        v7 = *(id *)(a1 + 32);
      v8 = v7;
      v9 = objc_claimAutoreleasedReturnValue(+[UIAlertController crl_progressAlertControllerWithTitle:message:preferredStyle:progress:](UIAlertController, "crl_progressAlertControllerWithTitle:message:preferredStyle:progress:", v5, 0, 1, v7));
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("Cancel"), 0, 0));
      v21 = _NSConcreteStackBlock;
      v22 = 3221225472;
      v23 = sub_100024934;
      v24 = &unk_10122D770;
      v14 = *(void **)(a1 + 48);
      v25 = *(_QWORD *)(a1 + 40);
      v26 = v14;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v13, 1, &v21));

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "addAction:", v15, v21, v22, v23, v24, v25);
      if (qword_10147E340 != -1)
        dispatch_once(&qword_10147E340, &stru_10122D790);
      v16 = off_1013D7A80;
      if (os_log_type_enabled((os_log_t)off_1013D7A80, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(void **)(a1 + 40);
        v18 = v16;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "publicString"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "privateString"));
        *(_DWORD *)buf = 138543618;
        v28 = v19;
        v29 = 2112;
        v30 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ Presenting progress", buf, 0x16u);

      }
      objc_msgSend(WeakRetained, "presentViewController:animated:completion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), 1, 0);

    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32));
  }

}

void sub_100024934(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;

  v3 = a2;
  if (qword_10147E340 != -1)
    dispatch_once(&qword_10147E340, &stru_10122D748);
  v4 = off_1013D7A80;
  if (os_log_type_enabled((os_log_t)off_1013D7A80, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicString"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateString"));
    v9 = 138543618;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ %@ User cancelled asset loading", (uint8_t *)&v9, 0x16u);

  }
  objc_msgSend(*(id *)(a1 + 40), "cancel");

}

void sub_100024A60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("PHPickerViewControllerCRLAdditionsLogCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7A80;
  off_1013D7A80 = v2;

}

void sub_100024A8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("PHPickerViewControllerCRLAdditionsLogCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7A80;
  off_1013D7A80 = v2;

}

uint64_t sub_100024BFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100024CCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100024D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CRLWPRenderer;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000255F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100025694(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000256C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1000256F4(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  CGContext *v15;
  const __CTLine *v16;
  uint64_t v17;
  CGAffineTransform transform;
  _BYTE v19[104];
  _BYTE v20[104];

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v8 = result;
    v9 = 1;
    do
    {
      v10 = *(double *)(v4 + 8);
      v11 = *(double *)(v4 + 16);
      sub_10019F9CC(v20, v4);
      v12 = *(double *)(*(_QWORD *)(v8 + 40) + 40);
      v13 = *(double *)(v8 + 48);
      CGContextSaveGState(*(CGContextRef *)(*(_QWORD *)(v8 + 32) + 16));
      CGContextTranslateCTM(*(CGContextRef *)(*(_QWORD *)(v8 + 32) + 16), v10 + v12, v11 + v13);
      objc_msgSend(*(id *)(v8 + 32), "p_setCTMAndTextPositionForFragment:state:", *(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 56));
      if (*(_BYTE *)(v8 + 64)
        || (*(_WORD *)(*(_QWORD *)(v8 + 40) + 24) & 0x420) != 0
        || *(_QWORD *)(*(_QWORD *)(v8 + 56) + 56)
        || *(_BYTE *)(v8 + 65))
      {
        v14 = *(void **)(v8 + 32);
        sub_10019F9CC(v19, v20);
        LOBYTE(v17) = v9 & 1;
        objc_msgSend(v14, "p_drawTextInRunsForLine:fragment:state:listLabel:tateChuYoko:ruby:baseRange:isFirstLineRef:", v19, *(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 56), 0, a3, a4, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), v17);
        sub_10019FA00(v19);
      }
      else
      {
        v15 = *(CGContext **)(*(_QWORD *)(v8 + 32) + 16);
        CGAffineTransformMakeScale(&transform, 1.0, -1.0);
        CGContextConcatCTM(v15, &transform);
        v16 = (const __CTLine *)sub_10019FA78((uint64_t)v20);
        CTLineDraw(v16, *(CGContextRef *)(*(_QWORD *)(v8 + 32) + 16));
      }
      CGContextRestoreGState(*(CGContextRef *)(*(_QWORD *)(v8 + 32) + 16));
      result = sub_10019FA00(v20);
      v9 = 0;
      v4 += 104;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_100025880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_10019FA00(&a19);
  sub_10019FA00(&a32);
  _Unwind_Resume(a1);
}

void sub_100025E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100025F14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100025F44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100025FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000267E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1000268A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000268D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100026900(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100026930(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100027000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1000270B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000270E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100027110(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100027140(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100027814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_100027918(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100027948(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100027D90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100027DB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100027DE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100028170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1000281D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100028200(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100028230(int a1, NSRange range1)
{
  NSUInteger length;
  NSUInteger location;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSUInteger v7;
  NSRange v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSRange v18;

  length = range1.length;
  location = range1.location;
  v5 = v4;
  range1.length = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = range1.location;
  range1.location = length;
  if (!NSIntersectionRange(range1, *(&range1 + 8)).length)
  {
    v18.location = location;
    v18.length = length;
    v8 = NSIntersectionRange(v18, *(NSRange *)(v5 + 56));
    if (v8.length)
    {
      v9 = sub_10013F8F8(*(_QWORD *)(v5 + 72), v8.location, 1, 1, 0);
      v10 = rint(sub_10013F8F8(*(_QWORD *)(v5 + 72), v8.location + v8.length, 1, 1, 0) - v9);
      if (v10 >= 0.0)
        v11 = v10;
      else
        v11 = -v10;
      if (v10 >= 0.0)
        v10 = -0.0;
      if (v11 != 0.0)
      {
        v12 = v9 + v10;
        v13 = fmod(v11, 4.0);
        if (v13 <= 1.0)
          v14 = -v13;
        else
          v14 = 4.0 - v13;
        v15 = fmax(v11 + v14, 4.0);
        v16 = sub_10013E838(*(_QWORD *)(v5 + 72));
        if (*(_BYTE *)(v5 + 184))
        {
          v17 = floor(v16 - *(double *)(v5 + 104)) - 1.79999995;
        }
        else if (*(_BYTE *)(v5 + 185))
        {
          v17 = floor(v16 + *(double *)(v5 + 120));
        }
        else
        {
          v17 = floor(v16) + 1.79999995;
        }
        objc_msgSend(*(id *)(v5 + 32), "p_strokeLineFromPoint:toPoint:width:", v12, v17, v12 + v15, v17);
      }
    }
  }
}

void sub_10002846C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10002856C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100028614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100028698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100028A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100028BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000291F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100029744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_10002980C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002983C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002A3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  void *v43;
  void *v44;

  _Unwind_Resume(a1);
}

void sub_10002A534(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10002A564(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002A594(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002AAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10002AB70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002ABA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002ACFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002AE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10002B288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_10002B304(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002B334(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002B468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10002B5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_10002B7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_10002B980(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10002B9F4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_10002B9D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10002B9F4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_100007810();
  result = (char *)sub_10002BA34((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_10002BA34(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1000078E0();
  return operator new(8 * a2);
}

_QWORD *sub_10002BA68(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10001FC68(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_10002BAC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002BB1C(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("CRLPasteboard.ActivePasteboards", v4);
  v3 = (void *)qword_101414B38;
  qword_101414B38 = (uint64_t)v2;

}

void sub_10002BBAC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSMapTable), "initWithKeyOptions:valueOptions:capacity:", 0, 5, 1);
  v2 = (void *)qword_101414B48;
  qword_101414B48 = (uint64_t)v1;

}

void sub_10002BCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002BCEC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002BCFC(uint64_t a1)
{

}

void sub_10002BD04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "activePasteboards"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10002BDDC(uint64_t a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  _QWORD block[5];

  v2 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 32), "pasteboardClass")), "initWithGeneralPasteboard");
  v3 = (void *)qword_101414B58;
  qword_101414B58 = (uint64_t)v2;

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activePasteboardsQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002BE70;
  block[3] = &unk_10122DC38;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v4, block);

}

void sub_10002BE70(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activePasteboards"));
  v1 = qword_101414B58;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_101414B58, "name"));
  objc_msgSend(v3, "setObject:forKey:", v1, v2);

}

void sub_10002BFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002BFE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "activePasteboards"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v5 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 48), "pasteboardClass")), "initWithPasteboardName:create:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v8)
      objc_msgSend(v9, "setObject:forKey:", v8, *(_QWORD *)(a1 + 32));
  }

}

void sub_10002C13C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activePasteboards"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v3));

  if (v4)
  {
    v5 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122DC80);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9904((uint64_t)v3, v5, v6);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122DCA0);
    v7 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE8358(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[CRLPasteboard pasteboardWithUniqueName]_block_invoke"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboard.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 185, 0, "Pasteboard already exists with unique name %{public}@", v3);

  }
  objc_msgSend(v2, "setObject:forKey:", *(_QWORD *)(a1 + 32), v3);

}

void sub_10002C2E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002C314(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002C434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002C44C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "activePasteboards"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v6 = objc_msgSend(objc_alloc((Class)objc_msgSend(*(id *)(a1 + 48), "pasteboardClass")), "initWithNativePasteboard:", *(_QWORD *)(a1 + 32));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v9)
      objc_msgSend(v10, "setObject:forKey:", v9, v2);
  }

}

void sub_10002CBAC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pasteboardWithName:create:", CFSTR("com.apple.freeform.stylepasteboard"), 1));
  v2 = (void *)qword_101414B68;
  qword_101414B68 = v1;

}

void sub_10002CCFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10002D4C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002D4F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002DBF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002DC24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_10002F3F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10002F424(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002F454(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002F484(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = objc_autoreleasePoolPush();
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pasteboardPropertyListForType:", v3));
  v6 = (void *)v5;
  if (v5)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
    v7 = *(void **)(a1 + 40);
    v9 = v3;
    v10 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    objc_msgSend(v7, "addPasteboardItem:atIndex:", v8);

  }
  objc_autoreleasePoolPop(v4);

}

void sub_10002F580(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002F5B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002FA30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002FA60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002FBDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002FC0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002FF38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10002FF68(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100030420(uint64_t a1)
{
  if ((a1 & 1) != 0)
    return 2;
  else
    return (a1 << 62 >> 63) & 3;
}

CFStringRef sub_1000304A4()
{
  return (id)kUTTypeJPEG2000;
}

id sub_1000304B4()
{
  if (qword_101414B80 != -1)
    dispatch_once(&qword_101414B80, &stru_10122DF58);
  return (id)qword_101414B78;
}

void sub_1000304F4(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", kUTTypePICT));
  v2 = (void *)qword_101414B78;
  qword_101414B78 = v1;

  if (!qword_101414B78)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122DF78);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9B7C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122DF98);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTType * _Nonnull CRLPICTUTType(void)_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 108, 0, "invalid nil value for '%{public}s'", "pictUTType");

  }
}

void sub_100030674(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000306A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000306D4()
{
  if (qword_101414B90 != -1)
    dispatch_once(&qword_101414B90, &stru_10122DFB8);
  return (id)qword_101414B88;
}

void sub_100030714(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", CFSTR("com.apple.mail.email")));
  v2 = (void *)qword_101414B88;
  qword_101414B88 = v1;

  if (!qword_101414B88)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122DFD8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9C08();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122DFF8);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTType * _Nonnull CRLMailEmailMessageUTType(void)_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 138, 0, "invalid nil value for '%{public}s'", "CRLMailEmailMessageType");

  }
}

void sub_100030890(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000308C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000308F0()
{
  if (qword_101414BA0 != -1)
    dispatch_once(&qword_101414BA0, &stru_10122E018);
  return (id)qword_101414B98;
}

void sub_100030930(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", CFSTR("com.apple.notes.richtext")));
  v2 = (void *)qword_101414B98;
  qword_101414B98 = v1;

  if (!qword_101414B98)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E038);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9C94();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E058);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTType * _Nonnull CRLNotesRichTextUTType(void)_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 148, 0, "invalid nil value for '%{public}s'", "CRLRichTextType");

  }
}

void sub_100030AAC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100030ADC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100030B0C()
{
  if (qword_101414BB0 != -1)
    dispatch_once(&qword_101414BB0, &stru_10122E078);
  return (id)qword_101414BA8;
}

void sub_100030B4C(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", CFSTR("com.apple.drawing")));
  v2 = (void *)qword_101414BA8;
  qword_101414BA8 = v1;

  if (!qword_101414BA8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E098);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9D20();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E0B8);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTType * _Nonnull CRLDrawingUTType(void)_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 158, 0, "invalid nil value for '%{public}s'", "CRLDrawingType");

  }
}

void sub_100030CC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100030CF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100030D28()
{
  if (qword_101414BC0 != -1)
    dispatch_once(&qword_101414BC0, &stru_10122E0D8);
  return (id)qword_101414BB8;
}

void sub_100030D68(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", CFSTR("com.apple.notes.table")));
  v2 = (void *)qword_101414BB8;
  qword_101414BB8 = v1;

  if (!qword_101414BB8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E0F8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9DAC();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E118);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTType * _Nonnull CRLNotesTableUTType(void)_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 168, 0, "invalid nil value for '%{public}s'", "CRLTableType");

  }
}

void sub_100030EE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100030F14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100030F44()
{
  if (qword_101414BD0 != -1)
    dispatch_once(&qword_101414BD0, &stru_10122E138);
  return (id)qword_101414BC8;
}

void sub_100030F84(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", CFSTR("com.apple.ical.ics")));
  v2 = (void *)qword_101414BC8;
  qword_101414BC8 = v1;

  if (!qword_101414BC8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E158);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9E38();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E178);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTType * _Nonnull CRLiCalICSEventUTType(void)_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 180, 0, "invalid nil value for '%{public}s'", "CRLiCalEventType");

  }
}

void sub_100031100(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100031130(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000311A0(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[2];

  v3[0] = CFSTR("com.apple.freeform.CRLNativeMetadata");
  v3[1] = CFSTR("com.apple.freeform.CRLNativeData");
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 2));
  v2 = (void *)qword_101414BD8;
  qword_101414BD8 = v1;

}

void sub_100031268(id a1)
{
  CFArrayRef v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[3];

  v1 = CGImageSourceCopyTypeIdentifiers();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypePDF, "identifier"));
  v6[0] = v2;
  v6[1] = CFSTR("com.adobe.encapsulated-postscript");
  v6[2] = CFSTR("com.adobe.illustrator.ai-image");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v6, 3));
  v4 = objc_claimAutoreleasedReturnValue(-[__CFArray arrayByAddingObjectsFromArray:](v1, "arrayByAddingObjectsFromArray:", v3));
  v5 = (void *)qword_101414BE8;
  qword_101414BE8 = v4;

}

void sub_1000313B0(uint64_t a1)
{
  void *v1;
  NSMutableArray *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "supportedImageTypes"));
  v2 = objc_opt_new(NSMutableArray);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v7), (_QWORD)v11));
        if (v8)
          -[NSMutableArray addObject:](v2, "addObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = -[NSMutableArray copy](v2, "copy");
  v10 = (void *)qword_101414BF8;
  qword_101414BF8 = (uint64_t)v9;

}

void sub_100031540(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[11];

  v3[0] = CFSTR("com.apple.atx");
  v3[1] = CFSTR("org.khronos.astc");
  v3[2] = CFSTR("org.khronos.ktx");
  v3[3] = CFSTR("com.microsoft.cur");
  v3[4] = CFSTR("public.radiance");
  v3[5] = CFSTR("public.pbm");
  v3[6] = CFSTR("public.pvr");
  v3[7] = CFSTR("com.microsoft.dds");
  v3[8] = CFSTR("org.khronos.ktx2");
  v3[9] = CFSTR("public.avis");
  v3[10] = CFSTR("com.sony.axr-raw-image");
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 11));
  v2 = (void *)qword_101414C08;
  qword_101414C08 = v1;

}

id sub_10003221C()
{
  if (qword_101414C20 != -1)
    dispatch_once(&qword_101414C20, &stru_10122E1F8);
  return (id)qword_101414C18;
}

void sub_10003225C(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", CFSTR("com.apple.mapkit.map-item")));
  v2 = (void *)qword_101414C18;
  qword_101414C18 = v1;

  if (!qword_101414C18)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E218);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9EC4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E238);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTType * _Nonnull CRLMapKitMapItemUTType(void)_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 351, 0, "invalid nil value for '%{public}s'", "CRLMapKitMapItemUTType");

  }
}

void sub_1000323D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100032408(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100032438()
{
  if (qword_101414C30 != -1)
    dispatch_once(&qword_101414C30, &stru_10122E258);
  return (id)qword_101414C28;
}

void sub_100032478(id a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", CFSTR("public.heics")));
  v2 = (void *)qword_101414C28;
  qword_101414C28 = v1;

  if (!qword_101414C28)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E278);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE9F50();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E298);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTType * _Nonnull CRLHEICSUTType(void)_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLIngestionTypes.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 366, 0, "invalid nil value for '%{public}s'", "CRLHEICSUTType");

  }
}

void sub_1000325F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100032624(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100032C88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100032CB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000331B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000331E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100033214(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100033244(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000333DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003340C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000336D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100033D3C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD block[5];
  id v7;
  uint64_t v8;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100033DC0;
  block[3] = &unk_10122D3B0;
  v4 = *(_QWORD *)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100033DC0(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *j;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  CRLCommandSelectionBehavior *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *k;
  void *v37;
  id v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  CRLFreehandDrawingStraightenHelper *v44;
  _TtC8Freeform15CRLCommandGroup *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint64_t v59;
  _BYTE v60[128];
  _BYTE v61[128];

  if (!*((_BYTE *)a1[4] + 8))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "allKeys"));
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v54, v61, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v55;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v55 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * (_QWORD)i);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "strokeUUIDsToDrawingShapeItems"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", v8));

          v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKey:", v8));
          v12 = (void *)v11;
          if (v10)
            v13 = v11 == 0;
          else
            v13 = 1;
          if (!v13)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pencilKitStrokePathCompactData"));
            v15 = v14;
            if (v14 && objc_msgSend(v14, "shouldSolveMath"))
              objc_msgSend(v12, "_setFlags:", (unint64_t)objc_msgSend(v12, "_flags") | 0x20000000000);
            objc_msgSend(v2, "setObject:forKey:", v10, v12);

          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v54, v61, 16);
      }
      while (v5);
    }

    v44 = -[CRLFreehandDrawingStraightenHelper initWithInteractiveCanvasController:]([CRLFreehandDrawingStraightenHelper alloc], "initWithInteractiveCanvasController:", a1[6]);
    v45 = objc_alloc_init(_TtC8Freeform15CRLCommandGroup);
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v16 = v2;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allKeys"));
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v51;
      do
      {
        for (j = 0; j != v19; j = (char *)j + 1)
        {
          if (*(_QWORD *)v51 != v20)
            objc_enumerationMutation(v17);
          v22 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)j);
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKey:", v22, v44));
          v59 = v22;
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v59, 1));
          v25 = (void *)objc_claimAutoreleasedReturnValue(-[CRLFreehandDrawingStraightenHelper commandForStraighteningShapeItem:toStrokesInUnscaledSpace:](v44, "commandForStraighteningShapeItem:toStrokesInUnscaledSpace:", v23, v24));

          -[CRLCommandGroup addCommand:](v45, "addCommand:", v25);
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
      }
      while (v19);
    }

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "commandController"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "canvasEditor"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allValues"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v28));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "selectionPathWithInfos:", v29));

    v31 = -[CRLCommandSelectionBehavior initWithForwardSelectionPath:reverseSelectionPath:]([CRLCommandSelectionBehavior alloc], "initWithForwardSelectionPath:reverseSelectionPath:", v30, v30);
    objc_msgSend(v26, "openGroup");
    objc_msgSend(v26, "enqueueCommand:", v45);
    objc_msgSend(v26, "closeGroupWithSelectionBehavior:", v31);
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allValues"));
    v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
    if (v33)
    {
      v34 = v33;
      v35 = *(_QWORD *)v47;
      while (2)
      {
        for (k = 0; k != v34; k = (char *)k + 1)
        {
          if (*(_QWORD *)v47 != v35)
            objc_enumerationMutation(v32);
          if (!objc_msgSend(*((id *)a1[4] + 8), "containsObject:", *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)k), v44))
          {

            objc_msgSend(a1[4], "p_removeCurrentSelectionView");
            objc_msgSend(*((id *)a1[4] + 8), "removeAllObjects");
            goto LABEL_34;
          }
        }
        v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
        if (v34)
          continue;
        break;
      }
    }

    objc_msgSend(a1[4], "p_removeCurrentSelectionView");
    objc_msgSend(*((id *)a1[4] + 8), "removeAllObjects");
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allValues"));
    v38 = objc_msgSend(v37, "mutableCopy");
    v39 = a1[4];
    v40 = (void *)v39[8];
    v39[8] = v38;

LABEL_34:
  }
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "editingCoordinator", v44));
  objc_msgSend(v41, "resumeCollaborationWithReason:", CFSTR("CRLFreehandDrawingAsyncStraightenStrokes"));

  objc_msgSend(*((id *)a1[4] + 11), "endIgnoringUserInteractionSafely");
  v42 = a1[4];
  v43 = (void *)v42[11];
  v42[11] = 0;

}

void sub_100034670(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000346A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100034964(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100034994(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100034C8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100034CBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000351A8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "smartSelectionView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_100035890(id *a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v10[5];
  _QWORD v11[2];
  _QWORD v12[2];

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    objc_msgSend(a1[4], "setRecognitionEnabled:", 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "indexableContent"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "presentableTextRepresentation"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "componentsSeparatedByString:", CFSTR("\n")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100035A38;
    v10[3] = &unk_10122E508;
    v10[4] = v6;
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v10);
    if (v5 && objc_msgSend(a1[5], "length"))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      v8 = a1[5];
      v11[0] = CFSTR("CRLActiveBoardDidUpdateDrawingIndexedContentsBoardIdentifierString");
      v11[1] = CFSTR("CRLActiveBoardDidUpdateDrawingIndexedContents");
      v12[0] = v8;
      v12[1] = v6;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 2));
      objc_msgSend(v7, "postNotificationName:object:userInfo:", CFSTR("CRLActiveBoardDidUpdateDrawingIndexedContentsNotification"), 0, v9);

    }
  }

}

void sub_100035A38(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (objc_msgSend(v3, "length"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void sub_100035B3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100035C2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100035FF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100036028(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100036490(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000364C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000371E8(id a1, id a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByTrimmingCharactersInSet:", v3));

  return v4;
}

void sub_1000381D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100038208(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000384AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000384DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100038988(_QWORD *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 4;
}

uint64_t sub_100038998(_QWORD *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4)
    return 0;
  else
    return *(_QWORD *)(*a1 + 16 * a2);
}

uint64_t sub_1000389BC(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (v1 == *a1)
    return 0;
  else
    return *(_QWORD *)(v1 - 16);
}

uint64_t sub_1000389D8(char **a1, __int128 *a2)
{
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  _QWORD *v27;

  v3 = *a2;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (uint64_t)(a1 + 2);
  v7 = (unint64_t)a1[2];
  v8 = a1[1];
  if ((unint64_t)v8 >= v7)
  {
    v23 = v3;
    v10 = (v8 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_100007810();
    v11 = v7 - (_QWORD)*a1;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v27 = a1 + 2;
    v14 = (char *)sub_10001FB2C(result, v13);
    v16 = &v14[16 * v10];
    *(_OWORD *)v16 = v23;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v21 = vdupq_n_s64((unint64_t)v17);
      v19 = &v14[16 * v10];
    }
    else
    {
      v19 = &v14[16 * v10];
      do
      {
        v20 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v19 - 1) = v20;
        v19 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v21 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v19;
    a1[1] = v16 + 16;
    v25 = v21;
    v22 = a1[2];
    a1[2] = &v14[16 * v15];
    v26 = v22;
    v24 = v21.i64[0];
    result = sub_100038D18((uint64_t)&v24);
  }
  else
  {
    *(_OWORD *)v8 = v3;
    v9 = v8 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_100038B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100038CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100038B14(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = a1[1];
  v3 = *a1;
  while (result != v3)
    result = sub_100038CC0(result - 16);
  a1[1] = v3;
  return result;
}

__n64 sub_100038B50(uint64_t *a1, char a2)
{
  __n64 result;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v6;
  uint64_t v7;
  CGFloat *v9;
  uint64_t v10;
  CGRect v11;

  result.n64_u64[0] = *(unint64_t *)&CGRectNull.origin.x;
  y = CGRectNull.origin.y;
  width = CGRectNull.size.width;
  height = CGRectNull.size.height;
  v7 = *a1;
  v6 = a1[1];
  if (v6 != *a1)
  {
    if ((a2 & 1) != 0)
    {
      v9 = *(CGFloat **)(v6 - 16);
      v6 -= 16;
      v11.origin.x = v9[9];
      v11.origin.y = v9[10];
      v11.size.width = v9[11];
      v11.size.height = v9[12] - v9[20];
      *(CGRect *)result.n64_u64 = CGRectUnion(*(CGRect *)result.n64_u64, v11);
      v7 = *a1;
    }
    while (v6 != v7)
    {
      v10 = *(_QWORD *)(v6 - 16);
      v6 -= 16;
      *(CGRect *)result.n64_u64 = CGRectUnion(*(CGRect *)result.n64_u64, *(CGRect *)(v10 + 72));
    }
  }
  return result;
}

void sub_100038BCC(double ***a1, double a2, double a3)
{
  double **v3;
  double **v4;
  double *v7;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v7 = *v3;
      v3 += 2;
      sub_1001491BC(v7, a2, a3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_100038C18(uint64_t *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double v5;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    return 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(double *)(*(_QWORD *)v2 + 32);
      if (v5 == a2)
      {
        ++v4;
      }
      else if (v5 > a2)
      {
        return v4;
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
  return v4;
}

NSUInteger sub_100038C60(uint64_t a1)
{
  NSRange *v1;
  uint64_t v2;
  unint64_t v3;
  __int128 *v4;
  NSRange v5;
  NSRange *v6;

  v1 = (NSRange *)&xmmword_100EEE418;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v2 - *(_QWORD *)a1;
  if (v2 == *(_QWORD *)a1)
    return 0x7FFFFFFFFFFFFFFFLL;
  v4 = **(__int128 ***)a1;
  if (*((uint64_t *)v4 + 3) < 0)
    v4 = &xmmword_100EEE418;
  v5.location = *(_QWORD *)v4;
  if (v3 >= 0x11)
  {
    v6 = *(NSRange **)(v2 - 16);
    if ((v6[1].length & 0x8000000000000000) == 0)
      v1 = v6;
    v5.length = *((_QWORD *)v4 + 1);
    v5.location = NSUnionRange(v5, *v1).location;
  }
  return v5.location;
}

uint64_t sub_100038CC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_100038D18(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_100038CC0(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100038F34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100038F64(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100039828(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crlaxTarget"));
  objc_msgSend(v1, "i_togglePlayPauseTriggeredFromKnob");

}

UIPointerStyle *__cdecl sub_100039D6C(id a1, UIButton *a2, UIPointerEffect *a3, UIPointerShape *a4)
{
  UIPointerEffect *v5;
  UIButton *v6;
  double v7;
  double v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  void *v33;

  v5 = a3;
  v6 = a2;
  +[UIPointerInteraction crl_toolbarRoundedRectWidth](UIPointerInteraction, "crl_toolbarRoundedRectWidth");
  v8 = v7;
  +[UIPointerInteraction crl_toolbarRoundedRectHeight](UIPointerInteraction, "crl_toolbarRoundedRectHeight");
  v9 = objc_claimAutoreleasedReturnValue(-[UIButton imageView](v6, "imageView"));
  v10 = (void *)v9;
  if (v9)
    v11 = (void *)v9;
  else
    v11 = v6;
  v12 = v11;

  v13 = (void *)objc_claimAutoreleasedReturnValue(-[UIPointerEffect preview](v5, "preview"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "target"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "container"));

  objc_msgSend(v12, "bounds");
  objc_msgSend(v12, "convertPoint:toView:", v15, sub_100061400(v16, v17, v18, v19));
  v21 = v20;
  v23 = v22;

  v24 = sub_10005FD98(v21, v23, v8);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  +[UIPointerInteraction crl_toolbarRoundedRectCornerRadius](UIPointerInteraction, "crl_toolbarRoundedRectCornerRadius");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[UIPointerShape shapeWithRoundedRect:cornerRadius:](UIPointerShape, "shapeWithRoundedRect:cornerRadius:", v24, v26, v28, v30, v31));
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[UIPointerStyle styleWithEffect:shape:](UIPointerStyle, "styleWithEffect:shape:", v5, v32));

  return (UIPointerStyle *)v33;
}

void sub_10003A240(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003A270(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003A2A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003A2D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003A4A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003A4D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003ADCC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003ADFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003AE2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003AE5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003B154(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003B184(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10003B228(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 17) = *(_BYTE *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "didChangeConfiguration");
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_10003DB48(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLDescription descriptionWithObject:format:](CRLDescription, "descriptionWithObject:format:", v1, CFSTR("; count=%lu"),
                   objc_msgSend(v1, "count")));
  if (objc_msgSend(v1, "count"))
  {
    v3 = 0;
    do
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[%lu]"), v3));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", v3));
      objc_msgSend(v2, "addField:format:", v4, CFSTR("%@"), v5);

      ++v3;
    }
    while (v3 < (unint64_t)objc_msgSend(v1, "count"));
  }
  objc_msgSend(v2, "setFieldOptionCommaSeparated");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "descriptionString"));

  return v6;
}

__CFString *sub_10003DC58(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  char isKindOfClass;
  const char *ClassName;
  NSString *v6;
  __CFString *v7;
  uint64_t v9;

  v2 = a1;
  if (v2)
  {
    objc_opt_class(NSArray, v1);
    isKindOfClass = objc_opt_isKindOfClass(v2, v3);
    ClassName = object_getClassName(v2);
    if ((isKindOfClass & 1) != 0)
      v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(%s*)%p; count=%lu"),
             ClassName,
             v2,
             objc_msgSend(v2, "count"));
    else
      v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(%s*)%p"), ClassName, v2, v9);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(v6);
  }
  else
  {
    v7 = CFSTR("<nil>");
  }

  return v7;
}

void sub_10003EB74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003EBA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

__n128 sub_10003ECFC(uint64_t a1)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a1 + 32) + 72);
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) = result;
  return result;
}

void sub_10003ED90(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003EDF0;
  block[3] = &unk_10122D110;
  block[4] = v1;
  dispatch_sync(v2, block);
}

void sub_10003EDF0(uint64_t a1)
{
  id v1;
  id v2;
  id *v3;
  id v4;
  _BYTE *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  objc_class *v12;
  NSString *v13;
  __CFString *v14;
  uint64_t v15;
  void *v16;
  id v17;
  CFStringRef Type;
  void *v19;
  CFStringRef v20;
  void *v21;
  CGImage *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint8_t buf[4];
  __CFString *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  id v37;

  v3 = (id *)(a1 + 32);
  v2 = *(id *)(a1 + 32);
  if (*((_QWORD *)v2 + 5) || (v4 = objc_msgSend(*((id *)v2 + 7), "count"), v2 = *v3, v4))
  {
    *((_BYTE *)v2 + 97) = 1;
    *((_QWORD *)*v3 + 13) = 1;
    goto LABEL_4;
  }
  v15 = *((_QWORD *)v2 + 13);
  if (!*((_QWORD *)v2 + 4))
  {
    if (v15)
      goto LABEL_4;
    v23 = 2;
    goto LABEL_39;
  }
  if (!v15)
  {
    if (CRLWPShapeLayout.columnsAreLeftToRight.getter())
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "imageData"));
      v17 = objc_msgSend(v16, "length");
      v1 = (id)sub_10040EA8C();

      if (v17 > v1)
      {
        Type = CGImageSourceGetType(*((CGImageSourceRef *)*v3 + 4));
        v19 = (void *)objc_claimAutoreleasedReturnValue(Type);
        if (v19)
        {
          v20 = sub_1000304A4();
          v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          v1 = objc_msgSend(v19, "crl_conformsToUTI:", v21);

          if ((_DWORD)v1)
          {
            *((_QWORD *)*v3 + 13) = 4;
            *((_BYTE *)*v3 + 97) = 0;
          }
        }

      }
    }
    if (!*((_QWORD *)*v3 + 13))
    {
      v22 = (CGImage *)objc_msgSend(*v3, "p_newImageFromSource:", *((_QWORD *)*v3 + 4));
      *((_BYTE *)*v3 + 97) = v22 != 0;
      CGImageRelease(v22);
      v2 = *v3;
      if (*((_BYTE *)*v3 + 97))
        v23 = 1;
      else
        v23 = 3;
LABEL_39:
      *((_QWORD *)v2 + 13) = v23;
    }
  }
LABEL_4:
  v5 = *v3;
  if (!*((_QWORD *)*v3 + 13))
  {
    v6 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E938);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEAA3C((uint64_t)v3, v6);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122E958);
    v7 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEA91C(v7, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBitmapImageProvider isValid]_block_invoke"));
    v1 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBitmapImageProvider.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v1, 174, 0, "Didn't update validation failure type during validation! isValid? %i", *((unsigned __int8 *)*v3 + 97));

    v5 = *v3;
  }
  if (!v5[97])
  {
    if (qword_10147E358 != -1)
      dispatch_once(&qword_10147E358, &stru_10122E978);
    v9 = off_1013D7D98;
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "imageData"));
      if (v10)
      {
        v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "imageData"));
        v12 = (objc_class *)objc_opt_class(v1, v11);
        v13 = NSStringFromClass(v12);
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue(v13);
      }
      else
      {
        v14 = CFSTR("Nil");
      }
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "imageData"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "filename"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "imageData"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "assetUUID"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "UUIDString"));
      v29 = objc_msgSend(*v3, "validationStatus");
      *(_DWORD *)buf = 138544130;
      v31 = v14;
      v32 = 2112;
      v33 = v25;
      v34 = 2114;
      v35 = v28;
      v36 = 2048;
      v37 = v29;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v9, OS_LOG_TYPE_DEFAULT, "bitmap image <%{public}@: filename=%@, assetUUID=%{public}@>  not valid. status %zi", buf, 0x2Au);

      if (v10)
      {

      }
    }

  }
}

void sub_10003F240(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003F270(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003F2A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageProviderValidationCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D98;
  off_1013D7D98 = v2;

}

void sub_10003F49C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003F4CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003FA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003FA44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003FA74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003FAA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003FAD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10003FB04(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageResampleCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D88;
  off_1013D7D88 = v2;

}

void sub_10003FB30(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *i;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v2 = a1[4];
  if (a1[6] == 1)
  {
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(v2 + 40);
    CGImageRetain(*(CGImageRef *)(*(_QWORD *)(a1[5] + 8) + 24));
  }
  else if ((unint64_t)objc_msgSend(*(id *)(v2 + 56), "count") >= 2)
  {
    v3 = *(void **)(a1[4] + 56);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a1[6]));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));

    if (v5)
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = CGImageRetain((CGImageRef)objc_msgSend(v5, "CGImage"));

  }
  if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) && objc_msgSend(*(id *)(a1[4] + 56), "count"))
  {
    v6 = a1[6];
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 56), "allKeys", 0));
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v8)
    {
      v9 = v8;
      v10 = v6 ^ 0x7FFFFFFFFFFFFFFFLL;
      v11 = *(_QWORD *)v23;
      v12 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v11)
            objc_enumerationMutation(v7);
          v14 = (char *)objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i), "integerValue");
          v15 = a1[6];
          v16 = &v14[-v15];
          if ((uint64_t)&v14[-v15] < 0)
            v16 = (char *)(v15 - (_QWORD)v14);
          if (v10 >= 0)
            v17 = v10;
          else
            v17 = -v10;
          if ((unint64_t)v16 <= v17)
          {
            if ((uint64_t)v14 >= v12)
              v18 = v12;
            else
              v18 = (uint64_t)v14;
            if (v16 == (char *)v17)
              v12 = v18;
            else
              v12 = (uint64_t)v14;
            v10 = v12 - v15;
          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      }
      while (v9);
    }
    else
    {
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    }

    v19 = *(void **)(a1[4] + 56);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v12));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v20));
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = objc_msgSend(v21, "CGImage");

    CGImageRetain(*(CGImageRef *)(*(_QWORD *)(a1[5] + 8) + 24));
  }
}

void sub_10003FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGImageRef sub_10003FF1C(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  return CGImageRetain(*(CGImageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_1000401CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000401E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100040214(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CGImageRef sub_100040244(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  return CGImageRetain(*(CGImageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

CGImageRef sub_10004026C(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  return CGImageRetain(*(CGImageRef *)(*(_QWORD *)(a1 + 32) + 48));
}

void sub_100040478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100040490(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000404C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CGImageRef sub_1000404F0(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  return CGImageRetain(*(CGImageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_100040CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100040CC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100040CF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100040D28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100040D58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100040D88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageResampleCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D88;
  off_1013D7D88 = v2;

}

void sub_100040DB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageResampleCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D88;
  off_1013D7D88 = v2;

}

void sub_100040DE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageResampleCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D88;
  off_1013D7D88 = v2;

}

CGImageRef sub_100040E0C(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  return CGImageRetain(*(CGImageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void sub_100040E34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageResampleOptimizationCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D90;
  off_1013D7D90 = v2;

}

void sub_10004105C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

BOOL sub_100041088(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  return *(double *)(a1 + 40) <= *(double *)(v1 + 32) && *(double *)(a1 + 48) <= *(double *)(v1 + 40);
}

BOOL sub_1000410BC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  return *(double *)(v1 + 32) > 1.0 && *(double *)(v1 + 40) > 1.0;
}

BOOL sub_1000410EC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  return *(double *)(v1 + 32) > *(double *)(a1 + 40) || *(double *)(v1 + 40) > *(double *)(a1 + 48);
}

void sub_1000413F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageResampleCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D88;
  off_1013D7D88 = v2;

}

void sub_1000415A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000415C4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  CGImage *v7;
  NSObject *v8;
  size_t Width;
  size_t Height;
  int v11;
  uint64_t v12;
  __int16 v13;
  size_t v14;
  __int16 v15;
  size_t v16;

  v2 = *(void **)(a1[4] + 56);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1[6]));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  if (v4)
  {
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = CGImageRetain((CGImageRef)objc_msgSend(v4, "CGImage"));
    if (qword_10147E348 != -1)
      dispatch_once(&qword_10147E348, &stru_10122EC68);
    v5 = off_1013D7D88;
    if (os_log_type_enabled((os_log_t)off_1013D7D88, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[6];
      v7 = *(CGImage **)(*(_QWORD *)(a1[5] + 8) + 24);
      v8 = v5;
      Width = CGImageGetWidth(v7);
      Height = CGImageGetHeight(*(CGImageRef *)(*(_QWORD *)(a1[5] + 8) + 24));
      v11 = 134218496;
      v12 = v6;
      v13 = 2048;
      v14 = Width;
      v15 = 2048;
      v16 = Height;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "using existing 1/%zu image (%zu, %zu)", (uint8_t *)&v11, 0x20u);

    }
  }

}

void sub_100041740(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageResampleCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D88;
  off_1013D7D88 = v2;

}

void sub_10004176C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  if (!v2)
  {
    v3 = objc_alloc_init((Class)NSMutableDictionary);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 56);
    *(_QWORD *)(v4 + 56) = v3;

    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v6));

  if (!v7)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48)));
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v10);

    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 144) = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136));
    objc_msgSend(*(id *)(a1 + 32), "p_updateEstimatedSize");
  }
}

uint64_t sub_100041924(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 88);
  return result;
}

uint64_t sub_1000419DC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 96);
  return result;
}

void sub_100041AF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100041B10(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 64);
  return result;
}

BOOL sub_100041B2C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = CGColorSpaceIsWideGamutRGB(*(CGColorSpaceRef *)(a1 + 48));
  v3 = 1;
  if (!result)
    v3 = 2;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = v3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  return result;
}

intptr_t sub_100041E98(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  CFTypeRef *v4;
  int v6;
  uint64_t v7;

  if (qword_10147E348 != -1)
    dispatch_once(&qword_10147E348, &stru_10122ECB0);
  v2 = off_1013D7D88;
  if (os_log_type_enabled((os_log_t)off_1013D7D88, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v6 = 134217984;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning to flush provider %p", (uint8_t *)&v6, 0xCu);
  }
  v4 = *(CFTypeRef **)(a1 + 32);
  if (v4[5])
  {
    CFRelease(v4[5]);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
    v4 = *(CFTypeRef **)(a1 + 32);
  }
  if (v4[6])
  {
    CFRelease(v4[6]);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 0;
    v4 = *(CFTypeRef **)(a1 + 32);
  }
  if (v4[4])
  {
    CFRelease(v4[4]);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
    v4 = *(CFTypeRef **)(a1 + 32);
  }
  if (-[CFTypeRef i_loadState](v4, "i_loadState") == 1)
    objc_msgSend(*(id *)(a1 + 32), "setI_loadState:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "removeAllObjects");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) = 0;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 144) = 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136));
}

void sub_100042040(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageResampleCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D88;
  off_1013D7D88 = v2;

}

void sub_1000423AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageResampleOptimizationCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D90;
  off_1013D7D90 = v2;

}

_QWORD *sub_1000423D8(uint64_t a1)
{
  _QWORD *result;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  CFTypeRef *v7;
  id v8;
  id v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  result = *(_QWORD **)(a1 + 32);
  if (result[6])
  {
    v3 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122ECF0);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEB27C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122ED10);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEA91C(v4, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBitmapImageProvider p_loadFullSizedImageIfNecessary]_block_invoke"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBitmapImageProvider.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 754, 0, "Should never load full-sized image if we have been asked to load the largest safe image!");

    result = *(_QWORD **)(a1 + 32);
  }
  if (!result[5])
  {
    result = objc_msgSend(result, "i_loadState");
    if ((_DWORD)result != 2)
    {
      v7 = *(CFTypeRef **)(a1 + 32);
      v8 = (id)v7[4];
      if (v8)
      {
        CFRetain(v7[4]);
      }
      else
      {
        v8 = -[CFTypeRef p_newCGImageSource](v7, "p_newCGImageSource");
        if (!v8)
        {
          v9 = 0;
LABEL_19:
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = v9;
          v10 = 1;
          if (v9)
            v11 = 1;
          else
            v11 = 2;
          objc_msgSend(*(id *)(a1 + 32), "setI_loadState:", v11);
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
          v12 = *(_QWORD *)(a1 + 32);
          if (!*(_BYTE *)(v12 + 144))
            v10 = *(_QWORD *)(v12 + 40) != 0;
          *(_BYTE *)(v12 + 144) = v10;
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136));
          return objc_msgSend(*(id *)(a1 + 32), "p_updateEstimatedSize");
        }
      }
      v9 = objc_msgSend(*(id *)(a1 + 32), "p_newImageFromSource:", v8);
      if (v9)
        objc_msgSend(*(id *)(a1 + 32), "p_configureOrientationAndSizeFromImageSource:andImage:", v8, v9);
      CFRelease(v8);
      goto LABEL_19;
    }
  }
  return result;
}

void sub_100042614(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100042644(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100042804(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageResampleOptimizationCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D90;
  off_1013D7D90 = v2;

}

_QWORD *sub_100042830(uint64_t a1)
{
  _QWORD *result;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  CFTypeRef *v7;
  id v8;
  void *v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  NSObject *v13;
  NSString *v14;
  void *v15;
  id v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  void *v23;
  CGSize v24;

  result = *(_QWORD **)(a1 + 32);
  if (result[5])
  {
    v3 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122ED50);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEB2FC();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122ED70);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEA91C(v4, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBitmapImageProvider p_loadLargestSafeImageIfNecessary]_block_invoke"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBitmapImageProvider.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 803, 0, "Should never load largestSafeImage if we can load the full-sized image!");

    result = *(_QWORD **)(a1 + 32);
  }
  if (!result[6])
  {
    result = objc_msgSend(result, "i_loadState");
    if ((_DWORD)result != 2)
    {
      v7 = *(CFTypeRef **)(a1 + 32);
      v8 = (id)v7[4];
      if (v8)
      {
        CFRetain(v7[4]);
      }
      else
      {
        v8 = -[CFTypeRef p_newCGImageSource](v7, "p_newCGImageSource");
        if (!v8)
        {
          v16 = 0;
LABEL_21:
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = v16;
          v17 = 1;
          if (v16)
            v18 = 1;
          else
            v18 = 2;
          objc_msgSend(*(id *)(a1 + 32), "setI_loadState:", v18);
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
          v19 = *(_QWORD *)(a1 + 32);
          if (!*(_BYTE *)(v19 + 144))
            v17 = *(_QWORD *)(v19 + 48) != 0;
          *(_BYTE *)(v19 + 144) = v17;
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136));
          return objc_msgSend(*(id *)(a1 + 32), "p_updateEstimatedSize");
        }
      }
      if (qword_10147E348 != -1)
        dispatch_once(&qword_10147E348, &stru_10122ED90);
      v9 = off_1013D7D88;
      if (os_log_type_enabled((os_log_t)off_1013D7D88, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *(double *)(a1 + 40);
        v12 = *(double *)(a1 + 48);
        v13 = v9;
        v24.width = v11;
        v24.height = v12;
        v14 = NSStringFromCGSize(v24);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        v20 = 134218242;
        v21 = v10;
        v22 = 2114;
        v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "provider:%p creating new largest safe image of size:%{public}@ ", (uint8_t *)&v20, 0x16u);

      }
      v16 = objc_msgSend(*(id *)(a1 + 32), "p_newImageOfSize:fromSource:", v8, *(double *)(a1 + 40), *(double *)(a1 + 48));
      CFRelease(v8);
      goto LABEL_21;
    }
  }
  return result;
}

void sub_100042B44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100042B74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100042BA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLBitmapImageResampleCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D7D88;
  off_1013D7D88 = v2;

}

_QWORD *sub_100042C30(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  char v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = *(_QWORD **)(a1 + 32);
  if (!result[4])
  {
    result = objc_msgSend(result, "i_loadState");
    if ((_DWORD)result != 2)
    {
      if (CRLWPShapeLayout.columnsAreLeftToRight.getter())
      {
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageData"));
        v4 = sub_1004104B0(v3);

        if ((v4 & 1) == 0)
        {
          objc_msgSend(*(id *)(a1 + 32), "setI_loadState:", 2);
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = 4;
        }
      }
      result = objc_msgSend(*(id *)(a1 + 32), "i_loadState");
      if ((_DWORD)result != 2)
      {
        v5 = objc_msgSend(*(id *)(a1 + 32), "p_newCGImageSource");
        if (v5)
        {
          objc_msgSend(*(id *)(a1 + 32), "p_configureOrientationAndSizeFromImageSource:andImage:", v5, 0);
          v6 = 1;
        }
        else
        {
          v6 = 2;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = v5;
        objc_msgSend(*(id *)(a1 + 32), "setI_loadState:", v6);
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
        v7 = *(_QWORD *)(a1 + 32);
        if (*(_BYTE *)(v7 + 144))
          v8 = 1;
        else
          v8 = *(_QWORD *)(v7 + 32) != 0;
        *(_BYTE *)(v7 + 144) = v8;
        return (_QWORD *)dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136));
      }
    }
  }
  return result;
}

intptr_t sub_10004311C(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = *(_QWORD *)(a1 + 40);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 144))
    v3 = 1;
  else
    v3 = *(_QWORD *)(v2 + 40) != 0;
  *(_BYTE *)(v2 + 144) = v3;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136));
}

void sub_10004324C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_100043264(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[4] + 32);
  if (v1)
  {
    *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = v1;
    result = *(_QWORD **)(*(_QWORD *)(result[5] + 8) + 24);
    if (result)
      return CFRetain(result);
  }
  return result;
}

void sub_1000434D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100043500(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000436E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1000436FC(uint64_t a1)
{
  CFTypeRef result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  result = *(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (result)
    return CFRetain(result);
  return result;
}

void sub_1000437A4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

uint64_t sub_1000437C0(double a1, double a2)
{
  int v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;

  if (a1 == 0.0 && a2 == -1.0)
    return 0;
  if (a1 == 1.0 && a2 == -1.0)
    return 1;
  if (a1 == 1.0 && a2 == 0.0)
    return 2;
  if (a1 == 1.0 && a2 == 1.0)
    return 3;
  if (a1 == 0.0 && a2 == 1.0)
    return 4;
  if (a1 == -1.0 && a2 == 1.0)
    return 5;
  if (a1 == -1.0 && a2 == 0.0)
    return 6;
  if (a1 == -1.0 && a2 == -1.0)
    return 7;
  v7 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10122EE18);
  v8 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67110402;
    v14 = v7;
    v15 = 2082;
    v16 = "CRLTracingDirection directionForVector(CGPoint)";
    v17 = 2082;
    v18 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageTracer.mm";
    v19 = 1024;
    v20 = 73;
    v21 = 2048;
    v22 = a1;
    v23 = 2048;
    v24 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't find direction for invalid vector (%f, %f)", buf, 0x36u);
  }
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10122EE38);
  v9 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
    sub_100DEB414(v10, (uint64_t)buf, v7);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLTracingDirection directionForVector(CGPoint)"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageTracer.mm"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 73, 0, "can't find direction for invalid vector (%f, %f)", *(_QWORD *)&a1, *(_QWORD *)&a2);

  return 8;
}

void sub_100043A90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100043AB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100043AE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

__n128 sub_100043B18(__int128 *a1, __int128 *a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  int v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __n128 result;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;

  v6 = a5 - a3;
  v7 = a6 - a4;
  if (v6 == -0.5 && v7 == -0.5)
  {
    v19 = xmmword_100EEC2F0;
    v20 = &xmmword_100EEC300;
LABEL_30:
    *a1 = v19;
    result = (__n128)*v20;
    *a2 = *v20;
    return result;
  }
  if (v6 == 0.5 && v7 == -0.5)
  {
    v19 = xmmword_100EEC300;
    v20 = &xmmword_100EEC310;
    goto LABEL_30;
  }
  if (v6 == 0.5 && v7 == 0.5)
  {
    v19 = xmmword_100EEC310;
    v20 = &xmmword_100EEC320;
    goto LABEL_30;
  }
  if (v6 == -0.5 && v7 == 0.5)
  {
    v19 = xmmword_100EEC320;
    v20 = &xmmword_100EEC2F0;
    goto LABEL_30;
  }
  v12 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount", v7);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10122EE58);
  v13 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DEB45C(v12, v13);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10122EE78);
  v14 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
    sub_100DEB414(v15, (uint64_t)&v21, v12);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void nextPivotAndBlackVectors(CGPoint, CGPoint, CGPoint &, CGPoint &)"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageTracer.mm"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 106, 0, "unexpected pivot and black points while tracing");

  return result;
}

void sub_100043D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100043D6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100043D9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100043DCC(void *a1, uint64_t *a2, double a3)
{
  id v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t *v8;
  unint64_t v9;
  double width;
  double height;
  double x;
  CGFloat y;
  unint64_t v14;
  uint64_t v15;
  double *v17;
  uint64_t v18;
  __int128 v19;
  double *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;
  double v27;
  double *v28;
  unint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  unint64_t v35;
  double v36;
  double v37;
  float v38;
  _BOOL4 v39;
  __int128 *v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  double *v47;
  double *v48;
  __int128 v49;
  double *v50;
  unint64_t v51;
  double v52;
  double v53;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t *v58;
  char *v59;
  double *__p;
  double *v61;
  char *v62;

  v5 = a1;
  v58 = a2;
  v8 = a2;
  v7 = (__int128 *)*a2;
  v6 = (__int128 *)v8[1];
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
  if (v9 > 0x31)
    goto LABEL_12;
  width = CGRectNull.size.width;
  height = CGRectNull.size.height;
  if (v6 != v7)
  {
    x = CGRectNull.origin.x;
    y = CGRectNull.origin.y;
    if (v9 <= 1)
      v14 = 1;
    else
      v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
    v15 = (uint64_t)v7 + 8;
    do
    {
      x = sub_1000615D8(x, y, width, height, *(double *)(v15 - 8));
      v15 += 24;
      --v14;
    }
    while (v14);
  }
  if (width >= 5.0 && height >= 5.0)
  {
LABEL_12:
    v62 = 0;
    v57 = v5;
    v17 = (double *)sub_100045008((uint64_t)&v62, 1uLL);
    v19 = *v7;
    v17[2] = *((double *)v7 + 2);
    *(_OWORD *)v17 = v19;
    v20 = v17 + 3;
    __p = v17;
    v62 = (char *)&v17[3 * v18];
    v61 = v17 + 3;
    if (v9 != 1)
    {
      v21 = 0;
      while (1)
      {
        v59 = (char *)v20;
        v22 = *v58;
        v23 = v21 + 1;
        v24 = v21 + 2;
        if (v21 + 2 < v9)
          break;
        ++v21;
LABEL_31:
        v40 = (__int128 *)(v22 + 24 * v21);
        if (v59 >= v62)
        {
          v42 = 0xAAAAAAAAAAAAAAABLL * ((v59 - (char *)__p) >> 3) + 1;
          if (v42 > 0xAAAAAAAAAAAAAAALL)
            sub_100007810();
          if (0x5555555555555556 * ((v62 - (char *)__p) >> 3) > v42)
            v42 = 0x5555555555555556 * ((v62 - (char *)__p) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v62 - (char *)__p) >> 3) >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v42;
          if (v43)
            v44 = (char *)sub_100045008((uint64_t)&v62, v43);
          else
            v44 = 0;
          v45 = &v44[8 * ((v59 - (char *)__p) >> 3)];
          v46 = *v40;
          *((_QWORD *)v45 + 2) = *((_QWORD *)v40 + 2);
          *(_OWORD *)v45 = v46;
          v47 = v61;
          v48 = (double *)v45;
          if (v61 != __p)
          {
            do
            {
              v49 = *(_OWORD *)(v47 - 3);
              *(v48 - 1) = *(v47 - 1);
              *(_OWORD *)(v48 - 3) = v49;
              v48 -= 3;
              v47 -= 3;
            }
            while (v47 != __p);
            v47 = __p;
          }
          v20 = (double *)(v45 + 24);
          __p = v48;
          v62 = &v44[24 * v43];
          if (v47)
            operator delete(v47);
        }
        else
        {
          v41 = *v40;
          *((_QWORD *)v59 + 2) = *((_QWORD *)v40 + 2);
          *(_OWORD *)v59 = v41;
          v20 = (double *)(v59 + 24);
        }
        v61 = v20;
        if (v21 >= v9 - 1)
          goto LABEL_48;
      }
      v25 = (double *)(v22 + 24 * v21);
      v26 = *v25;
      v27 = v25[1];
      v28 = v25 + 4;
      ++v21;
      v29 = v24;
      while (1)
      {
        if (v23 >= v29)
        {
          LOBYTE(v39) = 1;
        }
        else
        {
          v30 = (double *)(v22 + 24 * v29);
          v32 = *v30;
          v31 = v30[1];
          v33 = *v30 - v26;
          v34 = v28;
          v35 = v24;
          do
          {
            v36 = (v31 - v27) * (*(v34 - 1) - v26);
            v37 = v33 * (*v34 - v27);
            if (v36 == v37)
            {
              v39 = 1;
            }
            else
            {
              v38 = vabdd_f64(v36, v37) / sub_10006108C(v32, v31, v26, v27);
              v39 = v38 <= a3;
            }
            if (v35 >= v29)
              break;
            ++v35;
            v34 += 3;
          }
          while (v39);
          if (!v39)
            goto LABEL_27;
        }
        v21 = v29;
LABEL_27:
        if (++v29 >= v9 || !v39)
          goto LABEL_31;
      }
    }
LABEL_48:
    v50 = __p;
    v51 = 0xAAAAAAAAAAAAAAABLL * (v20 - __p);
    if (v51 < 3)
    {
      v5 = v57;
      if (!__p)
        goto LABEL_60;
      goto LABEL_59;
    }
    v52 = *__p;
    v53 = __p[1];
    v5 = v57;
    if ((char *)v20 - (char *)__p == 72 && v52 == __p[6] && v53 == __p[7])
      goto LABEL_59;
    objc_msgSend(v57, "moveToPoint:", v52, v53, v57);
    v55 = 0;
    v56 = v51 - 1;
    do
    {
      objc_msgSend(v5, "lineToPoint:", __p[v55 + 3], __p[v55 + 4]);
      v55 += 3;
      --v56;
    }
    while (v56);
    objc_msgSend(v5, "closePath");
    v50 = __p;
    if (__p)
LABEL_59:
      operator delete(v50);
  }
LABEL_60:

}

void sub_1000441D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000448A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31,_QWORD *a32)
{
  if (__p)
    operator delete(__p);
  sub_10001CE40((uint64_t)&a31, a32);

  _Unwind_Resume(a1);
}

void sub_100044FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  void *v26;

  if (__p)
    operator delete(__p);
  sub_10001CE40((uint64_t)&a25, a26);

  _Unwind_Resume(a1);
}

void *sub_100045008(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1000078E0();
  return operator new(24 * a2);
}

uint64_t *sub_10004504C(uint64_t **a1, double *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_1000450CC((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_10001D650(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *sub_1000450CC(uint64_t a1, _QWORD *a2, double *a3)
{
  _QWORD *result;
  uint64_t *v4;
  uint64_t *v5;
  double v6;
  double v7;
  _QWORD *v8;
  double v9;
  double v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v7 = *a3;
    v6 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((double *)v4 + 5);
        if (v6 >= v9)
          break;
LABEL_6:
        v4 = (uint64_t *)*v4;
        result = v8;
        if (!*v8)
          goto LABEL_18;
      }
      if (v6 == v9)
      {
        v10 = *((double *)v4 + 4);
        if (v7 < v10)
          goto LABEL_6;
        if (v9 >= v6 && v10 >= v7)
          goto LABEL_18;
      }
      else if (v9 >= v6)
      {
        goto LABEL_18;
      }
      result = v4 + 1;
      v4 = (uint64_t *)v4[1];
      if (!v4)
        goto LABEL_18;
    }
  }
  v8 = result;
LABEL_18:
  *a2 = v8;
  return result;
}

uint64_t sub_10004513C(uint64_t **a1, double *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10004518C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10001DAF0(a1, v3);
  operator delete(v4);
  return 1;
}

double *sub_10004518C(uint64_t a1, double *a2)
{
  double *v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;

  v4 = *(double **)(a1 + 8);
  v2 = (double *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = v3[5];
    if (v8 >= v6)
    {
      if (v8 == v6)
      {
        if (v3[4] < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = *(double **)v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = v7[5];
  if (v6 < v9 || v6 == v9 && v5 < v7[4])
    return v2;
  return v7;
}

void sub_1000454F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100045524(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100045A6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100045A9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100045C5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100045C8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100046310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_100046354(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100046384(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000463B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000463E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100046414(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100046444(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100046474(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100046484(uint64_t a1)
{

}

void sub_10004648C(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  id WeakRetained;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  void *v65;
  id v66;
  void *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  void *i;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  _BOOL4 v105;
  void *v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  id v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  id v115;
  void *v116;
  void *v117;
  void *v118;
  unsigned __int8 v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  void *j;
  id v126;
  uint64_t v127;
  void *v128;
  void *v129;
  void *v130;
  id v131;
  void *v132;
  id v133;
  id v134;
  id v135;
  uint64_t v136;
  void *k;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  double height;
  double width;
  double y;
  double x;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _QWORD v149[5];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _BYTE v166[128];
  _BYTE v167[128];
  _BYTE v168[128];
  _BYTE v169[128];
  _BYTE v170[128];

  v2 = (id *)(a1 + 32);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 16), 0xFFFFFFFFFFFFFFFFLL);
  v3 = *((_QWORD *)*v2 + 3);
  if (v3 != 1)
  {
    if (v3)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10122F018);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DEBB3C();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10122F038);
      v4 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasGuideController beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingGuides:]_block_invoke"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 496, 0, "Guide state unexpected when do second pass on begin generation! %lu", *((_QWORD *)*v2 + 3));

    }
    else
    {
      *((_QWORD *)*v2 + 3) = 1;
    }
  }
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)*v2 + 2));
  if (*((_QWORD *)*v2 + 14))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122F058);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEBABC();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122F078);
    v7 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasGuideController beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingGuides:]_block_invoke"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 502, 0, "Did not end previous alignment operation before beginning new one");

  }
  v10 = objc_alloc_init((Class)NSMutableSet);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 176);
  *(_QWORD *)(v11 + 176) = v10;

  v13 = objc_alloc_init((Class)NSMutableDictionary);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 88);
  *(_QWORD *)(v14 + 88) = v13;

  v16 = objc_alloc_init((Class)NSMutableDictionary);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(v17 + 80);
  *(_QWORD *)(v17 + 80) = v16;

  v19 = objc_alloc_init((Class)NSMutableArray);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(void **)(v20 + 112);
  *(_QWORD *)(v20 + 112) = v19;

  v22 = objc_alloc_init((Class)NSMutableArray);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(void **)(v23 + 120);
  *(_QWORD *)(v23 + 120) = v22;

  v25 = objc_alloc_init((Class)NSMutableArray);
  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(void **)(v26 + 128);
  *(_QWORD *)(v26 + 128) = v25;

  v28 = objc_alloc_init((Class)NSMutableArray);
  v29 = *(_QWORD *)(a1 + 32);
  v30 = *(void **)(v29 + 136);
  *(_QWORD *)(v29 + 136) = v28;

  v31 = objc_alloc_init((Class)NSMutableArray);
  v32 = *(_QWORD *)(a1 + 32);
  v33 = *(void **)(v32 + 144);
  *(_QWORD *)(v32 + 144) = v31;

  v34 = objc_alloc_init((Class)NSMutableArray);
  v35 = *(_QWORD *)(a1 + 32);
  v36 = *(void **)(v35 + 152);
  *(_QWORD *)(v35 + 152) = v34;

  if (*(_BYTE *)(a1 + 88))
    v38 = 0;
  else
    v38 = objc_msgSend((id)objc_opt_class(*v2, v37), "shouldAlignCenters");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 185) = v38;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 184) = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v37), "shouldAlignEdges");
  if (*(_BYTE *)(a1 + 89))
    v40 = 0;
  else
    v40 = objc_msgSend((id)objc_opt_class(*v2, v39), "shouldAlignToSpacingGuides");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 186) = v40;
  if (*(_BYTE *)(a1 + 90))
    v41 = 0;
  else
    v41 = objc_msgSend((id)objc_opt_class(*v2, v39), "shouldAlignToSizingGuides");
  *((_BYTE *)*v2 + 187) = v41;
  *((_BYTE *)*v2 + 188) = objc_msgSend((id)objc_opt_class(*v2, v39), "shouldAlignEdgesToTemplateGuides");
  if (*((_BYTE *)*v2 + 187))
  {
    v42 = objc_alloc_init((Class)NSMutableArray);
    v43 = (void *)*((_QWORD *)*v2 + 13);
    *((_QWORD *)*v2 + 13) = v42;

    v44 = objc_alloc_init((Class)NSMutableArray);
    v45 = (void *)*((_QWORD *)*v2 + 12);
    *((_QWORD *)*v2 + 12) = v44;

  }
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "anyObject"));
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "layout"));
  v48 = objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "parentLayoutForProvidingGuides"));
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v50 = *(void **)(v49 + 40);
  *(_QWORD *)(v49 + 40) = v48;

  v51 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (!v51)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
    return;
  }
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "layoutsForProvidingGuidesForChildLayouts"));
  v53 = objc_msgSend(v52, "mutableCopy");
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v55 = *(void **)(v54 + 40);
  *(_QWORD *)(v54 + 40) = v53;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 208));
  objc_msgSend(WeakRetained, "visibleUnscaledRect");
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v64 = v63;

  v65 = *(void **)(a1 + 48);
  if (v65)
  {
    v66 = *v2;
    v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "layout"));
    objc_msgSend(v66, "p_alignmentFrameInRootForLayout:", v67);
    y = v69;
    x = v68;
    height = v71;
    width = v70;

  }
  else
  {
    y = CGRectNull.origin.y;
    x = CGRectNull.origin.x;
    height = CGRectNull.size.height;
    width = CGRectNull.size.width;
  }
  v164 = 0u;
  v165 = 0u;
  v162 = 0u;
  v163 = 0u;
  v72 = *(id *)(a1 + 40);
  v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v162, v170, 16);
  if (v73)
  {
    v74 = v73;
    v75 = *(_QWORD *)v163;
LABEL_41:
    v76 = 0;
    while (1)
    {
      if (*(_QWORD *)v163 != v75)
        objc_enumerationMutation(v72);
      v77 = *(void **)(*((_QWORD *)&v162 + 1) + 8 * v76);
      v78 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "layout"));
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "parentLayoutForProvidingGuides"));

      if (v78 != v80)
        break;
      v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "layout"));
      objc_msgSend(*v2, "p_alignmentFrameInRootForLayout:", v81);
      v83 = v82;
      v85 = v84;
      v87 = v86;
      v89 = v88;
      if (!objc_msgSend(v77, "providesGuidesWhileAligning")
        || !sub_100060F38(v83, v85, v87, v89, v58, v60, v62, v64))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "removeObject:", v81);
      }

      if (v74 == (id)++v76)
      {
        v74 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v162, v170, 16);
        if (!v74)
          goto LABEL_50;
        goto LABEL_41;
      }
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
LABEL_88:

    return;
  }
LABEL_50:

  if (*((_QWORD *)*v2 + 24))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122F098);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEBA2C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122F0B8);
    v90 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasGuideController beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingGuides:]_block_invoke"));
    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v91, v92, 565, 0, "expected nil value for '%{public}s'", "_alignmentFrameInRootByLayout");

  }
  v93 = objc_msgSend(objc_alloc((Class)NSMapTable), "initWithKeyOptions:valueOptions:capacity:", 0, 0, 0);
  v94 = *(_QWORD *)(a1 + 32);
  v95 = *(void **)(v94 + 192);
  *(_QWORD *)(v94 + 192) = v93;

  v160 = 0u;
  v161 = 0u;
  v158 = 0u;
  v159 = 0u;
  v96 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v158, v169, 16);
  if (v97)
  {
    v98 = v97;
    v99 = *(_QWORD *)v159;
    do
    {
      for (i = 0; i != v98; i = (char *)i + 1)
      {
        if (*(_QWORD *)v159 != v99)
          objc_enumerationMutation(v96);
        v101 = *(void **)(*((_QWORD *)&v158 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v101, "alignmentFrameForProvidingGuidesInRoot");
        v102 = (void *)*((_QWORD *)*v2 + 24);
        v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:"));
        objc_msgSend(v102, "setObject:forKey:", v103, v101);

      }
      v98 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v158, v169, 16);
    }
    while (v98);
  }

  v104 = *(void **)(a1 + 48);
  if (!v104)
  {
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v121 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v122 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v150, v167, 16);
    if (v122)
    {
      v123 = v122;
      v124 = *(_QWORD *)v151;
      do
      {
        for (j = 0; j != v123; j = (char *)j + 1)
        {
          if (*(_QWORD *)v151 != v124)
            objc_enumerationMutation(v121);
          objc_msgSend(*v2, "p_addGuidesForLayout:", *(_QWORD *)(*((_QWORD *)&v150 + 1) + 8 * (_QWORD)j));
        }
        v123 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v150, v167, 16);
      }
      while (v123);
    }

    v126 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "mutableCopy");
    v127 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v128 = *(void **)(v127 + 40);
    *(_QWORD *)(v127 + 40) = v126;

    v129 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    v149[0] = _NSConcreteStackBlock;
    v149[1] = 3221225472;
    v149[2] = sub_1000472C4;
    v149[3] = &unk_10122F0E0;
    v149[4] = *(_QWORD *)(a1 + 32);
    v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v149));
    objc_msgSend(v129, "filterUsingPredicate:", v130);

    if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "exclusivelyProvidesGuidesForChildLayouts") & 1) == 0)
    {
      v131 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 208));
      v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v131, "provideDynamicGuidesForLayout:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));

      v147 = 0u;
      v148 = 0u;
      v145 = 0u;
      v146 = 0u;
      v133 = v132;
      v134 = objc_msgSend(v133, "countByEnumeratingWithState:objects:count:", &v145, v166, 16);
      if (v134)
      {
        v135 = v134;
        v136 = *(_QWORD *)v146;
        do
        {
          for (k = 0; k != v135; k = (char *)k + 1)
          {
            if (*(_QWORD *)v146 != v136)
              objc_enumerationMutation(v133);
            v138 = *(void **)(*((_QWORD *)&v145 + 1) + 8 * (_QWORD)k);
            v139 = *((unsigned __int8 *)*v2 + 184);
            objc_msgSend(v138, "setSnapsToMax:", v139);
            objc_msgSend(v138, "setSnapsToMin:", v139);
            objc_msgSend(v138, "setSnapsToMid:", *((unsigned __int8 *)*v2 + 185));
            if (objc_msgSend(v138, "guideType"))
              v140 = 120;
            else
              v140 = 112;
            objc_msgSend(*v2, "p_addAlignmentGuide:toSortedArray:", v138, *(_QWORD *)((char *)*v2 + v140));
          }
          v135 = objc_msgSend(v133, "countByEnumeratingWithState:objects:count:", &v145, v166, 16);
        }
        while (v135);
      }

    }
    return;
  }
  if (objc_msgSend(v104, "providesGuidesWhileAligning"))
  {
    v72 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "layout"));
    if ((objc_msgSend(v72, "shouldDisplayGuides") & 1) == 0)
      goto LABEL_88;
    v105 = sub_100060F38(x, y, width, height, v58, v60, v62, v64);

    if (v105)
    {
      v106 = *(void **)(a1 + 32);
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "layout"));
      objc_msgSend(v106, "p_addGuidesForLayout:", v107);

      v108 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 208));
      v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "infosForGuides"));

      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v72 = v109;
      v110 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v154, v168, 16);
      if (!v110)
        goto LABEL_86;
      v111 = v110;
      v112 = *(_QWORD *)v155;
      while (1)
      {
        v113 = 0;
        do
        {
          if (*(_QWORD *)v155 != v112)
            objc_enumerationMutation(v72);
          v114 = *(_QWORD *)(*((_QWORD *)&v154 + 1) + 8 * (_QWORD)v113);
          v115 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 208));
          v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "layoutForInfo:", v114));

          v117 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
          if (v117 == v116)
          {
            if (!objc_msgSend(v116, "shouldProvideGuidesDuringExclusiveAlignmentOperation"))
              goto LABEL_81;
LABEL_80:
            objc_msgSend(*v2, "p_addGuidesForLayout:", v116);
            goto LABEL_81;
          }
          v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v116, "parentLayoutForProvidingGuides"));
          if (v117 != v118)
          {

            goto LABEL_81;
          }
          v119 = objc_msgSend(v116, "shouldProvideGuidesDuringExclusiveAlignmentOperation");

          if ((v119 & 1) != 0)
            goto LABEL_80;
LABEL_81:

          v113 = (char *)v113 + 1;
        }
        while (v111 != v113);
        v120 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v154, v168, 16);
        v111 = v120;
        if (!v120)
        {
LABEL_86:

          goto LABEL_88;
        }
      }
    }
  }
}

void sub_1000471A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000471D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100047204(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100047234(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100047264(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100047294(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000472C4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a2;
  v5 = objc_opt_class(CRLCanvasLayout, v4);
  v6 = sub_100221D0C(v5, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interactiveCanvasController"));
  LODWORD(v3) = objc_msgSend(v8, "shouldGenerateGuidesForLayout:", v7);

  if ((_DWORD)v3)
    v9 = objc_msgSend(v7, "shouldDisplayGuides");
  else
    v9 = 0;

  return v9;
}

void sub_100047354(uint64_t a1)
{
  uint64_t v2;
  CRLBidirectionalGeometricOperator *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CRLCanvasSizingGuide *v21;
  CRLCanvasSizingGuide *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD block[5];
  _QWORD v50[5];
  _QWORD v51[13];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[128];

  if (!*(_QWORD *)(a1 + 32))
  {
    v3 = objc_alloc_init(CRLBidirectionalGeometricOperator);
    -[CRLBidirectionalGeometricOperator setOrientationDependentValueForKey:withStandardValue:andSwappedValue:](v3, "setOrientationDependentValueForKey:withStandardValue:andSwappedValue:", CFSTR("CRLCanvasGuideControllerHorizontalGuideDictionaryKey"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 120));
    -[CRLBidirectionalGeometricOperator setOrientationDependentValueForKey:withStandardValue:andSwappedValue:](v3, "setOrientationDependentValueForKey:withStandardValue:andSwappedValue:", CFSTR("CRLCanvasGuideControllerVerticalSpacingDictionaryKey"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 88));
    -[CRLBidirectionalGeometricOperator setOrientationDependentValueForKey:withStandardValue:andSwappedValue:](v3, "setOrientationDependentValueForKey:withStandardValue:andSwappedValue:", CFSTR("CRLCanvasGuideControllerHorizontalCenterSpacingGuideDictionaryKey"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 144));
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 16), 0xFFFFFFFFFFFFFFFFLL);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(v4 + 24);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v4 + 16));
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(v6 + 187))
      {
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v7 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v53;
          do
          {
            for (i = 0; i != v9; i = (char *)i + 1)
            {
              if (*(_QWORD *)v53 != v10)
                objc_enumerationMutation(v7);
              v12 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)i);
              objc_msgSend(*(id *)(a1 + 40), "p_alignmentFrameInRootForLayout:", v12);
              v14 = v13;
              v16 = v15;
              v18 = v17;
              v20 = v19;
              if (objc_msgSend(v12, "shouldProvideSizingGuides"))
              {
                v21 = -[CRLCanvasSizingGuide initWithType:frame:]([CRLCanvasSizingGuide alloc], "initWithType:frame:", 0, v14, v16, v18, v20);
                objc_msgSend(*(id *)(a1 + 40), "p_addSizingGuide:toSortedArray:", v21, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104));
                v22 = -[CRLCanvasSizingGuide initWithType:frame:]([CRLCanvasSizingGuide alloc], "initWithType:frame:", 1, v14, v16, v18, v20);

                objc_msgSend(*(id *)(a1 + 40), "p_addSizingGuide:toSortedArray:", v22, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 96));
              }
            }
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
          }
          while (v9);
        }

        v6 = *(_QWORD *)(a1 + 40);
      }
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v6 + 16), 0xFFFFFFFFFFFFFFFFLL);
      v23 = *(_QWORD *)(a1 + 40);
      v24 = *(_QWORD *)(v23 + 24);
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v23 + 16));
      if (v24 == 1)
      {
        v25 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count");
        v26 = *(_QWORD *)(a1 + 40);
        if (v25 && *(_BYTE *)(v26 + 186))
        {
          v27 = v25;
          v48 = v25 - 1;
          if (v25 != (char *)1)
          {
            v28 = 0;
            while (1)
            {
              dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 16), 0xFFFFFFFFFFFFFFFFLL);
              v29 = *(_QWORD *)(a1 + 40);
              v30 = *(_QWORD *)(v29 + 24);
              dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v29 + 16));
              if (v30 != 1)
                goto LABEL_30;
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "objectAtIndexedSubscript:", v28));
              objc_msgSend(*(id *)(a1 + 40), "p_alignmentFrameInRootForLayout:", v31);
              v33 = v32;
              v35 = v34;
              v37 = v36;
              v39 = v38;
              v40 = ++v28;
              do
              {
                v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "objectAtIndexedSubscript:", v40, v48));
                objc_msgSend(*(id *)(a1 + 40), "p_alignmentFrameInRootForLayout:", v41);
                v51[0] = _NSConcreteStackBlock;
                v51[1] = 3221225472;
                v51[2] = sub_1000477D8;
                v51[3] = &unk_10122F130;
                v51[5] = v33;
                v51[6] = v35;
                v51[7] = v37;
                v51[8] = v39;
                v51[9] = v42;
                v51[10] = v43;
                v51[11] = v44;
                v51[12] = v45;
                v51[4] = *(_QWORD *)(a1 + 40);
                -[CRLBidirectionalGeometricOperator executeBidirectionalOperation:](v3, "executeBidirectionalOperation:", v51);

                ++v40;
              }
              while (v27 != v40);

              if (v28 == v48)
              {
                v26 = *(_QWORD *)(a1 + 40);
                break;
              }
            }
          }
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_100047AA0;
          v50[3] = &unk_10122F158;
          v50[4] = v26;
          -[CRLBidirectionalGeometricOperator executeBidirectionalOperation:](v3, "executeBidirectionalOperation:", v50, v48);
          v26 = *(_QWORD *)(a1 + 40);
        }
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v26 + 16), 0xFFFFFFFFFFFFFFFFLL);
        v46 = *(_QWORD *)(a1 + 40);
        v47 = *(_QWORD *)(v46 + 24);
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v46 + 16));
        if (v47 == 1)
        {

          goto LABEL_2;
        }
      }
    }
LABEL_30:

    return;
  }
LABEL_2:
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 16), 0xFFFFFFFFFFFFFFFFLL);
  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 24) == 1)
  {
    *(_QWORD *)(v2 + 24) = 2;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100047CD0;
    block[3] = &unk_10122D110;
    block[4] = *(_QWORD *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v2 = *(_QWORD *)(a1 + 40);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 16));
}

void sub_1000477D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  _BOOL8 v18;
  void *v19;
  void *v20;
  CRLCanvasSpacing *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;

  v28 = a2;
  v5 = a3;
  if (objc_msgSend(v28, "rect:verticallyOverlapsRect:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96)))
  {
    if ((objc_msgSend(v28, "rect:horizontallyOverlapsRect:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96)) & 1) == 0)
    {
      objc_msgSend(v28, "makeVerticalSpacingRectBetweenRect:andRect:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96));
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;
      objc_msgSend(v28, "rectWidth:");
      if (v14 >= 1.0)
      {
        objc_msgSend(v28, "rectHeight:", v7, v9, v11, v13);
        if (v15 >= 1.0)
        {
          objc_msgSend(v28, "rectHeight:", v7, v9, v11, v13);
          v17 = (int)sub_1003C65A0(v16);
          v18 = sub_10046DAAC((int)objc_msgSend(v28, "verticalOrientation"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("CRLCanvasGuideControllerVerticalSpacingDictionaryKey")));
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v17));
          v21 = (CRLCanvasSpacing *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", v20));

          if (v21)
          {
            -[CRLCanvasSpacing addSpacingRect:forFrame:andFrame:](v21, "addSpacingRect:forFrame:andFrame:", v7, v9, v11, v13, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
          }
          else
          {
            v21 = -[CRLCanvasSpacing initWithGuideType:withSpacingRect:forFrame:andFrame:]([CRLCanvasSpacing alloc], "initWithGuideType:withSpacingRect:forFrame:andFrame:", v18, v7, v9, v11, v13, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", -[CRLCanvasSpacing integerOffset](v21, "integerOffset")));
            objc_msgSend(v19, "setObject:forKey:", v21, v22);

          }
          v23 = -[CRLCanvasCenterAlignmentGuide initBetweenRect:andRect:withGuideType:]([CRLCanvasCenterAlignmentGuide alloc], "initBetweenRect:andRect:withGuideType:", v18, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96));
          v24 = *(void **)(a1 + 32);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("CRLCanvasGuideControllerHorizontalGuideDictionaryKey")));
          objc_msgSend(v24, "p_addCenterAlignmentGuide:toSortedArray:", v23, v25);

          v26 = *(void **)(a1 + 32);
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("CRLCanvasGuideControllerHorizontalCenterSpacingGuideDictionaryKey")));
          objc_msgSend(v26, "p_addCenterAlignmentGuide:toSortedArray:", v23, v27);

        }
      }
    }
  }

}

void sub_100047AA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  id obj;
  uint64_t v24;
  id v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];

  v4 = a3;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("CRLCanvasGuideControllerVerticalSpacingDictionaryKey")));
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "allValues"));
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v25)
  {
    v24 = *(_QWORD *)v32;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v32 != v24)
          objc_enumerationMutation(obj);
        v26 = v5;
        v6 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v5);
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "associatedFrames"));
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v28;
          do
          {
            v11 = 0;
            do
            {
              if (*(_QWORD *)v28 != v10)
                objc_enumerationMutation(v7);
              v12 = *(void **)(a1 + 32);
              objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v11), "CGRectValue");
              v14 = v13;
              v16 = v15;
              v18 = v17;
              v20 = v19;
              v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("kCRLBidirectionalGeometricOperatorValuesAreSwapped")));
              objc_msgSend(v12, "p_addSpacingGuidesForFrame:spacing:isVerticalSpacing:", v6, objc_msgSend(v21, "BOOLValue") ^ 1, v14, v16, v18, v20);

              v11 = (char *)v11 + 1;
            }
            while (v9 != v11);
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
          }
          while (v9);
        }

        v5 = v26 + 1;
      }
      while ((id)(v26 + 1) != v25);
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    }
    while (v25);
  }

}

intptr_t sub_100047CD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  intptr_t result;
  uint64_t v5;
  CGRect v6;

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 16), 0xFFFFFFFFFFFFFFFFLL);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 24);
  result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 16));
  if (v3 == 2)
  {
    v6.origin.x = CGRectNull.origin.x;
    v6.origin.y = CGRectNull.origin.y;
    v6.size.width = CGRectNull.size.width;
    v6.size.height = CGRectNull.size.height;
    result = CGRectEqualToRect(*(CGRect *)(*(_QWORD *)(a1 + 32) + 32), v6);
    if ((result & 1) == 0)
    {
      v5 = *(_QWORD *)(a1 + 32);
      return (intptr_t)objc_msgSend((id)v5, "showGuidesAlignedWithRect:forKnobTag:shouldRenderX:shouldRenderY:shouldRenderSizeGuides:", *(_QWORD *)(v5 + 64), 1, 1, *(unsigned __int8 *)(v5 + 72), *(double *)(v5 + 32), *(double *)(v5 + 40), *(double *)(v5 + 48), *(double *)(v5 + 56));
    }
  }
  return result;
}

void sub_100048538(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100048568(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100048598(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000485C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000485F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  id v7;
  id v8;
  id v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  double v14;
  id v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  id v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  id v31;
  unsigned int v32;
  uint64_t v33;
  id v34;
  unsigned int v35;
  uint64_t v36;
  id v37;
  char v38;
  char v39;
  double v40;
  double v41;
  void *v42;
  void *v43;
  void *v44;
  double v45;
  id v46;
  void *v47;
  BOOL v48;
  double v49;
  double v50;
  void *v51;
  void *v52;
  void *v53;
  double v54;
  id v55;
  double v56;
  double v57;
  void *v58;
  void *v59;
  void *v60;
  double v61;
  id v62;
  double v63;
  double v64;
  void *v65;
  unsigned int v66;
  uint64_t v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  char v72;
  double v73;
  double v74;
  id v75;
  void *v76;
  void *v77;
  id v78;

  v78 = a2;
  v5 = a3;
  objc_msgSend(v5, "setValue:forKey:", &off_1012CBAB8, CFSTR("CRLCanvasGuideControllerHorizontalSnapOffsetKey"));
  objc_msgSend(v5, "setValue:forKey:", &__kCFBooleanFalse, CFSTR("CRLCanvasGuideControllerDidSnapHorizontalKey"));
  v6 = *(double *)(a1 + 40);
  v7 = objc_msgSend(v78, "edgeForStandardRectEdge:", 0);
  v8 = objc_msgSend(v78, "edgeForStandardRectEdge:", 1);
  v9 = objc_msgSend(v78, "edgeForStandardRectEdge:", 2);
  if (objc_msgSend(*(id *)(a1 + 32), "p_guidesAreRelevantForEdge:whileDraggingKnobTag:", v7, *(_QWORD *)(a1 + 48)))
  {
    objc_msgSend(v78, "rectMinX:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_guideClosestToEdge:ofFrame:", v7, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)));
    v13 = v12;
    if (v12 && (objc_msgSend(v12, "offset"), vabdd_f64(v14, v11) < fabs(v6)))
    {
      v6 = v14 - v11;
      v15 = v13;
    }
    else
    {
      v15 = 0;
    }

  }
  else
  {
    v15 = 0;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "p_guidesAreRelevantForEdge:whileDraggingKnobTag:", v9, *(_QWORD *)(a1 + 48)))
  {
    objc_msgSend(v78, "rectMaxX:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
    v17 = v16;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_guideClosestToEdge:ofFrame:", v9, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)));
    v19 = v18;
    if (v18)
    {
      objc_msgSend(v18, "offset");
      if (vabdd_f64(v20, v17) < fabs(v6))
      {
        v6 = v20 - v17;
        v21 = v19;

        v15 = v21;
      }
    }

  }
  v22 = 1.0;
  if (objc_msgSend(*(id *)(a1 + 32), "p_guidesAreRelevantForEdge:whileDraggingKnobTag:", v8, *(_QWORD *)(a1 + 48)))
  {
    objc_msgSend(v78, "rectMidX:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
    v24 = v23;
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_guideClosestToEdge:ofFrame:", v8, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)));
    v26 = v25;
    if (v25)
    {
      objc_msgSend(v25, "offset");
      v28 = vabdd_f64(v27, v24);
      v29 = fabs(v6);
      if (v28 > 0.001 && v28 < v29)
      {
        v6 = v27 - v24;
        v31 = v26;

        if (*(_QWORD *)(a1 + 48))
          v22 = 2.0;
        else
          v22 = 1.0;
        v15 = v31;
      }
    }

  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 186))
  {
    v32 = objc_msgSend(v78, "isFlipped");
    v33 = 128;
    if (v32)
      v33 = 136;
    v34 = *(id *)(*(_QWORD *)(a1 + 32) + v33);
    v35 = objc_msgSend(v78, "isFlipped");
    v36 = 144;
    if (v35)
      v36 = 152;
    v37 = *(id *)(*(_QWORD *)(a1 + 32) + v36);
    v38 = objc_msgSend(v78, "knobTagForStandardKnobTag:", *(_QWORD *)(a1 + 48));
    v39 = v38;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 184))
    {
      if (!*(_QWORD *)(a1 + 48) || (sub_100260884(v38) & 0x92) != 0)
      {
        objc_msgSend(v78, "rectMinX:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), v37);
        v41 = v40;
        v42 = *(void **)(a1 + 32);
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "p_predicateCanBeSnappedToByEdge:ofFrame:inVisibleUnscaledRect:", v7, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112)));
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "p_closestGuideForOffset:predicate:inArray:", v43, v34, v41));

        if (v44)
        {
          objc_msgSend(v44, "offset");
          if (vabdd_f64(v45, v41) < fabs(v6))
          {
            v6 = v45 - v41;
            v46 = v44;

            v22 = 1.0;
            v15 = v46;
          }
        }
        v37 = v77;

      }
      v47 = v78;
      if (!*(_QWORD *)(a1 + 48) || (v48 = (sub_100260884(v39) & 0x248) == 0, v47 = v78, !v48))
      {
        objc_msgSend(v47, "rectMaxX:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
        v50 = v49;
        v51 = *(void **)(a1 + 32);
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "p_predicateCanBeSnappedToByEdge:ofFrame:inVisibleUnscaledRect:", v9, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112)));
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "p_closestGuideForOffset:predicate:inArray:", v52, v34, v50));

        if (v53)
        {
          objc_msgSend(v53, "offset");
          if (vabdd_f64(v54, v50) < fabs(v6))
          {
            v6 = v54 - v50;
            v55 = v53;

            v22 = 1.0;
            v15 = v55;
          }
        }

      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 185)
      && (!*(_QWORD *)(a1 + 48) || (sub_100260884(v39) & 4) == 0 && (sub_100260884(v39) & 0x100) == 0))
    {
      objc_msgSend(v78, "rectMidX:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
      v57 = v56;
      v58 = *(void **)(a1 + 32);
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "p_predicateCanBeSnappedToByEdge:ofFrame:inVisibleUnscaledRect:", v8, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112)));
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "p_closestGuideForOffset:predicate:inArray:", v59, v37, v57));

      if (v60)
      {
        objc_msgSend(v60, "offset");
        if (vabdd_f64(v61, v57) < fabs(v6))
        {
          v6 = v61 - v57;
          v62 = v60;

          if (*(_QWORD *)(a1 + 48))
            v22 = 2.0;
          else
            v22 = 1.0;
          v15 = v62;
        }
      }

    }
  }
  if (*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 187))
    {
      if ((sub_100260884(*(_QWORD *)(a1 + 48)) & 0x3DE) != 0)
      {
        objc_msgSend(v78, "rectWidth:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
        v64 = v63;
        if (objc_msgSend(*(id *)(a1 + 32), "p_sizingGuidesAreRelevantForOrientation:whileDraggingKnobTag:", objc_msgSend(v78, "horizontalOrientation"), *(_QWORD *)(a1 + 48)))
        {
          v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("kCRLBidirectionalGeometricOperatorValuesAreSwapped")));
          v66 = objc_msgSend(v65, "BOOLValue");
          v67 = 104;
          if (v66)
            v67 = 96;
          v68 = *(id *)(*(_QWORD *)(a1 + 32) + v67);

          v69 = *(void **)(a1 + 32);
          v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "p_predicateCanBeSnappedToInVisibleUnscaledRect:", *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112)));
          v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "p_closestGuideForOffset:predicate:inArray:", v70, v68, v64));

          if (v71)
          {
            v72 = sub_100260884((char)objc_msgSend(v78, "knobTagForStandardKnobTag:", *(_QWORD *)(a1 + 48)));
            objc_msgSend(v71, "offset");
            if (vabdd_f64(v73, v64) < fabs(v6))
            {
              v74 = v73 - v64;
              if ((v72 & 0x92) != 0)
                v6 = -v74;
              else
                v6 = v74;
              v75 = v71;

              v22 = 1.0;
              v15 = v75;
            }
          }

        }
      }
    }
  }
  if (v15 && fabs(v6) < *(double *)(a1 + 40))
  {
    v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v22 * v6));
    objc_msgSend(v5, "setValue:forKey:", v76, CFSTR("CRLCanvasGuideControllerHorizontalSnapOffsetKey"));

    objc_msgSend(v5, "setValue:forKey:", &__kCFBooleanTrue, CFSTR("CRLCanvasGuideControllerDidSnapHorizontalKey"));
  }

}

void sub_100049B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_100049BBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100049BEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100049C1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100049C4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100049C7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  float v13;
  double v14;
  void *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  double v21;
  double v22;
  uint64_t v23;
  float v24;
  double v25;
  void *v26;
  double v27;
  double v28;
  void **v29;
  void *v30;
  uint64_t v31;
  float v32;
  double v33;
  double v34;
  id v35;
  void *v36;

  v3 = a2;
  v5 = objc_opt_class(CRLCanvasSpacingGuide, v4);
  v6 = sub_100221D0C(v5, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9 = objc_opt_class(CRLCanvasCenterAlignmentGuide, v8);
  v10 = sub_100221D0C(v9, v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  if (v7)
  {
    if (objc_msgSend(v7, "guideType") == (id)1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (*(_QWORD *)(v12 + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "p_spacingForCenterOrSpacingGuide:", v7);
        v14 = v13;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                           + 40), "parentSpacing"));
        objc_msgSend(v15, "exactOffset");
        v17 = v16;

        if (v17 > v14)
        {
          v18 = *(_QWORD *)(a1 + 40);
LABEL_14:
          v12 = *(_QWORD *)(v18 + 8);
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    else
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      if (*(_QWORD *)(v12 + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "p_spacingForCenterOrSpacingGuide:", v7);
        v25 = v24;
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                           + 40), "parentSpacing"));
        objc_msgSend(v26, "exactOffset");
        v28 = v27;

        if (v28 > v25)
        {
          v18 = *(_QWORD *)(a1 + 48);
          goto LABEL_14;
        }
LABEL_23:
        v31 = 0;
        goto LABEL_24;
      }
    }
LABEL_15:
    v29 = (void **)(v12 + 40);
    v30 = v7;
LABEL_22:
    v35 = v30;
    v36 = *v29;
    *v29 = v35;

    goto LABEL_23;
  }
  if (v11)
  {
    if (objc_msgSend(v11, "guideType"))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      if (*(_QWORD *)(v19 + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "p_spacingForCenterOrSpacingGuide:", v11);
        v21 = v20;
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "exactOffset");
        if (v22 <= v21)
          goto LABEL_23;
        v23 = *(_QWORD *)(a1 + 64);
        goto LABEL_20;
      }
    }
    else
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      if (*(_QWORD *)(v19 + 40))
      {
        objc_msgSend(*(id *)(a1 + 32), "p_spacingForCenterOrSpacingGuide:", v11);
        v33 = v32;
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "exactOffset");
        if (v34 <= v33)
          goto LABEL_23;
        v23 = *(_QWORD *)(a1 + 56);
LABEL_20:
        v19 = *(_QWORD *)(v23 + 8);
      }
    }
    v29 = (void **)(v19 + 40);
    v30 = v11;
    goto LABEL_22;
  }
  v31 = 1;
LABEL_24:

  return v31;
}

void sub_10004A264(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004A294(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004A730(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004A760(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

intptr_t sub_10004A790(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v1 = (uint64_t *)(a1 + 32);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 16), 0xFFFFFFFFFFFFFFFFLL);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 24);
  if (v3)
    v4 = v3 == 3;
  else
    v4 = 1;
  if (!v4)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122F348);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEC0A4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10122F368);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasGuideController endAlignmentOperation]_block_invoke"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 1480, 0, "Working on cancellation/cleanup when state doesn't expect it! %lu", *(_QWORD *)(*v1 + 24));

    v2 = *v1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 16));
  v8 = *(void **)(*v1 + 160);
  *(_QWORD *)(*v1 + 160) = 0;

  v9 = *(void **)(*v1 + 168);
  *(_QWORD *)(*v1 + 168) = 0;

  v10 = *(void **)(*v1 + 176);
  *(_QWORD *)(*v1 + 176) = 0;

  v11 = *(void **)(*v1 + 88);
  *(_QWORD *)(*v1 + 88) = 0;

  v12 = *(void **)(*v1 + 80);
  *(_QWORD *)(*v1 + 80) = 0;

  v13 = *(void **)(*v1 + 120);
  *(_QWORD *)(*v1 + 120) = 0;

  v14 = *(void **)(*v1 + 112);
  *(_QWORD *)(*v1 + 112) = 0;

  v15 = *(void **)(*v1 + 128);
  *(_QWORD *)(*v1 + 128) = 0;

  v16 = *(void **)(*v1 + 136);
  *(_QWORD *)(*v1 + 136) = 0;

  v17 = *(void **)(*v1 + 144);
  *(_QWORD *)(*v1 + 144) = 0;

  v18 = *(void **)(*v1 + 152);
  *(_QWORD *)(*v1 + 152) = 0;

  v19 = *(void **)(*v1 + 192);
  *(_QWORD *)(*v1 + 192) = 0;

  v20 = *v1;
  if (*(_BYTE *)(*v1 + 187))
  {
    v21 = *(void **)(v20 + 96);
    *(_QWORD *)(v20 + 96) = 0;

    v22 = *(void **)(*v1 + 104);
    *(_QWORD *)(*v1 + 104) = 0;

    v20 = *v1;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v20 + 16), 0xFFFFFFFFFFFFFFFFLL);
  *(_QWORD *)(*v1 + 24) = 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*v1 + 16));
}

void sub_10004AA20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004AA50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004B2D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004B304(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004B334(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004B364(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004B550(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004B580(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004BF00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004BF30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004C3DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004C40C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004C8D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004C904(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004CB54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004CB84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10004CC4C(double *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  v3 = a2;
  v5 = objc_opt_class(CRLCanvasAbstractGuide, v4);
  v6 = sub_100221D0C(v5, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = objc_msgSend(v7, "isAssociatedContentVisibleInUnscaledRect:", a1[4], a1[5], a1[6], a1[7]);
  return v8;
}

id sub_10004CD24(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "canBeSnappedToByEdge:ofFrame:inVisibleUnscaledRect:", *(unsigned int *)(a1 + 96), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
}

void sub_10004D488(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004D4B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004DBEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004DC1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004DDF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004DE24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004E19C(uint64_t a1, char a2)
{
  _QWORD v3[2];
  uint64_t (*v4)(uint64_t);
  void *v5;
  id v6;
  char v7;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v4 = sub_10004E234;
  v5 = &unk_10122F650;
  v6 = *(id *)(a1 + 32);
  v7 = a2;
  if (+[NSThread isMainThread](NSThread, "isMainThread", _NSConcreteStackBlock, 3221225472))
    v4((uint64_t)v3);
  else
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

}

uint64_t sub_10004E234(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10004E3F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004E428(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004E55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGPDFDocumentRef sub_10004E574(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  return CGPDFDocumentRetain(*(CGPDFDocumentRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

__n128 sub_10004E67C(uint64_t a1)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a1 + 32) + 48);
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) = result;
  return result;
}

void sub_10004EA1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004EA4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

intptr_t sub_10004EADC(uint64_t a1)
{
  CGPDFDocumentRelease(*(CGPDFDocumentRef *)(*(_QWORD *)(a1 + 32) + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "i_loadState") == 1)
    objc_msgSend(*(id *)(a1 + 32), "setI_loadState:", 0);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 64), 0xFFFFFFFFFFFFFFFFLL);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 72) = 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 64));
}

_QWORD *sub_10004EBC0(uint64_t a1)
{
  _QWORD *result;
  id v3;
  uint64_t v4;

  result = *(_QWORD **)(a1 + 32);
  if (!result[5])
  {
    result = objc_msgSend(result, "i_loadState");
    if ((_DWORD)result != 2)
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "p_load");
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = v3;
      if (v3)
        v4 = 1;
      else
        v4 = 2;
      objc_msgSend(*(id *)(a1 + 32), "setI_loadState:", v4);
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 64), 0xFFFFFFFFFFFFFFFFLL);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 72) = 1;
      return (_QWORD *)dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 64));
    }
  }
  return result;
}

void sub_10004F030(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10004F060(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10004F24C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setContentOffset:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void sub_10004F258(uint64_t a1)
{
  void *v2;
  char v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = objc_opt_respondsToSelector(v2, "scrollViewDidEndScrollingAnimation:");

  if ((v3 & 1) != 0)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v4, "scrollViewDidEndScrollingAnimation:", *(_QWORD *)(a1 + 32));

  }
}

id sub_100050200(uint64_t a1)
{
  CGRect v3;
  CGRect v4;

  objc_msgSend(*(id *)(a1 + 32), "setCenter:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  v3.origin.x = sub_10005FDDC();
  v4 = CGRectIntegral(v3);
  return objc_msgSend(*(id *)(a1 + 32), "setBounds:", v4.origin.x, v4.origin.y, v4.size.width, v4.size.height);
}

id sub_1000502D4(uint64_t a1)
{
  void *v2;
  _OWORD v4[3];
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "p_growTransform");
    v2 = *(void **)(a1 + 32);
  }
  else
  {
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
  }
  v4[0] = v5;
  v4[1] = v6;
  v4[2] = v7;
  return objc_msgSend(v2, "setTransform:", v4);
}

id sub_100050334(uint64_t a1)
{
  unsigned int v2;
  double v3;
  _QWORD v5[5];
  _QWORD v6[4];
  uint64_t v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "pointDidLeaveOriginalLine");
  v3 = 0.33;
  if (v2)
    v3 = 0.0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000503E4;
  v6[3] = &unk_10122D110;
  v7 = *(_QWORD *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100050444;
  v5[3] = &unk_10122F780;
  v5[4] = v7;
  return +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 0x20000, v6, v5, v3, 0.0);
}

id sub_1000503E4(uint64_t a1)
{
  void *v2;
  _OWORD v4[3];
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "p_shrinkTransform");
    v2 = *(void **)(a1 + 32);
  }
  else
  {
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
  }
  v4[0] = v5;
  v4[1] = v6;
  v4[2] = v7;
  return objc_msgSend(v2, "setTransform:", v4);
}

id sub_100050444(uint64_t a1)
{
  unsigned int v2;
  double v3;
  _QWORD v5[5];
  _QWORD v6[4];
  uint64_t v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "pointDidLeaveOriginalLine");
  v3 = 0.35;
  if (v2)
    v3 = 0.0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000504F4;
  v6[3] = &unk_10122D110;
  v7 = *(_QWORD *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100050530;
  v5[3] = &unk_10122F780;
  v5[4] = v7;
  return +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 0x20000, v6, v5, v3, 0.0);
}

id sub_1000504F4(uint64_t a1)
{
  void *v1;
  __int128 v2;
  _OWORD v4[3];

  v1 = *(void **)(a1 + 32);
  v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return objc_msgSend(v1, "setTransform:", v4);
}

id sub_100050530(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setIsAnimatingPickup:", 0);
}

id sub_100050750(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_setBoundsAndCenterToCaretRect");
}

id sub_100050758(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "p_removeFromView");
}

void sub_100051568(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100051598(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000518E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100051910(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100051D40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100051D70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100051DA0(uint64_t a1)
{
  id v3;
  CGImage *v4;
  _BOOL8 v5;
  void *v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  id v11;

  if (atomic_load((unsigned int *)(*(_QWORD *)(a1 + 32) + 24)))
  {
    v3 = 0;
    v4 = 0;
    v5 = 1;
  }
  else
  {
    v6 = *(void **)(a1 + 32);
    v9 = *(_OWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 64);
    v11 = 0;
    v4 = (CGImage *)objc_msgSend(v6, "p_copyCGImageForTime:error:", &v9, &v11);
    v3 = v11;
    v5 = v4 == 0;
  }
  if (atomic_load((unsigned int *)(*(_QWORD *)(a1 + 32) + 24)))
    v8 = 2;
  else
    v8 = v5;
  (*(void (**)(_QWORD, CGImage *, uint64_t, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v4, v8, v3);
  CGImageRelease(v4);

}

void sub_1000520A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000520C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000520D4(uint64_t a1)
{

}

void sub_1000520DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crlaxStorage"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "smartFieldAtCharIndex:attributeKind:effectiveRange:", *(_QWORD *)(a1 + 56), 6, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_100052140(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "crlaxSetSelectedTextRange:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_1000521D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "insertText:", *(_QWORD *)(a1 + 40));
}

id sub_10005226C(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLTextEditorAccessibility;
  return objc_msgSendSuper2(&v3, "cut:", v1);
}

id sub_100052334(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLTextEditorAccessibility;
  return objc_msgSendSuper2(&v3, "copy:", v1);
}

id sub_1000523FC(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)CRLTextEditorAccessibility;
  return objc_msgSendSuper2(&v3, "paste:", v1);
}

void sub_100052730(uint64_t a1)
{
  void *v2;
  const __CFString *v3;
  void *v4;

  if (+[CRLTextEditorAccessibility crlaxCommittingRemoteCommand](CRLTextEditorAccessibility, "crlaxCommittingRemoteCommand")|| (objc_msgSend(*(id *)(a1 + 32), "_crlaxIsDictating") & 1) != 0)
  {
    v3 = CFSTR("AXValueChangeUserInfoKeyIsQuiet");
    v4 = &__kCFBooleanTrue;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1));
    UIAccessibilityPostNotification(CRLAccessibilityValueChangedNotification, v2);

  }
  else
  {
    UIAccessibilityPostNotification(CRLAccessibilityValueChangedNotification, 0);
  }
}

void sub_100053724(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100053754(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000538E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100053918(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100054490(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  CRLShapeLibrary *v4;
  void *v5;
  CRLShapeLibrary *v6;
  void *v7;
  id v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLForResource:withExtension:", CFSTR("shape_library"), CFSTR("json")));

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "URLForResource:withExtension:", CFSTR("CRLShapeLibraryCategorySort"), CFSTR("plist")));

  v4 = [CRLShapeLibrary alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CRLLocale currentLocale](CRLLocale, "currentLocale"));
  v6 = -[CRLShapeLibrary initWithShapeLibraryURL:categorySortURL:locale:](v4, "initWithShapeLibraryURL:categorySortURL:locale:", v8, v3, v5);
  v7 = (void *)qword_101414C40;
  qword_101414C40 = (uint64_t)v6;

}

void sub_10005495C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005498C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000549BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000549EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100054F04(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100054F34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100055228(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100055258(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100055288(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_cacheDataAfterParsingWithSearchIndex:", a2);
}

void sub_1000554A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000554D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100055508(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10005555C;
  v3[3] = &unk_10122FA90;
  v3[4] = v1;
  return objc_msgSend(v1, "p_createSearchIndexWithCompletionHandler:", v3);
}

void sub_10005555C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000555DC;
  v5[3] = &unk_10122D3D8;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

}

id sub_1000555DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_cacheDataAfterParsingWithSearchIndex:", *(_QWORD *)(a1 + 40));
}

void sub_10005575C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005578C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100055954(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[3];
  _QWORD v24[3];
  uint64_t v25;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CRLShapeLibraryShape shapeIDForShapeFromDictionary:](CRLShapeLibraryShape, "shapeIDForShapeFromDictionary:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CRLShapeLibraryShape localizedNameForShapeFromDictionary:](CRLShapeLibraryShape, "localizedNameForShapeFromDictionary:", v4));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_shapeIDsToRemove"));
  v8 = objc_msgSend(v7, "containsObject:", v5);

  if ((v8 & 1) == 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[CRLShapeLibraryShape localizedKeywordsForShapeFromDictionary:keywordDelimiter:](CRLShapeLibraryShape, "localizedKeywordsForShapeFromDictionary:keywordDelimiter:", v4, *(_QWORD *)(a1 + 40)));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "crl_arrayByMappingObjectsUsingBlock:", &stru_10122FB30));
    if (*(_BYTE *)(a1 + 56))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[CRLShapeLibraryShape baseKeywordsForShapeFromDictionary:keywordDelimiter:](CRLShapeLibraryShape, "baseKeywordsForShapeFromDictionary:keywordDelimiter:", v4, *(_QWORD *)(a1 + 40)));
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "arrayByAddingObjectsFromArray:", v11));

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "crl_arrayByMappingObjectsUsingBlock:", &stru_10122FB50));
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "arrayByAddingObjectsFromArray:", v13));

      v10 = (void *)v14;
      v9 = (void *)v12;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "arrayByAddingObject:", v6));

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "arrayByAddingObject:", &off_1012CBB18));
    if (*(_BYTE *)(a1 + 56))
    {
      v17 = objc_claimAutoreleasedReturnValue(+[CRLShapeLibraryShape baseNameForShapeFromDictionary:](CRLShapeLibraryShape, "baseNameForShapeFromDictionary:", v4));
      v18 = (void *)v17;
      if (v17)
      {
        v25 = v17;
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
        v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "arrayByAddingObjectsFromArray:", v19));

        v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "arrayByAddingObject:", &off_1012CBB30));
        v16 = (void *)v21;
        v15 = (void *)v20;
      }

    }
    v23[0] = CFSTR("CRLShapeSearchIndexIdentifierKey");
    v23[1] = CFSTR("CRLShapeSearchIndexKeywords");
    v24[0] = v5;
    v24[1] = v15;
    v23[2] = CFSTR("CRLShapeSearchIndexPriorities");
    v24[2] = v16;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 3));
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v22);

  }
}

id sub_100055BF0(id a1, id a2)
{
  return &off_1012CBAE8;
}

id sub_100055BFC(id a1, id a2)
{
  return &off_1012CBB00;
}

void sub_100055F70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100055FA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100055FD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056000(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056030(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100056970(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000569A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000569D0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "p_shapeIDsToRemove"));
  v8 = objc_msgSend(v7, "containsObject:", v6);

  if (v8)
    objc_msgSend(*(id *)(a1 + 40), "addIndex:", a3);
}

void sub_100056A50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056A80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056AB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056AE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056E28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056E58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056E88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100056EB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000573C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000573F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100057BF0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[2];
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  __int128 v18;

  v5 = a2;
  v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v12 = sub_100057CD8;
  v13 = &unk_10122FE08;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v14 = v5;
  v15 = v7;
  v11[1] = 3221225472;
  v18 = *(_OWORD *)(a1 + 48);
  v16 = v8;
  v17 = v6;
  v9 = v6;
  v10 = v5;
  if (+[NSThread isMainThread](NSThread, "isMainThread", _NSConcreteStackBlock, 3221225472))
    v12((uint64_t)v11);
  else
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v11);

}

void sub_100057CD8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;

  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "p_transitionToItemPromiseState:", 2);
    objc_msgSend(*(id *)(a1 + 40), "insertDroppedNativeBoardItemsFromProviders:atUnscaledPoint:onRep:isCrossAppSource:isCrossDocument:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), 0, 0, *(double *)(a1 + 64), *(double *)(a1 + 72));
    objc_msgSend(*(id *)(a1 + 40), "cleanupEndOfDragOperation");
  }
  else
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_10122FDE0);
    v2 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DED370(v2);
    objc_msgSend(*(id *)(a1 + 40), "p_transitionToItemPromiseState:", 3);
    objc_msgSend(*(id *)(a1 + 40), "cleanupEndOfDragOperation");
    if (objc_msgSend(*(id *)(a1 + 56), "count"))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interactiveCanvasController"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layerHost"));
      objc_msgSend(v4, "presentErrors:withLocalizedDescription:completionHandler:", *(_QWORD *)(a1 + 56), 0, 0);

    }
  }
}

void sub_100057DE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100057E14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100057E44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100057E74(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[2];
  id (*v5)(uint64_t);
  void *v6;
  id v7;
  __int128 v8;
  id v9;
  __int128 v10;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v5 = sub_100057F44;
  v6 = &unk_10122FE08;
  v7 = a2;
  v10 = *(_OWORD *)(a1 + 56);
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(id *)(a1 + 48);
  v3 = v7;
  if (+[NSThread isMainThread](NSThread, "isMainThread", _NSConcreteStackBlock, 3221225472))
    v5((uint64_t)v4);
  else
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

id sub_100057F44(uint64_t a1)
{
  CRLBoardItemProviderFactory *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = -[CRLBoardItemProviderFactory initWithBoardItemFactory:]([CRLBoardItemProviderFactory alloc], "initWithBoardItemFactory:", *(_QWORD *)(a1 + 40));
    v10 = *(_QWORD *)(a1 + 32);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[CRLBoardItemProviderFactory providersForBoardItemsFromTextStorages:position:keepHighlights:](v2, "providersForBoardItemsFromTextStorages:position:keepHighlights:", v3, 0, *(double *)(a1 + 64), *(double *)(a1 + 72)));

    v5 = objc_msgSend(v4, "count");
    v6 = *(void **)(a1 + 48);
    if (v5
      && (v7 = objc_msgSend(v6, "insertDroppedNativeBoardItemsFromProviders:atUnscaledPoint:onRep:isCrossAppSource:isCrossDocument:", v4, *(_QWORD *)(a1 + 56), 0, 0, *(double *)(a1 + 64), *(double *)(a1 + 72)), v6 = *(void **)(a1 + 48), v7))
    {
      v8 = 2;
    }
    else
    {
      v8 = 3;
    }
    objc_msgSend(v6, "p_transitionToItemPromiseState:", v8);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "p_transitionToItemPromiseState:", 3);
  }
  return objc_msgSend(*(id *)(a1 + 48), "cleanupEndOfDragOperation");
}

void sub_100058068(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058098(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000580C8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD block[2];
  id (*v8)(uint64_t);
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  __int128 v13;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  v8 = sub_100058190;
  v9 = &unk_10122FF00;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v10 = v3;
  v11 = v4;
  block[1] = 3221225472;
  v13 = *(_OWORD *)(a1 + 48);
  v12 = v5;
  v6 = v3;
  if (+[NSThread isMainThread](NSThread, "isMainThread"))
    v8((uint64_t)block);
  else
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_100058190(uint64_t a1)
{
  id v2;
  id *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "count");
  v3 = *(id **)(a1 + 40);
  if (v2)
  {
    if (v3[21])
    {
      objc_msgSend(v3[21], "endIgnoringUserInteractionSafely");
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(void **)(v4 + 168);
      *(_QWORD *)(v4 + 168) = 0;

      v3 = *(id **)(a1 + 40);
    }
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100058254;
    v9[3] = &unk_10122D110;
    v9[4] = v3;
    return objc_msgSend(v3, "insertDroppedImportableBoardItemsFromProviders:atUnscaledPoint:onRep:completionHandler:", v6, v7, v9, *(double *)(a1 + 56), *(double *)(a1 + 64));
  }
  else
  {
    objc_msgSend(v3, "p_transitionToItemPromiseState:", 3);
    return objc_msgSend(*(id *)(a1 + 40), "cleanupEndOfDragOperation");
  }
}

id sub_100058254(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interactiveCanvasController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layerHost"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "asiOSCVC"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "crl_windowWrapper"));
  v6 = objc_msgSend(v5, "newWrapperBeginningIgnoringUserInteractionSafely");
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 168);
  *(_QWORD *)(v7 + 168) = v6;

  objc_msgSend(*(id *)(a1 + 32), "p_transitionToItemPromiseState:", 2);
  return objc_msgSend(*(id *)(a1 + 32), "cleanupEndOfDragOperation");
}

void sub_1000582F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058320(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100058350(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "p_transitionToItemPromiseState:", 3);
}

void sub_1000584E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDragAndDropCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB850;
  off_1013DB850 = v2;

}

void sub_100058510(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDragAndDropCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB850;
  off_1013DB850 = v2;

}

void sub_100058C68(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDragAndDropCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB850;
  off_1013DB850 = v2;

}

void sub_100058C98(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058CC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058CF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058D28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058D58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058D88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058DB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058DE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058E18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100058E48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100059104(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100059134(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100059348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_100059600(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100059628(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100059658(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000598B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000598D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100059908(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100059B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100059CF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100059D18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100059D48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A0D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005A0F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A128(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005A304(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A334(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A4E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005A510(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A540(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A6F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005A718(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A748(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A8F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005A91C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005A94C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005B4D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_10005B4EC(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "canBeginEditingChildRepOnDoubleTap:", *(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

id CRLAccessibilityStringsDictKey(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_1012A72B0, CFSTR("CRLAccessibility")));

  return v3;
}

id CRLAccessibilityLocalizedString(void *a1)
{
  id v1;
  void *v2;
  id v3;
  int ShouldCrashOnValidationErrorAfterLaunch;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_1012A72B0, CFSTR("CRLAccessibility")));

  if (CRLAccessibilityShouldPerformValidationChecks())
  {
    if (v3 == v1)
    {
      ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
      if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, (uint64_t)CFSTR("error: String could not be found for key: %@"), v5, v6, v7, v8, v9, (uint64_t)v1))abort();
    }
  }

  return v3;
}

id CRLAccessibilitySpecializedStringsDictKey(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int ShouldCrashOnValidationErrorAfterLaunch;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAccessibility sharedInstance](CRLAccessibility, "sharedInstance"));
  objc_opt_class(v2, v3);
  v5 = v4;

  if (objc_msgSend(v5, "conformsToProtocol:", &OBJC_PROTOCOL___CRLAccessibilitySpecializer)
    && (objc_opt_respondsToSelector(v5, "specializedStringsTable") & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "specializedStringsTable"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", v1, &stru_1012A72B0, v7));

  }
  else
  {
    if (CRLAccessibilityShouldPerformValidationChecks())
    {
      ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
      if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, (uint64_t)CFSTR("error: does not respond to specializedStringsTable for key: %@"), v10, v11, v12, v13, v14, (uint64_t)v1))abort();
    }
    v8 = 0;
  }

  return v8;
}

id CRLAccessibilitySpecializedLocalizedString(void *a1)
{
  id v1;
  id v2;
  id v3;
  int ShouldCrashOnValidationErrorAfterLaunch;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  v2 = CRLAccessibilitySpecializedStringsDictKey(v1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  if (CRLAccessibilityShouldPerformValidationChecks())
  {
    if (v3 == v1)
    {
      ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
      if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, (uint64_t)CFSTR("error: String could not be found for key: %@"), v5, v6, v7, v8, v9, (uint64_t)v1))abort();
    }
  }

  return v3;
}

id CRLAccessibilityStringForTimeInterval(uint64_t a1, double a2)
{
  double v3;
  double v4;
  double v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v26;

  if (a2 < 0.0)
    a2 = 0.0;
  v3 = floor(a2 / 3600.0);
  v4 = a2 - v3 * 3600.0;
  v5 = floor(v4 / 60.0);
  v6 = CRLAccessibilityLocalizedString(CFSTR("hours.format"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = CRLAccessibilityLocalizedString(CFSTR("minutes.format"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = CRLAccessibilityLocalizedString(CFSTR("seconds.format"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v12));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringByReplacingOccurrencesOfString:withString:", CFSTR("2"), v13));

  if (v3 <= 0.0)
    v15 = 0;
  else
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v7, *(_QWORD *)&v3));
  if (v5 <= 0.0)
    v16 = 0;
  else
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v9, *(_QWORD *)&v5));
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v14, v4 + v5 * -60.0));
  v23 = __CRLAccessibilityStringForVariables(1, v15, v17, v18, v19, v20, v21, v22, (uint64_t)v16);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

  return v24;
}

id __CRLAccessibilityStringForVariables(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  const __CFString *v18;
  id *v19;
  id v20;
  id v21;
  void *v22;
  id *v24;

  v10 = a2;
  v12 = objc_opt_class(NSString, v11);
  v14 = objc_opt_class(NSAttributedString, v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithString:](NSMutableString, "stringWithString:", &stru_1012A72B0));
  if ((objc_opt_isKindOfClass(v10, v12) & 1) != 0)
  {
    v16 = v10;
  }
  else
  {
    if ((objc_opt_isKindOfClass(v10, v14) & 1) == 0)
    {
      v17 = 0;
      goto LABEL_7;
    }
    v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "string"));
  }
  v17 = v16;
LABEL_7:
  if (objc_msgSend(v17, "length"))
    objc_msgSend(v15, "appendString:", v17);
  v24 = (id *)&a9;
  if (a1)
    v18 = CFSTR(", ");
  else
    v18 = CFSTR(" ");
  while (1)
  {
    v19 = v24++;
    v20 = *v19;
    if ((objc_opt_isKindOfClass(v20, v12) & 1) != 0)
    {
      v21 = v20;
LABEL_16:
      v22 = v21;
      goto LABEL_18;
    }
    if ((objc_opt_isKindOfClass(v20, v14) & 1) != 0)
    {
      v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "string"));
      goto LABEL_16;
    }
    v22 = 0;
LABEL_18:
    if (!objc_msgSend(v22, "length"))
      goto LABEL_23;
    if ((objc_msgSend(v22, "isEqualToString:", CFSTR("__CRLAccessibilityStringForVariablesSentinel")) & 1) != 0)
      break;
    if (objc_msgSend(v15, "length"))
      objc_msgSend(v15, "appendString:", v18);
    objc_msgSend(v15, "appendString:", v22);
LABEL_23:

  }
  return v15;
}

id CRLAccessibilityLocalizedUnsignedInteger(uint64_t a1)
{
  return +[NSNumberFormatter crlaxLocalizedUnsignedInteger:](NSNumberFormatter, "crlaxLocalizedUnsignedInteger:", a1);
}

id __CRLAccessibilityStringForArraysAndVariables(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id *v19;
  id v20;
  id v21;
  void *v22;
  id *v24;

  v9 = a1;
  v11 = objc_opt_class(NSString, v10);
  v13 = objc_opt_class(NSAttributedString, v12);
  v15 = objc_opt_class(NSArray, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
  {
    v17 = v9;
  }
  else if ((objc_opt_isKindOfClass(v9, v13) & 1) != 0)
  {
    v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "string"));
  }
  else
  {
    if ((objc_opt_isKindOfClass(v9, v15) & 1) == 0)
    {
      v18 = 0;
      goto LABEL_8;
    }
    v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsJoinedByString:", CFSTR(", ")));
  }
  v18 = v17;
LABEL_8:
  if (objc_msgSend(v18, "length"))
    objc_msgSend(v16, "appendString:", v18);
  v24 = (id *)&a9;
  while (1)
  {
    v19 = v24++;
    v20 = *v19;
    if ((objc_opt_isKindOfClass(v20, v11) & 1) != 0)
    {
      v21 = v20;
LABEL_17:
      v22 = v21;
      goto LABEL_18;
    }
    if ((objc_opt_isKindOfClass(v20, v13) & 1) != 0)
    {
      v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "string"));
      goto LABEL_17;
    }
    if ((objc_opt_isKindOfClass(v20, v15) & 1) != 0)
    {
      v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "componentsJoinedByString:", CFSTR(", ")));
      goto LABEL_17;
    }
    v22 = 0;
LABEL_18:
    if (!objc_msgSend(v22, "length"))
      goto LABEL_23;
    if ((objc_msgSend(v22, "isEqualToString:", CFSTR("__CRLAccessibilityStringForArraysAndVariablesSentinel")) & 1) != 0)break;
    if (objc_msgSend(v16, "length"))
      objc_msgSend(v16, "appendString:", CFSTR(", "));
    objc_msgSend(v16, "appendString:", v22);
LABEL_23:

  }
  return v16;
}

id CRLAccessibilityFriendlyFilename(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = objc_msgSend(a1, "mutableCopy");
  if (objc_msgSend(v1, "length"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", CFSTR("\\.([a-zA-Z0-9]+)$"), 16, 0));
    objc_msgSend(v2, "replaceMatchesInString:options:range:withTemplate:", v1, 0, 0, objc_msgSend(v1, "length"), &stru_1012A72B0);

    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", CFSTR("[\\s|\\-|\\_|.]{0,1}2x"), 16, 0));
    objc_msgSend(v3, "replaceMatchesInString:options:range:withTemplate:", v1, 0, 0, objc_msgSend(v1, "length"), &stru_1012A72B0);

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", CFSTR("[\\-\\_]+"), 0, 0));
    objc_msgSend(v4, "replaceMatchesInString:options:range:withTemplate:", v1, 0, 0, objc_msgSend(v1, "length"), CFSTR(" "));

  }
  return v1;
}

void CRLAccessibilityPostAnnouncementNotification(void *a1, void *a2)
{
  CRLAccessibilityPostAnnouncementNotificationWithPriorityAndSound(a1, a2, 5, 0);
}

void CRLAccessibilityPostHighPriorityAnnouncementNotification(void *a1, void *a2)
{
  CRLAccessibilityPostAnnouncementNotificationWithPriorityAndSound(a1, a2, 1, 0);
}

void CRLAccessibilityPostHighPriorityAnnouncementNotificationWithSound(void *a1, void *a2, void *a3)
{
  CRLAccessibilityPostAnnouncementNotificationWithPriorityAndSound(a1, a2, 1, a3);
}

void CRLAccessibilityPostAnnouncementNotificationWithPriorityAndSound(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;

  v10 = a1;
  v7 = a2;
  v8 = a4;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAccessibility sharedInstance](CRLAccessibility, "sharedInstance"));
  if (objc_msgSend(v9, "crlaxRespondsToSelector:fromExtrasProtocol:", "handlePostingAnnouncement:sender:priority:sound:", &OBJC_PROTOCOL___CRLAccessibilityExtras))objc_msgSend(v9, "handlePostingAnnouncement:sender:priority:sound:", v7, v10, a3, v8);

}

void CRLAccessibilityPerformBlockOnMainThread(void *a1)
{
  void (**block)(void);

  block = a1;
  if (+[NSThread isMainThread](NSThread, "isMainThread"))
    block[2]();
  else
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void CRLAccessibilityPerformBlockAsynchronouslyOnMainThread(dispatch_block_t block)
{
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void CRLAccessibilityPerformBlockOnMainThreadAfterDelay(void *a1, double a2)
{
  int64_t v2;
  dispatch_time_t v3;
  dispatch_block_t block;

  v2 = (uint64_t)(a2 * 1000000000.0);
  block = a1;
  v3 = dispatch_time(0, v2);
  dispatch_after(v3, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10005CCE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005CD18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005CF1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005CF4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005D150(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005D180(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005D384(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005D3B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10005D47C(uint64_t a1)
{
  MTLSamplerDescriptor *v2;
  void *v3;
  id v4;

  v2 = objc_opt_new(MTLSamplerDescriptor);
  -[MTLSamplerDescriptor setMinFilter:](v2, "setMinFilter:", 1);
  -[MTLSamplerDescriptor setMagFilter:](v2, "setMagFilter:", 1);
  -[MTLSamplerDescriptor setMipFilter:](v2, "setMipFilter:", 2);
  -[MTLSamplerDescriptor setRAddressMode:](v2, "setRAddressMode:", 0);
  -[MTLSamplerDescriptor setSAddressMode:](v2, "setSAddressMode:", 0);
  -[MTLSamplerDescriptor setTAddressMode:](v2, "setTAddressMode:", 0);
  -[MTLSamplerDescriptor setLabel:](v2, "setLabel:", CFSTR("Linear Clamp To Edge Sampler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
  v4 = objc_msgSend(v3, "newSamplerStateWithDescriptor:", v2);

  return v4;
}

id sub_10005D5B0(uint64_t a1)
{
  MTLSamplerDescriptor *v2;
  void *v3;
  id v4;

  v2 = objc_opt_new(MTLSamplerDescriptor);
  -[MTLSamplerDescriptor setMinFilter:](v2, "setMinFilter:", 1);
  -[MTLSamplerDescriptor setMagFilter:](v2, "setMagFilter:", 1);
  -[MTLSamplerDescriptor setMipFilter:](v2, "setMipFilter:", 2);
  -[MTLSamplerDescriptor setRAddressMode:](v2, "setRAddressMode:", 4);
  -[MTLSamplerDescriptor setSAddressMode:](v2, "setSAddressMode:", 4);
  -[MTLSamplerDescriptor setTAddressMode:](v2, "setTAddressMode:", 4);
  -[MTLSamplerDescriptor setLabel:](v2, "setLabel:", CFSTR("Linear Clamp To Zero Sampler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
  v4 = objc_msgSend(v3, "newSamplerStateWithDescriptor:", v2);

  return v4;
}

id sub_10005D6E4(uint64_t a1)
{
  MTLSamplerDescriptor *v2;
  void *v3;
  id v4;

  v2 = objc_opt_new(MTLSamplerDescriptor);
  -[MTLSamplerDescriptor setMinFilter:](v2, "setMinFilter:", 0);
  -[MTLSamplerDescriptor setMagFilter:](v2, "setMagFilter:", 0);
  -[MTLSamplerDescriptor setMipFilter:](v2, "setMipFilter:", 2);
  -[MTLSamplerDescriptor setRAddressMode:](v2, "setRAddressMode:", 0);
  -[MTLSamplerDescriptor setSAddressMode:](v2, "setSAddressMode:", 0);
  -[MTLSamplerDescriptor setTAddressMode:](v2, "setTAddressMode:", 0);
  -[MTLSamplerDescriptor setLabel:](v2, "setLabel:", CFSTR("Nearest Clamp To Edge Sampler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
  v4 = objc_msgSend(v3, "newSamplerStateWithDescriptor:", v2);

  return v4;
}

id sub_10005D818(uint64_t a1)
{
  MTLSamplerDescriptor *v2;
  void *v3;
  id v4;

  v2 = objc_opt_new(MTLSamplerDescriptor);
  -[MTLSamplerDescriptor setMinFilter:](v2, "setMinFilter:", 0);
  -[MTLSamplerDescriptor setMagFilter:](v2, "setMagFilter:", 0);
  -[MTLSamplerDescriptor setMipFilter:](v2, "setMipFilter:", 2);
  -[MTLSamplerDescriptor setRAddressMode:](v2, "setRAddressMode:", 4);
  -[MTLSamplerDescriptor setSAddressMode:](v2, "setSAddressMode:", 4);
  -[MTLSamplerDescriptor setTAddressMode:](v2, "setTAddressMode:", 4);
  -[MTLSamplerDescriptor setLabel:](v2, "setLabel:", CFSTR("Nearest Clamp To Zero Sampler"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "device"));
  v4 = objc_msgSend(v3, "newSamplerStateWithDescriptor:", v2);

  return v4;
}

uint64_t sub_10005D924(uint64_t a1)
{
  sub_100171FD4(a1 + 24);
  *(_QWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  bzero((void *)a1, 0x2C8uLL);
  return a1;
}

uint64_t sub_10005D968(uint64_t a1, uint64_t a2)
{
  sub_100171FD4(a1 + 24);
  *(_QWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  bzero((void *)a1, 0x2C8uLL);
  sub_10005DA14(a1, a2);
  return a1;
}

void sub_10005D9C8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  sub_100171FA4(v1);
  _Unwind_Resume(a1);
}

void sub_10005DA14(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  id v14;
  void *v15;

  if (a2 != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v4 = *(void **)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    objc_storeStrong((id *)(a1 + 24), v4);
    objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
    v6 = *(_OWORD *)(a2 + 40);
    v7 = *(_OWORD *)(a2 + 56);
    v8 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v8;
    *(_OWORD *)(a1 + 56) = v7;
    *(_OWORD *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_QWORD *)&v9 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v9;
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)&v9 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = v9;
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
    *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
    *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
    v10 = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 448) = v10;
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    *(_BYTE *)(a1 + 457) = *(_BYTE *)(a2 + 457);
    v11 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v11;
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_WORD *)(a1 + 504) = *(_WORD *)(a2 + 504);
    v12 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v12;
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a2 + 544);
    *(_BYTE *)(a1 + 548) = *(_BYTE *)(a2 + 548);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
    *(_BYTE *)(a1 + 594) = *(_BYTE *)(a2 + 594);
    *(_BYTE *)(a1 + 593) = *(_BYTE *)(a2 + 593);
    objc_storeStrong((id *)(a1 + 600), *(id *)(a2 + 600));
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    objc_storeStrong((id *)(a1 + 624), *(id *)(a2 + 624));
    objc_storeStrong((id *)(a1 + 632), *(id *)(a2 + 632));
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    objc_storeStrong((id *)(a1 + 656), *(id *)(a2 + 656));
    objc_storeStrong((id *)(a1 + 672), *(id *)(a2 + 672));
    objc_storeStrong((id *)(a1 + 680), *(id *)(a2 + 680));
    v13 = *(_QWORD *)(a2 + 704);
    *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
    *(_QWORD *)(a1 + 704) = v13;
    v14 = objc_msgSend(*(id *)(a2 + 664), "mutableCopy");
    v15 = *(void **)(a1 + 664);
    *(_QWORD *)(a1 + 664) = v14;

  }
}

id *sub_10005DC80(id *a1)
{

  sub_100171FA4(a1 + 3);
  return a1;
}

uint64_t sub_10005DCE4(uint64_t a1, uint64_t a2)
{
  sub_10005DA14(a1, a2);
  return a1;
}

id sub_10005DD08(uint64_t a1)
{
  return *(id *)(a1 + 600);
}

void sub_10005DD10(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 600), a2);
}

id sub_10005DD18(uint64_t a1)
{
  return *(id *)(a1 + 608);
}

uint64_t sub_10005DD20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 608) = a2;
  return result;
}

id sub_10005DD28(uint64_t a1)
{
  return *(id *)(a1 + 616);
}

uint64_t sub_10005DD30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 616) = a2;
  return result;
}

id sub_10005DD38(uint64_t a1)
{
  return *(id *)(a1 + 624);
}

void sub_10005DD40(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 624), a2);
}

id sub_10005DD48(uint64_t a1)
{
  return *(id *)(a1 + 632);
}

void sub_10005DD50(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 632), a2);
}

id sub_10005DD58(uint64_t a1)
{
  return *(id *)(a1 + 648);
}

uint64_t sub_10005DD60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 648) = a2;
  return result;
}

id sub_10005DD68(uint64_t a1)
{
  return *(id *)(a1 + 656);
}

void sub_10005DD70(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 656), a2);
}

void sub_10005DD78(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;

}

id sub_10005DD84(uint64_t a1)
{
  return *(id *)(a1 + 672);
}

void sub_10005DD8C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 672), a2);
}

id sub_10005DD94(uint64_t a1)
{
  return *(id *)(a1 + 680);
}

void sub_10005DD9C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 680), a2);
}

uint64_t sub_10005DDA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 688);
}

uint64_t sub_10005DDAC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 696);
}

uint64_t sub_10005DDBC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 696) = a2;
  *(_QWORD *)(result + 704) = a3;
  return result;
}

void sub_10005E894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;

  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

void sub_10005E8C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005E8F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005E920(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005E950(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

intptr_t sub_10005E980(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10005E988(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

uint64_t sub_10005E9B8(uint64_t a1, void *a2)
{
  void (**v3)(id, void *, void *);
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSErrorUserInfoKey v17;
  void *v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", *(_QWORD *)(a1 + 32)));
  if (!v4)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101230590);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE1A0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012305B0);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE07C(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]_block_invoke"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLItemProviderItemWriter.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 127, 0, "invalid nil value for '%{public}s'", "utType");

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "promisedDataForPublicType:", v4));
  if (v8)
  {
    v9 = 0;
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012305D0);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE114();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012305F0);
    v10 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE07C(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]_block_invoke"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLItemProviderItemWriter.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 129, 0, "invalid nil value for '%{public}s'", "data");

    v17 = NSLocalizedDescriptionKey;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("The object couldn’t be converted to a format compatible with this app."), 0, 0));
    v18 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.freeform"), 6, v15));
  }
  v3[2](v3, v8, v9);

  return 0;
}

void sub_10005ED5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005ED8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005EDBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005EDEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005EE1C(uint64_t a1)
{
  CRLCanvasImager *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;

  v2 = -[CRLCanvasImager initWithBoard:]([CRLCanvasImager alloc], "initWithBoard:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "boardItems"));
  -[CRLCanvasImager setInfos:](v2, "setInfos:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "boardItems"));
  v5 = objc_msgSend(v4, "count");

  if (v5 == (id)1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "boardItems"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));

    objc_msgSend(v7, "viewScaleToUseWhenRasterizingSingleBoardItemForCopy");
    v9 = v8;
    if (v8 < 0.0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101230638);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DEE22C();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101230658);
      v10 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DEE07C(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]_block_invoke"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLItemProviderItemWriter.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 165, 0, "requestedViewScale should never be negative.");

    }
    if (v9 > 0.0)
    {
      -[CRLCanvasImager setViewScale:](v2, "setViewScale:", v9);

      v13 = 0;
      goto LABEL_16;
    }

  }
  -[CRLCanvasImager setContentsScale:](v2, "setContentsScale:", 2.0);
  v13 = 1;
LABEL_16:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v13;
  -[CRLCanvasImager setMaximumImagePixelSize:](v2, "setMaximumImagePixelSize:", sub_10040EB5C());
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = -[CRLCanvasImager newImage](v2, "newImage");
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));

}

void sub_10005F06C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005F09C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10005F0CC(_QWORD *a1, void *a2)
{
  NSObject *v3;
  void (**v4)(id, void *, void *);
  void *v5;
  void *v6;
  void *v7;
  __CFData *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSErrorUserInfoKey v15;
  void *v16;

  v3 = a1[4];
  v4 = a2;
  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    if (*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 144.0));
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, kCGImagePropertyDPIWidth);

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 144.0));
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, kCGImagePropertyDPIHeight);

    }
    v8 = sub_10043507C(*(CGImage **)(*(_QWORD *)(a1[5] + 8) + 24), v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    CGImageRelease(*(CGImageRef *)(*(_QWORD *)(a1[5] + 8) + 24));

    v10 = 0;
  }
  else
  {
    v15 = NSLocalizedDescriptionKey;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("The iWork object couldn’t be converted to a format compatible with this app."), 0, 0));
    v16 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.freeform"), 6, v13));
    v9 = 0;
  }
  v4[2](v4, v9, v10);

  return 0;
}

uint64_t sub_10005F2E8(uint64_t a1, void *a2)
{
  void (**v3)(id, void *, _QWORD);
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataUsingEncoding:", 4));
  if (!v4)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012306C8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE2B0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012306E8);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE07C(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLItemProviderItemWriter createItemProviderWithCopyOfBoardItems:fromInteractiveCanvasController:outCopiedBoardItems:]_block_invoke"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLItemProviderItemWriter.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 224, 0, "invalid nil value for '%{public}s'", "publicTextData");

  }
  v3[2](v3, v4, 0);

  return 0;
}

void sub_10005F480(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005F4B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

intptr_t sub_10005F864(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10005F86C(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(id, void *, id);
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v11;
  NSAttributedStringDocumentAttributeKey v12;
  NSAttributedStringDocumentType v13;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = objc_msgSend(v3, "length");
  v6 = *(void **)(a1 + 32);
  v12 = NSDocumentTypeDocumentAttribute;
  v13 = NSRTFTextDocumentType;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
  v11 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dataFromRange:documentAttributes:error:", 0, v5, v7, &v11));
  v9 = v11;

  v4[2](v4, v8, v9);
  return 0;
}

void sub_10005FCD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10005FD08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_10005FD50(int a1, double a2, double a3, double a4, double a5)
{
  double result;

  switch(a1)
  {
    case 0:
      result = CGRectGetMinX(*(CGRect *)&a2);
      break;
    case 1:
      result = CGRectGetMidX(*(CGRect *)&a2);
      break;
    case 2:
      result = CGRectGetMaxX(*(CGRect *)&a2);
      break;
    case 3:
      result = CGRectGetMinY(*(CGRect *)&a2);
      break;
    case 4:
      result = CGRectGetMidY(*(CGRect *)&a2);
      break;
    case 5:
      result = CGRectGetMaxY(*(CGRect *)&a2);
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

double sub_10005FD98(double a1, double a2, double a3)
{
  return a1 - a3 * 0.5;
}

double sub_10005FDB0(double a1, double a2, double a3)
{
  if (a1 >= a3)
    return a3;
  else
    return a1;
}

double sub_10005FDDC()
{
  return 0.0;
}

BOOL sub_10005FDF0(double a1, double a2, double a3, double a4)
{
  if (a1 != a3 && vabdd_f64(a1, a3) >= 0.01)
    return 0;
  if (vabdd_f64(a2, a4) < 0.01)
    return 1;
  return a2 == a4;
}

BOOL sub_10005FE30(double a1, double a2, double a3, double a4, double a5)
{
  double v5;

  v5 = vabdd_f64(a1, a3);
  if (a1 != a3 && v5 >= a5)
    return 0;
  if (vabdd_f64(a2, a4) < a5)
    return 1;
  return a2 == a4;
}

BOOL sub_10005FE60(double a1, double a2, double a3, double a4)
{
  if (a1 != a3 && vabdd_f64(a1, a3) >= 0.1)
    return 0;
  if (vabdd_f64(a2, a4) < 0.1)
    return 1;
  return a2 == a4;
}

BOOL sub_10005FEA0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  _OWORD v6[3];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v6[2] = a1[2];
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return sub_10005FEEC((double *)v6, (double *)v5, 0.000000001);
}

BOOL sub_10005FEEC(double *a1, double *a2, double a3)
{
  return vabdd_f64(*a1, *a2) < a3
      && vabdd_f64(a1[1], a2[1]) < a3
      && vabdd_f64(a1[2], a2[2]) < a3
      && vabdd_f64(a1[3], a2[3]) < a3
      && vabdd_f64(a1[4], a2[4]) < a3
      && vabdd_f64(a1[5], a2[5]) < a3;
}

BOOL sub_10005FF70(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 != a5 && vabdd_f64(a1, a5) >= 0.01
    || a2 != a6 && vabdd_f64(a2, a6) >= 0.01
    || a3 != a7 && vabdd_f64(a3, a7) >= 0.01)
  {
    return 0;
  }
  if (vabdd_f64(a4, a8) < 0.01)
    return 1;
  return a4 == a8;
}

BOOL sub_10005FFE0(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v13;
  CGRect v14;

  v13 = CGRectInset(*(CGRect *)&a1, -0.01, -0.01);
  v14.origin.x = a5;
  v14.origin.y = a6;
  v14.size.width = a7;
  v14.size.height = a8;
  return CGRectContainsRect(v13, v14);
}

BOOL sub_100060030(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6)
{
  CGFloat height;
  CGRect v10;
  CGRect v11;

  height = CGSizeZero.height;
  v10 = CGRectInset(*(CGRect *)&a1, -0.01, -0.01);
  v11.origin.x = a5;
  v11.origin.y = a6;
  v11.size.width = CGSizeZero.width;
  v11.size.height = height;
  return CGRectContainsRect(v10, v11);
}

BOOL sub_100060084(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return fabs((a3 - a1) * (a6 - a2) - (a4 - a2) * (a5 - a1)) < 8.90029543e-308;
}

BOOL sub_1000600B4(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v6 = a3 - a1;
  v7 = a6 - a2;
  v8 = a4 - a2;
  v9 = a5 - a1;
  v10 = v6 * v7 - v8 * v9;
  return v10 == 0.0 || v10 * v10 < (v8 * v8 + v6 * v6) * 0.0001 * (v7 * v7 + v9 * v9);
}

double sub_10006010C(double a1, double a2, double a3, double a4)
{
  return (a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3);
}

BOOL sub_100060120(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v16;
  double MaxX;
  double v18;
  double MinX;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  v16 = CGRectGetMinX(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  MaxX = CGRectGetMaxX(v23);
  v24.origin.x = a5;
  v24.origin.y = a6;
  v24.size.width = a7;
  v24.size.height = a8;
  v18 = CGRectGetMaxX(v24);
  if (MinX <= v16)
    return MaxX >= v16;
  else
    return v18 >= MinX;
}

BOOL sub_1000601E4(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v16;
  double MaxY;
  double v18;
  double MinY;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  MinY = CGRectGetMinY(*(CGRect *)&a1);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  v16 = CGRectGetMinY(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  MaxY = CGRectGetMaxY(v23);
  v24.origin.x = a5;
  v24.origin.y = a6;
  v24.size.width = a7;
  v24.size.height = a8;
  v18 = CGRectGetMaxY(v24);
  if (MinY <= v16)
    return MaxY >= v16;
  else
    return v18 >= MinY;
}

double sub_1000602A8(float64x2_t *a1, double a2)
{
  double result;

  __asm { FMOV            V5.2D, #3.0 }
  *(_QWORD *)&result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_f64(a1[1], _Q5), a2), 1.0 - a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(*a1, 1.0 - a2), 1.0 - a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(vmulq_f64(a1[2], _Q5), a2), a2), 1.0 - a2), vmulq_n_f64(vmulq_n_f64(a1[3], a2), a2), a2);
  return result;
}

float64_t sub_100060300(float64x2_t *a1)
{
  float64x2_t v1;
  int8x16_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  int8x16_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  v1 = a1[1];
  v2 = (int8x16_t)vcgtq_f64(v1, *a1);
  v3 = (float64x2_t)vbslq_s8(v2, *(int8x16_t *)a1, (int8x16_t)v1);
  v4 = a1[2];
  v5 = a1[3];
  v6 = (int8x16_t)vcgtq_f64(v5, v4);
  v7 = (float64x2_t)vbslq_s8(v6, (int8x16_t)v4, (int8x16_t)v5);
  v8 = (float64x2_t)vbslq_s8(v2, (int8x16_t)v1, *(int8x16_t *)a1);
  v9 = (float64x2_t)vbslq_s8(v6, (int8x16_t)v5, (int8x16_t)v4);
  v10 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v9, v8), (int8x16_t)v9, (int8x16_t)v8), (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v3), (int8x16_t)v3, (int8x16_t)v7));
  if (v10.f64[0] < v10.f64[1])
    v10.f64[0] = v10.f64[1];
  return v10.f64[0];
}

double sub_100060350(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;

  v6 = a3 - a1;
  v7 = a4 - a2;
  v8 = 1.0 / sqrt(v7 * v7 + v6 * v6);
  return a1 + v6 * v8 * ((a6 - a2) * (v7 * v8) + (a5 - a1) * (v6 * v8));
}

double sub_100060398(double a1, double a2)
{
  return a1 * (1.0 / sqrt(a2 * a2 + a1 * a1));
}

double sub_1000603B8(double a1, double a2, double a3)
{
  return a1 - a3;
}

double sub_1000603C4(double a1, double a2, double a3, double a4)
{
  return a2 * a4 + a1 * a3;
}

double sub_1000603D0(double a1, double a2, double a3)
{
  return a1 + a3;
}

double sub_1000603DC(double a1, double a2, double a3)
{
  return a1 * a3;
}

double sub_1000603E8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  unsigned int v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  NSObject *v32;
  char *v33;
  __int128 v35;
  CGFloat MinX;
  CGFloat MaxX;
  CGFloat MinY;
  CGFloat MaxY;
  CGFloat v40;
  CGFloat v41;
  uint8_t buf[4];
  unsigned int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v50.origin.x = a5;
  v50.origin.y = a6;
  v50.size.width = a7;
  v50.size.height = a8;
  MinX = CGRectGetMinX(v50);
  v51.origin.x = a5;
  v51.origin.y = a6;
  v51.size.width = a7;
  v51.size.height = a8;
  MaxX = CGRectGetMaxX(v51);
  v52.origin.x = a5;
  v52.origin.y = a6;
  v52.size.width = a7;
  v52.size.height = a8;
  MinY = CGRectGetMinY(v52);
  v53.origin.x = a5;
  v53.origin.y = a6;
  v53.size.width = a7;
  v53.size.height = a8;
  MaxY = CGRectGetMaxY(v53);
  v16 = sub_1000607FC(a1, a2, a5, a6, a7, a8);
  v40 = a7;
  v41 = a8;
  v17 = sub_1000607FC(a3, a4, a5, a6, a7, a8);
  if (!(v17 | v16))
    return a1;
  v19 = v17;
  if ((v17 & v16) == 0)
  {
    *(_QWORD *)&v18 = 67109378;
    v35 = v18;
    while (1)
    {
      v21 = v16 ? v16 : v19;
      if ((v21 & 1) != 0)
        break;
      if ((v21 & 2) != 0)
      {
        v28 = a3 - a1;
        v27 = MinY;
        goto LABEL_23;
      }
      if ((v21 & 4) != 0)
      {
        v31 = a4 - a2;
        v20 = MaxX;
      }
      else
      {
        if ((v21 & 8) == 0)
        {
          v22 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_101230770);
          v23 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109890;
            v43 = v22;
            v44 = 2082;
            v45 = "CGPoint p_CRLIntersectionPointOfLineWithRect(CGPoint, CGPoint, CGRect)";
            v46 = 2082;
            v47 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m";
            v48 = 1024;
            v49 = 441;
            _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unhandled intersection scenario", buf, 0x22u);
          }
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_101230790);
          v24 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            v32 = v24;
            v33 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
            *(_DWORD *)buf = v35;
            v43 = v22;
            v44 = 2114;
            v45 = v33;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

          }
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGPoint p_CRLIntersectionPointOfLineWithRect(CGPoint, CGPoint, CGRect)", v35));
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v25, v26, 441, 0, "Unhandled intersection scenario");

          v20 = MinX;
          v27 = MinY;
          goto LABEL_24;
        }
        v31 = a4 - a2;
        v20 = MinX;
      }
      v27 = a2 + (v20 - a1) * v31 / (a3 - a1);
LABEL_24:
      v29 = sub_1000607FC(v20, v27, a5, a6, v40, v41);
      if (v21 == v16)
      {
        a1 = v20;
        v30 = v29;
      }
      else
      {
        v30 = v16;
      }
      if (v21 == v16)
        a2 = v27;
      else
        v19 = v29;
      if (!(v19 | v30))
        return a1;
      if (v21 != v16)
      {
        a3 = v20;
        a4 = v27;
      }
      v16 = v30;
      if ((v19 & v30) != 0)
        return v20;
    }
    v28 = a3 - a1;
    v27 = MaxY;
LABEL_23:
    v20 = a1 + v28 * (v27 - a2) / (a4 - a2);
    goto LABEL_24;
  }
  return INFINITY;
}

uint64_t sub_1000607FC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v12;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  if (a2 <= CGRectGetMaxY(v14))
  {
    v15.origin.x = a3;
    v15.origin.y = a4;
    v15.size.width = a5;
    v15.size.height = a6;
    if (a2 < CGRectGetMinY(v15))
      v12 = 2;
    else
      v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  v16.origin.x = a3;
  v16.origin.y = a4;
  v16.size.width = a5;
  v16.size.height = a6;
  if (a1 > CGRectGetMaxX(v16))
    return v12 | 4;
  v17.origin.x = a3;
  v17.origin.y = a4;
  v17.size.width = a5;
  v17.size.height = a6;
  if (a1 < CGRectGetMinX(v17))
    return v12 | 8;
  else
    return v12;
}

void sub_1000608CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000608FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10006092C(CGFloat a1, CGFloat a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v12;
  double v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  double v19;
  double v20;
  int v21;

  v12 = a4;
  v13 = a3;
  while (1)
  {
    v16 = sub_1000607FC(a1, a2, a5, a6, a7, a8);
    v17 = sub_1000607FC(v13, v12, a5, a6, a7, a8);
    result = 1;
    if (!v16 || !v17)
      break;
    if ((v17 & v16) != 0)
      return 0;
    v19 = (v13 + a1) * 0.5;
    v20 = (v12 + a2) * 0.5;
    v21 = sub_10006092C(1, a1, a2, v19, v20, a5, a6, a7, a8);
    a1 = v19;
    a2 = v20;
    v13 = a3;
    v12 = a4;
    if (v21)
      return 1;
  }
  return result;
}

double sub_100060A38(double a1, double a2, double a3)
{
  return (a1 + a3) * 0.5;
}

uint64_t sub_100060A50(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  double v18;

  v8 = a4 - a2;
  v9 = a1 - a3;
  v10 = a8 - a6;
  v11 = a5 - a7;
  v12 = (a4 - a2) * (a5 - a7) - (a8 - a6) * (a1 - a3);
  if (v12 != 0.0)
  {
    v13 = a6 * v11 + v10 * a5;
    v14 = a2 * v9 + v8 * a1;
    v15 = (v11 * v14 - v9 * v13) / v12;
    if (v15 >= fmin(a1, a3) + -0.01 && v15 <= fmax(a1, a3) + 0.01)
    {
      v16 = (v14 * -v10 + v8 * v13) / v12;
      if (v16 >= fmin(a2, a4) + -0.01
        && v16 <= fmax(a2, a4) + 0.01
        && v15 >= fmin(a5, a7) + -0.01
        && v15 <= fmax(a5, a7) + 0.01
        && v16 >= fmin(a6, a8) + -0.01)
      {
        v17 = v16 > fmax(a6, a8) + 0.01;
        return !v17;
      }
    }
    return 0;
  }
  if (fabs((a3 - a1) * (a6 - a2) - v8 * (a5 - a1)) >= 8.90029543e-308)
    return 0;
  v18 = fmin(a1, a3) + -0.01;
  if (a5 >= v18 && a5 <= fmax(a1, a3) + 0.01 && a6 >= fmin(a2, a4) + -0.01 && a6 <= fmax(a2, a4) + 0.01)
    return 1;
  if (a7 < v18 || a7 > fmax(a1, a3) + 0.01 || a8 < fmin(a2, a4) + -0.01)
    return 0;
  v17 = a8 > fmax(a2, a4) + 0.01;
  return !v17;
}

BOOL sub_100060BF8(double a1, double a2)
{
  return a2 == 0.0 || a1 == 0.0;
}

double sub_100060C0C(double a1, double a2, double a3, double a4)
{
  return a2 * a3 - a1 * a4;
}

double sub_100060C18(double result, double a2, double a3)
{
  if (result < a3)
    return a3;
  return result;
}

CGFloat sub_100060C2C(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL4 v8;

  v8 = a7 <= 0.0;
  if (a8 > 0.0)
    v8 = 0;
  if (a3 > 0.0 || a4 > 0.0)
  {
    if (v8)
    {
      return a1;
    }
    else if (a1 < a5)
    {
      return a1;
    }
  }
  else if (v8)
  {
    return CGRectZero.origin.x;
  }
  return a5;
}

double sub_100060CC8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MaxY;
  CGFloat v16;
  double MinY;
  double v18;
  double result;
  CGFloat v20;
  double MaxX;
  double v23;
  double MinX;
  double v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v20 = a7;
  v26.size.height = a8;
  v25 = fmax(MinX, CGRectGetMinX(v26));
  v27.origin.x = a1;
  v27.origin.y = a2;
  v27.size.width = a3;
  v27.size.height = a4;
  MaxX = CGRectGetMaxX(v27);
  v28.origin.x = a5;
  v28.origin.y = a6;
  v28.size.width = a7;
  v28.size.height = a8;
  v23 = fmin(MaxX, CGRectGetMaxX(v28));
  v29.origin.x = a1;
  v29.origin.y = a2;
  v29.size.width = a3;
  v29.size.height = a4;
  MaxY = CGRectGetMaxY(v29);
  v30.origin.x = a5;
  v30.origin.y = a6;
  v30.size.width = v20;
  v30.size.height = a8;
  v16 = fmin(MaxY, CGRectGetMaxY(v30));
  v31.origin.x = a1;
  v31.origin.y = a2;
  v31.size.width = a3;
  v31.size.height = a4;
  MinY = CGRectGetMinY(v31);
  v32.origin.x = a5;
  v32.origin.y = a6;
  v32.size.width = v20;
  v32.size.height = a8;
  v18 = fmax(MinY, CGRectGetMinY(v32));
  v33.origin.x = v25;
  v33.size.width = v23 - v25;
  v33.size.height = v18 - v16;
  v33.origin.y = v16;
  *(_QWORD *)&result = (unint64_t)CGRectStandardize(v33);
  return result;
}

double sub_100060E00(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinY;
  CGFloat v16;
  double MaxY;
  double v18;
  double result;
  CGFloat v20;
  double MinX;
  double v23;
  double MaxX;
  double v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v20 = a7;
  v26.size.height = a8;
  v25 = fmin(MaxX, CGRectGetMaxX(v26));
  v27.origin.x = a1;
  v27.origin.y = a2;
  v27.size.width = a3;
  v27.size.height = a4;
  MinX = CGRectGetMinX(v27);
  v28.origin.x = a5;
  v28.origin.y = a6;
  v28.size.width = a7;
  v28.size.height = a8;
  v23 = fmax(MinX, CGRectGetMinX(v28));
  v29.origin.x = a1;
  v29.origin.y = a2;
  v29.size.width = a3;
  v29.size.height = a4;
  MinY = CGRectGetMinY(v29);
  v30.origin.x = a5;
  v30.origin.y = a6;
  v30.size.width = v20;
  v30.size.height = a8;
  v16 = fmax(MinY, CGRectGetMinY(v30));
  v31.origin.x = a1;
  v31.origin.y = a2;
  v31.size.width = a3;
  v31.size.height = a4;
  MaxY = CGRectGetMaxY(v31);
  v32.origin.x = a5;
  v32.origin.y = a6;
  v32.size.width = v20;
  v32.size.height = a8;
  v18 = fmin(MaxY, CGRectGetMaxY(v32));
  v33.origin.x = v25;
  v33.size.width = v23 - v25;
  v33.size.height = v18 - v16;
  v33.origin.y = v16;
  *(_QWORD *)&result = (unint64_t)CGRectStandardize(v33);
  return result;
}

BOOL sub_100060F38(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL8 result;

  if (a1 < a5)
    result = a1 + a3 > a5;
  else
    result = a5 + a7 > a1;
  if (a2 >= a6)
  {
    if (a6 + a8 > a2)
      return result;
    return 0;
  }
  if (a2 + a4 <= a6)
    return 0;
  return result;
}

BOOL sub_100060F8C(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;

  v6 = a3 + a5;
  return a1 >= a3 && a1 <= v6 && a2 >= a4 && a2 <= a4 + a6;
}

double sub_100060FB8(double a1, double a2, double a3, double a4, double a5)
{
  return a1 + (a3 - a1) * a5;
}

double sub_100060FCC(double a1, double a2, double a3)
{
  return a1 * a3;
}

double sub_100060FD8(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v9;
  CGRect v11;

  v9 = a1;
  if (!CGRectIsInfinite(*(CGRect *)&a1))
  {
    v11.origin.x = v9;
    v11.origin.y = a2;
    v11.size.width = a3;
    v11.size.height = a4;
    if (!CGRectIsNull(v11))
      return v9 * a5;
  }
  return v9;
}

double sub_100061064(double a1)
{
  return floor(a1);
}

double sub_100061070(double a1, double a2)
{
  return sqrt(a2 * a2 + a1 * a1);
}

double sub_100061080(double a1, double a2)
{
  return a2 * a2 + a1 * a1;
}

double sub_10006108C(double a1, double a2, double a3, double a4)
{
  return sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
}

double sub_1000610A4(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v6;

  sub_1000610BC(a1, a2, a3, a4, a5, a6);
  return sqrt(v6);
}

void sub_1000610BC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double MaxX;
  double MinY;
  double MaxY;
  double v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  v16.origin.x = a3;
  v16.origin.y = a4;
  v16.size.width = a5;
  v16.size.height = a6;
  if (a1 < CGRectGetMinX(v16))
  {
    v17.origin.x = a3;
    v17.origin.y = a4;
    v17.size.width = a5;
    v17.size.height = a6;
    if (a2 < CGRectGetMinY(v17))
    {
      v18.origin.x = a3;
      v18.origin.y = a4;
      v18.size.width = a5;
      v18.size.height = a6;
      CGRectGetMinX(v18);
LABEL_7:
      v22.origin.x = a3;
      v22.origin.y = a4;
      v22.size.width = a5;
      v22.size.height = a6;
      CGRectGetMinY(v22);
      return;
    }
    v23.origin.x = a3;
    v23.origin.y = a4;
    v23.size.width = a5;
    v23.size.height = a6;
    MaxY = CGRectGetMaxY(v23);
    v24.origin.x = a3;
    v24.origin.y = a4;
    v24.size.width = a5;
    v24.size.height = a6;
    CGRectGetMinX(v24);
    if (a2 <= MaxY)
      return;
LABEL_13:
    v28.origin.x = a3;
    v28.origin.y = a4;
    v28.size.width = a5;
    v28.size.height = a6;
    CGRectGetMaxY(v28);
    return;
  }
  v19.origin.x = a3;
  v19.origin.y = a4;
  v19.size.width = a5;
  v19.size.height = a6;
  MaxX = CGRectGetMaxX(v19);
  v20.origin.x = a3;
  v20.origin.y = a4;
  v20.size.width = a5;
  v20.size.height = a6;
  MinY = CGRectGetMinY(v20);
  if (a1 <= MaxX)
  {
    if (a2 >= MinY)
    {
      v29.origin.x = a3;
      v29.origin.y = a4;
      v29.size.width = a5;
      v29.size.height = a6;
      if (a2 > CGRectGetMaxY(v29))
      {
        v30.origin.x = a3;
        v30.origin.y = a4;
        v30.size.width = a5;
        v30.size.height = a6;
        CGRectGetMaxY(v30);
      }
    }
    else
    {
      v25.origin.x = a3;
      v25.origin.y = a4;
      v25.size.width = a5;
      v25.size.height = a6;
      CGRectGetMinY(v25);
    }
    return;
  }
  if (a2 < MinY)
  {
    v21.origin.x = a3;
    v21.origin.y = a4;
    v21.size.width = a5;
    v21.size.height = a6;
    CGRectGetMaxX(v21);
    goto LABEL_7;
  }
  v26.origin.x = a3;
  v26.origin.y = a4;
  v26.size.width = a5;
  v26.size.height = a6;
  v15 = CGRectGetMaxY(v26);
  v27.origin.x = a3;
  v27.origin.y = a4;
  v27.size.width = a5;
  v27.size.height = a6;
  CGRectGetMaxX(v27);
  if (a2 > v15)
    goto LABEL_13;
}

double sub_1000612CC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  double MidX;
  double MidY;
  double v16;
  double v17;
  double v18;
  double v19;
  CGRect v23;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  MidY = CGRectGetMidY(v23);
  v16 = sub_1003C65EC(MidX, a5, a5 + a7);
  v17 = sub_1003C65EC(MidY, a6, a6 + a8);
  v18 = sub_1003C65EC(v16, a1, a1 + a3);
  v19 = sub_1003C65EC(v17, a2, a2 + a4);
  return sqrt((v17 - v19) * (v17 - v19) + (v16 - v18) * (v16 - v18));
}

double sub_1000613A8(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v9;

  v9 = sub_1003C65EC(a1, a3, a3 + a5);
  sub_1003C65EC(a2, a4, a4 + a6);
  return v9;
}

double sub_100061400(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  CGRect v10;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

BOOL sub_10006145C(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9;
  CGRect v10;

  v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  v10.origin.x = CGRectNull.origin.x;
  v10.origin.y = CGRectNull.origin.y;
  v10.size.width = CGRectNull.size.width;
  v10.size.height = CGRectNull.size.height;
  return CGRectEqualToRect(v9, v10);
}

double sub_1000614B8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MaxX;
  CGRect v10;

  MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMaxY(v10);
  return MaxX;
}

double sub_100061514(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MinX;
  CGRect v10;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMinY(v10);
  return MinX;
}

double sub_100061570(double result, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v12;
  double v13;

  v12 = a3 + a5;
  v13 = a4 + a6;
  if (result < a3 || result > v12 || a2 < a4 || a2 > v13)
    return sub_1000603E8(result, a2, a7, a8, a3, a4, a5, a6);
  return result;
}

double sub_1000615C0(double a1, double a2, double a3, double a4)
{
  return a1 * a3 - a2 * a4;
}

double sub_1000615D8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double MinX;
  double v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v13.origin.x = a1;
    v13.origin.y = a2;
    v13.size.width = a3;
    v13.size.height = a4;
    MinX = CGRectGetMinX(v13);
    if (MinX >= a5)
      v11 = a5;
    else
      v11 = MinX;
    v14.origin.x = a1;
    v14.origin.y = a2;
    v14.size.width = a3;
    v14.size.height = a4;
    CGRectGetMaxX(v14);
    v15.origin.x = a1;
    v15.origin.y = a2;
    v15.size.width = a3;
    v15.size.height = a4;
    CGRectGetMinY(v15);
    v16.origin.x = a1;
    v16.origin.y = a2;
    v16.size.width = a3;
    v16.size.height = a4;
    CGRectGetMaxY(v16);
    return v11;
  }
  return a5;
}

double sub_1000616BC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MidY;
  double v17;
  CGFloat v18;
  double result;
  double MidX;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v21.origin.x = a5;
  v21.origin.y = a6;
  v21.size.width = a7;
  v21.size.height = a8;
  MidX = CGRectGetMidX(v21);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  MidY = CGRectGetMidY(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  v17 = CGRectGetMidX(v23);
  v24.origin.x = a1;
  v24.origin.y = a2;
  v24.size.width = a3;
  v24.size.height = a4;
  v18 = MidY - CGRectGetMidY(v24);
  v25.origin.x = a1;
  v25.origin.y = a2;
  v25.size.width = a3;
  v25.size.height = a4;
  *(_QWORD *)&result = (unint64_t)CGRectOffset(v25, MidX - v17, v18);
  return result;
}

BOOL sub_10006178C(double a1, double a2, double a3, double a4)
{
  _BOOL8 result;
  double v5;

  result = 0;
  if (fabs(a1) != INFINITY && fabs(a2) != INFINITY && fabs(a3) != INFINITY)
  {
    v5 = fabs(a4);
    return v5 > INFINITY || v5 < INFINITY;
  }
  return result;
}

uint64_t sub_1000617E8(double a1, double a2, double a3, double a4)
{
  double v4;
  _BOOL4 v5;
  double v6;
  _BOOL4 v7;
  int v8;
  double v9;
  _BOOL4 v10;
  double v11;
  _BOOL4 v12;

  v4 = fabs(a1);
  v5 = v4 < INFINITY;
  if (v4 > INFINITY)
    v5 = 1;
  v6 = fabs(a2);
  v7 = v6 < INFINITY;
  if (v6 > INFINITY)
    v7 = 1;
  v8 = v5 && v7;
  v9 = fabs(a3);
  v10 = v9 < INFINITY;
  if (v9 > INFINITY)
    v10 = 1;
  v11 = fabs(a4);
  v12 = v11 < INFINITY;
  if (v11 > INFINITY)
    v12 = 1;
  return v8 & v10 & v12;
}

uint64_t sub_100061860(double a1, double a2)
{
  double v2;
  _BOOL4 v3;
  double v4;
  _BOOL4 v5;

  v2 = fabs(a1);
  v3 = v2 < INFINITY;
  if (v2 > INFINITY)
    v3 = 1;
  v4 = fabs(a2);
  v5 = v4 < INFINITY;
  if (v4 > INFINITY)
    v5 = 1;
  return v3 & v5;
}

BOOL sub_100061890(double a1, double a2)
{
  _BOOL4 v2;

  v2 = fabs(a1) == INFINITY;
  return fabs(a2) == INFINITY && v2;
}

double sub_1000618B4(long double a1, long double a2)
{
  return atan2(a2, a1);
}

void sub_1000618C4(double a1)
{
  if (a1 < 0.0 || a1 >= 360.0)
    fmod(a1 + 360.0, 360.0);
}

double sub_10006191C(double a1, double a2, double a3)
{
  return a2 * a3 + a1 * (1.0 - a3);
}

void sub_100061930(double a1, double a2, double a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v5 = a1;
  if (a1 < 0.0 || a1 >= 360.0)
  {
    v6 = fmod(a1 + 360.0, 360.0);
    if (v6 < 0.0)
      v6 = v6 + 360.0;
    if (v6 == 0.0)
      v5 = 0.0;
    else
      v5 = v6;
  }
  if (a2 < 0.0 || a2 >= 360.0)
  {
    v7 = fmod(a2 + 360.0, 360.0);
    if (v7 < 0.0)
      v7 = v7 + 360.0;
    if (v7 == 0.0)
      a2 = 0.0;
    else
      a2 = v7;
  }
  if (vabdd_f64(a2, v5) > 180.0)
  {
    if (v5 <= a2)
      v8 = -360.0;
    else
      v8 = 360.0;
    a2 = a2 + v8;
  }
  v9 = a2 * a3 + v5 * (1.0 - a3);
  if (v9 < 0.0 || v9 >= 360.0)
    fmod(v9 + 360.0, 360.0);
}

double sub_100061A5C(double a1, double a2, double a3)
{
  double v3;

  sub_100061930(a1 * 57.2957795, a2 * 57.2957795, a3);
  return v3 * 0.0174532925;
}

double sub_100061A8C(double a1, double a2, double a3, double a4, double a5)
{
  return a3 * a5 + a1 * (1.0 - a5);
}

double sub_100061AA8(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  return a5 * a9 + a1 * (1.0 - a9);
}

double sub_100061AD8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MaxX;
  double MinX;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double MaxY;
  double MinY;
  double v25;
  double v26;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v36.origin.x = a5;
  v36.origin.y = a6;
  v36.size.width = a7;
  v36.size.height = a8;
  MaxX = CGRectGetMaxX(v36);
  v34 = a1;
  v37.origin.x = a1;
  v37.origin.y = a2;
  v37.size.width = a3;
  v37.size.height = a4;
  if (MaxX > CGRectGetMaxX(v37))
  {
    v38.origin.x = a5;
    v38.origin.y = a6;
    v38.size.width = a7;
    v38.size.height = a8;
    MinX = CGRectGetMinX(v38);
    v39.origin.x = a1;
    v39.origin.y = a2;
    v39.size.width = a3;
    v39.size.height = a4;
    if (MinX > CGRectGetMinX(v39))
    {
      v40.origin.x = a5;
      v40.origin.y = a6;
      v40.size.width = a7;
      v40.size.height = a8;
      v29 = CGRectGetMaxX(v40);
      v41.origin.x = a1;
      v41.origin.y = a2;
      v41.size.width = a3;
      v41.size.height = a4;
      v30 = v29 - CGRectGetMaxX(v41);
      v42.origin.x = a5;
      v42.origin.y = a6;
      v42.size.width = a7;
      v42.size.height = a8;
      v28 = CGRectGetMinX(v42);
      v43.origin.x = a1;
      v43.origin.y = a2;
      v43.size.width = a3;
      v43.size.height = a4;
      v17 = v28 - CGRectGetMinX(v43);
      if (v30 < v17)
        v17 = v30;
      v18 = a1 + v17;
LABEL_11:
      v34 = v18;
      goto LABEL_12;
    }
  }
  v44.origin.x = a5;
  v44.origin.y = a6;
  v44.size.width = a7;
  v44.size.height = a8;
  v19 = CGRectGetMinX(v44);
  v45.origin.x = a1;
  v45.origin.y = a2;
  v45.size.width = a3;
  v45.size.height = a4;
  if (v19 < CGRectGetMinX(v45))
  {
    v46.origin.x = a5;
    v46.origin.y = a6;
    v46.size.width = a7;
    v46.size.height = a8;
    v20 = CGRectGetMaxX(v46);
    v47.origin.x = a1;
    v47.origin.y = a2;
    v47.size.width = a3;
    v47.size.height = a4;
    if (v20 < CGRectGetMaxX(v47))
    {
      v48.origin.x = a1;
      v48.origin.y = a2;
      v48.size.width = a3;
      v48.size.height = a4;
      v31 = CGRectGetMinX(v48);
      v49.origin.x = a5;
      v49.origin.y = a6;
      v49.size.width = a7;
      v49.size.height = a8;
      v32 = v31 - CGRectGetMinX(v49);
      v50.origin.x = a1;
      v50.origin.y = a2;
      v50.size.width = a3;
      v50.size.height = a4;
      v21 = CGRectGetMaxX(v50);
      v51.origin.x = a5;
      v51.origin.y = a6;
      v51.size.width = a7;
      v51.size.height = a8;
      v22 = v21 - CGRectGetMaxX(v51);
      if (v32 < v22)
        v22 = v32;
      v18 = a1 - v22;
      goto LABEL_11;
    }
  }
LABEL_12:
  v52.origin.x = a5;
  v52.origin.y = a6;
  v52.size.width = a7;
  v52.size.height = a8;
  MaxY = CGRectGetMaxY(v52);
  v53.origin.x = a1;
  v53.origin.y = a2;
  v53.size.width = a3;
  v53.size.height = a4;
  if (MaxY <= CGRectGetMaxY(v53))
    goto LABEL_15;
  v54.origin.x = a5;
  v54.origin.y = a6;
  v54.size.width = a7;
  v54.size.height = a8;
  MinY = CGRectGetMinY(v54);
  v55.origin.x = a1;
  v55.origin.y = a2;
  v55.size.width = a3;
  v55.size.height = a4;
  if (MinY <= CGRectGetMinY(v55))
  {
LABEL_15:
    v60.origin.x = a5;
    v60.origin.y = a6;
    v60.size.width = a7;
    v60.size.height = a8;
    v25 = CGRectGetMinY(v60);
    v61.origin.x = a1;
    v61.origin.y = a2;
    v61.size.width = a3;
    v61.size.height = a4;
    if (v25 < CGRectGetMinY(v61))
    {
      v62.origin.x = a5;
      v62.origin.y = a6;
      v62.size.width = a7;
      v62.size.height = a8;
      v26 = CGRectGetMaxY(v62);
      v63.origin.x = a1;
      v63.origin.y = a2;
      v63.size.width = a3;
      v63.size.height = a4;
      if (v26 < CGRectGetMaxY(v63))
      {
        v64.origin.x = a1;
        v64.origin.y = a2;
        v64.size.width = a3;
        v64.size.height = a4;
        CGRectGetMinY(v64);
        v65.origin.x = a5;
        v65.origin.y = a6;
        v65.size.width = a7;
        v65.size.height = a8;
        CGRectGetMinY(v65);
        v66.origin.x = a1;
        v66.origin.y = a2;
        v66.size.width = a3;
        v66.size.height = a4;
        CGRectGetMaxY(v66);
        v67.origin.x = a5;
        v67.origin.y = a6;
        v67.size.width = a7;
        v67.size.height = a8;
        CGRectGetMaxY(v67);
      }
    }
  }
  else
  {
    v56.origin.x = a5;
    v56.origin.y = a6;
    v56.size.width = a7;
    v56.size.height = a8;
    CGRectGetMaxY(v56);
    v57.origin.x = a1;
    v57.origin.y = a2;
    v57.size.width = a3;
    v57.size.height = a4;
    CGRectGetMaxY(v57);
    v58.origin.x = a5;
    v58.origin.y = a6;
    v58.size.width = a7;
    v58.size.height = a8;
    CGRectGetMinY(v58);
    v59.origin.x = a1;
    v59.origin.y = a2;
    v59.size.width = a3;
    v59.size.height = a4;
    CGRectGetMinY(v59);
  }
  return v34;
}

double sub_100061EF8(double *a1, double a2, double a3)
{
  __double2 v5;
  double result;

  v5 = __sincos_stret(a3);
  result = v5.__sinval * a2;
  *a1 = v5.__cosval * a2;
  a1[1] = v5.__sinval * a2;
  return result;
}

double sub_100061F34(long double a1, long double a2)
{
  double result;

  if (a2 != 0.0)
    return atan2(a2, a1);
  result = 3.14159265;
  if (a1 >= 0.0)
    return 0.0;
  return result;
}

double sub_100061F64(double a1)
{
  if (a1 == 0.0)
    return 1.0;
  return __sincos_stret(a1).__cosval;
}

double sub_100061F98(long double a1, long double a2)
{
  long double v4;

  v4 = atan2(a2, a1);
  return sqrt(a2 * a2 + a1 * a1)
       * __sincos_stret((double)(int)((v4 + 6.28318531) / 0.785398163 + 0.5) * 0.785398163).__cosval;
}

double sub_10006200C(int a1, double a2, double a3)
{
  if (a1)
    return -a3;
  else
    return a3;
}

double sub_100062028(int a1, double a2, double a3, double a4)
{
  double v4;
  double result;
  CGAffineTransform v8;

  v4 = -a4;
  memset(&v8.c, 0, 32);
  if (a1)
    v4 = a4;
  *(_OWORD *)&v8.a = 0uLL;
  CGAffineTransformMakeRotation(&v8, v4);
  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(*(float64x2_t *)&v8.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v8.c, a3), *(float64x2_t *)&v8.a, a2));
  return result;
}

void sub_100062084(double a1)
{
  if (a1 < 0.0 || a1 >= 6.28318531)
    fmod(a1 + 6.28318531, 6.28318531);
}

double sub_1000620DC(double a1)
{
  double v1;

  v1 = a1 + 3.14159265;
  if (v1 < 0.0 || v1 >= 6.28318531)
  {
    v1 = fmod(v1 + 6.28318531, 6.28318531);
    if (v1 < 0.0)
      v1 = v1 + 6.28318531;
    if (v1 == 0.0)
      v1 = 0.0;
  }
  return v1 + -3.14159265;
}

double sub_10006214C(float64x2_t *a1, double a2, double a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vsubq_f64(vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], a3), *a1, a2)), vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], CGPointZero.y), *a1, CGPointZero.x)));
  return result;
}

void sub_100062188(double a1, double a2)
{
  if (a1 < 0.0 || a1 >= 6.28318531)
    fmod(a1 + 6.28318531, 6.28318531);
  if (a2 < 0.0 || a2 >= 6.28318531)
    fmod(a2 + 6.28318531, 6.28318531);
}

void sub_10006226C(double a1, double a2, double a3)
{
  double v4;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  __double2 v11;
  double i;
  void *v13;
  void *v14;
  void *v15;

  v4 = 0.0;
  if (a2 != 0.0 && a3 != 0.0)
  {
    v7 = 0.0;
    if (a1 >= 360.0)
    {
      v4 = 1.0;
      do
      {
        v7 = v7 + 1.0;
        a1 = a1 + -360.0;
      }
      while (a1 >= 360.0);
    }
    if (a1 < 0.0)
    {
      v4 = -1.0;
      do
      {
        v7 = v7 + -1.0;
        a1 = a1 + 360.0;
      }
      while (a1 < 0.0);
    }
    if (a1 < 0.0 || a1 >= 360.0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount", v4);
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012307B0);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DEE418();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012307D0);
      v8 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLEllipseParametricAngleWithPolarAngle(CGFloat, CGFloat, CGFloat)"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 1120, 0, "Angle out of range");

    }
    if (a1 / 90.0 - floor(a1 / 90.0) >= 0.01 && ceil(a1 / 90.0) - a1 / 90.0 >= 0.01)
    {
      v11 = __sincos_stret(a1 * 3.14159265 / 180.0);
      for (i = atan2(v11.__sinval / a3, v11.__cosval / a2) * 180.0 / 3.14159265; i < 0.0; i = i + 360.0)
        ;
      for (; i >= 360.0; i = i + -360.0)
        ;
      if (i < 0.0 || i >= 360.0)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_1012307F0);
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          sub_100DEE398();
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_101230810);
        v13 = off_1013D9070;
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          sub_100DE7468(v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLEllipseParametricAngleWithPolarAngle(CGFloat, CGFloat, CGFloat)"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"));
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 1138, 0, "Angle out of range");

      }
    }
  }
}

void sub_1000625F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100062628(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100062658(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100062688(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_1000626B8(double a1, double a2, double a3, double a4, double a5)
{
  return (a1 - a3) / a5;
}

double sub_1000626CC(double a1, double a2, double a3, double a4, double a5)
{
  return a3 + a1 * a5;
}

void sub_1000626D8(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v12;
  CGRect v13;

  v12.origin.x = a5;
  v12.origin.y = a6;
  v12.size.width = a7;
  v12.size.height = a8;
  CGRectGetMaxX(v12);
  v13.origin.x = a5;
  v13.origin.y = a6;
  v13.size.width = a7;
  v13.size.height = a8;
  CGRectGetMaxY(v13);
}

void sub_100062790(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect v8;

  CGRectGetMaxX(*(CGRect *)&a1);
  v8.origin.x = a1;
  v8.origin.y = a2;
  v8.size.width = a3;
  v8.size.height = a4;
  CGRectGetMaxY(v8);
}

double sub_100062850(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  double v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRectEdge v21;
  double MaxX;
  double v23;
  double v24;
  double v25;
  double MinX;
  double v27;
  CGFloat v28;
  double v29;
  double v30;
  double MinY;
  double v33;
  double MaxY;
  double v35;
  CGFloat v36;
  double v37;
  double v38;
  CGFloat v39;
  CGRect slice;
  CGRect remainder;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v11 = a1;
  v42 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  x = v42.origin.x;
  y = v42.origin.y;
  width = v42.size.width;
  height = v42.size.height;
  if (!CGRectIsNull(v42))
  {
    v43.origin.x = x;
    v43.origin.y = y;
    v43.size.width = width;
    v43.size.height = height;
    MaxY = CGRectGetMaxY(v43);
    v44.origin.x = v11;
    v44.origin.y = a2;
    v44.size.width = a3;
    v44.size.height = a4;
    MinY = CGRectGetMinY(v44);
    v45.origin.x = v11;
    v45.origin.y = a2;
    v45.size.width = a3;
    v45.size.height = a4;
    v37 = CGRectGetMaxY(v45);
    v46.origin.x = x;
    v46.origin.y = y;
    v46.size.width = width;
    v46.size.height = height;
    v38 = v37 - CGRectGetMaxY(v46);
    v47.origin.x = v11;
    v47.origin.y = a2;
    v47.size.width = a3;
    v47.size.height = a4;
    v33 = v38 * CGRectGetWidth(v47);
    v36 = height;
    v39 = x;
    v48.origin.x = x;
    v48.origin.y = y;
    v48.size.width = width;
    v48.size.height = height;
    v16 = CGRectGetMinY(v48);
    v49.origin.x = v11;
    v49.origin.y = a2;
    v49.size.width = a3;
    v49.size.height = a4;
    v17 = v16 - CGRectGetMinY(v49);
    v50.origin.x = v11;
    v50.origin.y = a2;
    v50.size.width = a3;
    v50.size.height = a4;
    v18 = v17 * CGRectGetWidth(v50);
    v19 = v33;
    if (v18 <= v33)
    {
      v35 = MaxY - MinY;
      v21 = CGRectMinYEdge;
    }
    else
    {
      v51.origin.x = v11;
      v51.origin.y = a2;
      v51.size.width = a3;
      v51.size.height = a4;
      v20 = CGRectGetMaxY(v51);
      v52.size.height = v36;
      v52.origin.x = v39;
      v52.origin.y = y;
      v52.size.width = width;
      v35 = v20 - CGRectGetMinY(v52);
      v21 = CGRectMaxYEdge;
      v19 = v18;
    }
    v53.origin.x = v11;
    v53.origin.y = a2;
    v53.size.width = a3;
    v53.size.height = a4;
    MaxX = CGRectGetMaxX(v53);
    v54.size.height = v36;
    v54.origin.x = v39;
    v54.origin.y = y;
    v54.size.width = width;
    v23 = MaxX - CGRectGetMaxX(v54);
    v55.origin.x = v11;
    v55.origin.y = a2;
    v55.size.width = a3;
    v55.size.height = a4;
    v24 = v23 * CGRectGetHeight(v55);
    if (v24 > v19)
    {
      v56.size.height = v36;
      v56.origin.x = v39;
      v56.origin.y = y;
      v56.size.width = width;
      v25 = CGRectGetMaxX(v56);
      v57.origin.x = v11;
      v57.origin.y = a2;
      v57.size.width = a3;
      v57.size.height = a4;
      v21 = CGRectMinXEdge;
      v35 = v25 - CGRectGetMinX(v57);
      v19 = v24;
    }
    v58.size.height = v36;
    v58.origin.x = v39;
    v58.origin.y = y;
    v58.size.width = width;
    MinX = CGRectGetMinX(v58);
    v59.origin.x = v11;
    v59.origin.y = a2;
    v59.size.width = a3;
    v59.size.height = a4;
    v27 = MinX - CGRectGetMinX(v59);
    v60.origin.x = v11;
    v60.origin.y = a2;
    v60.size.width = a3;
    v60.size.height = a4;
    v28 = CGRectGetHeight(v60);
    v29 = v35;
    if (v27 * v28 > v19)
    {
      v61.origin.x = v11;
      v61.origin.y = a2;
      v61.size.width = a3;
      v61.size.height = a4;
      v30 = CGRectGetMaxX(v61);
      v62.size.height = v36;
      v62.origin.x = v39;
      v62.origin.y = y;
      v62.size.width = width;
      v29 = v30 - CGRectGetMinX(v62);
      v21 = CGRectMaxXEdge;
    }
    memset(&remainder, 0, sizeof(remainder));
    memset(&slice, 0, sizeof(slice));
    v63.origin.x = v11;
    v63.origin.y = a2;
    v63.size.width = a3;
    v63.size.height = a4;
    CGRectDivide(v63, &slice, &remainder, v29, v21);
    return remainder.origin.x;
  }
  return v11;
}

double sub_100062B34(int a1, double result, double a3, double a4, double a5)
{
  BOOL v5;
  double v6;

  v5 = result == a4 && a3 == a5;
  if (!v5 && a4 != 0.0 && a5 != 0.0 && a4 != 3.40282347e38 && a5 != 3.40282347e38)
  {
    if (a1)
    {
      v6 = sqrt(a5 * a5 + a4 * a4);
      return a4 / v6 * (a3 * (a5 / v6) + result * (a4 / v6));
    }
    else if (vabdd_f64(result, a4) < 0.01)
    {
      return a3 * a4 / a5;
    }
  }
  return result;
}

double sub_100062BCC(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;
  BOOL v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = a2 != a4 || a1 != a3;
  v5 = a3 <= 0.0 || !v4;
  if (v5 || a4 <= 0.0)
    goto LABEL_13;
  v6 = a3 / a4;
  if (v6 <= a1 / a2)
  {
    if (v6 < a1 / a2)
    {
      v7 = a1;
      v8 = a1 / v6;
      goto LABEL_14;
    }
LABEL_13:
    v8 = a2;
    v7 = a1;
    goto LABEL_14;
  }
  v7 = a2 * v6;
  v8 = a2;
LABEL_14:
  if (v7 < a1 || v8 < a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101230830);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE498();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101230850);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGSize CRLSizeExpandedToMatchAspectRatio(CGSize, CGSize)"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 1262, 0, "CRLSizeExpandedToMatchAspectRatio() actually shrank the size");

  }
  return v7;
}

void sub_100062D7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100062DAC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_100062DDC(double a1, double a2, double a3, double a4)
{
  if (a1 / a2 < a3 / a4)
    return a1 * (a4 / a2);
  return a3;
}

double sub_100062E10(double result, double a2, double a3, double a4)
{
  BOOL v4;
  BOOL v5;

  if (result <= a3)
  {
    v4 = a2 == a4;
    v5 = a2 < a4;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  if (!v5 && !v4)
  {
    if (result / a2 <= a3 / a4)
    {
      if (result / a2 < a3 / a4)
        return result * (a4 / a2);
      else
        return a3;
    }
    else
    {
      return a3;
    }
  }
  return result;
}

double sub_100062E58(double result, double a2, double a3)
{
  if (result * a2 > a3)
    return sqrt(result / a2 * a3);
  return result;
}

double sub_100062E78(int a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;

  v5 = a4 / a2;
  if (a2 == 0.0)
    v5 = 0.0;
  v6 = a5 / a3;
  if (a3 == 0.0)
    v6 = 0.0;
  if (v5 >= v6)
    v7 = v5;
  else
    v7 = v6;
  if (v5 >= v6)
    v5 = v6;
  if (a1)
    v5 = v7;
  return a2 * v5;
}

double sub_100062EB4(int a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  double v11;
  double v12;
  double v13;
  double v14;

  v11 = a6 / a2;
  v12 = 0.0;
  if (a2 == 0.0)
    v11 = 0.0;
  if (a3 != 0.0)
    v12 = a7 / a3;
  if (v11 >= v12)
    v13 = v11;
  else
    v13 = v12;
  if (v11 >= v12)
    v11 = v12;
  if (a1)
    v14 = v13;
  else
    v14 = v11;
  return sub_1000616BC(0.0, 0.0, a2 * v14, a3 * v14, a4, a5, a6, a7);
}

double sub_100062F08(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;

  v4 = a3 / a1;
  if (a1 == 0.0)
    v4 = 0.0;
  v5 = a4 / a2;
  if (a2 == 0.0)
    v5 = 0.0;
  if (v4 >= v5)
    v6 = v5;
  else
    v6 = v4;
  if (v4 >= v5)
    v7 = v4;
  else
    v7 = v5;
  if (v4 == 0.0 || v5 == 0.0)
    v9 = v7;
  else
    v9 = v6;
  return a1 * v9;
}

void sub_100062F48(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, CGFloat a7)
{
  CGAffineTransform v12;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGAffineTransform v17;
  CGAffineTransform v18;
  CGRect v19;

  memset(&v18, 0, sizeof(v18));
  CGAffineTransformMakeTranslation(&v18, -a5, -a6);
  memset(&v17, 0, sizeof(v17));
  CGAffineTransformMakeScale(&v17, a7, a7);
  memset(&v16, 0, sizeof(v16));
  t1 = v18;
  t2 = v17;
  CGAffineTransformConcat(&v15, &t1, &t2);
  t1 = v18;
  CGAffineTransformInvert(&v12, &t1);
  CGAffineTransformConcat(&v16, &v15, &v12);
  t1 = v16;
  v19.origin.x = a1;
  v19.origin.y = a2;
  v19.size.width = a3;
  v19.size.height = a4;
  CGRectApplyAffineTransform(v19, &t1);
}

double sub_10006305C(double a1)
{
  double v1;
  double v2;
  double result;

  v1 = floor(a1);
  v2 = a1 - v1;
  result = ceil(a1);
  if (v2 < 0.49)
    return v1;
  return result;
}

double sub_100063090(double a1)
{
  return ceil(a1);
}

double sub_10006309C(double a1, double a2)
{
  return sub_1003C65A0(a1 * a2) / a2;
}

double sub_1000630C4(double a1, double a2)
{
  double v3;

  v3 = sub_1003C65A0(a1);
  sub_1003C65A0(a2);
  return v3;
}

double sub_1000630F8(double a1, double a2, double a3)
{
  double v4;
  double v5;

  v4 = a2 * a3;
  v5 = sub_1003C65A0(a1 * a3);
  sub_1003C65A0(v4);
  return 1.0 / a3 * v5;
}

double sub_100063148(double a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return sub_100063150(a1, a2, a3, a4, 1.0);
}

double sub_100063150(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v8;
  void *v9;
  void *v10;
  void *v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double v18;
  double MinY;
  double v20;
  double MaxX;
  CGFloat v22;
  double MaxY;
  double v24;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  v8 = a1;
  if (a5 == 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101230870);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE518();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101230890);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRect CRLRoundedRectForScale(CGRect, CGFloat)"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 1462, 0, "cannot give scale = 0 for CRLRoundedRectForScale!");

  }
  else if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v26.origin.x = sub_100060FD8(v8, a2, a3, a4, a5);
    x = v26.origin.x;
    y = v26.origin.y;
    width = v26.size.width;
    height = v26.size.height;
    MinX = CGRectGetMinX(v26);
    v18 = sub_1003C65A0(MinX);
    v27.origin.x = x;
    v27.origin.y = y;
    v27.size.width = width;
    v27.size.height = height;
    MinY = CGRectGetMinY(v27);
    v20 = sub_1003C65A0(MinY);
    v28.origin.x = x;
    v28.origin.y = y;
    v28.size.width = width;
    v28.size.height = height;
    MaxX = CGRectGetMaxX(v28);
    v22 = sub_1003C65A0(MaxX) - v18;
    v29.origin.x = x;
    v29.origin.y = y;
    v29.size.width = width;
    v29.size.height = height;
    MaxY = CGRectGetMaxY(v29);
    v24 = sub_1003C65A0(MaxY);
    return sub_100060FD8(v18, v20, v22, v24 - v20, 1.0 / a5);
  }
  return v8;
}

void sub_1000633A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000633D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_100063400(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v8;
  void *v9;
  void *v10;
  void *v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double v18;
  double v19;
  double v20;
  double v21;
  double MinY;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double MaxX;
  double v28;
  double v29;
  double v30;
  double MaxY;
  double v32;
  double v33;
  double v34;
  double v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v8 = a1;
  if (a5 == 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012308B0);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DEE598();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012308D0);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRect CRLAliasRoundedRectForScale(CGRect, CGFloat)"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLGeometry.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 1487, 0, "cannot give scale = 0 for CRLRoundedRectForScale!");

  }
  else if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v37.origin.x = sub_100060FD8(v8, a2, a3, a4, a5);
    x = v37.origin.x;
    y = v37.origin.y;
    width = v37.size.width;
    height = v37.size.height;
    MinX = CGRectGetMinX(v37);
    v18 = floor(MinX);
    v19 = MinX - v18;
    v20 = ceil(MinX);
    if (v19 >= 0.49)
      v21 = v20;
    else
      v21 = v18;
    v38.origin.x = x;
    v38.origin.y = y;
    v38.size.width = width;
    v38.size.height = height;
    MinY = CGRectGetMinY(v38);
    v23 = floor(MinY);
    v24 = MinY - v23;
    v25 = ceil(MinY);
    if (v24 >= 0.49)
      v26 = v25;
    else
      v26 = v23;
    v39.origin.x = x;
    v39.origin.y = y;
    v39.size.width = width;
    v39.size.height = height;
    MaxX = CGRectGetMaxX(v39);
    v28 = floor(MaxX);
    v29 = MaxX - v28;
    v30 = ceil(MaxX);
    if (v29 < 0.49)
      v30 = v28;
    v36 = v30 - v21;
    v40.origin.x = x;
    v40.origin.y = y;
    v40.size.width = width;
    v40.size.height = height;
    MaxY = CGRectGetMaxY(v40);
    v32 = floor(MaxY);
    v33 = MaxY - v32;
    v34 = ceil(MaxY);
    if (v33 < 0.49)
      v34 = v32;
    return sub_100060FD8(v21, v26, v36, v34 - v26, 1.0 / a5);
  }
  return v8;
}

void sub_10006369C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000636CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_1000636FC(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  CGRect v7;
  CGRect v8;

  v7.origin.x = sub_100060FD8(a1, a2, a3, a4, a5);
  v8 = CGRectIntegral(v7);
  return sub_100060FD8(v8.origin.x, v8.origin.y, v8.size.width, v8.size.height, 1.0 / a5);
}

double sub_100063728(double a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v7;
  CGRect v9;

  v7 = a1;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v9.origin.x = v7;
    v9.origin.y = a2;
    v9.size.width = a3;
    v9.size.height = a4;
    return floor(COERCE_DOUBLE(CGRectStandardize(v9)));
  }
  return v7;
}

uint64_t sub_1000637B4()
{
  return 0;
}

uint64_t sub_1000637C8()
{
  return 0;
}

uint64_t sub_1000637EC()
{
  return 0;
}

uint64_t sub_100063800()
{
  return 0;
}

double sub_100063854(double a1)
{
  sub_1003A9250();
  return a1;
}

void sub_100064AB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLSharingExtensionCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D91C0;
  off_1013D91C0 = v2;

}

void sub_100064AE4(uint64_t a1, void *a2, uint64_t a3)
{
  CRLSEImportableItem *v5;
  id v6;

  v6 = a2;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "p_logItemProviderError:error:", UTTypeURL, a3);
  }
  else
  {
    v5 = objc_alloc_init(CRLSEImportableItem);
    -[CRLSEImportableItem setUrl:](v5, "setUrl:", v6);
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_100064B68(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  CRLSEImportableItem *v7;
  id v8;
  id v9;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v9 = v5;
  if (a3)
  {
    objc_msgSend(v6, "p_logItemProviderError:error:", UTTypePlainText, a3);
  }
  else if ((objc_msgSend(v6, "p_stringIsConsideredEmpty:", v5) & 1) == 0)
  {
    v7 = objc_alloc_init(CRLSEImportableItem);
    v8 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", v9);
    -[CRLSEImportableItem setAttributedText:](v7, "setAttributedText:", v8);

    -[CRLSEImportableItem setMediaUTI:](v7, "setMediaUTI:", UTTypePlainText);
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_100064C38(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  __CFString *v35;
  uint64_t v36;
  unsigned int v37;
  id v38;
  void *v39;
  CRLSEImportableItem *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];

  v5 = a2;
  v6 = v5;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "p_logItemProviderError:error:", UTTypePlainText, a3);
    goto LABEL_36;
  }
  if (!objc_msgSend(v5, "length"))
  {
    if (qword_10147E4C0 != -1)
      dispatch_once(&qword_10147E4C0, &stru_101230960);
    v13 = off_1013D91C0;
    if (os_log_type_enabled((os_log_t)off_1013D91C0, OS_LOG_TYPE_ERROR))
      sub_100DEE698(v13);
    goto LABEL_36;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedName"));
  if (objc_msgSend(v7, "length"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedName"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByTrimmingCharactersInSet:", v9));
    v11 = objc_msgSend(v10, "length");

    if (v11)
    {
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedName"));
      goto LABEL_13;
    }
  }
  else
  {

  }
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultImageFileName"));
LABEL_13:
  v14 = (void *)v12;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "temporaryDirectory"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "UUIDString"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "URLByAppendingPathComponent:", v18));

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "URLByAppendingPathComponent:", v14));
  v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "pathExtension"));
  if (!v21
    || (v22 = (void *)v21,
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "pathExtension")),
        v24 = objc_msgSend(v23, "length"),
        v23,
        v22,
        !v24))
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "registeredTypeIdentifiers"));
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
    if (v26)
    {
      v27 = v26;
      v42 = v15;
      v43 = v14;
      v44 = v6;
      v45 = a1;
      v28 = *(_QWORD *)v48;
      while (2)
      {
        for (i = 0; i != v27; i = (char *)i + 1)
        {
          if (*(_QWORD *)v48 != v28)
            objc_enumerationMutation(v25);
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i)));
          if (objc_msgSend(v30, "conformsToType:", UTTypeRAWImage))
          {
            v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "preferredFilenameExtension"));
            if (v31)
            {
              v32 = (void *)v31;
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "preferredFilenameExtension"));
              v34 = objc_msgSend(v33, "length");

              if (v34)
              {
                v35 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "preferredFilenameExtension"));

                v6 = v44;
                a1 = v45;
                v15 = v42;
                v14 = v43;
                goto LABEL_28;
              }
            }
          }

        }
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
        if (v27)
          continue;
        break;
      }
      v6 = v44;
      a1 = v45;
      v15 = v42;
      v14 = v43;
    }
    v35 = CFSTR("raw");
LABEL_28:

    v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "URLByAppendingPathExtension:", v35));
    v20 = (void *)v36;
  }
  v46 = 0;
  v37 = objc_msgSend(v15, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v19, 1, 0, &v46);
  v38 = v46;
  if (v37)
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "path"));
    objc_msgSend(v15, "createFileAtPath:contents:attributes:", v39, v6, 0);

    v40 = objc_alloc_init(CRLSEImportableItem);
    -[CRLSEImportableItem setUrl:](v40, "setUrl:", v20);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v40);

  }
  else
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_101230980);
    v41 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DEE73C(v41, v38);
  }

LABEL_36:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void sub_1000650C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLSharingExtensionCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D91C0;
  off_1013D91C0 = v2;

}

void sub_1000650F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100065120(uint64_t a1, void *a2, uint64_t a3)
{
  CRLSEImportableItem *v5;
  id v6;

  v6 = a2;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "p_logItemProviderError:error:", UTTypeData, a3);
  }
  else
  {
    v5 = objc_alloc_init(CRLSEImportableItem);
    -[CRLSEImportableItem setImage:](v5, "setImage:", v6);
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void sub_1000651A4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  CRLSEImportableItem *v25;
  void *v26;
  id v27;

  v5 = a2;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "p_logItemProviderError:error:", UTTypeData, a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "registeredTypeIdentifiers"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "componentsJoinedByString:", CFSTR(",")));

    if (qword_10147E4C0 != -1)
      dispatch_once(&qword_10147E4C0, &stru_1012309F0);
    v8 = off_1013D91C0;
    if (os_log_type_enabled((os_log_t)off_1013D91C0, OS_LOG_TYPE_ERROR))
      sub_100DEE7D8((uint64_t)v7, v8, v9);
    goto LABEL_18;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedName"));
  if (!objc_msgSend(v10, "length"))
  {

    goto LABEL_10;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedName"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringByTrimmingCharactersInSet:", v12));
  v14 = objc_msgSend(v13, "length");

  if (!v14)
  {
LABEL_10:
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "stringByAppendingString:", CFSTR(".pdf")));

    goto LABEL_11;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "suggestedName"));
LABEL_11:
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "temporaryDirectory"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "UUIDString"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "URLByAppendingPathComponent:", v20));

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "URLByAppendingPathComponent:", v7));
  v27 = 0;
  LODWORD(v20) = objc_msgSend(v17, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v21, 1, 0, &v27);
  v23 = v27;
  if ((_DWORD)v20)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "path"));
    objc_msgSend(v17, "createFileAtPath:contents:attributes:", v24, v5, 0);

    v25 = objc_alloc_init(CRLSEImportableItem);
    -[CRLSEImportableItem setUrl:](v25, "setUrl:", v22);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v25);

  }
  else
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_101230A10);
    v26 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DEE73C(v26, v23);
  }

LABEL_18:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void sub_1000654B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLSharingExtensionCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D91C0;
  off_1013D91C0 = v2;

}

void sub_1000654E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100065514(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  CRLSEImportableItem *v7;
  NSObject *v8;
  uint64_t v9;

  v5 = a2;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "p_logItemProviderError:error:", UTTypeData, a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "registeredTypeIdentifiers"));
    v7 = (CRLSEImportableItem *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "componentsJoinedByString:", CFSTR(",")));

    if (qword_10147E4C0 != -1)
      dispatch_once(&qword_10147E4C0, &stru_101230A30);
    v8 = off_1013D91C0;
    if (os_log_type_enabled((os_log_t)off_1013D91C0, OS_LOG_TYPE_ERROR))
      sub_100DEE7D8((uint64_t)v7, v8, v9);
  }
  else
  {
    v7 = objc_alloc_init(CRLSEImportableItem);
    -[CRLSEImportableItem setUrl:](v7, "setUrl:", v5);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v7);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100065614(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLSharingExtensionCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D91C0;
  off_1013D91C0 = v2;

}

uint64_t sub_100065644(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_1000656F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLSharingExtensionCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D91C0;
  off_1013D91C0 = v2;

}

void sub_100065B74(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100065B80(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

id sub_100065BA4()
{
  void *v0;

  return objc_msgSend(v0, "code");
}

id sub_1000664C4(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;

  v1 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "parentInfo"));
  if (v3)
  {
    v4 = v1;
    while (1)
    {
      v5 = objc_opt_class(_TtC8Freeform20CRLRootContainerItem, v2);
      if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
        break;
      v6 = v3;

      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "parentInfo"));
      v4 = v6;
      if (!v3)
        goto LABEL_8;
    }
    v6 = v4;
  }
  else
  {
    v6 = v1;
  }
LABEL_8:
  v7 = (objc_class *)objc_opt_class(NSObject, v2);
  v13 = sub_1002220C8(v6, v7, 1, v8, v9, v10, v11, v12, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  return v14;
}

id sub_1000665A8(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;

  v1 = sub_1000664C4(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v9 = sub_100221DDC(v2, 1, v3, v4, v5, v6, v7, v8, (uint64_t)&OBJC_PROTOCOL___CRLCanvasLockableElementInfo);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = objc_msgSend(v10, "locked");

  return v11;
}

void sub_100066754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006676C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10006677C(uint64_t a1)
{

}

void sub_100066784(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 48), "p_loadBrushIfNeeded:", *(_QWORD *)(a1 + 32));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "p_storagesByBrushName"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "deepCopy"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

id sub_100066968(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "p_loadBrushIfNeeded:", *(_QWORD *)(a1 + 32));
}

void sub_1000669B4(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[9];

  v3[0] = CFSTR("Chalk2");
  v3[1] = CFSTR("Dry Brush");
  v3[2] = CFSTR("Feathered Brush");
  v3[3] = CFSTR("Pen");
  v3[4] = CFSTR("Crayon");
  v3[5] = CFSTR("Pencil");
  v3[6] = CFSTR("Basic");
  v3[7] = CFSTR("Basic Rounded");
  v3[8] = CFSTR("Basic Square");
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 9));
  v2 = (void *)qword_101414C50;
  qword_101414C50 = v1;

}

void sub_100066BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100066BD8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = objc_alloc_init((Class)NSCache);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), CFSTR("CRLBrushStrokeLoaderStorageCache"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "p_allStorageCaches"));
  objc_msgSend(v5, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_100066C98(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v2 = (void *)qword_101414C60;
  qword_101414C60 = v1;

}

void sub_100066D04(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.freeform.CRLBrushStrokeLoadQueue", v4);
  v3 = (void *)qword_101414C70;
  qword_101414C70 = (uint64_t)v2;

}

void sub_100066D94(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_101414C80;
  qword_101414C80 = v1;

}

void sub_1000672E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100067318(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100067348(xmlDoc *a1, void *a2)
{
  id v3;
  xmlXPathContext *v4;
  xmlXPathContext *v5;
  xmlXPathObjectPtr v6;
  xmlXPathObject *v7;
  int *p_nodeNr;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;

  v3 = a2;
  v4 = xmlXPathNewContext(a1);
  if (!v4)
  {
    NSLog(CFSTR("Unable to create XPath context."));
LABEL_13:
    v9 = 0;
    goto LABEL_14;
  }
  v5 = v4;
  xmlXPathRegisterNs(v4, (const xmlChar *)"svg", (const xmlChar *)"http://www.w3.org/2000/svg");
  v6 = xmlXPathEvalExpression((const xmlChar *)objc_msgSend(objc_retainAutorelease(v3), "cStringUsingEncoding:", 4), v5);
  if (!v6)
  {
    NSLog(CFSTR("Unable to evaluate XPath."));
    goto LABEL_13;
  }
  v7 = v6;
  p_nodeNr = &v6->nodesetval->nodeNr;
  if (!p_nodeNr)
  {
    NSLog(CFSTR("Nodes was nil."));
    goto LABEL_13;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (*p_nodeNr >= 1)
  {
    v10 = 0;
    do
    {
      v11 = sub_1000697FC(*(_QWORD **)(*((_QWORD *)p_nodeNr + 1) + 8 * v10), 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      if (v12)
        objc_msgSend(v9, "addObject:", v12);

      ++v10;
    }
    while (v10 < *p_nodeNr);
  }
  xmlXPathFreeObject(v7);
  xmlXPathFreeContext(v5);
LABEL_14:

  return v9;
}

void sub_1000679B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000679E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100067A18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100067A48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006866C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006869C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000686CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000686FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100068F24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100068F54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100068F84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100068FB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006973C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006976C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006979C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000697CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000697FC(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v21;
  void *v22;
  unsigned int v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v5 = a1[2];
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v5, 4));
    objc_msgSend(v4, "setObject:forKey:", v6, CFSTR("nodeName"));

  }
  if ((unint64_t)(a1[10] + 1) >= 2)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("nodeName")));
    v23 = objc_msgSend(v22, "isEqual:", CFSTR("text"));

    if (v3 && v23)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stringByTrimmingCharactersInSet:", v24));

      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("nodeContent")));
      v27 = v26;
      if (v26)
        v28 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "stringByAppendingString:", v25));
      else
        v28 = v25;
      v29 = v28;
      objc_msgSend(v3, "setObject:forKey:", v28, CFSTR("nodeContent"));

      v19 = 0;
      goto LABEL_22;
    }
    objc_msgSend(v4, "setObject:forKey:", v21, CFSTR("nodeContent"));

  }
  v7 = (_QWORD *)a1[11];
  if (v7)
  {
    v30 = v3;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    do
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v7[2], 4));
      v11 = v7[3];
      if (v11)
        v12 = (id)sub_1000697FC(v11, v9);
      if (v10)
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("nodeContent")));

        if (v13)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("nodeContent")));
          objc_msgSend(v8, "setObject:forKey:", v14, v10);

        }
      }
      v7 = (_QWORD *)v7[6];

    }
    while (v7);
    objc_msgSend(v4, "setObject:forKey:", v8, CFSTR("nodeAttributes"));

    v3 = v30;
  }
  v15 = a1[3];
  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    do
    {
      v17 = sub_1000697FC(v15, v4);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      if (v18)
        objc_msgSend(v16, "addObject:", v18);
      v15 = *(_QWORD *)(v15 + 48);

    }
    while (v15);
    if (objc_msgSend(v16, "count"))
      objc_msgSend(v4, "setObject:forKey:", v16, CFSTR("nodeChildArray"));

  }
  v19 = v4;
LABEL_22:

  return v19;
}

void sub_10006A5D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006A604(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006AAA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006AAD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_10006AB48(id a1, CRLFreehandDrawingLayout *a2)
{
  void *v2;
  char v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLFreehandDrawingLayout freehandInfo](a2, "freehandInfo"));
  v3 = objc_msgSend(v2, "prohibitsClustering") ^ 1;

  return v3;
}

void sub_10006B0C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006B0F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006B9AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006B9DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10006C1F8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "p_multiselectInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "representedSelectedBoardItems"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "info"));

  v7 = objc_msgSend(v5, "containsObject:", v6);
  return v7;
}

void sub_10006C274(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006C2A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006C488(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006C4B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006CD14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006CD44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_10006CDF0(id a1, CRLCanvasRep *a2)
{
  CRLCanvasRep *v2;
  uint64_t v3;
  uint64_t v4;
  char isKindOfClass;

  v2 = a2;
  v4 = objc_opt_class(CRLWPRep, v3);
  isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  return isKindOfClass & 1;
}

void sub_10006CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006CF90(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v5 = a2;
  v7 = objc_opt_class(_TtC8Freeform11CRLWPEditor, v6);
  v8 = sub_100221D0C(v7, v5);
  v13 = (id)objc_claimAutoreleasedReturnValue(v8);

  v9 = v13;
  if (v13)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "storage"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "info"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "textStorage"));

    v9 = v13;
    if (v10 == v12)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      *a3 = 1;
    }
  }

}

void sub_10006D690(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006D6C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006F710(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10006F918(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006F948(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006FE48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10006FE78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000703A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000703D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10007060C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "numberFromString:", a2);
}

void sub_100070A40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100070A70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000715B8(id a1)
{
  void *v1;
  id v2;
  void *v3;
  size_t size;

  size = 0;
  sysctlbyname("kern.osversion", 0, &size, 0, 0);
  v1 = malloc_type_malloc(size, 0xACBDD60AuLL);
  sysctlbyname("kern.osversion", v1, &size, 0, 0);
  v2 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v1);
  v3 = (void *)qword_101414C90;
  qword_101414C90 = (uint64_t)v2;

  free(v1);
}

void sub_100071694(id a1)
{
  void *v1;
  id v2;
  void *v3;
  size_t size;

  size = 0;
  sysctlbyname("hw.model", 0, &size, 0, 0);
  v1 = malloc_type_malloc(size, 0x3B240CF6uLL);
  sysctlbyname("hw.model", v1, &size, 0, 0);
  v2 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v1);
  v3 = (void *)qword_101414CA0;
  qword_101414CA0 = (uint64_t)v2;

  free(v1);
}

id sub_100071788()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "systemVersion"));

  return v1;
}

uint64_t sub_1000717C8()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = sub_100071788();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = sub_1000717FC(v1);

  return v2;
}

uint64_t sub_1000717FC(void *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(".")));
  v2 = (uint64_t)objc_msgSend(v1, "count");
  if (v2 < 1)
  {
    v5 = 0;
  }
  else
  {
    v3 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", 0));
    v5 = 1000000 * (_QWORD)objc_msgSend(v4, "integerValue");

    if (v3 != 1)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", 1));
      v5 += 1000 * (_QWORD)objc_msgSend(v6, "integerValue");

      if (v3 >= 3)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndexedSubscript:", 2));
        v5 += (uint64_t)objc_msgSend(v7, "integerValue");

      }
    }
  }

  return v5;
}

void sub_100071B0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100071B3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100071D58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100071D88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007238C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000723BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000723EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007241C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100072A2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100072A5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100072A8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100072ABC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100072DC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100072DF0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100072FE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100073018(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100073048(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  void *v19;
  unsigned int v20;
  _QWORD v21[2];
  NSErrorUserInfoKey v22;
  void *v23;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "needsDownload") & 1) != 0)
  {
    v2 = 0;
    goto LABEL_11;
  }
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  if (!v3
    || (v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAsset null](_TtC8Freeform8CRLAsset, "null")),
        v4,
        v3 == v4))
  {
    v22 = NSLocalizedDescriptionKey;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("Some images can’t be displayed."), 0, 0));
    v23 = v12;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));

    v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.freeform.CRLErrorDomainMediaCompatibility"), 100, v5));
    v2 = 0;
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(v14 + 24);
    *(_QWORD *)(v14 + 24) = v13;
    goto LABEL_9;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "type"));
  v6 = sub_1000304B4();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v21[0] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", CFSTR("com.adobe.encapsulated-postscript")));
  v21[1] = v8;
  v2 = 2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v21, 2));
  v10 = objc_msgSend(v5, "crl_conformsToAnyUTType:", v9);

  if ((v10 & 1) == 0)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "isCancelled") & 1) != 0)
    {
      v2 = 0;
      goto LABEL_10;
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[CRLImageProviderPool sharedPool](CRLImageProviderPool, "sharedPool"));
    v2 = 1;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "temporaryProviderForAsset:shouldValidate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 1));

    if ((objc_msgSend(v15, "isError") & 1) == 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[CRLIngestionTypes imageUTTypesThatRequireConversion](CRLIngestionTypes, "imageUTTypesThatRequireConversion"));
      v20 = objc_msgSend(v5, "crl_conformsToAnyUTType:", v19);

      if (v20)
        v2 = 2;
      else
        v2 = 5;
    }
LABEL_9:

  }
LABEL_10:

LABEL_11:
  v16 = *(_QWORD *)(a1 + 48);
  if (v2 < v16)
    v16 = v2;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = v16;
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100073994(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000739C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100074374(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000743A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100074850(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100074880(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007546C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007549C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_1000755E0(float *a1, double a2)
{
  return *a1 + a2;
}

float sub_1000755F0(uint64_t a1, double a2, double a3)
{
  float result;
  float v4;

  result = a2;
  v4 = a3;
  *(float *)(a1 + 4) = result;
  *(float *)(a1 + 8) = v4;
  return result;
}

double sub_100075600(uint64_t a1)
{
  return *(float *)(a1 + 4);
}

double sub_100075610(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(a1 + 12);
  return (double)*(unint64_t *)&a2 / 10.0;
}

double sub_100075624(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(a1 + 14);
  return (double)*(unint64_t *)&a2 / 1000.0;
}

double sub_10007563C(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(a1 + 16);
  return (double)*(unint64_t *)&a2 / 10.0;
}

void sub_100075650(uint64_t a1, double a2)
{
  double v3;

  sub_100062084(a2);
  *(_WORD *)(a1 + 20) = (int)sub_1003C65EC(v3 * 10430.2192, 0.0, 65535.0);
}

double sub_100075694(uint64_t a1, double a2)
{
  LOWORD(a2) = *(_WORD *)(a1 + 20);
  return (double)*(unint64_t *)&a2 / 10430.2192;
}

void sub_1000758F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100075978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100076054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000766C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000766F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000769A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000769D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100076B4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100076B7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100076D08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100076D38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100076EB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100076EE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007706C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007709C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077214(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077244(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007750C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007753C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007756C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007759C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077744(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077774(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000779D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077A00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077D40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077D70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077F44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100077F74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000780F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100078120(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000787F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100078828(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100078858(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100078888(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000788B8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
}

void sub_100078B4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100078B7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100078FD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100079008(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_100079164(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double sub_1000791B0(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[3];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = a1[2];
  return sub_1000791EC((double *)v3) * 57.2957795;
}

double sub_1000791EC(double *a1)
{
  double v1;
  double v2;

  v2 = *a1;
  v1 = a1[1];
  if (v1 * a1[2] - *a1 * a1[3] > 0.0)
  {
    v2 = -v2;
    v1 = -v1;
  }
  return atan2(v1, v2);
}

BOOL sub_100079210(double *a1)
{
  return a1[2] * a1[1] - *a1 * a1[3] > 0.0;
}

double sub_10007922C(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1);
}

double sub_100079240(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1);
}

CGAffineTransform *sub_100079264@<X0>(uint64_t a1@<X0>, CGAffineTransform *a2@<X8>)
{
  CGFloat v2;
  CGFloat v3;
  __int128 v4;
  CGAffineTransform v6;

  v2 = 1.0 / sqrt(*(double *)(a1 + 8) * *(double *)(a1 + 8) + *(double *)a1 * *(double *)a1);
  v3 = 1.0 / sqrt(*(double *)(a1 + 24) * *(double *)(a1 + 24) + *(double *)(a1 + 16) * *(double *)(a1 + 16));
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v6.a = *(_OWORD *)a1;
  *(_OWORD *)&v6.c = v4;
  *(_OWORD *)&v6.tx = *(_OWORD *)(a1 + 32);
  return CGAffineTransformScale(a2, &v6, v2, v3);
}

BOOL sub_1000792C0(double *a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;

  v3 = 1.0 / (a2 * 0.5);
  v4 = 1.0 / (a3 * 0.5);
  if (v3 >= v4)
    v3 = v4;
  v5 = fabs(a1[3]);
  if (fabs(*a1) < v3 && v5 < v3)
    return 1;
  if (fabs(a1[1]) >= v3)
    return 0;
  return fabs(a1[2]) < v3;
}

BOOL sub_100079330(double *a1, double a2)
{
  if (fabs(*a1) < a2 && fabs(a1[3]) < a2)
    return 1;
  if (fabs(a1[1]) >= a2)
    return 0;
  return fabs(a1[2]) < a2;
}

BOOL sub_100079384(double *a1)
{
  if (fabs(*a1) < 1.0e-12 && fabs(a1[3]) < 1.0e-12)
    return 1;
  if (fabs(a1[1]) >= 1.0e-12)
    return 0;
  return fabs(a1[2]) < 1.0e-12;
}

BOOL sub_1000793E0(double *a1)
{
  return fabs(a1[1]) < 1.0e-12 && fabs(a1[2]) < 1.0e-12 && *a1 >= 0.0 && a1[3] >= 0.0;
}

CGAffineTransform *sub_10007942C@<X0>(CGAffineTransform *result@<X0>, int a2@<W1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double MinX;
  CGFloat MaxX;
  __int128 v21;
  __int128 v22;
  double MinY;
  CGFloat MaxY;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CGAffineTransform v32;
  CGAffineTransform v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v13 = *(_OWORD *)&CGAffineTransformIdentity.a;
  v14 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)a3 = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)(a3 + 16) = v14;
  v15 = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_OWORD *)(a3 + 32) = v15;
  if ((_DWORD)result)
  {
    v30 = v14;
    v31 = v13;
    v16 = a4;
    v17 = a5;
    v29 = v15;
    v18 = a6;
    MinX = CGRectGetMinX(*(CGRect *)(&a7 - 3));
    v34.origin.x = a4;
    v34.origin.y = a5;
    v34.size.width = a6;
    v34.size.height = a7;
    MaxX = CGRectGetMaxX(v34);
    *(_OWORD *)&v33.a = v31;
    *(_OWORD *)&v33.c = v30;
    *(_OWORD *)&v33.tx = v29;
    CGAffineTransformTranslate((CGAffineTransform *)a3, &v33, MinX + MaxX, 0.0);
    v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v32.a = *(_OWORD *)a3;
    *(_OWORD *)&v32.c = v21;
    *(_OWORD *)&v32.tx = *(_OWORD *)(a3 + 32);
    result = CGAffineTransformScale(&v33, &v32, -1.0, 1.0);
    v22 = *(_OWORD *)&v33.c;
    *(_OWORD *)a3 = *(_OWORD *)&v33.a;
    *(_OWORD *)(a3 + 16) = v22;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v33.tx;
  }
  if (a2)
  {
    v35.origin.x = a4;
    v35.origin.y = a5;
    v35.size.width = a6;
    v35.size.height = a7;
    MinY = CGRectGetMinY(v35);
    v36.origin.x = a4;
    v36.origin.y = a5;
    v36.size.width = a6;
    v36.size.height = a7;
    MaxY = CGRectGetMaxY(v36);
    v25 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v32.a = *(_OWORD *)a3;
    *(_OWORD *)&v32.c = v25;
    *(_OWORD *)&v32.tx = *(_OWORD *)(a3 + 32);
    CGAffineTransformTranslate(&v33, &v32, 0.0, MinY + MaxY);
    v26 = *(_OWORD *)&v33.c;
    *(_OWORD *)a3 = *(_OWORD *)&v33.a;
    *(_OWORD *)(a3 + 16) = v26;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v33.tx;
    v27 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v32.a = *(_OWORD *)a3;
    *(_OWORD *)&v32.c = v27;
    *(_OWORD *)&v32.tx = *(_OWORD *)(a3 + 32);
    result = CGAffineTransformScale(&v33, &v32, 1.0, -1.0);
    v28 = *(_OWORD *)&v33.c;
    *(_OWORD *)a3 = *(_OWORD *)&v33.a;
    *(_OWORD *)(a3 + 16) = v28;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v33.tx;
  }
  return result;
}

CGAffineTransform *sub_1000795C0@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, CGAffineTransform *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  CGAffineTransform v10;
  CGAffineTransform t1;
  CGAffineTransform v12;

  v6 = a2[1];
  *(_OWORD *)&v10.a = *a2;
  *(_OWORD *)&v10.c = v6;
  *(_OWORD *)&v10.tx = a2[2];
  CGAffineTransformInvert(&t1, &v10);
  v7 = a1[1];
  *(_OWORD *)&v10.a = *a1;
  *(_OWORD *)&v10.c = v7;
  *(_OWORD *)&v10.tx = a1[2];
  CGAffineTransformConcat(&v12, &t1, &v10);
  v8 = a2[1];
  *(_OWORD *)&v10.a = *a2;
  *(_OWORD *)&v10.c = v8;
  *(_OWORD *)&v10.tx = a2[2];
  return CGAffineTransformConcat(a3, &v12, &v10);
}

CGAffineTransform *sub_100079650@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, CGAffineTransform *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CGAffineTransform v9;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v12;

  v5 = a2[1];
  *(_OWORD *)&t1.a = *a2;
  *(_OWORD *)&t1.c = v5;
  *(_OWORD *)&t1.tx = a2[2];
  v6 = a1[1];
  *(_OWORD *)&t2.a = *a1;
  *(_OWORD *)&t2.c = v6;
  *(_OWORD *)&t2.tx = a1[2];
  CGAffineTransformConcat(&v12, &t1, &t2);
  v7 = a2[1];
  *(_OWORD *)&t1.a = *a2;
  *(_OWORD *)&t1.c = v7;
  *(_OWORD *)&t1.tx = a2[2];
  CGAffineTransformInvert(&v9, &t1);
  return CGAffineTransformConcat(a3, &v12, &v9);
}

CGAffineTransform *sub_1000796D4@<X0>(_OWORD *a1@<X0>, CGAffineTransform *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  __int128 v8;
  CGAffineTransform v10;
  CGAffineTransform t1;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGAffineTransform v14;

  memset(&v14, 0, sizeof(v14));
  CGAffineTransformMakeTranslation(&v14, -a3, -a4);
  memset(&v13, 0, sizeof(v13));
  CGAffineTransformMakeTranslation(&v13, a3, a4);
  t1 = v13;
  v8 = a1[1];
  *(_OWORD *)&v10.a = *a1;
  *(_OWORD *)&v10.c = v8;
  *(_OWORD *)&v10.tx = a1[2];
  CGAffineTransformConcat(&v12, &t1, &v10);
  t1 = v14;
  return CGAffineTransformConcat(a2, &v12, &t1);
}

CGAffineTransform *sub_10007979C@<X0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, CGFloat a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  double v18;
  double v19;
  double v20;
  long double v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  __int128 v26;
  __int128 v27;
  double v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  CGAffineTransform *result;
  __int128 v35;
  double sx;
  CGFloat v38;
  CGAffineTransform v39;
  CGAffineTransform v40;
  CGAffineTransform v41;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v44;

  v18 = sub_10006108C(a3, a4, a5, a6);
  v38 = a7;
  v19 = sub_10006108C(a7, a8, a9, a10);
  if (v18 < 0.0001 || v19 < 0.0001)
    return CGAffineTransformMakeTranslation((CGAffineTransform *)a2, a7 - a3, a8 - a4);
  sx = v19 / v18;
  v20 = sub_1000603B8(a3, a4, a5);
  v22 = sub_1000618B4(v20, v21);
  v23 = sub_1000603B8(a7, a8, a9);
  v25 = sub_1000618B4(v23, v24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  CGAffineTransformMakeTranslation((CGAffineTransform *)a2, -a3, -a4);
  CGAffineTransformMakeRotation(&t2, -v22);
  v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a2;
  *(_OWORD *)&t1.c = v26;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformConcat(&v44, &t1, &t2);
  v27 = *(_OWORD *)&v44.c;
  *(_OWORD *)a2 = *(_OWORD *)&v44.a;
  *(_OWORD *)(a2 + 16) = v27;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v44.tx;
  v28 = 1.0;
  if (!a1)
    v28 = sx;
  CGAffineTransformMakeScale(&v41, sx, v28);
  v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a2;
  *(_OWORD *)&t1.c = v29;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformConcat(&v44, &t1, &v41);
  v30 = *(_OWORD *)&v44.c;
  *(_OWORD *)a2 = *(_OWORD *)&v44.a;
  *(_OWORD *)(a2 + 16) = v30;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v44.tx;
  CGAffineTransformMakeRotation(&v40, v25);
  v31 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a2;
  *(_OWORD *)&t1.c = v31;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformConcat(&v44, &t1, &v40);
  v32 = *(_OWORD *)&v44.c;
  *(_OWORD *)a2 = *(_OWORD *)&v44.a;
  *(_OWORD *)(a2 + 16) = v32;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v44.tx;
  CGAffineTransformMakeTranslation(&v39, v38, a8);
  v33 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a2;
  *(_OWORD *)&t1.c = v33;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 32);
  result = CGAffineTransformConcat(&v44, &t1, &v39);
  v35 = *(_OWORD *)&v44.c;
  *(_OWORD *)a2 = *(_OWORD *)&v44.a;
  *(_OWORD *)(a2 + 16) = v35;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v44.tx;
  return result;
}

BOOL sub_1000799EC(uint64_t a1, double a2, double a3)
{
  __int128 v6;
  CGAffineTransform v8;

  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v8.a = *(_OWORD *)a1;
  *(_OWORD *)&v8.c = v6;
  *(_OWORD *)&v8.tx = *(_OWORD *)(a1 + 32);
  if (CGAffineTransformIsIdentity(&v8))
    return 0;
  if (a3 == a3 * *(double *)(a1 + 24) + *(double *)(a1 + 8) * a2)
    return a2 != a3 * *(double *)(a1 + 16) + *(double *)a1 * a2;
  return 1;
}

BOOL sub_100079A6C(double *a1)
{
  if (a1[1] == 0.0 && a1[2] == 0.0)
    return 1;
  if (*a1 == 0.0)
    return a1[3] == 0.0;
  return 0;
}

double sub_100079AB0(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  double v16;
  __int128 v17;
  __int128 v18;
  double result;
  CGAffineTransform v20;
  CGAffineTransform v21;

  v4 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(double *)(a1 + 24);
  v7 = sqrt(v4 * v4 + *(double *)a1 * *(double *)a1);
  v8 = sqrt(v6 * v6 + v5 * v5);
  v9 = *(double *)a1 * v6 - v5 * v4;
  v10 = -v8;
  v11 = -v7;
  if (*(double *)a1 < v6)
    v10 = v8;
  else
    v11 = v7;
  if (v9 < 0.0)
    v12 = v11;
  else
    v12 = v7;
  if (v9 < 0.0)
    v13 = v10;
  else
    v13 = v8;
  v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a1;
  *(_OWORD *)&v20.c = v14;
  *(_OWORD *)&v20.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v21, &v20, 1.0 / v12, 1.0 / v13);
  v15 = *(_OWORD *)&v21.c;
  *(_OWORD *)a1 = *(_OWORD *)&v21.a;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v21.tx;
  v16 = atan2(*(long double *)(a1 + 8), *(long double *)a1);
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v20.a = *(_OWORD *)a1;
  *(_OWORD *)&v20.c = v17;
  *(_OWORD *)&v20.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformRotate(&v21, &v20, -v16);
  v18 = *(_OWORD *)&v21.c;
  *(_OWORD *)a1 = *(_OWORD *)&v21.a;
  *(_OWORD *)(a1 + 16) = v18;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v21.tx;
  *(double *)a2 = v12;
  *(double *)(a2 + 8) = v13;
  *(double *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 32);
  result = *(double *)(a1 + 40);
  *(double *)(a2 + 64) = result;
  return result;
}

CGFloat sub_100079BDC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  CGFloat v5;
  __int128 v6;
  CGFloat v7;
  CGFloat v8;
  __int128 v9;
  __int128 v10;
  CGFloat result;
  CGAffineTransform v12;
  CGAffineTransform v13;

  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 56);
  v5 = *(double *)(a1 + 16);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v13.a = *(_OWORD *)a2;
  *(_OWORD *)&v13.c = v6;
  *(_OWORD *)&v13.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformRotate((CGAffineTransform *)a2, &v13, v5);
  v7 = *(double *)a1;
  v8 = *(double *)(a1 + 8);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v12.a = *(_OWORD *)a2;
  *(_OWORD *)&v12.c = v9;
  *(_OWORD *)&v12.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformScale(&v13, &v12, v7, v8);
  v10 = *(_OWORD *)&v13.c;
  *(_OWORD *)a2 = *(_OWORD *)&v13.a;
  *(_OWORD *)(a2 + 16) = v10;
  result = v13.tx;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v13.tx;
  return result;
}

void sub_100079C64(__int128 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  __int128 v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double *v13;
  uint64_t i;
  _OWORD v15[3];
  __int128 v16;
  _OWORD v17[4];
  double v18;
  double v19;
  double __x;

  v7 = a1[1];
  v16 = *a1;
  v17[0] = v7;
  v17[1] = a1[2];
  sub_100079AB0((uint64_t)&v16, (uint64_t)&v18);
  v8 = a2[1];
  v15[0] = *a2;
  v15[1] = v8;
  v15[2] = a2[2];
  sub_100079AB0((uint64_t)v15, (uint64_t)&v16);
  if ((v18 >= 0.0 || *((double *)&v16 + 1) >= 0.0) && (v19 >= 0.0 || *(double *)&v16 >= 0.0))
  {
    v9 = __x;
  }
  else
  {
    v18 = -v18;
    v19 = -v19;
    v9 = __x + dbl_100EEC540[__x < 0.0];
  }
  v10 = fmod(v9, 6.28318531);
  __x = v10;
  v11 = fmod(*(long double *)v17, 6.28318531);
  *(double *)v17 = v11;
  if (vabdd_f64(v10, v11) > 3.14159265)
  {
    v12 = v10 <= v11;
    if (v10 > v11)
      v11 = v10;
    v13 = (double *)&v16;
    if (!v12)
      v13 = &v18;
    v13[2] = v11 + -6.28318531;
  }
  for (i = 0; i != 72; i += 8)
    *(double *)((char *)&v18 + i) = *(double *)((char *)&v18 + i)
                                  + (*(double *)((char *)&v17[-1] + i) - *(double *)((char *)&v18 + i)) * a4;
  sub_100079BDC((uint64_t)&v18, a3);
}

BOOL sub_100079E00(double *a1, double *a2, double a3)
{
  double v3;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v40;
  double v41;

  v3 = vabdd_f64(*a1, *a2);
  if (*a1 != *a2 && v3 >= a3)
    return 0;
  v5 = a1[1];
  v6 = a2[1];
  v7 = vabdd_f64(v5, v6);
  if (v5 != v6 && v7 >= a3)
    return 0;
  v9 = a1[2];
  v10 = a2[2];
  v11 = vabdd_f64(v9, v10);
  if (v9 != v10 && v11 >= a3)
    return 0;
  v13 = a1[3];
  v14 = a2[3];
  v15 = vabdd_f64(v13, v14);
  if (v13 != v14 && v15 >= a3)
    return 0;
  v17 = a1[4];
  v18 = a2[4];
  if (v17 != v18 && vabdd_f64(v17, v18) >= a3)
    return 0;
  v19 = a1[5];
  v20 = a2[5];
  if (v19 != v20 && vabdd_f64(v19, v20) >= a3)
    return 0;
  v21 = a1[6];
  v22 = a2[6];
  if (v21 != v22 && vabdd_f64(v21, v22) >= a3)
    return 0;
  v23 = a1[7];
  v24 = a2[7];
  if (v23 != v24 && vabdd_f64(v23, v24) >= a3)
    return 0;
  v25 = a1[8];
  v26 = a2[8];
  if (v25 != v26 && vabdd_f64(v25, v26) >= a3)
    return 0;
  v27 = a1[9];
  v28 = a2[9];
  if (v27 != v28 && vabdd_f64(v27, v28) >= a3)
    return 0;
  v29 = a1[10];
  v30 = a2[10];
  if (v29 != v30 && vabdd_f64(v29, v30) >= a3)
    return 0;
  v31 = a1[11];
  v32 = a2[11];
  if (v31 != v32 && vabdd_f64(v31, v32) >= a3)
    return 0;
  v33 = a1[12];
  v34 = a2[12];
  if (v33 != v34 && vabdd_f64(v33, v34) >= a3)
    return 0;
  v35 = a1[13];
  v36 = a2[13];
  if (v35 != v36 && vabdd_f64(v35, v36) >= a3)
    return 0;
  v37 = a1[14];
  v38 = a2[14];
  if (v37 != v38 && vabdd_f64(v37, v38) >= a3)
    return 0;
  v40 = a1[15];
  v41 = a2[15];
  return vabdd_f64(v40, v41) < a3 || v40 == v41;
}

void sub_10007A1FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007A22C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007A400(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007A430(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007AB50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007AB80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007ABB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007ABE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007AFA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007AFD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007B000(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007B030(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007B8C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007B8F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007BD4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007BD7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007C04C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007C07C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007C0AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007C0DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007C1F0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x36u);
}

void sub_10007C3C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007C3F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10007C4CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void sub_10007C65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007C6D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007CA18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_10007CE1C(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_100007810();
    v15 = __src - v13;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v13) >> 3);
    if (2 * v17 > v14)
      v14 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v14;
    v33 = a1 + 16;
    if (v18)
      v19 = (char *)sub_100045008(a1 + 16, v18);
    else
      v19 = 0;
    v22 = &v19[24 * v16];
    __p = v19;
    v30 = v22;
    v31 = v22;
    v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v24 = 1;
        else
          v24 = 2 * v16;
        v25 = (char *)sub_100045008(v8, v24);
        v22 = &v25[24 * (v24 >> 2)];
        __p = v25;
        v30 = v22;
        v32 = &v25[24 * v26];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v23 = v16 + 2;
        if (v16 >= -1)
          v23 = v16 + 1;
        v22 -= 24 * (v23 >> 1);
        v30 = v22;
      }
    }
    v27 = *(_OWORD *)v3;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v22 = v27;
    v31 = v22 + 24;
    v4 = (char *)sub_10007D840((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30)
      v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v21 = *(_OWORD *)a3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 24;
  }
  else
  {
    v9 = __src + 24;
    v10 = v6 - 24;
    v11 = *(_QWORD *)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v11 = v12;
      v11 += 24;
      v10 += 24;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(__src + 24, __src, v6 - v9);
    if ((unint64_t)v4 <= v3)
      v3 += 24 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_OWORD *)v3;
    *((_QWORD *)v4 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v20;
  }
  return v4;
}

void sub_10007D090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007D58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_10007D69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

char *sub_10007D6B8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100007810();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_10007D7F0(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_10007D7F0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_100007810();
  result = (char *)sub_100045008((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_10007D840(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 24);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

id sub_10007DA60(uint64_t a1)
{
  __int128 v2;
  _OWORD v4[3];

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
  v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return objc_msgSend(*(id *)(a1 + 32), "setTransform:", v4);
}

id sub_10007DB64(uint64_t a1)
{
  CGFloat MaxX;
  void *v3;
  CGAffineTransform v5;
  CGAffineTransform v6;
  CGAffineTransform v7;
  CGAffineTransform v8;
  CGRect v9;

  objc_msgSend(*(id *)(a1 + 32), "updateFrame");
  memset(&v8, 0, sizeof(v8));
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  MaxX = CGRectGetMaxX(v9);
  CGAffineTransformMakeTranslation(&v8, MaxX * 0.5, 0.0);
  v6 = v8;
  CGAffineTransformScale(&v7, &v6, 0.25, 0.25);
  v8 = v7;
  v3 = *(void **)(a1 + 32);
  v5 = v7;
  objc_msgSend(v3, "setTransform:", &v5);
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.25);
}

id sub_10007DC18(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "remove");
  return objc_msgSend(*(id *)(a1 + 32), "setTarget:", 0);
}

void sub_10007DDAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10007DEB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007DFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10007E4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_10007E8F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007E924(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007EAEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10007EB1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10007EC5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10007ECC4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x34u);
}

id sub_10007ECEC()
{
  void *v0;

  return objc_msgSend(v0, "code");
}

id sub_10007FB28(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "p_transformInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "representedShapeInfos"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "info"));

  v7 = objc_msgSend(v5, "containsObject:", v6);
  return v7;
}

void sub_10007FBA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007FBD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007FDB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007FDE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007FFCC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10007FFFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000801E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100080210(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000806A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000806D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100080708(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100080738(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100080928(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100080958(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100080988(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_performAsyncMediaConversionWorkWithCompletionHandler:", *(_QWORD *)(a1 + 40));
}

void sub_100080DB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100080DE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100080E14(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  objc_class *v13;
  NSString *v14;
  void *v15;
  void *v16;
  id *v17;

  v6 = a2;
  v7 = a3;
  if (v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101231F60);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF0F38(v8, v7);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101231F80);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageCompatibilityConverter p_performAsyncMediaConversionWorkWithCompletionHandler:]_block_invoke"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageCompatibilityConverter.m"));
    v13 = (objc_class *)objc_opt_class(v7, v12);
    v14 = NSStringFromClass(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "domain"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 114, 0, "Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v15, v16, objc_msgSend(v7, "code"), v7);

  }
  v17 = *(id **)(a1 + 32);
  if (v17[1] != v6)
  {
    objc_storeStrong(v17 + 3, a2);
    v17 = *(id **)(a1 + 32);
  }
  objc_msgSend(v17, "p_completeConversionWithCompletionHandler:", *(_QWORD *)(a1 + 40));

}

void sub_100080FF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100081024(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100081054(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  objc_class *v13;
  NSString *v14;
  void *v15;
  void *v16;
  id *v17;

  v6 = a2;
  v7 = a3;
  if (v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101231FC8);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF0FF8(v8, v7);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101231FE8);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageCompatibilityConverter p_performAsyncMediaConversionWorkWithCompletionHandler:]_block_invoke"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageCompatibilityConverter.m"));
    v13 = (objc_class *)objc_opt_class(v7, v12);
    v14 = NSStringFromClass(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "domain"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 126, 0, "Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v15, v16, objc_msgSend(v7, "code"), v7);

  }
  v17 = *(id **)(a1 + 32);
  if (v17[1] != v6)
  {
    objc_storeStrong(v17 + 3, a2);
    v17 = *(id **)(a1 + 32);
  }
  objc_msgSend(v17, "p_completeConversionWithCompletionHandler:", *(_QWORD *)(a1 + 40));

}

void sub_100081234(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100081264(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100081294(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  objc_class *v13;
  NSString *v14;
  void *v15;
  void *v16;
  id *v17;

  v6 = a2;
  v7 = a3;
  if (v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232008);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF10B8(v8, v7);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232028);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLImageCompatibilityConverter p_performAsyncMediaConversionWorkWithCompletionHandler:]_block_invoke"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageCompatibilityConverter.m"));
    v13 = (objc_class *)objc_opt_class(v7, v12);
    v14 = NSStringFromClass(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "domain"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 141, 0, "Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v15, v16, objc_msgSend(v7, "code"), v7);

  }
  v17 = *(id **)(a1 + 32);
  if (v17[1] != v6)
  {
    objc_storeStrong(v17 + 3, a2);
    v17 = *(id **)(a1 + 32);
  }
  objc_msgSend(v17, "p_completeConversionWithCompletionHandler:", *(_QWORD *)(a1 + 40));

}

void sub_100081474(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000814A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008172C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x4Au);
}

id sub_100081768()
{
  void *v0;

  return objc_msgSend(v0, "code");
}

uint64_t sub_100081774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return objc_opt_class(v2, a2);
}

id sub_100081780@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = a2;
  return a1;
}

void sub_1000819C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000819F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100081D5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100081D8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008201C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10008204C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008207C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000822B8(id a1)
{
  void *v1;
  __CFString *v2;
  id v3;
  const __CFString *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bundleIdentifier"));

  v3 = objc_alloc((Class)NSString);
  if (v2)
    v4 = v2;
  else
    v4 = CFSTR("com.apple.Unknown");
  v5 = objc_msgSend(v3, "initWithFormat:", CFSTR("%@_%d"), v4, getpid());
  objc_storeStrong((id *)&qword_101414CC0, v5);
  if (!qword_101414CC0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232148);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF1308();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232168);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE87A4(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLTemporaryDirectory _createDirectoryWithSignature:subdirectory:error:]_block_invoke"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLTemporaryDirectory.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 114, 0, "invalid nil value for '%{public}s'", "secretSubdirectoryNameBase");

  }
}

void sub_10008248C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000824BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100082D6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100082D9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100082F44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100082F74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100083810(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100083840(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008434C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interactiveCanvasController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "selectionModelTranslator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editorController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "selectionPath"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "boardItemsForSelectionPath:", v4));

  if (objc_msgSend(v5, "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_filterNonDisplayedInfos:", v5));
    if (v6 != v5)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionPathWithInfos:", v6));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editorController"));
      objc_msgSend(v8, "setSelectionPath:", v7);

    }
  }

}

void sub_10008487C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000848AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100084A44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100084A74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000866AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000866DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100086BA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100086BD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100086C04(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "cancel");
}

void sub_100086C0C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  __int128 v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  char v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layerHost"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100086CDC;
  v6[3] = &unk_101232358;
  v7 = *(_OWORD *)(a1 + 32);
  v3 = *(id *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(void **)(a1 + 64);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = *(id *)(a1 + 72);
  v12 = *(id *)(a1 + 80);
  v13 = *(_BYTE *)(a1 + 88);
  objc_msgSend(v2, "continueAsynchronousWorkOnMainThreadUsingBlock:", v6);

}

void sub_100086CDC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  CRLCanvasCommandSelectionBehavior *v12;
  void *v13;
  uint64_t v14;
  CRLCanvasCommandSelectionBehavior *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layerHost"));
  objc_msgSend(v2, "endModalOperationWithToken:", *(_QWORD *)(a1 + 40));

  if ((objc_msgSend(*(id *)(a1 + 48), "isCancelled") & 1) != 0)
    goto LABEL_10;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "boardItems"));
  v4 = *(void **)(a1 + 56);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CRLInsertionContext nonInteractiveInsertionContext](CRLInsertionContext, "nonInteractiveInsertionContext"));
  objc_msgSend(v4, "prepareGeometryForInsertingBoardItems:withInsertionContext:", v3, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "canvasEditorHelper"));
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v24 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "commandForReplacingImagePlaceholderInSelection:withBoardItems:isCrossDocument:withSender:outSelectionBehavior:", v7, v3, 0, v8, &v24));
  v10 = v24;

  v11 = *(void **)(a1 + 56);
  if (v9)
  {
    v12 = (CRLCanvasCommandSelectionBehavior *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "interactiveCanvasController"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(-[CRLCanvasCommandSelectionBehavior commandController](v12, "commandController"));
    objc_msgSend(v13, "enqueueCommand:withSelectionBehavior:", v9, v10);
LABEL_6:

    goto LABEL_7;
  }
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "p_commandForPastingProvidedBoardItems:withPasteboard:sender:hasValidGeometries:allowPositionChange:", v3, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 88), 1));
  if (v14)
  {
    v9 = (void *)v14;
    v15 = [CRLCanvasCommandSelectionBehavior alloc];
    v16 = *(_QWORD *)(a1 + 56);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v3));
    v12 = -[CRLCanvasCommandSelectionBehavior initWithCanvasEditor:type:constructedInfos:](v15, "initWithCanvasEditor:type:constructedInfos:", v16, 0, v17);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "interactiveCanvasController"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "commandController"));
    objc_msgSend(v18, "enqueueCommand:withSelectionBehavior:", v9, v12);

    goto LABEL_6;
  }
LABEL_7:
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "errors"));
  if (objc_msgSend(v19, "count"))
  {
    v20 = *(void **)(a1 + 32);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "localizedErrorDescription"));
    objc_msgSend(v20, "presentErrors:withLocalizedDescription:completionHandler:", v19, v21, 0);

  }
LABEL_10:
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "interactiveCanvasController"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "editingCoordinator"));
  objc_msgSend(v23, "resumeCollaborationWithReason:", CFSTR("CRLCanvasEditorPastingImportableBoardItems"));

}

void sub_1000875E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100087600(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  CGRect *v12;
  void *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  unsigned int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  unsigned int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;
  _BYTE v37[128];
  CGRect v38;

  v3 = a2;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)v26;
    *(_QWORD *)&v6 = 67109378;
    v24 = v6;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v26 != v8)
          objc_enumerationMutation(v4);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layoutForInfo:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v9), v24));
        v11 = v10;
        if (v10)
        {
          v12 = *(CGRect **)(*(_QWORD *)(a1 + 40) + 8);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "geometryInRoot"));
          objc_msgSend(v13, "frame");
          v38.origin.x = v14;
          v38.origin.y = v15;
          v38.size.width = v16;
          v38.size.height = v17;
          *(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) = CGRectUnion(v12[1], v38);
        }
        else
        {
          v18 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_101232378);
          v19 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109890;
            v30 = v18;
            v31 = 2082;
            v32 = "-[CRLCanvasEditor p_boundingRectForPastingBoardItems:]_block_invoke";
            v33 = 2082;
            v34 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasEditor.m";
            v35 = 1024;
            v36 = 1297;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should always be able to get a layout with temporaryLayoutControllerForInfos.", buf, 0x22u);
          }
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_101232398);
          v20 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            v22 = v20;
            v23 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
            *(_DWORD *)buf = v24;
            v30 = v18;
            v31 = 2114;
            v32 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

          }
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLCanvasEditor p_boundingRectForPastingBoardItems:]_block_invoke"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasEditor.m"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v21, 1297, 0, "Should always be able to get a layout with temporaryLayoutControllerForInfos.");

        }
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
    }
    while (v7);
  }

}

void sub_100087958(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100087988(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CRLCanvasElementInfo *__cdecl sub_1000883B8(id a1, CRLCanvasLayout *a2)
{
  return -[CRLCanvasLayout info](a2, "info");
}

id sub_1000888A0(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "interactiveCanvasController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "board"));
  v7 = objc_msgSend(v2, "isConnectedWithBoardItem:boardItemOwner:", v4, v6);

  return v7;
}

void sub_100088E54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100088E84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

int64_t sub_100088EB4(id a1, id a2, id a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;

  v4 = a3;
  v5 = a2;
  v7 = objc_opt_class(NSObject, v6);
  v13 = sub_10022209C(v5, v7, 1, v8, v9, v10, v11, v12, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  v16 = objc_opt_class(NSObject, v15);
  v22 = sub_10022209C(v4, v16, 1, v17, v18, v19, v20, v21, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "geometry"));
  objc_msgSend(v24, "position");
  v26 = v25;
  v28 = v27;

  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "geometry"));
  objc_msgSend(v29, "position");
  v31 = v30;
  v33 = v32;

  v34 = 1;
  v35 = -1;
  if (v26 >= v31)
    v35 = v26 > v31;
  if (v28 <= v33)
    v34 = v35;
  if (v28 >= v33)
    v36 = v34;
  else
    v36 = -1;

  return v36;
}

int64_t sub_100088FDC(id a1, id a2, id a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  double MaxX;
  void *v26;
  double MinY;
  void *v28;
  double v29;
  void *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  v4 = a3;
  v5 = a2;
  v7 = objc_opt_class(NSObject, v6);
  v13 = sub_10022209C(v5, v7, 1, v8, v9, v10, v11, v12, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  v16 = objc_opt_class(NSObject, v15);
  v22 = sub_10022209C(v4, v16, 1, v17, v18, v19, v20, v21, (uint64_t)&OBJC_PROTOCOL___CRLCanvasElementInfo);
  v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "geometry"));
  objc_msgSend(v24, "transformedBounds");
  MaxX = CGRectGetMaxX(v36);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "geometry"));
  objc_msgSend(v26, "transformedBounds");
  MinY = CGRectGetMinY(v37);

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "geometry"));
  objc_msgSend(v28, "transformedBounds");
  v29 = CGRectGetMaxX(v38);
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "geometry"));
  objc_msgSend(v30, "transformedBounds");
  v31 = CGRectGetMinY(v39);

  v32 = 1;
  if (MaxX <= v29)
    v33 = 0;
  else
    v33 = -1;
  if (MaxX < v29)
    v33 = 1;
  if (MinY <= v31)
    v32 = v33;
  if (MinY >= v31)
    v34 = v32;
  else
    v34 = -1;

  return v34;
}

void sub_10008A0A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008A0D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008A268(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008A298(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10008AE08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10008B8D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008B904(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008CFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)&STACK[0x440]);
  _Unwind_Resume(a1);
}

id sub_10008CFF8(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];

  v2 = *(_OWORD *)(a1 + 120);
  v7[4] = *(_OWORD *)(a1 + 104);
  v7[5] = v2;
  v3 = *(_OWORD *)(a1 + 152);
  v7[6] = *(_OWORD *)(a1 + 136);
  v7[7] = v3;
  v4 = *(_OWORD *)(a1 + 56);
  v7[0] = *(_OWORD *)(a1 + 40);
  v7[1] = v4;
  v5 = *(_OWORD *)(a1 + 88);
  v7[2] = *(_OWORD *)(a1 + 72);
  v7[3] = v5;
  objc_msgSend(*(id *)(a1 + 32), "setTransform:", v7);
  return objc_msgSend(*(id *)(a1 + 32), "setDisableLayout:", *(unsigned __int8 *)(a1 + 168));
}

void sub_10008D064(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  uint64_t v4;
  id v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  _OWORD v21[8];

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (uint64_t)WeakRetained[10] - 1;
    WeakRetained[10] = (id)v4;
    if (!v4)
    {
      v5 = objc_loadWeakRetained(WeakRetained + 1);
      v6 = *(_OWORD *)&CATransform3DIdentity.m33;
      v21[4] = *(_OWORD *)&CATransform3DIdentity.m31;
      v21[5] = v6;
      v7 = *(_OWORD *)&CATransform3DIdentity.m43;
      v21[6] = *(_OWORD *)&CATransform3DIdentity.m41;
      v21[7] = v7;
      v8 = *(_OWORD *)&CATransform3DIdentity.m13;
      v21[0] = *(_OWORD *)&CATransform3DIdentity.m11;
      v21[1] = v8;
      v9 = *(_OWORD *)&CATransform3DIdentity.m23;
      v21[2] = *(_OWORD *)&CATransform3DIdentity.m21;
      v21[3] = v9;
      objc_msgSend(v3, "setTransform:", v21);
      objc_msgSend(v3, "p_setViewScale:", *(double *)(a1 + 48));
      objc_msgSend(v3, "setContentInset:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
      objc_msgSend(v3, "fixFrameAndScrollView");
      if (objc_msgSend(v5, "shouldCanvasScrollingSizeGrowToFitBoardContent"))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "canvasView"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "enclosingScrollView"));
        objc_msgSend(v11, "setContentOffset:animated:", 0, *(double *)(a1 + 88), *(double *)(a1 + 96));

        objc_msgSend(v5, "i_viewScaleDidChange");
        objc_msgSend(v5, "i_viewScrollDidChange");
        objc_msgSend(v5, "viewDidEndZooming");
        objc_msgSend(v3, "p_scrollViewContentOffsetForUnscaledContentCenter:viewScale:contentInset:", *(double *)(a1 + 104), *(double *)(a1 + 112), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
        v13 = v12;
        v15 = v14;
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "canvasView"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "enclosingScrollView"));
        objc_msgSend(v17, "setContentOffset:animated:", 0, v13, v15);

      }
      else
      {
        objc_msgSend(v5, "i_viewScaleDidChange");
        objc_msgSend(v5, "i_viewScrollDidChange");
        objc_msgSend(v5, "viewDidEndZooming");
      }

    }
    v20 = *(_QWORD *)(a1 + 32);
    if (v20)
    {
      v19 = *(void (**)(void))(v20 + 16);
      goto LABEL_11;
    }
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 32);
    if (v18)
    {
      v19 = *(void (**)(void))(v18 + 16);
LABEL_11:
      v19();
    }
  }

}

void sub_10008D230(uint64_t a1, double a2, double a3)
{
  char *WeakRetained;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[3];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];
  __int128 v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (*(double *)(a1 + 48) != 0.0)
  {
    WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      v6 = (a3 - *(double *)(a1 + 56)) / *(double *)(a1 + 48);
      *(float *)&v6 = v6;
      objc_msgSend(*(id *)(a1 + 32), "solveForInput:", v6);
      v7 = *(_OWORD *)(a1 + 80);
      v18[0] = *(_OWORD *)(a1 + 64);
      v18[1] = v7;
      v8 = *(_OWORD *)(a1 + 112);
      v18[2] = *(_OWORD *)(a1 + 96);
      v19[0] = v8;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      v9 = *(_OWORD *)(a1 + 144);
      v19[1] = *(_OWORD *)(a1 + 128);
      v19[2] = v9;
      sub_100079C64(v19, v18, (uint64_t)&v20, v10);
      v15 = v20;
      v16 = v21;
      v17 = v22;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "associatedBackgroundLayer"));
      v14[0] = v15;
      v14[1] = v16;
      v14[2] = v17;
      objc_msgSend(v11, "setDynamicTransform:", v14);

      v13 = v21;
      v12 = v22;
      *(_OWORD *)(WeakRetained + 168) = v20;
      *(_OWORD *)(WeakRetained + 184) = v13;
      *(_OWORD *)(WeakRetained + 200) = v12;
    }

  }
}

uint64_t sub_10008D330(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _OWORD *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  __int128 v14;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "invalidate");

  v4 = objc_loadWeakRetained(v2);
  LOBYTE(WeakRetained) = objc_msgSend(v4, "paused");

  if ((WeakRetained & 1) == 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "associatedBackgroundLayer"));
    v12 = *(_OWORD *)&CGAffineTransformIdentity.c;
    v13[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
    v11 = v13[0];
    v13[1] = v12;
    v14 = *(_OWORD *)&CGAffineTransformIdentity.tx;
    v10 = v14;
    objc_msgSend(v5, "setDynamicTransform:", v13);

    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 160);
    *(_QWORD *)(v6 + 160) = 0;

    v8 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 168);
    *v8 = v11;
    v8[1] = v12;
    v8[2] = v10;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10008DE34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10008DE64(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10008EFBC(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), "p_didPresentErrorWithRecovery:contextInfo:", 0);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, byte_101414CD4);
  return result;
}

uint64_t sub_10008F014(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_100091C54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100091C84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100091CB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100091CE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100091D14(id a1, CRLiOSQuickSelectViewController *a2, UITraitCollection *a3)
{
  CRLiOSQuickSelectViewController *v3;

  v3 = a2;
  -[CRLiOSQuickSelectViewController p_setNeedsHudContainerViewFrameUpdate](v3, "p_setNeedsHudContainerViewFrameUpdate");
  -[CRLiOSQuickSelectViewController p_updateHUDAppearance](v3, "p_updateHUDAppearance");

}

void sub_100091D44(uint64_t a1)
{
  UIAccessibilityNotifications v1;
  id v2;

  v1 = UIAccessibilityLayoutChangedNotification;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textLabel"));
  UIAccessibilityPostNotification(v1, v2);

}

void sub_100092208(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  id v7;

  v2 = *(double *)(a1 + 48);
  v3 = *(double *)(a1 + 56);
  v4 = *(double *)(a1 + 64);
  v5 = *(double *)(a1 + 72);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hudContainerView"));
  objc_msgSend(v6, "setFrame:", v2, v3, v4, v5);

  objc_msgSend(*(id *)(a1 + 32), "p_displayCurrentHUDForTraitCollection:andVisibleRect:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textLabel"));
  objc_msgSend(v7, "invalidateIntrinsicContentSize");

}

void sub_1000928B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000928E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100092910(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100092940(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100092F30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100092F60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100092F90(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "HUDView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_1000933E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100093410(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100093440(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100093470(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000934A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000934D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100093500(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "HUDView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_100093760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100093778(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100093788(uint64_t a1)
{

}

void sub_100093790(uint64_t a1, void *a2, _BYTE *a3)
{
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = objc_opt_respondsToSelector(v10, "quickSelectHUDTitle");
  v6 = v10;
  if ((v5 & 1) != 0)
  {
    *a3 = 1;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "quickSelectHUDTitle"));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = v7;
    if (!v7)
      v9 = *(void **)(v8 + 40);
    objc_storeStrong((id *)(v8 + 40), v9);

    v6 = v10;
  }

}

void sub_100093948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100093960(uint64_t a1, void *a2, _BYTE *a3)
{
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = objc_opt_respondsToSelector(v10, "quickSelectHUDIconSystemImageName");
  v6 = v10;
  if ((v5 & 1) != 0)
  {
    *a3 = 1;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "quickSelectHUDIconSystemImageName"));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = v7;
    if (!v7)
      v9 = *(void **)(v8 + 40);
    objc_storeStrong((id *)(v8 + 40), v9);

    v6 = v10;
  }

}

void sub_100095260(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crlaxInteractiveCanvasController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "crlaxTarget"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "commandController"));

  if (*(_BYTE *)(a1 + 80) && (objc_msgSend(v4, "isGroupOpen") & 1) == 0)
  {
    objc_msgSend(v4, "openGroup");
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  v18 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crlaxTarget"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "layout"));

  v9 = (objc_class *)objc_opt_class(CRLConnectionLineOrthogonalLayout, v8);
  v10 = __CRLAccessibilityCastAsClass(v9, (uint64_t)v7, 1, &v18);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (v18)
    abort();
  v12 = (void *)v11;

  objc_msgSend(v12, "setUserDidSetControlPoint:", 1);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v16 = *(void **)(a1 + 32);
  v15 = *(void **)(a1 + 40);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "crlaxInteractiveCanvasController"));
  objc_msgSend(v15, "performMoveOfKnob:toUnscaledPosition:withTracker:rep:andICC:", v13, v14, v16, v17, *(double *)(a1 + 64), *(double *)(a1 + 72));

  if (v5)
    objc_msgSend(v4, "closeGroup");

}

void sub_100097A20(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_100097A48(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

uint64_t sub_100097FC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100098058(uint64_t a1)
{
  id result;

  result = (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (result)
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", result);
  return result;
}

void sub_1000983A0(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000983C8(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000984A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000984BC(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void sub_1000984CC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

id sub_1000984D8(uint64_t a1, void *a2, void *a3)
{
  id result;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(a2);
        v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v10);
        v12 = objc_opt_class(NSArray, v7);
        if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 16))();
        else
          objc_msgSend(a3, "addObject:", v11);
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_100098740(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_100098768(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_100098800(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_100098C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100098C40(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    v2 = result;
    result = *(_QWORD *)(result + 32);
    if (result)
    {
      result = (*(uint64_t (**)(void))(result + 16))();
      v1 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    }
    *(_BYTE *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t sub_100098C8C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t result;

  close(*(_DWORD *)(a1 + 40));
  if ((_DWORD)a2)
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_101232B18);
    v4 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DF1F88(v4);
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_100098D2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100098D5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

uint64_t sub_100098F68(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t result;

  if ((_DWORD)a2)
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_101232B80);
    v4 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DF1F88(v4);
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_100099000(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100099280(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000992B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000992E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v6;
  id v7;

  v7 = a3;
  if ((_DWORD)a4)
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError crl_fileReadPOSIXErrorWithNumber:userInfo:](NSError, "crl_fileReadPOSIXErrorWithNumber:userInfo:", a4, 0));
  else
    v6 = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000995B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000995E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100099618(_QWORD *a1, uint64_t a2, void *a3, int a4)
{
  NSObject *size;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t *v11;
  NSObject *v12;

  size = a3;
  v12 = size;
  if (a4)
  {
    v8 = a1[4];
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, a4, 0));
    (*(void (**)(uint64_t, uint64_t, _QWORD, void *))(v8 + 16))(v8, a2, 0, v9);

  }
  else
  {
    if (size)
      size = dispatch_data_get_size(size);
    v10 = a1[6] - (_QWORD)size;
    v11 = (unint64_t *)(*(_QWORD *)(a1[5] + 8) + 24);
    do
      __ldaxr(v11);
    while (__stlxr(v10, v11));
    (*(void (**)(void))(a1[4] + 16))();
  }

}

void sub_1000998EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009991C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

intptr_t sub_10009994C(uint64_t a1)
{
  dispatch_fd_t descriptor;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  descriptor = dispatch_io_get_descriptor(*(dispatch_io_t *)(*(_QWORD *)(a1 + 32) + 16));
  if (descriptor == -1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232CF8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF21B0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232D18);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v6);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFileIOChannel close]_block_invoke"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLFileIOChannel.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v7, 274, 0, "Channel file descriptor is closed");

    goto LABEL_16;
  }
  if (fcntl(descriptor, 51, 0) == -1)
  {
    v3 = +[NSError crl_fileReadPOSIXErrorWithNumber:userInfo:](NSError, "crl_fileReadPOSIXErrorWithNumber:userInfo:", *__error(), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_101232CD8);
    v5 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DF2230(v5, v4);
LABEL_16:

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100099B3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100099B6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100099B9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100099D40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100099D70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100099F08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100099F38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A11C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A14C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A17C(uint64_t a1)
{
  dispatch_fd_t descriptor;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  descriptor = dispatch_io_get_descriptor(*(dispatch_io_t *)(*(_QWORD *)(a1 + 32) + 16));
  if (descriptor == -1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232DF8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF249C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232E18);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFileIOChannel flushWithCompletion:]_block_invoke"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLFileIOChannel.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 313, 0, "Channel file descriptor is closed");

  }
  else if (fsync(descriptor) == -1)
  {
    v3 = +[NSError crl_fileReadPOSIXErrorWithNumber:userInfo:](NSError, "crl_fileReadPOSIXErrorWithNumber:userInfo:", *__error(), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    goto LABEL_14;
  }
  v4 = 0;
LABEL_14:
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v4);

}

void sub_10009A31C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A34C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A538(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A568(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A598(_QWORD *a1)
{
  dispatch_fd_t descriptor;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  descriptor = dispatch_io_get_descriptor(*(dispatch_io_t *)(a1[4] + 16));
  if (descriptor == -1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232E78);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF259C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101232E98);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFileIOChannel truncateToLength:completion:]_block_invoke"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLFileIOChannel.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 331, 0, "Channel is closed");

  }
  else if (ftruncate(descriptor, a1[6]) == -1)
  {
    v3 = +[NSError crl_fileReadPOSIXErrorWithNumber:userInfo:](NSError, "crl_fileReadPOSIXErrorWithNumber:userInfo:", *__error(), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    goto LABEL_14;
  }
  v4 = 0;
LABEL_14:
  v8 = a1[5];
  if (v8)
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v4);

}

void sub_10009A73C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A76C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009A818(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

char *sub_10009A82C()
{
  int v0;

  return strerror(v0);
}

void *sub_10009BC40(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByAppendingString:", CFSTR(".framework")));
  v6 = v5;
  if (v3)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingString:", CFSTR(".framework")));
    v8 = sub_10009BD60(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByAppendingPathComponent:", v6));

  }
  else
  {
    v11 = sub_10009BD60(v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v11);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByAppendingPathComponent:", v4));
  v13 = v12;
  if (!v12
    || (v14 = dlopen((const char *)objc_msgSend(objc_retainAutorelease(v12), "fileSystemRepresentation"), 256)) == 0)
  {
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("Ubiquity")) & 1) == 0)
      NSLog(CFSTR("NSSoftLinking - The %@ framework's library couldn't be loaded from %@."), v4, v13);
    v14 = 0;
  }

  return v14;
}

id sub_10009BD60(void *a1)
{
  id v1;
  void *v2;
  NSArray *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "count");
  if (v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndex:", v6));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("Frameworks")));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByAppendingPathComponent:", v1));

      if ((objc_msgSend(v2, "fileExistsAtPath:", v9) & 1) != 0)
        break;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("PrivateFrameworks")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByAppendingPathComponent:", v1));

      if (objc_msgSend(v2, "fileExistsAtPath:", v11))
      {
        v9 = v11;
        break;
      }

      if (v5 == (id)++v6)
      {
        v5 = 0;
        goto LABEL_9;
      }
    }
    v5 = v9;

  }
LABEL_9:

  return v5;
}

void *sub_10009BEAC(void *a1, void *a2, const char *a3, void **a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;

  v7 = a1;
  v8 = a2;
  v9 = *a4;
  if (!*a4 && (v9 = sub_10009BC40(v7, v8), (*a4 = v9) == 0) || (v10 = dlsym(v9, a3)) == 0)
  {
    if ((objc_msgSend(v8, "isEqualToString:", CFSTR("Ubiquity")) & 1) == 0)
      NSLog(CFSTR("NSSoftLinking - The function '%s' can't be found in the %@ framework."), a3, v8);
    v10 = 0;
  }

  return v10;
}

void sub_10009C578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009C648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009C910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009C970(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009C9A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009CA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10009CDD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10009CE54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009CE84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009CEB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009CEE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009D7BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009D7EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009D81C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009D84C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E5C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E5F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E620(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E650(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E680(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E6B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E6E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E710(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009E740(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interactiveCanvasController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layerHost"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "canvasLayer"));

  v4 = objc_msgSend(v6, "isLayoutDisabled");
  objc_msgSend(v6, "setDisableLayout:", 1);
  objc_msgSend(*(id *)(a1 + 32), "deleteForward:", 0);
  objc_msgSend(v6, "setDisableLayout:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storage"));
  objc_msgSend(*(id *)(a1 + 40), "setChangeCount:", objc_msgSend(v5, "changeCount"));

}

void sub_10009E7F4(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "owningRep"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "commandController"));
  objc_msgSend(v2, "closeGroupWithSelectionBehavior:", *(_QWORD *)(a1 + 40));

}

void sub_10009E844(uint64_t a1)
{
  void *v1;
  id v2;

  if (!*(_BYTE *)(a1 + 40))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "owningRep"));
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "commandController"));
    objc_msgSend(v1, "closeGroup");

  }
}

void sub_10009F1D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10009F204(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10009F4D0(uint64_t a1)
{
  __int128 v2;
  _OWORD v4[3];

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
  v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return objc_msgSend(*(id *)(a1 + 32), "setTransform:", v4);
}

id sub_10009F5D4(uint64_t a1)
{
  CGFloat MaxY;
  void *v3;
  CGAffineTransform v5;
  CGAffineTransform v6;
  CGAffineTransform v7;
  CGAffineTransform v8;
  CGRect v9;

  objc_msgSend(*(id *)(a1 + 32), "updateFrame");
  memset(&v8, 0, sizeof(v8));
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  MaxY = CGRectGetMaxY(v9);
  CGAffineTransformMakeTranslation(&v8, 0.0, MaxY * 0.5);
  v6 = v8;
  CGAffineTransformScale(&v7, &v6, 0.25, 0.25);
  v8 = v7;
  v3 = *(void **)(a1 + 32);
  v5 = v7;
  objc_msgSend(v3, "setTransform:", &v5);
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.25);
}

id sub_10009F688(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "remove");
  return objc_msgSend(*(id *)(a1 + 32), "setTarget:", 0);
}

void sub_10009F818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10009F920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009FA7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10009FFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1000A0CA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A0CD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A127C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A12AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A12DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A130C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A14A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A14D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A1784(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A17B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A1D4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A1D7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A2640(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A2670(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A2F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A2F54(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  unsigned int v10;
  id v11;

  v11 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionForEditor:"));
  v7 = objc_opt_class(_TtC8Freeform17CRLGroupSelection, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {

  }
  else
  {
    v8 = objc_opt_respondsToSelector(v11, "currentSelectionContainsInfo:");

    if ((v8 & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "info"));
      v10 = objc_msgSend(v11, "currentSelectionContainsInfo:", v9);

      if (v10)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
        *a3 = 1;
      }
    }
  }

}

void sub_1000A3408(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[CRLColor colorWithRed:green:blue:alpha:](CRLColor, "colorWithRed:green:blue:alpha:", 0.85, 0.85, 0.85, 1.0));
  v2 = (void *)qword_101414CE0;
  qword_101414CE0 = v1;

}

uint64_t sub_1000A50E0(uint64_t a1)
{
  +[UIView setAnimationCurve:](UIView, "setAnimationCurve:", *(_QWORD *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A5140(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, "copy");
  objc_msgSend(v1, "performSelector:withObject:afterDelay:", "crl_runBlock", 0, 0.0);

}

void sub_1000A52E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A5310(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A5758(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A5788(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A5810(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIMenuController sharedMenuController](UIMenuController, "sharedMenuController"));
  objc_msgSend(v2, "setMenuVisible:animated:", 1, *(unsigned __int8 *)(a1 + 32));

}

void sub_1000A5910(uint64_t a1)
{
  void *v2;
  __int128 v3;
  id v4;
  _QWORD v5[5];
  id v6;
  __int128 v7;
  __int128 v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenuController sharedMenuController](UIMenuController, "sharedMenuController"));
  v4 = v2;
  if (*(_BYTE *)(a1 + 72))
  {
    objc_msgSend(v2, "showMenuFromView:rect:", *(_QWORD *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  }
  else
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000A59CC;
    v5[3] = &unk_1012327C8;
    v5[4] = v2;
    v6 = *(id *)(a1 + 32);
    v3 = *(_OWORD *)(a1 + 56);
    v7 = *(_OWORD *)(a1 + 40);
    v8 = v3;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v5);

  }
}

id sub_1000A59CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showMenuFromView:rect:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
}

void sub_1000A5F88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A5FB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A5FE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A6018(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A6048(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A6078(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A643C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A645C(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  unsigned int v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  void *v9;
  id v10;
  unsigned int v11;
  id v12;
  id to;

  objc_copyWeak(&to, (id *)(a1 + 32));
  v1 = objc_loadWeakRetained(&to);

  if (v1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenuController sharedMenuController](UIMenuController, "sharedMenuController"));
    v3 = objc_loadWeakRetained(&to);
    v4 = objc_msgSend(v3, "shouldDismissOnChange");

    if (v4)
      goto LABEL_5;
    objc_msgSend(v2, "update");
    v5 = objc_loadWeakRetained(&to);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "delegate"));
    v7 = objc_opt_respondsToSelector(v6, "contextMenuPositionShouldUpdateForContextMenuController:");

    if ((v7 & 1) != 0)
    {
      v8 = objc_loadWeakRetained(&to);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "delegate"));
      v10 = objc_loadWeakRetained(&to);
      v11 = objc_msgSend(v9, "contextMenuPositionShouldUpdateForContextMenuController:", v10);

      if (v11)
LABEL_5:
        objc_msgSend(v2, "hideMenu");
    }
    v12 = objc_loadWeakRetained(&to);
    objc_msgSend(v12, "setResetOperation:", 0);

  }
  objc_destroyWeak(&to);
}

void sub_1000A6594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000A6700()
{
  if (qword_101414CF8 != -1)
    dispatch_once(&qword_101414CF8, &stru_1012334F0);
  return (id)qword_101414CF0;
}

void sub_1000A6740(id a1)
{
  id v1;
  void *v2;

  v1 = MTLCreateSystemDefaultDevice();
  v2 = (void *)qword_101414CF0;
  qword_101414CF0 = (uint64_t)v1;

}

CGImageRef sub_1000A6760(void *a1)
{
  id v1;
  CGColorSpace *DeviceRGB;
  CGImageRef v3;

  v1 = a1;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v3 = sub_1000A679C(v1, DeviceRGB);

  return v3;
}

CGImageRef sub_1000A679C(void *a1, CGColorSpace *a2)
{
  id v3;
  size_t v4;
  id v5;
  size_t v6;
  void *v7;
  size_t v8;
  CGBitmapInfo v9;
  CGDataProvider *v10;
  CGImageRef v11;
  _QWORD v13[6];

  v3 = a1;
  if (objc_msgSend(v3, "pixelFormat") == (id)110
    || objc_msgSend(v3, "pixelFormat") == (id)112
    || objc_msgSend(v3, "pixelFormat") == (id)113
    || objc_msgSend(v3, "pixelFormat") == (id)114)
  {
    v4 = 16;
  }
  else if (objc_msgSend(v3, "pixelFormat") == (id)115)
  {
    v4 = 16;
  }
  else
  {
    v4 = 8;
  }
  v5 = objc_msgSend(v3, "height");
  v6 = (v4 >> 1) * (_QWORD)v5 * (_QWORD)objc_msgSend(v3, "width");
  v7 = malloc_type_malloc(v6, 0x522C22E5uLL);
  v8 = (_QWORD)objc_msgSend(v3, "width") * (v4 >> 1);
  memset(v13, 0, 24);
  v13[3] = objc_msgSend(v3, "width");
  v13[4] = objc_msgSend(v3, "height");
  v13[5] = 1;
  objc_msgSend(v3, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v7, v8, v13, 0);
  if (objc_msgSend(v3, "pixelFormat") == (id)80
    || objc_msgSend(v3, "pixelFormat") == (id)81
    || objc_msgSend(v3, "pixelFormat") == (id)552
    || objc_msgSend(v3, "pixelFormat") == (id)553)
  {
    v9 = 8194;
  }
  else
  {
    v9 = 16385;
  }
  if (objc_msgSend(v3, "pixelFormat") == (id)115)
    v9 = 4353;
  v10 = CGDataProviderCreateWithData(0, v7, v6, (CGDataProviderReleaseDataCallback)sub_1000A6994);
  v11 = CGImageCreate((size_t)objc_msgSend(v3, "width"), (size_t)objc_msgSend(v3, "height"), v4, 4 * v4, v8, a2, v9, v10, 0, 0, kCGRenderingIntentDefault);
  CGDataProviderRelease(v10);
  CGColorSpaceRelease(a2);

  return v11;
}

void sub_1000A6994(int a1, void *a2)
{
  free(a2);
}

id sub_1000A699C(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v1 = a1;
  if (qword_101414D10 != -1)
    dispatch_once(&qword_101414D10, &stru_101233510);
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = sub_1000A6AE4;
  v13 = sub_1000A6AF4;
  v14 = 0;
  v2 = qword_101414D08;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A6AFC;
  v6[3] = &unk_10122C5F0;
  v7 = v1;
  v8 = &v9;
  v3 = v1;
  dispatch_sync(v2, v6);
  v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1000A6A98(id a1)
{
  uint64_t v1;
  void *v2;
  dispatch_queue_t v3;
  void *v4;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v2 = (void *)qword_101414D00;
  qword_101414D00 = v1;

  v3 = dispatch_queue_create("com.apple.freeform.CRLMetalDrawableCommandQueueAccessingQueue", 0);
  v4 = (void *)qword_101414D08;
  qword_101414D08 = (uint64_t)v3;

}

uint64_t sub_1000A6AE4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000A6AF4(uint64_t a1)
{

}

void sub_1000A6AFC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = (void *)qword_101414D00;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 32), "registryID")));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v7 = objc_msgSend(*(id *)(a1 + 32), "newCommandQueue");
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    v10 = *(void **)(a1 + 32);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v12 = (void *)qword_101414D00;
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v10, "registryID")));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, v13);

  }
}

void sub_1000A6E58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A6E88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A7170(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A71A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A73AC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

id sub_1000A73E8(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "p_tintedImageWithScale:", 1.0));

  return v2;
}

id sub_1000A7424(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "p_tintedImageWithScale:", 0.5));

  return v2;
}

id sub_1000A7460(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "p_tintedImageWithScale:", 0.25));

  return v2;
}

void sub_1000A77D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A7800(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A8174(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A81A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A81D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A8204(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A8234(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A8264(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A8358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1000A8A84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A8AB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A92EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A931C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_1000A934C(id a1, CRLCanvasRenderable *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  unsigned __int8 v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[CRLCanvasRenderable name](a2, "name", a3, a4));
  v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("CRLImageFillSublayer"));

  return v5;
}

void sub_1000A938C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A93BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A966C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A969C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A9E6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A9E9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A9ECC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A9EFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A9F2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000A9F5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AA2A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AA2D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AA308(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AA338(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AA50C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AA53C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AAB5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AAB8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AABBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AABEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AAC1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AAC4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AB2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGImageRef sub_1000AB2EC(uint64_t a1)
{
  _QWORD *v2;
  CGImage *v3;
  uint64_t v4;
  CGImageRef result;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (CGImage *)v2[14];
  if (!v3 || v2[15] != *(_QWORD *)(a1 + 48) || (v4 = v2[16], v4 >= 4))
  {
    CGImageRelease(v3);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = CGImageCreateCopy(*(CGImageRef *)(a1 + 48));
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128) = 0;
    v2 = *(_QWORD **)(a1 + 32);
    v4 = v2[16];
  }
  v2[16] = v4 + 1;
  result = CGImageRetain(*(CGImageRef *)(*(_QWORD *)(a1 + 32) + 112));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000ABA48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ABA78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ABD08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ABD38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ABFB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ABFE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AC258(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AC288(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ACF00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ACF30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AD2B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AD2E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AD310(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AD340(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AD4B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLViewControllerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D90B0;
  off_1013D90B0 = v2;

}

void sub_1000AD4E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLViewControllerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D90B0;
  off_1013D90B0 = v2;

}

id sub_1000AD7CC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setBackgroundColor:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 48), "setFrame:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
}

id sub_1000AD808(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "completeTransition:", a2);
}

void sub_1000ADB24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ADB54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ADC98(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000ADD70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AE9C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AE9F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AEA24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AEA54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AEA84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AEAB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AEAE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AEB10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AEB40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AEB70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AEBA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AEBCC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AEBF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AF4DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AF508(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AF538(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000AF568(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AF594(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AFA48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLNudgeGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D8E20;
  off_1013D8E20 = v2;

}

void sub_1000AFCEC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void sub_1000AFCF8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1000B07D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B0804(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B0B68(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B0B98(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B0BC8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (*(id *)(a1 + 32) == v3)
  {

    v4 = 0;
  }
  v5 = v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000B0C9C(id a1)
{
  CRLWPFontVerifier *v1;
  void *v2;

  v1 = objc_alloc_init(CRLWPFontVerifier);
  v2 = (void *)qword_101414D18;
  qword_101414D18 = (uint64_t)v1;

}

id sub_1000B0FC8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "keywordByCapitalizingLowercasedKeyword:locale:", a2, *(_QWORD *)(a1 + 32));
}

void sub_1000B1190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B11A8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_101414D30;
  qword_101414D30 = (uint64_t)v1;

}

uint64_t sub_1000B11D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000B11E0(uint64_t a1)
{

}

void sub_1000B11E8(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v11 = (void *)a1[4];
  v12 = (void *)a1[5];
  v13 = a2;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "locale"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "capitalizedStringWithLocale:", v14));

  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringByReplacingCharactersInRange:withString:", a3, a4, v15));
  v17 = *(_QWORD *)(a1[6] + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v16;

  *a7 = 1;
}

id sub_1000B134C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "hasPrefix:", a2);
}

void sub_1000B1FF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B2028(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B2058(id a1)
{
  CRLRulerUnits *v1;
  void *v2;

  v1 = objc_alloc_init(CRLRulerUnits);
  v2 = (void *)qword_101414D48;
  qword_101414D48 = (uint64_t)v1;

}

void sub_1000B29A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B29D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B3394(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B33C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1000B376C(uint64_t a1)
{
  uint64_t result;
  void *v2;
  void *v3;
  void *v4;

  switch(a1)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012341A8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF49F0();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012341C8);
      v2 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v2);
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "size_t CRLGLDataBufferDataTypeSize(CRLGLDataBufferDataType)"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 100, 0, "Unknown CRLGLDataBufferDataType!");

      result = 0;
      break;
    case 1:
    case 2:
      result = 1;
      break;
    case 3:
    case 4:
      result = 2;
      break;
    case 5:
      result = 4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_1000B3900(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B3930(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

float sub_1000B3960(_BYTE *a1, uint64_t a2, int a3, float a4)
{
  float v4;
  void *v5;
  void *v6;
  void *v7;
  float v8;
  int v9;
  float v10;
  float v11;

  v4 = -1.0;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012341E8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF4A70();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234208);
      v5 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "GLfloat CRLGLDataBufferGLfloatWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL)"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 129, 0, "Unknown data type!");

      return v4;
    case 1:
      v8 = (float)(char)*a1;
      v9 = 1123942400;
      goto LABEL_13;
    case 2:
      LOBYTE(a4) = *a1;
      v8 = (float)LODWORD(a4);
      v9 = 1132396544;
LABEL_13:
      v10 = *(float *)&v9;
      goto LABEL_16;
    case 3:
      v8 = (float)*(__int16 *)a1;
      v10 = 32767.0;
      goto LABEL_16;
    case 4:
      LOWORD(a4) = *(_WORD *)a1;
      v8 = (float)LODWORD(a4);
      v10 = 65535.0;
LABEL_16:
      v11 = v8 / v10;
      if (a3)
        v4 = v11;
      else
        v4 = v8;
      break;
    case 5:
      v4 = *(float *)a1;
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_1000B3B40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B3B70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B3BA0(_BYTE *a1, uint64_t a2, int a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;

  v18 = v5;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234228);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF4AF0();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234248);
      v12 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGLDataBufferSetGLfloatWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL, GLfloat)", v9, v8, v7, v6, v18, v4, v10, v11));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 157, 0, "Unknown data type!");

      return;
    case 1:
      v15 = 127.0;
      goto LABEL_13;
    case 2:
      v15 = 255.0;
LABEL_13:
      if (a3)
        a4 = a4 * v15;
      *a1 = llroundf(a4);
      return;
    case 3:
      v16 = 32767.0;
      goto LABEL_18;
    case 4:
      v16 = 65535.0;
LABEL_18:
      v17 = a4 * v16;
      if (a3)
        a4 = v17;
      *(_WORD *)a1 = llroundf(a4);
      break;
    case 5:
      *(float *)a1 = a4;
      break;
    default:
      return;
  }
}

void sub_1000B3D6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B3D9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

float sub_1000B3DCC(_BYTE *a1, uint64_t a2, int a3, float a4)
{
  float v4;
  void *v5;
  void *v6;
  void *v7;
  float v8;
  float v9;

  v4 = 0.0;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234268);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF4B70();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234288);
      v5 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLGLPoint2D CRLGLDataBufferGLPoint2DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL)"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 181, 0, "Unknown data type!");

      break;
    case 1:
      if (a3)
        v4 = (float)(char)*a1 / 127.0;
      else
        v4 = (float)(char)*a1;
      break;
    case 2:
      LOBYTE(a4) = *a1;
      v8 = (float)LODWORD(a4);
      if (a3)
        v4 = v8 / 255.0;
      else
        v4 = v8;
      break;
    case 3:
      if (a3)
        v4 = (float)*(__int16 *)a1 / 32767.0;
      else
        v4 = (float)*(__int16 *)a1;
      break;
    case 4:
      LOWORD(a4) = *(_WORD *)a1;
      v9 = (float)LODWORD(a4);
      if (a3)
        v4 = v9 / 65535.0;
      else
        v4 = v9;
      break;
    case 5:
      v4 = *(float *)a1;
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_1000B4000(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B4030(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B4060(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  unsigned __int16 v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  uint64_t v26;

  v26 = v6;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012342A8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF4BF0();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012342C8);
      v13 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGLDataBufferSetGLPoint2DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL, CRLGLPoint2D)", v10, v9, v8, v7, v26, v5, v11, v12));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 209, 0, "Unknown data type!");

      return;
    case 1:
      if (a3)
        a4 = a4 * 127.0;
      v16 = llroundf(a4);
      v17 = a5 * 127.0;
      if (!a3)
        v17 = a5;
      v18 = v16 | (llroundf(v17) << 8);
      goto LABEL_21;
    case 2:
      if (a3)
        a4 = a4 * 255.0;
      v19 = llroundf(a4);
      v20 = a5 * 255.0;
      if (!a3)
        v20 = a5;
      v18 = v19 | (llroundf(v20) << 8);
LABEL_21:
      *(_WORD *)a1 = v18;
      return;
    case 3:
      if (a3)
        a4 = a4 * 32767.0;
      v21 = llroundf(a4);
      v22 = a5 * 32767.0;
      if (!a3)
        v22 = a5;
      v23 = v21 | ((unsigned __int16)llroundf(v22) << 16);
      goto LABEL_32;
    case 4:
      if (a3)
        a4 = a4 * 65535.0;
      v24 = llroundf(a4);
      v25 = a5 * 65535.0;
      if (!a3)
        v25 = a5;
      v23 = v24 | (llroundf(v25) << 16);
LABEL_32:
      *(_DWORD *)a1 = v23;
      break;
    case 5:
      *(float *)a1 = a4;
      *(float *)(a1 + 4) = a5;
      break;
    default:
      return;
  }
}

void sub_1000B4290(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B42C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

float sub_1000B42F0(_BYTE *a1, uint64_t a2, int a3, float a4)
{
  float v4;
  void *v5;
  void *v6;
  void *v7;
  float v8;
  float v9;

  v4 = 0.0;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012342E8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF4C70();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234308);
      v5 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLGLPoint3D CRLGLDataBufferGLPoint3DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL)"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 233, 0, "Unknown data type!");

      break;
    case 1:
      if (a3)
        v4 = (float)(char)*a1 / 127.0;
      else
        v4 = (float)(char)*a1;
      break;
    case 2:
      LOBYTE(a4) = *a1;
      v8 = (float)LODWORD(a4);
      if (a3)
        v4 = v8 / 255.0;
      else
        v4 = v8;
      break;
    case 3:
      if (a3)
        v4 = (float)*(__int16 *)a1 / 32767.0;
      else
        v4 = (float)*(__int16 *)a1;
      break;
    case 4:
      LOWORD(a4) = *(_WORD *)a1;
      v9 = (float)LODWORD(a4);
      if (a3)
        v4 = v9 / 65535.0;
      else
        v4 = v9;
      break;
    case 5:
      v4 = *(float *)a1;
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_1000B4578(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B45A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B45D8(uint64_t a1, uint64_t a2, int a3, float a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  float v18;
  __int16 v19;
  float v20;
  char v21;
  __int16 v22;
  __int16 v23;
  float v24;
  __int16 v25;
  float v26;
  unsigned __int16 v27;
  float v28;
  unsigned __int16 v29;
  float v30;
  __int16 v31;
  int v32;
  unsigned int v33;
  float v34;
  unsigned int v35;
  float v36;
  uint64_t v37;

  v37 = v7;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234328);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF4CF0();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234348);
      v14 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGLDataBufferSetGLPoint3DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL, CRLGLPoint3D)", v11, v10, v9, v8, v37, v6, v12, v13));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 261, 0, "Unknown data type!");

      return;
    case 1:
      if (a3)
        a4 = a4 * 127.0;
      v17 = llroundf(a4);
      v18 = a5 * 127.0;
      if (!a3)
        v18 = a5;
      v19 = llroundf(v18);
      v20 = a6 * 127.0;
      if (!a3)
        v20 = a6;
      v21 = llroundf(v20);
      v22 = v17 | (unsigned __int16)(v19 << 8);
      goto LABEL_25;
    case 2:
      if (a3)
        a4 = a4 * 255.0;
      v23 = llroundf(a4);
      v24 = a5 * 255.0;
      if (!a3)
        v24 = a5;
      v25 = llroundf(v24);
      v26 = a6 * 255.0;
      if (!a3)
        v26 = a6;
      v21 = llroundf(v26);
      v22 = v23 | (v25 << 8);
LABEL_25:
      *(_BYTE *)(a1 + 2) = v21;
      *(_WORD *)a1 = v22;
      return;
    case 3:
      if (a3)
        a4 = a4 * 32767.0;
      v27 = llroundf(a4);
      v28 = a5 * 32767.0;
      if (!a3)
        v28 = a5;
      v29 = llroundf(v28);
      v30 = a6 * 32767.0;
      if (!a3)
        v30 = a6;
      v31 = llroundf(v30);
      v32 = v27 | (v29 << 16);
      goto LABEL_40;
    case 4:
      if (a3)
        a4 = a4 * 65535.0;
      v33 = llroundf(a4);
      v34 = a5 * 65535.0;
      if (!a3)
        v34 = a5;
      v35 = llroundf(v34);
      v36 = a6 * 65535.0;
      if (!a3)
        v36 = a6;
      v31 = llroundf(v36);
      v32 = v33 | (v35 << 16);
LABEL_40:
      *(_DWORD *)a1 = v32;
      *(_WORD *)(a1 + 4) = v31;
      break;
    case 5:
      *(float *)a1 = a4;
      *(float *)(a1 + 4) = a5;
      *(float *)(a1 + 8) = a6;
      break;
    default:
      return;
  }
}

void sub_1000B4844(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B4874(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

int8x16_t sub_1000B48A4(int16x4_t *a1, uint64_t a2, unsigned int a3)
{
  int8x16_t result;
  void *v4;
  void *v5;
  void *v6;
  float32x4_t v7;
  unsigned int v8;

  result = (int8x16_t)xmmword_100EEC85C;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234368);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF4D70();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234388);
      v4 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLGLPoint4D CRLGLDataBufferGLPoint4DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL)"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 285, 0, "Unknown data type!");

      return (int8x16_t)xmmword_100EEC85C;
    case 1:
      result.i32[0] = a1->i32[0];
      v7 = vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)result.i8)));
      v8 = 1123942400;
      goto LABEL_15;
    case 2:
      result.i32[0] = a1->i32[0];
      v7 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)result.i8)));
      v8 = 1132396544;
      goto LABEL_15;
    case 3:
      v7 = vcvtq_f32_s32(vmovl_s16(*a1));
      v8 = 1191181824;
      goto LABEL_15;
    case 4:
      v7 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*a1));
      v8 = 1199570688;
LABEL_15:
      result = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(a3)), 0x1FuLL)), (int8x16_t)vdivq_f32(v7, (float32x4_t)vdupq_n_s32(v8)), (int8x16_t)v7);
      break;
    case 5:
      result = *(int8x16_t *)a1->i8;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000B4AC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B4AF0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B4B20(uint64_t a1, uint64_t a2, int a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  float v22;
  unsigned __int8 v23;
  float v24;
  unsigned __int8 v25;
  float v26;
  unsigned int v27;
  float v28;
  unsigned int v29;
  float v30;
  unsigned int v31;
  float v32;
  unsigned __int16 v33;
  float v34;
  unsigned __int16 v35;
  float v36;
  unsigned __int16 v37;
  float v38;
  unint64_t v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;

  v43 = v11;
  switch(a2)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012343A8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF4DF0();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_1012343C8);
      v18 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGLDataBufferSetGLPoint4DWithDataType(GLubyte *, CRLGLDataBufferDataType, BOOL, CRLGLPoint4D)", v15, v14, v13, v12, v43, v10, v16, v17));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGLDataBuffer.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v19, v20, 313, 0, "Unknown data type!");

      break;
    case 1:
      if (a3)
        a4 = a4 * 127.0;
      v21 = llroundf(a4);
      v22 = a5 * 127.0;
      if (!a3)
        v22 = a5;
      v23 = llroundf(v22);
      v24 = a6 * 127.0;
      if (!a3)
        v24 = a6;
      v25 = llroundf(v24);
      v26 = a7 * 127.0;
      if (!a3)
        v26 = a7;
      *(_DWORD *)a1 = (v25 << 16) | (llroundf(v26) << 24) | (v23 << 8) | v21;
      break;
    case 2:
      if (a3)
        a4 = a4 * 255.0;
      v27 = llroundf(a4);
      v28 = a5 * 255.0;
      if (!a3)
        v28 = a5;
      v29 = llroundf(v28);
      v30 = a6 * 255.0;
      if (!a3)
        v30 = a6;
      v31 = llroundf(v30);
      v32 = a7 * 255.0;
      if (!a3)
        v32 = a7;
      *(_DWORD *)a1 = (v31 << 16) | (llroundf(v32) << 24) | (v29 << 8) | v27;
      break;
    case 3:
      if (a3)
        a4 = a4 * 32767.0;
      v33 = llroundf(a4);
      v34 = a5 * 32767.0;
      if (!a3)
        v34 = a5;
      v35 = llroundf(v34);
      v36 = a6 * 32767.0;
      if (!a3)
        v36 = a6;
      v37 = llroundf(v36);
      v38 = a7 * 32767.0;
      if (!a3)
        v38 = a7;
      LODWORD(v9) = llroundf(v38);
      *(_QWORD *)a1 = ((unint64_t)v37 << 32) | (v9 << 48) | ((unint64_t)v35 << 16) | v33;
      break;
    case 4:
      v39 = (unint64_t)"LPKInputFilterI15CRLPKInputPointS0_E";
      if (a3)
        a4 = a4 * 65535.0;
      LODWORD(v39) = llroundf(a4);
      v40 = a5 * 65535.0;
      if (!a3)
        v40 = a5;
      LODWORD(v7) = llroundf(v40);
      v41 = a6 * 65535.0;
      if (!a3)
        v41 = a6;
      LODWORD(v8) = llroundf(v41);
      v42 = a7 * 65535.0;
      if (!a3)
        v42 = a7;
      LODWORD(v9) = llroundf(v42);
      *(_QWORD *)a1 = (v8 << 32) | (v9 << 48) | (v7 << 16) | v39;
      break;
    case 5:
      *(float *)a1 = a4;
      *(float *)(a1 + 4) = a5;
      *(float *)(a1 + 8) = a6;
      *(float *)(a1 + 12) = a7;
      break;
    default:
      return;
  }
}

void sub_1000B4DF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B4E24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B4E54(uint64_t a1, uint64_t a2, float a3)
{
  sub_1000B3BA0((_BYTE *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40) * a2), *(_QWORD *)a1, *(unsigned __int8 *)(a1 + 16), a3);
}

void sub_1000B4E74(uint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_1000B4060(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40) * a2, *(_QWORD *)a1, *(unsigned __int8 *)(a1 + 16), a3, a4);
}

void sub_1000B5448(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B5478(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B5614(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_1000B5DB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B5DE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B5E14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B5E44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B5E74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B5EA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B6C6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B6C9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B6E80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B6EB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B75AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B75DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B760C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B763C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B7818(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B7848(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B7EE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B7F18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B7F48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B7F78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B85AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B85DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B8850(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B8880(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B92FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B932C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B9938(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B9968(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B9FB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000B9FE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BA314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BA32C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000BA33C(uint64_t a1)
{

}

void sub_1000BA344(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000BA4D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000BA558;
  v4[3] = &unk_1012348C8;
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v2, "enumerateSmartFieldsWithAttributeKind:inRange:usingBlock:", v3, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v4);

}

void sub_1000BA558(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;

  v9 = 0;
  v3 = a2;
  v5 = (void *)objc_opt_class(CRLWPSmartFieldAccessibility, v4);
  v6 = __CRLAccessibilityCastAsSafeCategory(v5, (uint64_t)v3, 1, &v9);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (v9)
    abort();
  v8 = (void *)v7;

  if (v8)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000BAACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BAAE4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crlaxTarget"));
  v2 = objc_msgSend(v5, "textRangeForParagraphAtIndex:", *(_QWORD *)(a1 + 48));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v4;

}

void sub_1000BABC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000BABE0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crlaxTarget"));
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (unsigned __int16)objc_msgSend(v2, "characterAtIndex:", *(_QWORD *)(a1 + 48));

}

void sub_1000BB46C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BB49C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BB4CC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSMapTable), "initWithKeyOptions:valueOptions:capacity:", 517, 512, 0);
  v2 = (void *)qword_101414D68;
  qword_101414D68 = (uint64_t)v1;

}

void sub_1000BB504(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BB534(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BB85C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BB88C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BB8BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BB8EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BBBD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BBC04(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BBC34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BBC64(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1000BBFE0(char *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  for (result = 0xCBF29CE484222325; a2; --a2)
  {
    v4 = *a1++;
    result = 0x100000001B3 * (result ^ v4);
  }
  return result;
}

uint64_t sub_1000BC018(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  for (; a2; --a2)
  {
    v3 = *a1++;
    a3 = 0x100000001B3 * (a3 ^ v3);
  }
  return a3;
}

uint64_t sub_1000BC3B8(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  unsigned int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  v5 = a1;
  v6 = v5;
  if (a2 < 0 || a3 < 0 || (v7 = v5[1], v7 <= a2) || v5[2] <= a3)
  {
    v9 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101234B60);
    v10 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    {
      v15 = v6[1];
      v16 = v6[2];
      *(_DWORD *)buf = 67110914;
      v18 = v9;
      v19 = 2082;
      v20 = "CRLInstantAlphaPixel getPixel(CRLInstantAlphaImage *__strong, NSInteger, NSInteger)";
      v21 = 2082;
      v22 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaImage.h";
      v23 = 1024;
      v24 = 36;
      v25 = 2048;
      v26 = a2;
      v27 = 2048;
      v28 = a3;
      v29 = 2048;
      v30 = v15;
      v31 = 2048;
      v32 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for get pixel in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
    }
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101234B80);
    v11 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE87A4(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLInstantAlphaPixel getPixel(CRLInstantAlphaImage *__strong, NSInteger, NSInteger)"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaImage.h"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 36, 0, "bad request for get pixel in IA: (%li, %li) for image of size (%li, %li)", a2, a3, v6[1], v6[2]);

    v8 = 0;
  }
  else
  {
    v8 = *(unsigned int *)(v5[3] + 4 * (a2 + v7 * a3));
  }

  return v8;
}

void sub_1000BC64C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unsigned int v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  char *v28;
  uint8_t buf[4];
  unsigned int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;

  if (*(uint64_t *)(*(_QWORD *)(a1 + 32) + 8) >= 1)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(void **)(a1 + 40);
      if (!v5)
        goto LABEL_15;
      v6 = v5;
      v7 = v6;
      if (a2 < 0 || v6[1] <= v4 || v6[2] <= a2)
        break;
      v8 = *(unsigned __int8 *)(v6[4] + v6[3] * a2 + ((unint64_t)v4 >> 3));

      if (((v8 << (v4 & 7)) & 0x80) == 0)
        goto LABEL_15;
      v9 = *(void **)(a1 + 48);
      v10 = v4;
      v11 = a2;
      v12 = 1;
LABEL_29:
      sub_1000BCA78(v9, v10, v11, v12);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) <= ++v4)
        return;
    }
    v13 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101234BA0);
    v14 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    {
      v25 = v7[1];
      v26 = v7[2];
      *(_DWORD *)buf = 67110914;
      v30 = v13;
      v31 = 2082;
      v32 = "NSInteger bitValue(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, const NSInteger, const NSInteger)";
      v33 = 2082;
      v34 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h";
      v35 = 1024;
      v36 = 52;
      v37 = 2048;
      v38 = v4;
      v39 = 2048;
      v40 = a2;
      v41 = 2048;
      v42 = v25;
      v43 = 2048;
      v44 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for bit value in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101234BC0);
    }
    v15 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    {
      v27 = v15;
      v28 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      *(_DWORD *)buf = 67109378;
      v30 = v13;
      v31 = 2114;
      v32 = v28;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSInteger bitValue(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, const NSInteger, const NSInteger)"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 52, 0, "bad request for bit value in IA: (%li, %li) for image of size (%li, %li)", v4, a2, v7[1], v7[2]);

LABEL_15:
    v18 = sub_1000BC3B8(*(void **)(a1 + 32), v4, a2);
    v19 = *(_DWORD *)(a1 + 64);
    v9 = *(void **)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 56);
    LODWORD(v21) = HIBYTE(v19) - HIBYTE(v18);
    if ((int)v21 >= 0)
      v21 = v21;
    else
      v21 = HIBYTE(v18) - HIBYTE(v19);
    if (v20 >= v21
      && ((LODWORD(v22) = BYTE1(v19) - BYTE1(v18), (int)v22 >= 0)
        ? (v22 = v22)
        : (v22 = BYTE1(v18) - BYTE1(v19)),
          v20 >= v22
       && ((LODWORD(v23) = BYTE2(v19) - BYTE2(v18), (int)v23 >= 0)
         ? (v23 = v23)
         : (v23 = BYTE2(v18) - BYTE2(v19)),
           v20 >= v23)))
    {
      LODWORD(v24) = *(_DWORD *)(a1 + 64) - v18;
      if ((int)v24 >= 0)
        v24 = v24;
      else
        v24 = -(int)v24;
      v12 = v20 >= v24;
    }
    else
    {
      v12 = 0;
    }
    v10 = v4;
    v11 = a2;
    goto LABEL_29;
  }
}

void sub_1000BCA78(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  unsigned int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;

  v7 = a1;
  v8 = v7;
  if ((a2 & 0x8000000000000000) != 0 || a3 < 0 || v7[1] <= (int64_t)a2 || v7[2] <= a3)
  {
    v12 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101234BE0);
    v13 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    {
      v17 = v8[1];
      v18 = v8[2];
      *(_DWORD *)buf = 67110914;
      v20 = v12;
      v21 = 2082;
      v22 = "void setBit(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, NSInteger, NSInteger, NSInteger)";
      v23 = 2082;
      v24 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h";
      v25 = 1024;
      v26 = 67;
      v27 = 2048;
      v28 = a2;
      v29 = 2048;
      v30 = a3;
      v31 = 2048;
      v32 = v17;
      v33 = 2048;
      v34 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad request for set bit value in IA: (%li, %li) for image of size (%li, %li)", buf, 0x4Au);
    }
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101234C00);
    v14 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE87A4(v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void setBit(CRLInstantAlphaBinaryBitmap * _Nonnull __strong, NSInteger, NSInteger, NSInteger)"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.h"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 67, 0, "bad request for set bit value in IA: (%li, %li) for image of size (%li, %li)", a2, a3, v8[1], v8[2]);

  }
  else
  {
    v9 = v7[4] + v7[3] * a3;
    v10 = *(unsigned __int8 *)(v9 + (a2 >> 3));
    v11 = v10 & (-129 >> (a2 & 7));
    if (a4)
      LOBYTE(v11) = v10 | (0x80u >> (a2 & 7));
    *(_BYTE *)(v9 + (a2 >> 3)) = v11;
  }

}

void sub_1000BD0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BD0E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000BD0F8(uint64_t a1)
{

}

void sub_1000BD100(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  id v9;
  void *v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  objc_class *v21;
  NSString *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void *v33;
  NSErrorUserInfoKey v34;
  void *v35;

  v9 = a3;
  v10 = v9;
  if (!a2 || v9)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("Can’t Remove Background"), 0, 0));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("The background can’t be removed from this image."), 0, 0));

    if (v10)
    {
      v34 = NSUnderlyingErrorKey;
      v35 = v10;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
    }
    else
    {
      v16 = 0;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError crl_errorWithDomain:code:alertTitle:alertMessage:userInfo:](NSError, "crl_errorWithDomain:code:alertTitle:alertMessage:userInfo:", CFSTR("com.apple.freeform"), v10 == 0, v13, v15, v16));
    if (v10)
    {
      if (qword_10147E368 != -1)
        dispatch_once(&qword_10147E368, &stru_101234AB8);
      v18 = off_1013D9068;
      if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_INFO))
      {
        v19 = v18;
        v21 = (objc_class *)objc_opt_class(v10, v20);
        v22 = NSStringFromClass(v21);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "domain"));
        v26 = 138544130;
        v27 = v23;
        v28 = 2114;
        v29 = v24;
        v30 = 2048;
        v31 = objc_msgSend(v10, "code");
        v32 = 2112;
        v33 = v10;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Remove background from image failed with error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v26, 0x2Au);

      }
    }
    else
    {
      if (qword_10147E368 != -1)
        dispatch_once(&qword_10147E368, &stru_101234AD8);
      v25 = off_1013D9068;
      if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_INFO))
      {
        LOWORD(v26) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Remove background from image failed and provided no error.", (uint8_t *)&v26, 2u);
      }
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setError:", v17);

  }
  else
  {
    v11 = a4 / (double)CGImageGetWidth(*(CGImageRef *)(a1 + 48));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setOffset:", v11, a5 / (double)CGImageGetHeight(*(CGImageRef *)(a1 + 48)));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setImage:", a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1000BD430(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_1000BD460(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_1000BD490(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_1000BD500(id a1)
{
  qword_101414D80 = (uint64_t)&vk_cgImageRemoveBackground;
}

void sub_1000BD514(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BD544(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BD574(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BD5A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BD5D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BD604(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BD674(id a1)
{
  CRLLogHelper *v1;
  void *v2;

  v1 = objc_alloc_init(CRLLogHelper);
  v2 = (void *)qword_101414D88;
  qword_101414D88 = (uint64_t)v1;

}

void sub_1000BD864(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLPerformanceCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9090;
  off_1013D9090 = v2;

}

void sub_1000BD890(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLPerformanceCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9090;
  off_1013D9090 = v2;

}

void sub_1000BDD38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BDD68(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000BE900(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "p_teardownPlayerController");
}

void sub_1000BE908(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BE938(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000BF808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BF820(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "p_teardownPlayerControllerIfNeeded");
}

void sub_1000BF828(uint64_t a1)
{
  _QWORD v2[5];
  id v3;
  id v4;
  _QWORD *v5;
  _QWORD v6[3];
  CGImageRef v7;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2020000000;
  v7 = 0;
  v7 = CGImageRetain((CGImageRef)objc_msgSend(*(id *)(a1 + 32), "CGImageForSize:inContext:orContentsScaleProvider:", 0, *(_QWORD *)(a1 + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000BF900;
  v2[3] = &unk_101234D08;
  v2[4] = *(_QWORD *)(a1 + 48);
  v3 = *(id *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);

  _Block_object_dispose(v6, 8);
}

void sub_1000BF900(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (objc_msgSend(*(id *)(a1 + 32), "directlyManagesLayerContent"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "movieItem"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "posterImageAssetPayload"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "imageData"));

    if (v3 == v4)
      objc_msgSend(*(id *)(a1 + 48), "setContents:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
  }
  CGImageRelease(*(CGImageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
}

id sub_1000C018C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "p_setupPlayerControllerIfNecessary");
}

void sub_1000C0D0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  const char *v8;
  int v9;
  const char *v10;

  v3 = a2;
  if (qword_10147E5C8 != -1)
    dispatch_once(&qword_10147E5C8, &stru_101234D50);
  v4 = off_1013DB560;
  if (os_log_type_enabled((os_log_t)off_1013DB560, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(*(_QWORD *)(a1 + 32) + 224);
    v6 = v4;
    v7 = objc_msgSend(v5, "isPlaying");
    v8 = "not playing";
    if (v7)
      v8 = "playing";
    v9 = 136315138;
    v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "delay timer fired. playback in state %s", (uint8_t *)&v9, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 32), "p_invalidateHideControlsTimeoutTimer");
  objc_msgSend(*(id *)(a1 + 32), "p_hideControls");

}

void sub_1000C0E38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMoviePlaybackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB560;
  off_1013DB560 = v2;

}

void sub_1000C18F4(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  void *v4;
  _QWORD block[2];
  id (*v6)(uint64_t);
  void *v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "p_startOrStopLoopingStickerIfNecessary");
  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = v2[273];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "p_playButtonKnob"));
  objc_msgSend(v4, "setEnabled:", v3);

  objc_msgSend(*(id *)(a1 + 32), "p_updatePlayButtonVisibility");
  if (objc_msgSend(*(id *)(a1 + 32), "isSelected")
    && objc_msgSend(*(id *)(a1 + 32), "p_shouldPlayerControllerExistThroughoutSelection"))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    v6 = sub_1000C19D4;
    v7 = &unk_10122D110;
    v8 = *(_QWORD *)(a1 + 32);
    if (+[NSThread isMainThread](NSThread, "isMainThread"))
      v6((uint64_t)block);
    else
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id sub_1000C19D4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "hasBeenRemoved");
  if ((result & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "p_setupPlayerControllerIfNecessary");
    return objc_msgSend(*(id *)(a1 + 32), "p_startOrStopLoopingStickerIfNecessary");
  }
  return result;
}

void sub_1000C1A14(uint64_t a1)
{
  dispatch_semaphore_t v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  NSObject *v9;
  uint64_t v10;
  id v11;
  id v12;

  if ((objc_msgSend(*(id *)(a1 + 32), "hasBeenRemoved") & 1) == 0)
  {
    v2 = dispatch_semaphore_create(0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[AVAsset crl_playableKeysWithKeys:](AVAsset, "crl_playableKeysWithKeys:", &off_1012CABA0));
    v4 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000C1B04;
    v8[3] = &unk_101234DC8;
    v5 = v2;
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v9 = v5;
    v10 = v6;
    v11 = v7;
    v12 = *(id *)(a1 + 48);
    objc_msgSend(v4, "loadValuesAsynchronouslyForKeys:completionHandler:", v3, v8);
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);

  }
}

void sub_1000C1B04(uint64_t a1)
{
  __CFRunLoop *Main;
  void *v3;
  _QWORD block[5];
  id v5;
  id v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  Main = CFRunLoopGetMain();
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000C1BBC;
  block[3] = &unk_101234DA0;
  v3 = *(void **)(a1 + 48);
  block[4] = *(_QWORD *)(a1 + 40);
  block[1] = 3221225472;
  v5 = v3;
  v6 = *(id *)(a1 + 56);
  CFRunLoopPerformBlock(Main, kCFRunLoopCommonModes, block);
  CFRunLoopWakeUp(Main);

}

uint64_t sub_1000C1BBC(uint64_t a1)
{
  uint64_t result;
  id v3;
  unsigned __int8 v4;
  uint64_t v5;
  void *v6;

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "hasBeenRemoved");
  if ((result & 1) == 0)
  {
    v3 = objc_msgSend(*(id *)(a1 + 40), "statusOfValueForKey:error:", CFSTR("playable"), 0);
    if (v3 != (id)4)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 272) = 1;
      if (v3 == (id)2)
        v4 = objc_msgSend(*(id *)(a1 + 40), "crl_isPlayable");
      else
        v4 = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 273) = v4;
    }
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 264);
    if (v6 == *(void **)(a1 + 40))
    {
      *(_QWORD *)(v5 + 264) = 0;

    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  return result;
}

void sub_1000C233C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interactiveCanvasController"));
  objc_msgSend(v2, "presentError:completionHandler:", *(_QWORD *)(a1 + 40), 0);

}

void sub_1000C2ECC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C2EFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C2F2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C2F5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C2F8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C2FBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C2FEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C301C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C304C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMoviePlaybackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB560;
  off_1013DB560 = v2;

}

void sub_1000C31D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C3208(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C36A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C36D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C3704(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMoviePlaybackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB560;
  off_1013DB560 = v2;

}

void sub_1000C3B78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C3BA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C3FE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4010(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4040(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id from;
  id location;

  v3 = a2;
  v4 = v3;
  if (v3 && objc_msgSend(v3, "needsDownload"))
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    objc_initWeak(&from, v4);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = _NSConcreteStackBlock;
    v7 = 3221225472;
    v8 = sub_1000C4160;
    v9 = &unk_101235030;
    objc_copyWeak(&v10, &location);
    objc_copyWeak(&v11, &from);
    objc_msgSend(v4, "addDownloadObserverWithIdentifier:options:handler:", v5, 2, &v6);
    objc_msgSend(v4, "downloadIfNeeded", v6, v7, v8, v9);
    objc_destroyWeak(&v11);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);
  }

}

void sub_1000C4130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C4160(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "p_handleAssetPreparationCompletionForAsset:", v2);

}

void sub_1000C48A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C48D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4BB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4BE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4C18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4C48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4F38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4F68(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4F98(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C4FC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C52F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5308(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000C5318(uint64_t a1)
{

}

void sub_1000C5320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[UIColor secondaryLabelColor](UIColor, "secondaryLabelColor"));
  v2 = objc_claimAutoreleasedReturnValue(+[CRLColor colorWithUIColor:](CRLColor, "colorWithUIColor:", v5));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000C5AF0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C5B20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C5B50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C5B80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C5BB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C5BE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000C5D6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_close");
}

void sub_1000C62F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C6328(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C6358(uint64_t a1, char a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  objc_class *v16;
  NSString *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  dispatch_data_t concat;
  uint64_t v23;
  void *v24;
  NSObject *v25;

  v7 = a3;
  v8 = a4;
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v10 + 88))
  {
    if (v8)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101235368);
      v11 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF6344(v11, v9);
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101235388);
      v12 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _resetStreamReadChannelIfNeededForOffset:length:]_block_invoke"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"));
      v16 = (objc_class *)objc_opt_class(v9, v15);
      v17 = NSStringFromClass(v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "domain"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 194, 0, "Error reading from filter CRLStreamReadChannel: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v18, v19, objc_msgSend(v9, "code"), v9);

      a2 = 1;
    }
    else if (v7)
    {
      *(_QWORD *)(v10 + 112) += dispatch_data_get_size(v7);
      v20 = *(_QWORD *)(a1 + 32);
      v21 = *(NSObject **)(v20 + 120);
      if (v21)
      {
        concat = dispatch_data_create_concat(v21, v7);
        v23 = *(_QWORD *)(a1 + 32);
        v24 = *(void **)(v23 + 120);
        *(_QWORD *)(v23 + 120) = concat;
      }
      else
      {
        v25 = v7;
        v24 = *(void **)(v20 + 120);
        *(_QWORD *)(v20 + 120) = v25;
      }

    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = a2;
  }

}

void sub_1000C6570(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C65A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C668C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 48))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](NSThread, "currentThread"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "threadDictionary"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("CRLBufferedReadChannelInvokingHandler"));

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](NSThread, "currentThread"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "threadDictionary"));
    objc_msgSend(v5, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("CRLBufferedReadChannelInvokingHandler"));

  }
  else
  {
    dispatch_suspend(*(dispatch_object_t *)(v2 + 8));
    objc_msgSend(*(id *)(a1 + 32), "_readFromOffset:length:handler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
  }
}

void sub_1000C69E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C6A00(_QWORD *a1, int a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  void *v9;
  uint64_t v10;
  size_t size;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  objc_class *v20;
  NSString *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  CKRecordID v51;
  Swift::String v52;
  uint8_t buf[4];
  unsigned int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;

  v7 = a3;
  v8 = a4;
  v9 = v8;
  v10 = a1[4];
  if (*(_QWORD *)(v10 + 48))
    goto LABEL_50;
  if (*(_QWORD *)(v10 + 80))
  {
    if (!v8)
      goto LABEL_4;
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012353F8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF6558();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101235418);
    v12 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 281, 0, "The source handler for the stream read channel should not be nil");

    if (!v9)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError crl_fileReadUnknownErrorWithUserInfo:](NSError, "crl_fileReadUnknownErrorWithUserInfo:", 0));
      if (!v9)
      {
LABEL_4:
        if (v7)
          size = dispatch_data_get_size(v7);
        else
          size = 0;
        *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += size;
        if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) > a1[7])
        {
          v28 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_101235478);
          v29 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            v39 = a1[7];
            v40 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
            *(_DWORD *)buf = 67110402;
            v54 = v28;
            v55 = 2082;
            v56 = "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke";
            v57 = 2082;
            v58 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m";
            v59 = 1024;
            v60 = 298;
            v61 = 2048;
            v62 = v40;
            v63 = 2048;
            v64 = v39;
            _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Received more data than requested: %zu instead of %zu", buf, 0x36u);
          }
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_101235498);
          v30 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            sub_100DE7468(v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke"));
          v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v31, v32, 298, 0, "Received more data than requested: %zu instead of %zu", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24), a1[7]);

        }
        if (a2)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) < a1[7];
          if (v7)
            goto LABEL_41;
        }
        else
        {
          v33 = 0;
          if (v7)
            goto LABEL_41;
        }
        if (!v33)
        {
LABEL_43:
          if (v33)
          {
            v35 = a1[4];
            v36 = *(void **)(v35 + 80);
            *(_QWORD *)(v35 + 80) = 0;

          }
          if (a2)
          {
            *(_QWORD *)(a1[4] + 32) += *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
            v37 = (_QWORD *)a1[4];
            v38 = v37[5];
            if (v38 != -1)
            {
              v37[5] = v38 - *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
              v37 = (_QWORD *)a1[4];
            }
            objc_msgSend(v37, "_readFromOffset:length:handler:", a1[8], a1[9], a1[5]);
          }
          v9 = 0;
          goto LABEL_50;
        }
LABEL_41:
        v34 = *(_QWORD *)(a1[4] + 80);
        if (!v34)
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_1012354B8);
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            sub_100DF6408();
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_1012354D8);
          v41 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            sub_100DE7468(v41);
          sub_1001BC7E8((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v42, v43, v44, v45, v46, v47, v48, (uint64_t)"-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke");
          v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke"));
          v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v49, v50, 303, 1, "invalid nil value for '%{public}s'", "self->_streamReadChannelSourceHandler", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m", 303, "self->_streamReadChannelSourceHandler");

          SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v51, v52);
          abort();
        }
        (*(void (**)(uint64_t, _BOOL8, NSObject *, _QWORD))(v34 + 16))(v34, v33, v7, 0);
        goto LABEL_43;
      }
    }
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235438);
  v15 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DF6494(v15, v9);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235458);
  v16 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DE7468(v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m"));
  v20 = (objc_class *)objc_opt_class(v9, v19);
  v21 = NSStringFromClass(v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "domain"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 289, 0, "Error reading from source CRLReadChannel: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v22, v23, objc_msgSend(v9, "code"), v9);

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](NSThread, "currentThread"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "threadDictionary"));
  objc_msgSend(v25, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("CRLBufferedReadChannelInvokingHandler"));

  (*(void (**)(void))(a1[5] + 16))();
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](NSThread, "currentThread"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "threadDictionary"));
  objc_msgSend(v27, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("CRLBufferedReadChannelInvokingHandler"));

  objc_storeStrong((id *)(a1[4] + 48), v9);
  dispatch_resume(*(dispatch_object_t *)(a1[4] + 8));
LABEL_50:

}

void sub_1000C71A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C71D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C7204(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C7234(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C7264(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C7294(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C72C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C72F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C75A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C75D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C782C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C785C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C7ACC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C7AFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C7D78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C7DA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CGPath *sub_1000C7FE8(int a1, int a2, double a3, double a4, double a5, double a6, long double a7, double a8, double a9)
{
  double v16;
  double v17;
  __double2 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  CGPath *Mutable;
  __int128 v40;
  double v42;
  double v44;
  double angle;
  CGAffineTransform v46;
  CGAffineTransform v47;
  CGAffineTransform m;

  v16 = (a3 - a8) * 0.5;
  v17 = (a4 - a9) * 0.5;
  angle = fmod(a7, 360.0) * 3.14159265 / 180.0;
  v18 = __sincos_stret(angle);
  v19 = v18.__sinval * v17 + v18.__cosval * v16;
  v20 = v18.__cosval * v17 - v18.__sinval * v16;
  v21 = fabs(a5);
  v22 = fabs(a6);
  v23 = a5 * a5;
  v24 = a6 * a6;
  v25 = v19 * v19 / (a5 * a5) + v20 * v20 / (a6 * a6);
  if (v25 > 1.0)
  {
    v26 = sqrt(v25);
    v21 = v21 * v26;
    v22 = v22 * v26;
    v23 = v21 * v21;
    v24 = v22 * v22;
  }
  v27 = (v23 * v24 - v23 * (v20 * v20) - v24 * (v19 * v19)) / (v19 * v19 * v24 + v23 * (v20 * v20));
  if (v27 < 0.0)
    v27 = 0.0;
  v28 = sqrt(v27);
  if (a1 == a2)
    v28 = -v28;
  v29 = v20 * v21 / v22 * v28;
  v30 = -(v22 * v19) / v21 * v28;
  v42 = (a4 + a9) * 0.5 + v18.__cosval * v30 + v18.__sinval * v29;
  v44 = (a3 + a8) * 0.5 + v30 * -v18.__sinval + v18.__cosval * v29;
  v31 = (v20 - v30) / v22;
  v32 = (-v19 - v29) / v21;
  v33 = (-v20 - v30) / v22;
  v34 = acos((v19 - v29) / v21 / sqrt(v31 * v31 + (v19 - v29) / v21 * ((v19 - v29) / v21)));
  if (v31 < 0.0)
    v34 = -v34;
  v35 = v34 * 180.0 / 3.14159265;
  v36 = acos(v32 / sqrt(v33 * v33 + v32 * v32));
  if (v33 < 0.0)
    v36 = -v36;
  v37 = fmod(v36 * 180.0 / 3.14159265, 360.0);
  v38 = fmod(v35, 360.0);
  Mutable = CGPathCreateMutable();
  v40 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&m.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&m.c = v40;
  *(_OWORD *)&m.tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_OWORD *)&v47.a = *(_OWORD *)&m.a;
  *(_OWORD *)&v47.c = v40;
  *(_OWORD *)&v47.tx = *(_OWORD *)&m.tx;
  CGAffineTransformTranslate(&m, &v47, v44, v42);
  v46 = m;
  CGAffineTransformRotate(&v47, &v46, angle);
  m = v47;
  v46 = v47;
  CGAffineTransformScale(&v47, &v46, 1.0, v22 / v21);
  m = v47;
  v46 = v47;
  CGAffineTransformTranslate(&v47, &v46, -v44, -v42);
  m = v47;
  CGPathAddArc(Mutable, &m, v44, v42, v21, v38 * 3.14159265 / 180.0, v37 * 3.14159265 / 180.0, a2 != 1);
  return Mutable;
}

CGPath *sub_1000C8308(const CGPath *a1, const CGPath *a2, uint64_t a3, uint64_t a4)
{
  CGPath *MutableCopy;
  CGFloat x[6];

  MutableCopy = CGPathCreateMutableCopy(a1);
  if (a3 < a4)
  {
    do
    {
      switch(sub_100313A20(a2, a3, x))
      {
        case 0u:
          CGPathMoveToPoint(MutableCopy, 0, x[0], x[1]);
          break;
        case 1u:
          CGPathAddLineToPoint(MutableCopy, 0, x[0], x[0]);
          break;
        case 3u:
          CGPathAddCurveToPoint(MutableCopy, 0, x[0], x[1], x[2], x[3], x[4], x[5]);
          break;
        case 4u:
          CGPathCloseSubpath(MutableCopy);
          break;
        default:
          break;
      }
      ++a3;
    }
    while (a4 != a3);
  }
  return MutableCopy;
}

CGPath *sub_1000C8414(const CGPath *a1, const CGAffineTransform *a2)
{
  CGPath *Mutable;

  Mutable = CGPathCreateMutable();
  CGPathAddPath(Mutable, a2, a1);
  return Mutable;
}

void sub_1000C8454(double *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  float v13;
  float v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v13 = a8 * a9;
  v14 = fmodf(v13, 2.0);
  if (a3 >= 1)
  {
    v15 = (float)(v14 * 0.5);
    v16 = (double *)(a2 + 8);
    do
    {
      v17 = *(v16 - 1);
      v18 = *v16;
      if (a1)
      {
        v19 = a1[4] + v18 * a1[2] + *a1 * v17;
        v18 = a1[5] + v18 * a1[3] + a1[1] * v17;
        v17 = v19;
      }
      *(v16 - 1) = sub_1000630F8(v17, v18, a9) + v15;
      *v16 = v20 + v15;
      v16 += 2;
      --a3;
    }
    while (a3);
  }
}

CGPath *sub_1000C8504(double *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  double v14;
  double v15;
  double v16;
  CGPath *Mutable;
  uint64_t i;
  CGFloat v19;
  CGFloat v20;
  _QWORD v22[7];
  double MaxY;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  v22[0] = CGRectGetMinX(*(CGRect *)&a2);
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  v22[1] = CGRectGetMinY(v24);
  v25.origin.x = a2;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  v22[2] = CGRectGetMaxX(v25);
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  v22[3] = CGRectGetMinY(v26);
  v27.origin.x = a2;
  v27.origin.y = a3;
  v27.size.width = a4;
  v27.size.height = a5;
  v22[4] = CGRectGetMaxX(v27);
  v28.origin.x = a2;
  v28.origin.y = a3;
  v28.size.width = a4;
  v28.size.height = a5;
  v22[5] = CGRectGetMaxY(v28);
  v29.origin.x = a2;
  v29.origin.y = a3;
  v29.size.width = a4;
  v29.size.height = a5;
  v22[6] = CGRectGetMinX(v29);
  v30.origin.x = a2;
  v30.origin.y = a3;
  v30.size.width = a4;
  v30.size.height = a5;
  MaxY = CGRectGetMaxY(v30);
  sub_1000C8454(a1, (uint64_t)v22, 4, MaxY, v14, v15, v16, a6, a7);
  Mutable = CGPathCreateMutable();
  for (i = 0; i != 8; i += 2)
  {
    v19 = *(double *)&v22[i];
    v20 = *(double *)&v22[i + 1];
    if (i * 8)
      CGPathAddLineToPoint(Mutable, 0, v19, v20);
    else
      CGPathMoveToPoint(Mutable, 0, v19, v20);
  }
  CGPathCloseSubpath(Mutable);
  return Mutable;
}

uint64_t sub_1000C869C(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  BOOL v16;
  BOOL v17;

  v5 = (a3 - a2) * 3.0;
  v6 = -(v5 - (a4 - a3) * 3.0);
  v7 = a5 - v6 - v5 - a2;
  v8 = v7 * 3.0;
  v9 = v5 * (v7 * 3.0);
  v10 = 0.0;
  if (vabdd_f64(v6 * v6, v9) > (v6 * v6 + fabs(v9)) * 0.0001)
    v10 = v6 * v6 - v9;
  if (v10 < 0.0)
    return 0;
  v12 = 1.0;
  if (v6 < 0.0)
    v12 = -1.0;
  v13 = -(v6 + v12 * sqrt(v10));
  v14 = v8 * 0.0001;
  if (v13 < v8 * 0.9999 && v7 > 0.0 && v14 < v13 || (v11 = 0, v13 < v14) && v7 < 0.0 && v8 * 0.9999 < v13)
  {
    *a1 = v13 / v8;
    v11 = 1;
  }
  v15 = v13 * 0.0001;
  if (v5 < v13 * 0.9999 && (v13 > 0.0 ? (v16 = v15 < v5) : (v16 = 0), v16)
    || v5 < v15 && (v13 < 0.0 ? (v17 = v13 * 0.9999 < v5) : (v17 = 0), v17))
  {
    a1[v11++] = v5 / v13;
  }
  return v11;
}

void sub_1000C87AC(CGPathRef path, unsigned int a2, int a3, double a4, double a5)
{
  void *v6;
  void *v7;
  void *v8;
  void *v13;
  void *v14;
  void *v15;
  CKRecordID v16;
  Swift::String v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGPoint v23;
  _QWORD v24[6];
  CGPoint v25;
  CGPoint v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t info;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  CGPoint v43;
  CGPoint v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  if (a4 < 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101235620);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF6700();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101235640);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRect CRLPathBoundsIncludingStrokeWithParameters(CGPathRef, CGFloat, CGFloat, CGLineCap, CGLineJoin)"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 689, 0, "lineWidth should not be negative.");

    if (!CGPathIsEmpty(path))
      goto LABEL_23;
    goto LABEL_13;
  }
  if (CGPathIsEmpty(path))
  {
LABEL_13:
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101235660);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF6680();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101235680);
    v13 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRect CRLPathBoundsIncludingStrokeWithParameters(CGPathRef, CGFloat, CGFloat, CGLineCap, CGLineJoin)"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 694, 0, "Can not calculate the stroked bounds of an empty path.");

    return;
  }
  if (a4 == 0.0)
  {
LABEL_23:
    CGPathGetPathBoundingBox(path);
    return;
  }
  CGPathGetCurrentPoint(path);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v16, v17);
  v56 = 0u;
  v57 = 0;
  v55 = 0u;
  v54 = 0u;
  v18 = a4 * 0.5;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v43 = (CGPoint)0;
  v42 = 0u;
  v44 = CGPointZero;
  v23 = v44;
  v43 = v44;
  v40 = v19;
  v41 = v18;
  info = v20;
  v38 = v21;
  v39 = v22;
  LODWORD(v42) = a3;
  *((double *)&v42 + 1) = a5;
  CGPathApply(path, &info, (CGPathApplierFunction)sub_1000C8C4C);
  if (a2)
  {
    v27 = 0;
    v36 = 0;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v25 = v23;
    v26 = v23;
    v24[3] = v40;
    *(double *)&v24[4] = v18;
    v24[0] = info;
    v24[1] = v38;
    v24[2] = v39;
    v24[5] = a2;
    CGPathApply(path, v24, (CGPathApplierFunction)sub_1000C8DE8);
    sub_1000C8FA4((uint64_t)v24);
  }
}

void sub_1000C8B8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C8BBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C8BEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C8C1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C8C4C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  uint64_t v12;
  double *i;
  _OWORD *v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  if ((v4 - 1) >= 3)
  {
    if ((_DWORD)v4 == 4)
    {
      if (*(_DWORD *)(a1 + 88))
      {
        if (sub_10006010C(*(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 56), *(double *)(a1 + 64)) > 0.00000001)
        {
          v18 = a1 + 56;
          v17 = 1;
          sub_1000C94AC(a1, (int *)&v17);
        }
        v16 = *(_DWORD *)(a1 + 232);
        v18 = a1 + 240;
        v17 = v16;
        sub_1000C94AC(a1, (int *)&v17);
      }
      *(_DWORD *)(a1 + 88) = 0;
      v15 = *(_OWORD *)(a1 + 56);
    }
    else
    {
      if ((_DWORD)v4)
        return;
      *(_DWORD *)(a1 + 88) = 0;
      v14 = (_OWORD *)*((_QWORD *)a2 + 1);
      *(_OWORD *)(a1 + 56) = *v14;
      v15 = *v14;
    }
    *(_OWORD *)(a1 + 72) = v15;
  }
  else
  {
    if (*(_DWORD *)(a1 + 88))
      goto LABEL_9;
    v5 = 0;
    *(_DWORD *)(a1 + 232) = v4;
    v6 = dword_100EEC750[v4];
    v7 = v6 <= 1 ? 1 : v6;
    v8 = 16 * v7;
    do
    {
      *(_OWORD *)(a1 + 240 + v5) = *(_OWORD *)(*((_QWORD *)a2 + 1) + v5);
      v5 += 16;
    }
    while (v8 != v5);
    LODWORD(v4) = *a2;
    if (*a2 != 4)
    {
LABEL_9:
      v9 = dword_100EEC750[(int)v4];
      v10 = *(double *)(a1 + 72);
      v11 = *(double *)(a1 + 80);
      if (v9 <= 1)
        v12 = 1;
      else
        v12 = v9;
      for (i = (double *)(*((_QWORD *)a2 + 1) + 8); sub_10006010C(*(i - 1), *i, v10, v11) <= 0.00000001; i += 2)
      {
        if (!--v12)
          return;
      }
      sub_1000C94AC(a1, (int *)a2);
    }
  }
}

void sub_1000C8DE8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  _OWORD *v5;
  double v6;
  int v7;
  double v8;
  uint64_t v9;
  double *i;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a2;
  if ((v4 - 1) >= 3)
  {
    if ((_DWORD)v4 == 4)
    {
      *(_WORD *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 48);
    }
    else if (!(_DWORD)v4)
    {
      sub_1000C8FA4(a1);
      *(_WORD *)(a1 + 80) = 0;
      v11 = (_OWORD *)*((_QWORD *)a2 + 1);
      *(_OWORD *)(a1 + 64) = *v11;
      *(_OWORD *)(a1 + 48) = *v11;
    }
  }
  else
  {
    v5 = (_OWORD *)(a1 + 64);
    v6 = *(double *)(a1 + 64);
    *(_BYTE *)(a1 + 81) = 1;
    v7 = dword_100EEC750[v4];
    v8 = *(double *)(a1 + 72);
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    for (i = (double *)(*((_QWORD *)a2 + 1) + 8); sub_10006010C(*(i - 1), *i, v6, v8) <= 0.00000001; i += 2)
    {
      if (!--v9)
        return;
    }
    if (!*(_BYTE *)(a1 + 80))
    {
      *(_BYTE *)(a1 + 80) = 1;
      *(_DWORD *)(a1 + 84) = v4;
      *(_OWORD *)(a1 + 88) = *v5;
      v12 = (int)*a2;
      if ((_DWORD)v12 == 4)
      {
        LODWORD(v4) = 4;
      }
      else
      {
        v13 = 0;
        v14 = dword_100EEC750[v12];
        if (v14 <= 1)
          v14 = 1;
        v15 = 16 * v14;
        do
        {
          *(_OWORD *)(a1 + 104 + v13) = *(_OWORD *)(*((_QWORD *)a2 + 1) + v13);
          v13 += 16;
        }
        while (v15 != v13);
        LODWORD(v4) = *a2;
      }
    }
    *(_DWORD *)(a1 + 152) = v4;
    *(_OWORD *)(a1 + 160) = *v5;
    v16 = (int)*a2;
    v17 = dword_100EEC750[v16];
    if ((_DWORD)v16 != 4)
    {
      v18 = 0;
      if (v17 <= 1)
        v17 = 1;
      v19 = 16 * v17;
      do
      {
        *(_OWORD *)(a1 + 176 + v18) = *(_OWORD *)(*((_QWORD *)a2 + 1) + v18);
        v18 += 16;
      }
      while (v19 != v18);
      v17 = dword_100EEC750[*a2];
    }
    *v5 = *(_OWORD *)(*((_QWORD *)a2 + 1) + 16 * (v17 - 1));
  }
}

void sub_1000C8FA4(uint64_t a1)
{
  double v2;
  double v3;
  double *v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  double v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  double v60;
  double v61;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  CGFloat v73;
  double v74;
  CGFloat v75;
  double v76;
  CGFloat v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;

  if (!*(_BYTE *)(a1 + 80))
  {
    if (!*(_BYTE *)(a1 + 81))
      return;
    v37 = *(_DWORD *)(a1 + 40);
    if (v37 == 1)
    {
      v38 = *(double *)(a1 + 32);
    }
    else
    {
      if (v37 != 2)
        return;
      v38 = *(double *)(a1 + 32) * 1.41421356;
    }
    v83 = v38 + v38;
    v84 = *(double *)(a1 + 64);
    v85 = *(double *)(a1 + 72);
    goto LABEL_23;
  }
  v3 = *(double *)(a1 + 88);
  v2 = *(double *)(a1 + 96);
  v4 = (double *)(a1 + 160 + 16 * dword_100EEC750[*(int *)(a1 + 152)]);
  v6 = *v4;
  v5 = v4[1];
  v7 = *(_DWORD *)(a1 + 40);
  if (v7 == 1)
  {
    v93.origin.x = sub_10005FD98(*(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 32) + *(double *)(a1 + 32));
    v93.origin.y = v39;
    v93.size.width = v40;
    v93.size.height = v41;
    v92 = CGRectUnion(*(CGRect *)a1, v93);
    x = v92.origin.x;
    y = v92.origin.y;
    width = v92.size.width;
    height = v92.size.height;
    *(CGRect *)a1 = v92;
    v46 = sub_10005FD98(v6, v5, *(double *)(a1 + 32) + *(double *)(a1 + 32));
    v48 = v47;
    v50 = v49;
    v52 = v51;
    v53 = x;
    v54 = y;
    v55 = width;
    v56 = height;
LABEL_24:
    *(CGRect *)&v79 = CGRectUnion(*(CGRect *)&v53, *(CGRect *)&v46);
    goto LABEL_25;
  }
  if (v7 != 2)
    return;
  v8 = sub_1000C9C38(*(_DWORD *)(a1 + 84), (float64x2_t *)(a1 + 88), 0.0).f64[0];
  v10 = CGPointZero.x;
  v11 = CGPointZero.y;
  if (v8 == CGPointZero.x && v9 == v11)
  {
    v94.origin.x = sub_10005FD98(v3, v2, *(double *)(a1 + 32) * 1.41421356 + *(double *)(a1 + 32) * 1.41421356);
    v94.origin.y = v57;
    v94.size.width = v58;
    v94.size.height = v59;
    *(CGRect *)&v33 = CGRectUnion(*(CGRect *)a1, v94);
  }
  else
  {
    v90 = v6;
    v91 = v5;
    v13 = sub_1000603DC(v8, v9, *(double *)(a1 + 32));
    v15 = v14;
    v16 = sub_1000603B8(v3, v2, v13);
    v89 = v17;
    v18 = v17;
    v19 = sub_10006200C(1, v13, v15);
    v20 = sub_1000603D0(v16, v18, v19);
    v21 = sub_1000615D8(*(CGFloat *)a1, *(CGFloat *)(a1 + 8), *(CGFloat *)(a1 + 16), *(CGFloat *)(a1 + 24), v20);
    v23 = v22;
    v25 = v24;
    v26 = v11;
    v28 = v27;
    v29 = v19;
    v6 = v90;
    v5 = v91;
    v30 = sub_1000603B8(v16, v89, v29);
    v31 = v25;
    v10 = CGPointZero.x;
    v32 = v28;
    v11 = v26;
    v33 = sub_1000615D8(v21, v23, v31, v32, v30);
  }
  *(double *)a1 = v33;
  *(_QWORD *)(a1 + 8) = v34;
  *(_QWORD *)(a1 + 16) = v35;
  *(_QWORD *)(a1 + 24) = v36;
  v60 = sub_1000C9C38(*(_DWORD *)(a1 + 152), (float64x2_t *)(a1 + 160), 1.0).f64[0];
  if (v60 == v10 && v61 == v11)
  {
    v83 = *(double *)(a1 + 32) * 1.41421356 + *(double *)(a1 + 32) * 1.41421356;
    v84 = v6;
    v85 = v5;
LABEL_23:
    v46 = sub_10005FD98(v84, v85, v83);
    v48 = v86;
    v50 = v87;
    v52 = v88;
    v53 = *(double *)a1;
    v54 = *(double *)(a1 + 8);
    v55 = *(double *)(a1 + 16);
    v56 = *(double *)(a1 + 24);
    goto LABEL_24;
  }
  v63 = sub_1000603DC(v60, v61, *(double *)(a1 + 32));
  v65 = v64;
  v66 = sub_1000603D0(v6, v5, v63);
  v68 = v67;
  v69 = sub_10006200C(1, v63, v65);
  v70 = sub_1000603D0(v66, v68, v69);
  v71 = sub_1000615D8(*(CGFloat *)a1, *(CGFloat *)(a1 + 8), *(CGFloat *)(a1 + 16), *(CGFloat *)(a1 + 24), v70);
  v73 = v72;
  v75 = v74;
  v77 = v76;
  v78 = sub_1000603B8(v66, v68, v69);
  v79 = sub_1000615D8(v71, v73, v75, v77, v78);
LABEL_25:
  *(double *)a1 = v79;
  *(_QWORD *)(a1 + 8) = v80;
  *(_QWORD *)(a1 + 16) = v81;
  *(_QWORD *)(a1 + 24) = v82;
}

void sub_1000C9338(const CGPath *a1, uint64_t a2, uint64_t a3)
{
  _QWORD info[2];
  CGPoint v4;
  CGPoint v5;
  uint64_t v6;

  if (a1)
  {
    if (a3)
    {
      info[0] = a2;
      info[1] = a3;
      v4 = CGPointZero;
      v5 = v4;
      v6 = 0;
      CGPathApply(a1, info, (CGPathApplierFunction)sub_1000C9384);
    }
  }
}

void sub_1000C9384(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _OWORD *v4;
  __int128 v5;
  _QWORD v6[2];

  v3 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 - 1) < 3)
  {
    sub_1000CA00C(a1, (unsigned int *)a2);
    return;
  }
  if (v3 == 4)
  {
    if (*(_QWORD *)(a1 + 48))
    {
      if (sub_10006010C(*(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 16), *(double *)(a1 + 24)) > 0.00000001)
      {
        v6[1] = a1 + 16;
        v6[0] = 1;
        sub_1000CA00C(a1, (unsigned int *)v6);
      }
    }
    *(_QWORD *)(a1 + 48) = 0;
    v5 = *(_OWORD *)(a1 + 16);
  }
  else
  {
    if (v3)
      return;
    *(_QWORD *)(a1 + 48) = 0;
    v4 = *(_OWORD **)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *v4;
    v5 = *v4;
  }
  *(_OWORD *)(a1 + 32) = v5;
}

const CGPath *sub_1000C9440(const CGPath *result)
{
  uint64_t v1;
  _QWORD info[2];
  CGPoint v3;
  CGPoint v4;
  uint64_t v5;

  v1 = 0;
  if (result)
  {
    info[0] = &v1;
    info[1] = sub_1000C949C;
    v3 = CGPointZero;
    v4 = v3;
    v5 = 0;
    CGPathApply(result, info, (CGPathApplierFunction)sub_1000C9384);
    return (const CGPath *)v1;
  }
  return result;
}

_QWORD *sub_1000C949C(_QWORD *result)
{
  ++*result;
  return result;
}

void sub_1000C94AC(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double y;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  CGRect v68;

  v4 = *(_DWORD *)(a1 + 88);
  if (v4)
  {
    v5 = *(int *)(a1 + 160);
    *(_DWORD *)(a1 + 92) = v5;
    memmove((void *)(a1 + 96), (const void *)(a1 + 168), 16 * (dword_100EEC750[v5] & ~(dword_100EEC750[v5] >> 31)) + 16);
  }
  v6 = *a2;
  *(_DWORD *)(a1 + 160) = *a2;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 72);
  v7 = *a2;
  v8 = dword_100EEC750[v7];
  if ((_DWORD)v7 != 4)
  {
    v9 = 0;
    if (v8 <= 1)
      v8 = 1;
    v10 = 16 * v8;
    do
    {
      *(_OWORD *)(a1 + 184 + v9) = *(_OWORD *)(*((_QWORD *)a2 + 1) + v9);
      v9 += 16;
    }
    while (v10 != v9);
    v8 = dword_100EEC750[*a2];
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(*((_QWORD *)a2 + 1) + 16 * (v8 - 1));
  *(_DWORD *)(a1 + 88) = v4 + 1;
  if (v6 == 1)
  {
    sub_1000C99B4((CGFloat *)a1, 1, (float64x2_t *)(a1 + 168), 0.0);
    sub_1000C99B4((CGFloat *)a1, 1, (float64x2_t *)(a1 + 168), 1.0);
  }
  v11 = *(unsigned int *)(a1 + 160);
  if ((v11 & 0xFFFFFFFE) == 2)
  {
    v13 = *(double *)(a1 + 168);
    v12 = *(double *)(a1 + 176);
    v15 = *(double *)(a1 + 72);
    v14 = *(double *)(a1 + 80);
    v17 = *(double *)(a1 + 184);
    v16 = *(double *)(a1 + 192);
    if ((_DWORD)v11 == 3)
    {
      v19 = *(double *)(a1 + 200);
      v18 = *(double *)(a1 + 208);
    }
    else
    {
      v19 = v17 + (v15 - v17) / 3.0;
      v17 = v13 + (v17 - v13 + v17 - v13) / 3.0;
      v18 = v16 + (v14 - v16) / 3.0;
      v16 = v12 + (v16 - v12 + v16 - v12) / 3.0;
    }
    sub_1000C99B4((CGFloat *)a1, v11, (float64x2_t *)(a1 + 168), 0.0);
    sub_1000C99B4((CGFloat *)a1, *(unsigned int *)(a1 + 160), (float64x2_t *)(a1 + 168), 1.0);
    v66 = 0;
    v67 = 0;
    v20 = sub_1000C869C((double *)&v66, v13, v17, v19, v15);
    if (v20)
    {
      v21 = v20;
      v22 = (double *)&v66;
      do
      {
        v23 = *v22++;
        sub_1000C99B4((CGFloat *)a1, *(unsigned int *)(a1 + 160), (float64x2_t *)(a1 + 168), v23);
        --v21;
      }
      while (v21);
    }
    v66 = 0;
    v67 = 0;
    v24 = sub_1000C869C((double *)&v66, v12, v16, v18, v14);
    if (v24)
    {
      v25 = v24;
      v26 = (double *)&v66;
      do
      {
        v27 = *v26++;
        sub_1000C99B4((CGFloat *)a1, *(unsigned int *)(a1 + 160), (float64x2_t *)(a1 + 168), v27);
        --v25;
      }
      while (v25);
    }
  }
  v28 = *(_DWORD *)(a1 + 40);
  if (v28 != 2 && *(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v28 == 1)
    {
      v68.origin.x = sub_10005FD98(*(double *)(a1 + 168), *(double *)(a1 + 176), *(double *)(a1 + 32) + *(double *)(a1 + 32));
      v68.origin.y = v60;
      v68.size.width = v61;
      v68.size.height = v62;
      *(CGRect *)&v56 = CGRectUnion(*(CGRect *)a1, v68);
LABEL_36:
      *(double *)a1 = v56;
      *(_QWORD *)(a1 + 8) = v57;
      *(_QWORD *)(a1 + 16) = v58;
      *(_QWORD *)(a1 + 24) = v59;
      return;
    }
    if (v28)
      return;
    v29 = sub_1000C9C38(*(_DWORD *)(a1 + 92), (float64x2_t *)(a1 + 96), 1.0).f64[0];
    v31 = v30;
    *(_QWORD *)&v32 = *(_OWORD *)&sub_1000C9C38(*(_DWORD *)(a1 + 160), (float64x2_t *)(a1 + 168), 0.0);
    v34 = v33;
    y = CGPointZero.y;
    if ((v29 != CGPointZero.x || v31 != y) && (v32 != CGPointZero.x || v34 != y))
    {
      v38 = sub_1000603B8(v29, v31, v32);
      v40 = sub_100060398(v38, v39);
      v42 = v41;
      v43 = -1.0 / sub_100060C0C(v40, v41, v32, v34);
      if (v43 * v43 >= *(double *)(a1 + 48) * *(double *)(a1 + 48))
        return;
      v44 = sub_1000603DC(v40, v42, v43 * *(double *)(a1 + 32));
      v45 = *(double *)(a1 + 168);
      v46 = *(double *)(a1 + 176);
      v47 = sub_1000603D0(v45, v46, v44);
      v48 = sub_1000615D8(*(CGFloat *)a1, *(CGFloat *)(a1 + 8), *(CGFloat *)(a1 + 16), *(CGFloat *)(a1 + 24), v47);
      v50 = v49;
      v52 = v51;
      v54 = v53;
      v55 = sub_1000603B8(v45, v46, v44);
      v56 = sub_1000615D8(v48, v50, v52, v54, v55);
      goto LABEL_36;
    }
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012356A0);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF6780();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012356C0);
    v63 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE7468(v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLPathBoundsApplierProcessSegment(CRLPathBoundsApplierState *, const CGPathElement *)"));
    v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v64, v65, 472, 0, "Couldn't get a gradient for this join, but this should have been caught upstream by skipping no-op segments.");

  }
}

void sub_1000C99B4(CGFloat *a1, uint64_t a2, float64x2_t *a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  switch((_DWORD)a2)
  {
    case 3:
      v10 = sub_1000602A8(a3, a4);
LABEL_8:
      v8 = v10;
      v9 = v11;
      goto LABEL_19;
    case 2:
      v10 = sub_1003133C8(a3, a4);
      goto LABEL_8;
    case 1:
      if (a4 >= 0.5)
      {
        v8 = a3[1].f64[0];
        v9 = a3[1].f64[1];
      }
      else
      {
        v8 = a3->f64[0];
        v9 = a3->f64[1];
      }
LABEL_19:
      v17 = sub_1000C9C38(a2, a3, a4).f64[0];
      if (v17 != CGPointZero.x || v18 != CGPointZero.y)
      {
        v20 = sub_10006200C(0, v17, v18);
        v22 = sub_1000603DC(v20, v21, a1[4]);
        v23 = sub_1000603D0(v8, v9, v22);
        v24 = sub_1000615D8(*a1, a1[1], a1[2], a1[3], v23);
        v26 = v25;
        v28 = v27;
        v30 = v29;
        v31 = sub_1000603B8(v8, v9, v22);
        *a1 = sub_1000615D8(v24, v26, v28, v30, v31);
        *((_QWORD *)a1 + 1) = v32;
        *((_QWORD *)a1 + 2) = v33;
        *((_QWORD *)a1 + 3) = v34;
      }
      return;
  }
  v12 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_1012356E0);
  v13 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DF6800(v12, a2, v13);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235700);
  v14 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DE7468(v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLGrowPathBoundsAtTFromTypeAndPoints(CRLPathBoundsApplierState *, CGFloat, CGPathElementType, CGPoint *)"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 365, 0, "Invalid element type %d", a2);

}

float64x2_t sub_1000C9C38(int a1, float64x2_t *a2, double a3)
{
  CGPoint v4;
  float64x2_t result;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  int32x2_t v20;
  unint64_t v21;
  CGPoint v22;
  float64x2_t v23;

  v4 = CGPointZero;
  result = (float64x2_t)CGPointZero;
  v22 = CGPointZero;
  switch(a1)
  {
    case 0:
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount", result.f64[0]);
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101235720);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DF68B0();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101235740);
      v8 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE7468(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGPoint gradientAtTFromTypeAndPoints(CGFloat, CGPathElementType, CGPoint *)", v22));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 209, 0, "path gradient can't handle moveTo element");

      v4 = (CGPoint)v23;
      result = v23;
      break;
    case 1:
    case 4:
      result.f64[0] = sub_1000603B8(a2[1].f64[0], a2[1].f64[1], a2->f64[0]);
      *(_QWORD *)&result.f64[1] = v7;
      goto LABEL_15;
    case 2:
      v11 = sub_1003C65EC(a3, 0.0001, 0.9999);
      v12 = vmlaq_n_f64(vmulq_n_f64(vaddq_f64(a2[1], a2[1]), v11 * -2.0 + 1.0), vaddq_f64(*a2, *a2), v11 + -1.0);
      v13 = vaddq_f64(a2[2], a2[2]);
      goto LABEL_14;
    case 3:
      v11 = sub_1003C65EC(a3, 0.0001, 0.9999);
      __asm
      {
        FMOV            V4.2D, #-3.0
        FMOV            V5.2D, #3.0
      }
      v12 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_f64(a2[1], _Q5), v11 * -4.0 + 1.0 + v11 * 3.0 * v11), vmulq_n_f64(vmulq_f64(*a2, _Q4), v11 + -1.0), v11 + -1.0), vmulq_n_f64(vmulq_f64(a2[2], _Q5), v11), v11 * -3.0 + 2.0);
      v13 = vmulq_n_f64(vmulq_f64(a2[3], _Q5), v11);
LABEL_14:
      result = vmlaq_n_f64(v12, v13, v11);
LABEL_15:
      v4 = v22;
      break;
    default:
      break;
  }
  v20 = vmovn_s64(vceqq_f64(result, (float64x2_t)v4));
  if ((v20.i32[0] & v20.i32[1] & 1) == 0)
  {
    result.f64[0] = sub_100060398(result.f64[0], result.f64[1]);
    *(_QWORD *)&result.f64[1] = v21;
  }
  return result;
}

void sub_1000C9EEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C9F1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C9F4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C9F7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C9FAC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000C9FDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

__n128 sub_1000CA00C(uint64_t a1, unsigned int *a2)
{
  __n128 *v4;
  unsigned int v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t *v8;
  __int128 v9;
  __n128 result;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;

  v4 = (__n128 *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 32);
  v5 = *a2;
  if (*a2 != 4)
  {
    LODWORD(v6) = dword_100EEC750[v5];
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if ((int)v6 <= 1)
      v6 = 1;
    else
      v6 = v6;
    v8 = &v13;
    do
    {
      v9 = *v7++;
      *(_OWORD *)v8 = v9;
      v8 += 2;
      --v6;
    }
    while (v6);
  }
  v11[1] = &v12;
  v11[0] = v5;
  (*(void (**)(_QWORD, _QWORD *))(a1 + 8))(*(_QWORD *)a1, v11);
  result = *(__n128 *)(*((_QWORD *)a2 + 1) + 16 * dword_100EEC750[*a2] - 16);
  *v4 = result;
  ++*(_QWORD *)(a1 + 48);
  return result;
}

void sub_1000CA67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000CA6DC(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_100007810();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)sub_100045008(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1000CAC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000CAE6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CB05C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CB080(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  double *v25;
  double v26;
  __int128 v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

LABEL_1:
  v10 = (double *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v26 = a2[-2].n128_f64[1];
        v25 = &a2[-2].n128_f64[1];
        if (v26 < *v10)
        {
          v36 = *((_QWORD *)v10 + 2);
          v33 = *(_OWORD *)v10;
          v27 = *(_OWORD *)v25;
          v10[2] = v25[2];
          *(_OWORD *)v10 = v27;
          *(_OWORD *)v25 = v33;
          *((_QWORD *)v25 + 2) = v36;
        }
        return;
      case 3uLL:
        sub_1000CB508((__int128 *)v10, (__int128 *)(v10 + 3), (__int128 *)&a2[-2].n128_i8[8]);
        return;
      case 4uLL:
        sub_1000CB99C((uint64_t)v10, (uint64_t)(v10 + 3), (uint64_t)(v10 + 6), &a2[-2].n128_u64[1]);
        return;
      case 5uLL:
        sub_1000CBA6C((__n128 *)v10, (__n128 *)(v10 + 3), (__n128 *)v10 + 3, (unint64_t *)v10 + 9, &a2[-2].n128_u64[1]);
        return;
      default:
        if (v13 > 575)
        {
          if (v12 == 1)
          {
            if (v10 != (double *)a2)
              sub_1000CBB78((uint64_t)v10, a2, a2, a3, a6);
            return;
          }
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_1000CB508((__int128 *)&v10[3 * v15], (__int128 *)v10, (__int128 *)&a2[-2].n128_i8[8]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1000CB508((__int128 *)v10, (__int128 *)&v10[3 * v15], (__int128 *)&a2[-2].n128_i8[8]);
            v17 = 3 * v15;
            v18 = (__int128 *)&v10[3 * v15 - 3];
            sub_1000CB508((__int128 *)(v10 + 3), v18, (__int128 *)&a2[-3]);
            v19 = (__int128 *)(v10 + 6);
            v20 = (__int128 *)&v10[v17 + 3];
            sub_1000CB508(v19, v20, (__int128 *)&a2[-5].n128_i8[8]);
            sub_1000CB508(v18, (__int128 *)v16, v20);
            v35 = *(_QWORD *)(a1 + 16);
            v32 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(double *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            *((_QWORD *)v16 + 2) = v35;
            *(_OWORD *)v16 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(double *)(a1 - 24) >= *(double *)a1)
          {
            v10 = sub_1000CB614((double *)a1, a2->n128_f64);
            goto LABEL_16;
          }
LABEL_11:
          v22 = sub_1000CB6FC(a1, (unint64_t)a2);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_1000CB7E4(a1, v22);
          v10 = (double *)(v22 + 24);
          if (!sub_1000CB7E4(v22 + 24, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_1000CB080(a1, v22, a3, -v12, a5 & 1);
            v10 = (double *)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          sub_1000CB468((uint64_t)v10, (uint64_t)a2);
        }
        else if (v10 != (double *)a2)
        {
          v28 = v10 + 3;
          while (v28 != (double *)a2)
          {
            v29 = (uint64_t)v28;
            v30 = *(double *)(a1 + 24);
            if (v30 < *(double *)a1)
            {
              v34 = *(_OWORD *)(a1 + 32);
              do
              {
                *(_OWORD *)v28 = *(_OWORD *)(v28 - 3);
                v28[2] = *(v28 - 1);
                v31 = *(v28 - 6);
                v28 -= 3;
              }
              while (v30 < v31);
              *v28 = v30;
              *(_OWORD *)(v28 + 1) = v34;
            }
            v28 = (double *)(v29 + 24);
            a1 = v29;
          }
        }
        return;
    }
  }
}

  v10 = a2 - 4;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = ((char *)a2 - (char *)v11) >> 6;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 4, v11))
        {
          v32 = v11[2];
          v34 = v11[3];
          v28 = *v11;
          v30 = v11[1];
          v24 = *v10;
          v25 = *(a2 - 3);
          v26 = *(a2 - 1);
          v11[2] = *(a2 - 2);
          v11[3] = v26;
          *v11 = v24;
          v11[1] = v25;
          *v10 = v28;
          *(a2 - 3) = v30;
          *(a2 - 2) = v32;
          *(a2 - 1) = v34;
        }
        return;
      case 3uLL:
        sub_10014AE1C(v11, v11 + 4, a2 - 4, a3);
        return;
      case 4uLL:
        sub_10014B408((uint64_t)v11, v11 + 4, v11 + 8, a2 - 4, a3);
        return;
      case 5uLL:
        sub_10014B4F0((uint64_t)v11, v11 + 4, v11 + 8, v11 + 12, a2 - 4, a3);
        return;
      default:
        if (v14 <= 1535)
        {
          if ((a5 & 1) != 0)
            sub_10014AC70((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            sub_10014AD54((uint64_t)v11, a2, a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[4 * (v15 >> 1)];
          if ((unint64_t)v14 <= 0x2000)
          {
            sub_10014AE1C(&v11[4 * (v15 >> 1)], v11, a2 - 4, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10014AE1C(v11, &v11[4 * (v15 >> 1)], a2 - 4, a3);
            sub_10014AE1C(v11 + 4, v17 - 4, a2 - 8, a3);
            sub_10014AE1C(v11 + 8, &v11[4 * v16 + 4], a2 - 12, a3);
            sub_10014AE1C(v17 - 4, v17, &v11[4 * v16 + 4], a3);
            v31 = v11[2];
            v33 = v11[3];
            v27 = *v11;
            v29 = v11[1];
            v18 = *v17;
            v19 = v17[1];
            v20 = v17[3];
            v11[2] = v17[2];
            v11[3] = v20;
            *v11 = v18;
            v11[1] = v19;
            v17[2] = v31;
            v17[3] = v33;
            *v17 = v27;
            v17[1] = v29;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v11 - 4, v11) & 1) == 0)
          {
            v11 = sub_10014AF6C(v11, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v21 = sub_10014B0C8(v11, a2, a3);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = sub_10014B224(v11, v21, a3);
          v11 = v21 + 4;
          if (!sub_10014B224(v21 + 4, a2, a3))
          {
            v12 = v13 + 1;
            if (v23)
              continue;
LABEL_14:
            sub_10014A8EC(a1, v21, a3, -v13, a5 & 1);
            v11 = v21 + 4;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          sub_10014B618((uint64_t)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(__n128 *, __n128 *))a3, a6);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v19 = *((_QWORD *)a2 - 2);
        v20 = *((_QWORD *)a2 - 1);
        v21 = a2 - 16;
        if ((*a3)(v19, v20, *(_QWORD *)v9, *((_QWORD *)v9 + 1)))
        {
          v23 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v21;
          *(_OWORD *)v21 = v23;
        }
        return;
      case 3uLL:
        sub_1001ACFA4(v9, (_QWORD *)v9 + 2, (_QWORD *)a2 - 2, a3);
        return;
      case 4uLL:
        sub_1001AD4BC(v9, (_QWORD *)v9 + 2, (_QWORD *)v9 + 4, (_QWORD *)a2 - 2, a3);
        return;
      case 5uLL:
        sub_1001AD574(v9, (_QWORD *)v9 + 2, (_QWORD *)v9 + 4, (_QWORD *)v9 + 6, (_QWORD *)a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_1001ACE2C((uint64_t)v9, a2, a3);
          else
            sub_1001ACEFC((uint64_t)v9, a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[16 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1001ACFA4(&v9[16 * (v13 >> 1)], v9, (_QWORD *)a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1001ACFA4(v9, &v9[16 * (v13 >> 1)], (_QWORD *)a2 - 2, a3);
            sub_1001ACFA4((_QWORD *)v9 + 2, (_QWORD *)v15 - 2, (_QWORD *)a2 - 4, a3);
            sub_1001ACFA4((_QWORD *)v9 + 4, &v9[16 * v14 + 16], (_QWORD *)a2 - 6, a3);
            sub_1001ACFA4((_QWORD *)v15 - 2, v15, &v9[16 * v14 + 16], a3);
            v22 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v22;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(*((_QWORD *)v9 - 2), *((_QWORD *)v9 - 1), *(_QWORD *)v9, *((_QWORD *)v9 + 1)) & 1) == 0)
          {
            v9 = (char *)sub_1001AD0A0(v9, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v16 = (char *)sub_1001AD1D4((uint64_t *)v9, (uint64_t *)a2, a3);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = sub_1001AD304(v9, v16, a3);
          v9 = v16 + 16;
          if (!sub_1001AD304(v16 + 16, a2, a3))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            sub_1001ACAD8(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 16;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          sub_1001AD654(v9, a2, a2, a3);
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (uint64_t **)v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v148 = *(uint64_t **)(a2 - 16);
        v147 = a2 - 16;
        v149 = *(uint64_t **)v8;
        v150 = *v148;
        v151 = *(_DWORD *)(*v148 + 16);
        v152 = *(_DWORD *)(*v148 + 32);
        if (v151 >= v152)
          v153 = v152;
        else
          v153 = v151;
        v154 = *v149;
        v155 = *(_DWORD *)(*v149 + 16);
        v156 = *(_DWORD *)(*v149 + 32);
        if (v155 >= v156)
          v157 = *(_DWORD *)(*v149 + 32);
        else
          v157 = *(_DWORD *)(*v149 + 16);
        if (v153 < v157)
          goto LABEL_214;
        v158 = (double *)(v154 + 24);
        v159 = v150 + 40;
        v160 = v150 + 24;
        v161 = (double *)(v154 + 40);
        if (v155 < v156)
          v161 = v158;
        v162 = (double *)(v151 >= v152 ? v159 : v160);
        if (v153 == v157 && *v162 < *v161)
        {
LABEL_214:
          v377 = *(_OWORD *)v8;
          v164 = *(_QWORD *)v147;
          *(_WORD *)(v8 + 8) = *(_WORD *)(v147 + 8);
          *(_QWORD *)v8 = v164;
          *(_WORD *)(v147 + 8) = WORD4(v377);
          *(_QWORD *)v147 = v377;
        }
        return;
      case 3uLL:
        sub_10032951C((uint64_t **)v8, (uint64_t **)(v8 + 16), (uint64_t **)(a2 - 16));
        return;
      case 4uLL:
        sub_100329A98((uint64_t **)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (uint64_t **)(a2 - 16));
        return;
      case 5uLL:
        sub_10032927C((uint64_t **)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (uint64_t **)(v8 + 48), (uint64_t **)(a2 - 16));
        return;
      default:
        if (v9 <= 383)
        {
          v165 = v8 + 16;
          v167 = v8 == a2 || v165 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v167)
            {
              v168 = 0;
              v169 = v8;
              do
              {
                v170 = v165;
                v171 = *(uint64_t **)(v169 + 16);
                v172 = *(uint64_t **)v169;
                v173 = *v171;
                v174 = *(_DWORD *)(*v171 + 16);
                v175 = *(_DWORD *)(*v171 + 32);
                if (v174 >= v175)
                  v176 = *(_DWORD *)(*v171 + 32);
                else
                  v176 = *(_DWORD *)(*v171 + 16);
                v177 = *v172;
                v178 = *(_DWORD *)(*v172 + 16);
                v179 = *(_DWORD *)(*v172 + 32);
                if (v178 >= v179)
                  v180 = *(_DWORD *)(*v172 + 32);
                else
                  v180 = *(_DWORD *)(*v172 + 16);
                if (v176 < v180)
                  goto LABEL_244;
                v181 = (double *)(v177 + 24);
                v182 = v173 + 40;
                v183 = v173 + 24;
                v184 = (double *)(v177 + 40);
                if (v178 < v179)
                  v184 = v181;
                v185 = (double *)(v174 >= v175 ? v182 : v183);
                if (v176 == v180 && *v185 < *v184)
                {
LABEL_244:
                  v187 = *(_WORD *)(v169 + 24);
                  *(_QWORD *)v170 = *(_QWORD *)v169;
                  *(_WORD *)(v170 + 8) = *(_WORD *)(v169 + 8);
                  v188 = v8;
                  if (v169 != v8)
                  {
                    v189 = v168;
                    do
                    {
                      v190 = v8 + v189;
                      v191 = *(uint64_t **)(v8 + v189 - 16);
                      v192 = *v171;
                      v193 = *(_DWORD *)(*v171 + 16);
                      v194 = *(_DWORD *)(*v171 + 32);
                      if (v193 >= v194)
                        v195 = *(_DWORD *)(*v171 + 32);
                      else
                        v195 = *(_DWORD *)(*v171 + 16);
                      v196 = *v191;
                      v197 = *(_DWORD *)(*v191 + 16);
                      v198 = *(_DWORD *)(*v191 + 32);
                      if (v197 >= v198)
                        v199 = *(_DWORD *)(*v191 + 32);
                      else
                        v199 = *(_DWORD *)(*v191 + 16);
                      if (v195 >= v199)
                      {
                        v200 = (double *)(v196 + 24);
                        v201 = v192 + 40;
                        v202 = v192 + 24;
                        v203 = (double *)(v196 + 40);
                        if (v197 < v198)
                          v203 = v200;
                        v204 = (double *)(v193 >= v194 ? v201 : v202);
                        if (v195 != v199 || *v204 >= *v203)
                        {
                          v188 = v8 + v189;
                          goto LABEL_265;
                        }
                      }
                      *(_QWORD *)v190 = *(_QWORD *)(v8 + v189 - 16);
                      *(_WORD *)(v190 + 8) = *(_WORD *)(v8 + v189 - 8);
                      v189 -= 16;
                    }
                    while (v189);
                    v188 = v8;
                  }
LABEL_265:
                  *(_QWORD *)v188 = v171;
                  *(_WORD *)(v188 + 8) = v187;
                }
                v165 = v170 + 16;
                v168 += 16;
                v169 = v170;
              }
              while (v170 + 16 != a2);
            }
          }
          else if (!v167)
          {
            do
            {
              v338 = (uint64_t **)v165;
              v339 = a1[2];
              v340 = *a1;
              v341 = *v339;
              v342 = *(_DWORD *)(*v339 + 16);
              v343 = *(_DWORD *)(*v339 + 32);
              if (v342 >= v343)
                v344 = *(_DWORD *)(*v339 + 32);
              else
                v344 = *(_DWORD *)(*v339 + 16);
              v345 = *v340;
              v346 = *(_DWORD *)(*v340 + 16);
              v347 = *(_DWORD *)(*v340 + 32);
              if (v346 >= v347)
                v348 = *(_DWORD *)(*v340 + 32);
              else
                v348 = *(_DWORD *)(*v340 + 16);
              if (v344 < v348)
                goto LABEL_430;
              v349 = (double *)(v345 + 24);
              v350 = v341 + 40;
              v351 = v341 + 24;
              v352 = (double *)(v345 + 40);
              if (v346 < v347)
                v352 = v349;
              v353 = (double *)(v342 >= v343 ? v350 : v351);
              if (v344 == v348 && *v353 < *v352)
              {
LABEL_430:
                v355 = a1[3];
                do
                {
                  do
                  {
                    v356 = a1;
                    a1[2] = *a1;
                    v357 = *((_WORD *)a1 + 4);
                    v359 = *(a1 - 2);
                    a1 -= 2;
                    v358 = v359;
                    *((_WORD *)v356 + 12) = v357;
                    v360 = *v339;
                    v361 = *(_DWORD *)(*v339 + 16);
                    v362 = *(_DWORD *)(*v339 + 32);
                    if (v361 >= v362)
                      v363 = *(_DWORD *)(*v339 + 32);
                    else
                      v363 = *(_DWORD *)(*v339 + 16);
                    v364 = *v358;
                    v365 = *(_DWORD *)(*v358 + 16);
                    v366 = *(_DWORD *)(*v358 + 32);
                    if (v365 >= v366)
                      v367 = *(_DWORD *)(*v358 + 32);
                    else
                      v367 = *(_DWORD *)(*v358 + 16);
                  }
                  while (v363 < v367);
                  v368 = (double *)(v364 + 24);
                  v369 = (double *)(v360 + 40);
                  v370 = (double *)(v360 + 24);
                  v371 = (double *)(v364 + 40);
                  if (v365 < v366)
                    v371 = v368;
                  if (v361 >= v362)
                    v372 = v369;
                  else
                    v372 = v370;
                }
                while (v363 == v367 && *v372 < *v371);
                *v356 = v339;
                *((_WORD *)v356 + 4) = (_WORD)v355;
              }
              v165 = (unint64_t)(v338 + 2);
              a1 = v338;
            }
            while (v338 + 2 != (uint64_t **)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v206 = (v10 - 2) >> 1;
            v207 = v206;
            do
            {
              v208 = v207;
              if (v206 >= v207)
              {
                v209 = (2 * v207) | 1;
                v210 = (uint64_t **)(v8 + 16 * v209);
                if (2 * v208 + 2 < (uint64_t)v10)
                {
                  v211 = v210[2];
                  v212 = **v210;
                  v213 = *(_DWORD *)(v212 + 16);
                  v214 = *(_DWORD *)(v212 + 32);
                  v215 = v213 >= v214 ? *(_DWORD *)(v212 + 32) : *(_DWORD *)(v212 + 16);
                  v216 = *v211;
                  v217 = *(_DWORD *)(*v211 + 16);
                  v218 = *(_DWORD *)(*v211 + 32);
                  v219 = v217 >= v218 ? *(_DWORD *)(*v211 + 32) : *(_DWORD *)(*v211 + 16);
                  if (v215 < v219)
                    goto LABEL_289;
                  v220 = (double *)(v216 + 24);
                  v221 = v212 + 40;
                  v222 = v212 + 24;
                  v223 = (double *)(v216 + 40);
                  if (v217 < v218)
                    v223 = v220;
                  v224 = (double *)(v213 >= v214 ? v221 : v222);
                  if (v215 == v219 && *v224 < *v223)
                  {
LABEL_289:
                    v210 += 2;
                    v209 = 2 * v208 + 2;
                  }
                }
                v226 = (uint64_t **)(v8 + 16 * v208);
                v227 = *v226;
                v228 = **v210;
                v229 = *(_DWORD *)(v228 + 16);
                v230 = *(_DWORD *)(v228 + 32);
                if (v229 >= v230)
                  v231 = *(_DWORD *)(v228 + 32);
                else
                  v231 = *(_DWORD *)(v228 + 16);
                v232 = *v227;
                v233 = *(_DWORD *)(*v227 + 16);
                v234 = *(_DWORD *)(*v227 + 32);
                if (v233 >= v234)
                  v235 = *(_DWORD *)(*v227 + 32);
                else
                  v235 = *(_DWORD *)(*v227 + 16);
                if (v231 >= v235)
                {
                  v236 = (double *)(v232 + 24);
                  v237 = (double *)(v228 + 40);
                  v238 = (double *)(v228 + 24);
                  v239 = (double *)(v232 + 40);
                  if (v233 < v234)
                    v239 = v236;
                  if (v229 >= v230)
                    v240 = v237;
                  else
                    v240 = v238;
                  if (v231 != v235 || *v240 >= *v239)
                  {
                    v242 = *((_WORD *)v226 + 4);
                    do
                    {
                      v243 = v226;
                      v226 = v210;
                      v244 = *v210;
                      *((_WORD *)v243 + 4) = *((_WORD *)v226 + 4);
                      *v243 = v244;
                      if (v206 < v209)
                        break;
                      v245 = 2 * v209;
                      v209 = (2 * v209) | 1;
                      v210 = (uint64_t **)(v8 + 16 * v209);
                      v246 = v245 + 2;
                      if (v246 < (uint64_t)v10)
                      {
                        v247 = v210[2];
                        v248 = **v210;
                        v249 = *(_DWORD *)(v248 + 16);
                        v250 = *(_DWORD *)(v248 + 32);
                        v251 = v249 >= v250 ? *(_DWORD *)(v248 + 32) : *(_DWORD *)(v248 + 16);
                        v252 = *v247;
                        v253 = *(_DWORD *)(*v247 + 16);
                        v254 = *(_DWORD *)(*v247 + 32);
                        v255 = v253 >= v254 ? *(_DWORD *)(*v247 + 32) : *(_DWORD *)(*v247 + 16);
                        if (v251 < v255)
                          goto LABEL_326;
                        v256 = (double *)(v252 + 24);
                        v257 = v248 + 40;
                        v258 = v248 + 24;
                        v259 = (double *)(v252 + 40);
                        if (v253 < v254)
                          v259 = v256;
                        v260 = (double *)(v249 >= v250 ? v257 : v258);
                        if (v251 == v255 && *v260 < *v259)
                        {
LABEL_326:
                          v210 += 2;
                          v209 = v246;
                        }
                      }
                      v262 = **v210;
                      v263 = *(_DWORD *)(v262 + 16);
                      v264 = *(_DWORD *)(v262 + 32);
                      v265 = v263 >= v264 ? *(_DWORD *)(v262 + 32) : *(_DWORD *)(v262 + 16);
                      v266 = *v227;
                      v267 = *(_DWORD *)(*v227 + 16);
                      v268 = *(_DWORD *)(*v227 + 32);
                      v269 = v267 >= v268 ? *(_DWORD *)(*v227 + 32) : *(_DWORD *)(*v227 + 16);
                      if (v265 < v269)
                        break;
                      v270 = (double *)(v266 + 24);
                      v271 = v262 + 40;
                      v272 = v262 + 24;
                      v273 = (double *)(v266 + 40);
                      if (v267 < v268)
                        v273 = v270;
                      v274 = (double *)(v263 >= v264 ? v271 : v272);
                    }
                    while (v265 != v269 || *v274 >= *v273);
                    *v226 = v227;
                    *((_WORD *)v226 + 4) = v242;
                  }
                }
              }
              v207 = v208 - 1;
            }
            while (v208);
            v276 = (unint64_t)v9 >> 4;
            do
            {
              v277 = 0;
              v378 = *(_OWORD *)v8;
              v278 = v8;
              do
              {
                v279 = v278;
                v278 += 16 * v277 + 16;
                v280 = 2 * v277;
                v277 = (2 * v277) | 1;
                v281 = v280 + 2;
                if (v281 < v276)
                {
                  v282 = *(uint64_t **)(v278 + 16);
                  v283 = **(_QWORD **)v278;
                  v284 = *(_DWORD *)(v283 + 16);
                  v285 = *(_DWORD *)(v283 + 32);
                  v286 = v284 >= v285 ? *(_DWORD *)(v283 + 32) : *(_DWORD *)(v283 + 16);
                  v287 = *v282;
                  v288 = *(_DWORD *)(*v282 + 16);
                  v289 = *(_DWORD *)(*v282 + 32);
                  v290 = v288 >= v289 ? *(_DWORD *)(*v282 + 32) : *(_DWORD *)(*v282 + 16);
                  if (v286 < v290)
                    goto LABEL_366;
                  v291 = (double *)(v287 + 24);
                  v292 = v283 + 40;
                  v293 = v283 + 24;
                  v294 = (double *)(v287 + 40);
                  if (v288 < v289)
                    v294 = v291;
                  v295 = (double *)(v284 >= v285 ? v292 : v293);
                  if (v286 == v290 && *v295 < *v294)
                  {
LABEL_366:
                    v278 += 16;
                    v277 = v281;
                  }
                }
                v297 = *(uint64_t **)v278;
                *(_WORD *)(v279 + 8) = *(_WORD *)(v278 + 8);
                *(_QWORD *)v279 = v297;
              }
              while (v277 <= (uint64_t)((unint64_t)(v276 - 2) >> 1));
              a2 -= 16;
              if (v278 == a2)
              {
                *(_WORD *)(v278 + 8) = WORD4(v378);
                *(_QWORD *)v278 = v378;
              }
              else
              {
                v298 = *(_QWORD *)a2;
                *(_WORD *)(v278 + 8) = *(_WORD *)(a2 + 8);
                *(_QWORD *)v278 = v298;
                *(_WORD *)(a2 + 8) = WORD4(v378);
                *(_QWORD *)a2 = v378;
                v299 = v278 - v8 + 16;
                if (v299 >= 17)
                {
                  v300 = ((unint64_t)v299 >> 4) - 2;
                  v301 = v300 >> 1;
                  v302 = v8 + 16 * (v300 >> 1);
                  v303 = *(uint64_t **)v278;
                  v304 = **(_QWORD **)v302;
                  v305 = *(_DWORD *)(v304 + 16);
                  v306 = *(_DWORD *)(v304 + 32);
                  v307 = v305 >= v306 ? *(_DWORD *)(v304 + 32) : *(_DWORD *)(v304 + 16);
                  v308 = *v303;
                  v309 = *(_DWORD *)(*v303 + 16);
                  v310 = *(_DWORD *)(*v303 + 32);
                  v311 = v309 >= v310 ? *(_DWORD *)(*v303 + 32) : *(_DWORD *)(*v303 + 16);
                  if (v307 < v311)
                    goto LABEL_387;
                  v312 = (double *)(v308 + 24);
                  v313 = v304 + 40;
                  v314 = v304 + 24;
                  v315 = (double *)(v308 + 40);
                  if (v309 < v310)
                    v315 = v312;
                  v316 = (double *)(v305 >= v306 ? v313 : v314);
                  if (v307 == v311 && *v316 < *v315)
                  {
LABEL_387:
                    v318 = *(_WORD *)(v278 + 8);
                    v319 = *(_WORD *)(v302 + 8);
                    *(_QWORD *)v278 = *(_QWORD *)v302;
                    *(_WORD *)(v278 + 8) = v319;
                    if (v300 >= 2)
                    {
                      while (1)
                      {
                        v321 = v301 - 1;
                        v301 = (v301 - 1) >> 1;
                        v320 = v8 + 16 * v301;
                        v322 = **(_QWORD **)v320;
                        v323 = *(_DWORD *)(v322 + 16);
                        v324 = *(_DWORD *)(v322 + 32);
                        v325 = v323 >= v324 ? *(_DWORD *)(v322 + 32) : *(_DWORD *)(v322 + 16);
                        v326 = *v303;
                        v327 = *(_DWORD *)(*v303 + 16);
                        v328 = *(_DWORD *)(*v303 + 32);
                        v329 = v327 >= v328 ? *(_DWORD *)(*v303 + 32) : *(_DWORD *)(*v303 + 16);
                        if (v325 >= v329)
                        {
                          v330 = (double *)(v326 + 24);
                          v331 = v322 + 40;
                          v332 = v322 + 24;
                          v333 = (double *)(v326 + 40);
                          if (v327 < v328)
                            v333 = v330;
                          v334 = (double *)(v323 >= v324 ? v331 : v332);
                          if (v325 != v329 || *v334 >= *v333)
                            break;
                        }
                        v336 = *(uint64_t **)v320;
                        *(_WORD *)(v302 + 8) = *(_WORD *)(v320 + 8);
                        *(_QWORD *)v302 = v336;
                        v302 = v8 + 16 * v301;
                        if (v321 <= 1)
                          goto LABEL_407;
                      }
                    }
                    v320 = v302;
LABEL_407:
                    *(_QWORD *)v320 = v303;
                    *(_WORD *)(v320 + 8) = v318;
                  }
                }
              }
            }
            while (v276-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 16 * (v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          sub_10032951C(&a1[2 * (v10 >> 1)], a1, (uint64_t **)(a2 - 16));
        }
        else
        {
          sub_10032951C(a1, &a1[2 * (v10 >> 1)], (uint64_t **)(a2 - 16));
          sub_10032951C(a1 + 2, (uint64_t **)(v12 - 16), (uint64_t **)(a2 - 32));
          sub_10032951C(a1 + 4, &a1[2 * v11 + 2], (uint64_t **)(a2 - 48));
          sub_10032951C((uint64_t **)(v12 - 16), (uint64_t **)v12, &a1[2 * v11 + 2]);
          v374 = *(_OWORD *)a1;
          v13 = *(uint64_t **)v12;
          *((_WORD *)a1 + 4) = *(_WORD *)(v12 + 8);
          *a1 = v13;
          *(_WORD *)(v12 + 8) = WORD4(v374);
          *(_QWORD *)v12 = v374;
        }
        --a3;
        v14 = *a1;
        v15 = **a1;
        if ((a4 & 1) == 0)
        {
          v19 = *(a1 - 2);
          v20 = *v19;
          v21 = *(_DWORD *)(*v19 + 16);
          v22 = *(_DWORD *)(*v19 + 32);
          if (v21 >= v22)
            v23 = *(_DWORD *)(*v19 + 32);
          else
            v23 = *(_DWORD *)(*v19 + 16);
          v16 = *(_DWORD *)(v15 + 16);
          v17 = *(_DWORD *)(v15 + 32);
          if (v16 >= v17)
            v18 = *(_DWORD *)(v15 + 32);
          else
            v18 = *(_DWORD *)(v15 + 16);
          if (v23 < v18)
            goto LABEL_29;
          v24 = (double *)(v15 + 24);
          v25 = v20 + 40;
          v26 = v20 + 24;
          if (v16 >= v17)
            v24 = (double *)(v15 + 40);
          v27 = *v24;
          v28 = (double *)(v21 >= v22 ? v25 : v26);
          if (v23 == v18 && *v28 < v27)
            goto LABEL_29;
          v90 = **(_QWORD **)(a2 - 16);
          v91 = *(_DWORD *)(v90 + 16);
          v92 = *(_DWORD *)(v90 + 32);
          if (v91 >= v92)
            v93 = *(_DWORD *)(v90 + 32);
          else
            v93 = *(_DWORD *)(v90 + 16);
          if (v18 < v93)
            goto LABEL_134;
          v94 = (double *)(v90 + 24);
          if (v91 >= v92)
            v94 = (double *)(v90 + 40);
          if (v18 == v93 && v27 < *v94)
          {
LABEL_134:
            v105 = a1 + 2;
            do
            {
              v8 = (unint64_t)v105;
              v106 = **v105;
              v107 = *(_DWORD *)(v106 + 16);
              v108 = *(_DWORD *)(v106 + 32);
              if (v107 >= v108)
                v109 = *(_DWORD *)(v106 + 32);
              else
                v109 = *(_DWORD *)(v106 + 16);
              if (v18 < v109)
                break;
              v110 = (double *)(v106 + 24);
              v111 = (double *)(v106 + 40);
              if (v107 < v108)
                v111 = v110;
              v112 = *v111;
              v105 = (uint64_t **)(v8 + 16);
            }
            while (v18 != v109 || v27 >= v112);
          }
          else
          {
            v96 = a1 + 2;
            do
            {
              v8 = (unint64_t)v96;
              if ((unint64_t)v96 >= a2)
                break;
              v97 = **v96;
              v98 = *(_DWORD *)(v97 + 16);
              v99 = *(_DWORD *)(v97 + 32);
              v100 = v98 >= v99 ? *(_DWORD *)(v97 + 32) : *(_DWORD *)(v97 + 16);
              if (v18 < v100)
                break;
              v101 = (double *)(v97 + 24);
              v102 = (double *)(v97 + 40);
              if (v98 < v99)
                v102 = v101;
              v103 = *v102;
              v96 = (uint64_t **)(v8 + 16);
            }
            while (v18 != v100 || v27 >= v103);
          }
          v114 = a2;
          if (v8 < a2)
          {
            v114 = a2 - 16;
            while (1)
            {
              v115 = v91 >= v92 ? v92 : v91;
              if (v18 >= v115)
              {
                v116 = (double *)(v90 + 24);
                v117 = (double *)(v90 + 40);
                if (v91 < v92)
                  v117 = v116;
                if (v18 != v115 || v27 >= *v117)
                  break;
              }
              v118 = *(uint64_t **)(v114 - 16);
              v114 -= 16;
              v90 = *v118;
              v91 = *(_DWORD *)(*v118 + 16);
              v92 = *(_DWORD *)(*v118 + 32);
            }
          }
          v119 = a1[1];
          while (v8 < v114)
          {
            v376 = *(_OWORD *)v8;
            v120 = *(_QWORD *)v114;
            *(_WORD *)(v8 + 8) = *(_WORD *)(v114 + 8);
            *(_QWORD *)v8 = v120;
            *(_WORD *)(v114 + 8) = WORD4(v376);
            *(_QWORD *)v114 = v376;
            v121 = *v14;
            v122 = *(_DWORD *)(*v14 + 16);
            v123 = *(_DWORD *)(*v14 + 32);
            if (v122 >= v123)
              v124 = *(_DWORD *)(*v14 + 32);
            else
              v124 = *(_DWORD *)(*v14 + 16);
            v125 = (uint64_t **)(v8 + 16);
            do
            {
              v8 = (unint64_t)v125;
              v126 = **v125;
              v127 = *(_DWORD *)(v126 + 16);
              v128 = *(_DWORD *)(v126 + 32);
              if (v127 >= v128)
                v129 = *(_DWORD *)(v126 + 32);
              else
                v129 = *(_DWORD *)(v126 + 16);
              if (v124 < v129)
                break;
              v130 = (double *)(v126 + 24);
              v131 = (double *)(v126 + 40);
              if (v127 < v128)
                v131 = v130;
              v132 = *v131;
              v133 = (double *)(v122 >= v123 ? v121 + 40 : v121 + 24);
              v134 = *v133;
              v125 = (uint64_t **)(v8 + 16);
            }
            while (v124 != v129 || v134 >= v132);
            do
            {
              do
              {
                v136 = *(uint64_t **)(v114 - 16);
                v114 -= 16;
                v137 = *v136;
                v138 = *(_DWORD *)(*v136 + 16);
                v139 = *(_DWORD *)(*v136 + 32);
                if (v138 >= v139)
                  v140 = v139;
                else
                  v140 = v138;
              }
              while (v124 < v140);
              v141 = (double *)(v137 + 24);
              v142 = (double *)(v137 + 40);
              if (v138 < v139)
                v142 = v141;
              v143 = *v142;
              if (v122 >= v123)
                v144 = (double *)(v121 + 40);
              else
                v144 = (double *)(v121 + 24);
            }
            while (v124 == v140 && *v144 < v143);
          }
          if ((uint64_t **)(v8 - 16) != a1)
          {
            v146 = *(uint64_t **)(v8 - 16);
            *((_WORD *)a1 + 4) = *(_WORD *)(v8 - 8);
            *a1 = v146;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v14;
          *(_WORD *)(v8 - 8) = (_WORD)v119;
          continue;
        }
        v16 = *(_DWORD *)(v15 + 16);
        v17 = *(_DWORD *)(v15 + 32);
        if (v16 >= v17)
          v18 = *(_DWORD *)(v15 + 32);
        else
          v18 = *(_DWORD *)(v15 + 16);
LABEL_29:
        v30 = a1[1];
        for (i = 2; ; i += 2)
        {
          v32 = *a1[i];
          v33 = *(_DWORD *)(v32 + 16);
          v34 = *(_DWORD *)(v32 + 32);
          v35 = v33 >= v34 ? *(_DWORD *)(v32 + 32) : *(_DWORD *)(v32 + 16);
          if (v35 >= v18)
          {
            v36 = (double *)(v15 + 24);
            v37 = v32 + 40;
            v38 = v32 + 24;
            if (v16 >= v17)
              v36 = (double *)(v15 + 40);
            v39 = *v36;
            v40 = (double *)(v33 >= v34 ? v37 : v38);
            if (v35 != v18 || *v40 >= v39)
              break;
          }
        }
        v42 = (unint64_t)&a1[i];
        v43 = (uint64_t **)(a2 - 16);
        if (i == 2)
        {
          v53 = (uint64_t **)(a2 - 16);
          while (v42 < (unint64_t)(v53 + 2))
          {
            v44 = v53;
            v54 = **v53;
            v55 = *(_DWORD *)(v54 + 16);
            v56 = *(_DWORD *)(v54 + 32);
            if (v55 >= v56)
              v57 = *(_DWORD *)(v54 + 32);
            else
              v57 = *(_DWORD *)(v54 + 16);
            if (v57 >= v18)
            {
              v58 = (double *)(v54 + 40);
              v59 = (double *)(v54 + 24);
              if (v55 >= v56)
                v59 = v58;
              v60 = *v59;
              v53 = v44 - 2;
              if (v57 != v18 || v60 >= v39)
                continue;
            }
            goto LABEL_73;
          }
          v44 = v53 + 2;
        }
        else
        {
          do
          {
            v44 = v43;
            v45 = **v43;
            v46 = *(_DWORD *)(v45 + 16);
            v47 = *(_DWORD *)(v45 + 32);
            if (v46 >= v47)
              v48 = *(_DWORD *)(v45 + 32);
            else
              v48 = *(_DWORD *)(v45 + 16);
            if (v48 < v18)
              break;
            v49 = (double *)(v45 + 40);
            v50 = (double *)(v45 + 24);
            if (v46 >= v47)
              v50 = v49;
            v51 = *v50;
            v43 = v44 - 2;
          }
          while (v48 != v18 || v51 >= v39);
        }
LABEL_73:
        v8 = v42;
        if (v42 < (unint64_t)v44)
        {
          v62 = v44;
          do
          {
            v375 = *(_OWORD *)v8;
            v63 = *v62;
            *(_WORD *)(v8 + 8) = *((_WORD *)v62 + 4);
            *(_QWORD *)v8 = v63;
            *((_WORD *)v62 + 4) = WORD4(v375);
            *v62 = (uint64_t *)v375;
            v64 = *v14;
            v65 = *(_DWORD *)(*v14 + 16);
            v66 = *(_DWORD *)(*v14 + 32);
            if (v65 >= v66)
              v67 = *(_DWORD *)(*v14 + 32);
            else
              v67 = *(_DWORD *)(*v14 + 16);
            do
            {
              do
              {
                v68 = *(uint64_t **)(v8 + 16);
                v8 += 16;
                v69 = *v68;
                v70 = *(_DWORD *)(*v68 + 16);
                v71 = *(_DWORD *)(*v68 + 32);
                if (v70 >= v71)
                  v72 = v71;
                else
                  v72 = v70;
              }
              while (v72 < v67);
              v73 = (double *)(v64 + 24);
              v74 = (double *)(v69 + 40);
              v75 = (double *)(v69 + 24);
              if (v65 >= v66)
                v73 = (double *)(v64 + 40);
              v76 = *v73;
              if (v70 >= v71)
                v77 = v74;
              else
                v77 = v75;
            }
            while (v72 == v67 && *v77 < v76);
            v79 = v62 - 2;
            do
            {
              v62 = v79;
              v80 = **v79;
              v81 = *(_DWORD *)(v80 + 16);
              v82 = *(_DWORD *)(v80 + 32);
              if (v81 >= v82)
                v83 = *(_DWORD *)(v80 + 32);
              else
                v83 = *(_DWORD *)(v80 + 16);
              if (v83 < v67)
                break;
              v84 = (double *)(v80 + 40);
              v85 = (double *)(v80 + 24);
              if (v81 >= v82)
                v85 = v84;
              v86 = *v85;
              v79 = v62 - 2;
            }
            while (v83 != v67 || v86 >= v76);
          }
          while (v8 < (unint64_t)v62);
        }
        if ((uint64_t **)(v8 - 16) != a1)
        {
          v88 = *(uint64_t **)(v8 - 16);
          *((_WORD *)a1 + 4) = *(_WORD *)(v8 - 8);
          *a1 = v88;
        }
        *(_QWORD *)(v8 - 16) = v14;
        *(_WORD *)(v8 - 8) = (_WORD)v30;
        if (v42 < (unint64_t)v44)
        {
LABEL_109:
          sub_100328368(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v89 = sub_1003297C8((uint64_t)a1, v8 - 16);
        if (!sub_1003297C8(v8, a2))
        {
          if (v89)
            continue;
          goto LABEL_109;
        }
        a2 = v8 - 16;
        if (!v89)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (_QWORD **)a2 - 3;
  v10 = (__int128 *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v26 = *((_QWORD *)a2 - 2);
        if (v26)
          v27 = *((_QWORD *)v10 + 1) == 0;
        else
          v27 = 1;
        if (v27)
        {
          if (!v26)
            return;
        }
        else if (**(_QWORD **)v10 <= **v9)
        {
          return;
        }
        v32 = *((_QWORD *)v10 + 2);
        v30 = *v10;
        v28 = *(_OWORD *)v9;
        *((_BYTE *)v10 + 16) = *((_BYTE *)a2 - 8);
        *v10 = v28;
        *(_OWORD *)v9 = v30;
        *((_BYTE *)a2 - 8) = v32;
        return;
      case 3uLL:
        sub_1003D7C98(v10, (uint64_t **)v10 + 3, (__int128 *)((char *)a2 - 24));
        return;
      case 4uLL:
        sub_1003D83C0((uint64_t)v10, (uint64_t)v10 + 24, (uint64_t)(v10 + 3), (uint64_t)a2 - 24);
        return;
      case 5uLL:
        sub_1003D84F4((__n128 *)v10, (uint64_t)v10 + 24, (uint64_t)(v10 + 3), (uint64_t)v10 + 72, (uint64_t)a2 - 24);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_1003D7B10((uint64_t)v10, (uint64_t)a2);
          else
            sub_1003D7BF8((_QWORD **)v10, (_QWORD **)a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (uint64_t **)v10 + 3 * (v14 >> 1);
          if ((unint64_t)v13 < 0xC01)
          {
            sub_1003D7C98((__int128 *)((char *)v10 + 24 * v15), (uint64_t **)v10, (__int128 *)((char *)a2 - 24));
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          else
          {
            sub_1003D7C98(v10, (uint64_t **)v10 + 3 * v15, (__int128 *)((char *)a2 - 24));
            v17 = 3 * v15;
            v18 = (uint64_t **)v10 + 3 * v15 - 3;
            sub_1003D7C98((__int128 *)((char *)v10 + 24), v18, a2 - 3);
            v19 = v10 + 3;
            v20 = (uint64_t **)v10 + v17 + 3;
            sub_1003D7C98(v19, v20, (__int128 *)((char *)a2 - 72));
            sub_1003D7C98((__int128 *)v18, v16, (__int128 *)v20);
            v31 = *(_QWORD *)(a1 + 16);
            v29 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_BYTE *)(a1 + 16) = *((_BYTE *)v16 + 16);
            *(_OWORD *)a1 = v21;
            *((_BYTE *)v16 + 16) = v31;
            *(_OWORD *)v16 = v29;
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          v22 = *(_QWORD *)(a1 - 16);
          if (v22 && *(_QWORD *)(a1 + 8))
          {
            if (**(_QWORD **)a1 <= **(_QWORD **)(a1 - 24))
              goto LABEL_19;
          }
          else if (!v22)
          {
LABEL_19:
            v10 = sub_1003D7E3C(a1, a2);
            goto LABEL_20;
          }
LABEL_15:
          v23 = sub_1003D7FE0(a1, (unint64_t)a2);
          if ((v24 & 1) == 0)
            goto LABEL_18;
          v25 = sub_1003D818C(a1, v23);
          v10 = (__int128 *)(v23 + 24);
          if (!sub_1003D818C(v23 + 24, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v25)
              continue;
LABEL_18:
            sub_1003D7734(a1, v23, a3, -v12, a5 & 1);
            v10 = (__int128 *)(v23 + 24);
LABEL_20:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_1003D8684((uint64_t)v10, a2, a2, a3);
        return;
    }
  }
}

  v10 = a2 - 4;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = ((char *)a2 - (char *)v11) >> 6;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 4, v11))
        {
          v32 = v11[2];
          v34 = v11[3];
          v28 = *v11;
          v30 = v11[1];
          v24 = *v10;
          v25 = *(a2 - 3);
          v26 = *(a2 - 1);
          v11[2] = *(a2 - 2);
          v11[3] = v26;
          *v11 = v24;
          v11[1] = v25;
          *v10 = v28;
          *(a2 - 3) = v30;
          *(a2 - 2) = v32;
          *(a2 - 1) = v34;
        }
        return;
      case 3uLL:
        sub_10014AE1C(v11, v11 + 4, a2 - 4, a3);
        return;
      case 4uLL:
        sub_10014B408((uint64_t)v11, v11 + 4, v11 + 8, a2 - 4, a3);
        return;
      case 5uLL:
        sub_10014B4F0((uint64_t)v11, v11 + 4, v11 + 8, v11 + 12, a2 - 4, a3);
        return;
      default:
        if (v14 <= 1535)
        {
          if ((a5 & 1) != 0)
            sub_10014AC70((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            sub_10014AD54((uint64_t)v11, a2, a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[4 * (v15 >> 1)];
          if ((unint64_t)v14 <= 0x2000)
          {
            sub_10014AE1C(&v11[4 * (v15 >> 1)], v11, a2 - 4, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10014AE1C(v11, &v11[4 * (v15 >> 1)], a2 - 4, a3);
            sub_10014AE1C(v11 + 4, v17 - 4, a2 - 8, a3);
            sub_10014AE1C(v11 + 8, &v11[4 * v16 + 4], a2 - 12, a3);
            sub_10014AE1C(v17 - 4, v17, &v11[4 * v16 + 4], a3);
            v31 = v11[2];
            v33 = v11[3];
            v27 = *v11;
            v29 = v11[1];
            v18 = *v17;
            v19 = v17[1];
            v20 = v17[3];
            v11[2] = v17[2];
            v11[3] = v20;
            *v11 = v18;
            v11[1] = v19;
            v17[2] = v31;
            v17[3] = v33;
            *v17 = v27;
            v17[1] = v29;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v11 - 4, v11) & 1) == 0)
          {
            v11 = sub_10014AF6C(v11, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v21 = sub_10014B0C8(v11, a2, a3);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = sub_1003D8F08(v11, v21, a3);
          v11 = v21 + 4;
          if (!sub_1003D8F08(v21 + 4, a2, a3))
          {
            v12 = v13 + 1;
            if (v23)
              continue;
LABEL_14:
            sub_1003D8B84(a1, v21, a3, -v13, a5 & 1);
            v11 = v21 + 4;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          sub_10014B618((uint64_t)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(__n128 *, __n128 *))a3, a6);
        return;
    }
  }
}

uint64_t sub_1000CB468(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(double *)(v4 + 24);
        if (v6 < *(double *)v4)
        {
          v10 = *(_OWORD *)(v4 + 32);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v6 >= *(double *)(v8 - 24))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(double *)v9 = v6;
          *(_OWORD *)(v9 + 8) = v10;
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_1000CB508(__int128 *a1, __int128 *a2, __int128 *a3)
{
  double v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v3 = *(double *)a2;
  v4 = *(double *)a3;
  if (*(double *)a2 < *(double *)a1)
  {
    if (v4 < v3)
    {
      v5 = *((_QWORD *)a1 + 2);
      v6 = *a1;
      v7 = *((_QWORD *)a3 + 2);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = v7;
      *a3 = v6;
      *((_QWORD *)a3 + 2) = v5;
      return 1;
    }
    v14 = *((_QWORD *)a1 + 2);
    v15 = *a1;
    v16 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v16;
    *a2 = v15;
    *((_QWORD *)a2 + 2) = v14;
    if (*(double *)a3 >= *(double *)a2)
      return 1;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *a2;
    v19 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v19;
    *a3 = v18;
    *((_QWORD *)a3 + 2) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = *((_QWORD *)a2 + 2);
    v9 = *a2;
    v10 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v10;
    *a3 = v9;
    *((_QWORD *)a3 + 2) = v8;
    if (*(double *)a2 >= *(double *)a1)
      return 1;
    v11 = *((_QWORD *)a1 + 2);
    v12 = *a1;
    v13 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v13;
    *a2 = v12;
    *((_QWORD *)a2 + 2) = v11;
    return 2;
  }
  return 0;
}

double *sub_1000CB614(double *a1, double *a2)
{
  double v2;
  double *v3;
  double v4;
  __int128 *v5;
  double v6;
  __int128 v7;
  double v8;
  double v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = *a1;
  if (*a1 >= *(a2 - 3))
  {
    v5 = (__int128 *)(a1 + 3);
    do
    {
      v3 = (double *)v5;
      if (v5 >= (__int128 *)a2)
        break;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v13 = *(_OWORD *)v3;
    v7 = *(_OWORD *)a2;
    v3[2] = a2[2];
    *(_OWORD *)v3 = v7;
    *((_QWORD *)a2 + 2) = v14;
    *(_OWORD *)a2 = v13;
    do
    {
      v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      v9 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    v10 = *(_OWORD *)(v3 - 3);
    a1[2] = *(v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_OWORD *)v3 - 1) = v12;
  return v3;
}

uint64_t sub_1000CB6FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  unint64_t v5;
  double v6;
  double v7;
  __int128 *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v17;

  v2 = 0;
  v3 = *(double *)a1;
  do
  {
    v4 = *(double *)(a1 + v2 + 24);
    v2 += 24;
  }
  while (v4 < v3);
  v5 = a1 + v2;
  if (v2 == 24)
  {
    do
    {
      if (v5 >= a2)
        break;
      v7 = *(double *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *(double *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  v8 = (__int128 *)(a1 + v2);
  if (v5 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *v8;
      v11 = *((_QWORD *)v8 + 2);
      v12 = *(_QWORD *)(v9 + 16);
      *v8 = *(_OWORD *)v9;
      *((_QWORD *)v8 + 2) = v12;
      *(_QWORD *)(v9 + 16) = v11;
      *(_OWORD *)v9 = v10;
      do
      {
        v13 = *((double *)v8 + 3);
        v8 = (__int128 *)((char *)v8 + 24);
      }
      while (v13 < v3);
      do
      {
        v14 = *(double *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if ((__int128 *)((char *)v8 - 24) != (__int128 *)a1)
  {
    v15 = *(__int128 *)((char *)v8 - 24);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *((double *)v8 - 3) = v3;
  *(v8 - 1) = v17;
  return (uint64_t)v8 - 24;
}

BOOL sub_1000CB7E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1000CB508((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1000CB99C(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      sub_1000CBA6C((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (unint64_t *)(a1 + 72), (unint64_t *)(a2 - 24));
      return 1;
    default:
      v10 = (double *)(a1 + 48);
      sub_1000CB508((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(double *)v11;
    if (*(double *)v11 < *v10)
    {
      v18 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(double *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(double *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (double *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_1000CB99C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000CB508((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    a4[2] = v9;
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

__n128 sub_1000CBA6C(__n128 *a1, __n128 *a2, __n128 *a3, unint64_t *a4, unint64_t *a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  sub_1000CB99C((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  result.n128_u64[0] = *a5;
  if (*(double *)a5 < *(double *)a4)
  {
    v11 = a4[2];
    result = *(__n128 *)a4;
    v12 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v12;
    *(__n128 *)a5 = result;
    a5[2] = v11;
    result.n128_u64[0] = *a4;
    if (*(double *)a4 < a3->n128_f64[0])
    {
      v13 = a3[1].n128_u64[0];
      result = *a3;
      v14 = a4[2];
      *a3 = *(__n128 *)a4;
      a3[1].n128_u64[0] = v14;
      *(__n128 *)a4 = result;
      a4[2] = v13;
      result.n128_u64[0] = a3->n128_u64[0];
      if (a3->n128_f64[0] < a2->n128_f64[0])
      {
        v15 = a2[1].n128_u64[0];
        result = *a2;
        v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        result.n128_u64[0] = a2->n128_u64[0];
        if (a2->n128_f64[0] < a1->n128_f64[0])
        {
          v17 = a1[1].n128_u64[0];
          result = *a1;
          v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1000CBB78(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  __int128 v25;
  __n128 v26;
  __n128 v29;
  unint64_t v30;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__int128 *)(a1 + 24 * v11);
      do
      {
        a5 = sub_1000CBD90(a1, a5, a4, v10, v13);
        v13 = (__int128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (v15->n128_f64[0] < *(double *)a1)
        {
          v16 = v15[1].n128_u64[0];
          v17 = *v15;
          v18 = *(_QWORD *)(a1 + 16);
          *v15 = *(__n128 *)a1;
          v15[1].n128_u64[0] = v18;
          *(__n128 *)a1 = v17;
          *(_QWORD *)(a1 + 16) = v16;
          sub_1000CBD90(a1, v17, a4, v10, (__int128 *)a1);
        }
        v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 25)
    {
      v19 = v9 / 0x18uLL;
      do
      {
        v20 = 0;
        v29 = *(__n128 *)a1;
        v30 = *(_QWORD *)(a1 + 16);
        v21 = a1;
        do
        {
          v22 = v21;
          v21 += 24 * v20 + 24;
          v23 = 2 * v20;
          v20 = (2 * v20) | 1;
          v24 = v23 + 2;
          if (v24 < v19 && *(double *)v21 < *(double *)(v21 + 24))
          {
            v21 += 24;
            v20 = v24;
          }
          v25 = *(_OWORD *)v21;
          *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
          *(_OWORD *)v22 = v25;
        }
        while (v20 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = (__n128 *)((char *)v7 - 24);
        if ((__n128 *)v21 == v7)
        {
          *(_QWORD *)(v21 + 16) = v30;
          *(__n128 *)v21 = v29;
        }
        else
        {
          v26 = *v7;
          *(_QWORD *)(v21 + 16) = v7[1].n128_u64[0];
          *(__n128 *)v21 = v26;
          *v7 = v29;
          v7[1].n128_u64[0] = v30;
          sub_1000CBE90(a1, v21 + 24, v29, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 sub_1000CBD90(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, __int128 *a5)
{
  int64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (a4 >= 2)
  {
    v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5 - a1) >> 3)))
    {
      v6 = (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3)) | 1;
      v7 = (__int128 *)(a1 + 24 * v6);
      if (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2 < a4 && *(double *)v7 < *((double *)v7 + 3))
      {
        v7 = (__int128 *)((char *)v7 + 24);
        v6 = 0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2;
      }
      result.n128_u64[0] = *(_QWORD *)a5;
      if (*(double *)v7 >= *(double *)a5)
      {
        v12 = *(__n128 *)((char *)a5 + 8);
        do
        {
          v8 = a5;
          a5 = v7;
          v9 = *v7;
          *((_QWORD *)v8 + 2) = *((_QWORD *)v7 + 2);
          *v8 = v9;
          if (v5 < v6)
            break;
          v10 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (__int128 *)(a1 + 24 * v6);
          v11 = v10 + 2;
          if (v11 < a4 && *(double *)v7 < *((double *)v7 + 3))
          {
            v7 = (__int128 *)((char *)v7 + 24);
            v6 = v11;
          }
        }
        while (*(double *)v7 >= result.n128_f64[0]);
        *(_QWORD *)a5 = result.n128_u64[0];
        result = v12;
        *(__int128 *)((char *)a5 + 8) = (__int128)v12;
      }
    }
  }
  return result;
}

__n128 sub_1000CBE90(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __n128 v10;

  if (a5 >= 2)
  {
    v5 = (unint64_t)(a5 - 2) >> 1;
    v6 = (__int128 *)(a1 + 24 * v5);
    v7 = (__int128 *)(a2 - 24);
    result.n128_u64[0] = *(_QWORD *)(a2 - 24);
    if (*(double *)v6 < result.n128_f64[0])
    {
      v10 = *(__n128 *)(a2 - 16);
      do
      {
        v8 = v7;
        v7 = v6;
        v9 = *v6;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
        *v8 = v9;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (__int128 *)(a1 + 24 * v5);
      }
      while (*(double *)v6 < result.n128_f64[0]);
      *(_QWORD *)v7 = result.n128_u64[0];
      result = v10;
      *(__int128 *)((char *)v7 + 8) = (__int128)v10;
    }
  }
  return result;
}

void sub_1000CC0F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CC128(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CC8C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CC8F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1000CCB6C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    return (*(uint64_t (**)(void))(v1 + 16))();
  else
    return 1;
}

uint64_t sub_1000CCB84(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000CD51C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CD54C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1000CE7B4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 378) = 0;
  return result;
}

void sub_1000CE960(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CE990(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CF988(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CF9B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CF9E8(uint64_t a1, int a2)
{
  CGContext *v4;
  __int128 v5;
  CGImageRef Image;
  uint64_t v7;
  objc_class *v8;
  id v9;
  void *v10;
  CGAffineTransform transform;

  v4 = sub_10040FA64(objc_msgSend(*(id *)(a1 + 32), "p_bitmapContextOptionsForDrawingStroke:", *(_QWORD *)(a1 + 40)) | 8u, *(double *)(a1 + 72), *(double *)(a1 + 80));
  CGContextSaveGState(v4);
  v5 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&transform.a = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&transform.c = v5;
  *(_OWORD *)&transform.tx = *(_OWORD *)(a1 + 120);
  CGContextConcatCTM(v4, &transform);
  objc_msgSend(*(id *)(a1 + 40), "paintPath:wantsInteriorStroke:inContext:useFastDrawing:parameterized:shouldReverseDrawOrder:withLayoutOptions:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "CGPath"), 0, v4, 0, 0, 0, *(_QWORD *)(a1 + 56));
  CGContextRestoreGState(v4);
  Image = CGBitmapContextCreateImage(v4);
  CGContextRelease(v4);
  if (a2)
  {
    v8 = (objc_class *)objc_opt_class(CRLBackgroundUpdatableRenderable, v7);
    v9 = sub_1002223BC(v8, *(void **)(a1 + 64));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    objc_msgSend(v10, "setContentsFromBackground:", Image);
    if (Image)
      CFRelease(Image);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 64), "setContents:", Image);
    if (Image)
      CFRelease(Image);
  }
}

uint64_t sub_1000CFAFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CFB0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000CFB3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D143C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[2];
  void (*v7)(uint64_t, uint64_t);
  void *v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v7 = sub_1000D14E0;
  v8 = &unk_10122D3D8;
  v4 = *(_QWORD *)(a1 + 32);
  v9 = v3;
  v10 = v4;
  v5 = v3;
  if (+[NSThread isMainThread](NSThread, "isMainThread", _NSConcreteStackBlock, 3221225472))
    ((void (*)(_QWORD *))v7)(v6);
  else
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);

}

void sub_1000D14E0(uint64_t a1, uint64_t a2)
{
  objc_class *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = (objc_class *)objc_opt_class(CRLColor, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
  v5 = sub_1002223BC(v3, v4);
  v8 = (id)objc_claimAutoreleasedReturnValue(v5);

  objc_msgSend(*(id *)(a1 + 40), "p_forDragAndDropSetColor:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "interactiveCanvasController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "editingCoordinator"));
  objc_msgSend(v7, "resumeCollaborationWithReason:", CFSTR("CRLShapeDragAndDrop"));

}

void sub_1000D18F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D1920(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D1950(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D1980(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D2DD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D2E04(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D3CA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D3CD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D3D00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D3D30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D436C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D439C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D467C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D46AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D50E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D5110(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D5674(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D56A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D5958(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D5988(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D5BDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D5C0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D5C3C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id location;

  v3 = a2;
  v4 = v3;
  if (v3 && objc_msgSend(v3, "needsDownload"))
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 40);
    v6 = _NSConcreteStackBlock;
    v7 = 3221225472;
    v8 = sub_1000D5D20;
    v9 = &unk_101235C20;
    objc_copyWeak(&v10, &location);
    objc_msgSend(v4, "addDownloadObserverWithIdentifier:options:handler:", v5, 2, &v6);
    objc_msgSend(v4, "downloadIfNeeded", v6, v7, v8, v9);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&location);
  }

}

void sub_1000D5D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D5D20(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "p_handleAssetPreparationCompletion");

}

void sub_1000D6DB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D6DE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D6E14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D6E44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000D72B8(id a1)
{
  return a1;
}

void sub_1000D72CC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

void sub_1000D76F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000D7728(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1000D7994(uint64_t a1)
{
  if (a1 == 2)
    return 2;
  else
    return a1 == 1;
}

uint64_t sub_1000D79AC(int a1)
{
  if (a1 == 2)
    return 2;
  else
    return a1 == 1;
}

void sub_1000D79C4(CGContextRef c, double a2)
{
  double v2;
  CGAffineTransform v4;
  CGAffineTransform v5;

  v2 = a2;
  if (a2 <= 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101235D00);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF73D0();
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF735C();
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void _SFRSetLineWidth(CGContextRef, CGFloat)"), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPath.m"), 199, 0, "lineWidth (%f) should be greater than zero.", *(_QWORD *)&v2);
    CGContextGetCTM(&v4, c);
    CGAffineTransformInvert(&v5, &v4);
    v2 = v5.a + v5.c;
  }
  CGContextSetLineWidth(c, v2);
}

void sub_1000D7B20(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D7B48(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void *sub_1000D7E44(void *a1, const char *a2)
{
  double *v2;

  switch(*(_DWORD *)a2)
  {
    case 0:
      a1 = objc_msgSend(a1, "moveToPoint:", **((double **)a2 + 1), *(double *)(*((_QWORD *)a2 + 1) + 8));
      break;
    case 1:
      a1 = objc_msgSend(a1, "lineToPoint:", **((double **)a2 + 1), *(double *)(*((_QWORD *)a2 + 1) + 8));
      break;
    case 2:
      a1 = objc_msgSend(a1, "curveToPoint:controlPoint:", *(double *)(*((_QWORD *)a2 + 1) + 16), *(double *)(*((_QWORD *)a2 + 1) + 24), **((double **)a2 + 1), *(double *)(*((_QWORD *)a2 + 1) + 8));
      break;
    case 3:
      v2 = (double *)*((_QWORD *)a2 + 1);
      a1 = objc_msgSend(a1, "curveToPoint:controlPoint1:controlPoint2:", v2[4], v2[5], *v2, v2[1], v2[2], v2[3]);
      break;
    case 4:
      a1 = objc_msgSend(a1, "closePath");
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_1000D7EAC(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D7ED4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8B58(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8B80(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8BA8(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8BD0(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8BF8(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8C20(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8C48(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8C70(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8DE8(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8E10(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8FD4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D8FFC(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D91A8(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D91D0(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D9740(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000D9768(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

id sub_1000D9C8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "lineToPoint:");
}

void sub_1000DAED0(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DAEF8(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DB130(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DB158(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DB558(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DB580(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DB86C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DB894(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DBBA8(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DBBD0(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DBF2C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DBF54(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DBF7C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DBFA4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DC4E4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DC50C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DC534(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DC55C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DC584(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DC5AC(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DC998(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DC9C0(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DCC64(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DCC8C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DD2C4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DD2EC(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DD314(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DD33C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DDC5C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DDC84(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DDCAC(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DDCD4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DE3BC(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DE3E4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DE40C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DE434(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DE8C4(uint64_t a1, int *a2, _BYTE *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  char *v8;

  v5 = *a2;
  v6 = (const char *)(a1 + v5);
  if (*(_BYTE *)(a1 + v5) == 32)
  {
    do
    {
      v7 = a1 + v5++;
      *a2 = v5;
    }
    while (*(_BYTE *)(v7 + 1) == 32);
    v6 = (const char *)(a1 + v5);
  }
  v8 = 0;
  strtod(v6, &v8);
  if (v6 == v8)
    *a3 = 1;
  else
    *a2 += (_DWORD)v8 - (_DWORD)v6;
}

void sub_1000DE95C(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DE984(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DE9AC(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DE9D4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DED28(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DED50(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DED78(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DEDA0(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DF0C8(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DF0F0(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DF2A4(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DF2CC(id a1)
{
  off_1013D9070 = sub_1003C0E38("CRLAssertCat");
}

void sub_1000DF4D0(uint64_t a1, float *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  float v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[64];
  _BYTE v34[64];
  _OWORD v35[16];

  v4 = 0;
  v5 = *(double *)a1;
  v6 = *(double *)(a1 + 8);
  v7 = 0.0;
  v8 = v6;
  v9 = *(double *)a1;
  do
  {
    v10 = *(double *)(a1 + v4 + 16);
    v11 = *(double *)(a1 + v4 + 24);
    v7 = sub_10006108C(v9, v8, v10, v11) + v7;
    v4 += 16;
    v8 = v11;
    v9 = v10;
  }
  while (v4 != 48);
  v12 = sub_10006108C(v5, v6, *(double *)(a1 + 48), *(double *)(a1 + 56));
  if ((float)(v7 - v12) <= 0.1)
  {
    *a2 = *a2 + v7;
  }
  else
  {
    v13 = *(_OWORD *)(a1 + 16);
    v35[0] = *(_OWORD *)a1;
    v35[1] = v13;
    v14 = *(_OWORD *)(a1 + 48);
    v35[2] = *(_OWORD *)(a1 + 32);
    v35[3] = v14;
    v15 = 3;
    v16 = 1;
    __asm { FMOV            V0.2D, #0.5 }
    v22 = v35;
    do
    {
      v23 = 0;
      v24 = (float64x2_t)v35[4 * v16 - 4];
      do
      {
        v25 = (float64x2_t *)&v22[v23];
        v26 = v25[1];
        v25[4] = vmlaq_f64(vmulq_f64(v26, _Q0), _Q0, v24);
        ++v23;
        v24 = v26;
      }
      while (v15 != v23);
      ++v16;
      --v15;
      v22 += 4;
    }
    while (v16 != 4);
    v27 = 0;
    v28 = v35;
    do
    {
      v29 = *v28;
      v28 += 4;
      *(_OWORD *)&v34[v27] = v29;
      v27 += 16;
    }
    while (v27 != 64);
    v30 = v33;
    v31 = 3;
    v32 = 12;
    do
    {
      *v30++ = v35[v32];
      --v31;
      v32 -= 3;
    }
    while (v31 != -1);
    sub_1000DF4D0(v34, a2);
    sub_1000DF4D0(v33, a2);
  }
}

void sub_1000DF700(id a1)
{
  void *v1;
  id v2;
  int v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  size_t size;

  size = 0;
  sysctlbyname("hw.machine", 0, &size, 0, 0);
  v1 = malloc_type_malloc(size, 0xF2D9B89FuLL);
  sysctlbyname("hw.machine", v1, &size, 0, 0);
  v2 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v1);
  free(v1);
  objc_storeStrong((id *)&qword_101414DC8, v2);
  if (!qword_101414DC8)
  {
    v3 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012365C8);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DF8698(v3, v4);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012365E8);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE81F0(v5, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[UIDevice(CRLAdditions) crl_platformString]_block_invoke"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/UIDevice_CRLAdditions.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 46, 0, "invalid nil value for '%{public}s'", "s_platformString");

  }
}

void sub_1000DF8E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000DF910(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_1000E0398(id a1, CAFilter *a2)
{
  void *v2;
  char v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CAFilter name](a2, "name"));
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("CRLCALayerAdditionsAXDoubleInvertFilterKey")) ^ 1;

  return v3;
}

id sub_1000E03D8()
{
  void *v0;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[CAFilter filterWithType:](CAFilter, "filterWithType:", kCAFilterColorInvert));
  objc_msgSend(v0, "setName:", CFSTR("CRLCALayerAdditionsAXDoubleInvertFilterKey"));
  objc_msgSend(v0, "setAccessibility:", 1);
  return v0;
}

void sub_1000E06D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E0700(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E0B14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E0B44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E0B74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E0BA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E1244(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E1274(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E12A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E12D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E1304(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E1334(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E1770(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000E1780(uint64_t a1)
{

}

void sub_1000E1788(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1000E17D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_1000E19F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E1A20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E20B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E20E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_1000E27F8(id a1, _TtC8Freeform12CRLBoardItem *a2)
{
  _TtC8Freeform12CRLBoardItem *v2;
  uint64_t v3;
  uint64_t v4;
  char isKindOfClass;

  v2 = a2;
  v4 = objc_opt_class(_TtC8Freeform21CRLConnectionLineItem, v3);
  isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  return isKindOfClass & 1;
}

void sub_1000E2840(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E2870(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_1000E2C18(id a1, _TtC8Freeform12CRLBoardItem *a2)
{
  return -[CRLBoardItem requiresAdditionalBoardItemsForCopyImaging](a2, "requiresAdditionalBoardItemsForCopyImaging");
}

void sub_1000E2C20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E2C50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E3758(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E3788(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E3FAC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E3FDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E42EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E431C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E4618(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E4648(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E4AF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E4B28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E5298(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E52C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E52F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E5328(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E5358(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E5388(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E62C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E62F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E6DD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E6E08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E6E38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E6E68(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  sub_1000E7360(&a9);
  _Unwind_Resume(a1);
}

void sub_1000E7360(id *a1)
{

}

void sub_1000E75B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E75E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E79B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E79E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E7A14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E7A44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_1000E7AC8(id a1, NSString *a2)
{
  return !-[NSString hasPrefix:](a2, "hasPrefix:", CFSTR("dyn."));
}

uint64_t sub_1000E8170(double a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t result;
  double v13;
  double v14;
  double v15;
  double v16;

  result = sub_1000600B4(a3, a4, a1, a2, a5, a6);
  if ((_DWORD)result)
  {
    if (sub_10005FDF0(a1, a2, a3, a4) || sub_10005FDF0(a1, a2, a5, a6))
    {
      return 1;
    }
    else
    {
      v13 = sub_10005FDB0(a3, a4, a5);
      return sub_100060F8C(a1, a2, v13, v14, v15, v16);
    }
  }
  return result;
}

void sub_1000E8504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000E8634(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E88D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E8B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E8D5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000E8DA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E8DD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E8EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E8FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000E9090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E912C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E91C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E9264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E9420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E971C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E9768(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E9798(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E9A34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E9C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E9CA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E9CD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000E9F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1000E9FD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EA004(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

__n128 sub_1000EA034(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1000EA058(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1000EA070(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  double *v7;
  unint64_t v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  char *v17;

  if (a2 != 3)
  {
    v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v7 = (double *)v6[7];
    v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (double *)v6[6];
      v11 = ((char *)v7 - (char *)v10) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        sub_100007810();
      v13 = v8 - (_QWORD)v10;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)sub_10001FB2C((uint64_t)(v6 + 8), v14);
        v10 = (double *)v6[6];
        v7 = (double *)v6[7];
      }
      else
      {
        v15 = 0;
      }
      v16 = (double *)&v15[16 * v11];
      v17 = &v15[16 * v14];
      *v16 = a3;
      v16[1] = a4;
      v9 = v16 + 2;
      if (v7 != v10)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
          v16 -= 2;
          v7 -= 2;
        }
        while (v7 != v10);
        v10 = (double *)v6[6];
      }
      v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *v7 = a3;
      v7[1] = a4;
      v9 = v7 + 2;
    }
    v6[7] = v9;
  }
}

void sub_1000EA584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EB304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1000EB4D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB508(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB538(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB568(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB598(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB5C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB5F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB628(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB658(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB688(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EB924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EBB44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000EC1AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EC288(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EC2B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EC2E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EC318(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EC348(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EC378(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EC45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EC620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EC664(double *a1, double a2, double a3)
{
  void *v4;
  double v5;
  _QWORD v6[5];
  void *v7;
  void *v8;
  uint64_t v9;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 24))
  {
    v4 = (void *)*((_QWORD *)a1 + 4);
    v5 = a1[6];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000EC718;
    v6[3] = &unk_1012370A0;
    *(double *)&v6[4] = a1[7];
    if (v4)
    {
      objc_msgSend(v4, "closestHitsTo:withSearchThreshold:passingTest:", v6, a2, a3, v5);
      v4 = v7;
      if (v7 != v8)
      {
        if (!v7)
          return;
        goto LABEL_5;
      }
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 24) = 0;
    if (!v4)
      return;
LABEL_5:
    v8 = v4;
    operator delete(v4);
  }
}

BOOL sub_1000EC718(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) != a2;
}

void sub_1000EC794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000ED2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000ED3A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED3D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED400(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED430(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED460(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED490(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED4C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED4F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED520(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED550(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000ED6B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000ED988(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1000EDE00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EDE3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EDE6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EDE9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EDECC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EE394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EE3CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EE3FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EEB20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EEB5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EEB8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EEBBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EEBEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EF4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EF620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000EFDD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000EFE7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EFEAC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EFEDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EFF0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EFF3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000EFF6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F023C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000F0264(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F0294(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F0F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000F0F8C(uint64_t a1)
{
  id result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*(id *)(a1 + 32), "columnRectForRange:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v3[4] = v4;
  v3[5] = v5;
  v3[6] = v6;
  v3[7] = v7;
  return result;
}

void sub_1000F1090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000F10A8(uint64_t a1)
{
  id result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*(id *)(a1 + 32), "glyphRectForRange:includingLabel:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v3[4] = v4;
  v3[5] = v5;
  v3[6] = v6;
  v3[7] = v7;
  return result;
}

void sub_1000F118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000F11A4(uint64_t a1)
{
  id result;
  uint64_t v3;
  uint64_t v4;

  result = objc_msgSend(*(id *)(a1 + 32), "rangeOfLineFragmentAtIndex:", *(_QWORD *)(a1 + 48));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_QWORD *)(v3 + 32) = result;
  *(_QWORD *)(v3 + 40) = v4;
  return result;
}

void sub_1000F1274(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_1000F128C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "lineIndexForCharIndex:eol:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000F180C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

__n128 sub_1000F1830(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  _OWORD *v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "geometry"));
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "transform");
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
    v7 = 0u;
  }
  v5 = *(_OWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v5[2] = v7;
  v5[3] = v8;
  v5[4] = v9;

  return result;
}

void sub_1000F1B30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F1B60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F1D54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F1D84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F1F70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F1FA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F277C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F27AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F2974(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F29A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F2B3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F2B6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F2F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F2FDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F300C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F303C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMoviePlaybackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB560;
  off_1013DB560 = v2;

}

void sub_1000F306C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "p_setTimeValuesWithoutScrubbing");

}

void sub_1000F3098(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F30C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F3328(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F3358(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F3388(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMoviePlaybackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB560;
  off_1013DB560 = v2;

}

void sub_1000F3F04(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F3F34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F43BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F43EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F4734(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F4764(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F48D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F4900(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F4F40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_strokeColorForStyle:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32)));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  objc_msgSend(v5, "setStrokeColor:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "CGColor"));

}

void sub_1000F52CC(id a1)
{
  CRLWPFallbackFontList *v1;
  void *v2;

  v1 = objc_alloc_init(CRLWPFallbackFontList);
  v2 = (void *)qword_101414DE8;
  qword_101414DE8 = (uint64_t)v1;

}

NSDictionary *__cdecl sub_1000F5404(id a1)
{
  return (NSDictionary *)+[CRLWPFont localizedMasqueradingFontFamilyNames](CRLWPFont, "localizedMasqueradingFontFamilyNames");
}

void sub_1000F6140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F6158(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000F6168(uint64_t a1)
{

}

void sub_1000F6170(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v6 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  if (a3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012378B0);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFA1B0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012378D0);
    v7 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE87A4(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLFreehandDrawingToolPixelEraser p_endErasingAndFinalize:]_block_invoke"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolPixelEraser.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 178, 0, "expected nil value for '%{public}s'", "shapeStrokes");

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1000F62FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F632C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F6F50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F6F80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F822C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F825C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F828C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F82BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000F82EC(_OWORD *a1, void *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a1[3];
  v4[0] = a1[2];
  v4[1] = v2;
  v4[2] = a1[4];
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "crl_strokeByAppendingTransform:", v4));
}

void sub_1000F8324(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F8354(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F90B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F90E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F9110(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F9140(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F9A98(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F9AC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F9AF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000F9B28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FA3C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FA3F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FA420(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FA450(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FA480(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FA4B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FA4E0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000FA5A8;
  v8[3] = &unk_101237C18;
  v6 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v13 = a3;
  v11 = *(id *)(a1 + 56);
  v12 = v5;
  v7 = v5;
  objc_msgSend(v6, "p_tokenizeKeywordIfNeeded:yieldingKeyword:", v7, v8);

}

void sub_1000FA5A8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _UNKNOWN **v8;
  CRLShapeSearchResult *v9;
  void *v10;
  id v11;
  id v12;
  id v13;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));
  v12 = objc_msgSend(v5, "mutableCopy");

  v6 = (uint64_t)v12;
  if (!v12)
    v6 = objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSet](NSMutableOrderedSet, "orderedSet"));
  v13 = (id)v6;
  v7 = *(void **)(a1 + 40);
  if (v7)
    v8 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 64)));
  else
    v8 = &off_1012CBB60;
  v9 = -[CRLShapeSearchResult initWithIdentifier:matchingKeyword:priority:score:]([CRLShapeSearchResult alloc], "initWithIdentifier:matchingKeyword:priority:score:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), objc_msgSend(v8, "unsignedIntegerValue"), 0);
  if (objc_msgSend(v13, "containsObject:", v9))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndex:", objc_msgSend(v13, "indexOfObject:", v9)));
    v11 = objc_msgSend(v10, "priority");
    if (v11 >= (id)-[CRLShapeSearchResult priority](v9, "priority"))
    {

      goto LABEL_11;
    }
    objc_msgSend(v13, "removeObject:", v9);

  }
  objc_msgSend(v13, "addObject:", v9);
LABEL_11:
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v13, v4);

}

id sub_1000FA794(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_removeSearchResultWithIdentifier:forTokenizedKeyword:", *(_QWORD *)(a1 + 40), a2);
}

void sub_1000FABD0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet punctuationCharacterSet](NSCharacterSet, "punctuationCharacterSet"));
  v2 = (void *)qword_101414E00;
  qword_101414E00 = v1;

}

id sub_1000FABFC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_1000FAE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FAE9C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  unsigned int v8;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
}

BOOL sub_1000FB174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  if (objc_msgSend(*(id *)(a1 + 32), "p_rangeOfSearchTerm:inString:shouldPerformDiacriticInsensitiveSearch:", *(_QWORD *)(a1 + 40), a2, *(unsigned __int8 *)(a1 + 48)))
  {
    v3 = 1;
  }
  else
  {
    v3 = v2 == 0;
  }
  return !v3;
}

int64_t sub_1000FB218(id a1, NSString *a2, NSString *a3)
{
  return -[NSString localizedStandardCompare:](a2, "localizedStandardCompare:", a3);
}

void sub_1000FB3C8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  CRLShapeSearchResult *v5;
  void *v6;
  id v7;
  _BOOL8 v8;
  id v9;
  id v10;
  CRLShapeSearchResult *v12;
  id v13;
  void *v14;
  CRLShapeSearchResult *v15;
  void *v16;
  id v17;
  BOOL v18;
  char v19;
  CRLShapeSearchResult *v20;
  id v21;
  id v22;

  v22 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "matchingKeyword"));
  v5 = (CRLShapeSearchResult *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "crl_stringWithNormalizedHyphensAndQuotationMarks"));
  if (objc_msgSend(*(id *)(a1 + 40), "p_rangeOfSearchTerm:inString:shouldPerformDiacriticInsensitiveSearch:", *(_QWORD *)(a1 + 48), v6, *(unsigned __int8 *)(a1 + 56)))
  {
    v8 = 0;
    if (v5)
      goto LABEL_3;
LABEL_10:
    v12 = [CRLShapeSearchResult alloc];
    v13 = objc_msgSend(v22, "priority");
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "score"));
    v15 = -[CRLShapeSearchResult initWithIdentifier:matchingKeyword:priority:score:](v12, "initWithIdentifier:matchingKeyword:priority:score:", v3, v4, v13, v14);
LABEL_20:

    -[CRLShapeSearchResult setIsExactMatch:](v15, "setIsExactMatch:", v8);
    v5 = v15;
    goto LABEL_21;
  }
  v8 = v7 == objc_msgSend(v6, "length");
  if (!v5)
    goto LABEL_10;
LABEL_3:
  v9 = objc_msgSend(v22, "priority");
  v10 = -[CRLShapeSearchResult priority](v5, "priority");
  if (-[CRLShapeSearchResult isExactMatch](v5, "isExactMatch"))
  {
    if ((uint64_t)v9 <= (uint64_t)v10 || !v8)
      goto LABEL_21;
    goto LABEL_19;
  }
  if (v9 == v10)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(-[CRLShapeSearchResult matchingKeyword](v5, "matchingKeyword"));
    v17 = objc_msgSend(v16, "length");
    v18 = v17 > objc_msgSend(v4, "length");

  }
  else
  {
    v18 = 0;
  }
  v19 = (uint64_t)v9 > (uint64_t)v10 || v8;
  if ((v19 & 1) != 0 || v18)
  {
LABEL_19:
    v20 = [CRLShapeSearchResult alloc];
    v21 = objc_msgSend(v22, "priority");
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "score"));
    v15 = -[CRLShapeSearchResult initWithIdentifier:matchingKeyword:priority:score:](v20, "initWithIdentifier:matchingKeyword:priority:score:", v3, v4, v21, v14);

    goto LABEL_20;
  }
LABEL_21:
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v3);

}

void sub_1000FB830(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FB860(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FBAF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FBB24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FBD7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FBDAC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FC238(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FC268(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FC334(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_1000FC3F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

double sub_1000FC444@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  double result;

  *(double *)a1 = 2.0 / (a3 - a2);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(double *)(a1 + 40) = 2.0 / (a5 - a4);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(double *)(a1 + 80) = -2.0 / (a7 - a6);
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = -(a2 + a3) / (a3 - a2);
  *(double *)(a1 + 104) = -(a4 + a5) / (a5 - a4);
  result = -(a6 + a7) / (a7 - a6);
  *(double *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

void sub_1000FC8C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FC8F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FD180(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FD1B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FDC90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FDCC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FE130(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FE160(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FE380(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FE3B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FEE88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FEEB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FEEE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FEF18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FEF48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FEF78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FEFA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FEFD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1000FF008(void *a1, uint64_t a2, int a3)
{
  id v5;
  id v6;
  unint64_t v7;
  void *v8;
  unint64_t i;
  uint64_t j;
  float v11;
  unsigned __int16 *v12;
  float *v13;
  unsigned int v14;
  int v15;
  float v16;
  const CGPoint *v17;
  double y;
  double x;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;

  v5 = a1;
  v6 = objc_msgSend(v5, "pointCount");
  if ((unint64_t)v6 >= *(_QWORD *)(a2 + 8))
    v7 = *(_QWORD *)(a2 + 8);
  else
    v7 = (unint64_t)v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      for (j = 0; j != 9; ++j)
      {
        v11 = 0.0;
        switch((int)j)
        {
          case 0:
            v12 = (unsigned __int16 *)objc_msgSend(v5, "altitudeData");
            goto LABEL_18;
          case 1:
            v12 = (unsigned __int16 *)objc_msgSend(v5, "azimuthData");
            goto LABEL_18;
          case 2:
            v12 = (unsigned __int16 *)objc_msgSend(v5, "opacityData");
            goto LABEL_18;
          case 3:
            v12 = (unsigned __int16 *)objc_msgSend(v5, "forceData");
            goto LABEL_18;
          case 4:
            v13 = (float *)objc_msgSend(v5, "sizeXData");
            goto LABEL_16;
          case 5:
            v13 = (float *)objc_msgSend(v5, "sizeYData");
            goto LABEL_16;
          case 6:
            v13 = (float *)objc_msgSend(v5, "timeOffsetData");
            goto LABEL_16;
          case 7:
            v13 = (float *)objc_msgSend(v5, "radius2Data");
LABEL_16:
            v14 = 0;
            v11 = v13[i];
            v15 = 1;
            break;
          case 8:
            v12 = (unsigned __int16 *)objc_msgSend(v5, "edgeWidthData");
LABEL_18:
            v15 = 0;
            v14 = v12[i];
            break;
          default:
            v14 = 0;
            v15 = 0;
            break;
        }
        if (j == 1 && a3)
        {
          v27 = 0.0;
        }
        else
        {
          v16 = (float)v14;
          if (v15)
            v16 = v11;
          *((double *)&v26 + j) = 1.0 / dbl_100EEC888[j] * v16;
        }
      }
      v17 = &CGPointZero;
      if (i < *(_QWORD *)(a2 + 8))
        v17 = (const CGPoint *)(*(_QWORD *)(a2 + 16) + 16 * i);
      x = v17->x;
      y = v17->y;
      v20 = objc_alloc((Class)PKStrokePoint);
      v21 = objc_msgSend(v20, "initWithLocation:timeOffset:size:opacity:force:azimuth:altitude:edgeWidth:radius2:", x, y, v32, v30, v31, v28, v29, v27, v26, v34, v33);
      objc_msgSend(v8, "addObject:", v21);

    }
  }
  v22 = objc_alloc((Class)PKStrokePath);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "creationDate"));
  v24 = objc_msgSend(v22, "initWithControlPoints:creationDate:", v8, v23);

  return v24;
}

void sub_1000FF280(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  char *v12;
  unint64_t v13;
  float64x2_t v14;
  double *v15;
  _BOOL4 v16;
  unint64_t v18;
  _OWORD *v19;
  double v20;
  unsigned int v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  _OWORD *v27;
  unsigned int v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  char *v41;
  NSObject *v42;
  char *v43;
  __int128 v44;
  _OWORD *v45;
  _OWORD *v46;
  unint64_t v47;
  _OWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8_t v53[4];
  unsigned int v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  int v60;
  uint8_t buf[4];
  unsigned int v62;
  __int16 v63;
  _BYTE v64[38];
  __int128 v65;
  float64x2_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = (unint64_t)objc_msgSend(v3, "elementCount");
  if (v4 >= 2)
  {
    v5 = v4;
    v6 = 4 * v4;
    *a2 = 4 * v4;
    v7 = malloc_type_malloc(v4 << 6, 0x1000040451B5BE8uLL);
    v49 = 0;
    v50 = 0;
    v8 = 0;
    a2[2] = v7;
    v47 = v5 - 1;
    v48 = v7;
    v45 = v7 + 2;
    v46 = v7 + 1;
    v9 = 1;
    *((_QWORD *)&v10 + 1) = 0x7FF0000000000000;
    *(_QWORD *)&v10 = 67109378;
    v44 = v10;
    while (1)
    {
      v66 = (float64x2_t)xmmword_100EEC438;
      v67 = xmmword_100EEC438;
      v68 = xmmword_100EEC438;
      v69 = xmmword_100EEC438;
      v11 = (char *)objc_msgSend(v3, "elementAtIndex:allPoints:", v9, &v66, v44);
      v12 = v11;
      if (v5 == 2 && v9 == 1 && (unint64_t)(v11 - 1) <= 1)
      {
        v51 = v8;
        v13 = 0;
        v14 = v66;
        v15 = &v66.f64[1];
        do
        {
          v16 = sub_10005FE60(v14.f64[0], v14.f64[1], *(v15 - 1), *v15);
          v15 += 2;
        }
        while (v16 && v13++ < 3);
        v5 = 2;
        v9 = 1;
        v8 = v51;
        if (v16)
        {
          v18 = v51 + 2;
          if (v51 + 2 < v6)
            break;
        }
      }
      if (v12 == (char *)1)
        goto LABEL_27;
      if (v12 == (char *)3)
      {
        if (v66.f64[0] != *(double *)&v67 || v66.f64[1] != *((double *)&v67 + 1))
        {
LABEL_27:
          v8 = v50 + 4;
          if (v50 + 4 > v6)
          {
            v22 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
            if (qword_10147E370 != -1)
              dispatch_once(&qword_10147E370, &stru_101238190);
            v23 = off_1013D9070;
            if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109890;
              v62 = v22;
              v63 = 2082;
              *(_QWORD *)v64 = "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)";
              *(_WORD *)&v64[8] = 2082;
              *(_QWORD *)&v64[10] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m";
              *(_WORD *)&v64[18] = 1024;
              *(_DWORD *)&v64[20] = 596;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly trying to write beyond the capacity of the control point array.", buf, 0x22u);
            }
            if (qword_10147E370 != -1)
              dispatch_once(&qword_10147E370, &stru_1012381B0);
            v24 = off_1013D9070;
            if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            {
              v38 = v24;
              v39 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
              *(_DWORD *)buf = v44;
              v62 = v22;
              v63 = 2114;
              *(_QWORD *)v64 = v39;
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

            }
            v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)"));
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m"));
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v25, v26, 596, 0, "Unexpectedly trying to write beyond the capacity of the control point array.");

            v8 = v50 + 4;
          }
          if (v8 >= v6)
          {
            v8 = v50;
          }
          else
          {
            v27 = &v48[v50];
            *v27 = v66;
            v27[1] = v66;
            v27[2] = v67;
            a2[1] = v8;
            v27[3] = v67;
            v49 = v8;
            v50 = v8;
          }
        }
      }
      else if (v12 == (char *)2)
      {
        *(_QWORD *)&v20 = *(_OWORD *)&sub_100313330(&v66, (uint64_t)buf);
        if (v9 == 1)
        {
          if (v6)
          {
            *v48 = *(_OWORD *)&v64[6];
            *v46 = *(_OWORD *)&v64[22];
            *v45 = v65;
            a2[1] = 3;
            v49 = 3;
            v50 = 3;
            v8 = 3;
          }
          else
          {
            v28 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount", v20);
            v52 = v8;
            if (qword_10147E370 != -1)
              dispatch_once(&qword_10147E370, &stru_101238110);
            v29 = off_1013D9070;
            if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v53 = 67109890;
              v54 = v28;
              v55 = 2082;
              v56 = "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)";
              v57 = 2082;
              v58 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m";
              v59 = 1024;
              v60 = 572;
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly trying to write beyond the capacity of the control point array.", v53, 0x22u);
            }
            if (qword_10147E370 != -1)
              dispatch_once(&qword_10147E370, &stru_101238130);
            v30 = off_1013D9070;
            if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            {
              v40 = v30;
              v41 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
              *(_DWORD *)v53 = v44;
              v54 = v28;
              v55 = 2114;
              v56 = v41;
              _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v53, 0x12u);

            }
            v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)"));
            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m"));
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v31, v32, 572, 0, "Unexpectedly trying to write beyond the capacity of the control point array.");

            v8 = v52;
          }
          goto LABEL_52;
        }
        if (v9 < v47)
        {
          if (v49 < v6)
          {
            a2[1] = v49 + 1;
            v48[v49++] = v65;
            v50 = v49;
            v8 = v49;
            goto LABEL_52;
          }
          v33 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount", v20);
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_101238150);
          v34 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v53 = 67109890;
            v54 = v33;
            v55 = 2082;
            v56 = "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)";
            v57 = 2082;
            v58 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m";
            v59 = 1024;
            v60 = 581;
            _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly trying to write beyond the capacity of the control point array.", v53, 0x22u);
          }
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_101238170);
          v35 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            v42 = v35;
            v43 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
            *(_DWORD *)v53 = v44;
            v54 = v33;
            v55 = 2114;
            v56 = v43;
            _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v53, 0x12u);

          }
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "struct ControlPointArray bsplineControlPointsFromBezierPath(CRLBezierPath * _Nonnull __strong, CGFloat)"));
          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v36, v37, 581, 0, "Unexpectedly trying to write beyond the capacity of the control point array.");

          v18 = v49;
          goto LABEL_16;
        }
      }
LABEL_52:
      if (++v9 == v5)
        goto LABEL_2;
    }
    v19 = &v48[v51];
    *v19 = v66;
    a2[1] = v18;
    v19[1] = v67;
    v49 = v51 + 2;
LABEL_16:
    v50 = v18;
    v8 = v18;
    goto LABEL_52;
  }
LABEL_2:

}

void sub_1000FFBA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FFBD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FFC00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FFC30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FFC60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1000FFC90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001002D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100100308(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100100338(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100100368(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001005FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100100614(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(_QWORD *)(result + 40) == a2)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_100100C7C(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "commandToResetMediaToRawPixelSize"));
  objc_msgSend(*(id *)(a1 + 32), "addCommand:", v3);

}

uint64_t sub_100100CC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100102E0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100102E3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001030FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010312C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100103600(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100103630(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

UTType *__cdecl sub_100103660(id a1, NSString *a2)
{
  return +[UTType typeWithIdentifier:](UTType, "typeWithIdentifier:", a2);
}

void sub_1001043FC(id a1)
{
  int v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_1012383F0);
  v2 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DFAD44(v1, v2);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101238410);
  v3 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DE81F0(v3, v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[CRLPencilKitInkStroke paintPath:wantsInteriorStroke:inContext:useFastDrawing:parameterized:shouldReverseDrawOrder:]_block_invoke"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPencilKitInkStroke.m"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 272, 0, "Should not try to draw a CRLPencilKitInkStroke without its strokePathCompactData and maskPath.");

}

void sub_100104534(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100104564(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100104594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10010497C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001049AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100104D7C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_100104E14(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObject:", *(_QWORD *)(a1 + 40));
}

void sub_100104E78(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[7];
  unsigned __int8 v11;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "value");
  v4 = v3;
  objc_msgSend(*(id *)(a1 + 32), "maxValue");
  v6 = v5;
  v7 = objc_msgSend(*(id *)(a1 + 32), "isIndeterminate");
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(NSObject **)(v8 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100104F20;
  v10[3] = &unk_101238478;
  v10[4] = v8;
  v10[5] = v4;
  v10[6] = v6;
  v11 = v7;
  dispatch_async(v9, v10);
  objc_autoreleasePoolPop(v2);
}

void sub_100104F20(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v2 = objc_autoreleasePoolPush();
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7), "handleValue:maxValue:isIndeterminate:", *(unsigned __int8 *)(a1 + 56), *(double *)(a1 + 40), *(double *)(a1 + 48), (_QWORD)v8);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

  objc_autoreleasePoolPop(v2);
}

id sub_1001050C0(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result != 0;
  return result;
}

void sub_100105190(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "valueInterval", (_QWORD)v8);
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = fmin(v7, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)+ 8)+ 24));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

void sub_1001055B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001055E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010598C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001059BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100105AA8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100105AB8(uint64_t a1)
{

}

void sub_100105AC0(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 48));
  objc_autoreleasePoolPop(v2);
}

void sub_100105B88(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  v2 = objc_autoreleasePoolPush();
  v3 = *(_QWORD **)(a1 + 32);
  if (v3[6] != *(_QWORD *)(a1 + 40))
  {
    objc_msgSend(v3, "p_removeProgressObserverFromProgressInQueue");
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), *(id *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "p_addProgressObserverToProgressInQueue");
    objc_msgSend(*(id *)(a1 + 32), "protected_progressDidChange");
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100105D6C(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "p_removeProgressObserverFromProgressInQueue");
  objc_msgSend(*(id *)(a1 + 32), "p_addProgressObserverToProgressInQueue");
  objc_autoreleasePoolPop(v2);
}

void sub_100105E28(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "p_removeProgressObserverFromProgressInQueue");
  objc_msgSend(*(id *)(a1 + 32), "p_addProgressObserverToProgressInQueue");
  objc_autoreleasePoolPop(v2);
}

void sub_100105FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100105FE8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "protected_progressDidChange");

}

void sub_1001063E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100106414(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100106880(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  double v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *context;
  id obj;
  _QWORD v26[4];
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id location;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];

  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  context = objc_autoreleasePoolPush();
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 48);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectAtIndexedSubscript:", (char *)i + v4, context));
        objc_msgSend(v8, "removeProgressObserver:", v7);

      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
      v4 += (uint64_t)i;
    }
    while (v3);
  }

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 48);
  *(_QWORD *)(v9 + 48) = 0;

  v11 = *(_QWORD *)(a1 + 40);
  if (v11 >= 0 && ((v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFELL)
  {
    v14 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "count"));
    objc_initWeak(&location, *(id *)(a1 + 32));
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    obj = *(id *)(*(_QWORD *)(a1 + 32) + 40);
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v29;
      do
      {
        for (j = 0; j != v15; j = (char *)j + 1)
        {
          if (*(_QWORD *)v29 != v16)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)j);
          v19 = *(double *)(a1 + 40);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_100106BD4;
          v26[3] = &unk_10122D4C0;
          objc_copyWeak(&v27, &location);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "addProgressObserverWithValueInterval:queue:handler:", v20, v26, v19));
          objc_msgSend(v14, "addObject:", v21);

          objc_destroyWeak(&v27);
        }
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
      }
      while (v15);
    }

    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(void **)(v22 + 48);
    *(_QWORD *)(v22 + 48) = v14;

    objc_destroyWeak(&location);
  }
  objc_autoreleasePoolPop(context);
}

void sub_100106B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100106BD4(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "protected_progressDidChange");

  objc_autoreleasePoolPop(v2);
}

void sub_100106F40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100106F70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001070C8(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  char v6;

  v2 = objc_autoreleasePoolPush();
  v3 = objc_msgSend(*(id *)(a1 + 32), "protected_hasProgressObservers");
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 56))
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    if (*(_BYTE *)(v4 + 56))
      v6 = v3;
    else
      v6 = 1;
    if ((v6 & 1) == 0)
      objc_msgSend(*(id *)(v4 + 40), "removeProgressObserver:");
  }
  else
  {
    objc_msgSend(*(id *)(v4 + 40), "addProgressObserver:selector:", v4, "p_progressDidChange:");
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 1;
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100107384(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_100107628(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100107658(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001078C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001078F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100107988(id result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 4);
  if (*(_BYTE *)(v1 + 72))
  {
    *(_BYTE *)(v1 + 72) = 0;
    return _objc_msgSend(*((id *)result + 4), "p_slowlyAdvanceToNextStage");
  }
  return result;
}

uint64_t sub_100107A0C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 72) = 1;
  return result;
}

id sub_100107A84(id result)
{
  unint64_t v1;
  uint64_t v2;
  id *v3;
  unint64_t *v4;
  double v5;
  double v6;

  v2 = *((_QWORD *)result + 4);
  v1 = *((_QWORD *)result + 5);
  if (v1 > *(_QWORD *)(v2 + 56) && v1 <= *(_QWORD *)(v2 + 64))
  {
    v3 = (id *)result;
    *(_QWORD *)(v2 + 56) = v1;
    v4 = (unint64_t *)*((_QWORD *)result + 4);
    v5 = (double)v4[7] / (double)v4[8];
    objc_msgSend(v4, "maxValue");
    return objc_msgSend(v3[4], "setValue:", v6 * v5);
  }
  return result;
}

id sub_100107BB4(uint64_t a1)
{
  unint64_t *v2;
  double v3;
  double v4;
  unint64_t *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v2 = *(unint64_t **)(a1 + 32);
  v3 = 1.0;
  v4 = 1.0 / (double)v2[8];
  objc_msgSend(v2, "value");
  v5 = *(unint64_t **)(a1 + 32);
  v6 = (double)v5[7];
  v8 = 1.0 - (1.0 - (v7 - v6 * v4) / v4) * 0.95;
  if (v8 > 0.95)
    v8 = 0.95;
  v9 = v4 * (v8 + v6);
  if (v9 <= 1.0)
    v3 = v9;
  objc_msgSend(v5, "maxValue");
  objc_msgSend(*(id *)(a1 + 32), "setValue:", v10 * v3);
  return _objc_msgSend(*(id *)(a1 + 32), "p_slowlyAdvanceToNextStage");
}

uint64_t CRLAccessibilityShouldPerformValidationChecks()
{
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  return byte_101414E10;
}

uint64_t __CRLAccessibilityHandleValidationErrorWithDescription(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  id v11;

  LODWORD(v10) = a1;
  v11 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", a3, &a9);
  NSLog(CFSTR("*** CRLAccessibility validation error: %@"), v11);
  if (v11)
    v10 = v10;
  else
    v10 = 0;
  if ((_DWORD)v10 == 1 && a2 != 0)
  {
    if (qword_101414E40 != -1)
      dispatch_once(&qword_101414E40, &stru_1012386A0);
    v10 = 0;
  }

  return v10;
}

uint64_t CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch()
{
  if (qword_101414E38 != -1)
    dispatch_once(&qword_101414E38, &stru_101238680);
  return byte_101414E30;
}

ptrdiff_t __CRLAccessibilitySafeIvarForKey(void *a1, void *a2, _BYTE *a3)
{
  uint64_t v6;
  objc_ivar *InstanceVariable;
  BOOL v8;
  int v9;
  int v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  InstanceVariable = object_getInstanceVariable(a1, (const char *)objc_msgSend(a2, "UTF8String"), 0);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10)
    v8 = InstanceVariable == 0;
  else
    v8 = 0;
  if (v8)
  {
    if (qword_101414E38 != -1)
      dispatch_once(&qword_101414E38, &stru_101238680);
    v10 = byte_101414E30;
    v11 = (objc_class *)objc_opt_class(a1, v6);
    NSStringFromClass(v11);
    v9 = __CRLAccessibilityHandleValidationErrorWithDescription(v10, 0, (uint64_t)CFSTR("Failed to retrieve ivar for key %@ from instance of class %@."), v12, v13, v14, v15, v16, (uint64_t)a2);
    if (!a3 && v9)
      abort();
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  if (a3)
    *a3 = v9;
  if (InstanceVariable)
    return (ptrdiff_t)a1 + ivar_getOffset(InstanceVariable);
  else
    return 0;
}

uint64_t __CRLAccessibilityPerformSafeBlock(uint64_t a1)
{
  (*(void (**)(void))(a1 + 16))();
  return 0;
}

uint64_t __CRLAccessibilityCastAsSafeCategory(void *a1, uint64_t a2, int a3, _BYTE *a4)
{
  NSString *v8;
  NSString *v9;
  int v10;
  int v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  char v29;
  int v30;
  int v31;
  objc_class *v32;
  NSString *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!a2)
    return 0;
  v8 = (NSString *)objc_msgSend(a1, "crlaxTargetClassName");
  v9 = v8;
  if (!a3)
  {
    if (v8)
    {
      v18 = NSClassFromString(v8);
      if (v18)
        goto LABEL_28;
    }
    return 0;
  }
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  LOBYTE(v10) = 0;
  if (byte_101414E10 && !v9)
  {
    if (qword_101414E38 != -1)
      dispatch_once(&qword_101414E38, &stru_101238680);
    v11 = byte_101414E30;
    v12 = NSStringFromClass((Class)a1);
    v10 = __CRLAccessibilityHandleValidationErrorWithDescription(v11, 0, (uint64_t)CFSTR("Couldn't find target class name for safe category class %@"), v13, v14, v15, v16, v17, (uint64_t)v12);
    if (!a4)
    {
      if (v10)
        goto LABEL_49;
    }
  }
  if (a4)
    *a4 = v10;
  if (!v9)
    return 0;
  v18 = NSClassFromString(v9);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  LOBYTE(v19) = 0;
  if (byte_101414E10 && !v18)
  {
    if (qword_101414E38 != -1)
      dispatch_once(&qword_101414E38, &stru_101238680);
    v20 = byte_101414E30;
    NSStringFromClass((Class)a1);
    v19 = __CRLAccessibilityHandleValidationErrorWithDescription(v20, 0, (uint64_t)CFSTR("Couldn't find target class named %@ for safe category class %@"), v21, v22, v23, v24, v25, (uint64_t)v9);
    if (!a4)
    {
      if (v19)
        goto LABEL_49;
    }
  }
  if (a4)
    *a4 = v19;
  if (!v18)
    return 0;
LABEL_28:
  if ((objc_opt_isKindOfClass(a2, v18) & 1) == 0)
  {
    v27 = objc_opt_class(a2, v26) == (_QWORD)a1;
    if (!a3)
      goto LABEL_46;
    goto LABEL_33;
  }
  v27 = 1;
  if (a3)
  {
LABEL_33:
    if (qword_101414E18 != -1)
      dispatch_once(&qword_101414E18, &stru_101238640);
    if (byte_101414E10)
      v29 = v27;
    else
      v29 = 1;
    if ((v29 & 1) != 0)
    {
      LOBYTE(v30) = 0;
LABEL_44:
      if (a4)
        *a4 = v30;
      goto LABEL_46;
    }
    if (qword_101414E38 != -1)
      dispatch_once(&qword_101414E38, &stru_101238680);
    v31 = byte_101414E30;
    v32 = (objc_class *)objc_opt_class(a2, v26);
    v33 = NSStringFromClass(v32);
    NSStringFromClass((Class)a1);
    v30 = __CRLAccessibilityHandleValidationErrorWithDescription(v31, 0, (uint64_t)CFSTR("Failed to cast object <%@: %p> as safe category %@"), v34, v35, v36, v37, v38, (uint64_t)v33);
    if (a4 || !v30)
      goto LABEL_44;
LABEL_49:
    abort();
  }
LABEL_46:
  if (v27)
    return a2;
  else
    return 0;
}

uint64_t __CRLAccessibilityCastAsClass(objc_class *a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v8;
  char isKindOfClass;
  int v10;
  int v12;
  objc_class *v13;
  NSString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
    return 0;
  isKindOfClass = objc_opt_isKindOfClass(a2, a1);
  if (a3)
  {
    if (qword_101414E18 != -1)
      dispatch_once(&qword_101414E18, &stru_101238640);
    if ((byte_101414E10 == 0) | isKindOfClass & 1)
    {
      LOBYTE(v10) = 0;
    }
    else
    {
      if (qword_101414E38 != -1)
        dispatch_once(&qword_101414E38, &stru_101238680);
      v12 = byte_101414E30;
      v13 = (objc_class *)objc_opt_class(a2, v8);
      v14 = NSStringFromClass(v13);
      NSStringFromClass(a1);
      v10 = __CRLAccessibilityHandleValidationErrorWithDescription(v12, 0, (uint64_t)CFSTR("Failed to cast object <%@: %p> as class %@"), v15, v16, v17, v18, v19, (uint64_t)v14);
      if (!a4 && v10)
        abort();
    }
    if (a4)
      *a4 = v10;
  }
  if ((isKindOfClass & 1) != 0)
    return a2;
  else
    return 0;
}

void *__CRLAccessibilityCastAsProtocol(Protocol *a1, void *a2, int a3, _BYTE *a4)
{
  uint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  int v13;
  Class v14;
  NSString *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a2)
    return 0;
  v9 = objc_msgSend(a2, "conformsToProtocol:", a1);
  if (a3)
  {
    if (qword_101414E18 != -1)
      dispatch_once(&qword_101414E18, &stru_101238640);
    if (byte_101414E10)
      v10 = v9;
    else
      v10 = 1;
    if ((v10 & 1) != 0)
    {
      LOBYTE(v11) = 0;
    }
    else
    {
      if (qword_101414E38 != -1)
        dispatch_once(&qword_101414E38, &stru_101238680);
      v13 = byte_101414E30;
      objc_opt_class(a2, v8);
      v15 = NSStringFromClass(v14);
      NSStringFromProtocol(a1);
      v11 = __CRLAccessibilityHandleValidationErrorWithDescription(v13, 0, (uint64_t)CFSTR("Failed to cast object <%@: %p> as protocol %@"), v16, v17, v18, v19, v20, (uint64_t)v15);
      if (!a4 && v11)
        abort();
    }
    if (a4)
      *a4 = v11;
  }
  if (v9)
    return a2;
  else
    return 0;
}

void *__CRLAccessibilityCastAsClassAndProtocol(objc_class *a1, Protocol *a2, void *a3, int a4, _BYTE *a5)
{
  int isKindOfClass;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  char v15;
  int v17;
  objc_class *v18;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  int v27;
  objc_class *v28;
  NSString *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (!a3)
    return 0;
  isKindOfClass = objc_opt_isKindOfClass(a3, a1);
  v12 = objc_msgSend(a3, "conformsToProtocol:", a2);
  if (a4)
  {
    if (qword_101414E18 != -1)
      dispatch_once(&qword_101414E18, &stru_101238640);
    v13 = &unk_101414000;
    v14 = (unsigned __int8 *)&unk_101414000;
    if ((byte_101414E10 == 0) | isKindOfClass & 1)
    {
      v15 = 0;
    }
    else
    {
      if (qword_101414E38 != -1)
        dispatch_once(&qword_101414E38, &stru_101238680);
      v17 = byte_101414E30;
      v18 = (objc_class *)objc_opt_class(a3, v11);
      v19 = NSStringFromClass(v18);
      NSStringFromClass(a1);
      v15 = __CRLAccessibilityHandleValidationErrorWithDescription(v17, 0, (uint64_t)CFSTR("Failed to cast object <%@: %p> as class %@"), v20, v21, v22, v23, v24, (uint64_t)v19);
      if (qword_101414E18 == -1)
      {
        v14 = (unsigned __int8 *)&unk_101414000;
        v13 = &unk_101414000;
      }
      else
      {
        dispatch_once(&qword_101414E18, &stru_101238640);
        v14 = (_BYTE *)&unk_101414000;
        v13 = (_QWORD *)&unk_101414000;
      }
    }
    if (byte_101414E10)
      v25 = v12;
    else
      v25 = 1;
    if ((v25 & 1) != 0)
    {
      v26 = 0;
    }
    else
    {
      if (v13[455] != -1)
        dispatch_once(&qword_101414E38, &stru_101238680);
      v27 = v14[3632];
      v28 = (objc_class *)objc_opt_class(a3, v11);
      v29 = NSStringFromClass(v28);
      NSStringFromProtocol(a2);
      v26 = __CRLAccessibilityHandleValidationErrorWithDescription(v27, 0, (uint64_t)CFSTR("Failed to cast object <%@: %p> as protocol %@"), v30, v31, v32, v33, v34, (uint64_t)v29);
    }
    *a5 = v15 | v26;
  }
  if ((isKindOfClass & v12) != 0)
    return a3;
  else
    return 0;
}

void CRLAccessibilityInstallSafeCategory(NSString *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class v7;
  BOOL v8;

  v7 = NSClassFromString(a1);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10)
    v8 = v7 == 0;
  else
    v8 = 0;
  if (v8)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Failed installing safe category: %@ does not exist in runtime."), v2, v3, v4, v5, v6, (uint64_t)a1))abort();
  }
  else if (v7)
  {
    -[objc_class performSelector:](v7, "performSelector:", "_crlaxInitializeSafeCategory");
  }
}

void CRLAccessibilityInstallSafeCategories(void *a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  size_t v5;
  _QWORD *v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  NSString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  _QWORD *v18;
  _BYTE *v19;
  NSString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  void *v27;
  size_t v28;
  Class *v29;
  NSMutableArray *v30;
  NSMutableSet *v31;
  NSMutableSet *v32;
  id *v33;
  char *__base;
  uint64_t v35;
  id v36;
  _QWORD __compar[7];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];

  v1 = a1;
  v2 = objc_msgSend(a1, "count");
  if (v2)
  {
    __base = (char *)malloc_type_malloc(40 * (_QWORD)v2, 0x800402FCC0CB6uLL);
    if (__base)
    {
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
      if (v3)
      {
        v4 = v3;
        v5 = 0;
        v6 = &unk_101414000;
        v7 = &unk_101414000;
        v8 = &unk_101414000;
        v9 = *(_QWORD *)v39;
        v35 = *(_QWORD *)v39;
        do
        {
          v10 = 0;
          v36 = v4;
          do
          {
            if (*(_QWORD *)v39 != v9)
              objc_enumerationMutation(v1);
            v11 = *(NSString **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v10);
            v17 = NSClassFromString(v11);
            if (v6[451] != -1)
              dispatch_once(&qword_101414E18, &stru_101238640);
            if (!v7[3600] || v17)
            {
              if (v17)
              {
                v18 = v8;
                v19 = v7;
                v20 = (NSString *)-[objc_class crlaxTargetClassName](v17, "crlaxTargetClassName");
                v26 = NSClassFromString(v20);
                if (v6[451] != -1)
                  dispatch_once(&qword_101414E18, &stru_101238640);
                if (!v19[3600] || v26)
                {
                  if (v26)
                  {
                    v27 = v1;
                    v28 = v5;
                    v29 = (Class *)&__base[40 * v5];
                    *v29 = v17;
                    v29[1] = (Class)v11;
                    v29[2] = (Class)sub_1001093AC(v17, (uint64_t)v11);
                    v29[3] = v26;
                    v29[4] = (Class)sub_1001093AC(v26, (uint64_t)v20);
                    v5 = v28 + 1;
                    v1 = v27;
                    v6 = (_QWORD *)&unk_101414000;
                  }
                  v7 = v19;
                  v8 = v18;
                  v9 = v35;
                  v4 = v36;
                }
                else
                {
                  v8 = v18;
                  if (v18[453] != -1)
                    dispatch_once(&qword_101414E28, &stru_101238660);
                  v4 = v36;
                  v7 = v19;
                  v9 = v35;
                  if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Failed installing %@ on %@. %@ does not exist in runtime."), v21, v22, v23, v24, v25, (uint64_t)v11))LABEL_37:abort();
                }
              }
            }
            else
            {
              if (v8[453] != -1)
                dispatch_once(&qword_101414E28, &stru_101238660);
              if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Failed installing safe category: %@ does not exist in runtime."), v12, v13, v14, v15, v16, (uint64_t)v11))goto LABEL_37;
            }
            v10 = (char *)v10 + 1;
          }
          while (v4 != v10);
          v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
        }
        while (v4);
      }
      else
      {
        v5 = 0;
      }
      v30 = objc_opt_new(NSMutableArray);
      v31 = objc_opt_new(NSMutableSet);
      v32 = objc_opt_new(NSMutableSet);
      __compar[0] = _NSConcreteStackBlock;
      __compar[1] = 3221225472;
      __compar[2] = sub_100109440;
      __compar[3] = &unk_101238620;
      __compar[4] = v30;
      __compar[5] = v31;
      __compar[6] = v32;
      qsort_b(__base, v5, 0x28uLL, __compar);

      if (v5)
      {
        v33 = (id *)(__base + 16);
        do
        {
          objc_msgSend(*(v33 - 2), "_crlaxInstallSafeCategoryOnClass:", v33[1]);

          v33 += 5;
          --v5;
        }
        while (v5);
      }
      free(__base);
    }
  }
}

id sub_1001093AC(void *a1, uint64_t a2)
{
  id v3;
  objc_class *v4;
  objc_class *v5;

  v3 = objc_msgSend(objc_alloc((Class)NSMutableString), "initWithString:", a2);
  v4 = (objc_class *)objc_msgSend(a1, "superclass");
  if (v4)
  {
    v5 = v4;
    do
    {
      objc_msgSend(v3, "insertString:atIndex:", CFSTR(","), 0);
      objc_msgSend(v3, "insertString:atIndex:", NSStringFromClass(v5), 0);
      v5 = (objc_class *)-[objc_class superclass](v5, "superclass");
    }
    while (v5);
  }
  return v3;
}

uint64_t sub_100109440(void **a1, void **a2, uint64_t a3)
{
  uint64_t result;

  result = (uint64_t)objc_msgSend(a2[4], "compare:", *(_QWORD *)(a3 + 32));
  if (!result)
  {
    if ((sub_1001094C8(a2, a3, a1[4], a1[5], a1[6]) & 1) != 0)
    {
      return 1;
    }
    else if ((sub_1001094C8((void **)a3, (uint64_t)a2, a1[4], a1[5], a1[6]) & 1) != 0)
    {
      return -1;
    }
    else
    {
      return (uint64_t)objc_msgSend(a2[2], "compare:", *(_QWORD *)(a3 + 16));
    }
  }
  return result;
}

uint64_t sub_1001094C8(void **a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  char v9;
  NSString *v10;
  Class v11;

  sub_10010AC4C(*a1, a3, a4, a5);
  v9 = 0;
  while (objc_msgSend(a3, "count"))
  {
    v10 = (NSString *)objc_msgSend(a3, "objectAtIndex:", 0);
    objc_msgSend(a3, "removeObjectAtIndex:", 0);
    objc_msgSend(a5, "addObject:", v10);
    if (-[NSString isEqualToString:](v10, "isEqualToString:", *(_QWORD *)(a2 + 8)))
    {
      objc_msgSend(a3, "removeAllObjects");
      v9 = 1;
    }
    else
    {
      v11 = NSClassFromString(v10);
      sub_10010AC4C(v11, a3, a4, a5);
    }

  }
  objc_msgSend(a5, "removeAllObjects");
  return v9 & 1;
}

void sub_100109B14(id a1)
{
  const __CFString *v1;
  int AppBooleanValue;

  if (!byte_101414E10)
  {
    v1 = (const __CFString *)sub_100109B94();
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("ReportValidationErrors"), v1, 0);
    byte_101414E10 = AppBooleanValue != 0;
    if (!AppBooleanValue)
    {
      if (qword_101414E28 != -1)
        dispatch_once(&qword_101414E28, &stru_101238660);
      byte_101414E10 = byte_101414E20;
    }
  }
}

id sub_100109B94()
{
  CRLAccessibility *v0;

  v0 = +[CRLAccessibility sharedInstance](CRLAccessibility, "sharedInstance");
  if (-[CRLAccessibility _crlaxRespondsToSelector:fromExtrasProtocol:skipAssertions:](v0, "_crlaxRespondsToSelector:fromExtrasProtocol:skipAssertions:", "preferencesDomain", &OBJC_PROTOCOL___CRLAccessibilityExtras, 1))return -[CRLAccessibility preferencesDomain](v0, "preferencesDomain");
  else
    return 0;
}

void sub_100109BEC(id a1)
{
  const __CFString *v1;

  if (!byte_101414E20)
  {
    v1 = (const __CFString *)sub_100109B94();
    byte_101414E20 = CFPreferencesGetAppBooleanValue(CFSTR("CrashOnValidationErrors"), v1, 0) != 0;
  }
}

void sub_100109C34(id a1)
{
  if (qword_101414E28 != -1)
    dispatch_once(&qword_101414E28, &stru_101238660);
  byte_101414E30 = byte_101414E20;
}

void sub_100109C7C(id a1)
{
  CRLAccessibilityPerformBlockOnMainThreadAfterDelay(&stru_1012386C0, 0.1);
}

void sub_100109C90(id a1)
{
  NSLog(CFSTR("*** CRLAccessibility validation error: see log output above."));
  abort();
}

void sub_100109CA8(uint64_t a1, int a2, int a3, Method m, const char *a5, const char **a6)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int NumberOfArguments;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  const char **v24;
  const char *v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;

  if (m)
  {
    v9 = method_copyReturnType(m);
    if (qword_101414E18 != -1)
      dispatch_once(&qword_101414E18, &stru_101238640);
    if (byte_101414E10 && !sub_100109F40(a5, v9))
    {
      if (qword_101414E28 != -1)
        dispatch_once(&qword_101414E28, &stru_101238660);
      if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Return type is different for method: -[%@ %@]. Actual: %s, Stated: %s"), v10, v11, v12, v13, v14, a1))goto LABEL_35;
    }
    if (v9)
      free(v9);
    NumberOfArguments = method_getNumberOfArguments(m);
    v21 = NumberOfArguments - 2;
    if (NumberOfArguments == 2)
    {
      v27 = 0;
    }
    else
    {
      v22 = NumberOfArguments;
      v28 = NumberOfArguments - 2;
      v23 = 2;
      while (1)
      {
        v24 = a6++;
        v25 = *v24;
        if (!*v24)
          break;
        v26 = method_copyArgumentType(m, v23);
        if (qword_101414E18 != -1)
          dispatch_once(&qword_101414E18, &stru_101238640);
        if (byte_101414E10 && !sub_100109F40(v25, v26))
        {
          if (qword_101414E28 != -1)
            dispatch_once(&qword_101414E28, &stru_101238660);
          if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Argument type is different for method: -[%@ %@]. Actual: %s, Stated: %s"), v16, v17, v18, v19, v20, a1))goto LABEL_35;
        }
        if (v26)
          free(v26);
        if (v22 == ++v23)
        {
          v21 = v28;
          v27 = v28;
          goto LABEL_27;
        }
      }
      v27 = v23 - 2;
      v21 = v28;
    }
LABEL_27:
    if (qword_101414E18 != -1)
      dispatch_once(&qword_101414E18, &stru_101238640);
    if (v21 != v27 && byte_101414E10)
    {
      if (qword_101414E28 != -1)
        dispatch_once(&qword_101414E28, &stru_101238660);
      if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Argument count is different for method: -[%@ %@]. Actual: %u, Stated: %u"), v16, v17, v18, v19, v20, a1))LABEL_35:abort();
    }
  }
}

BOOL sub_100109F40(const char *a1, char *__s2)
{
  _BOOL8 v2;
  id v5;
  void *v6;

  v2 = 0;
  if (a1 && __s2)
  {
    if (!strcmp(a1, __s2))
    {
      return 1;
    }
    else
    {
      v5 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("@\"%s\""), a1);
      v6 = v5;
      if (v5)
        v2 = strcmp((const char *)objc_msgSend(v5, "UTF8String"), __s2) == 0;
      else
        v2 = 0;

    }
  }
  return v2;
}

void __CRLAccessibilityValidateClassMethod(NSString *a1, NSString *a2)
{
  objc_class *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Method ClassMethod;

  v4 = NSClassFromString(a1);
  v5 = NSSelectorFromString(a2);
  ClassMethod = class_getClassMethod(v4, v5);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10 && !ClassMethod)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("%@ Class method not present: %@"), v6, v7, v8, v9, v10, (uint64_t)a1))abort();
  }
}

void __CRLAccessibilityValidateClassMethodComplete(NSString *a1, NSString *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  BOOL v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_method *ClassMethod;

  v17 = NSClassFromString(a1);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10)
    v18 = v17 == 0;
  else
    v18 = 0;
  if (v18)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Class missing: %@"), v12, v13, v14, v15, v16, (uint64_t)a1))goto LABEL_19;
  }
  v19 = NSSelectorFromString(a2);
  ClassMethod = class_getClassMethod(v17, v19);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10 && !ClassMethod)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Class method missing: -[%@ %@]"), v21, v22, v23, v24, v25, (uint64_t)a1))LABEL_19:abort();
  }
  sub_100109CA8((uint64_t)a1, v20, (int)a2, ClassMethod, a3, &a9);
}

void __CRLAccessibilityValidateIsKindOfClass(NSString *a1, NSString *a2)
{
  objc_class *v4;
  Class v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  objc_class *v12;
  Class Superclass;
  char v14;

  v4 = NSClassFromString(a1);
  v5 = NSClassFromString(a2);
  v11 = 0;
  if (v4)
  {
    v12 = v5;
    if (v5)
    {
      do
      {
        Superclass = class_getSuperclass(v4);
        v11 = Superclass == v12;
        if (!Superclass)
          break;
        v4 = Superclass;
      }
      while (Superclass != v12);
    }
  }
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10)
    v14 = v11;
  else
    v14 = 1;
  if ((v14 & 1) == 0)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("%@ is not a kind of %@"), v6, v7, v8, v9, v10, (uint64_t)a1))abort();
  }
}

void __CRLAccessibilityValidateIvarType(NSString *a1, const char *a2, const char *a3)
{
  objc_class *v6;
  objc_ivar *InstanceVariable;
  char *TypeEncoding;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = NSClassFromString(a1);
  InstanceVariable = class_getInstanceVariable(v6, a2);
  TypeEncoding = (char *)ivar_getTypeEncoding(InstanceVariable);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10 && !sub_100109F40(a3, TypeEncoding))
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("%@ : Ivar is not the right type: %s [Should be: %s was: %s]"), v9, v10, v11, v12, v13, (uint64_t)a1))abort();
  }
}

void __CRLAccessibilityValidateInstanceMethod(NSString *a1, NSString *a2)
{
  objc_class *v4;
  const char *v5;
  Method InstanceMethod;
  Method *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  objc_method *v14;
  BOOL v15;
  char v16;
  unsigned int outCount;

  v4 = NSClassFromString(a1);
  v5 = NSSelectorFromString(a2);
  InstanceMethod = class_getInstanceMethod(v4, v5);
  outCount = 0;
  v7 = class_copyMethodList(v4, &outCount);
  if (v7)
  {
    if (outCount)
    {
      v13 = 0;
      do
      {
        v14 = v7[v13];
        v15 = v14 == InstanceMethod;
        ++v13;
      }
      while (v13 < outCount && v14 != InstanceMethod);
    }
    else
    {
      v15 = 0;
    }
    free(v7);
  }
  else
  {
    v15 = 0;
  }
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10)
    v16 = v15;
  else
    v16 = 1;
  if ((v16 & 1) == 0)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("%@ Instance method not present: %@"), v8, v9, v10, v11, v12, (uint64_t)a1))abort();
  }
}

void __CRLAccessibilityValidateInstanceMethodComplete(NSString *a1, NSString *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  BOOL v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_method *InstanceMethod;

  v17 = NSClassFromString(a1);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10)
    v18 = v17 == 0;
  else
    v18 = 0;
  if (v18)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Class missing: %@"), v12, v13, v14, v15, v16, (uint64_t)a1))goto LABEL_19;
  }
  v19 = NSSelectorFromString(a2);
  InstanceMethod = class_getInstanceMethod(v17, v19);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10 && !InstanceMethod)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Instance method missing: -[%@ %@]"), v21, v22, v23, v24, v25, (uint64_t)a1))LABEL_19:abort();
  }
  sub_100109CA8((uint64_t)a1, v20, (int)a2, InstanceMethod, a3, &a9);
}

void __CRLAccessibilityValidateClass(NSString *a1)
{
  objc_class *v2;
  const char *Name;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = NSClassFromString(a1);
  Name = class_getName(v2);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10 && !strcmp(Name, "nil"))
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("Class not present: %@"), v4, v5, v6, v7, v8, (uint64_t)a1))abort();
  }
}

void __CRLAccessibilityValidateIvar(NSString *a1, const char *a2)
{
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Ivar InstanceVariable;
  BOOL v11;

  v4 = NSClassFromString(a1);
  InstanceVariable = class_getInstanceVariable(v4, a2);
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10)
    v11 = InstanceVariable == 0;
  else
    v11 = 0;
  if (v11)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("%@ : Ivar not present: %s"), v5, v6, v7, v8, v9, (uint64_t)a1))abort();
  }
}

void __CRLAccessibilityValidateProtocolMethod(NSString *a1, NSString *a2, BOOL a3, BOOL a4)
{
  Protocol *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  SEL name;

  v8 = NSProtocolFromString(a1);
  v9 = NSSelectorFromString(a2);
  name = protocol_getMethodDescription(v8, v9, a3, a4).name;
  if (qword_101414E18 != -1)
    dispatch_once(&qword_101414E18, &stru_101238640);
  if (byte_101414E10 && !name)
  {
    if (qword_101414E28 != -1)
      dispatch_once(&qword_101414E28, &stru_101238660);
    if (__CRLAccessibilityHandleValidationErrorWithDescription(byte_101414E20, 1, (uint64_t)CFSTR("%@ Protocol %@ %@ method not present: %@"), v10, v11, v12, v13, v14, (uint64_t)a1))abort();
  }
}

void __CRLAccessibilitySetAssociatedObject(void *a1, const void *a2, void *a3)
{
  objc_setAssociatedObject(a1, a2, a3, (void *)1);
}

id __CRLAccessibilityGetAssociatedWeakObject(void *a1, const void *a2)
{
  uint64_t v4;
  id AssociatedObject;
  id v6;

  v4 = objc_opt_class(CRLAccessibilityBoxedWeakReference, a2);
  AssociatedObject = objc_getAssociatedObject(a1, a2);
  if (AssociatedObject)
  {
    v6 = AssociatedObject;
    if ((objc_opt_isKindOfClass(AssociatedObject, v4) & 1) != 0)
      AssociatedObject = v6;
    else
      AssociatedObject = 0;
  }
  return objc_msgSend(AssociatedObject, "reference");
}

void __CRLAccessibilitySetAssociatedWeakObject(void *a1, const void *a2, uint64_t a3)
{
  CRLAccessibilityBoxedWeakReference *v5;

  v5 = -[CRLAccessibilityBoxedWeakReference initWithObject:]([CRLAccessibilityBoxedWeakReference alloc], "initWithObject:", a3);
  objc_setAssociatedObject(a1, a2, v5, (void *)1);

}

void __CRLAccessibilitySetAssociatedCopiedObject(void *a1, const void *a2, void *a3)
{
  objc_setAssociatedObject(a1, a2, a3, (void *)3);
}

id __CRLAccessibilityGetAssociatedBool(void *a1, const void *a2)
{
  return objc_msgSend(objc_getAssociatedObject(a1, a2), "BOOLValue");
}

void __CRLAccessibilitySetAssociatedBool(void *a1, const void *a2, int a3)
{
  NSNumber *v5;

  if (a3)
    v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
  else
    v5 = 0;
  objc_setAssociatedObject(a1, a2, v5, (void *)1);
}

id __CRLAccessibilityGetAssociatedUnsignedInteger(void *a1, const void *a2)
{
  return objc_msgSend(objc_getAssociatedObject(a1, a2), "unsignedIntegerValue");
}

void __CRLAccessibilitySetAssociatedUnsignedInteger(id object, void *key, id a3)
{
  id v5;

  if (a3)
    a3 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedInteger:", a3);
  v5 = a3;
  objc_setAssociatedObject(object, key, a3, (void *)1);

}

id __CRLAccessibilityGetAssociatedTimeInterval(void *a1, const void *a2)
{
  return objc_msgSend(objc_getAssociatedObject(a1, a2), "doubleValue");
}

void __CRLAccessibilitySetAssociatedTimeInterval(void *a1, const void *a2, double a3)
{
  id v5;
  id v6;

  if (a3 == 0.0)
    v5 = 0;
  else
    v5 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithDouble:", a3);
  v6 = v5;
  objc_setAssociatedObject(a1, a2, v5, (void *)1);

}

CGFloat __CRLAccessibilityGetAssociatedCGRect(void *a1, const void *a2)
{
  id AssociatedObject;
  CGFloat result;

  AssociatedObject = objc_getAssociatedObject(a1, a2);
  if (!AssociatedObject)
    return CGRectZero.origin.x;
  objc_msgSend(AssociatedObject, "CGRectValue");
  return result;
}

void __CRLAccessibilitySetAssociatedCGRect(void *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  NSValue *v12;
  CGRect v13;

  v13.origin.x = CGRectZero.origin.x;
  v13.origin.y = CGRectZero.origin.y;
  v13.size.width = CGRectZero.size.width;
  v13.size.height = CGRectZero.size.height;
  if (CGRectEqualToRect(*(CGRect *)&a3, v13))
    v12 = 0;
  else
    v12 = +[NSValue valueWithCGRect:](NSValue, "valueWithCGRect:", a3, a4, a5, a6);
  objc_setAssociatedObject(a1, a2, v12, (void *)1);
}

id sub_10010AC4C(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  objc_msgSend(a1, "crlaxAddSafeCategoryDependenciesToCollection:");
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(a3);
        v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(a4, "containsObject:", v11) & 1) == 0
          && (objc_msgSend(a2, "containsObject:", v11) & 1) == 0)
        {
          objc_msgSend(a2, "addObject:", v11);
        }
      }
      v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }
  return objc_msgSend(a3, "removeAllObjects");
}

void sub_10010AF4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010AF7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010B210(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010B240(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010B798(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010B7C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010B838(id a1)
{
  CRLBasicShapeLibrary *v1;
  CRLBasicShapeLibrary *v2;
  void *v3;
  id v4;

  v1 = [CRLBasicShapeLibrary alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[CRLLocale currentLocale](CRLLocale, "currentLocale"));
  v2 = -[CRLBasicShapeLibrary initWithLocale:](v1, "initWithLocale:", v4);
  v3 = (void *)qword_101414E48;
  qword_101414E48 = (uint64_t)v2;

}

void sub_10010BBD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010BC08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010BDE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010BE10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010BFDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010C00C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10010F8C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010F8F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010F91C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010F948(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010F974(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010F9A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010F9CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010F9F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FA24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FA50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FA7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FAA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FAD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FB00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FB2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FB58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FB84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FBB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FBDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FC08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FC34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FC60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FC8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FCB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FCE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FD10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FD3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FD68(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FD94(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FDC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FDEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FE18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FE44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FE70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FE9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FEC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FEF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FF20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLZoomTrackerCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9788;
  off_1013D9788 = v2;

}

void sub_10010FF4C(uint64_t a1, double a2, double a3)
{
  double v4;
  void *v5;
  double v6;
  float v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id WeakRetained;
  void *v14;
  _OWORD v15[3];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[3];
  __int128 v20[3];
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = (a3 - *(double *)(a1 + 40)) / 0.2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CAMediaTimingFunction functionWithName:](CAMediaTimingFunction, "functionWithName:", kCAMediaTimingFunctionEaseOut));
  *(float *)&v6 = v4;
  objc_msgSend(v5, "_solveForInput:", v6);
  v8 = v7;

  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  v9 = *(_OWORD *)(a1 + 64);
  v20[0] = *(_OWORD *)(a1 + 48);
  v20[1] = v9;
  v10 = *(_OWORD *)(a1 + 96);
  v20[2] = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 112);
  v12 = *(_OWORD *)(a1 + 128);
  v19[0] = v10;
  v19[1] = v11;
  v19[2] = v12;
  sub_100079C64(v20, v19, (uint64_t)&v21, v8);
  v16 = v21;
  v17 = v22;
  v18 = v23;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "associatedBackgroundLayer"));
  v15[0] = v16;
  v15[1] = v17;
  v15[2] = v18;
  objc_msgSend(v14, "setDynamicTransform:", v15);

}

id sub_10011004C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  id *v7;
  id WeakRetained;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = *(_OWORD *)(a1 + 128);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = v2;
  v3 = *(_OWORD *)(a1 + 160);
  v16 = *(_OWORD *)(a1 + 144);
  v17 = v3;
  v4 = *(_OWORD *)(a1 + 64);
  v10 = *(_OWORD *)(a1 + 48);
  v11 = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 96);
  v7 = (id *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = v5;
  v13 = v6;
  WeakRetained = objc_loadWeakRetained(v7);
  objc_msgSend(WeakRetained, "setTransform:", &v10);

  return objc_msgSend(*(id *)(a1 + 40), "i_viewDidZoomToViewScale:notify:", 1, *(double *)(a1 + 176), v10, v11, v12, v13, v14, v15, v16, v17);
}

id sub_1001100BC(uint64_t a1)
{
  id WeakRetained;

  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 16));
  objc_msgSend(WeakRetained, "canvasZoomTrackerDidEndFinalZoomAnimation:", *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(a1 + 40), "p_finishZoomWithFinalScaleFactor:contentOffset:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_1001105BC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

__n128 sub_1001105D0@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = a2;
  return a1[2];
}

void sub_1001105F8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_100110AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 192), 8);
  _Block_object_dispose((const void *)(v12 - 160), 8);
  _Unwind_Resume(a1);
}

BOOL sub_100110B0C(_QWORD *a1, int a2, int a3, void *__src, size_t a5)
{
  size_t v6;

  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) >= a5)
    v6 = a5;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  memcpy(*(void **)(*(_QWORD *)(a1[6] + 8) + 24), __src, v6);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v6;
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += v6;
  *(_QWORD *)(a1[4] + 24) += v6;
  return *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) != 0;
}

uint64_t sub_100110B9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100110BAC(uint64_t a1)
{

}

void sub_100110BB4(uint64_t a1, char a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  void *v9;
  size_t size;
  size_t v11;
  NSObject *v12;
  NSObject *subrange;
  dispatch_data_t concat;
  uint64_t v15;
  void *v16;
  char v17;
  _QWORD v18[5];
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (!v7 || v8)
  {
    if (v8)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a4);
  }
  else
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x2020000000;
    v24 = 0;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100110D30;
    v18[3] = &unk_101238DE8;
    v19 = *(_OWORD *)(a1 + 48);
    v18[4] = *(_QWORD *)(a1 + 32);
    v20 = &v21;
    dispatch_data_apply(v7, v18);
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      size = dispatch_data_get_size(v7);
      v11 = v22[3];
      if (size > v11)
      {
        v12 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
        subrange = dispatch_data_create_subrange(v7, v11, size - v11);
        concat = dispatch_data_create_concat(v12, subrange);
        v15 = *(_QWORD *)(a1 + 32);
        v16 = *(void **)(v15 + 16);
        *(_QWORD *)(v15 + 16) = concat;

      }
    }
    _Block_object_dispose(&v21, 8);
  }
  v17 = a2 ^ 1;
  if (v9)
    v17 = 0;
  if ((v17 & 1) == 0 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }

}

BOOL sub_100110D30(_QWORD *a1, int a2, uint64_t a3, void *__src, size_t a5)
{
  size_t v7;

  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) >= a5)
    v7 = a5;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  memcpy(*(void **)(*(_QWORD *)(a1[6] + 8) + 24), __src, v7);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v7;
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += v7;
  *(_QWORD *)(a1[4] + 24) += v7;
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v7 + a3;
  return *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) != 0;
}

void sub_100110DDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100110E0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100110FF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100111028(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100111124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100111254(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_100114154((char **)a1, a2 - v2);
  }
}

double sub_1001113B0(uint64_t a1, double a2)
{
  double v2;
  double v3;
  double result;
  double v5;

  switch(a1)
  {
    case 0:
      v2 = 1.0 - a2;
      v3 = v2 * v2;
      goto LABEL_6;
    case 1:
      v5 = a2 * 3.0;
      v2 = 1.0 - a2;
      v3 = v5 * v2;
      goto LABEL_6;
    case 2:
      v3 = a2 * 3.0 * a2;
      v2 = 1.0 - a2;
LABEL_6:
      result = v2 * v3;
      break;
    case 3:
      result = a2 * a2 * a2;
      break;
    default:
      result = NAN;
      break;
  }
  return result;
}

void sub_100111B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001125B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_100112674(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001126A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001126D4(uint64_t a1, float a2, float a3, float a4, float a5, float a6)
{
  float *v6;
  float v7;
  int v8;
  int v9;
  _QWORD *v11;
  int i;
  float v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;

  v6 = *(float **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  v7 = sqrtf((float)((float)(a5 - a3) * (float)(a5 - a3)) + (float)((float)(a4 - a2) * (float)(a4 - a2)));
  if (v7 > (float)(a6 * 4.0))
  {
    v8 = vcvtps_s32_f32(v7 / (float)(a6 * 4.0));
    v9 = v8 >= 100 ? 100 : v8;
    if (v9 >= 2)
    {
      v11 = (_QWORD *)(a1 + 16);
      for (i = 1; i != v9; ++i)
      {
        v13 = (float)i / (float)v9;
        if ((unint64_t)v6 >= *v11)
        {
          v15 = *(float **)a1;
          v16 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            sub_100007810();
          v18 = *v11 - (_QWORD)v15;
          if (v18 >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)sub_100114120((uint64_t)v11, v19);
            v15 = *(float **)a1;
            v6 = *(float **)(a1 + 8);
          }
          else
          {
            v20 = 0;
          }
          v21 = (float *)&v20[4 * v16];
          *v21 = v13;
          v14 = v21 + 1;
          while (v6 != v15)
          {
            v22 = *((_DWORD *)v6-- - 1);
            *((_DWORD *)v21-- - 1) = v22;
          }
          *(_QWORD *)a1 = v21;
          *(_QWORD *)(a1 + 8) = v14;
          *(_QWORD *)(a1 + 16) = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *v6 = v13;
          v14 = v6 + 1;
        }
        *(_QWORD *)(a1 + 8) = v14;
        v6 = v14;
      }
    }
  }
}

void sub_100112ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100112AF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100112B28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001130F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10011314C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011317C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001131AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001131DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011320C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011323C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100113B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100113BD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100113C00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100113C30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100113C60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100113C90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100113CC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100113EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100113F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001140C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001140F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void *sub_100114120(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_1000078E0();
  return operator new(4 * a2);
}

void sub_100114154(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_100007810();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_10002BA34(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_100114374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10011438C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "size");
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1001145B0(uint64_t a1, void *a2)
{
  id v3;
  _BYTE *v4;
  _BYTE *v5;
  NSObject *v6;
  id v7;
  id v8;
  _BYTE *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "close");
  if (v3)
  {
    v4 = 0;
  }
  else
  {
    v5 = *(_BYTE **)(a1 + 40);
    if ((v5[32] & 1) != 0)
    {
      objc_msgSend(v5, "collapseCommonRootDirectory");
      v5 = *(_BYTE **)(a1 + 40);
    }
    v4 = v5;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10011468C;
  block[3] = &unk_101239130;
  v6 = *(NSObject **)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  v12 = v3;
  v13 = v7;
  v11 = v4;
  v8 = v3;
  v9 = v4;
  dispatch_async(v6, block);

}

uint64_t sub_10011468C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1001146A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[5];
  id v11;
  id v12;
  uint64_t v13;

  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 56);
    v7 = *(void **)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10011477C;
    v10[3] = &unk_1012391A0;
    v10[4] = v7;
    v11 = v6;
    v8 = *(id *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v12 = v8;
    v13 = v9;
    objc_msgSend(v7, "readEndOfCentralDirectoryData:eocdOffset:channel:completion:", a2, v5, v11, v10);

  }
}

void sub_10011477C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;

  v3 = a2;
  v4 = v3;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) & 4) != 0
    && objc_msgSend(v3, "code") == (id)259
    && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain")),
        v6 = objc_msgSend(v5, "isEqualToString:", NSCocoaErrorDomain),
        v5,
        v6))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("CRLZipArchiveErrorDescription")));

    if (v8)
    {
      if (qword_10147E368 != -1)
        dispatch_once(&qword_10147E368, &stru_101239178);
      v9 = off_1013D9068;
      if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
        sub_100DFBE84((uint64_t)v8, v9, v10);
      objc_msgSend(*(id *)(a1 + 32), "readLocalFileHeaderEntriesFromChannel:offset:previousEntry:seekAttempts:seekForward:completion:", *(_QWORD *)(a1 + 40), 0, 0, 0, 0, *(_QWORD *)(a1 + 48));
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }

  }
  else
  {
    if (!v4)
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = *(_QWORD *)(a1 + 56);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_1001148D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100114900(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError crl_fileReadUnknownErrorWithUserInfo:](NSError, "crl_fileReadUnknownErrorWithUserInfo:", 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

id sub_100114CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  else
    return _objc_msgSend(*(id *)(a1 + 32), "readZip64EndOfCentralDirectoryLocatorData:channel:completion:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100114FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  else
    return _objc_msgSend(*(id *)(a1 + 32), "readZip64EndOfCentralDirectoryData:channel:completion:", a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10011526C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  else
    return _objc_msgSend(*(id *)(a1 + 32), "readCentralDirectoryData:entryCount:completion:", a2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_100115C10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100115C40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100116068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;
  int v12;
  char v13;

  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(void **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100116164;
    v8[3] = &unk_1012392E0;
    v8[4] = v6;
    v9 = *(id *)(a1 + 48);
    v13 = *(_BYTE *)(a1 + 76);
    v12 = *(_DWORD *)(a1 + 72);
    v10 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 56);
    objc_msgSend(v6, "readLocalFileHeaderData:atOffset:channel:completion:", a2, v5, v7, v8);

  }
}

void sub_100116164(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  void (*v9)(void);
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  char *v29;
  id v30;
  id v31;
  NSObject *v32;
  uint64_t v33;

  v7 = a2;
  v8 = a3;
  if (!v8)
  {
    if (v7)
    {
      objc_msgSend(*(id *)(a1 + 32), "addEntry:", v7);
      v10 = *(void **)(a1 + 40);
      if (v10 && !*(_BYTE *)(a1 + 68) && *(_DWORD *)(a1 + 64))
        objc_msgSend(v10, "setCompressedSize:", (char *)objc_msgSend(*(id *)(a1 + 40), "compressedSize") - *(unsigned int *)(a1 + 64));
      v11 = (char *)objc_msgSend(v7, "offset");
      v12 = &v11[(_QWORD)objc_msgSend(v7, "fileHeaderLength")];
      v13 = (char *)objc_msgSend(v7, "compressedSize") + (_QWORD)v12;
      v14 = *(void **)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(_QWORD *)(a1 + 56);
      v17 = v7;
      v18 = 0;
      v19 = 0;
      goto LABEL_10;
    }
    if ((a4 & 1) != 0)
    {
LABEL_43:
      v9 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
      goto LABEL_3;
    }
    v20 = *(unsigned int *)(a1 + 64);
    if (*(_BYTE *)(a1 + 68))
    {
      if ((_DWORD)v20)
      {
LABEL_25:
        v24 = 1;
        v22 = 100;
        goto LABEL_26;
      }
LABEL_20:
      if (qword_10147E368 != -1)
        dispatch_once(&qword_10147E368, &stru_101239278);
      v23 = off_1013D9068;
      if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
        sub_100DFBFD4(a1, v23);
      LODWORD(v20) = 0;
      goto LABEL_25;
    }
    v21 = objc_msgSend(*(id *)(a1 + 40), "compressedSize");
    if ((unint64_t)v21 >= 0x64)
      v22 = 100;
    else
      v22 = (unint64_t)v21;
    if (v22 == v20)
      goto LABEL_20;
    if ((_DWORD)v20)
    {
      v24 = 0;
LABEL_26:
      if (v22 > v20)
      {
        v25 = (v20 + 1);
        if (v24)
        {
          v26 = (char *)objc_msgSend(*(id *)(a1 + 40), "offset");
          v27 = objc_msgSend(*(id *)(a1 + 40), "fileHeaderLength");
          v13 = &v26[v25
                   + (unint64_t)objc_msgSend(*(id *)(a1 + 40), "compressedSize")
                   + (_QWORD)v27];
          v19 = 1;
LABEL_37:
          v14 = *(void **)(a1 + 32);
          v17 = *(id *)(a1 + 40);
          v15 = *(_QWORD *)(a1 + 48);
          v16 = *(_QWORD *)(a1 + 56);
          v18 = v25;
LABEL_10:
          objc_msgSend(v14, "readLocalFileHeaderEntriesFromChannel:offset:previousEntry:seekAttempts:seekForward:completion:", v15, v13, v17, v18, v19, v16);
          goto LABEL_11;
        }
LABEL_36:
        v29 = (char *)objc_msgSend(*(id *)(a1 + 40), "offset");
        v30 = objc_msgSend(*(id *)(a1 + 40), "fileHeaderLength");
        v31 = objc_msgSend(*(id *)(a1 + 40), "compressedSize");
        v19 = 0;
        v13 = &v29[(unint64_t)v31 + (_QWORD)v30 - v25];
        goto LABEL_37;
      }
      goto LABEL_39;
    }
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_101239298);
    v28 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
    {
      sub_100DFC054(a1, v28);
      if (v22)
        goto LABEL_35;
    }
    else if (v22)
    {
LABEL_35:
      v25 = 1;
      goto LABEL_36;
    }
LABEL_39:
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_1012392B8);
    v32 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DFBF6C(v22, v32, v33);
    goto LABEL_43;
  }
  v9 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
LABEL_3:
  v9();
LABEL_11:

}

void sub_100116434(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100116464(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100116494(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_1001168A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(void);
  id v15;

  v5 = a2;
  v6 = a3;
  if (v6
    || (v7 = *(void **)(a1 + 32),
        v8 = *(_QWORD *)(a1 + 40),
        v15 = 0,
        v9 = objc_msgSend(v7, "readLocalFileHeaderFilenameAndExtraFieldsData:forEntry:error:", v5, v8, &v15), v6 = v15, !v9))
  {
    v14 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  else
  {
    v10 = (char *)objc_msgSend(*(id *)(a1 + 40), "offset");
    v11 = &v10[(_QWORD)objc_msgSend(*(id *)(a1 + 40), "fileHeaderLength")];
    v12 = (char *)objc_msgSend(*(id *)(a1 + 40), "compressedSize");
    v13 = *(_QWORD *)(a1 + 32);
    if ((uint64_t)&v12[(_QWORD)v11] > *(_QWORD *)(v13 + 24))
      *(_QWORD *)(v13 + 24) = &v12[(_QWORD)v11];
    v14 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  v14();

}

void sub_100116C34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

CRLZipInflateReadChannel *sub_100116E7C(uint64_t a1, void *a2)
{
  id v3;
  CRLZipInflateReadChannel *v4;
  CRLZipInflateReadChannel *v5;

  v3 = a2;
  v4 = [CRLZipInflateReadChannel alloc];
  objc_msgSend(*(id *)(a1 + 32), "size");
  v5 = -[CRLZipInflateReadChannel initWithReadChannel:uncompressedSize:CRC:validateCRC:](v4, "initWithReadChannel:uncompressedSize:CRC:validateCRC:", v3, objc_msgSend(*(id *)(a1 + 32), "size"), objc_msgSend(*(id *)(a1 + 32), "CRC"), *(unsigned __int8 *)(a1 + 40));

  return v5;
}

void sub_100116EFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100116F2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100117150(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100117180(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001175B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001175DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001175EC(uint64_t a1)
{

}

void sub_1001175F4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pathComponents"));
  if ((unint64_t)objc_msgSend(v21, "count") < 2
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectAtIndexedSubscript:", 0)),
        v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("__MACOSX")),
        v6,
        v8 = v21,
        (v7 & 1) == 0))
  {
    v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v9)
    {
      v18 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v21);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v20 = *(void **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = v18;

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "removeLastObject");
      goto LABEL_13;
    }
    v10 = 0;
    if (objc_msgSend(v9, "count"))
    {
      do
      {
        if (v10 >= (unint64_t)objc_msgSend(v21, "count"))
          break;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "objectAtIndexedSubscript:", v10));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectAtIndexedSubscript:", v10));
        v13 = objc_msgSend(v11, "compare:options:", v12, *(_QWORD *)(a1 + 40));

        if (v13)
          break;
        ++v10;
      }
      while (v10 < (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "count"));
      if (v10 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v15 = *(void **)(v14 + 40);
        *(_QWORD *)(v14 + 40) = 0;

        *a4 = 1;
LABEL_13:
        v8 = v21;
        goto LABEL_14;
      }
    }
    v16 = v10 >= (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "count");
    v8 = v21;
    if (!v16)
    {
      v17 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      objc_msgSend(v17, "removeObjectsInRange:", v10, (char *)objc_msgSend(v17, "count") - v10);
      goto LABEL_13;
    }
  }
LABEL_14:

}

void sub_1001177BC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if ((unint64_t)objc_msgSend(v7, "length") <= *(_QWORD *)(a1 + 48) + 1)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "removeObject:", v5);
  }
  else if ((objc_msgSend(v7, "hasPrefix:", CFSTR("__MACOSX")) & 1) == 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "substringFromIndex:", *(_QWORD *)(a1 + 48) + 1));
    objc_msgSend(v5, "setCollapsedName:", v6);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v6);

  }
}

void sub_100117B2C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100117B5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100117E3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100117E6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011814C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011817C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001183F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_100118420(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  _QWORD v11[5];
  __int128 v12;

  v2 = (uint64_t *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "streamReadChannelForEntry:", *(_QWORD *)(a1 + 40)));
  if (v3)
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 48));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100118584;
    v11[3] = &unk_10122C560;
    v11[4] = v3;
    v10 = *(_OWORD *)(a1 + 48);
    v4 = (id)v10;
    v12 = v10;
    objc_msgSend(v3, "readWithHandler:", v11);

  }
  else
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_101239500);
    v5 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100DFC23C(v2, v5, v6);
    v7 = objc_claimAutoreleasedReturnValue(+[NSError crl_fileReadCorruptedFileErrorWithUserInfo:](NSError, "crl_fileReadCorruptedFileErrorWithUserInfo:", 0));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
}

void sub_100118554(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100118584(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  id v11;

  v11 = a3;
  v7 = a4;
  if (v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(_QWORD *)(v8 + 40);
    v9 = (id *)(v8 + 40);
    if (!v10)
    {
      objc_storeStrong(v9, a4);
      if (!a2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  if (a2)
  {
LABEL_4:
    objc_msgSend(*(id *)(a1 + 32), "close");
    dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  }
LABEL_5:

}

void sub_100118608(_QWORD *a1)
{
  void (**v2)(_QWORD, _QWORD);
  NSObject *v3;
  void (**v4)(_QWORD, _QWORD);
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v2 = (void (**)(_QWORD, _QWORD))a1[5];
  if (v2)
  {
    v3 = a1[4];
    if (v3)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1001186A8;
      v6[3] = &unk_101239550;
      v4 = v2;
      v5 = a1[6];
      v7 = v4;
      v8 = v5;
      dispatch_async(v3, v6);

    }
    else
    {
      v2[2](v2, *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
    }
  }
}

uint64_t sub_1001186A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1001187D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001187EC(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1001189BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001189D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, BOOL *a5)
{
  id v7;
  uint64_t v8;
  objc_class *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v7 = a4;
  v9 = (objc_class *)objc_opt_class(NSString, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("CRLZipArchiveErrorDescription")));

  v11 = sub_1002223BC(v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  *a5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
}

void sub_100118B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100118B40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, BOOL *a5)
{
  id v7;
  uint64_t v8;
  objc_class *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v7 = a4;
  v9 = (objc_class *)objc_opt_class(NSString, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("CRLZipArchiveErrorEntryName")));

  v11 = sub_1002223BC(v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  *a5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
}

id sub_100118BE8(uint64_t a1, void *a2)
{
  return a2;
}

id sub_100118C00()
{
  void *v0;

  return objc_msgSend(v0, "count");
}

void sub_1001195C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001195F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B104(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x370], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10011B21C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10011B22C(uint64_t a1)
{

}

id sub_10011B234(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id WeakRetained;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crl_dequeue"));
  if (v2)
  {
    v3 = (id)v2;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "addLayer:", v2);
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_6;
  }
  else
  {
    v3 = objc_alloc_init((Class)CALayer);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "setObject:forKey:", *(_QWORD *)(a1 + 48), v3);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "addLayer:", v3);
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 72));
    objc_msgSend(v3, "setDelegate:", WeakRetained);

  }
  objc_msgSend(v3, "setHidden:", objc_msgSend(*(id *)(a1 + 56), "containsObject:", *(_QWORD *)(a1 + 48)));
LABEL_6:
  objc_msgSend(*(id *)(a1 + 64), "crl_enqueue:", v3);
  return v3;
}

void sub_10011B304(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B334(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B364(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B394(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B3C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B3F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B424(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B454(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B484(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v6 = a2;
  v4 = objc_msgSend(v3, "containsObject:");
  v5 = *(void **)(a1 + 40);
  if (v4)
    objc_msgSend(v5, "p_accumulateNonRenderableBackedRepAndDescendants:into:", v6, *(_QWORD *)(a1 + 48));
  else
    objc_msgSend(v5, "p_recursivelyUpdateRenderableForRep:accumulatingRepContentPiles:andReps:suppressLayers:hidingLayersForReps:forcingUpdateOfValidLayers:", v6, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));

}

void sub_10011B4F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B528(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B558(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B588(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B5B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B5E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B618(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011B648(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10011B678(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "addAdditionalChildLayersToArray:", a2);
}

id sub_10011BB3C(id a1, CALayer *a2)
{
  return +[CRLCanvasRenderable renderableFromLayer:](CRLCanvasRenderable, "renderableFromLayer:", a2);
}

void sub_10011C7A8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0x12u);
}

uint64_t sub_10011C7BC(uint64_t result, float a2)
{
  int v2;
  uint64_t v3;

  *(float *)v3 = a2;
  *(_DWORD *)(v3 + 4) = v2;
  *(_WORD *)(v3 + 8) = 2114;
  *(_QWORD *)(v3 + 10) = result;
  return result;
}

id sub_10011C7D4(id a1)
{
  return a1;
}

void sub_10011CCDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011CD0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011D1B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011D1E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011DB30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011DB60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011DD74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011DDA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011E110(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10011E140(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CRLCanvasRenderable *__cdecl sub_10011E284(id a1, CALayer *a2)
{
  return (CRLCanvasRenderable *)+[CRLCanvasRenderable renderableFromLayer:](CRLCanvasRenderable, "renderableFromLayer:", a2);
}

void sub_1001202CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001202FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100120494(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001204C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012176C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012179C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10012181C(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v20;
  _QWORD *v22;
  double v24;

  v3 = (_QWORD *)*a2;
  v2 = (_QWORD *)a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v2 - *a2) >> 4) < 3 || v3 == v2)
    return 2;
  v5 = 0;
  while (1)
  {
    v6 = &v3[v5];
    v7 = v3[v5 + 1];
    if (v7 != a1[1])
      break;
    v5 += 6;
    if (&v3[v5] == v2)
      return 2;
  }
  if (v6 == v2)
    return 2;
  v8 = 0;
  v10 = *a1;
  v9 = a1[1];
  v11 = v7 < v9;
  v12 = &v3[v5];
  v13 = v2;
LABEL_11:
  v14 = v12 + 6;
  do
  {
    do
    {
LABEL_12:
      if (v14 == v13)
      {
        if (!(v5 * 8))
          goto LABEL_47;
        v12 = v3;
        v13 = &v3[v5];
        if (v6 == v14)
          goto LABEL_47;
      }
      else
      {
        v12 = v14;
      }
      if ((v11 & 1) != 0)
      {
        if (v12 != v13)
        {
          while (v12[1] < v9)
          {
            v12 += 6;
            if (v12 == v13)
              goto LABEL_24;
          }
        }
      }
      else if (v12 != v13)
      {
        while (v12[1] > v9)
        {
          v12 += 6;
          if (v12 == v13)
          {
LABEL_24:
            v14 = v13;
            goto LABEL_12;
          }
        }
      }
      v14 = v13;
    }
    while (v12 == v13);
    if (v12 == v3)
      v15 = v2;
    else
      v15 = v12;
    v16 = *v12;
    v17 = v12[1];
    if (v9 != v17)
    {
      v18 = *(v15 - 6);
      if (v10 >= v16 || v10 >= v18)
      {
        if (v10 <= v16 || v10 <= v18)
        {
          v20 = (double)(v16 - v18) * (double)(v9 - v17) - (double)(v17 - *(v15 - 5)) * (double)(v10 - v16);
          if (((v11 ^ (v20 >= 0.0)) & 1) != 0)
            v8 = 1 - v8;
          if (v20 == 0.0)
            return 0;
        }
        else
        {
          v8 = 1 - v8;
        }
      }
      v11 ^= 1u;
      goto LABEL_11;
    }
    if (v10 == v16 || v9 == *(v15 - 5) && v10 < v16 == v10 >= *(v15 - 6))
      return 0;
    v14 = v12 + 6;
  }
  while (v6 != v12 + 6);
  v14 = &v3[v5];
LABEL_47:
  if (v7 < v9 != (v11 & 1))
  {
    if (v14 == v2)
      v22 = v3;
    else
      v22 = v14;
    if (v14 != v3 && v14 != v2)
      v2 = v14;
    v24 = (double)(uint64_t)(*v22 - *(v2 - 6)) * (double)(v9 - v22[1])
        - (double)(uint64_t)(v22[1] - *(v2 - 5)) * (double)(v10 - *v22);
    if (((v11 ^ (v24 >= 0.0)) & 1) != 0)
      v8 = 1 - v8;
    if (v24 == 0.0)
      return 0;
  }
  if (v8)
    return 1;
  else
    return 2;
}

void sub_100121A78(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100121AB8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100121AB8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *sub_100121B0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_100121C88(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100121B60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100121B68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100007810();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100045008(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_100121C88(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  v15 += 24;
  sub_100121D94(a1, v14);
  v12 = a1[1];
  sub_100121F20((uint64_t)v14);
  return v12;
}

void sub_100121C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100121F20((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100121C88(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100121D00(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100121CE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100121D00(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    sub_100007810();
  result = (char *)sub_100121D50((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *sub_100121D50(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_1000078E0();
  return operator new(48 * a2);
}

uint64_t sub_100121D94(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100121E08((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100121E08(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_100121EA8((uint64_t)v11);
  return v9;
}

uint64_t sub_100121EA8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100121EDC(a1);
  return a1;
}

void sub_100121EDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_100121F20(uint64_t a1)
{
  sub_100121F54(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100121F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_100121FAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100007810();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100045008(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_100121C88(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  v15 += 24;
  sub_100121D94(a1, v14);
  v12 = a1[1];
  sub_100121F20((uint64_t)v14);
  return v12;
}

void sub_1001220B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100121F20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100122868(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100122898(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100122B18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100122B48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100122D80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100122DB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100123388(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001233B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100123A58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100123A88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100123C9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100123CCC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100123EE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100123F14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100124154(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100124184(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012438C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001243BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001245C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001245F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001248E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100124910(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100124940(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100124C50(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1001251E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100125218(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100125728(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100125758(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100125AC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100125AF0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

float sub_100127164(float64x2_t *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  float v12;
  double v14;

  v2 = a1[2].f64[0];
  v3 = a1[2].f64[1];
  v4 = sub_10006108C(v2, v3, a1[3].f64[0], a1[3].f64[1]);
  v14 = a1->f64[0];
  v5 = a1->f64[1];
  v6 = v4 + sub_10006108C(v2, v3, a1->f64[0], v5);
  v7 = 0.0;
  v8 = 0.33333;
  v9 = 0.33333;
  do
  {
    v10 = sub_1000602A8(a1, v8);
    v12 = sub_10006108C(v10, v11, v14, v5);
    if ((float)(v8 - fminf(sqrtf((float)(v12 * 3.0) / v6) / 3.0, 0.33333)) > 0.0)
      v9 = v8;
    else
      v7 = v8;
    v8 = (float)(v9 + v7) * 0.5;
  }
  while (vabds_f32(v9, v7) >= 0.00001);
  return (float)(v9 + v7) * 0.5;
}

void sub_1001275AC(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, id a8)
{
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v18;

  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a7;
  *(_QWORD *)a1 = &off_101239ED8;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)&v18 = 0xFFFFFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 40) = v18;
  *(_BYTE *)(a1 + 56) = objc_msgSend(v14, "wpKind");
  if (a8 == (id)0x7FFFFFFFFFFFFFFFLL)
    a8 = objc_msgSend(v14, "characterCount");
  *(_QWORD *)(a1 + 64) = a8;
  *(_QWORD *)(a1 + 72) = objc_msgSend(v14, "attachmentCount");
  sub_10005D924(a1 + 80);
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  operator new();
}

void sub_1001277C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a4);

  sub_100133A4C((void ***)va);
  sub_10005DCE0(a3);

  _Unwind_Resume(a1);
}

void sub_100127850(NSRange *a1, NSUInteger a2)
{
  NSUInteger location;
  NSUInteger length;
  BOOL v7;
  NSUInteger v8;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSString *v15;
  void *v16;
  NSString *v17;
  void *v18;
  uint8_t buf[4];
  unsigned int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  NSUInteger v28;
  __int16 v29;
  void *v30;

  location = a1[6].location;
  length = a1[6].length;
  if (location != 0x7FFFFFFFFFFFFFFFLL || length != 0)
  {
    v7 = a2 - location < length && a2 >= location;
    v8 = length + location;
    if (!v7 && v8 != a2)
    {
      v10 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123A958);
      v11 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
      {
        v17 = NSStringFromRange(a1[6]);
        v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        *(_DWORD *)buf = 67110402;
        v20 = v10;
        v21 = 2082;
        v22 = "void CRLWPLayoutState::setCharIndex(CRLWPCharIndex)";
        v23 = 2082;
        v24 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutState.h";
        v25 = 1024;
        v26 = 119;
        v27 = 2048;
        v28 = a2;
        v29 = 2114;
        v30 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v11, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex %lu is outside of paragraphRange: %{public}@", buf, 0x36u);

      }
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123A978);
      v12 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLayoutState::setCharIndex(CRLWPCharIndex)"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutState.h"));
      v15 = NSStringFromRange(a1[6]);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 119, 0, "charIndex %lu is outside of paragraphRange: %{public}@", a2, v16);

    }
  }
  a1->location = a2;
}

void sub_100127AC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100127B0C(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = &off_101239ED8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 24))(*(_QWORD *)(a1 + 824));
  v2 = *(_QWORD *)(a1 + 824);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  v4 = (void **)(a1 + 792);
  sub_100133A4C(&v4);
  sub_10005DCE0(a1 + 80);
  return a1;
}

void sub_100127B94(uint64_t a1)
{
  sub_100127B0C(a1);
  operator delete();
}

uint64_t sub_100127BB8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  void *i;
  double v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  _BYTE v47[712];
  int v48;
  int v49;
  double v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unsigned __int16 v55;
  uint8_t v56[128];
  uint8_t buf[4];
  unsigned int v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  id v72;

  v5 = a2;
  v6 = *(void **)(a1 + 8);
  if (!v6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101239EE8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD234();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101239F08);
    v7 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLayoutChore::layOutIntoTarget(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, BOOL *)"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 170, 0, "invalid nil value for '%{public}s'", "_storage");

    v6 = *(void **)(a1 + 8);
  }
  objc_msgSend(v6, "wpKind");
  if ((objc_opt_respondsToSelector(v5, "willLayoutIntoTarget") & 1) != 0)
    objc_msgSend(v5, "willLayoutIntoTarget");
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 64);
  if (v10 > v11)
  {
    v12 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101239F28);
    v13 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    {
      v46 = objc_msgSend(*(id *)(a1 + 8), "wpKind");
      v43 = *(_QWORD *)(a1 + 80);
      v44 = *(_QWORD *)(a1 + 64);
      v42 = objc_msgSend(*(id *)(a1 + 8), "length");
      *(_DWORD *)buf = 67110914;
      v58 = v12;
      v59 = 2082;
      v60 = "BOOL CRLWPLayoutChore::layOutIntoTarget(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, BOOL *)";
      v61 = 2082;
      v62 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
      v63 = 1024;
      v64 = 179;
      v65 = 2048;
      v66 = v46;
      v67 = 2048;
      v68 = v43;
      v69 = 2048;
      v70 = v44;
      v71 = 2048;
      v72 = v42;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v13, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempt to lay out past end of storage (kind:%lu) %lu vs %lu vs %lu", buf, 0x4Au);
    }

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101239F48);
    v14 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLayoutChore::layOutIntoTarget(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, BOOL *)"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 179, 0, "Attempt to lay out past end of storage (kind:%lu) %lu vs %lu vs %lu", objc_msgSend(*(id *)(a1 + 8), "wpKind"), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(a1 + 8), "length"));

    v10 = *(_QWORD *)(a1 + 80);
    v11 = *(_QWORD *)(a1 + 64);
  }
  if (v10 <= v11)
  {
    if (objc_msgSend(v5, "textIsVertical"))
    {
      objc_msgSend(v5, "currentSize");
      v19 = v18;
    }
    else
    {
      objc_msgSend(v5, "currentSize");
      v19 = v20;
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "columns"));
    if (!objc_msgSend(v21, "count"))
    {
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(_QWORD *)(a1 + 80);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "styleProvider"));
      +[CRLWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:](CRLWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:", v5, v22, v23, 0, 0, v24, 0.0, v19);

    }
    if (!objc_msgSend(v21, "count"))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101239F68);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFD1B4();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101239F88);
      v25 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLayoutChore::layOutIntoTarget(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, BOOL *)"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v26, v27, 190, 0, "No columns to lay out into");

    }
    if (objc_msgSend(v21, "count"))
    {
      sub_100128530(a1, v5, 0, *(_QWORD *)(a1 + 80), v28, a3);
      v45 = sub_100128B98((uint64_t *)a1, a1 + 80);
      *(_BYTE *)(a1 + 856) = 0;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v29 = v21;
      v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
      if (v30)
      {
        v31 = *(_QWORD *)v52;
        do
        {
          for (i = 0; i != v30; i = (char *)i + 1)
          {
            if (*(_QWORD *)v52 != v31)
              objc_enumerationMutation(v29);
            objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i), "setAnchoredRange:", 0x7FFFFFFFFFFFFFFFLL, 0);
          }
          v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
        }
        while (v30);
      }

      v50 = 0.0;
      v33 = rint(v19);
      v49 = 1;
      v48 = 0;
      v55 = 0;
      do
      {
        v34 = sub_100128DE4(a1, v5, a3, &v50, &v49, &v55, &v48, v19, v33);
        v33 = rint(v19 - v50);
        if (v33 <= 0.0)
          v35 = 1;
        else
          v35 = v34;
      }
      while (v35 != 1);
      sub_100129998(a1, v45, (uint64_t)v47);
      sub_10005DCE0(v47);
      sub_10005DD70(a1 + 80, 0);
      if ((objc_opt_respondsToSelector(v5, "didLayoutIntoTarget") & 1) != 0)
        objc_msgSend(v5, "didLayoutIntoTarget");
      v36 = *(_QWORD *)(a1 + 80);
      v37 = *(_QWORD *)(a1 + 64);
      v38 = v55;
      v39 = sub_1001AE2A0(v55);
      if (v38 == 8232)
        v40 = 1;
      else
        v40 = v39;
      if (v36 < v37)
        v17 = 1;
      else
        v17 = v40;
    }
    else
    {
      v17 = 0;
    }

  }
  else
  {
    v17 = 0;
  }

  return v17;
}

void sub_100128328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100128410(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100128440(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100128470(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001284A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001284D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100128500(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100128530(uint64_t a1, void *a2, uint64_t a3, NSUInteger a4, uint64_t a5, uint64_t a6)
{
  id v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  id v19;
  void *v20;
  BOOL v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  id v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  id obj[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v10 = a2;
  *(_QWORD *)(a1 + 816) = v10;
  v11 = objc_msgSend(v10, "textIsVertical");
  if (((v11 ^ ((*(_QWORD *)(a1 + 32) & 0x10) == 0)) & 1) == 0)
  {
    v12 = 16;
    if (!v11)
      v12 = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFEFLL | v12;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 24))(*(_QWORD *)(a1 + 824));
    v13 = *(_QWORD *)(a1 + 824);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 16), "forceWesternLineBreaking") & 1) != 0)
      objc_msgSend(*(id *)(a1 + 16), "forceWesternLineBreaking");
    operator new();
  }
  sub_10005D924((uint64_t)obj);
  sub_10005DCE4(a1 + 80, (uint64_t)obj);
  sub_10005DCE0(obj);
  *(_OWORD *)(a1 + 176) = xmmword_100EEE418;
  sub_100127850((NSRange *)(a1 + 80), a4);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "columns"));
  if (objc_msgSend(v14, "count"))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", a3));
    sub_10005DD20(a1 + 80, (uint64_t)v15);

    v16 = *(void **)(a1 + 8);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "styleProvider"));
    sub_1001720FC((uint64_t)obj, v16, v17, 0, (uint64_t)objc_msgSend(*(id *)(a1 + 8), "paragraphCount") - 1, 1);
    objc_storeStrong((id *)(a1 + 104), obj[0]);
    objc_storeStrong((id *)(a1 + 112), obj[1]);
    v18 = v44;
    *(_OWORD *)(a1 + 120) = v43;
    *(_OWORD *)(a1 + 136) = v18;
    *(_OWORD *)(a1 + 152) = v45;
    *(_QWORD *)(a1 + 168) = v46;
    sub_100171FA4(obj);

  }
  *(_QWORD *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0x7FFFFFFFFFFFFFFFLL;
  sub_10012BF80(a1);
  sub_10012A53C(a1, 0, 0x7FFFFFFFFFFFFFFFuLL);
  v19 = sub_10005DD18(a1 + 80);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = v20 == 0;

  if (!v21)
  {
    v22 = sub_10005DD18(a1 + 80);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    *(_QWORD *)(a1 + 256) = objc_msgSend(v23, "columnIndex");

    if (*(_QWORD *)(a1 + 256) != a3)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101239FE8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFD2C8();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123A008);
      v24 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLayoutChore::protectedSetUpLayoutState(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, NSUInteger, CRLWPCharIndex, __strong id<TSDHint>, CRLWPLayoutFlags)"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v25, v26, 715, 0, "Column index mismatch");

    }
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "textWrapper"));
  sub_10005DD70(a1 + 80, v27);

  if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 16), "textColorOverride") & 1) != 0)
  {
    v28 = *(void **)(a1 + 16);
LABEL_25:
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "textColorOverride"));
    goto LABEL_27;
  }
  v29 = objc_opt_respondsToSelector(v10, "textColorOverride");
  v28 = v10;
  if ((v29 & 1) != 0)
    goto LABEL_25;
  v30 = 0;
LABEL_27:
  sub_10005DD8C(a1 + 80, v30);
  objc_msgSend(v10, "maxSize");
  v31 = objc_msgSend(v10, "position");
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v31, v32);
  *(_QWORD *)(a1 + 592) = v33;
  *(_QWORD *)(a1 + 600) = v34;
  *(_QWORD *)(a1 + 608) = v35;
  *(_QWORD *)(a1 + 616) = v36;
  if ((objc_opt_respondsToSelector(v10, "shouldHyphenate") & 1) != 0)
    *(_BYTE *)(a1 + 431) = objc_msgSend(v10, "shouldHyphenate");
  else
    *(_BYTE *)(a1 + 431) = 1;
  *(_QWORD *)(a1 + 496) = 0x4032000000000000;
  sub_10012C31C(a1);
  *(_QWORD *)(a1 + 648) = a6;
  if ((objc_opt_respondsToSelector(v10, "restrictedLayoutCharRange") & 1) != 0)
  {
    v37 = (uint64_t)objc_msgSend(v10, "restrictedLayoutCharRange");
    v39 = v38;
  }
  else
  {
    v37 = 0x7FFFFFFFFFFFFFFFLL;
    v39 = 0;
  }
  sub_10005DDBC(a1 + 80, v37, v39);
  if ((objc_opt_respondsToSelector(v10, "alwaysIncludesSpaceBefore") & 1) != 0)
    v40 = objc_msgSend(v10, "alwaysIncludesSpaceBefore");
  else
    v40 = 0;
  *(_BYTE *)(a1 + 673) = v40;
  if ((objc_opt_respondsToSelector(v10, "alwaysIncludesSpaceAfter") & 1) != 0)
    v41 = objc_msgSend(v10, "alwaysIncludesSpaceAfter");
  else
    v41 = 0;
  *(_BYTE *)(a1 + 674) = v41;

}

void sub_100128AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

unint64_t sub_100128B98(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = a1[100];
  if (0xF47E8FD1FA3F47E9 * ((uint64_t)(v4 - a1[99]) >> 3) >= 6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A028);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD348();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A048);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "size_t CRLWPLayoutChore::pPushLayoutState(const CRLWPLayoutState &)"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 766, 0, "Too many layoutStates pushed");

    v4 = a1[100];
  }
  if (v4 >= a1[101])
  {
    v8 = sub_100133ABC(a1 + 99, a2);
  }
  else
  {
    sub_10005DC7C(v4, a2);
    v8 = v4 + 712;
    a1[100] = v4 + 712;
  }
  a1[100] = v8;
  return 0xF47E8FD1FA3F47E9 * ((v8 - a1[99]) >> 3);
}

void sub_100128DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100128DE4(uint64_t a1, void *a2, uint64_t a3, double *a4, _DWORD *a5, _WORD *a6, int *a7, double a8, double a9)
{
  uint64_t v14;
  _BYTE *v15;
  CGPoint origin;
  CGSize size;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unsigned __int16 v25;
  void *v26;
  void *v27;
  double v28;
  char v29;
  unint64_t v30;
  unsigned int v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  double v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSUInteger v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unsigned int v64;
  void *v65;
  void *v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  double v79;
  CGFloat v80;
  double v81;
  CGFloat v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  unsigned int v88;
  NSObject *v89;
  void *v90;
  void *v91;
  void *v92;
  char *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  id v97;
  void *v98;
  unsigned __int8 v99;
  uint64_t i;
  unint64_t v103;
  unint64_t *v104;
  int *v105;
  __int16 v106;
  void *v107;
  id v109;
  _WORD *v111;
  _BYTE v112[712];
  _OWORD v113[3];
  _OWORD v114[3];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  CGAffineTransform v118;
  unsigned __int8 v119;
  unsigned int v120;
  char v121;
  double v122;
  uint64_t v123;
  double v124;
  uint8_t v125[4];
  unsigned int v126;
  __int16 v127;
  const char *v128;
  __int16 v129;
  const char *v130;
  __int16 v131;
  int v132;
  uint8_t buf[56];
  _BYTE v134[880];
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;

  v109 = a2;
  v14 = 0;
  v124 = a9;
  v123 = 0x4028000000000000;
  do
  {
    v15 = &v134[v14];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    origin = CGRectZero.origin;
    size = CGRectZero.size;
    *((_OWORD *)v15 + 1) = CGRectZero.origin;
    *((CGSize *)v15 + 2) = size;
    *((CGPoint *)v15 + 3) = origin;
    *((CGSize *)v15 + 4) = size;
    *((_QWORD *)v15 + 10) = 0;
    v14 += 88;
  }
  while (v14 != 880);
  v18 = sub_100132B88(a1, v109, *a7, (uint64_t)v134);
  v19 = *(double *)(a1 + 208);
  v20 = *(double *)(a1 + 224);
  v111 = a6;
  if (v18 == 0.0)
  {
    v25 = 0;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 240);
    v22 = *(_QWORD *)(a1 + 248);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "columns"));
    v24 = v22 + v21;
    if ((unint64_t)objc_msgSend(v23, "count") >= v24)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "columns"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectAtIndexedSubscript:", v24 - 1));
      v25 = (unsigned __int16)objc_msgSend(v27, "layoutResultFlags");

    }
    else
    {
      v25 = 0;
    }

  }
  v28 = rint(v18 + v19 + v20);
  v106 = v25;
  if ((v25 & 0x200) == 0)
    v28 = a9;
  v122 = v28;
  v121 = (unint64_t)(v25 & 0x200) >> 9;
  v104 = (unint64_t *)(a1 + 80);
  v103 = sub_100128B98((uint64_t *)a1, a1 + 80);
  v29 = *(_BYTE *)(a1 + 856);
  *v111 = 0;
  v119 = 0;
  *(_QWORD *)(a1 + 256) = *a7;
  v120 = 1;
  while (1)
  {
    v30 = *(_QWORD *)(a1 + 80);
    if (v30 > *(_QWORD *)(a1 + 64))
    {
      v31 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123A688);
      v32 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v31;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "BOOL CRLWPLayoutChore::pLayOutPiece(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLay"
                              "outFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 3528;
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _state.charIndex", buf, 0x22u);
      }
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123A6A8);
      v33 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
      {
        v62 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v31;
        *(_WORD *)&buf[8] = 2114;
        *(_QWORD *)&buf[10] = v62;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v33, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

      }
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLayoutChore::pLayOutPiece(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v34, v35, 3528, 0, "Bad _state.charIndex");

      v30 = *v104;
    }
    v36 = *(_QWORD *)(a1 + 816);
    v37 = *(_QWORD *)(a1 + 8);
    v38 = *a7;
    v39 = *a4;
    v40 = v122;
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "styleProvider"));
    +[CRLWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:](CRLWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:", v36, v37, v30, v38, 0, v41, v39, v40);

    buf[0] = 0;
    LOBYTE(v115) = 0;
    v42 = *a7;
    v43 = *(_QWORD *)(a1 + 248);
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "columns"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", *a7));

    objc_msgSend(v45, "frameBounds");
    if (v46 <= 0.0 && (objc_msgSend(v109, "autosizeFlags") & 1) == 0)
      break;
    v47 = v43 + v42;
    v48 = *a7;
    if (v43 + v42 <= v48)
      v49 = *a7;
    else
      v49 = v43 + v42;
    if (v43 + v42 >= v48)
      v50 = *a7;
    else
      v50 = v43 + v42;
    *(_BYTE *)(a1 + 856) = v29;
    v51 = sub_100129BBC(a1, a3 & 0xFFFFFFFFFFFFFFFELL, v50, v49 - v50, *(void **)(a1 + 816), (uint64_t)v111, (uint64_t)&v119, buf, (unsigned __int8 *)&v115);
    v52 = v119;
    v53 = (unsigned __int16)*v111;
    v54 = *a7;
    v55 = sub_10012BD94(a1);
    if (v52)
      v57 = v53 == 5;
    else
      v57 = 1;
    if (v57)
      v58 = 0;
    else
      v58 = v51 ^ 1;
    v59 = sub_100132D70(a1, v58, v54, v55, (uint64_t)v134, a9, v56, v47, v106, (double *)&v123, &v124, &v122, a4, &v121, &v120);

    if ((v59 & 1) == 0 || (v60 = v120, v120 > 0xF))
    {
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 816), "columns"));
      if (*(_QWORD *)(a1 + 248))
      {
        v63 = 0;
        v64 = 0;
        v105 = a7;
        do
        {
          v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectAtIndexedSubscript:", v64 + *a7));
          v66 = v65;
          if ((a3 & 1) != 0)
          {
            objc_msgSend(v65, "frameBounds");
            v137.origin.x = v67;
            v137.origin.y = v68;
            v137.size.width = v69;
            v137.size.height = v70;
            if (CGRectEqualToRect(*(CGRect *)&v134[88 * v63 + 16], v137))
            {
              v71 = sub_100130694(a1, (uint64_t ***)&v134[88 * v63], (uint64_t *)objc_msgSend(v66, "lineFragmentArray"), v66, a3, *(double *)&v134[88 * v63 + 80]);
            }
            else
            {
              objc_msgSend(v66, "erasableBounds:", 0);
              v76 = v75;
              v78 = v77;
              v80 = v79;
              v82 = v81;
              if (v66)
                objc_msgSend(v66, "transformToWP");
              else
                memset(&v118, 0, sizeof(v118));
              v135.origin.x = v76;
              v135.origin.y = v78;
              v135.size.width = v80;
              v135.size.height = v82;
              v138 = CGRectApplyAffineTransform(v135, &v118);
              v136 = CGRectUnion(*(CGRect *)&v134[88 * v63 + 48], v138);
              v71 = sub_100133308(v136.origin.x, v136.origin.y, v136.size.width, v136.size.height, v136.origin.x, v136.origin.y, v136.size.width, v136.size.height, v83, v66, 0, 0);
            }
            v84 = v71;
            v85 = v72;
            v86 = v73;
            v87 = v74;
            memset(buf, 0, 48);
            if (v66)
              objc_msgSend(v66, "transformFromWP");
            +[CRLWPLayoutManager setTransformForColumn:andInvalidateWPRect:inTarget:](CRLWPLayoutManager, "setTransformForColumn:andInvalidateWPRect:inTarget:", v66, *(_QWORD *)(a1 + 816), v84, v85, v86, v87);
            v116 = 0u;
            v117 = 0u;
            v115 = 0u;
            if (v66)
              objc_msgSend(v66, "transformFromWP");
            v114[1] = *(_OWORD *)&buf[16];
            v114[2] = *(_OWORD *)&buf[32];
            v113[0] = v115;
            v113[1] = v116;
            v113[2] = v117;
            v114[0] = *(_OWORD *)buf;
            if (!sub_100079164((double *)v114, (double *)v113))
            {
              v88 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
              if (qword_10147E370 != -1)
                dispatch_once(&qword_10147E370, &stru_10123A6C8);
              v89 = off_1013D9070;
              if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v125 = 67109890;
                v126 = v88;
                v127 = 2082;
                v128 = "BOOL CRLWPLayoutChore::pLayOutPiece(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlag"
                       "s, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)";
                v129 = 2082;
                v130 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
                v131 = 1024;
                v132 = 3700;
                _os_log_error_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Computed transform differs by more than translation", v125, 0x22u);
              }
              if (qword_10147E370 != -1)
                dispatch_once(&qword_10147E370, &stru_10123A6E8);
              v90 = off_1013D9070;
              if (os_log_type_enabled((os_log_t)v90, OS_LOG_TYPE_ERROR))
              {
                v93 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
                *(_DWORD *)v125 = 67109378;
                v126 = v88;
                v127 = 2114;
                v128 = v93;
                _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v90, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v125, 0x12u);

              }
              v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLayoutChore::pLayOutPiece(CRLCanvasLayout<CRLWPLayoutTarget> *__strong, CRLWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)"));
              v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
              +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v91, v92, 3700, 0, "Computed transform differs by more than translation");

            }
            a7 = v105;
          }

          v63 = ++v64;
        }
        while (*(_QWORD *)(a1 + 248) > (unint64_t)v64);
      }
      *a7 = v47;
      if (v52)
      {
        sub_10012BF80(a1);
        v94 = *a7;
        *(_QWORD *)(a1 + 240) = v94;
        *(_QWORD *)(a1 + 256) = v94;
        if (*v111 == 5)
          v95 = 1;
        else
          v95 = v51;
        v96 = 1;
        if ((v95 & 1) == 0 && *a4 < a8 && *(_QWORD *)(a1 + 80) < *(_QWORD *)(a1 + 40))
        {
          v97 = sub_10005DD28((uint64_t)v104);
          v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
          v99 = objc_msgSend(v98, "alwaysStartsNewTarget");

          if ((v99 & 1) != 0)
            goto LABEL_72;
          v96 = 0;
          ++*a5;
        }
      }
      else
      {
LABEL_72:
        v96 = 1;
      }

      goto LABEL_75;
    }
    *v111 = 0;
    v119 = 0;
    *(_QWORD *)(a1 + 256) = *a7;
    v120 = v60 + 1;
    v61 = sub_10012BD94(a1);
    sub_10012BA00(a1, v61);
    sub_10026B220(*(_QWORD *)(a1 + 824));
  }

  v96 = 1;
LABEL_75:
  sub_100129998(a1, v103, (uint64_t)v112);
  sub_10005DCE0(v112);
  for (i = 792; i != -88; i -= 88)
    sub_100038CC0((uint64_t)&v134[i]);

  return v96;
}

void sub_10012985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  void *v27;
  uint64_t i;

  for (i = 792; i != -88; i -= 88)
    sub_100038CC0((uint64_t)&STACK[0x4C8] + i);

  _Unwind_Resume(a1);
}

uint64_t sub_100129998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  CKRecordID v17;
  Swift::String v18;

  v3 = *(_QWORD *)(a1 + 800);
  if (v3 == *(_QWORD *)(a1 + 792) || 0xF47E8FD1FA3F47E9 * ((v3 - *(_QWORD *)(a1 + 792)) >> 3) != a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A068);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD3C8();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A088);
    v7 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    sub_1001BC7E8((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d stack size is invalid", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"const CRLWPLayoutState CRLWPLayoutChore::pPopLayoutState(size_t)");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "const CRLWPLayoutState CRLWPLayoutChore::pPopLayoutState(size_t)"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 776, 1, "stack size is invalid");

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v17, v18);
    abort();
  }
  sub_10005DC7C(a3, v3 - 712);
  result = sub_10005DCE0(*(_QWORD *)(a1 + 800) - 712);
  *(_QWORD *)(a1 + 800) = result;
  return result;
}

void sub_100129B94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100129BBC(uint64_t a1, uint64_t a2, NSUInteger a3, NSUInteger a4, void *a5, uint64_t a6, uint64_t a7, _BYTE *a8, unsigned __int8 *a9)
{
  void *v12;
  char *v13;
  BOOL v14;
  char *v15;
  double v16;
  double v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  NSString *v24;
  void *v25;
  int v26;
  char i;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *j;
  NSUInteger v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  NSMutableArray *v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSString *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  void *v62;
  char v63;
  char v64;
  NSUInteger v65;
  unsigned int v66;
  char v67;
  int rangea;
  id v70;
  unint64_t v72;
  void *v73;
  _BYTE v75[712];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint8_t v80[128];
  uint8_t buf[4];
  unsigned int v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  int v88;
  __int16 v89;
  id v90;
  __int16 v91;
  void *v92;
  NSRange v93;
  NSRange v94;

  v70 = a5;
  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "columns"));
  v65 = a3;
  if (*(_BYTE *)(a1 + 264))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "firstObject"));
    v13 = (char *)objc_msgSend(v12, "scaleTextPercent");
    v14 = (unint64_t)v13 < 0x64;
    if ((unint64_t)v13 >= 0x64)
      v15 = v13;
    else
      v15 = v13 + 1;
    v72 = (unint64_t)v15;

  }
  else
  {
    v14 = 0;
    v16 = *(double *)(a1 + 272);
    if (v16 == 0.0)
      v17 = 100.0;
    else
      v17 = v16 * 100.0;
    v72 = (unint64_t)v17;
  }
  v60 = v14;
  v58 = sub_100128B98((uint64_t *)a1, a1 + 80);
  v63 = *(_BYTE *)(a1 + 856);
  v18 = objc_msgSend(v73, "count");
  v19 = (id)(v65 + a4);
  if (v65 + a4 > (unint64_t)v18)
  {
    v66 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101239FA8);
    v20 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
    {
      v94.location = v65;
      v94.length = a4;
      v55 = NSStringFromRange(v94);
      v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
      *(_DWORD *)buf = 67110402;
      v82 = v66;
      v83 = 2082;
      v84 = "BOOL CRLWPLayoutChore::pLayOutColumns(CRLWPLayoutFlags, NSRange, CRLCanvasLayout<CRLWPLayoutTarget> *__stron"
            "g, unichar &, BOOL &, BOOL &, BOOL &)";
      v85 = 2082;
      v86 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
      v87 = 1024;
      v88 = 438;
      v89 = 2048;
      v90 = v18;
      v91 = 2114;
      v92 = v56;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Not enough columns: %lu, but need %{public}@", buf, 0x36u);

    }
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101239FC8);
    v21 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLayoutChore::pLayOutColumns(CRLWPLayoutFlags, NSRange, CRLCanvasLayout<CRLWPLayoutTarget> *__strong, unichar &, BOOL &, BOOL &, BOOL &)"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    v93.location = v65;
    v93.length = a4;
    v24 = NSStringFromRange(v93);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v22, v23, 438, 0, "Not enough columns: %lu, but need %{public}@", v18, v25);

  }
  v26 = 0;
  if (v19 >= v18)
    v19 = v18;
  v57 = 100;
  v59 = 40;
  for (i = v14; ; i = 1)
  {
    rangea = v26;
    v64 = i;
    while (1)
    {
      v67 = i;
      if ((v64 & 1) != 0)
      {
        sub_10026B220(*(_QWORD *)(a1 + 824));
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "firstObject"));
        objc_msgSend(v61, "setScaleTextPercent:", v72);
        sub_10012A53C(a1, 0, 0x7FFFFFFFFFFFFFFFuLL);
        v29 = objc_opt_class(CRLCanvasLayout, v28);
        v30 = sub_100221D0C(v29, *(void **)(a1 + 16));
        v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v62 = v31;
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "children"));
        v33 = a7;
        v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v76, v80, 16);
        if (v34)
        {
          v35 = *(_QWORD *)v77;
          do
          {
            for (j = 0; j != v34; j = (char *)j + 1)
            {
              if (*(_QWORD *)v77 != v35)
                objc_enumerationMutation(v32);
              objc_msgSend(*(id *)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)j), "invalidateTextScalePercent");
            }
            v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v76, v80, 16);
          }
          while (v34);
        }

        a7 = v33;
      }
      *(_BYTE *)(a1 + 856) = v63;
      v37 = v65;
      if (v65 < (unint64_t)v19)
      {
        do
        {
          *(_QWORD *)(a1 + 256) = v37;
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "objectAtIndexedSubscript:", v37));
          sub_10005DD20(a1 + 80, (uint64_t)v38);

          v39 = sub_10005DD18(a1 + 80);
          v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
          objc_msgSend(v40, "setScaleTextPercent:", v72);

          if (!*a8)
          {
            v43 = sub_10005DD18(a1 + 80);
            v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
            objc_msgSend(v44, "setStartCharIndex:", *(_QWORD *)(a1 + 80));

            objc_msgSend(v70, "maxSize");
            v45 = sub_10005DD18(a1 + 80);
            v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
            objc_msgSend(v46, "maxSize");

            objc_msgSend(*(id *)(a1 + 8), "wpKind");
            v47 = objc_opt_new(NSMutableArray);
            sub_10012B0C4(a1, a2, v47);
          }
          v41 = sub_10005DD18(a1 + 80);
          v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          objc_msgSend(v42, "makeEmpty:anchoredRange:layoutResultFlags:", *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), 0, 16 * *a9);

          ++v37;
        }
        while (v19 != (id)v37);
      }
      v26 = rangea + 1;
      if (*(_BYTE *)(a1 + 264))
        break;
      i = 1;
      ++rangea;
      if ((v67 & 1) == 0)
        goto LABEL_58;
    }
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "lastObject"));
    v49 = (unint64_t)objc_msgSend(v48, "layoutResultFlags") & 3;
    if (!(v67 & 1 | (v49 != 0)))
      break;
    if (((rangea == 0) & v60) == 1)
    {
      if (v49)
      {
        v60 = 1;
        v57 = --v72;
        goto LABEL_56;
      }
      v60 = 0;
      v52 = 100;
    }
    else
    {
      if (v26 == 2 && (v60 & 1) != 0 && v49 == 0)
        break;
      v50 = v57;
      v51 = v59;
      if ((unint64_t)(v57 - v59) > 1)
      {
        v60 = 0;
        if (v49)
          v50 = v72;
        else
          v51 = v72;
        v57 = v50;
        v59 = v51;
        v52 = (unint64_t)(v51 + v50) >> 1;
      }
      else
      {
        if (!v49 || v72 == v59)
          break;
        v60 = 0;
        v52 = v59;
      }
    }
    v72 = v52;
LABEL_56:
    v53 = sub_10012BD94(a1);
    sub_10012BA00(a1, v53);
    *a8 = 0;

  }
LABEL_58:
  sub_100129998(a1, v58, (uint64_t)v75);
  sub_10005DCE0(v75);

  return 0;
}

void sub_10012A3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_10012A4DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012A50C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012A53C(uint64_t a1, uint64_t a2, NSUInteger a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unsigned int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSString *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  id v29;
  void *v30;
  id v31;
  double v32;
  id v33;
  void *v34;
  BOOL v35;
  float v36;
  float v37;
  uint64_t v38;
  objc_class *v39;
  void *v40;
  id v41;
  void *v42;
  double v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  float v53;
  double v54;
  BOOL v55;
  double v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  void *v67;
  double v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  float v73;
  id v74;
  void *v75;
  float v76;
  float v77;
  double v78;
  id v79;
  void *v80;
  BOOL v81;
  id v82;
  void *v83;
  int v84;
  id v85;
  float v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  NSString *v94;
  uint64_t v95;
  void *v96;
  uint8_t buf[4];
  unsigned int v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  int v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;

  v5 = a1 + 80;
  if (a2)
    v6 = a2;
  else
    v6 = a1 + 80;
  v7 = sub_1001721A4(v6 + 24, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  if (!v8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A7C8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD4C8();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A7E8);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLayoutChore::pSetUpStateForParagraphIndex(CRLWPLayoutState *, CRLWPCharIndex)"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 5707, 0, "Bad paragraphEnumerator");

  }
  *(_QWORD *)(v6 + 440) = 0;
  *(_QWORD *)(v6 + 448) = 0;
  *(_QWORD *)(v6 + 424) = 0x7FFFFFFFFFFFFFFFLL;
  v12 = sub_1001721A4(v6 + 24, (_QWORD *)(v6 + 96));
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (a3 != 0x7FFFFFFFFFFFFFFFLL)
    sub_100127850((NSRange *)v6, a3);
  v14 = *(_QWORD *)v6;
  v15 = *(_QWORD *)(v6 + 96);
  v16 = *(_QWORD *)(v6 + 104);
  v17 = *(_QWORD *)v6 < v15 || *(_QWORD *)v6 - v15 >= v16;
  if (v17 && (v14 != v16 + v15 || v14 != *(_QWORD *)(a1 + 64)))
  {
    v18 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A808);
    v19 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR))
    {
      v95 = *(_QWORD *)v6;
      v94 = NSStringFromRange(*(NSRange *)(v6 + 96));
      *(_DWORD *)buf = 67110402;
      v98 = v18;
      v99 = 2082;
      v100 = "void CRLWPLayoutChore::pSetUpStateForParagraphIndex(CRLWPLayoutState *, CRLWPCharIndex)";
      v101 = 2082;
      v102 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm";
      v103 = 1024;
      v104 = 5727;
      v105 = 2048;
      v106 = v95;
      v107 = 2114;
      v108 = objc_claimAutoreleasedReturnValue(v94);
      v96 = (void *)v108;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex %lu is outside of paragraphRange: %{public}@", buf, 0x36u);

    }
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A828);
    v20 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLayoutChore::pSetUpStateForParagraphIndex(CRLWPLayoutState *, CRLWPCharIndex)"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    v23 = *(_QWORD *)v6;
    v24 = NSStringFromRange(*(NSRange *)(v6 + 96));
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v21, v22, 5727, 0, "charIndex %lu is outside of paragraphRange: %{public}@", v23, v25);

    v15 = *(_QWORD *)(v6 + 96);
    v16 = *(_QWORD *)(v6 + 104);
  }
  v26 = v16 + v15;
  v27 = *(_QWORD *)(a1 + 64);
  if (v26 > v27)
    *(_QWORD *)(v6 + 104) = v27 - v15;
  *(_QWORD *)(v6 + 208) = sub_1001722CC(v6 + 24);
  *(_BYTE *)(v6 + 256) = 0;
  *(_BYTE *)(v6 + 456) = *(_QWORD *)v6 == *(_QWORD *)(v6 + 96);
  v28 = *(double *)(v6 + 192);
  if (v28 == 0.0)
  {
    v29 = sub_10005DD18(v6);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v31 = objc_msgSend(v30, "scaleTextPercent");

    v32 = (double)(unint64_t)v31;
  }
  else
  {
    v32 = v28 * 100.0;
  }
  v33 = sub_10005DD08(v6);
  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  v35 = v13 == v34;

  if (!v35)
  {
    sub_10005DD10(v6, v13);
    objc_msgSend(v13, "floatValueForProperty:", 49);
    *(double *)(v6 + 296) = v36;
    objc_msgSend(v13, "floatValueForProperty:", 48);
    *(double *)(v6 + 304) = v37;
    v39 = (objc_class *)objc_opt_class(CRLWPLineSpacing, v38);
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "valueForProperty:", 40));
    v41 = sub_1002223BC(v39, v40);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v41);

    if (v42)
      objc_msgSend(v42, "amount");
    else
      v43 = 1.0;
    *(double *)(v6 + 288) = v43;
    *(_QWORD *)(v6 + 272) = objc_msgSend(v42, "mode");
    objc_msgSend(v42, "baselineRule");
    *(_QWORD *)(v6 + 280) = v44;
    objc_msgSend(v13, "floatValueForProperty:", 39);
    *(double *)(v6 + 216) = v45;
    objc_msgSend(v13, "floatValueForProperty:", 47);
    *(double *)(v6 + 224) = v46;
    objc_msgSend(v13, "floatValueForProperty:", 33);
    *(double *)(v6 + 232) = v47;
    *(_BYTE *)(v6 + 352) = objc_msgSend(v13, "intValueForProperty:", 35) != 0;
    v49 = objc_opt_class(CRLWPTabs, v48);
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "valueForProperty:", 51));
    v51 = sub_100221D0C(v49, v50);
    v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
    sub_10005DD60(v6, (uint64_t)v52);

    objc_msgSend(v13, "floatValueForProperty:", 31);
    v54 = v53;
    v55 = v53 == 0.0;
    v56 = 36.0;
    if (!v55)
      v56 = v54;
    *(double *)(v6 + 408) = v56;
    v57 = *(void **)(a1 + 848);
    *(_QWORD *)(a1 + 848) = 0;

    if (!*(_BYTE *)(v6 + 352))
      goto LABEL_50;
    v59 = objc_opt_class(NSString, v58);
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "valueForProperty:", 15));
    v61 = sub_100221D0C(v59, v60);
    v62 = (void *)objc_claimAutoreleasedReturnValue(v61);

    v64 = objc_opt_class(NSNull, v63);
    if ((objc_opt_isKindOfClass(v62, v64) & 1) != 0
      || objc_msgSend(v62, "isEqualToString:", CFSTR("__multilingual")))
    {
      if ((objc_opt_respondsToSelector(*(_QWORD *)(a1 + 816), "hyphenationLocale") & 1) == 0)
      {
LABEL_49:

LABEL_50:
        v67 = *(void **)(a1 + 848);
        if (!v67)
          *(_BYTE *)(v6 + 352) = 0;
        sub_10005DD9C(v6, v67);

        goto LABEL_53;
      }
      v65 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 816), "hyphenationLocale"));
    }
    else
    {
      if (!v62 || (objc_msgSend(v62, "isEqualToString:", CFSTR("__none")) & 1) != 0)
        goto LABEL_49;
      v65 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", v62);
    }
    v66 = *(void **)(a1 + 848);
    *(_QWORD *)(a1 + 848) = v65;

    goto LABEL_49;
  }
LABEL_53:
  v68 = (float)((float)(unint64_t)v32 / 100.0);
  *(float64x2_t *)(v6 + 320) = vmulq_n_f64(*(float64x2_t *)(v6 + 296), v68);
  if (!*(_QWORD *)(v6 + 272))
    v68 = 1.0;
  *(double *)(v6 + 312) = *(double *)(v6 + 288) * v68;
  sub_10005DD50(v5, *(void **)(a1 + 8));
  v69 = sub_1001722DC(v6 + 24);
  v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
  sub_10005DD40(v6, v70);

  v71 = sub_10005DD38(v6);
  v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
  objc_msgSend(v72, "labelIndentForLevel:", *(_QWORD *)(v6 + 208));
  *(double *)(v6 + 248) = v73;

  v74 = sub_10005DD38(v6);
  v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
  objc_msgSend(v75, "textIndentForLevel:", *(_QWORD *)(v6 + 208));
  v77 = v76;

  v78 = *(double *)(v6 + 248) + v77;
  *(double *)(v6 + 240) = v78;
  *(double *)(v6 + 264) = v78 + *(double *)(v6 + 216);
  v79 = sub_10005DD38(v6);
  v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
  if (!v80)
    goto LABEL_59;
  if (!sub_100172390(v6 + 24))
  {
    v81 = objc_msgSend(*(id *)(a1 + 8), "characterAtIndex:", *(_QWORD *)(v6 + 96) - 1) == 11;

    if (!v81)
      goto LABEL_60;
LABEL_59:
    *(_BYTE *)(v6 + 348) = 0;
    *(_BYTE *)(v6 + 350) = 0;
    goto LABEL_70;
  }

LABEL_60:
  v82 = sub_10005DD38(v6);
  v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
  *(_BYTE *)(v6 + 348) = objc_msgSend(v83, "labelTypeForLevel:", *(_QWORD *)(v6 + 208)) != 0;

  v84 = *(unsigned __int8 *)(v6 + 348);
  if (*(_BYTE *)(v6 + 348)
    || (v85 = sub_10005DD38(v6),
        v83 = (void *)objc_claimAutoreleasedReturnValue(v85),
        objc_msgSend(v83, "textIndentForLevel:", *(_QWORD *)(v6 + 208)),
        v86 > 0.0)
    || *(double *)(v6 + 248) > 0.0)
  {
    *(_BYTE *)(v6 + 350) = sub_100172378(v6 + 24);
    if (v84)
      goto LABEL_70;
  }
  else
  {
    *(_BYTE *)(v6 + 350) = 0;
  }

LABEL_70:
  *(_BYTE *)(v6 + 349) = sub_100172378(v6 + 24);
  v87 = sub_100132998(a1, v13);
  *(_QWORD *)(v6 + 400) = v87;
  if (v87 == (id)4)
    *(_QWORD *)(v6 + 400) = *(unsigned __int8 *)(v6 + 349);
  *(_WORD *)(v6 + 432) = 0;
  *(_BYTE *)(v6 + 434) = 0;
  v89 = *(_QWORD *)(v6 + 96);
  v88 = *(_QWORD *)(v6 + 104);
  if (v89 != sub_10026B2C4(*(_QWORD *)(a1 + 824)) || v88 != v90)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 24))(*(_QWORD *)(a1 + 824));
  if (__CFADD__(*(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104)))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A848);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD448();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A868);
    v91 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v91, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLayoutChore::pSetUpStateForParagraphIndex(CRLWPLayoutState *, CRLWPCharIndex)"));
    v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v92, v93, 5956, 0, "Bad _state.paragraphRange.length");

  }
}

void sub_10012AF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10012B0C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  id v9;
  void *v10;
  int v11;
  id v12;
  void *v13;

  a3;
  objc_msgSend(*(id *)(a1 + 816), "autosizeFlags");
  sub_10012C31C(a1);
  sub_100128B98((uint64_t *)a1, a1 + 80);
  v4 = sub_10005DD18(a1 + 80);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = *((_QWORD *)objc_msgSend(v5, "lineFragmentArray") + 1);
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  v9 = sub_10005DD18(a1 + 80);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v10, "contentBlockBottom");

  v11 = *(unsigned __int8 *)(a1 + 264);
  v12 = sub_10005DD18(a1 + 80);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  *(_BYTE *)(a1 + 265) = ((objc_msgSend(v13, "layoutResultFlags") >> 8) & 1) != v11;

  operator new();
}

void sub_10012B884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  uint64_t v19;

  sub_100038CC0(v19 - 184);
  sub_100038CC0(v19 - 168);

  _Unwind_Resume(a1);
}

char *sub_10012B984(uint64_t a1)
{
  id v2;
  void *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v2 = sub_10005DD18(a1 + 80);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (char *)objc_msgSend(v3, "range");
  v6 = v5;

  result = (char *)objc_msgSend(*(id *)(a1 + 8), "characterCount");
  if (&v4[v6] < result)
    return (char *)sub_1001323F4(a1);
  return result;
}

void sub_10012B9F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10012BA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v10;
  char v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  v4 = a1 + 80;
  v5 = *(_BYTE *)(a1 + 584);
  if (a1 + 80 == a2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A888);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD5C8();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A8A8);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLayoutChore::pRestoreState(const CRLWPLayoutState &)"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 6002, 0, "We should not restore from our own object.");

  }
  if (*(_QWORD *)(a2 + 96) == *(_QWORD *)(a1 + 176) && *(_QWORD *)(a2 + 104) == *(_QWORD *)(a1 + 184))
  {
    v11 = *(_BYTE *)(a1 + 512);
    v12 = *(_BYTE *)(a1 + 513);
    v13 = *(_BYTE *)(a1 + 514);
    v14 = *(_QWORD *)(a1 + 528);
    sub_10005DCE4(v4, a2);
    *(_BYTE *)(a1 + 512) = v11;
    *(_BYTE *)(a1 + 513) = v12;
    *(_BYTE *)(a1 + 514) = v13;
    v10 = *(_QWORD *)(a1 + 520);
    if (!v10)
    {
      *(_QWORD *)(a1 + 520) = v14;
      v10 = v14;
    }
  }
  else
  {
    sub_10005DCE4(v4, a2);
    v10 = *(_QWORD *)(a1 + 520);
  }
  *(_BYTE *)(a1 + 584) = v5;
  v15 = *(_QWORD *)(a1 + 184);
  if (v10 > v15 || *(_QWORD *)(a1 + 528) > v15)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A8C8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD548();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A8E8);
    v16 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLayoutChore::pRestoreState(const CRLWPLayoutState &)"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 6025, 0, "Bad _typesetterCharIndex");

  }
}

void sub_10012BD58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10012BD94(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  CKRecordID v13;
  Swift::String v14;

  v1 = *(_QWORD *)(a1 + 800);
  if (*(_QWORD *)(a1 + 792) == v1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A0A8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD648();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A0C8);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    sub_1001BC7E8((uint64_t)"Fatal Assertion failure: %{public}s %{public}s:%d _pushedStates stack is empty", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"const CRLWPLayoutState &CRLWPLayoutChore::pTopLayoutState() const");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "const CRLWPLayoutState &CRLWPLayoutChore::pTopLayoutState() const"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 787, 1, "_pushedStates stack is empty");

    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v13, v14);
    abort();
  }
  return v1 - 712;
}

void sub_10012BF58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10012BF80(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  BOOL v9;
  int v10;
  id v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  id v29;

  v2 = a1 + 80;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 816), "columnMetricsForCharIndex:outRange:", *(_QWORD *)(a1 + 80), a1 + 192));
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A788);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD6C8();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A7A8);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLayoutChore::pSetUpStateForColumnMetrics()"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 5682, 0, "invalid nil value for '%{public}s'", "newColumnMetrics");

  }
  v7 = sub_10005DD28(v2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v3)
    v9 = v3 == v8;
  else
    v9 = 0;
  v10 = !v9;

  if (v10)
  {
    sub_10005DD30(v2, (uint64_t)v3);
    *(_QWORD *)(a1 + 272) = 0;
    v11 = sub_10005DD28(v2);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = v12 == 0;

    if (v13)
    {
      v28 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)&UIEdgeInsetsZero.top;
      *(_OWORD *)(a1 + 224) = v28;
      v29 = objc_msgSend(*(id *)(a1 + 8), "characterCount");
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = v29;
      *(_QWORD *)(a1 + 248) = 1;
      *(_BYTE *)(a1 + 264) = 0;
    }
    else
    {
      objc_msgSend(v3, "adjustedInsetsForTarget:", *(_QWORD *)(a1 + 816));
      *(_QWORD *)(a1 + 208) = v14;
      *(_QWORD *)(a1 + 216) = v15;
      *(_QWORD *)(a1 + 224) = v16;
      *(_QWORD *)(a1 + 232) = v17;
      v18 = sub_10005DD28(v2);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      *(_QWORD *)(a1 + 248) = objc_msgSend(v19, "columnCount");

      v20 = sub_10005DD28(v2);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      *(_BYTE *)(a1 + 264) = objc_msgSend(v21, "shrinkTextToFit");

      v22 = sub_10005DD28(v2);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = objc_opt_respondsToSelector(v23, "textScaleFactor");

      if ((v24 & 1) != 0)
      {
        v25 = sub_10005DD28(v2);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        objc_msgSend(v26, "textScaleFactor");
        *(_QWORD *)(a1 + 272) = v27;

      }
    }
  }
  *(_QWORD *)(a1 + 256) = 0;

}

void sub_10012C244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10012C2BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012C2EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012C31C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;

  if (*(unsigned __int8 *)(a1 + 56) > 2u)
  {
    v2 = sub_10005DD18(a1 + 80);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

    if (v3)
    {
      v4 = sub_10005DD18(a1 + 80);
      v6 = (id)objc_claimAutoreleasedReturnValue(v4);
      objc_msgSend(v6, "frameBounds");
      *(_QWORD *)(a1 + 416) = v5;

    }
    else
    {
      *(_QWORD *)(a1 + 416) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 416) = 0xFFF0000000000000;
  }
}

void sub_10012C3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10012C3C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012C3F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012C424(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012C454(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012C484(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012C4B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10012C4E4(uint64_t a1, uint64_t a2, void *a3)
{
  a3;
  objc_msgSend(*(id *)(a1 + 8), "wpKind");
  operator new();
}

void sub_10012FFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39)
{
  void *v39;

  sub_100038CC0((uint64_t)&STACK[0x5A0]);
  _Unwind_Resume(a1);
}

double sub_100130694(uint64_t a1, uint64_t ***a2, uint64_t *a3, void *a4, char a5, double a6)
{
  id v10;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  NSUInteger v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSUInteger v26;
  NSUInteger v27;
  id location;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  BOOL v46;
  __int128 *v47;
  NSUInteger v48;
  NSRange v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  void *v55;
  double v56;
  CGFloat v57;
  double v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  id v62;
  double v63;
  double v64;
  NSRange v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t *v70;
  uint64_t ***v71;
  id range2;
  void *range2_8;
  NSRange v74;
  CGRect v75;

  v10 = a4;
  x = CGRectNull.origin.x;
  y = CGRectNull.origin.y;
  width = CGRectNull.size.width;
  height = CGRectNull.size.height;
  v16 = *(uint64_t **)*a3;
  v15 = *(uint64_t **)(*a3 + 8);
  v71 = a2;
  v18 = **a2;
  v17 = (*a2)[1];
  v68 = objc_msgSend(*(id *)(a1 + 832), "isEmpty");
  v67 = a1;
  v19 = *(void **)(a1 + 832);
  v70 = a3;
  v20 = sub_100038C60(*a3);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "dirtyRangesIntersecting:", v20, v21));
  range2_8 = v22;
  if (!v22)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A908);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFD9DC();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A928);
    v23 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRect CRLWPLayoutChore::pCompareLineFragments(const line_fragment_array_ptr &, const line_fragment_array_ptr &, CRLWPColumn *__strong, CGFloat, CRLWPLayoutFlags)"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v24, v25, 6063, 0, "invalid nil value for '%{public}s'", "pertinentDirtyRanges");

    v22 = 0;
  }
  range2 = objc_msgSend(v22, "superRange");
  v27 = v26;
  location = objc_msgSend(v22, "delta");
  v29 = (uint64_t)location;
  while (1)
  {
    while (v16 != v15)
    {
      v30 = *v16;
      if (v18 == v17)
      {
        if (v30)
        {
          LODWORD(v36) = (*(unsigned __int8 *)(v30 + 24) >> 3) & 1;
LABEL_30:
          v42 = sub_100133308(x, y, width, height, *(CGFloat *)(v30 + 72), *(CGFloat *)(v30 + 80), *(CGFloat *)(v30 + 88), *(CGFloat *)(v30 + 96), (uint64_t)location, v10, 1, v36);
LABEL_31:
          x = v42;
          y = v43;
          width = v44;
          height = v45;
          v16 += 2;
        }
      }
      else
      {
        v31 = *v18;
        if (v30)
        {
          v37 = *(_QWORD *)(v30 + 24);
          v36 = (v37 >> 3) & 1;
          if (!v31)
            goto LABEL_30;
          v38 = *(double *)(v31 + 48);
          v39 = *(double *)(v30 + 48);
          if (v38 < v39)
            goto LABEL_32;
          if (v38 > v39)
            goto LABEL_29;
          v40 = *(double *)(v31 + 40);
          v41 = *(double *)(v30 + 40);
          if (v40 < v41)
          {
LABEL_32:
            v32 = sub_100133308(x, y, width, height, *(CGFloat *)(v31 + 72), *(CGFloat *)(v31 + 80), *(CGFloat *)(v31 + 88), *(CGFloat *)(v31 + 96), (uint64_t)location, v10, 1, (v37 >> 3) & 1);
            goto LABEL_20;
          }
          if (v40 > v41)
          {
LABEL_29:
            v42 = sub_100133308(x, y, width, height, *(CGFloat *)(v30 + 72), *(CGFloat *)(v30 + 80), *(CGFloat *)(v30 + 88), *(CGFloat *)(v30 + 96), (uint64_t)location, v10, 1, (v37 >> 3) & 1);
            goto LABEL_31;
          }
          if ((a5 & 0x40) != 0)
          {
            location = (id)sub_100148858(*v16, *v18, 0);
            if ((_DWORD)location)
              goto LABEL_48;
            goto LABEL_50;
          }
          v46 = (v37 & 0x8000000000000000) != 0;
          v47 = &xmmword_100EEE418;
          if (!v46)
            v47 = (__int128 *)*v16;
          v66 = (NSRange)*v47;
          if ((v68 & 1) != 0)
            goto LABEL_40;
          v48 = v66.location + v66.length;
          if (v66.location + v66.length >= (unint64_t)range2 || v48 > *(_QWORD *)(v67 + 64))
          {
            if (v48 <= (unint64_t)range2 + v27)
              goto LABEL_48;
LABEL_40:
            if (sub_100148858(v30, v31, v29))
              goto LABEL_48;
            v74.location = (NSUInteger)range2;
            v74.length = v27;
            v49 = NSIntersectionRange(v66, v74);
            location = (id)v49.location;
            if (v49.length)
            {
              v50 = sub_100133308(x, y, width, height, *(CGFloat *)(v30 + 72), *(CGFloat *)(v30 + 80), *(CGFloat *)(v30 + 88), *(CGFloat *)(v30 + 96), v49.location, v10, 1, v36);
LABEL_49:
              x = v50;
              y = v51;
              width = v52;
              height = v53;
              goto LABEL_50;
            }
            goto LABEL_50;
          }
          location = (id)sub_100148858(v30, v31, 0);
          if ((_DWORD)location)
          {
LABEL_48:
            v75 = CGRectUnion(*(CGRect *)(v31 + 72), *(CGRect *)(v30 + 72));
            v50 = sub_100133308(x, y, width, height, v75.origin.x, v75.origin.y, v75.size.width, v75.size.height, v54, v10, 1, v36);
            goto LABEL_49;
          }
LABEL_50:
          v16 += 2;
LABEL_21:
          v18 += 2;
        }
        else if (v31)
        {
          goto LABEL_19;
        }
      }
    }
    if (v18 == v17)
      break;
    v31 = *v18;
    if (*v18)
    {
LABEL_19:
      v32 = sub_100133308(x, y, width, height, *(CGFloat *)(v31 + 72), *(CGFloat *)(v31 + 80), *(CGFloat *)(v31 + 88), *(CGFloat *)(v31 + 96), (uint64_t)location, v10, 1, 0);
LABEL_20:
      x = v32;
      y = v33;
      width = v34;
      height = v35;
      goto LABEL_21;
    }
  }
  if (sub_100038988(*v71) && sub_100038988((_QWORD *)*v70))
  {
    v55 = range2_8;
  }
  else
  {
    objc_msgSend(v10, "frameBounds");
    v57 = v56;
    v59 = v58;
    v61 = v60;
    v55 = range2_8;
    v62 = objc_msgSend(v10, "contentBlockBottom");
    if (v63 >= a6)
    {
      v62 = objc_msgSend(v10, "contentBlockBottom");
      a6 = v64;
    }
    if (a6 - v59 != 0.0)
      x = sub_100133308(x, y, width, height, v57, v59, v61, a6 - v59, (uint64_t)v62, v10, 1, 0);
  }

  return x;
}

void sub_100130D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100130DB4(uint64_t a1@<X0>, char a2@<W2>, _BYTE *a3@<X3>, uint64_t **a4@<X4>, uint64_t **a5@<X5>, _WORD *a6@<X6>, _BYTE *a7@<X7>, uint64_t *a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>)
{
  _WORD *v12;
  _QWORD *v14;
  uint64_t *v16;
  NSRange *v17;
  uint64_t *v18;
  uint64_t *v19;
  NSUInteger location;
  double *v22;
  NSUInteger v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  BOOL v29;
  BOOL v30;
  NSUInteger v32;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  __int128 *v38;
  void *v39;
  void *v40;
  void *v41;
  _BYTE *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  double v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t *v57;

  v12 = a6;
  v14 = a3;
  v16 = a8;
  *a8 = 0;
  a8[1] = 0;
  *(double *)(a1 + 544) = a9;
  *(double *)(a1 + 552) = a10;
  *(double *)(a1 + 560) = a11;
  *(double *)(a1 + 568) = a12;
  if (a11 < 0.0)
    *(_QWORD *)(a1 + 560) = 0;
  v17 = (NSRange *)(a1 + 80);
  a3[169] = a2;
  a3[170] = a2 ^ 1;
  v18 = *a4;
  if (*a4 == *a5)
  {
    v22 = 0;
    goto LABEL_30;
  }
  v19 = v16;
  location = v17->location;
  while (1)
  {
    v22 = (double *)*v18;
    v23 = *(_QWORD *)*v18;
    if (v23 >= location)
      break;
    v18 += 2;
    *a4 = v18;
    if (v18 == *a5)
    {
      v22 = 0;
      v12 = a6;
      v16 = v19;
      goto LABEL_30;
    }
  }
  v57 = v19;
  v24 = sub_10013E640((uint64_t)v22);
  v25 = v14[8];
  v26 = *((_QWORD *)v22 + 3);
  v55 = *(unsigned __int8 *)(a1 + 431);
  v56 = *(unsigned __int8 *)(a1 + 513);
  v54 = *(unsigned __int8 *)(a1 + 432);
  v53 = *(_QWORD *)(a1 + 32);
  v27 = sub_10005DD84(a1 + 80);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  v29 = (v24 | v25 & 0x10000) == 0;

  if (location != v23)
  {
    v12 = a6;
    v16 = v57;
    goto LABEL_28;
  }
  v12 = a6;
  if (v29 || v56)
  {
    v16 = v57;
LABEL_28:
    v14 = a3;
    goto LABEL_29;
  }
  v30 = (v26 & 4) == 0 && ((v26 >> 17) & 1) == (v54 & v55);
  v14 = a3;
  if (!v30)
  {
    v16 = v57;
LABEL_29:
    v17 = (NSRange *)(a1 + 80);
    goto LABEL_30;
  }
  v16 = v57;
  if (((v26 >> 13) & 1) != ((v53 >> 4) & 1) || v28)
    goto LABEL_29;
  if (v22[5] != *(double *)(a1 + 544) || v22[6] != *(double *)(a1 + 552))
    goto LABEL_29;
  v17 = (NSRange *)(a1 + 80);
  if (v22[7] == *(double *)(a1 + 560))
  {
    sub_1001316E4(v57, *a4);
    sub_100148848(*v57);
  }
LABEL_30:
  v14[22] = v22;
  if (!*v16)
    operator new();
  v14[28] = *v16;
  v32 = sub_100278B2C(*(_QWORD *)(a1 + 824), (uint64_t)v14);
  sub_100127850(v17, v32);
  v33 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(a1 + 80) > v33)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A0E8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFDBF0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A108);
    v34 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "line_fragment_ptr CRLWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSUInteger, const BOOL, CRLWPTypesetterParamBlock &, CRLWPLineFragmentArray::const_line_iterator &, const CRLWPLineFragmentArray::const_line_iterator &, unichar &, BOOL &)"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v35, v36, 1855, 0, "Bad _state.charIndex");

    v33 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(a1 + 176);
  }
  v37 = *v16;
  if (*(uint64_t *)(*v16 + 24) < 0)
    v38 = &xmmword_100EEE418;
  else
    v38 = (__int128 *)*v16;
  if (*(_QWORD *)v38 + *((_QWORD *)v38 + 1) > v33)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A128);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFDB70();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A148);
    v39 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v39, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "line_fragment_ptr CRLWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSUInteger, const BOOL, CRLWPTypesetterParamBlock &, CRLWPLineFragmentArray::const_line_iterator &, const CRLWPLineFragmentArray::const_line_iterator &, unichar &, BOOL &)"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v40, v41, 1856, 0, "Bad line end");

    v37 = *v16;
  }
  v42 = a3;
  if (!sub_10013E640(v37) && (a3[66] & 1) == 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A168);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFDAF0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A188);
    v43 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "line_fragment_ptr CRLWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSUInteger, const BOOL, CRLWPTypesetterParamBlock &, CRLWPLineFragmentArray::const_line_iterator &, const CRLWPLineFragmentArray::const_line_iterator &, unichar &, BOOL &)"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v44, v45, 1857, 0, "Bad glyphCount");

    v42 = a3;
  }
  v46 = *v16;
  if (!*v16)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A1A8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFDA70();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A1C8);
    v47 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v47, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "line_fragment_ptr CRLWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSUInteger, const BOOL, CRLWPTypesetterParamBlock &, CRLWPLineFragmentArray::const_line_iterator &, const CRLWPLineFragmentArray::const_line_iterator &, unichar &, BOOL &)"));
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v48, v49, 1859, 0, "failed to create a line fragment");

    v46 = *v16;
    v42 = a3;
  }
  if ((v42[40] & 4) != 0)
  {
    v50 = *(double *)(v46 + 240);
    if (*(double *)(a1 + 576) >= v50)
      v50 = *(double *)(a1 + 576);
    *(double *)(a1 + 576) = v50;
  }
  *a7 = 0;
  *v12 = 0;
  v30 = (*(_QWORD *)(v46 + 24) & 0x2004800) == 33570816;
  *(_BYTE *)(a1 + 336) = v30;
  if (!v30)
  {
    if (sub_10013194C(a1, v46, 0, *((unsigned __int16 *)v42 + 116), *((_QWORD *)v42 + 30)).super.isa)
      sub_100131B54(a1);
    v51 = *((unsigned __int16 *)v42 + 116);
    v52 = sub_1001AE2A0(*((unsigned __int16 *)v42 + 116)) ^ 1;
    if (v51 == 8232)
      LOBYTE(v52) = 0;
    if ((v52 & 1) == 0)
      *v12 = *((_WORD *)v42 + 116);
  }
}

void sub_1001315EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100038CC0(a14);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001316E4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_10013175C(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  sub_1001340A0(&v2, a2);
}

void sub_1001317CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001317FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10013182C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10013185C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10013188C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001318BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001318EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10013191C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CKRecordID sub_10013194C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v10;
  double v11;
  unsigned int v12;
  double v14;
  CKRecordID result;
  uint64_t v16;
  objc_class *isa;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CKRecordID v28;
  uint64_t v29;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion v38;

  if (a3)
    v10 = *(double *)(a3 + 160) == 0.0;
  else
    v10 = 0;
  v11 = *(double *)(a1 + 464);
  v12 = objc_msgSend(*(id *)(a1 + 8), "wpKind");
  if (*(_QWORD *)(a1 + 440) == 4 && v10)
  {
    v14 = 6.0;
    if (v12 == 5)
      v14 = 0.0;
    *(CGRect *)(a3 + 72) = CGRectInset(*(CGRect *)(a2 + 72), -fmax(v11 + v14 + *(double *)(a1 + 448), 0.0), 0.0);
  }
  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 184) + *(_QWORD *)(a1 + 176))
    goto LABEL_25;
  *(_QWORD *)(a1 + 632) = 0;
  result.super.isa = (Class)sub_1001AE2A0(a4);
  isa = result.super.isa;
  if (((uint64_t)result.super.isa & 1) != 0)
  {
    v19 = *(double *)(a1 + 408);
    if (v19 <= 0.0 || *(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 192) == a5)
    {
      result.super.isa = (Class)1;
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  result.super.isa = 0;
  if ((_DWORD)a4 == 8232 || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 64))
    goto LABEL_26;
  v19 = *(double *)(a1 + 408);
  if (v19 <= 0.0)
  {
LABEL_25:
    result.super.isa = 0;
    goto LABEL_26;
  }
LABEL_19:
  if (v10)
  {
    *(double *)(a3 + 160) = v19 + *(double *)(a3 + 160);
    v38 = SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(result, *(Swift::String *)&v16);
    *(_QWORD *)(a3 + 40) = v20;
    *(_QWORD *)(a3 + 48) = v21;
    *(_QWORD *)(a3 + 56) = v22;
    *(_QWORD *)(a3 + 64) = v23;
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v38.recordID, v38.recordType);
    *(_QWORD *)(a3 + 72) = v24;
    *(_QWORD *)(a3 + 80) = v25;
    *(_QWORD *)(a3 + 88) = v26;
    *(_QWORD *)(a3 + 96) = v27;
  }
  v31 = sub_100148A8C(a2, *(_QWORD *)(a1 + 352), *(double *)(a1 + 392));
  v32 = *(double *)(a2 + 160);
  v33 = *(double *)(a2 + 104)
      + *(double *)(a2 + 144)
      + *(double *)(a2 + 120)
      + *(double *)(a2 + 136)
      + *(double *)(a2 + 152)
      + v32
      - v31;
  if (v33 > 0.0)
  {
    *(double *)(a1 + 632) = -fmin(v33, v32);
    if (a3)
    {
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v28, *(Swift::String *)&v29);
      *(_QWORD *)(a3 + 40) = v34;
      *(_QWORD *)(a3 + 48) = v35;
      *(_QWORD *)(a3 + 56) = v36;
      *(_QWORD *)(a3 + 64) = v37;
    }
  }
  result.super.isa = isa;
LABEL_26:
  *(_BYTE *)(a1 + 536) = 0;
  return result;
}

BOOL sub_100131B54(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  id v4;

  v2 = a1 + 104;
  v3 = sub_100172154(a1 + 104);
  if (!v3)
  {
    sub_100172124(v2);
    v4 = sub_100172228(v2);
    sub_100127850((NSRange *)(a1 + 80), (NSUInteger)v4);
    *(_BYTE *)(a1 + 427) = *(_BYTE *)(a1 + 426);
    sub_10012A53C(a1, 0, 0x7FFFFFFFFFFFFFFFuLL);
  }
  return !v3;
}

void sub_100131BC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131BF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131C28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131C58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131C88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131CB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131CE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131D18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131D48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131D78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131DA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131DD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131E08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLWarningCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9080;
  off_1013D9080 = v2;

}

void sub_100131E38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131E68(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131E98(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131EC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131EF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100131F28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_100131F58(uint64_t a1, char a2)
{
  double v2;
  double v3;
  id v5;
  void *v6;
  float v7;
  float v8;
  id v9;
  void *v10;
  double v11;
  id v13[9];

  v2 = *(double *)(a1 + 400);
  v3 = 0.0;
  if (v2 != 0.0 && *(_BYTE *)(a1 + 536) && ((a2 & 1) != 0 || *(_BYTE *)(a1 + 673)))
  {
    if (sub_100172390(a1 + 104) && !*(_BYTE *)(a1 + 673))
    {
      return v2;
    }
    else
    {
      sub_100172168(a1 + 104, (uint64_t)v13);
      v5 = sub_1001721A4((uint64_t)v13, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      sub_100171FA4(v13);
      objc_msgSend(v6, "floatValueForProperty:", 48);
      v8 = v7;
      v9 = sub_10005DD18(a1 + 80);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = (float)((float)(v8 * (float)(unint64_t)objc_msgSend(v10, "scaleTextPercent")) / -100.0);

      if (v2 + v11 >= 0.0)
        v3 = v2 + v11;
      else
        v3 = 0.0;

    }
  }
  return v3;
}

void sub_100132048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100132080(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001320B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1001320E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 256);
  v3 = *(void **)(a1 + 816);
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "columns"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 256) - 1));

  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "previousTargetLastColumn"));
  }
  return v5;
}

void sub_100132140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100132150(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132180(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_1001321B0(double *a1, uint64_t a2)
{
  double v2;

  v2 = *a1;
  if (*(_QWORD *)(a2 + 272) == 2)
    return v2 + *(double *)(a2 + 312) * *(double *)(a2 + 280);
  else
    return v2 + a1[5] + fmax(a1[2], a1[1]);
}

void sub_1001321E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132218(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132248(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132278(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001322A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001322D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100132308(uint64_t result, _BYTE *a2, _BYTE *a3, uint64_t a4, char a5, char a6)
{
  uint64_t v11;
  int v12;
  BOOL v13;
  char v14;

  v11 = result;
  v12 = *(unsigned __int8 *)(result + 56);
  if (*(_BYTE *)(result + 56))
    v13 = v12 == 7;
  else
    v13 = 1;
  if (!v13)
  {
    if (v12 != 3)
      return result;
    result = sub_1001323F4(result);
    if ((result & 1) != 0)
      return result;
  }
  if (*(_QWORD *)(v11 + 80) != *(_QWORD *)(v11 + 176))
  {
    if ((_DWORD)a4 != 4)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (*(_BYTE *)(v11 + 472))
    v14 = a6;
  else
    v14 = 1;
  if ((_DWORD)a4 == 4 || (v14 & 1) == 0)
  {
LABEL_15:
    *a2 = 1;
    *a3 = 1;
  }
LABEL_16:
  if ((a5 & 1) != 0
    || a4 <= 0xF && ((1 << a4) & 0x9070) != 0
    || (*(_BYTE *)(v11 + 32) & 1) != 0 && (result = (uint64_t)sub_1001AE2A0(a4), (_DWORD)a4 != 11) && (_DWORD)result)
  {
    *a2 = 1;
  }
  return result;
}

BOOL sub_1001323F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  _BOOL8 v9;

  if (!objc_msgSend(*(id *)(a1 + 8), "wpKind")
    || objc_msgSend(*(id *)(a1 + 8), "wpKind") == 7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A748);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFDC70();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123A768);
    v2 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLayoutChore::pIsLastColumn() const"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 5662, 0, "pIsLastColumn doesn't work on the body or TOC");

  }
  if (!objc_msgSend(*(id *)(a1 + 816), "isLastTarget"))
    return 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 816), "columns"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));
  v7 = sub_10005DD18(a1 + 80);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = v6 == v8;

  return v9;
}

void sub_1001325E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10013261C(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  id v10;
  void *v11;
  float v12;
  float v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion v43;
  CGRect v44;
  CGRect v45;

  if (!*(_BYTE *)(a1 + 674))
  {
    v4 = sub_1000389BC(*a2);
    if (v4)
    {
      v5 = v4;
      v6 = *(double *)(v4 + 160);
      if (v6 != 0.0)
      {
        v7 = *(_QWORD *)(a1 + 176);
        v9 = *(_QWORD *)v4 >= v7;
        v8 = *(_QWORD *)v4 - v7;
        v9 = !v9 || v8 >= *(_QWORD *)(a1 + 184);
        if (v9)
        {
          v10 = sub_1001328C4(a1, *(_QWORD *)v4);
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          objc_msgSend(v11, "floatValueForProperty:", 48);
          v13 = v12;
          v14 = sub_10005DD18(a1 + 80);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          v16 = (float)((float)(v13 * (float)(unint64_t)objc_msgSend(v15, "scaleTextPercent")) / 100.0);

          v6 = *(double *)(v5 + 160);
        }
        else
        {
          v16 = *(double *)(a1 + 408);
        }
        v17 = v6 >= v16 ? v16 : v6;
        v18 = *(double *)(v5 + 32);
        v19 = sub_100038988(*a2);
        if (v19)
        {
          v20 = v6 - v17;
          v21 = v19 - 1;
          do
          {
            v22 = sub_100038998(*a2, v21);
            if (*(double *)(v22 + 32) != v18)
              break;
            v25 = v22;
            v43 = SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v22, *(Swift::String *)&v23);
            *(_QWORD *)(v25 + 40) = v26;
            *(_QWORD *)(v25 + 48) = v27;
            *(_QWORD *)(v25 + 56) = v28;
            *(_QWORD *)(v25 + 64) = v29;
            SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v43.recordID, v43.recordType);
            *(_QWORD *)(v25 + 72) = v30;
            *(_QWORD *)(v25 + 80) = v31;
            *(_QWORD *)(v25 + 88) = v32;
            *(_QWORD *)(v25 + 96) = v33;
            v34 = sub_10013E750(v25);
            v35 = (void *)objc_claimAutoreleasedReturnValue(v34);

            if (v35)
            {
              v36 = *(double *)(v25 + 72);
              v37 = *(double *)(v25 + 80);
              v38 = *(double *)(v25 + 88);
              v39 = *(double *)(v25 + 96);
              v45.origin.x = sub_10014409C(v25);
              v45.origin.y = v40;
              v45.size.width = v41;
              v45.size.height = v42;
              v44.origin.x = v36;
              v44.origin.y = v37;
              v44.size.width = v38;
              v44.size.height = v39;
              *(CGRect *)(v25 + 72) = CGRectUnion(v44, v45);
            }
            *(double *)(v25 + 160) = v20;
            --v21;
          }
          while (v21 != -1);
        }
      }
    }
  }
}

void sub_1001327E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100132804(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132834(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132864(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132894(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1001328C4(uint64_t a1, unint64_t a2)
{
  id v4;
  unint64_t v5;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13[9];

  v4 = sub_100172228(a1 + 104);
  if (a2 < (unint64_t)v4 || a2 - (unint64_t)v4 >= v5)
  {
    v8 = *(void **)(a1 + 8);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "styleProvider"));
    sub_1001720FC((uint64_t)v13, v8, v9, 0, (uint64_t)objc_msgSend(*(id *)(a1 + 8), "paragraphCount") - 1, 1);

    v10 = sub_1001721A4((uint64_t)v13, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    sub_100171FA4(v13);
    return v11;
  }
  else
  {
    v12 = sub_10005DD08(a1 + 80);
    return (id)objc_claimAutoreleasedReturnValue(v12);
  }
}

void sub_100132978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100171FA4((id *)va);
  _Unwind_Resume(a1);
}

id sub_100132998(uint64_t a1, void *a2)
{
  id v3;
  signed int v4;
  BOOL v5;
  id v6;

  v3 = a2;
  v4 = objc_msgSend(v3, "intValueForProperty:", 29);
  if (*(_QWORD *)(a1 + 816))
    v5 = v4 == 4;
  else
    v5 = 0;
  if (v5)
    v6 = objc_msgSend(*(id *)(a1 + 816), "naturalAlignment");
  else
    v6 = (id)v4;

  return v6;
}

void sub_1001329F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100132A00(uint64_t a1, unint64_t a2)
{
  id v4;
  unint64_t v5;
  void *v7;
  void *v8;
  id v9;
  id v11[9];

  v4 = sub_100172228(a1 + 104);
  if (a2 >= (unint64_t)v4 && a2 - (unint64_t)v4 < v5)
    return *(_BYTE *)(a1 + 429) != 0;
  v7 = *(void **)(a1 + 8);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "styleProvider"));
  sub_1001720FC((uint64_t)v11, v7, v8, 0, (uint64_t)objc_msgSend(*(id *)(a1 + 8), "paragraphCount") - 1, 1);

  v9 = sub_100172378((uint64_t)v11);
  sub_100171FA4(v11);
  return (BOOL)v9;
}

void sub_100132AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100171FA4((id *)va);
  _Unwind_Resume(a1);
}

void sub_100132AC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132AF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132B28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132B58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_100132B88(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v20;
  __int128 v21[5];
  uint64_t v22;

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "columns"));
  v7 = objc_msgSend(v20, "count");
  if (*(_QWORD *)(a1 + 248))
  {
    v8 = (unint64_t)v7;
    v9 = 0;
    v10 = 0;
    v11 = 0.0;
    do
    {
      if (v8 > v10 + a3)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectAtIndexedSubscript:"));
        sub_100133484(v21, v12);
        v13 = a4 + 88 * v9;
        sub_1001339E8(v13, v21);
        v14 = v21[4];
        *(_OWORD *)(v13 + 48) = v21[3];
        *(_OWORD *)(v13 + 64) = v14;
        *(_QWORD *)(v13 + 80) = v22;
        v15 = v21[2];
        *(_OWORD *)(v13 + 16) = v21[1];
        *(_OWORD *)(v13 + 32) = v15;
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
        if (*((_QWORD *)&v21[0] + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }

      }
      if (v11 == 0.0)
      {
        v11 = *(double *)(a4 + 88 * v9 + 40);
      }
      else if (v11 != *(double *)(a4 + 88 * v9 + 40))
      {
        v11 = 0.0;
      }
      v9 = ++v10;
    }
    while (*(_QWORD *)(a1 + 248) > (unint64_t)v10);
  }
  else
  {
    v11 = 0.0;
  }

  return v11;
}

void sub_100132CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_100132D10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100132D40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100132D70(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, double a6, uint64_t a7, unint64_t a8, __int16 a9, double *a10, double *a11, double *a12, double *a13, _BYTE *a14, _DWORD *a15)
{
  void *v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  void *v27;
  double MaxY;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  double v38;
  double v39;
  void *v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  double v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  double v52;
  double v53;
  void *v54;
  void *v55;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v63;
  CGRect v64;

  if (a2)
  {
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 816), "columnMetricsForCharIndex:outRange:", *(_QWORD *)(a1 + 80), 0));
    if ((objc_msgSend(v63, "alwaysStartsNewTarget") & 1) != 0)
    {
      v21 = v63;
      goto LABEL_5;
    }
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 816), "columns"));
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectAtIndexedSubscript:", a3));
    if (*(_QWORD *)(a1 + 248) == 1)
    {
      objc_msgSend(v61, "contentBlockBottom");
      v25 = v24;
      v26 = sub_1000389BC(*(_QWORD **)objc_msgSend(v61, "lineFragmentArray"));
      if (v26)
      {
        v27 = v61;
        MaxY = CGRectGetMaxY(*(CGRect *)(v26 + 40));
        if (v25 < MaxY)
          v25 = MaxY;
      }
      else
      {
        v27 = v61;
      }
      objc_msgSend(v27, "frameBounds");
      *a12 = fmin(ceil(v25 - v48), a6);
      v49 = *(_QWORD *)(a1 + 816);
      v50 = *(_QWORD *)(a1 + 8);
      v51 = objc_msgSend(v27, "startCharIndex");
      v52 = *a13;
      v53 = *a12;
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "styleProvider"));
      +[CRLWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:](CRLWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:", v49, v50, v51, a3, 0, v40, v52, v53);
      goto LABEL_35;
    }
    if (a3 <= a8)
      v31 = a8;
    else
      v31 = a3;
    if (a3 >= a8)
      v32 = a8;
    else
      v32 = a3;
    v33 = ceil(fmax(*a10, fmin(sub_100133538(a1, v32, v31 - v32, 0), *a11)));
    *a10 = v33;
    v34 = *a12;
    if (*a12 < v33)
    {
      *a12 = v33;
      v35 = *(_QWORD *)(a1 + 816);
      v36 = *(_QWORD *)(a1 + 8);
      v37 = objc_msgSend(v61, "startCharIndex", v34);
      v38 = *a13;
      v39 = *a12;
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "styleProvider"));
      +[CRLWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:](CRLWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:", v35, v36, v37, a3, 0, v40, v38, v39);
LABEL_35:

      goto LABEL_36;
    }
    if (*a12 > v33)
    {
      if ((a9 & 0x200) == 0 || *a15 != 1)
      {
LABEL_40:
        v23 = 1;
        *a14 = 1;
        *a11 = v34;
        *a12 = floor((v34 + *a10) * 0.5);
        v55 = v60;
        v54 = v61;
        if (*a10 >= *a11)
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount", *a10);
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_10123A708);
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            sub_100DFDCF0();
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_10123A728);
          v57 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)v57, OS_LOG_TYPE_ERROR))
          {
            objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
            sub_100DE7E60();
          }

          v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLayoutChore::pHandleLayoutBreaksAndColumnBalancing(const BOOL, const NSUInteger, const CRLWPLayoutState &, const tswpColumnErasableInfo *, uint, const NSUInteger, const CRLWPLayoutResultFlags, const CGFloat, CGFloat &, CGFloat &, CGFloat &, CGFloat &, BOOL &, uint &)"));
          v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutChore.mm"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v58, v59, 3819, 0, "Bad minHeight/maxHeight");

          v23 = 1;
        }
        goto LABEL_37;
      }
      if (*(_QWORD *)(a1 + 248))
      {
        v41 = 0;
        v42 = 1;
        while (1)
        {
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectAtIndexedSubscript:", *(_QWORD *)(a4 + 176) + v41, v34));
          objc_msgSend(v43, "contentBlockBottom");
          v45 = v44;
          v46 = *(double *)(a5 + 88 * v41 + 80);

          if (v45 != v46)
            break;
          v41 = v42;
          if (*(_QWORD *)(a1 + 248) <= (unint64_t)v42++)
            goto LABEL_36;
        }
        v34 = *a12;
        goto LABEL_40;
      }
    }
LABEL_36:
    v54 = v61;
    objc_msgSend(v61, "frameBounds", v34);
    v23 = 0;
    v55 = v60;
    *a13 = CGRectGetMaxY(v64) + *(double *)(a1 + 208);
LABEL_37:

    v21 = v63;
    goto LABEL_38;
  }
  v21 = 0;
LABEL_5:
  if (*a14)
  {
    if ((a9 & 0x200) != 0 && *a15 == 1)
    {
      *a14 = 0;
      *a15 = 0;
      *a10 = *a12;
      v22 = *a11;
    }
    else
    {
      v29 = *a12 + 1.0;
      *a10 = v29;
      v30 = fmax(*a11, v29);
      *a11 = v30;
      v22 = rint((v30 + *a10) * 0.5);
    }
    *a12 = v22;
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
LABEL_38:

  return v23;
}

void sub_100133268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

double sub_100133308(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat x, CGFloat y, CGFloat width, CGFloat height, uint64_t a9, void *a10, int a11, int a12)
{
  id v22;
  void *v23;
  double v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  v22 = a10;
  v23 = v22;
  if (a11)
  {
    objc_msgSend(v22, "frameBounds");
    v30.origin.y = y;
    v30.size.height = height;
    v33.origin.x = x;
    v33.origin.y = y;
    v33.size.width = width;
    v33.size.height = height;
    v31 = CGRectUnion(v30, v33);
    x = v31.origin.x;
    y = v31.origin.y;
    width = v31.size.width;
    height = v31.size.height;
  }
  if (a12)
    v24 = y + -6.0;
  else
    v24 = y;
  if (a12)
    v25 = height + 12.0;
  else
    v25 = height;
  v32.origin.x = a1;
  v32.origin.y = a2;
  v32.size.width = a3;
  v32.size.height = a4;
  v26 = x;
  v27 = width;
  *(_QWORD *)&v28 = (unint64_t)CGRectUnion(v32, *(CGRect *)(&v24 - 1));

  return v28;
}

void sub_10013340C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100133424(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133454(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

_QWORD *sub_100133484(_QWORD *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a2;
  v4 = objc_msgSend(v3, "lineFragmentArray");
  v5 = v4[1];
  *a1 = *v4;
  a1[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  objc_msgSend(v3, "frameBounds");
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  objc_msgSend(v3, "erasableBounds:", 0);
  a1[6] = v12;
  a1[7] = v13;
  a1[8] = v14;
  a1[9] = v15;
  objc_msgSend(v3, "contentBlockBottom");
  a1[10] = v16;

  return a1;
}

void sub_100133514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_100133538(uint64_t a1, unint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  double v9;
  void *v10;
  void *v11;
  double v12;

  if (a2 >= a2 + a3)
  {
    v8 = 0;
    v9 = 0.0;
    if (!a4)
      return v9;
    goto LABEL_5;
  }
  v5 = a3;
  v6 = a2;
  v8 = 0;
  v9 = 0.0;
  do
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 816), "columns"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v6));

    objc_msgSend(v11, "minimumHeightForLayoutOnPage");
    v9 = fmax(v9, v12);
    v8 |= objc_msgSend(v11, "lineCount") != 0;

    ++v6;
    --v5;
  }
  while (v5);
  if (a4)
LABEL_5:
    *a4 = v8 & 1;
  return v9;
}

void sub_10013360C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100133628(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133658(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133688(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001336B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001336E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133718(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133748(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133778(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001337A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001337D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133808(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133838(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133868(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133898(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001338C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001338F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133928(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133958(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100133988(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001339B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1001339E8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_100133A4C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_10005DCE0(v4 - 712);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100133ABC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF47E8FD1FA3F47E9 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x5C0B81702E05C0)
    sub_100007810();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF47E8FD1FA3F47E9 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2E05C0B81702E0)
    v9 = 0x5C0B81702E05C0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100133C4C(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[712 * v4];
  v16 = &v10[712 * v9];
  sub_10005DC7C(v14, a2);
  v15 = v14 + 712;
  sub_100133BD8(a1, &v13);
  v11 = a1[1];
  sub_100133D24((uint64_t)&v13);
  return v11;
}

void sub_100133BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100133D24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100133BD8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100133C94((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100133C4C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5C0B81702E05C1)
    sub_1000078E0();
  return operator new(712 * a2);
}

uint64_t sub_100133C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 712;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 712;
    sub_10005DC7C(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_100133D24(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 712;
    sub_10005DCE0(i - 712);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100133D70(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  *a1 = a2;
  v2 = a2;
  operator new();
}

void sub_100133DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100133F70((void ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_100133DFC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100133E20(uint64_t a1)
{
  sub_100133E68(a1 + 24, *(void ***)(a1 + 24));
}

uint64_t sub_100133E28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100133E68(uint64_t a1, void **a2)
{
  void **v2;

  if (a2)
  {
    v2 = a2;
    sub_100133EB4(&v2);
    operator delete();
  }
}

void sub_100133EB4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_100038CC0(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_100133F24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void ***sub_100133F70(void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    sub_100133EB4(&v3);
    operator delete();
  }
  return result;
}

_QWORD *sub_100133FC0(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100134034(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_100134018(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100134034(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    sub_100007810();
  result = (char *)sub_100134070((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *sub_100134070(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_1000078E0();
  return operator new(2 * a2);
}

void sub_1001340A0(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100134100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001341B4((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_10013411C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100134140(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_10013DFB4();
    operator delete();
  }
  return result;
}

uint64_t sub_100134174(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001341B4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10013DFB4();
    operator delete();
  }
  return result;
}

void sub_100134264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100134274(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    sub_100134BD4((void **)a1, a2 - v2);
  }
}

void sub_100134354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100134450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100134530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001346D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_100134894(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  void *__p;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v14 = *(char **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 5) + 1;
    if (v15 >> 59)
      sub_100007810();
    v16 = __src - v14;
    v17 = (__src - v14) >> 5;
    v18 = v7 - (_QWORD)v14;
    if (v18 >> 4 > v15)
      v15 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v15;
    v34 = a1 + 16;
    if (v19)
      v20 = (char *)sub_100134CDC(a1 + 16, v19);
    else
      v20 = 0;
    v23 = &v20[32 * v17];
    __p = v20;
    v31 = v23;
    v32 = v23;
    v33 = &v20[32 * v19];
    if (v17 == v19)
    {
      if (v16 < 1)
      {
        if (v14 == v4)
          v25 = 1;
        else
          v25 = v16 >> 4;
        v26 = (char *)sub_100134CDC(v8, v25);
        v23 = &v26[32 * (v25 >> 2)];
        __p = v26;
        v31 = v23;
        v33 = &v26[32 * v27];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v24 = v17 + 2;
        if (v17 >= -1)
          v24 = v17 + 1;
        v23 -= 32 * (v24 >> 1);
        v31 = v23;
      }
    }
    v28 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v3;
    *((_OWORD *)v23 + 1) = v28;
    v32 = v23 + 32;
    v4 = (char *)sub_100134F1C((void **)a1, (uint64_t)&__p, v4);
    if (v32 != v31)
      v32 += (v31 - v32 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v22 = *((_OWORD *)a3 + 1);
    *(_OWORD *)__src = *(_OWORD *)a3;
    *((_OWORD *)__src + 1) = v22;
    *(_QWORD *)(a1 + 8) = __src + 32;
  }
  else
  {
    v9 = __src + 32;
    v10 = v6 - 32;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v13 = *((_OWORD *)v10 + 1);
      v10 += 32;
      *v11 = v12;
      v11[1] = v13;
      v11 += 2;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-32 * ((v6 - v9) >> 5)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 32 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    v21 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v21;
  }
  return v4;
}

void sub_100134AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100134B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100134BD4(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      sub_100007810();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_100134CDC(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *sub_100134CDC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_1000078E0();
  return operator new(32 * a2);
}

char *sub_100134D10(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  void *__p;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 5)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 5);
    if (v14 >> 59)
      sub_100007810();
    v15 = (__dst - (uint64_t)v13) >> 5;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 4 > v14)
      v14 = v16 >> 4;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v39 = v9;
    if (v17)
      v18 = (char *)sub_100134CDC(v9, v17);
    else
      v18 = 0;
    v29 = &v18[32 * v15];
    __p = v18;
    v36 = v29;
    v38 = &v18[32 * v17];
    v30 = 32 * a5;
    v31 = &v29[32 * a5];
    do
    {
      v32 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 1);
      v7 += 32;
      *(_OWORD *)v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 32;
      v30 -= 32;
    }
    while (v30);
    v37 = v31;
    v5 = (char *)sub_100134F1C((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36)
      v37 += (v36 - v37 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 5;
  if (v20 >= a5)
  {
    v21 = &__src[32 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[32 * a5];
    v25 = &v23[-32 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 1);
        v25 += 32;
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 32;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-32 * ((v23 - v24) >> 5)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[32 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[32 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_100134EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_100134F1C(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 32);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v10;
      v8 -= 32;
      v9 -= 32;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *sub_100134FF0(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      sub_100007810();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1001350F8(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_1001350F8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_100007810();
  result = (char *)sub_100134CDC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_1001356F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100135720(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001364F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100136524(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100136840(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100136870(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100136AA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100136AD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001371C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001371F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001378D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  void *v6;
  _TtC8Freeform21CRLiOSPageTitleButton *v7;

  v3 = a2;
  v7 = -[CRLiOSPageTitleButton initWithTitle:insets:]([_TtC8Freeform21CRLiOSPageTitleButton alloc], "initWithTitle:insets:", v3, 0.0, 14.0, 0.0, 14.0);

  -[CRLiOSPageTitleButton sizeToFit](v7, "sizeToFit");
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[CRLiOSPageTitleButton widthAnchor](v7, "widthAnchor"));
  -[CRLiOSPageTitleButton frame](v7, "frame");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "constraintEqualToConstant:", v5));
  objc_msgSend(v6, "setActive:", 1);

  -[CRLiOSPageTitleButton addTarget:action:forControlEvents:](v7, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 32), "p_didTapButton:", 64);
  objc_msgSend(*(id *)(a1 + 40), "addArrangedSubview:", v7);

}

void sub_100137C20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100137C50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100138530(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100138560(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001386E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100138718(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100138D48(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "p_isShowingSearchBar") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "p_updateUIForChangeToPageNumber:animated:completion:", objc_msgSend(*(id *)(a1 + 32), "p_currentPageNumber"), 1, 0);
  objc_msgSend(*(id *)(a1 + 32), "p_updateBottomConstraintsIfNeeded");
  return objc_msgSend(*(id *)(a1 + 32), "p_updateTitlesPageControlAndBottomViewColorsInDarkUI:", objc_msgSend(*(id *)(a1 + 32), "crl_isInDarkMode"));
}

id sub_1001393E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setViewControllers:direction:animated:completion:", *(_QWORD *)(a1 + 40), 0, 0, 0);
}

void sub_10013963C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "p_updateBottomConstraintsIfNeeded");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

}

void sub_100139970(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001399A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100139BE0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  UIAccessibilityNotifications v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewControllers"));
  objc_msgSend(v2, "p_setViewControllers:shouldUpdatePageViewController:animated:", v3, 0, 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "insertPageViewControllerDelegate"));
  objc_msgSend(v4, "insertPageViewController:didSelectPageNumber:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

  if (*(_BYTE *)(a1 + 56))
  {
    v5 = UIAccessibilityPageScrolledNotification;
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_titlesPageControl"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "selectedButton"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "titleLabel"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "text"));
    UIAccessibilityPostNotification(v5, v8);

  }
}

id sub_100139E84(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "text"));
  v3 = objc_msgSend(v2, "length");

  if (v3)
    return _objc_msgSend(*(id *)(a1 + 32), "enableCancelButton");
  else
    return objc_msgSend(*(id *)(a1 + 40), "p_endSearching");
}

id sub_10013A220(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_10013A22C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.15);
}

void sub_10013A398(uint64_t a1)
{
  double v2;
  void *v3;
  double v4;
  void *v5;
  double v6;
  id v7;

  if (*(_BYTE *)(a1 + 40))
    v2 = 0.0;
  else
    v2 = 1.0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_searchBar"));
  objc_msgSend(v3, "setAlpha:", v2);

  if (*(_BYTE *)(a1 + 40))
    v4 = 1.0;
  else
    v4 = 0.0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_titlesPageControl"));
  objc_msgSend(v5, "setAlpha:", v4);

  if (*(_BYTE *)(a1 + 40))
    v6 = 1.0;
  else
    v6 = 0.0;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "p_searchButton"));
  objc_msgSend(v7, "setAlpha:", v6);

}

uint64_t sub_10013A44C(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  _BOOL8 v10;
  void *v11;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 56);
  v5 = *(void **)(a1 + 32);
  if (v4)
  {
    objc_msgSend(v5, "resignFirstResponder");
    if (!(_DWORD)a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  objc_msgSend(v5, "becomeFirstResponder");
  if ((_DWORD)a2)
  {
LABEL_3:
    v6 = *(unsigned __int8 *)(a1 + 56);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "p_searchBar"));
    objc_msgSend(v7, "setAccessibilityElementsHidden:", v6);

    v8 = *(_BYTE *)(a1 + 56) == 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "p_searchButton"));
    objc_msgSend(v9, "setAccessibilityElementsHidden:", v8);

    v10 = *(_BYTE *)(a1 + 56) == 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "p_titlesPageControlScrollView"));
    objc_msgSend(v11, "setAccessibilityElementsHidden:", v10);

    UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, 0);
  }
LABEL_4:
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_10013A6D4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "insertPageViewControllerDelegate"));
  objc_msgSend(v2, "insertPageViewControllerDidEndSearch:cancelledExplicitly:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));

}

void sub_10013A8CC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "p_updateBottomConstraintsIfNeeded");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

}

void sub_10013A9A4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "p_updateBottomConstraintsIfNeeded");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "layoutIfNeeded");

}

id sub_10013C2F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setP_currentPageNumber:", *(_QWORD *)(a1 + 40));
}

void sub_10013CB58(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v2 = *(unsigned __int8 *)(a1 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10013CBE8;
  v7[3] = &unk_10123ADE0;
  v3 = *(void **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 32);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  objc_msgSend(v8, "p_updateUIForChangeToPageNumber:animated:completion:", v4, v2, v7);

}

void sub_10013CBE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  if (objc_msgSend(*(id *)(a1 + 32), "p_shouldScrollToBottomOfPage"))
  {
    v3 = objc_opt_class(CRLiOSPresetCollectionViewController, v2);
    v4 = sub_100221D0C(v3, *(void **)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    objc_msgSend(v5, "scrollToBottom");
    objc_msgSend(*(id *)(a1 + 32), "setP_shouldScrollToBottomOfPage:", 0);

  }
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "insertPageViewControllerDelegate"));
  objc_msgSend(v6, "insertPageViewController:didSelectPageNumber:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));

}

uint64_t sub_10013CC68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10013DC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  CGPoint origin;
  CGSize size;
  void *v10;
  NSMutableArray *v11;
  void *v12;
  NSMutableArray *v13;
  void *v14;
  NSMutableArray *v15;
  void *v16;
  NSMutableArray *v17;
  void *v18;
  NSMutableArray *v19;
  void *v20;
  CRLWPTypesettingState *v21;
  void *v22;
  dispatch_semaphore_t v23;
  void *v24;
  dispatch_semaphore_t v25;
  void *v26;

  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(void **)(a1 + 208);
  *(_OWORD *)(a1 + 200) = 0u;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_100EED860;
  *(_OWORD *)(a1 + 136) = xmmword_100EED880;
  *(_OWORD *)(a1 + 152) = unk_100EED890;
  *(_OWORD *)(a1 + 168) = xmmword_100EED8A0;
  *(_OWORD *)(a1 + 184) = unk_100EED8B0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)algn_100EED870;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 32) = 0x7FF0000000000000;
  v5 = *(void **)(a1 + 392);
  *(_OWORD *)(a1 + 384) = 0u;

  v6 = *(void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;

  v7 = *(void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;

  *(_DWORD *)(a1 + 376) = 0;
  origin = CGRectNull.origin;
  size = CGRectNull.size;
  *(CGPoint *)(a1 + 40) = CGRectNull.origin;
  *(CGSize *)(a1 + 56) = size;
  *(CGPoint *)(a1 + 72) = origin;
  *(CGSize *)(a1 + 88) = size;
  v10 = *(void **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;

  v11 = objc_opt_new(NSMutableArray);
  v12 = *(void **)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v11;

  v13 = objc_opt_new(NSMutableArray);
  v14 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v13;

  v15 = objc_opt_new(NSMutableArray);
  v16 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v15;

  v17 = objc_opt_new(NSMutableArray);
  v18 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v17;

  v19 = objc_opt_new(NSMutableArray);
  v20 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v19;

  v21 = objc_opt_new(CRLWPTypesettingState);
  v22 = *(void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v21;

  v23 = dispatch_semaphore_create(1);
  v24 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v23;

  v25 = dispatch_semaphore_create(1);
  v26 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v25;

  return a1;
}

void sub_10013DDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v10 + 464);
  if (v13)
  {
    *(_QWORD *)(v10 + 472) = v13;
    operator delete(v13);
  }

  v14 = *(void **)(v10 + 432);
  if (v14)
  {
    *(_QWORD *)(v10 + 440) = v14;
    operator delete(v14);
  }

  sub_10001CE40(v11, *(_QWORD **)(v10 + 304));
  a10 = (void **)(v10 + 272);
  sub_10014A310(&a10);
  sub_10014A310(&a10);
  a10 = (void **)(v10 + 216);
  sub_10014A310(&a10);

  _Unwind_Resume(a1);
}

uint64_t sub_10013DEA8(uint64_t a1)
{
  return sub_10013DC10(a1, 0x7FFFFFFFFFFFFFFFLL, 0);
}

uint64_t sub_10013DEB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(_QWORD *)(a1 + 472) = v2;
    operator delete(v2);
  }

  v3 = *(void **)(a1 + 432);
  if (v3)
  {
    *(_QWORD *)(a1 + 440) = v3;
    operator delete(v3);
  }

  sub_10001CE40(a1 + 296, *(_QWORD **)(a1 + 304));
  v5 = (void **)(a1 + 272);
  sub_10014A310(&v5);
  v5 = (void **)(a1 + 248);
  sub_10014A310(&v5);
  v5 = (void **)(a1 + 216);
  sub_10014A310(&v5);

  return a1;
}

id sub_10013DFB8(uint64_t a1)
{
  return *(id *)(a1 + 208);
}

void sub_10013DFC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 208))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123AE28);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE0EC();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123AE48);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::setTextSource(__strong id<CRLWPTextSource>)"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 171, 0, "expected nil value for '%{public}s'", "_textSource");

  }
  v7 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v3;

}

void sub_10013E170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10013E1B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10013E1E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10013E210(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void **)(a1 + 216);
  if (*(_QWORD *)(a1 + 224) != *(_QWORD *)(a1 + 216))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123AE68);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE178();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123AE88);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::setLineRef(const CRLWPLineRef &)"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 176, 0, "Line ref is already set");

  }
  return sub_10013E440(v3, 1uLL, a2);
}

void sub_10013E3B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10013E3E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10013E410(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10013E440(void **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = (char *)*a1;
  if (0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= a2)
  {
    v13 = ((_BYTE *)a1[1] - v6) / 104;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = ((_BYTE *)a1[1] - v6) / 104;
    for (; v14; --v14)
    {
      sub_10019FA04((uint64_t)v6, a3);
      v6 += 104;
    }
    if (a2 <= v13)
    {
      result = (uint64_t)a1[1];
      v18 = (uint64_t)*a1 + 104 * a2;
      while (result != v18)
        result = sub_10019FA00(result - 104);
      a1[1] = (void *)v18;
    }
    else
    {
      v15 = (char *)a1[1];
      v16 = &v15[104 * (a2 - v13)];
      v17 = -104 * v13 + 104 * a2;
      do
      {
        result = sub_10019F9CC(v15, a3);
        v15 += 104;
        v17 -= 104;
      }
      while (v17);
      a1[1] = v16;
    }
  }
  else
  {
    sub_10014A380(a1);
    if (a2 > 0x276276276276276)
      sub_100007810();
    v7 = 0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x13B13B13B13B13BLL)
      v8 = 0x276276276276276;
    else
      v8 = v7;
    sub_10014A3DC(a1, v8);
    v9 = (char *)a1[1];
    v10 = 104 * a2;
    v11 = &v9[104 * a2];
    do
    {
      result = sub_10019F9CC(v9, a3);
      v9 += 104;
      v10 -= 104;
    }
    while (v10);
    a1[1] = v11;
  }
  return result;
}

void sub_10013E5E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10013E5F0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[28];
  if (v3 >= a1[29])
  {
    result = sub_10014A478(a1 + 27, a2);
  }
  else
  {
    sub_10019F9CC(a1[28], a2);
    result = v3 + 104;
    a1[28] = v3 + 104;
  }
  a1[28] = result;
  return result;
}

void sub_10013E638(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 224) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10013E640(uint64_t a1)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3);
}

uint64_t sub_10013E664(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 216) + 104 * a2;
}

uint64_t sub_10013E674(uint64_t a1)
{
  return a1 + 216;
}

uint64_t sub_10013E67C(uint64_t a1)
{
  return a1 + 248;
}

uint64_t sub_10013E684(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[32];
  if (v3 >= a1[33])
  {
    result = sub_10014A478(a1 + 31, a2);
  }
  else
  {
    sub_10019F9CC(a1[32], a2);
    result = v3 + 104;
    a1[32] = v3 + 104;
  }
  a1[32] = result;
  return result;
}

void sub_10013E6CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 256) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10013E6D4(uint64_t a1)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 3);
}

uint64_t sub_10013E6F8(uint64_t a1)
{
  return a1 + 272;
}

uint64_t sub_10013E700(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[35];
  if (v3 >= a1[36])
  {
    result = sub_10014A478(a1 + 34, a2);
  }
  else
  {
    sub_10019F9CC(a1[35], a2);
    result = v3 + 104;
    a1[35] = v3 + 104;
  }
  a1[35] = result;
  return result;
}

void sub_10013E748(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 280) = v2;
  _Unwind_Resume(a1);
}

id sub_10013E750(uint64_t a1)
{
  return *(id *)(a1 + 200);
}

id sub_10013E758(uint64_t a1)
{
  return *(id *)(a1 + 400);
}

void sub_10013E760(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 400), a2);
}

uint64_t sub_10013E768(uint64_t result, double a2)
{
  *(double *)(result + 384) = a2;
  return result;
}

id sub_10013E770(uint64_t a1)
{
  return *(id *)(a1 + 336);
}

id sub_10013E778(uint64_t a1)
{
  return *(id *)(a1 + 344);
}

id sub_10013E780(uint64_t a1)
{
  return *(id *)(a1 + 352);
}

id sub_10013E788(uint64_t a1)
{
  return *(id *)(a1 + 360);
}

id sub_10013E790(uint64_t a1)
{
  return *(id *)(a1 + 408);
}

id sub_10013E798(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 408), "addObject:", a2);
}

id sub_10013E7A4(uint64_t a1)
{
  return *(id *)(a1 + 416);
}

void sub_10013E7AC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 416), a2);
}

double CRLWPShapeLayout.gap(forColumnIndex:bodyWidth:)()
{
  return 0.0;
}

double sub_10013E7BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  double v5;
  void *v6;

  v4 = a3;
  v5 = *(double *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "storage"));
  objc_msgSend(v4, "scaleTextPercent");

  return v5 + 0.0;
}

void sub_10013E81C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_10013E838(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double sub_10013E840(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  unsigned int v7;
  void *v8;
  CGFloat Size;
  const __CTFont *CopyWithAttributes;
  const __CTFont *v11;
  double Descent;
  double CapHeight;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("CRLWPBaselineShift")));
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "doubleValue");
    v5 = v4;
  }
  else
  {
    v5 = 0.0;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("CRLWPSuperscript")));

  if (v6)
  {
    v7 = objc_msgSend(v6, "unsignedIntValue");
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", kCTFontAttributeName));

      Size = CTFontGetSize((CTFontRef)v8);
      CopyWithAttributes = CTFontCreateCopyWithAttributes((CTFontRef)v8, Size * 1.5, 0, 0);
      v11 = CopyWithAttributes;
      if (v7 == 2)
      {
        Descent = CTFontGetDescent((CTFontRef)v8);
        CapHeight = CTFontGetDescent(v11);
      }
      else
      {
        if (v7 != 1)
        {
LABEL_12:
          CFRelease(v11);
          goto LABEL_13;
        }
        Descent = CTFontGetCapHeight(CopyWithAttributes);
        CapHeight = CTFontGetCapHeight((CTFontRef)v8);
        if (Descent <= 0.0)
        {
          Descent = CTFontGetAscent(v11);
          CapHeight = CTFontGetAscent((CTFontRef)v8);
        }
      }
      v5 = v5 + Descent - CapHeight;
      goto LABEL_12;
    }
  }
LABEL_13:

  return v5;
}

void sub_10013E998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10013E9D0(unint64_t *a1@<X0>, unint64_t a2@<X1>, NSUInteger a3@<X2>, char a4@<W3>, char a5@<W4>, int a6@<W5>, void *a7@<X6>, char **a8@<X8>)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  const __CTLine *v25;
  double v26;
  double y;
  uint64_t v28;
  uint64_t v29;
  CGFloat height;
  CGFloat width;
  CGFloat x;
  const __CTLine *v33;
  double v34;
  uint64_t v35;
  NSUInteger v36;
  NSUInteger v37;
  NSUInteger v38;
  NSUInteger v39;
  char *v40;
  NSUInteger v41;
  NSRange v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const __CTLine *v47;
  CFIndex v48;
  double OffsetForStringIndex;
  const __CTLine *v50;
  double v51;
  const __CTLine *v52;
  double TypographicBounds;
  double v54;
  char *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unint64_t v60;
  double *v61;
  double *v62;
  double *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  double *v69;
  char *v70;
  __int128 v71;
  char *v72;
  void *v73;
  NSUInteger v74;
  double **v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  NSRange v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  double v85;
  double v86;
  __int128 *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t i;
  const __CTLine *v92;
  double v93;
  double v94;
  double v95;
  char *v96;
  double *v97;
  double MaxX;
  double MinX;
  double *v100;
  double *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  void *v107;
  id v108;
  NSUInteger v109;
  NSUInteger v110;
  NSRange v111;
  void *v112;
  double *v113;
  char *v114;
  __int128 v115;
  char *v116;
  NSRange *v117;
  NSRange v118;
  __int128 *v119;
  uint64_t v120;
  double v121;
  unint64_t v122;
  double v123;
  double *v124;
  unint64_t v125;
  double *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  double *v130;
  double *v131;
  double *v132;
  uint64_t v133;
  double *v134;
  double *v135;
  __int128 v136;
  void *v137;
  id v138;
  void *v139;
  id v141;
  uint64_t v142;
  double v143;
  uint64_t v144;
  _QWORD *v145;
  id v146;
  double rect;
  uint64_t v149;
  _BYTE v150[24];
  NSUInteger v151;
  NSUInteger v152;
  uint64_t v153;
  CGFloat descent;
  CGFloat ascent;
  NSRange v156;
  NSRange v157;
  NSRange v158;
  NSRange v159;
  NSRange v160;
  NSRange v161;
  NSRange v162;
  NSRange v163;
  NSRange v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;

  v146 = a7;
  v149 = (uint64_t)a1;
  if (a2 < *a1 || a2 + a3 > a1[1] + *a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123AEA8);
    v13 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
      sub_100DFE24C();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123AEC8);
    v14 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v15);
    }

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRectVector CRLWPLineFragment::rectsForLineRange(const NSRange, BOOL, BOOL, BOOL, NSMutableArray<NSValue *> *__strong) const"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 531, 0, "Bad range");

  }
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  if ((a4 & 1) != 0)
  {
    v18 = v149;
    v19 = *(double *)(v149 + 64);
  }
  else
  {
    v18 = v149;
    v20 = *(double *)(v149 + 144) + *(double *)(v149 + 120);
    if (v20 < *(double *)(v149 + 112))
      v20 = *(double *)(v149 + 112);
    v19 = *(double *)(v149 + 136) + *(double *)(v149 + 104) + v20;
  }
  rect = v19;
  v21 = *(double *)(v18 + 48);
  if ((a5 & 1) == 0)
  {
    v22 = *(double *)(v18 + 104);
    v21 = v21 + v22;
    rect = rect - v22;
  }
  if (!a3)
  {
    v75 = (double **)a8;
    v23 = sub_10013F8F8(v149, a2, 0, 1, 0);
    v74 = 0;
    v24 = 0.0;
    goto LABEL_142;
  }
  v23 = *(double *)(v149 + 40);
  v24 = *(double *)(v149 + 56);
  v142 = *(_QWORD *)(v149 + 216);
  if (*(_QWORD *)(v149 + 224) != v142)
  {
    descent = 0.0;
    ascent = 0.0;
    if (a6 && *(_QWORD *)(v149 + 256) != *(_QWORD *)(v149 + 248))
    {
      v25 = (const __CTLine *)sub_10019FA78(v142);
      CTLineGetTypographicBounds(v25, &ascent, &descent, 0);
      v26 = *(double *)(v142 + 16);
      v143 = ascent;
      y = CGRectNull.origin.y;
      v28 = *(_QWORD *)(v149 + 248);
      v29 = *(_QWORD *)(v149 + 256);
      if (v28 != v29)
      {
        width = CGRectNull.size.width;
        height = CGRectNull.size.height;
        x = CGRectNull.origin.x;
        do
        {
          v33 = (const __CTLine *)sub_10019FA78(v28);
          v172.size.width = CTLineGetTypographicBounds(v33, &ascent, &descent, 0);
          v172.origin.x = *(CGFloat *)(v28 + 8);
          v172.origin.y = *(double *)(v28 + 16) - ascent;
          v172.size.height = ascent + descent;
          v165.origin.x = x;
          v165.origin.y = y;
          v165.size.width = width;
          v165.size.height = height;
          v166 = CGRectUnion(v165, v172);
          x = v166.origin.x;
          y = v166.origin.y;
          width = v166.size.width;
          height = v166.size.height;
          v28 += 104;
        }
        while (v28 != v29);
      }
      if (y < v26 - v143)
      {
        v34 = v26 - v143 - y - *(double *)(v149 + 144);
        v21 = v21 - v34;
        rect = rect + v34;
      }
    }
    sub_100140098((uint64_t *)v149);
    v35 = *(_QWORD *)(v149 + 272);
    v144 = *(_QWORD *)(v149 + 280);
    if (v35 == v144)
    {
      v74 = a3;
    }
    else
    {
      v36 = a2;
      do
      {
        sub_10019F9CC(v150, v35);
        v37 = v151;
        v38 = v152;
        v40 = (char *)objc_msgSend(*(id *)(v149 + 208), "charRangeMappedToStorage:", v151, v152);
        v41 = v39;
        if (v36 <= (unint64_t)v40 && a3 + v36 >= (unint64_t)&v40[v39])
          goto LABEL_64;
        v156.location = v36;
        v156.length = a3;
        v162.location = (NSUInteger)v40;
        v162.length = v41;
        if (!NSIntersectionRange(v156, v162).length)
          goto LABEL_64;
        v157.location = (NSUInteger)objc_msgSend(*(id *)(v149 + 208), "charRangeMappedFromStorage:", v36, a3);
        v163.location = v37;
        v163.length = v38;
        v43 = NSIntersectionRange(v157, v163);
        v141 = objc_msgSend(*(id *)(v149 + 208), "charRangeMappedToStorage:", v43.location, v43.length);
        v45 = v44;
        v46 = v153;
        v47 = (const __CTLine *)sub_10019FA78((uint64_t)v150);
        v48 = v43.location - v37 + v46;
        OffsetForStringIndex = CTLineGetOffsetForStringIndex(v47, v48, 0);
        v50 = (const __CTLine *)sub_10019FA78((uint64_t)v150);
        v51 = CTLineGetOffsetForStringIndex(v50, v48 + v43.length, 0);
        v52 = (const __CTLine *)sub_10019FA78((uint64_t)v150);
        TypographicBounds = CTLineGetTypographicBounds(v52, 0, 0, 0);
        v54 = sub_10013F8F8(v149, (unint64_t)v40, 0, 1, 0);
        v55 = &v40[v41];
        v56 = sub_10013F8F8(v149, (unint64_t)&v40[v41], 0, 1, 0) - v54;
        v57 = v54 - (*(double *)(v142 + 8) + *(double *)(v149 + 40));
        v58 = TypographicBounds * 0.5 + *(double *)(v149 + 32) - v51;
        v59 = v51 - OffsetForStringIndex;
        v61 = (double *)a8[1];
        v60 = (unint64_t)a8[2];
        if ((unint64_t)v61 >= v60)
        {
          v63 = (double *)*a8;
          v64 = ((char *)v61 - *a8) >> 5;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 59)
            sub_100007810();
          v66 = v60 - (_QWORD)v63;
          if (v66 >> 4 > v65)
            v65 = v66 >> 4;
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0)
            v67 = 0x7FFFFFFFFFFFFFFLL;
          else
            v67 = v65;
          if (v67)
          {
            v68 = (char *)sub_100134CDC((uint64_t)(a8 + 2), v67);
            v63 = (double *)*a8;
            v61 = (double *)a8[1];
          }
          else
          {
            v68 = 0;
          }
          v69 = (double *)&v68[32 * v64];
          *v69 = v57;
          v69[1] = v58;
          v69[2] = v56;
          v69[3] = v59;
          if (v61 == v63)
          {
            v72 = &v68[32 * v64];
          }
          else
          {
            v70 = &v68[32 * v64];
            do
            {
              v71 = *((_OWORD *)v61 - 1);
              v72 = v70 - 32;
              *((_OWORD *)v70 - 2) = *((_OWORD *)v61 - 2);
              *((_OWORD *)v70 - 1) = v71;
              v61 -= 4;
              v70 -= 32;
            }
            while (v61 != v63);
          }
          v62 = v69 + 4;
          *a8 = v72;
          a8[1] = (char *)(v69 + 4);
          a8[2] = &v68[32 * v67];
          if (v63)
            operator delete(v63);
        }
        else
        {
          *v61 = v57;
          v61[1] = v58;
          v62 = v61 + 4;
          v61[2] = v56;
          v61[3] = v59;
        }
        a8[1] = (char *)v62;
        if (v146)
        {
          v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](NSValue, "valueWithRange:", v141, v45));
          objc_msgSend(v146, "addObject:", v73);

        }
        a2 = 0x7FFFFFFFFFFFFFFFLL;
        v74 = 0;
        v158.location = v36;
        v158.length = a3;
        v164.location = (NSUInteger)v40;
        v164.length = v41;
        if (NSIntersectionRange(v158, v164).length)
        {
          if ((unint64_t)v40 >= v36
            && (unint64_t)&v40[-v36] < a3
            && ((unint64_t)v55 < v36 || (unint64_t)&v55[-v36] >= a3))
          {
            a2 = v36;
            v74 = (NSUInteger)&v40[-v36];
          }
          else if (v36 >= (unint64_t)v40
                 && v36 - (unint64_t)v40 < v41
                 && (a3 + v36 < (unint64_t)v40 || a3 + v36 - (unint64_t)v40 >= v41))
          {
            a2 = (unint64_t)&v40[v41];
            v74 = a3 + v36 - (_QWORD)v55;
          }
        }
        else
        {
LABEL_64:
          a2 = v36;
          v74 = a3;
        }
        sub_10019FA00(v150);
        v35 += 104;
        a3 = v74;
        v36 = a2;
      }
      while (v35 != v144);
    }
    v76 = *(_QWORD *)(v149 + 464);
    if (v76 != *(_QWORD *)(v149 + 472))
    {
      v77 = 0;
      v78 = 0;
      v145 = a8 + 2;
      while (1)
      {
        v159.location = a2;
        v159.length = v74;
        v79 = NSIntersectionRange(v159, *(NSRange *)(v76 + 40 * v77 + 16));
        if (!v79.length)
          goto LABEL_127;
        v80 = (uint64_t *)sub_100140E90(v149);
        v81 = *v80;
        if (v80[1] == *v80)
          goto LABEL_127;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = -INFINITY;
        v86 = -INFINITY;
        do
        {
          if (*(_QWORD *)(v81 + v82 + 56) == v77)
          {
            if (NSIntersectionRange(*(NSRange *)(v81 + v82), v79).length)
            {
              v81 = *v80;
              if ((v83 & 1) == 0)
                v85 = *(double *)(v81 + v82 + 32);
              v86 = *(double *)(v81 + v82 + 40);
              v83 = 1;
            }
            else
            {
              if ((v83 & 1) != 0)
                goto LABEL_85;
              v83 = 0;
              v81 = *v80;
            }
          }
          ++v84;
          v82 += 64;
        }
        while (v84 < (v80[1] - v81) >> 6);
        if ((v83 & 1) == 0)
          goto LABEL_127;
LABEL_85:
        v87 = (__int128 *)v149;
        v88 = *(_QWORD *)(v149 + 24);
        if ((v88 & 0x800) != 0)
        {
          v89 = v79.location + v79.length;
          if (v88 < 0)
            v87 = &xmmword_100EEE418;
          if (v89 == *(_QWORD *)v87 + *((_QWORD *)v87 + 1))
          {
            if ((v88 & 0x1000) != 0)
              v85 = sub_10013F8F8(v149, v89, 0, 1, 0) - *(double *)(v142 + 8) - *(double *)(v149 + 40);
            else
              v86 = sub_10013F8F8(v149, v89, 0, 1, 0) - *(double *)(v142 + 8) - *(double *)(v149 + 40);
          }
        }
        v23 = v85 + *(double *)(v142 + 8) + *(double *)(v149 + 40);
        v24 = v86 - v85;
        if (a6)
        {
          v90 = *(_QWORD *)(v149 + 248);
          for (i = *(_QWORD *)(v149 + 256); v90 != i; v90 += 104)
          {
            v92 = (const __CTLine *)sub_10019FA78(v90);
            v93 = CTLineGetTypographicBounds(v92, 0, 0, 0);
            if (NSIntersectionRange(v79, *(NSRange *)(v90 + 24)).length)
            {
              v167.origin.x = v23;
              v167.origin.y = v21;
              v167.size.width = v24;
              v167.size.height = rect;
              v94 = *(double *)(v90 + 8) + *(double *)(v149 + 40);
              if (v94 < CGRectGetMinX(v167))
              {
                v168.origin.x = v23;
                v168.origin.y = v21;
                v168.size.width = v24;
                v168.size.height = rect;
                v24 = CGRectGetMaxX(v168) - v94;
                v23 = v94;
              }
              v169.origin.x = v23;
              v169.origin.y = v21;
              v169.size.width = v24;
              v169.size.height = rect;
              v95 = v93 + v94;
              if (v95 > CGRectGetMaxX(v169))
              {
                v170.origin.x = v23;
                v170.origin.y = v21;
                v170.size.width = v24;
                v170.size.height = rect;
                v24 = v95 - CGRectGetMinX(v170);
              }
            }
          }
        }
        v97 = (double *)*a8;
        v96 = a8[1];
        if (*a8 != v96
          && ((MaxX = CGRectGetMaxX(*((CGRect *)v96 - 1)),
               v171.origin.x = v23,
               v171.origin.y = v21,
               v171.size.width = v24,
               v171.size.height = rect,
               MinX = CGRectGetMinX(v171),
               v97 = (double *)a8[1],
               MaxX == MinX)
           || vabdd_f64(MaxX, MinX) < 0.00999999978))
        {
          v173.origin.x = v23;
          v173.origin.y = v21;
          v173.size.width = v24;
          v173.size.height = rect;
          *((CGRect *)v97 - 1) = CGRectUnion(*(CGRect *)(v97 - 4), v173);
          if (!v146 || a8[1] == *a8)
            goto LABEL_127;
          v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "lastObject"));
          v108 = objc_msgSend(v107, "rangeValue");
          v110 = v109;

          v160.location = (NSUInteger)v108;
          v160.length = v110;
          v111 = NSUnionRange(v160, v79);
          v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](NSValue, "valueWithRange:", v111.location, v111.length));
          objc_msgSend(v146, "setObject:atIndexedSubscript:", v112, (char *)objc_msgSend(v146, "count") - 1);
        }
        else
        {
          if ((unint64_t)v97 >= *v145)
          {
            v101 = (double *)*a8;
            v102 = ((char *)v97 - *a8) >> 5;
            v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 59)
              sub_100007810();
            v104 = *v145 - (_QWORD)v101;
            if (v104 >> 4 > v103)
              v103 = v104 >> 4;
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFE0)
              v105 = 0x7FFFFFFFFFFFFFFLL;
            else
              v105 = v103;
            if (v105)
            {
              v106 = (char *)sub_100134CDC((uint64_t)v145, v105);
              v101 = (double *)*a8;
              v97 = (double *)a8[1];
            }
            else
            {
              v106 = 0;
            }
            v113 = (double *)&v106[32 * v102];
            *v113 = v23;
            v113[1] = v21;
            v113[2] = v24;
            v113[3] = rect;
            if (v97 == v101)
            {
              v116 = &v106[32 * v102];
            }
            else
            {
              v114 = &v106[32 * v102];
              do
              {
                v115 = *((_OWORD *)v97 - 1);
                v116 = v114 - 32;
                *((_OWORD *)v114 - 2) = *((_OWORD *)v97 - 2);
                *((_OWORD *)v114 - 1) = v115;
                v97 -= 4;
                v114 -= 32;
              }
              while (v97 != v101);
            }
            v100 = v113 + 4;
            *a8 = v116;
            a8[1] = (char *)(v113 + 4);
            a8[2] = &v106[32 * v105];
            if (v101)
              operator delete(v101);
          }
          else
          {
            *v97 = v23;
            v97[1] = v21;
            v100 = v97 + 4;
            v97[2] = v24;
            v97[3] = rect;
          }
          a8[1] = (char *)v100;
          if (!v146)
            goto LABEL_127;
          v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](NSValue, "valueWithRange:", v79.location, v79.length));
          objc_msgSend(v146, "addObject:", v112);
        }

LABEL_127:
        v76 = *(_QWORD *)(v149 + 464);
        v77 = ++v78;
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v149 + 472) - v76) >> 3) <= v78)
          goto LABEL_141;
      }
    }
    v117 = (NSRange *)&xmmword_100EEE418;
    if (*(uint64_t *)(v149 + 24) >= 0)
      v117 = (NSRange *)v149;
    v161.location = a2;
    v161.length = v74;
    v118 = NSIntersectionRange(v161, *v117);
    if (!v118.length)
      goto LABEL_141;
    v119 = (__int128 *)v149;
    v120 = *(_QWORD *)(v149 + 24);
    v121 = 0.0;
    if ((v120 & 0x800) != 0)
    {
      v122 = v118.location + v118.length;
      if (v120 < 0)
        v119 = &xmmword_100EEE418;
      if (v122 == *(_QWORD *)v119 + *((_QWORD *)v119 + 1))
      {
        if ((v120 & 0x1000) == 0)
        {
          v123 = sub_10013F8F8(v149, v122, 0, 1, 0) - *(double *)(v142 + 8) - *(double *)(v149 + 40);
LABEL_140:
          v23 = v121 + *(double *)(v142 + 8) + *(double *)(v149 + 40);
          v24 = v123 - v121;
          goto LABEL_141;
        }
        v121 = sub_10013F8F8(v149, v122, 0, 1, 0) - *(double *)(v142 + 8) - *(double *)(v149 + 40);
      }
    }
    v123 = 0.0;
    goto LABEL_140;
  }
  v74 = a3;
LABEL_141:
  v75 = (double **)a8;
LABEL_142:
  v124 = *v75;
  if (*v75 == v75[1])
  {
    v125 = (unint64_t)v75[2];
    if ((unint64_t)v124 >= v125)
    {
      v127 = v125 - (_QWORD)v124;
      v128 = v127 >> 4;
      if ((unint64_t)(v127 >> 4) <= 1)
        v128 = 1;
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFE0)
        v129 = 0x7FFFFFFFFFFFFFFLL;
      else
        v129 = v128;
      v130 = (double *)sub_100134CDC((uint64_t)(v75 + 2), v129);
      v131 = *v75;
      v132 = v75[1];
      v134 = &v130[4 * v133];
      *v130 = v23;
      v130[1] = v21;
      v130[2] = v24;
      v130[3] = rect;
      v126 = v130 + 4;
      if (v132 != v131)
      {
        v135 = v130;
        do
        {
          v136 = *((_OWORD *)v132 - 1);
          v130 = v135 - 4;
          *((_OWORD *)v135 - 2) = *((_OWORD *)v132 - 2);
          *((_OWORD *)v135 - 1) = v136;
          v132 -= 4;
          v135 -= 4;
        }
        while (v132 != v131);
      }
      *v75 = v130;
      v75[1] = v126;
      v75[2] = v134;
      if (v131)
        operator delete(v131);
    }
    else
    {
      *v124 = v23;
      v124[1] = v21;
      v126 = v124 + 4;
      v124[2] = v24;
      v124[3] = rect;
    }
    v75[1] = v126;
  }
  v137 = v146;
  if (v146)
  {
    v138 = objc_msgSend(v146, "count");
    v137 = v146;
    if (!v138)
    {
      v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](NSValue, "valueWithRange:", a2, v74));
      objc_msgSend(v146, "addObject:", v139);

      v137 = v146;
    }
  }

}

void sub_10013F77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v16;

  v16 = *(void **)a15;
  if (*(_QWORD *)a15)
  {
    *(_QWORD *)(a15 + 8) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(a1);
}

void sub_10013F898(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10013F8C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_10013F8F8(uint64_t a1, unint64_t a2, uint64_t a3, char a4, double *a5)
{
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double MaxX;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  CFIndex v34;
  const __CTLine *v35;
  double v36;
  double v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char *v42;
  const __CTLine *v43;
  CGFloat OffsetForStringIndex;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  CGRect *v54;
  CGFloat v55;
  double v56;
  double v58;
  const __CTLine *v59;
  CGFloat secondaryOffset;
  CGRect v61;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = &xmmword_100EEE418;
  if (v9 >= 0)
    v10 = (__int128 *)a1;
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  if (a5)
    *a5 = 0.0;
  if (*(_QWORD *)(a1 + 400))
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    if ((v9 & 0x1000) != 0)
    {
      if (*(_QWORD *)a1 == a2)
        goto LABEL_8;
    }
    else if (*(_QWORD *)a1 != a2)
    {
LABEL_8:
      MaxX = CGRectGetMaxX(*(CGRect *)&v13);
      goto LABEL_30;
    }
    MaxX = CGRectGetMinX(*(CGRect *)&v13);
LABEL_30:
    v27 = MaxX;
    if (a5)
    {
      *a5 = MaxX;
      if ((a4 & 1) != 0)
        return v27;
      goto LABEL_81;
    }
LABEL_80:
    if ((a4 & 1) != 0)
      return v27;
    goto LABEL_81;
  }
  v18 = *(_QWORD *)(a1 + 216);
  v19 = *(_QWORD *)(a1 + 224) - v18;
  if (!v19)
  {
    v27 = 0.0;
    if ((a4 & 1) != 0)
      return v27;
    goto LABEL_81;
  }
  if (v12 + v11 != a2)
    goto LABEL_33;
  if ((v9 & 0x800) != 0)
  {
    v38 = *(void **)(a1 + 208);
    if (!v38)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B0C8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFE3D8();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B0E8);
      v39 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v39, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL, BOOL, CGFloat *) const"));
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v40, v41, 1381, 0, "invalid nil value for '%{public}s'", "_textSource");

      v38 = *(void **)(a1 + 208);
    }
    v42 = (char *)objc_msgSend(v38, "charIndexMappedFromStorage:", a2) - 1;
    secondaryOffset = 0.0;
    if ((*(_BYTE *)(a1 + 25) & 0x40) != 0)
      v42 = &v42[*(_QWORD *)(a1 + 16) - *(_QWORD *)a1];
    v43 = (const __CTLine *)sub_10019FA78(v18);
    OffsetForStringIndex = CTLineGetOffsetForStringIndex(v43, (CFIndex)v42, &secondaryOffset);
    v45 = *(double *)(v18 + 8);
    v46 = OffsetForStringIndex + v45;
    v47 = v45 + secondaryOffset;
    secondaryOffset = v45 + secondaryOffset;
    if (a5)
    {
      *a5 = v47;
    }
    else if ((v9 & 0x1000) == 0)
    {
      v46 = v47;
    }
    if (sub_1001B0C90((uint64_t)v42, *(void **)(a1 + 208)))
    {
      v48 = 0.0;
      if ((v9 & 0x1000) == 0)
        v48 = *(double *)(a1 + 56);
      v28 = v48;
      if (!a5)
        goto LABEL_77;
    }
    else
    {
      v49 = 7.0;
      if ((v9 & 0x1000) != 0)
        v49 = -7.0;
      v28 = v49 + v46;
      if (!a5)
        goto LABEL_77;
      v48 = v49 + *a5;
    }
    *a5 = v48;
LABEL_77:
    v50 = *(double *)(a1 + 40);
    v27 = v28 + v50;
    if (!a5)
      goto LABEL_80;
    v51 = v50 + *a5;
    goto LABEL_79;
  }
  if ((v9 & 0x1002) != 2)
  {
LABEL_33:
    v28 = 0.0;
    if (*(_QWORD *)a1 <= a2)
    {
      v29 = *(void **)(a1 + 208);
      if (!v29)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount", 0.0);
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123B148);
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          sub_100DFE34C();
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123B168);
        v30 = off_1013D9070;
        if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_ERROR))
        {
          objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
          sub_100DE7E60();
        }

        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL, BOOL, CGFloat *) const"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v31, v32, 1423, 0, "invalid nil value for '%{public}s'", "_textSource");

        v29 = *(void **)(a1 + 208);
      }
      v33 = objc_msgSend(v29, "charIndexMappedFromStorage:", a2, v28);
      v34 = (CFIndex)v33;
      if ((*(_BYTE *)(a1 + 25) & 0x40) != 0)
        v34 = (CFIndex)v33 + *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
      secondaryOffset = 0.0;
      v35 = (const __CTLine *)sub_10019FA78(v18);
      v36 = CTLineGetOffsetForStringIndex(v35, v34, &secondaryOffset);
      v37 = *(double *)(v18 + 8);
      if (a5)
        *a5 = v37 + secondaryOffset;
      v28 = v36 + v37;
    }
    goto LABEL_77;
  }
  v20 = 0x4EC4EC4EC4EC4EC5 * (v19 >> 3);
  if (v20 <= 1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B108);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE2CC();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B128);
    v21 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL, BOOL, CGFloat *) const"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v22, v23, 1412, 0, "Missing hyphen line ref");

    v18 = *(_QWORD *)(a1 + 216);
    v20 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 224) - v18) >> 3);
  }
  v24 = 0.0;
  if (v20 >= 2)
  {
    v25 = v18 + 104;
    v26 = v20 - 1;
    while ((*(_BYTE *)(v25 + 96) & 2) == 0)
    {
      v25 += 104;
      if (!--v26)
        goto LABEL_85;
    }
    v58 = *(double *)(v25 + 8);
    v59 = (const __CTLine *)sub_10019FA78(v25);
    v24 = v58 + CTLineGetTypographicBounds(v59, 0, 0, 0);
  }
LABEL_85:
  if (a5)
  {
    *a5 = v24;
    v51 = v24 + *(double *)(a1 + 40);
    v27 = v51;
LABEL_79:
    *a5 = v51;
    goto LABEL_80;
  }
  v27 = v24 + *(double *)(a1 + 40);
  if ((a4 & 1) != 0)
    return v27;
LABEL_81:
  v52 = CGRectGetMaxX(*(CGRect *)(a1 + 40));
  v27 = fmax(fmin(v27, v52), CGRectGetMinX(*(CGRect *)(a1 + 40)));
  if (a5)
  {
    v53 = *a5;
    v55 = *(double *)(a1 + 40);
    v54 = (CGRect *)(a1 + 40);
    v61.origin.x = v55;
    v61.origin.y = v54->origin.y;
    v61.size.width = v54->size.width;
    v61.size.height = v54->size.height;
    v56 = CGRectGetMaxX(v61);
    *a5 = fmax(fmin(v53, v56), CGRectGetMinX(*v54));
  }
  return v27;
}

void sub_100140048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

intptr_t sub_100140098(uint64_t *a1)
{
  char *v2;
  uint64_t v4;
  const __CTLine *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  CFArrayRef GlyphRuns;
  void *v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const __CTRun *v20;
  CFRange StringRange;
  BOOL v22;
  const __CFDictionary *Attributes;
  CTRunStatus v24;
  id v25;
  UChar32 v26;
  int v27;
  BOOL v29;
  __CFString *v30;
  CFIndex location;
  CFIndex v32;
  id v33;
  UChar32 v34;
  BOOL v35;
  uint64_t *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  BOOL v52;
  CFIndex GlyphCount;
  uint64_t i;
  id v55;
  char v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL4 v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  BOOL v96;
  char v97;
  uint64_t v98;
  unsigned int v100;
  NSObject *v101;
  void *v102;
  void *v103;
  void *v104;
  char *v105;
  void *v106;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  int64_t v115;
  int64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  void *v119;
  id v120;
  CFIndex length;
  CFIndex v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  BOOL v128;
  uint64_t *v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  CFIndex *buffer;
  _BYTE v136[10];
  __int16 v137;
  const char *v138;
  __int16 v139;
  int v140;
  _BYTE v141[128];
  CFRange v142;

  dispatch_semaphore_wait((dispatch_semaphore_t)a1[41], 0xFFFFFFFFFFFFFFFFLL);
  v2 = (char *)a1[59];
  if (v2 != (char *)a1[58])
    return dispatch_semaphore_signal((dispatch_semaphore_t)a1[41]);
  v118 = a1 + 58;
  v4 = a1[27];
  v129 = a1;
  if (a1[28] == v4 || (*((_BYTE *)a1 + 25) & 0x40) != 0)
    goto LABEL_109;
  v5 = (const __CTLine *)sub_10019FA78(v4);
  length = 0;
  v122 = 0x7FFFFFFFFFFFFFFFLL;
  v6 = a1;
  if (!a1[26])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B308);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE4F0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B328);
    v7 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::fillWritingDirectionRuns() const"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v8, v9, 2127, 0, "invalid nil value for '%{public}s'", "_textSource");

    v6 = a1;
  }
  if (!v6[57])
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B348);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE464();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B368);
    v10 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::fillWritingDirectionRuns() const"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 2128, 0, "invalid nil value for '%{public}s'", "_paragraphString");

    v6 = a1;
  }
  v125 = v6[31];
  v126 = v6[32];
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  GlyphRuns = CTLineGetGlyphRuns(v5);
  v119 = (void *)objc_claimAutoreleasedReturnValue(GlyphRuns);
  v14 = v119;
  v15 = objc_msgSend(v119, "countByEnumeratingWithState:objects:count:", &v131, v141, 16);
  v16 = v129;
  if (!v15)
  {

    v2 = (char *)v129[59];
    goto LABEL_109;
  }
  v123 = 0;
  v124 = *(_QWORD *)v132;
  v117 = v129 + 60;
  v130 = 1;
  v17 = -1;
  v18 = -1;
  v128 = 1;
  do
  {
    v19 = 0;
    v120 = v15;
    do
    {
      if (*(_QWORD *)v132 != v124)
        objc_enumerationMutation(v14);
      v20 = *(const __CTRun **)(*((_QWORD *)&v131 + 1) + 8 * (_QWORD)v19);
      StringRange = CTRunGetStringRange(v20);
      v22 = StringRange.length != 1 || v126 == v125;
      if (v22
        || (Attributes = CTRunGetAttributes(v20),
            !CFDictionaryContainsKey(Attributes, CFSTR("CRLWPRubySpacingRunAttribute"))))
      {
        v24 = CTRunGetStatus(v20) & 1;
        v127 = v24 == 0;
        if ((v130 & 1) != 0)
          v128 = (*((_BYTE *)v16 + 25) & 0x10) == 0;
        v25 = (id)v16[57];
        v26 = sub_1001B0148(StringRange.location, v25);
        v27 = sub_1001B0EFC(v26);

        if (v27 == 3 && StringRange.location != 0)
        {
          v30 = (__CFString *)(id)v129[57];
          location = CTRunGetStringRange(v20).location;
          v32 = CFStringGetRangeOfComposedCharactersAtIndex(v30, location - 1).location;

          v33 = (id)v129[57];
          v34 = sub_1001B0148(v32, v33);
          v35 = sub_1001B0EFC(v34) != 0;

          v16 = v129;
          goto LABEL_47;
        }
        v35 = 0;
        v16 = v129;
        if ((v24 ^ 1) == v128
          && !(BYTE4(v123) & 1 | (v27 == 3))
          && ((v35 = 0, StringRange.location + StringRange.length == v122) || length + v122 == StringRange.location))
        {
          v29 = 0;
        }
        else
        {
LABEL_47:
          if ((v130 & 1) == 0)
          {
            v36 = v16;
            v37 = v123 & 1;
            v39 = v36[59];
            v38 = v36[60];
            if (v39 >= v38)
            {
              v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - *v118) >> 3);
              v42 = v41 + 1;
              if (v41 + 1 > 0x666666666666666)
                sub_100007810();
              v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - *v118) >> 3);
              if (2 * v43 > v42)
                v42 = 2 * v43;
              if (v43 >= 0x333333333333333)
                v44 = 0x666666666666666;
              else
                v44 = v42;
              if (v44)
                v45 = (char *)sub_10014A874((uint64_t)v117, v44);
              else
                v45 = 0;
              v46 = &v45[40 * v41];
              *(_QWORD *)v46 = v18;
              *((_QWORD *)v46 + 1) = v17;
              v46[32] = v128;
              v46[33] = v37;
              v16 = v129;
              v48 = (char *)v129[58];
              v47 = (char *)v129[59];
              v49 = v46;
              if (v47 != v48)
              {
                do
                {
                  v50 = *(_OWORD *)(v47 - 40);
                  v51 = *(_OWORD *)(v47 - 24);
                  *((_QWORD *)v49 - 1) = *((_QWORD *)v47 - 1);
                  *(_OWORD *)(v49 - 24) = v51;
                  *(_OWORD *)(v49 - 40) = v50;
                  v49 -= 40;
                  v47 -= 40;
                }
                while (v47 != v48);
                v47 = (char *)*v118;
              }
              v40 = v46 + 40;
              v129[58] = (uint64_t)v49;
              v129[59] = (uint64_t)(v46 + 40);
              v129[60] = (uint64_t)&v45[40 * v44];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v39 = v18;
              *(_QWORD *)(v39 + 8) = v17;
              *(_BYTE *)(v39 + 32) = v128;
              v40 = (char *)(v39 + 40);
              *(_BYTE *)(v39 + 33) = v37;
              v16 = v129;
            }
            v16[59] = (uint64_t)v40;
          }
          v52 = v27 == 3 && v35;
          LOBYTE(v123) = v52;
          v17 = -1;
          v18 = -1;
          v29 = v27 == 3;
          v128 = v127;
        }
        v14 = v119;
        GlyphCount = CTRunGetGlyphCount(v20);
        sub_10002B980(&buffer, GlyphCount);
        v142.location = 0;
        v142.length = GlyphCount;
        CTRunGetStringIndices(v20, v142, buffer);
        BYTE4(v123) = v29;
        if (GlyphCount >= 1)
        {
          for (i = 0; i != GlyphCount; ++i)
          {
            v55 = objc_msgSend((id)v16[26], "charIndexMappedToStorage:", buffer[i]);
            if ((uint64_t)v55 < v18 || v18 == -1)
              v18 = (uint64_t)v55;
            if ((uint64_t)v55 > v17 || v17 == -1)
              v17 = (uint64_t)v55;
          }
        }
        if (buffer)
        {
          *(_QWORD *)v136 = buffer;
          operator delete(buffer);
        }
        v130 = 0;
        length = StringRange.length;
        v122 = StringRange.location;
        v15 = v120;
      }
      v19 = (char *)v19 + 1;
    }
    while (v19 != v15);
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v131, v141, 16);
  }
  while (v15);

  v2 = (char *)v129[59];
  if (v18 != -1 && v17 != -1)
  {
    v59 = v123 & 1;
    if ((unint64_t)v2 >= *v117)
    {
      v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*v118] >> 3);
      if (v61 + 1 > 0x666666666666666)
        sub_100007810();
      v62 = 0x999999999999999ALL * ((uint64_t)(*v117 - *v118) >> 3);
      if (v62 <= v61 + 1)
        v62 = v61 + 1;
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v117 - *v118) >> 3) >= 0x333333333333333)
        v63 = 0x666666666666666;
      else
        v63 = v62;
      if (v63)
        v64 = (char *)sub_10014A874((uint64_t)v117, v63);
      else
        v64 = 0;
      v65 = &v64[40 * v61];
      v66 = &v64[40 * v63];
      *(_QWORD *)v65 = v18;
      *((_QWORD *)v65 + 1) = v17;
      v65[32] = v128;
      v65[33] = v59;
      v2 = v65 + 40;
      v60 = v129;
      v68 = (char *)v129[58];
      v67 = (char *)v129[59];
      if (v67 != v68)
      {
        do
        {
          v69 = *(_OWORD *)(v67 - 40);
          v70 = *(_OWORD *)(v67 - 24);
          *((_QWORD *)v65 - 1) = *((_QWORD *)v67 - 1);
          *(_OWORD *)(v65 - 24) = v70;
          *(_OWORD *)(v65 - 40) = v69;
          v65 -= 40;
          v67 -= 40;
        }
        while (v67 != v68);
        v67 = (char *)*v118;
      }
      v129[58] = (uint64_t)v65;
      v129[59] = (uint64_t)v2;
      v129[60] = (uint64_t)v66;
      if (v67)
        operator delete(v67);
    }
    else
    {
      *(_QWORD *)v2 = v18;
      *((_QWORD *)v2 + 1) = v17;
      v2[32] = v128;
      v2[33] = v59;
      v2 += 40;
      v60 = v129;
    }
    v60[59] = (uint64_t)v2;
  }
LABEL_109:
  v71 = (char *)*v118;
  if (v2 != (char *)*v118)
  {
    v72 = 0;
    v73 = 0;
    v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*v118] >> 3);
    do
    {
      v75 = *v129;
      v76 = v129[3];
      v77 = v76 < 0;
      if (v76 < 0)
        v78 = &xmmword_100EEE418;
      else
        v78 = (__int128 *)v129;
      v79 = *((_QWORD *)v78 + 1);
      v80 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v77)
        v80 = *v129;
      v81 = v80 + v79;
      v82 = &v71[40 * v72];
      v83 = *(_QWORD *)v82;
      v84 = *((_QWORD *)v82 + 1);
      v85 = (uint64_t *)(v71 + 8);
      v86 = 1;
      do
      {
        v87 = *(v85 - 1);
        v88 = *v85;
        v90 = *v85 <= v75 || v88 > v83;
        if (v87 <= v88)
          v91 = *v85;
        else
          v91 = *(v85 - 1);
        if (v87 >= v88)
          v92 = *v85;
        else
          v92 = *(v85 - 1);
        v93 = !v90;
        if (v90)
          v94 = v75;
        else
          v94 = *v85;
        if (!v93)
          v91 = *(v85 - 1);
        if (v87 > v83 || v87 <= v75)
          v75 = v94;
        else
          v75 = v91;
        if (v84)
          v96 = v88 < v81;
        else
          v96 = 0;
        v97 = v96;
        if ((v97 & (v88 > v84)) != 0)
        {
          v98 = v92;
        }
        else
        {
          v88 = v81;
          v98 = *(v85 - 1);
        }
        if (v87 > v84 && v87 < v81)
          v81 = v98;
        else
          v81 = v88;
        v85 += 5;
        v77 = v74 > v86++;
      }
      while (v77);
      if (v81 >= v75)
      {
        v105 = &v71[40 * v72];
        *((_QWORD *)v105 + 2) = v75;
        *((_QWORD *)v105 + 3) = v81 - v75;
      }
      else
      {
        v100 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123B388);
        v101 = off_1013D9070;
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buffer) = 67109890;
          HIDWORD(buffer) = v100;
          *(_WORD *)v136 = 2082;
          *(_QWORD *)&v136[2] = "void CRLWPLineFragment::fillWritingDirectionRuns() const";
          v137 = 2082;
          v138 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
          v139 = 1024;
          v140 = 2242;
          _os_log_error_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad ranges in runs.", (uint8_t *)&buffer, 0x22u);
        }
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123B3A8);
        v102 = off_1013D9070;
        if (os_log_type_enabled((os_log_t)v102, OS_LOG_TYPE_ERROR))
        {
          v106 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
          LODWORD(buffer) = 67109378;
          HIDWORD(buffer) = v100;
          *(_WORD *)v136 = 2114;
          *(_QWORD *)&v136[2] = v106;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v102, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&buffer, 0x12u);

        }
        v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::fillWritingDirectionRuns() const"));
        v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v103, v104, 2242, 0, "Bad ranges in runs.");

        *(_OWORD *)(v129[58] + 40 * v72 + 16) = xmmword_100EECC60;
        v2 = (char *)v129[59];
      }
      v71 = (char *)*v118;
      v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*v118] >> 3);
      v72 = ++v73;
    }
    while (v74 > v73);
    if (v2 != v71)
    {
      v107 = 0;
      v108 = 0;
      do
      {
        if (v74 - 1 > v107
          && (v109 = *(_QWORD *)&v71[40 * v108 + 56], v110 = &v71[40 * v107], v111 = *((_QWORD *)v110 + 2), v109 <= v111)
          && *(_QWORD *)&v71[40 * v108 + 64] + v109 >= *(_QWORD *)&v71[40 * v107 + 24] + v111)
        {
          v116 = v2 - (v110 + 40);
          if (v2 != v110 + 40)
            memmove(&v71[40 * v107], v110 + 40, v2 - (v110 + 40));
          v2 -= 40;
          v129[59] = (uint64_t)&v110[v116];
          --v108;
        }
        else if (v108)
        {
          v112 = *(_QWORD *)&v71[40 * v108 - 24];
          v113 = &v71[40 * v107];
          v114 = *((_QWORD *)v113 + 2);
          if (v112 <= v114 && *(_QWORD *)&v71[40 * v108 - 16] + v112 >= *(_QWORD *)&v71[40 * v107 + 24] + v114)
          {
            v115 = v2 - (v113 + 40);
            if (v2 != v113 + 40)
              memmove(v113, v113 + 40, v2 - (v113 + 40));
            v2 -= 40;
            v129[59] = (uint64_t)&v113[v115];
            --v108;
          }
        }
        v71 = (char *)*v118;
        v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*v118] >> 3);
        v107 = ++v108;
      }
      while (v74 > v108);
    }
  }
  return dispatch_semaphore_signal((dispatch_semaphore_t)v129[41]);
}

void sub_100140DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  void *v40;

  _Unwind_Resume(a1);
}

uint64_t sub_100140E90(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  id v17;
  _BOOL4 v18;
  CGFloat OffsetForStringIndex;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  BOOL v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v33;
  char v34;
  CGFloat v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 *v61;
  __int128 *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  __int128 *v79;
  double *v80;
  double v81;
  int v82;
  uint64_t v83;
  __int128 *v84;
  uint64_t v86;
  BOOL v87;
  double v88;
  __int128 *v89;
  unint64_t v90;
  uint64_t v91;
  id v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  const __CTLine *line;
  __int128 **v98;
  CGFloat secondaryOffset;
  uint8_t buf[4];
  unsigned int v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  int v107;

  if (*(_QWORD *)(a1 + 224) == *(_QWORD *)(a1 + 216) || (*(_BYTE *)(a1 + 25) & 0x40) != 0)
    return a1 + 432;
  v2 = *(id *)(a1 + 456);
  objc_sync_enter(v2);
  if (*(_QWORD *)(a1 + 432) != *(_QWORD *)(a1 + 440))
    goto LABEL_141;
  v93 = v2;
  if (!*(_QWORD *)(a1 + 208))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B408);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE708();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B428);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "const std::vector<CRLWPLFCharIndexData> &CRLWPLineFragment::getCharIndexData() const"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 2356, 0, "invalid nil value for '%{public}s'", "_textSource");

  }
  if (!*(_QWORD *)(a1 + 456))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B448);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE67C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B468);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "const std::vector<CRLWPLFCharIndexData> &CRLWPLineFragment::getCharIndexData() const"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 2357, 0, "invalid nil value for '%{public}s'", "_paragraphString");

  }
  sub_100140098((uint64_t *)a1);
  line = (const __CTLine *)sub_10019FA78(*(_QWORD *)(a1 + 216));
  v9 = &xmmword_100EEE418;
  if (*(uint64_t *)(a1 + 24) >= 0)
    v9 = (__int128 *)a1;
  v10 = *(_QWORD *)v9;
  v11 = *((_QWORD *)v9 + 1);
  v12 = (char *)objc_msgSend(*(id *)(a1 + 208), "charIndexRemappedFromStorage:", *(_QWORD *)v9);
  v98 = (__int128 **)(a1 + 432);
  v96 = v10 + v11;
  if ((unint64_t)v12 >= v10 + v11)
    goto LABEL_110;
  v14 = 0x7FFFFFFFFFFFFFFFLL;
  while (1)
  {
    v15 = (char *)objc_msgSend(*(id *)(a1 + 208), "charRangeMappedFromStorage:", v12, 1);
    if (v16 >= 2)
    {
      v17 = *(id *)(a1 + 456);
      v18 = objc_msgSend(v17, "characterAtIndex:", v15) == 8206;

      v15 += v18;
    }
    secondaryOffset = 0.0;
    OffsetForStringIndex = CTLineGetOffsetForStringIndex(line, (CFIndex)v15, &secondaryOffset);
    v20 = *(_QWORD *)(a1 + 464);
    v21 = *(_QWORD *)(a1 + 472);
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
    if (v14 < v22)
    {
      v23 = v20 + 40 * v14;
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      v27 = (unint64_t)v12 >= v25;
      v26 = &v12[-v25];
      v27 = !v27 || (unint64_t)v26 >= v24;
      if (!v27)
        goto LABEL_50;
    }
    if (v21 != v20)
    {
      v28 = 0;
      if (v22 <= 1)
        v14 = 1;
      else
        v14 = v22;
      v29 = (_QWORD *)(v20 + 24);
      while (1)
      {
        v30 = *(v29 - 1);
        v27 = (unint64_t)v12 >= v30;
        v31 = &v12[-v30];
        if (v27 && (unint64_t)v31 < *v29)
          break;
        v29 += 5;
        if (v14 == ++v28)
          goto LABEL_49;
      }
      v14 = v28;
LABEL_50:
      v34 = *(_BYTE *)(v20 + 40 * v14 + 32);
      v33 = v14;
      goto LABEL_51;
    }
    v14 = 0;
LABEL_49:
    v33 = 0x7FFFFFFFFFFFFFFFLL;
    v34 = 1;
LABEL_51:
    v35 = secondaryOffset;
    v36 = *(id *)(a1 + 456);
    v37 = objc_msgSend(*(id *)(a1 + 208), "charIndexMappedFromStorage:", v12);
    v38 = v36;
    if (objc_msgSend(v38, "length") <= v37)
      break;
    v94 = v34;
    v95 = v33;
    v39 = objc_msgSend(v38, "rangeOfComposedCharacterSequenceAtIndex:", v37);
    v41 = v40;
    if (v39 == (id)0x7FFFFFFFFFFFFFFFLL || !v40)
    {
      v42 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B948);
      v43 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109890;
        v101 = v42;
        v102 = 2082;
        v103 = "NSUInteger countOfComposedCharacters(NSString *__strong, NSUInteger)";
        v104 = 2082;
        v105 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
        v106 = 1024;
        v107 = 2086;
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected 0 length for composed sequence.", buf, 0x22u);
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123B968);
      }
      v44 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR))
      {
        v66 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        *(_DWORD *)buf = 67109378;
        v101 = v42;
        v102 = 2114;
        v103 = v66;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v44, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

      }
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSUInteger countOfComposedCharacters(NSString *__strong, NSUInteger)"));
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v45, v46, 2086, 0, "Unexpected 0 length for composed sequence.");

      if (!v41)
        v41 = 1;
    }

    v47 = (char *)objc_msgSend(*(id *)(a1 + 208), "charIndexMappedToStorage:", &v15[v41]);
    v48 = (unint64_t)&v15[v41];
    do
    {
      if (v47 >= &v12[v41])
        break;
      v47 = (char *)objc_msgSend(*(id *)(a1 + 208), "charIndexMappedToStorage:", ++v48);
    }
    while (v48 < (unint64_t)objc_msgSend(*(id *)(a1 + 208), "length"));
    if (v12 <= v47)
      v49 = v47;
    else
      v49 = v12;
    if (v12 >= v47)
      v50 = v47;
    else
      v50 = v12;
    v51 = v49 - v50;
    v52 = *(_QWORD *)(a1 + 440);
    v53 = *(_QWORD *)(a1 + 448);
    if (v52 >= v53)
    {
      v55 = (uint64_t)(v52 - (_QWORD)*v98) >> 6;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 58)
        sub_100007810();
      v57 = v53 - (_QWORD)*v98;
      if (v57 >> 5 > v56)
        v56 = v57 >> 5;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFC0)
        v58 = 0x3FFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
        v59 = (char *)sub_10014A8B8(a1 + 448, v58);
      else
        v59 = 0;
      v60 = &v59[64 * v55];
      *(_QWORD *)v60 = v50;
      *((_QWORD *)v60 + 1) = v51;
      *((CGFloat *)v60 + 2) = OffsetForStringIndex;
      *((CGFloat *)v60 + 3) = v35;
      v60[48] = v94;
      *((_QWORD *)v60 + 7) = v95;
      v62 = *(__int128 **)(a1 + 432);
      v61 = *(__int128 **)(a1 + 440);
      v63 = v60;
      if (v61 != v62)
      {
        do
        {
          v13 = (__n128)*(v61 - 4);
          v64 = *(v61 - 3);
          v65 = *(v61 - 1);
          *((_OWORD *)v63 - 2) = *(v61 - 2);
          *((_OWORD *)v63 - 1) = v65;
          *((__n128 *)v63 - 4) = v13;
          *((_OWORD *)v63 - 3) = v64;
          v63 -= 64;
          v61 -= 4;
        }
        while (v61 != v62);
        v61 = *v98;
      }
      v54 = v60 + 64;
      *(_QWORD *)(a1 + 432) = v63;
      *(_QWORD *)(a1 + 440) = v60 + 64;
      *(_QWORD *)(a1 + 448) = &v59[64 * v58];
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_QWORD *)v52 = v50;
      *(_QWORD *)(v52 + 8) = v51;
      *(CGFloat *)(v52 + 16) = OffsetForStringIndex;
      *(CGFloat *)(v52 + 24) = v35;
      *(_BYTE *)(v52 + 48) = v94;
      v54 = (char *)(v52 + 64);
      *(_QWORD *)(v52 + 56) = v95;
    }
    *(_QWORD *)(a1 + 440) = v54;
    if (v12 >= v47)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B4C8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFE57C();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B4E8);
      v70 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v70, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "const std::vector<CRLWPLFCharIndexData> &CRLWPLineFragment::getCharIndexData() const"));
      v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v68, v69, 2426, 0, "textSource failed to advance");
      goto LABEL_109;
    }
    v12 = v49;
    if ((unint64_t)v49 >= v96)
      goto LABEL_110;
  }

  +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10123B488);
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DFE5FC();
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10123B4A8);
  v67 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)v67, OS_LOG_TYPE_ERROR))
  {
    objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
    sub_100DE7E60();
  }

  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "const std::vector<CRLWPLFCharIndexData> &CRLWPLineFragment::getCharIndexData() const"));
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v68, v69, 2407, 0, "countOfComposedCharacters failed");
LABEL_109:

LABEL_110:
  v71 = *(__int128 **)(a1 + 440);
  v72 = (uint64_t)v71 - *(_QWORD *)(a1 + 432);
  if (v72)
  {
    v73 = 0;
    v74 = v72 >> 6;
    v75 = v74 - 1;
    if (v74 <= 1)
      v76 = 1;
    else
      v76 = v74;
    v77 = *(_QWORD *)(a1 + 24);
    do
    {
      v78 = *v98;
      v79 = &(*v98)[4 * v73];
      v80 = (double *)(v79 + 1);
      if ((v77 & 0x1000) == 0)
        v80 = (double *)v79 + 3;
      v81 = *v80;
      if (v73 == v75)
      {
        secondaryOffset = 0.0;
        v13.n128_f64[0] = CTLineGetOffsetForStringIndex(line, (CFIndex)objc_msgSend(*(id *)(a1 + 208), "charIndexMappedFromStorage:", v96), &secondaryOffset);
        v77 = *(_QWORD *)(a1 + 24);
        if ((v77 & 0x1000) != 0 && LOBYTE(v78[4 * v75 + 3]))
          v13.n128_f64[0] = secondaryOffset;
        v82 = LOBYTE(v78[4 * v75 + 3]);
        v78 = *v98;
        v83 = v73 + 1;
      }
      else
      {
        v83 = v73 + 1;
        v82 = *((unsigned __int8 *)v79 + 48);
        v84 = &v78[4 * v73 + 4];
        if (v82 == *((unsigned __int8 *)v84 + 48) || (v77 & 0x1000) == 0)
          v86 = 16;
        else
          v86 = 24;
        v13.n128_u64[0] = *(_QWORD *)((char *)v84 + v86);
      }
      v87 = v82 == 0;
      if (v82)
        v88 = v81;
      else
        v88 = v13.n128_f64[0];
      v89 = &v78[4 * v73];
      if (v87)
        v13.n128_f64[0] = v81;
      *((double *)v89 + 4) = v88;
      *((_QWORD *)v89 + 5) = v13.n128_u64[0];
      v73 = v83;
    }
    while (v83 != v76);
    v71 = *(__int128 **)(a1 + 440);
  }
  else
  {
    v78 = *(__int128 **)(a1 + 440);
  }
  secondaryOffset = COERCE_DOUBLE(sub_1001470D4);
  v90 = 126 - 2 * __clz(((char *)v71 - (char *)v78) >> 6);
  if (v71 == v78)
    v91 = 0;
  else
    v91 = v90;
  sub_10014A8EC(v78, v71, (uint64_t (**)(__int128 *, __int128 *))&secondaryOffset, v91, 1, v13);
  v2 = v93;
LABEL_141:
  objc_sync_exit(v2);

  return a1 + 432;
}

void sub_100141A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id obj)
{
  void *v15;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100141BAC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, int a8@<W7>, void **a9@<X8>, void *a10)
{
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  CGFloat v24;
  uint64_t v25;
  const __CTLine *v26;
  double v27;
  double v28;
  CGFloat y;
  uint64_t v30;
  CGFloat height;
  CGFloat width;
  CGFloat x;
  const __CTLine *v34;
  double TypographicBounds;
  CGFloat v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _QWORD *v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  CGFloat v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  int v56;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  uint64_t v67;
  _BOOL4 IsEmpty;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  double *v84;
  char *v85;
  double *v86;
  __int128 v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  double r2;
  double v93;
  double v95;
  id v96;
  double v98;
  CGFloat descent;
  CGFloat ascent;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;

  v96 = a10;
  if (a2 < *(_QWORD *)a1 || a2 + a3 > *(_QWORD *)(a1 + 8) + *(_QWORD *)a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123AEE8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE794();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123AF08);
    v16 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRectVector CRLWPLineFragment::rectsForVisualRange(NSRange, NSUInteger, NSUInteger, BOOL, BOOL, BOOL, NSMutableArray<NSValue *> *__strong) const"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 748, 0, "Bad range");

  }
  if ((a6 & 1) != 0)
  {
    v19 = *(double *)(a1 + 64);
  }
  else
  {
    v20 = *(double *)(a1 + 144) + *(double *)(a1 + 120);
    if (v20 < *(double *)(a1 + 112))
      v20 = *(double *)(a1 + 112);
    v19 = *(double *)(a1 + 136) + *(double *)(a1 + 104) + v20;
  }
  v98 = v19;
  v21 = *(double *)(a1 + 48);
  if ((a7 & 1) == 0)
  {
    v22 = *(double *)(a1 + 104);
    v21 = v21 + v22;
    v98 = v98 - v22;
  }
  if (a3)
  {
    v23 = *(double *)(a1 + 40);
    v24 = *(double *)(a1 + 56);
    v25 = *(_QWORD *)(a1 + 216);
    if (*(_QWORD *)(a1 + 224) != v25)
    {
      descent = 0.0;
      ascent = 0.0;
      v95 = v24;
      if (a8 && *(_QWORD *)(a1 + 256) != *(_QWORD *)(a1 + 248))
      {
        v26 = (const __CTLine *)sub_10019FA78(v25);
        CTLineGetTypographicBounds(v26, &ascent, &descent, 0);
        v27 = *(double *)(v25 + 16);
        v28 = ascent;
        y = CGRectZero.origin.y;
        v30 = *(_QWORD *)(a1 + 248);
        if (v30 == *(_QWORD *)(a1 + 256))
        {
          v37 = CGRectZero.origin.y;
        }
        else
        {
          width = CGRectZero.size.width;
          height = CGRectZero.size.height;
          x = CGRectZero.origin.x;
          do
          {
            v34 = (const __CTLine *)sub_10019FA78(v30);
            TypographicBounds = CTLineGetTypographicBounds(v34, &ascent, &descent, 0);
            v36 = *(double *)(v30 + 8);
            v37 = *(double *)(v30 + 16) - ascent;
            v38 = ascent + descent;
            if (v30 != *(_QWORD *)(a1 + 248))
            {
              v101.origin.x = x;
              v101.origin.y = y;
              v101.size.width = width;
              v101.size.height = height;
              v102 = CGRectUnion(v101, *(CGRect *)&v36);
              v36 = v102.origin.x;
              v37 = v102.origin.y;
              TypographicBounds = v102.size.width;
              v38 = v102.size.height;
            }
            v30 += 104;
            height = v38;
            width = TypographicBounds;
            y = v37;
            x = v36;
          }
          while (v30 != *(_QWORD *)(a1 + 256));
        }
        if (v37 < v27 - v28)
        {
          v39 = v27 - v28 - v37 - *(double *)(a1 + 144);
          v21 = v21 - v39;
          v98 = v98 + v39;
        }
      }
      v41 = CGRectNull.origin.x;
      v40 = CGRectNull.origin.y;
      v43 = CGRectNull.size.width;
      v42 = CGRectNull.size.height;
      v44 = (_QWORD *)sub_100140E90(a1);
      v93 = v23;
      v45 = v21;
      v46 = v44[1] - *v44;
      if (v46)
      {
        v47 = v46 >> 6;
        if (v47 <= 1)
          v47 = 1;
        v48 = (double *)(*v44 + 40);
        v49 = v42;
        v50 = v43;
        v51 = v40;
        v52 = CGRectNull.origin.x;
        do
        {
          v53 = *((_QWORD *)v48 - 5);
          v54 = *((_QWORD *)v48 - 4);
          v55 = a4 < v53 || a4 - v53 >= v54;
          v56 = !v55;
          if (v55 && (a5 < v53 || a5 - v53 >= v54))
            goto LABEL_56;
          v58 = *(v48 - 1);
          v59 = *v48 - v58;
          v60 = v58 + *(double *)(a1 + 40);
          v61 = *(double *)(v25 + 8);
          v62 = *(double *)(v25 + 16);
          v63 = v60 + v61;
          v64 = v45 + v62;
          if (v56)
          {
            v41 = v60 + v61;
            v40 = v45 + v62;
            v43 = v59;
            v42 = v98;
          }
          v55 = a5 >= v53;
          v65 = a5 - v53;
          if (!v55 || v65 >= v54)
          {
LABEL_56:
            v63 = v52;
            v64 = v51;
            v59 = v50;
          }
          else
          {
            v49 = v98;
          }
          v48 += 8;
          v50 = v59;
          v51 = v64;
          v52 = v63;
          --v47;
        }
        while (v47);
      }
      else
      {
        v63 = CGRectNull.origin.x;
        v64 = v40;
        v59 = v43;
        v49 = v42;
      }
      r2 = v49;
      v67 = *(_QWORD *)(a1 + 24);
      v103.origin.x = v41;
      v103.origin.y = v40;
      v103.size.width = v43;
      v103.size.height = v42;
      IsEmpty = CGRectIsEmpty(v103);
      v69 = v95 + -1.0;
      if ((v67 & 0x1000) == 0)
        v69 = -0.0;
      v70 = r2;
      v71 = v93 + v69;
      if (IsEmpty)
      {
        v41 = v71;
        v40 = v45;
        v43 = 1.0;
        v42 = v98;
      }
      v72 = v63;
      v73 = v64;
      v74 = v59;
      if (CGRectIsEmpty(*(CGRect *)(&v70 - 3)))
      {
        v75 = v95 + -1.0;
        if ((v67 & 0x1000) != 0)
          v75 = -0.0;
        v63 = v93 + v75;
        v59 = 1.0;
        v64 = v45;
        v76 = v98;
      }
      else
      {
        v76 = r2;
      }
      v104.origin.x = v41;
      v104.origin.y = v40;
      v104.size.width = v43;
      v104.size.height = v42;
      v77 = v63;
      v78 = v64;
      v79 = v59;
      v105 = CGRectUnion(v104, *(CGRect *)(&v76 - 3));
      v98 = v105.size.height;
      v23 = v105.origin.x;
      v21 = v105.origin.y;
      v24 = v105.size.width;
    }
  }
  else
  {
    v23 = sub_10013F8F8(a1, a2, 0, 1, 0);
    v24 = 0.0;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v80 = (double *)sub_100134CDC((uint64_t)(a9 + 2), 1uLL);
  v81 = (char *)*a9;
  v82 = (char *)a9[1];
  v84 = &v80[4 * v83];
  *v80 = v23;
  v80[1] = v21;
  v80[2] = v24;
  v80[3] = v98;
  v85 = (char *)(v80 + 4);
  if (v82 != v81)
  {
    v86 = v80;
    do
    {
      v87 = *((_OWORD *)v82 - 1);
      v80 = v86 - 4;
      *((_OWORD *)v86 - 2) = *((_OWORD *)v82 - 2);
      *((_OWORD *)v86 - 1) = v87;
      v82 -= 32;
      v86 -= 4;
    }
    while (v82 != v81);
  }
  *a9 = v80;
  a9[1] = v85;
  a9[2] = v84;
  if (v81)
    operator delete(v81);
  a9[1] = v85;
  if (v96)
  {
    if (a4 <= a5)
      v88 = a5;
    else
      v88 = a4;
    if (a4 >= a5)
      v89 = a5;
    else
      v89 = a4;
    v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](NSValue, "valueWithRange:", v89, v88 - v89));
    objc_msgSend(v96, "addObject:", v90);

  }
}

void sub_1001421C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_100142244(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100142274(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1001422A4()
{
  if (qword_101414E78 != -1)
    dispatch_once(&qword_101414E78, &stru_10123AF28);
  return qword_101414E70;
}

void sub_1001422E4(id a1)
{
  CGColorSpace *v1;

  v1 = (CGColorSpace *)sub_100011A10();
  qword_101414E70 = (uint64_t)CGBitmapContextCreate(0, 1uLL, 1uLL, 8uLL, 4uLL, v1, 5u);
}

double sub_100142320(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  CGFloat height;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v14;
  CFArrayRef (__cdecl **v15)(CTFontDescriptorRef, CFSetRef);
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  const __CTLine *v23;
  CFArrayRef GlyphRuns;
  void *v25;
  id v26;
  id v27;
  unint64_t v28;
  void *v29;
  const __CTRun *v30;
  CFIndex GlyphCount;
  uint64_t v32;
  double v33;
  double v34;
  CFIndex i;
  unint64_t v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat width;
  CGFloat v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  CGFloat v44;
  double v45;
  uint64_t **v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  CGFloat d;
  const __CTLine *v53;
  CFArrayRef v54;
  id v55;
  uint64_t v56;
  const __CTRun *v57;
  CFIndex v58;
  char Status;
  const __CFDictionary *Attributes;
  const __CTFont *Value;
  CFIndex v62;
  unsigned int v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  unsigned int v69;
  NSObject *v70;
  void *v71;
  void *v72;
  void *v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  CFIndex v78;
  id v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  BOOL v83;
  _QWORD *v84;
  uint64_t **v85;
  void *v86;
  void *v87;
  unsigned int v88;
  NSObject *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t **v93;
  __int128 v94;
  void *v95;
  unint64_t v98;
  CGFloat r1;
  CGFloat y;
  double x;
  void *obj;
  uint64_t v103;
  id v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t **v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  CGFloat leading;
  CGAffineTransform v117;
  CGAffineTransform v118;
  CGAffineTransform v119;
  CGPoint v120;
  CGGlyph *glyphs;
  CGGlyph *v122;
  CFIndex *buffer;
  CFIndex *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[128];
  CGAffineTransform v130;
  char v131;
  CGAffineTransform v132;
  _BYTE v133[128];
  CFRange v134;
  CFRange v135;
  CFRange v136;
  CFRange v137;
  CFRange v138;
  CFRange v139;
  CFRange v140;
  CGRect v141;
  CGRect v142;
  CGRect ImageBounds;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;

  v104 = a4;
  y = CGRectNull.origin.y;
  x = CGRectNull.origin.x;
  height = CGRectNull.size.height;
  r1 = CGRectNull.size.width;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 320), 0xFFFFFFFFFFFFFFFFLL);
  if (!*(_QWORD *)(a1 + 312))
  {
    v111 = (uint64_t **)(a1 + 296);
    v14 = *(_QWORD *)(a1 + 272);
    v103 = *(_QWORD *)(a1 + 280);
    if (v14 != v103)
    {
      v15 = &CTFontDescriptorCreateMatchingFontDescriptors_ptr;
      do
      {
        v17 = *(_QWORD *)(v14 + 24);
        v16 = *(_QWORD *)(v14 + 32);
        if (!*(_QWORD *)(a1 + 208))
        {
          v18 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_10123AF48);
          v19 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v130.a) = 67110146;
            HIDWORD(v130.a) = v18;
            LOWORD(v130.b) = 2082;
            *(_QWORD *)((char *)&v130.b + 2) = "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const";
            WORD1(v130.c) = 2082;
            *(_QWORD *)((char *)&v130.c + 4) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
            WORD2(v130.d) = 1024;
            *(_DWORD *)((char *)&v130.d + 6) = 877;
            WORD1(v130.tx) = 2082;
            *(_QWORD *)((char *)&v130.tx + 4) = "_textSource";
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)&v130, 0x2Cu);
          }
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_10123AF68);
          v20 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
          {
            v47 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
            LODWORD(v130.a) = 67109378;
            HIDWORD(v130.a) = v18;
            LOWORD(v130.b) = 2114;
            *(_QWORD *)((char *)&v130.b + 2) = v47;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v130, 0x12u);

          }
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15[444], "stringWithUTF8String:", "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15[444], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v21, v22, 877, 0, "invalid nil value for '%{public}s'", "_textSource");

        }
        if (v16)
        {
          v23 = (const __CTLine *)sub_10019FA78(v14);
          GlyphRuns = CTLineGetGlyphRuns(v23);
          v25 = (void *)objc_claimAutoreleasedReturnValue(GlyphRuns);
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v26 = v25;
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v125, v133, 16);
          if (v27)
          {
            v105 = v26;
            v107 = *(_QWORD *)v126;
            v28 = v16 + v17;
            do
            {
              v29 = 0;
              v109 = v27;
              do
              {
                if (*(_QWORD *)v126 != v107)
                  objc_enumerationMutation(v26);
                v30 = *(const __CTRun **)(*((_QWORD *)&v125 + 1) + 8 * (_QWORD)v29);
                GlyphCount = CTRunGetGlyphCount(v30);
                sub_10002B980(&buffer, GlyphCount);
                v134.location = 0;
                v134.length = GlyphCount;
                CTRunGetStringIndices(v30, v134, buffer);
                sub_100133FC0(&glyphs, GlyphCount);
                v135.location = 0;
                v135.length = GlyphCount;
                CTRunGetGlyphs(v30, v135, glyphs);
                v136.location = 0;
                v136.length = 1;
                CTRunGetPositions(v30, v136, &v120);
                objc_msgSend(*(id *)(a1 + 208), "charIndexMappedToStorage:", v17);
                v33 = sub_10013E7BC(a1, v32, v104);
                if (GlyphCount >= 1)
                {
                  v34 = v33;
                  for (i = 0; i != GlyphCount; ++i)
                  {
                    v36 = buffer[i] - *(_QWORD *)(v14 + 40);
                    if (v36 < v28 && (__int16)glyphs[i] != -1)
                    {
                      if (qword_101414E78 != -1)
                        dispatch_once(&qword_101414E78, &stru_10123AF28);
                      v140.location = i;
                      v140.length = 1;
                      ImageBounds = CTRunGetImageBounds(v30, (CGContextRef)qword_101414E70, v140);
                      v37 = ImageBounds.origin.x;
                      v38 = ImageBounds.origin.y;
                      width = ImageBounds.size.width;
                      v40 = ImageBounds.size.height;
                      memset(&v130, 0, sizeof(v130));
                      CGAffineTransformMakeTranslation(&v130, *(double *)(a1 + 40) + *(double *)(v14 + 8), v34 + *(double *)(v14 + 16));
                      v119 = v130;
                      CGAffineTransformRotate(&v132, &v119, -1.57079633);
                      v130 = v132;
                      v118 = v132;
                      CGAffineTransformScale(&v132, &v118, 1.0, -1.0);
                      v130 = v132;
                      v117 = v132;
                      v144.origin.x = v37;
                      v144.origin.y = v38;
                      v144.size.width = width;
                      v144.size.height = v40;
                      v145 = CGRectApplyAffineTransform(v144, &v117);
                      v41 = v145.origin.x;
                      v42 = v145.origin.y;
                      v43 = v145.size.width;
                      v44 = v145.size.height;
                      v45 = v120.x;
                      *(_QWORD *)&leading = objc_msgSend(*(id *)(a1 + 208), "charIndexMappedToStorage:", v36 + v17);
                      *(_QWORD *)&v132.a = &leading;
                      v46 = sub_10014A6E4(v111, (unint64_t *)&leading, (uint64_t)&unk_100EEC1A0, &v132);
                      *((CGFloat *)v46 + 5) = v41;
                      *((double *)v46 + 6) = v42 - v45;
                      *((CGFloat *)v46 + 7) = v43;
                      *((CGFloat *)v46 + 8) = v44;
                    }
                  }
                }
                if (glyphs)
                {
                  v122 = glyphs;
                  operator delete(glyphs);
                }
                v26 = v105;
                if (buffer)
                {
                  v124 = buffer;
                  operator delete(buffer);
                }
                v29 = (char *)v29 + 1;
              }
              while (v29 != v109);
              v27 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v125, v133, 16);
            }
            while (v27);
          }

          v15 = &CTFontDescriptorCreateMatchingFontDescriptors_ptr;
        }
        v14 += 104;
      }
      while (v14 != v103);
    }
    if (*(_QWORD *)(a1 + 224) != *(_QWORD *)(a1 + 216))
    {
      if (qword_101414E78 != -1)
        dispatch_once(&qword_101414E78, &stru_10123AF28);
      CGContextSetTextPosition((CGContextRef)qword_101414E70, 0.0, 0.0);
      v48 = *(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216);
      if (v48)
      {
        v49 = 0;
        v50 = v48 / 104;
        v51 = (_QWORD *)(a1 + 304);
        if (v50 <= 1)
          v50 = 1;
        v98 = v50;
        do
        {
          sub_10019F9CC(&v130, *(_QWORD *)(a1 + 216) + 104 * v49);
          if ((v131 & 2) == 0)
          {
            d = v130.d;
            if (!v49 && (*(_BYTE *)(a1 + 24) & 1) != 0)
            {
              *(_QWORD *)&v132.a = a1;
              v93 = sub_10014A6E4(v111, (unint64_t *)a1, (uint64_t)&unk_100EEC1A0, &v132);
              v94 = *(_OWORD *)(a1 + 40);
              *(_OWORD *)(v93 + 7) = *(_OWORD *)(a1 + 56);
              *(_OWORD *)(v93 + 5) = v94;
            }
            else
            {
              v114 = 0u;
              v115 = 0u;
              v112 = 0u;
              v113 = 0u;
              v53 = (const __CTLine *)sub_10019FA78((uint64_t)&v130);
              v54 = CTLineGetGlyphRuns(v53);
              obj = (void *)objc_claimAutoreleasedReturnValue(v54);
              v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v129, 16);
              if (v55)
              {
                v108 = *(_QWORD *)v113;
                while (2)
                {
                  v56 = 0;
                  v106 = v55;
                  do
                  {
                    if (*(_QWORD *)v113 != v108)
                      objc_enumerationMutation(obj);
                    v57 = *(const __CTRun **)(*((_QWORD *)&v112 + 1) + 8 * v56);
                    v58 = CTRunGetGlyphCount(v57);
                    if ((unint64_t)(v58 - 1) >= 0x10000)
                    {
                      v88 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
                      if (qword_10147E370 != -1)
                        dispatch_once(&qword_10147E370, &stru_10123AF88);
                      v89 = off_1013D9070;
                      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v132.a) = 67110146;
                        HIDWORD(v132.a) = v88;
                        LOWORD(v132.b) = 2082;
                        *(_QWORD *)((char *)&v132.b + 2) = "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, C"
                                                           "RLWPColumn *__strong) const";
                        WORD1(v132.c) = 2082;
                        *(_QWORD *)((char *)&v132.c + 4) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/C"
                                                           "RLWPLineFragment.mm";
                        WORD2(v132.d) = 1024;
                        *(_DWORD *)((char *)&v132.d + 6) = 942;
                        WORD1(v132.tx) = 2048;
                        *(_QWORD *)((char *)&v132.tx + 4) = v58;
                        _os_log_error_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad glyph count: %ld", (uint8_t *)&v132, 0x2Cu);
                      }
                      if (qword_10147E370 != -1)
                        dispatch_once(&qword_10147E370, &stru_10123AFA8);
                      v90 = off_1013D9070;
                      if (os_log_type_enabled((os_log_t)v90, OS_LOG_TYPE_ERROR))
                      {
                        v95 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
                        LODWORD(v132.a) = 67109378;
                        HIDWORD(v132.a) = v88;
                        LOWORD(v132.b) = 2114;
                        *(_QWORD *)((char *)&v132.b + 2) = v95;
                        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v90, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v132, 0x12u);

                      }
                      v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const"));
                      v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
                      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v91, v92, 942, 0, "bad glyph count: %ld", v58);

                      goto LABEL_128;
                    }
                    sub_10002B980(&buffer, v58);
                    v137.location = 0;
                    v137.length = v58;
                    CTRunGetStringIndices(v57, v137, buffer);
                    sub_100133FC0(&glyphs, v58);
                    v138.location = 0;
                    v138.length = v58;
                    CTRunGetGlyphs(v57, v138, glyphs);
                    Status = CTRunGetStatus(v57);
                    if ((*(_BYTE *)(a1 + 25) & 0x20) != 0)
                    {
                      if ((Status & 4) != 0)
                      {
                        Attributes = CTRunGetAttributes(v57);
                        Value = (const __CTFont *)CFDictionaryGetValue(Attributes, kCTFontAttributeName);
                        CTFontGetVerticalTranslationsForGlyphs(Value, glyphs, (CGSize *)&v132, 1);
                      }
                      else
                      {
                        v132.a = 0.0;
                        v120.x = 0.0;
                        leading = 0.0;
                        v139.location = 0;
                        v139.length = 0;
                        CTRunGetTypographicBounds(v57, v139, &v132.a, &v120.x, &leading);
                      }
                    }
                    v62 = *(_QWORD *)&d;
                    if (!v49)
                      v62 = *buffer;
                    v110 = v56;
                    if (v62 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      v63 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
                      if (qword_10147E370 != -1)
                        dispatch_once(&qword_10147E370, &stru_10123AFC8);
                      v64 = off_1013D9070;
                      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v132.a) = 67109890;
                        HIDWORD(v132.a) = v63;
                        LOWORD(v132.b) = 2082;
                        *(_QWORD *)((char *)&v132.b + 2) = "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, C"
                                                           "RLWPColumn *__strong) const";
                        WORD1(v132.c) = 2082;
                        *(_QWORD *)((char *)&v132.c + 4) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/C"
                                                           "RLWPLineFragment.mm";
                        WORD2(v132.d) = 1024;
                        *(_DWORD *)((char *)&v132.d + 6) = 971;
                        _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad baselineCharIndex", (uint8_t *)&v132, 0x22u);
                      }
                      if (qword_10147E370 != -1)
                        dispatch_once(&qword_10147E370, &stru_10123AFE8);
                      v65 = off_1013D9070;
                      if (os_log_type_enabled((os_log_t)v65, OS_LOG_TYPE_ERROR))
                      {
                        v87 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
                        LODWORD(v132.a) = 67109378;
                        HIDWORD(v132.a) = v63;
                        LOWORD(v132.b) = 2114;
                        *(_QWORD *)((char *)&v132.b + 2) = v87;
                        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v65, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v132, 0x12u);

                      }
                      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const"));
                      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
                      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v66, v67, 971, 0, "bad baselineCharIndex");

                    }
                    v68 = 0;
                    do
                    {
                      if (!*(_QWORD *)(a1 + 208))
                      {
                        v69 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
                        if (qword_10147E370 != -1)
                          dispatch_once(&qword_10147E370, &stru_10123B008);
                        v70 = off_1013D9070;
                        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
                        {
                          LODWORD(v132.a) = 67110146;
                          HIDWORD(v132.a) = v69;
                          LOWORD(v132.b) = 2082;
                          *(_QWORD *)((char *)&v132.b + 2) = "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange,"
                                                             " CRLWPColumn *__strong) const";
                          WORD1(v132.c) = 2082;
                          *(_QWORD *)((char *)&v132.c + 4) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP"
                                                             "/CRLWPLineFragment.mm";
                          WORD2(v132.d) = 1024;
                          *(_DWORD *)((char *)&v132.d + 6) = 975;
                          WORD1(v132.tx) = 2082;
                          *(_QWORD *)((char *)&v132.tx + 4) = "_textSource";
                          _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)&v132, 0x2Cu);
                        }
                        if (qword_10147E370 != -1)
                          dispatch_once(&qword_10147E370, &stru_10123B028);
                        v71 = off_1013D9070;
                        if (os_log_type_enabled((os_log_t)v71, OS_LOG_TYPE_ERROR))
                        {
                          v86 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
                          LODWORD(v132.a) = 67109378;
                          HIDWORD(v132.a) = v69;
                          LOWORD(v132.b) = 2114;
                          *(_QWORD *)((char *)&v132.b + 2) = v86;
                          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v71, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v132, 0x12u);

                        }
                        v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGRect CRLWPLineFragment::rawGlyphRectForLineRange(NSRange, CRLWPColumn *__strong) const"));
                        v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
                        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v72, v73, 975, 0, "invalid nil value for '%{public}s'", "_textSource");

                      }
                      v75 = CGRectNull.origin.x;
                      v74 = CGRectNull.origin.y;
                      v77 = CGRectNull.size.width;
                      v76 = CGRectNull.size.height;
                      v146.origin.x = CGRectNull.origin.x;
                      v146.origin.y = v74;
                      v146.size.width = v77;
                      v146.size.height = v76;
                      if (!CGRectIsNull(v146))
                      {
                        v78 = *(_QWORD *)&d;
                        if (!v49)
                          v78 = buffer[v68];
                        v120.x = 0.0;
                        v79 = objc_msgSend(*(id *)(a1 + 208), "charIndexMappedToStorage:", v78);
                        *(_QWORD *)&v120.x = v79;
                        v80 = (_QWORD *)*v51;
                        if (*v51)
                        {
                          v81 = (_QWORD *)(a1 + 304);
                          do
                          {
                            v82 = v80[4];
                            v83 = v82 >= (unint64_t)v79;
                            if (v82 >= (unint64_t)v79)
                              v84 = v80;
                            else
                              v84 = v80 + 1;
                            if (v83)
                              v81 = v80;
                            v80 = (_QWORD *)*v84;
                          }
                          while (*v84);
                          if (v81 != v51 && (unint64_t)v79 >= v81[4])
                          {
                            *(_QWORD *)&v132.a = &v120;
                            v149 = *(CGRect *)(sub_10014A6E4(v111, (unint64_t *)&v120, (uint64_t)&unk_100EEC1A0, &v132)+ 5);
                            v147.origin.x = CGRectNull.origin.x;
                            v147.origin.y = v74;
                            v147.size.width = v77;
                            v147.size.height = v76;
                            v148 = CGRectUnion(v147, v149);
                            v75 = v148.origin.x;
                            v74 = v148.origin.y;
                            v77 = v148.size.width;
                            v76 = v148.size.height;
                          }
                        }
                        *(_QWORD *)&v132.a = &v120;
                        v85 = sub_10014A6E4(v111, (unint64_t *)&v120, (uint64_t)&unk_100EEC1A0, &v132);
                        *((CGFloat *)v85 + 5) = v75;
                        *((CGFloat *)v85 + 6) = v74;
                        *((CGFloat *)v85 + 7) = v77;
                        *((CGFloat *)v85 + 8) = v76;
                      }
                      ++v68;
                    }
                    while (v68 != v58);
                    if (glyphs)
                    {
                      v122 = glyphs;
                      operator delete(glyphs);
                    }
                    if (buffer)
                    {
                      v124 = buffer;
                      operator delete(buffer);
                    }
                    v56 = v110 + 1;
                  }
                  while ((id)(v110 + 1) != v106);
                  v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v112, v129, 16);
                  if (v55)
                    continue;
                  break;
                }
              }
LABEL_128:

            }
          }
          sub_10019FA00(&v130);
          ++v49;
        }
        while (v49 != v98);
      }
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 320));
  v6 = a2;
  if (a2 < a2 + a3)
  {
    v7 = (_QWORD *)(a1 + 304);
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        v9 = (_QWORD *)(a1 + 304);
        do
        {
          v10 = v8[4];
          v11 = v10 >= v6;
          if (v10 >= v6)
            v12 = v8;
          else
            v12 = v8 + 1;
          if (v11)
            v9 = v8;
          v8 = (_QWORD *)*v12;
        }
        while (*v12);
        if (v9 != v7 && v6 >= v9[4])
        {
          v141.origin.y = y;
          v141.origin.x = x;
          v141.size.width = r1;
          v141.size.height = height;
          v142 = CGRectUnion(v141, *(CGRect *)(v9 + 5));
          y = v142.origin.y;
          x = v142.origin.x;
          r1 = v142.size.width;
          height = v142.size.height;
        }
      }
      ++v6;
    }
    while (v6 != a2 + a3);
  }

  return x;
}

void sub_100143364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{

  _Unwind_Resume(a1);
}

void sub_100143530(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100143560(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100143590(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001435C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001435F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100143620(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100143650(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100143680(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_1001436B0(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect v13;
  CGRect v14;

  v7 = a4;
  v13.origin.x = sub_100142320(a1, a2, a3, v7);
  x = v13.origin.x;
  y = v13.origin.y;
  width = v13.size.width;
  height = v13.size.height;
  if (!CGRectIsEmpty(v13))
  {
    v14.origin.x = x;
    v14.origin.y = y;
    v14.size.width = width;
    v14.size.height = height;
    *(_QWORD *)&x = (unint64_t)CGRectInset(v14, -1.0, -1.0);
  }

  return x;
}

void sub_100143760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100143774(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  const __CTLine *v11;
  CFRange StringRange;
  id v13;
  unint64_t v14;
  const __CTLine *v15;
  CFArrayRef GlyphRuns;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  const __CTRun *v21;
  CFRange v22;
  id v23;
  unint64_t v24;
  CFDictionaryRef Attributes;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CGFloat v32;
  CGFloat leading[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  CFRange v44;

  v7 = a3;
  *(_OWORD *)(a4 + 32) = xmmword_100EED880;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)&qword_100EED890;
  *(_OWORD *)(a4 + 64) = xmmword_100EED8A0;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)&qword_100EED8B0;
  *(_OWORD *)a4 = xmmword_100EED860;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)algn_100EED870;
  v8 = *(id *)(a1 + 208);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 216);
    v10 = *(_QWORD *)(a1 + 224);
    if (v9 != v10)
    {
      while (1)
      {
        v11 = (const __CTLine *)sub_10019FA78(v9);
        StringRange = CTLineGetStringRange(v11);
        v13 = objc_msgSend(v8, "charRangeMappedToStorage:", StringRange.location, StringRange.length);
        if (a2 >= (unint64_t)v13 && a2 - (unint64_t)v13 < v14)
          break;
        v9 += 104;
        if (v9 == v10)
          goto LABEL_25;
      }
      v15 = (const __CTLine *)sub_10019FA78(v9);
      GlyphRuns = CTLineGetGlyphRuns(v15);
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v17 = (id)objc_claimAutoreleasedReturnValue(GlyphRuns);
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v40;
        while (2)
        {
          for (i = 0; i != v18; i = (char *)i + 1)
          {
            if (*(_QWORD *)v40 != v19)
              objc_enumerationMutation(v17);
            v21 = *(const __CTRun **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)i);
            v22 = CTRunGetStringRange(v21);
            v23 = objc_msgSend(v8, "charRangeMappedToStorage:", v22.location, v22.length);
            if (a2 >= (unint64_t)v23 && a2 - (unint64_t)v23 < v24)
            {
              Attributes = CTRunGetAttributes(v21);
              v27 = (void *)objc_claimAutoreleasedReturnValue(Attributes);
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", NSFontAttributeName));

              if (v28)
              {
                sub_1001B21AC((uint64_t)v28, leading);
                v29 = v36;
                *(_OWORD *)(a4 + 32) = v35;
                *(_OWORD *)(a4 + 48) = v29;
                v30 = v38;
                *(_OWORD *)(a4 + 64) = v37;
                *(_OWORD *)(a4 + 80) = v30;
                v31 = v34;
                *(_OWORD *)a4 = *(_OWORD *)leading;
                *(_OWORD *)(a4 + 16) = v31;
              }
              else
              {
                leading[0] = 0.0;
                v44.location = 0;
                v44.length = 0;
                CTRunGetTypographicBounds(v21, v44, (CGFloat *)(a4 + 16), (CGFloat *)(a4 + 32), leading);
                v32 = leading[0] * 0.5;
                *(double *)(a4 + 40) = leading[0] * 0.5;
                *(CGFloat *)(a4 + 48) = v32;
              }

              goto LABEL_24;
            }
          }
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
          if (v18)
            continue;
          break;
        }
      }
LABEL_24:

    }
  }
LABEL_25:

}

void sub_1001439D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_100143A34(uint64_t a1, uint64_t a2, NSUInteger a3, NSUInteger a4)
{
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v8;
  uint64_t v9;
  const __CTLine *v11;
  CFArrayRef GlyphRuns;
  id v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  void *i;
  const __CTRun *v18;
  NSUInteger GlyphCount;
  NSRange v20;
  id obj;
  NSRange v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  NSRange v29;
  CFRange v30;
  CGRect ImageBounds;
  CGRect v32;
  CGRect v33;

  v23.location = a3;
  v23.length = a4;
  x = CGRectNull.origin.x;
  y = CGRectNull.origin.y;
  width = CGRectNull.size.width;
  height = CGRectNull.size.height;
  v9 = *(_QWORD *)(a1 + 248);
  v8 = *(_QWORD *)(a1 + 256);
  if (v9 != v8)
  {
    while (*(_QWORD *)(v9 + 24) != a2)
    {
      v9 += 104;
      if (v9 == v8)
        return x;
    }
    v11 = (const __CTLine *)sub_10019FA78(v9);
    GlyphRuns = CTLineGetGlyphRuns(v11);
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v13 = (id)objc_claimAutoreleasedReturnValue(GlyphRuns);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v14)
    {
      v15 = 0;
      v16 = *(_QWORD *)v25;
      obj = v13;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v16)
            objc_enumerationMutation(obj);
          v18 = *(const __CTRun **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
          GlyphCount = CTRunGetGlyphCount(v18);
          v29.location = v15;
          v29.length = GlyphCount;
          v20 = NSIntersectionRange(v23, v29);
          if (v20.length)
          {
            if (qword_101414E78 != -1)
              dispatch_once(&qword_101414E78, &stru_10123AF28);
            v30.location = v20.location - v15;
            v30.length = v20.length;
            ImageBounds = CTRunGetImageBounds(v18, (CGContextRef)qword_101414E70, v30);
            v33.size.width = ImageBounds.size.width;
            v33.size.height = ImageBounds.size.height;
            v33.origin.x = ImageBounds.origin.x + *(double *)(v9 + 8) + *(double *)(a1 + 40);
            v33.origin.y = *(double *)(v9 + 16) + *(double *)(a1 + 32) - ImageBounds.origin.y - ImageBounds.size.height;
            ImageBounds.origin.x = x;
            ImageBounds.origin.y = y;
            ImageBounds.size.width = width;
            ImageBounds.size.height = height;
            v32 = CGRectUnion(ImageBounds, v33);
            x = v32.origin.x;
            y = v32.origin.y;
            width = v32.size.width;
            height = v32.size.height;
          }
          v15 += GlyphCount;
        }
        v13 = obj;
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v14);
    }

  }
  return x;
}

void sub_100143C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_100143C9C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *i;
  void *v15;
  id v16;
  double v17;
  double v18;
  double *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CGFloat v36;
  id obj;
  uint64_t v40;
  double v41;
  double v42;
  CGFloat v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  CGRect v49;
  CGRect v50;
  CGRect v51;

  x = CGRectNull.origin.x;
  y = CGRectNull.origin.y;
  width = CGRectNull.size.width;
  height = CGRectNull.size.height;
  v10 = *(id *)(a1 + 408);
  if (objc_msgSend(v10, "count"))
  {
    v12 = *(_QWORD *)(a1 + 216);
    v11 = *(_QWORD *)(a1 + 224);

    if (v11 != v12)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      obj = *(id *)(a1 + 408);
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
      if (v13)
      {
        v40 = *(_QWORD *)v45;
        do
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(_QWORD *)v45 != v40)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v15, "type") == 4)
            {
              v16 = objc_msgSend(v15, "positionCount");
              if (v16 == objc_msgSend(v15, "charIndexCount"))
              {
                objc_msgSend(v15, "textPosition");
                v41 = v18;
                v42 = v17;
                v19 = (double *)objc_msgSend(v15, "positions");
                v20 = objc_msgSend(v15, "charIndexes");
                v21 = objc_msgSend(v15, "positionCount");
                if (v21)
                {
                  v22 = 0;
                  v23 = 1;
                  do
                  {
                    v24 = v20[v22];
                    v26 = v24 >= a2;
                    v25 = v24 - a2;
                    v26 = !v26 || v25 >= a3;
                    if (!v26)
                    {
                      v43 = height;
                      v27 = width;
                      v28 = y;
                      v29 = x;
                      v31 = *(double *)(a1 + 32);
                      v30 = *(double *)(a1 + 40);
                      v32 = *(double *)(*(_QWORD *)(a1 + 216) + 8);
                      v33 = v19[2 * v22];
                      objc_msgSend(v15, "ascent");
                      v35 = v34;
                      objc_msgSend(v15, "advance");
                      v51.size.width = v36;
                      v49.size.height = v43;
                      v51.origin.x = v33 + v42 + v30 + v32;
                      v51.origin.y = v41 + v31 - v35;
                      v49.origin.x = v29;
                      v49.origin.y = v28;
                      v49.size.width = v27;
                      v51.size.height = v35;
                      v50 = CGRectUnion(v49, v51);
                      x = v50.origin.x;
                      y = v50.origin.y;
                      width = v50.size.width;
                      height = v50.size.height;
                    }
                    v22 = v23;
                  }
                  while ((unint64_t)v21 > v23++);
                }
              }
            }
          }
          v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
        }
        while (v13);
      }

    }
  }
  else
  {

  }
  return x;
}

void sub_100143F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100143F64(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  if ((*(_BYTE *)(a1 + 24) & 0x80) != 0 || *(_QWORD *)(a1 + 256) != *(_QWORD *)(a1 + 248))
    return 1;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v3 = *(id *)(a1 + 408);
  v1 = (uint64_t)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v1)
  {
    v4 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v1; ++i)
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v3);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * i), "type", (_QWORD)v6) == 4)
        {
          v1 = 1;
          goto LABEL_15;
        }
      }
      v1 = (uint64_t)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v1)
        continue;
      break;
    }
  }
LABEL_15:

  return v1;
}

void sub_10014407C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_10014409C(uint64_t a1)
{
  double x;
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  double v25;
  double v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  x = CGRectNull.origin.x;
  v3 = *(id *)(a1 + 200);
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "size");
    v6 = v5;
    v8 = v7;
    v9 = (char *)objc_msgSend(v4, "labelType");
    objc_msgSend(v4, "height");
    v11 = v10;
    objc_msgSend(v4, "width");
    if ((unint64_t)(v9 - 2) < 2)
      goto LABEL_5;
    if (v9 != (char *)1)
      goto LABEL_9;
    if ((*(_BYTE *)(a1 + 25) & 0x20) != 0)
    {
      objc_msgSend(v4, "width");
      v11 = v24;
      objc_msgSend(v4, "height");
      v26 = v25;
      v13 = v6;
    }
    else
    {
LABEL_5:
      v26 = v12;
      v13 = v8;
      v8 = v6;
    }
    v14 = *(double *)(a1 + 120);
    v15 = *(double *)(a1 + 136);
    v16 = *(double *)(a1 + 104);
    objc_msgSend(v4, "baselineOffset");
    v18 = v17;
    objc_msgSend(v4, "labelIndent");
    v20 = v19;
    if (objc_msgSend(v4, "isLabelRTL"))
    {
      v21 = *(double *)(a1 + 56);
      objc_msgSend(v4, "labelIndent");
      v20 = v21 - v22 - v26;
    }
    v27.origin.y = v16 + (v14 + v15 - v11) * 0.5;
    v27.origin.x = v20;
    v27.size.width = v8;
    v27.size.height = v13;
    v28 = CGRectOffset(v27, 0.0, *(CGFloat *)(a1 + 144));
    v29 = CGRectOffset(v28, 0.0, -v18);
    *(_QWORD *)&x = (unint64_t)CGRectOffset(v29, *(CGFloat *)(a1 + 40), *(CGFloat *)(a1 + 48));
  }
LABEL_9:

  return x;
}

void sub_10014422C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_100144258(uint64_t a1)
{
  double x;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  _OWORD v14[6];

  x = CGPointZero.x;
  v3 = *(id *)(a1 + 200);
  v4 = v3;
  if (v3)
  {
    if (((unint64_t)objc_msgSend(v3, "labelType") & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      x = sub_10014409C(a1);
      if ((*(_BYTE *)(a1 + 25) & 0x20) != 0)
      {
        if (objc_msgSend(v4, "isLabelTateChuYoko"))
        {
          *(_QWORD *)&v14[0] = 0;
          CTLineGetTypographicBounds((CTLineRef)objc_msgSend(v4, "textLine"), (CGFloat *)v14, 0, 0);
          v9 = *(double *)v14;
          objc_msgSend(v4, "baselineOffset");
          x = x + v9;
        }
        else
        {
          objc_msgSend(v4, "baselineOffset");
        }
      }
      else
      {
        v5 = objc_msgSend(v4, "labelFont");
        if (v5)
        {
          if (objc_msgSend(v4, "labelType") == (id)2)
          {
            memset(v14, 0, sizeof(v14));
            sub_1001B21AC((uint64_t)v5, v14);
          }
          objc_msgSend(v4, "baselineOffset");
        }
        else if (CTLineGetGlyphCount((CTLineRef)objc_msgSend(v4, "textLine")))
        {
          +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_10123B048);
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
            sub_100DFE814();
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_10123B068);
          v10 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
          {
            objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
            sub_100DE7E60();
          }

          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGPoint CRLWPLineFragment::labelTextPosition() const"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 1266, 0, "No label font but we need to render something");

        }
      }
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B088);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFE894();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B0A8);
      v6 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGPoint CRLWPLineFragment::labelTextPosition() const"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 1288, 0, "Text position only applies to text and numbers.");

    }
  }

  return x;
}

void sub_100144658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001446D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100144704(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100144734(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100144764(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_100144794(unint64_t *a1, char a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  CGFloat v19;
  const __CTLine *v20;
  void *__p[3];
  CGRect v23;
  CGRect v24;

  v4 = a1[1] + *a1 + ((uint64_t)(a1[3] << 52) >> 63);
  if (*a1 <= v4)
    v5 = a1[1] + *a1 + ((uint64_t)(a1[3] << 52) >> 63);
  else
    v5 = *a1;
  if (*a1 >= v4)
    v6 = a1[1] + *a1 + ((uint64_t)(a1[3] << 52) >> 63);
  else
    v6 = *a1;
  sub_10013E9D0(a1, v6, v5 - v6, a2, 1, 1, 0, (char **)__p);
  sub_1001B29B0((CGRect **)__p);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((a1[3] & 2) != 0)
  {
    v15 = a1[27];
    v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[28] - v15) >> 3);
    if (v16 >= 2)
    {
      v17 = v15 + 104;
      v18 = v16 - 1;
      while ((*(_BYTE *)(v17 + 96) & 2) == 0)
      {
        v17 += 104;
        if (!--v18)
          return v8;
      }
      v19 = *(double *)(v17 + 8);
      v20 = (const __CTLine *)sub_10019FA78(v17);
      v24.size.width = CTLineGetTypographicBounds(v20, 0, 0, 0);
      v23.origin.x = v8;
      v23.origin.y = v10;
      v23.size.width = v12;
      v23.size.height = v14;
      v24.origin.x = v19;
      v24.origin.y = v10;
      v24.size.height = v14;
      *(_QWORD *)&v8 = (unint64_t)CGRectUnion(v23, v24);
    }
  }
  return v8;
}

void sub_1001448E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001448FC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 24) >> 1) & 1;
}

double sub_100144908(uint64_t a1)
{
  uint64_t v2;
  const __CTLine *v3;

  v2 = *(_QWORD *)(a1 + 216);
  v3 = (const __CTLine *)sub_10019FA78(v2);
  CTLineGetTypographicBounds(v3, 0, 0, 0);
  return *(double *)(a1 + 40) + *(double *)(v2 + 8);
}

uint64_t sub_100144974(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)sub_100140E90(a1);
  v3 = *v2;
  if (*v2 == v2[1])
    v3 = a1;
  return *(_QWORD *)v3;
}

uint64_t sub_1001449A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)sub_100140E90(a1);
  v3 = v2[1];
  if (*v2 == v3)
    v4 = a1;
  else
    v4 = v3 - 64;
  return *(_QWORD *)v4;
}

uint64_t sub_1001449D8(uint64_t a1, BOOL *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_100140E90(a1);
  v5 = *(uint64_t **)v4;
  if (*(_QWORD *)v4 == *(_QWORD *)(v4 + 8))
    v5 = (uint64_t *)a1;
  v6 = *v5;
  *a2 = 1;
  if (*(_QWORD *)(a1 + 8))
    *a2 = sub_100144A40((__int128 *)a1, v6) == 0;
  return v6;
}

uint64_t sub_100144A40(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  const __CTLine *v20;
  CFArrayRef GlyphRuns;
  void *v22;
  uint64_t v23;
  void *i;
  const __CTRun *v25;
  CFRange StringRange;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v2 = *((_QWORD *)a1 + 3);
  if ((v2 & 1) != 0)
    return 0;
  v5 = &xmmword_100EEE418;
  if (v2 >= 0)
    v5 = a1;
  v6 = *(_QWORD *)v5 + *((_QWORD *)v5 + 1);
  if (v6 == a2 || (v2 & 0x800) != 0 && v6 - 1 == a2)
    return ((unint64_t)v2 >> 12) & 1;
  v8 = (void *)*((_QWORD *)a1 + 26);
  if (!v8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B508);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE9B4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B528);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPWritingDirection CRLWPLineFragment::writingDirectionForCharIndex(CRLWPCharIndex) const"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 2488, 0, "invalid nil value for '%{public}s'", "_textSource");

    v8 = (void *)*((_QWORD *)a1 + 26);
  }
  v12 = (char *)objc_msgSend(v8, "charIndexMappedFromStorage:", a2);
  v13 = *((_QWORD *)a1 + 27);
  v14 = *((_QWORD *)a1 + 28);
  if (v14 == v13 && v12 == (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B548);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFE914(a2, v15);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B568);
    v16 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPWritingDirection CRLWPLineFragment::writingDirectionForCharIndex(CRLWPCharIndex) const"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 2492, 0, "bad character index: %d", a2);

    return 0;
  }
  v7 = 0;
  if (v14 != v13 && v12 != (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v20 = (const __CTLine *)sub_10019FA78(v13);
    GlyphRuns = CTLineGetGlyphRuns(v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue(GlyphRuns);
    v7 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v7)
    {
      v23 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v23)
            objc_enumerationMutation(v22);
          v25 = *(const __CTRun **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
          StringRange = CTRunGetStringRange(v25);
          if ((unint64_t)v12 >= StringRange.location
            && (unint64_t)&v12[-StringRange.location] < StringRange.length)
          {
            v7 = (id)(CTRunGetStatus(v25) & 1);
            goto LABEL_45;
          }
        }
        v7 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      }
      while (v7);
    }
LABEL_45:

  }
  return (uint64_t)v7;
}

void sub_100144E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100144E94(uint64_t a1, _BYTE *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = (_QWORD *)sub_100140E90(a1);
  v5 = v4[1];
  if (*v4 == v5)
    v6 = (uint64_t *)a1;
  else
    v6 = (uint64_t *)(v5 - 64);
  v7 = *v6;
  *a2 = 1;
  if (*(_QWORD *)(a1 + 8))
    *a2 = sub_100144A40((__int128 *)a1, v7);
  return v7;
}

void sub_100144EF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100144F28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100144F58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100144F88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100144FB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100144FE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CFIndex sub_100145018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const __CTLine *v3;

  v2 = a1 + 216;
  v1 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(v2 + 8) == v1)
    return 0;
  v3 = (const __CTLine *)sub_10019FA78(v1);
  return CTLineGetGlyphCount(v3);
}

double sub_100145044(uint64_t a1, unint64_t a2, int a3)
{
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  const __CTLine *v13;
  CFArrayRef GlyphRuns;
  void *v15;
  id v16;
  char *v17;
  uint64_t v18;
  void *i;
  const __CTRun *v20;
  CFIndex GlyphCount;
  CFIndex v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double v42;
  CFIndex *buffer[4];
  _BYTE v44[128];
  CFRange v45;

  v42 = 0.0;
  v6 = sub_10013F8F8(a1, a2, 0, 0, &v42);
  v7 = *(void **)(a1 + 208);
  if (!v7)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B188);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFEAC8();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B1A8);
      v8 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL) const"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 1618, 0, "Unexpected nil _textSource");

      v7 = *(void **)(a1 + 208);
    }
  }
  v11 = (char *)objc_msgSend(v7, "charIndexMappedFromStorage:", a2);
  v12 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(a1 + 224) != v12)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v13 = (const __CTLine *)sub_10019FA78(v12);
    GlyphRuns = CTLineGetGlyphRuns(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(GlyphRuns);
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
    if (v16)
    {
      v17 = &v11[-((v11 != 0) & ~a3)];
      v18 = *(_QWORD *)v39;
      while (2)
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v39 != v18)
            objc_enumerationMutation(v15);
          v20 = *(const __CTRun **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
          GlyphCount = CTRunGetGlyphCount(v20);
          if ((unint64_t)(GlyphCount - 1) >= 0x10000)
          {
            +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
            if (qword_10147E370 != -1)
              dispatch_once(&qword_10147E370, &stru_10123B1C8);
            if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
              sub_100DFEA40();
            if (qword_10147E370 != -1)
              dispatch_once(&qword_10147E370, &stru_10123B1E8);
            v34 = off_1013D9070;
            if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
            {
              objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
              sub_100DE7E60();
            }

            v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLWPLineFragment::wpOffsetForCharIndex(CRLWPCharIndex, BOOL) const"));
            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
            +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v35, v36, 1634, 0, "bad glyph count: %ld", GlyphCount);

            goto LABEL_48;
          }
          sub_10002B980(buffer, GlyphCount);
          v45.location = 0;
          v45.length = GlyphCount;
          CTRunGetStringIndices(v20, v45, buffer[0]);
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = buffer[0][v22];
            v27 = v26 == (_QWORD)v17;
            v28 = v26 > (unint64_t)v17;
            v29 = v26 == (_QWORD)v17;
            v30 = !v28;
            v31 = v28;
            v32 = v31 | v24;
            v33 = v30 | v23;
            v25 |= v29;
            if (!v27)
            {
              v24 = v32;
              v23 = v33;
            }
            ++v22;
          }
          while (v22 < GlyphCount && (v25 & (v24 | v23) & 1) == 0);
          if (((v25 | v24 & v23) & 1) != 0
            && ((CTRunGetStatus(v20) & 1) == 0) == (*(_BYTE *)(a1 + 25) & 0x10) >> 4)
          {
            v6 = v42;
          }
          if (buffer[0])
          {
            buffer[1] = buffer[0];
            operator delete(buffer[0]);
          }
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
        if (v16)
          continue;
        break;
      }
    }
LABEL_48:

  }
  return v6;
}

void sub_1001454CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100145550(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100145580(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001455B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001455E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100145610(unint64_t *a1, unint64_t a2, BOOL *a3)
{
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  const __CTLine *v20;
  CFArrayRef GlyphRuns;
  void *v22;
  id v23;
  uint64_t v24;
  void *i;
  const __CTRun *v26;
  CFRange StringRange;
  const __CFDictionary *Attributes;
  void *Value;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  v7 = a1[27];
  v6 = a1[28];
  if (v6 == v7)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B208);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFEB48();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B228);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CTFontRef CRLWPLineFragment::fontAtCharIndex(CRLWPCharIndex, BOOL &) const"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 1667, 0, "No line refs");

    v7 = a1[27];
    v6 = a1[28];
  }
  if (v6 == v7)
    return 0;
  v11 = *a1;
  v12 = a1[3];
  v13 = v12 < 0;
  if (v12 < 0)
    v14 = &xmmword_100EEE418;
  else
    v14 = (__int128 *)a1;
  v15 = *((_QWORD *)v14 + 1);
  v16 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v13)
    v16 = *a1;
  v17 = v16 + v15;
  if (v11 <= a2)
    v11 = a2;
  if (v17 >= v11)
    v18 = v11;
  else
    v18 = v17;
  v19 = (char *)objc_msgSend((id)a1[26], "charIndexMappedFromStorage:", v18);
  *a3 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v20 = (const __CTLine *)sub_10019FA78(a1[27]);
  GlyphRuns = CTLineGetGlyphRuns(v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(GlyphRuns);
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v23)
  {
    v24 = *(_QWORD *)v33;
    while (2)
    {
      for (i = 0; i != v23; i = (char *)i + 1)
      {
        if (*(_QWORD *)v33 != v24)
          objc_enumerationMutation(v22);
        v26 = *(const __CTRun **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
        StringRange = CTRunGetStringRange(v26);
        if ((unint64_t)v19 >= StringRange.location
          && (unint64_t)&v19[-StringRange.location] < StringRange.length)
        {
          Attributes = CTRunGetAttributes(v26);
          Value = (void *)CFDictionaryGetValue(Attributes, CFSTR("CRLWPUnadjustedFont"));
          v23 = Value;
          if (!Value)
            v23 = (id)CFDictionaryGetValue(Attributes, kCTFontAttributeName);
          *a3 = (CTRunGetStatus(v26) & 4) != 0;
          goto LABEL_38;
        }
      }
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v23)
        continue;
      break;
    }
  }
LABEL_38:

  return v23;
}

void sub_100145908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100145944(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100145974(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001459A4(uint64_t a1, unint64_t a2, BOOL a3, int a4, char a5)
{
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double MaxX;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  __int128 *v33;
  _BOOL4 v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  BOOL v40;

  v40 = a3;
  if (*(uint64_t *)(a1 + 24) < 0)
    v5 = &xmmword_100EEE418;
  else
    v5 = (__int128 *)a1;
  v8 = v5;
  v6 = *(_QWORD *)v5;
  v7 = *((_QWORD *)v8 + 1);
  v9 = a2 - v6 < v7 && a2 >= v6;
  v10 = v6 + v7;
  if (v9 || v10 == a2)
  {
    v15 = sub_100145D70(a1, a2, &v40, a4);
    v16 = *(_QWORD *)(a1 + 216);
    if (*(_QWORD *)(a1 + 224) == v16)
    {
      v27 = 0.0;
      if ((a5 & 1) != 0)
        return;
      goto LABEL_29;
    }
    v17 = v15;
    v18 = (uint64_t *)sub_100140E90(a1);
    v20 = *v18;
    v19 = v18[1];
    if (v19 == *v18)
    {
      v29 = *(_QWORD *)(a1 + 24);
      if ((v29 & 1) == 0)
      {
        v30 = *(double *)(v16 + 8);
        if ((v29 & 0x800) != 0)
        {
          v31 = -7.0;
          if ((v29 & 0x1000) == 0)
            v31 = 7.0;
          v32 = v31 + v30;
          if (!v40)
            v30 = v32;
        }
LABEL_49:
        v27 = v30 + *(double *)(a1 + 40);
        if ((a5 & 1) != 0)
          return;
LABEL_29:
        MaxX = CGRectGetMaxX(*(CGRect *)(a1 + 40));
        fmax(fmin(v27, MaxX), CGRectGetMinX(*(CGRect *)(a1 + 40)));
        return;
      }
      if (v40)
      {
        if (v29 < 0)
          v33 = &xmmword_100EEE418;
        else
          v33 = (__int128 *)a1;
        v34 = *(_QWORD *)v33 == a2;
      }
      else
      {
        v34 = 0;
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 400), "geometry"));
      objc_msgSend(v35, "frame");
      v37 = v36;
      v39 = v38;

      v22 = *(double *)(v16 + 8);
      v23 = 0.0;
      if (v34 == ((v29 >> 12) & 1))
      {
        if ((*(_BYTE *)(a1 + 25) & 0x20) != 0)
          v23 = v39;
        else
          v23 = v37;
      }
    }
    else
    {
      v21 = (v19 - *v18) >> 6;
      if (v17 < v21 && *(_BYTE *)(v20 + (v17 << 6) + 48) != v40)
        ++v17;
      if (v17 == v21)
      {
        v22 = *(double *)(v16 + 8);
        v23 = *(double *)(v19 - 24);
      }
      else
      {
        v22 = *(double *)(v20 + (v17 << 6) + 32);
        v23 = *(double *)(v16 + 8);
      }
    }
    v30 = v22 + v23;
    goto LABEL_49;
  }
  +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10123B248);
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DFEBC8();
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10123B268);
  v24 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
  {
    objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
    sub_100DE7E60();
  }

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLWPLineFragment::wpOffsetForInsertionPoint(CRLWPCharIndex, BOOL, BOOL, BOOL) const"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v25, v26, 1700, 0, "invalid charIndex for line fragment");

}

void sub_100145CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100145D10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100145D40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100145D70(uint64_t a1, unint64_t a2, BOOL *a3, int a4)
{
  unint64_t v8;
  __int128 *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  char *v16;
  _BOOL4 v17;
  BOOL v18;
  int v21;
  int v22;
  _BOOL4 v23;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v31;

  if (objc_msgSend(*(id *)(a1 + 208), "length"))
  {
    v8 = *(_QWORD *)(a1 + 24) & 0x1000;
    if (*(uint64_t *)(a1 + 24) < 0)
      v9 = &xmmword_100EEE418;
    else
      v9 = (__int128 *)a1;
    v10 = (char *)objc_msgSend(*(id *)(a1 + 208), "charRangeRemappedFromStorage:", *(_QWORD *)v9, *((_QWORD *)v9 + 1));
    v11 = v10;
    v13 = v12;
    if ((a4 & 1) != 0 || (unint64_t)v10 >= a2)
    {
      v15 = sub_1001B2A58();
    }
    else
    {
      v14 = sub_1001AEAA8(a2, *(void **)(a1 + 208));
      v15 = sub_100144A40((__int128 *)a1, v14) != 0;
    }
    v16 = &v11[v13];
    v17 = *a3;
    if (v13)
      v18 = v16 == (char *)a2;
    else
      v18 = 0;
    if (v18 && v17)
    {
      if (!a4)
      {
        a2 = sub_1001AEAA8(a2, *(void **)(a1 + 208));
        v29 = sub_100144A40((__int128 *)a1, a2);
        if (v29 != (v8 >> 12) && v29 == v15)
        {
          *a3 = 0;
          return sub_100145F64(a1, a2);
        }
      }
LABEL_34:
      if (!v8)
      {
LABEL_35:
        v28 = sub_100144E94(a1, a3);
LABEL_43:
        a2 = v28;
        return sub_100145F64(a1, a2);
      }
LABEL_42:
      v28 = sub_1001449D8(a1, a3);
      goto LABEL_43;
    }
    if ((unint64_t)v11 > a2 && !v17)
    {
LABEL_41:
      if (v8)
        goto LABEL_35;
      goto LABEL_42;
    }
    if ((a4 & 1) == 0)
    {
      v21 = sub_100144A40((__int128 *)a1, a2);
      v22 = v21;
      v23 = *a3;
      if (v11 != (char *)a2 || !v23)
      {
        if (v16 - 1 == (char *)a2 && !v23)
        {
          if (v21 != (v8 >> 12) && v21 != v15)
            goto LABEL_34;
        }
        else
        {
          v26 = *(void **)(a1 + 208);
          if (*a3)
            v27 = sub_1001AEAA8(a2, v26);
          else
            v27 = sub_1001AF294(a2, v26);
          v31 = v27;
          if (v22 != sub_100144A40((__int128 *)a1, v27) && v22 != v15)
          {
            *a3 ^= 1u;
            a2 = v31;
          }
        }
      }
      else if (v21 != (v8 >> 12) && v21 != v15)
      {
        goto LABEL_41;
      }
    }
  }
  return sub_100145F64(a1, a2);
}

uint64_t sub_100145F64(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *i;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;

  v4 = (uint64_t *)sub_100140E90(a1);
  v5 = v4;
  if ((*(_BYTE *)(a1 + 25) & 0x10) != 0)
  {
    result = 0;
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = *v4;
    v7 = v4[1];
    if (*v4 == v7)
      return 0;
    result = ((v7 - v6) >> 6) - 1;
  }
  v9 = v7 - v6;
  if (v9)
  {
    v10 = 0;
    v11 = v9 >> 6;
    if (v11 <= 1)
      v11 = 1;
    for (i = (unint64_t *)(v6 + 8); ; i += 8)
    {
      v13 = *(i - 1);
      v15 = a2 >= v13;
      v14 = a2 - v13;
      v15 = !v15 || v14 >= *i;
      if (!v15)
        break;
      if (v11 == ++v10)
        return result;
    }
    return v10;
  }
  return result;
}

uint64_t sub_100146004(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *i;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;

  v6 = (uint64_t *)sub_100140E90(a1);
  if ((*(_BYTE *)(a1 + 25) & 0x10) != 0)
  {
    v7 = *v6;
    v8 = v6[1];
    v9 = -1;
  }
  else
  {
    v7 = *v6;
    v8 = v6[1];
    if (*v6 == v8)
    {
      v9 = -1;
      return *(_QWORD *)a1 + v9;
    }
    v9 = (v8 - v7) >> 6;
  }
  v10 = v8 - v7;
  if (v10)
  {
    v11 = 0;
    v12 = v10 >> 6;
    if (v12 <= 1)
      v12 = 1;
    v13 = -(uint64_t)v12;
    for (i = (unint64_t *)(v7 + 8); ; i += 8)
    {
      v15 = *(i - 1);
      v17 = a2 >= v15;
      v16 = a2 - v15;
      v17 = !v17 || v16 >= *i;
      if (!v17)
        break;
      if (v13 == --v11)
        return *(_QWORD *)a1 + v9;
    }
    v9 = (a3 == sub_100144A40((__int128 *)a1, a2)) - v11;
  }
  return *(_QWORD *)a1 + v9;
}

unint64_t sub_1001460C8(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  unint64_t v11;
  unint64_t **v12;
  unint64_t *v13;
  double **v14;
  double *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;
  double v27;
  BOOL v29;
  _BOOL4 v30;
  BOOL v32;
  void *v34;
  void *v35;
  void *v36;

  v6 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(a1 + 224) == v6)
    goto LABEL_43;
  v7 = *(double *)(a1 + 40);
  v8 = a4 - v7;
  v9 = v8 - *(double *)(v6 + 8);
  if (v9 <= *(double *)(a1 + 72) - v7 + 1.0)
  {
    v12 = (unint64_t **)sub_100140E90(a1);
    v13 = *v12;
    if (*v12 == v12[1])
      v13 = (unint64_t *)a1;
    v11 = *v13;
    goto LABEL_44;
  }
  if (v9 >= 0.0)
  {
    if (v8 >= *(double *)(a1 + 240) && (a3 & 1) != 0)
      goto LABEL_43;
  }
  else if ((a3 & 1) != 0)
  {
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_48;
  }
  v14 = (double **)sub_100140E90(a1);
  v15 = *v14;
  v16 = (char *)v14[1] - (char *)*v14;
  if (v16)
  {
    v17 = v15[4];
    v18 = v15[5];
    v19 = v17 + (v18 - v17) * 0.5;
    v20 = v9 > v19;
    if (a2 || (v9 <= v19 ? (v21 = v9 < v17) : (v21 = 1), v21))
    {
      v23 = 0;
      v24 = v16 >> 6;
      v25 = v15 + 13;
      v26 = 0.0;
      while (1)
      {
        v22 = v23;
        v27 = v19;
        if (!a2 && v9 >= v19 && v9 <= v18)
          break;
        v29 = a2 != 1 || v20 || v9 < v26;
        v30 = v9 > v17 || a2 != 1;
        if (!v29)
          break;
        if (!v30 || v23 + 1 >= v24)
          break;
        v17 = *(v25 - 1);
        v18 = *v25;
        v19 = v17 + (*v25 - v17) * 0.5;
        v20 = v9 > v19;
        v25 += 8;
        ++v23;
        v26 = v27;
        if (!a2)
        {
          v32 = v9 > v19 || v9 < v17;
          v26 = v27;
          if (!v32)
            break;
        }
      }
    }
    else
    {
      v22 = -1;
    }
    if (v9 < 0.0 && a3 == 0)
    {
      v22 = 0;
    }
    else if (v22 == -1)
    {
      goto LABEL_43;
    }
    v11 = *(_QWORD *)&v15[8 * v22];
    if ((*(_BYTE *)(a1 + 25) & 0x40) != 0)
      v11 = *(_QWORD *)a1 + v11 - *(_QWORD *)(a1 + 16);
    goto LABEL_44;
  }
LABEL_43:
  v11 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_44:
  if ((a3 & 1) == 0 && v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = *(_QWORD *)a1;
    if ((*(_BYTE *)(a1 + 25) & 0x10) != 0)
      v11 += *(_QWORD *)(a1 + 8);
  }
LABEL_48:
  if ((v11 != 0x7FFFFFFFFFFFFFFFLL || (a3 & 1) == 0)
    && (v11 < *(_QWORD *)a1 || v11 > *(_QWORD *)(a1 + 8) + *(_QWORD *)a1))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B288);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFEC48();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B2A8);
    v34 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPLineFragment::charIndexForWPOffsetWithDirection(CGFloat, CRLWPWritingDirection, BOOL) const"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v35, v36, 1924, 0, "CRLWPLineFragment::charIndexForWPOffset: out-of-bounds result");

  }
  return v11;
}

void sub_10014643C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100146464(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100146494(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1001464C4(__int128 *a1, int a2, char a3, char *a4, char a5, double a6)
{
  uint64_t v9;
  double v12;
  double v13;
  const __CTLine *v14;
  unint64_t v15;
  const __CTLine *v16;
  CFIndex StringIndexForPosition;
  unint64_t v18;
  __int128 *v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  id v23;
  unsigned int v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t result;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint8_t buf[4];
  unsigned int v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  unint64_t v56;
  __int16 v57;
  uint64_t v58;
  CGPoint v59;

  v44 = 1;
  v9 = *((_QWORD *)a1 + 27);
  if (*((_QWORD *)a1 + 28) == v9)
    goto LABEL_20;
  v12 = a6 - *((double *)a1 + 5);
  v13 = v12 - *(double *)(v9 + 8);
  v14 = (const __CTLine *)sub_10019FA78(*((_QWORD *)a1 + 27));
  if (v13 >= COERCE_DOUBLE(CTLineGetBoundsWithOptions(v14, 0)))
  {
    if (v12 < *((double *)a1 + 30) || (a3 & 1) == 0)
      goto LABEL_7;
LABEL_20:
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_21;
  }
  if ((a3 & 1) != 0)
  {
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_24;
  }
LABEL_7:
  if (a2 && (a5 & 1) == 0)
  {
    v16 = (const __CTLine *)sub_10019FA78(v9);
    v59.y = 0.0;
    v59.x = v13;
    StringIndexForPosition = CTLineGetStringIndexForPosition(v16, v59);
    if ((StringIndexForPosition & 0x8000000000000000) == 0)
    {
      v18 = StringIndexForPosition;
      v19 = *((uint64_t *)a1 + 3) < 0 ? &xmmword_100EEE418 : a1;
      v20 = (char *)objc_msgSend(*((id *)a1 + 26), "charRangeMappedFromStorage:", *(_QWORD *)v19, *((_QWORD *)v19 + 1));
      v22 = v18 < (unint64_t)v20 || v18 - (unint64_t)v20 >= v21;
      if (!v22 || &v20[v21] == (char *)v18)
      {
        v23 = objc_msgSend(*((id *)a1 + 26), "charIndexMappedToStorage:", v18);
LABEL_72:
        v15 = (unint64_t)v23;
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
  v30 = (uint64_t *)sub_100140E90((uint64_t)a1);
  v31 = *v30;
  v32 = v30[1] - *v30;
  if (!v32)
  {
    v44 = 1;
LABEL_63:
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_69;
  }
  v33 = v32 >> 6;
  if (v33 <= 1)
    v34 = 1;
  else
    v34 = v33;
  v35 = *(double *)(v31 + 32);
  if (v35 <= v13)
  {
    v37 = 0;
    v38 = v34 - 1;
    v39 = v31 + 40;
    while (1)
    {
      if ((v35 + *(double *)v39) * 0.5 > v13 && a2 != 0)
      {
        v44 = *(_BYTE *)(v39 + 8);
        goto LABEL_67;
      }
      if (v38 == v37)
        break;
      v35 = *(double *)(v39 + 56);
      v39 += 64;
      ++v37;
      if (v35 > v13)
      {
        v36 = *(_BYTE *)(v39 - 56) ^ 1;
        if (!a2)
          v36 = 1;
        --v37;
        goto LABEL_62;
      }
    }
    v43 = *(_BYTE *)(v39 + 8) ^ 1;
    if (!a2)
      v43 = 1;
    v44 = v43;
    v37 = v38;
  }
  else
  {
    v36 = 1;
    v37 = -1;
LABEL_62:
    v44 = v36;
    if (v37 == -1)
      goto LABEL_63;
  }
LABEL_67:
  v15 = *(_QWORD *)(v31 + (v37 << 6));
  if ((*((_BYTE *)a1 + 25) & 0x40) != 0)
    v15 = *(_QWORD *)a1 + v15 - *((_QWORD *)a1 + 2);
LABEL_69:
  if (v15 == 0x7FFFFFFFFFFFFFFFLL && (a3 & 1) == 0)
  {
    v23 = (id)sub_1001449D8((uint64_t)a1, (BOOL *)&v44);
    goto LABEL_72;
  }
LABEL_21:
  if ((a3 & 1) == 0 && v15 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = *(_QWORD *)a1;
    v44 = 1;
  }
LABEL_24:
  if ((v15 != 0x7FFFFFFFFFFFFFFFLL || (a3 & 1) == 0)
    && (v15 < *(_QWORD *)a1 || v15 > *((_QWORD *)a1 + 1) + *(_QWORD *)a1))
  {
    v24 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B2C8);
    v25 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    {
      v41 = *(_QWORD *)a1;
      v42 = *((_QWORD *)a1 + 1);
      *(_DWORD *)buf = 67110658;
      v46 = v24;
      v47 = 2082;
      v48 = "CRLWPCharIndex CRLWPLineFragment::charIndexForWPOffset(CGFloat, BOOL, BOOL, BOOL *, BOOL) const";
      v49 = 2082;
      v50 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
      v51 = 1024;
      v52 = 2005;
      v53 = 2048;
      v54 = v15;
      v55 = 2048;
      v56 = v41;
      v57 = 2048;
      v58 = v42;
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLWPLineFragment::charIndexForWPOffset: out-of-bounds result: %lu {%lu, %lu}", buf, 0x40u);
    }
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B2E8);
    v26 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPLineFragment::charIndexForWPOffset(CGFloat, BOOL, BOOL, BOOL *, BOOL) const"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v27, v28, 2005, 0, "CRLWPLineFragment::charIndexForWPOffset: out-of-bounds result: %lu {%lu, %lu}", v15, *(_QWORD *)a1, *((_QWORD *)a1 + 1));

  }
  if (a4)
  {
    *a4 = v44;
    return v15;
  }
  else
  {
    result = 0x7FFFFFFFFFFFFFFFLL;
    if (v15 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v44)
        return v15;
      else
        return v15 + 1;
    }
  }
  return result;
}

void sub_100146944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10014696C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014699C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

_QWORD *sub_1001469CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_100140098((uint64_t *)a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10014A7AC(a2, *(const void **)(a1 + 464), *(_QWORD *)(a1 + 472), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3));
}

void sub_100146A14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100146A44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100146A74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100146AA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100146AD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100146B04(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100146B34(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  unint64_t v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  __int128 *v11;
  unsigned int v12;
  __int128 *v13;
  void *__p;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(__int128 *, __int128 *);

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v16 = 0;
  v17 = 0;
  sub_100146C68(&__p, v6);
  sub_100146D0C(a1, (uint64_t)&__p);
  v8 = 126 - 2 * __clz((v16 - (_BYTE *)__p) >> 6);
  v18 = (uint64_t (*)(__int128 *, __int128 *))sub_10014707C;
  if (v16 == __p)
    v9 = 0;
  else
    v9 = v8;
  sub_10014A8EC((__int128 *)__p, (__int128 *)v16, &v18, v9, 1, v7);
  v11 = (__int128 *)__p;
  if (__p == v16)
  {
LABEL_8:
    if (!__p)
      goto LABEL_12;
  }
  else
  {
    v12 = 0;
    v13 = (__int128 *)__p;
    while (*(_QWORD *)v13 != a2)
    {
      ++v12;
      v13 += 4;
      if (v13 == (__int128 *)v16)
        goto LABEL_8;
    }
    v18 = (uint64_t (*)(__int128 *, __int128 *))sub_1001470D4;
    sub_10014A8EC((__int128 *)__p, (__int128 *)v16, &v18, 126 - 2 * __clz((v16 - (_BYTE *)__p) >> 6), 1, v10);
    v11 = (__int128 *)__p;
    a2 = *((_QWORD *)__p + 8 * (unint64_t)v12);
  }
  v16 = (char *)v11;
  operator delete(v11);
LABEL_12:

  return a2;
}

void sub_100146C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100146C68(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 6)
  {
    if (a2 >> 58)
      sub_100007810();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10014A8B8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFC0];
    v9 = &v6[64 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 4);
        v14 = *((_OWORD *)v10 - 3);
        v15 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 4) = v13;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 64;
        v10 -= 64;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_100146D0C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  double v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (*(_QWORD *)(a1 + 224) != *(_QWORD *)(a1 + 216) && (*(_BYTE *)(a1 + 25) & 0x40) == 0)
  {
    if (!*(_QWORD *)(a1 + 208))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B3C8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFECC8();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B3E8);
      v4 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::fillCharIndicesAndOffsets(std::vector<CRLWPLFCharIndexData> &) const"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 2320, 0, "invalid nil value for '%{public}s'", "_textSource");

    }
    sub_100140098((uint64_t *)a1);
    v7 = sub_100140E90(a1);
    if (v7 != a2)
      sub_10014BA24((char *)a2, *(char **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 6);
    v8 = *(_QWORD *)(a1 + 24);
    if ((v8 & 0x200000) != 0)
    {
      v9 = &xmmword_100EEE418;
      if (v8 >= 0)
        v9 = (__int128 *)a1;
      *(_QWORD *)&v32 = *(_QWORD *)v9 + *((_QWORD *)v9 + 1);
      *((_QWORD *)&v32 + 1) = 1;
      v10 = *(double *)(a1 + 40);
      if ((v8 & 0x1000) != 0)
      {
        *(_QWORD *)&v33 = *(_QWORD *)(a1 + 40);
        *((double *)&v33 + 1) = v10;
        *(double *)&v34 = v10;
        *((double *)&v34 + 1) = v10;
        LOBYTE(v35) = 0;
        *((_QWORD *)&v35 + 1) = 0;
        sub_100147270(a2, *(char **)a2, (char *)&v32);
      }
      else
      {
        *(double *)&v33 = v10 + *(double *)(a1 + 56);
        *((_QWORD *)&v33 + 1) = v33;
        *(_QWORD *)&v34 = v33;
        *((_QWORD *)&v34 + 1) = v33;
        LOBYTE(v35) = 1;
        *((_QWORD *)&v35 + 1) = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3)
                              - 1;
        v11 = *(_QWORD *)(a2 + 16);
        v12 = *(_OWORD **)(a2 + 8);
        if ((unint64_t)v12 >= v11)
        {
          v17 = ((uint64_t)v12 - *(_QWORD *)a2) >> 6;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 58)
            sub_100007810();
          v19 = v11 - *(_QWORD *)a2;
          if (v19 >> 5 > v18)
            v18 = v19 >> 5;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0)
            v20 = 0x3FFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
            v21 = (char *)sub_10014A8B8(a2 + 16, v20);
          else
            v21 = 0;
          v22 = &v21[64 * v17];
          v23 = &v21[64 * v20];
          v24 = v32;
          v25 = v33;
          v26 = v35;
          *((_OWORD *)v22 + 2) = v34;
          *((_OWORD *)v22 + 3) = v26;
          *(_OWORD *)v22 = v24;
          *((_OWORD *)v22 + 1) = v25;
          v16 = v22 + 64;
          v28 = *(char **)a2;
          v27 = *(char **)(a2 + 8);
          if (v27 != *(char **)a2)
          {
            do
            {
              v29 = *((_OWORD *)v27 - 4);
              v30 = *((_OWORD *)v27 - 3);
              v31 = *((_OWORD *)v27 - 1);
              *((_OWORD *)v22 - 2) = *((_OWORD *)v27 - 2);
              *((_OWORD *)v22 - 1) = v31;
              *((_OWORD *)v22 - 4) = v29;
              *((_OWORD *)v22 - 3) = v30;
              v22 -= 64;
              v27 -= 64;
            }
            while (v27 != v28);
            v27 = *(char **)a2;
          }
          *(_QWORD *)a2 = v22;
          *(_QWORD *)(a2 + 8) = v16;
          *(_QWORD *)(a2 + 16) = v23;
          if (v27)
            operator delete(v27);
        }
        else
        {
          v13 = v32;
          v14 = v33;
          v15 = v35;
          v12[2] = v34;
          v12[3] = v15;
          *v12 = v13;
          v12[1] = v14;
          v16 = v12 + 4;
        }
        *(_QWORD *)(a2 + 8) = v16;
      }
    }
  }
}

void sub_100147054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_10014707C(double *a1, double *a2)
{
  double v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1[2];
  v3 = a2[2];
  if (v2 != v3)
    return v2 < v3;
  v4 = *((_QWORD *)a1 + 7);
  v5 = *((_QWORD *)a2 + 7);
  v6 = v4 >= v5;
  if (v4 == v5)
  {
    if (*((unsigned __int8 *)a1 + 48) | *((unsigned __int8 *)a2 + 48))
    {
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)a2;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)a1;
    }
    v6 = v7 >= v8;
  }
  return !v6;
}

BOOL sub_1001470D4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[7];
  v3 = a2[7];
  v4 = v2 >= v3;
  if (v2 == v3)
  {
    if (*((unsigned __int8 *)a1 + 48) | *((unsigned __int8 *)a2 + 48))
    {
      v5 = *a1;
      v6 = *a2;
    }
    else
    {
      v5 = *a2;
      v6 = *a1;
    }
    v4 = v5 >= v6;
  }
  return !v4;
}

uint64_t sub_100147114(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  unint64_t v6;
  __n128 v7;
  __int128 *v8;
  unsigned int v9;
  __int128 *v10;
  void *__p;
  __int128 *v13;
  uint64_t v14;
  BOOL (*v15)(double *, double *);

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_100146C68(&__p, v6);
  sub_100146D0C(a1, (uint64_t)&__p);
  v8 = (__int128 *)__p;
  if (__p == v13)
  {
LABEL_5:
    if (!__p)
      goto LABEL_9;
  }
  else
  {
    v9 = 0;
    v10 = (__int128 *)__p;
    while (*(_QWORD *)v10 != a2)
    {
      ++v9;
      v10 += 4;
      if (v10 == v13)
        goto LABEL_5;
    }
    v15 = sub_10014707C;
    sub_10014A8EC((__int128 *)__p, v13, (uint64_t (**)(__int128 *, __int128 *))&v15, 126 - 2 * __clz(((char *)v13 - (_BYTE *)__p) >> 6), 1, v7);
    v8 = (__int128 *)__p;
    a2 = *((_QWORD *)__p + 8 * (unint64_t)v9);
  }
  v13 = v8;
  operator delete(v8);
LABEL_9:

  return a2;
}

void sub_1001471EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100147210(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147240(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

char *sub_100147270(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v15 = *(char **)a1;
    v16 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 6) + 1;
    if (v16 >> 58)
      sub_100007810();
    v17 = __src - v15;
    v18 = (__src - v15) >> 6;
    v19 = v7 - (_QWORD)v15;
    if (v19 >> 5 > v16)
      v16 = v19 >> 5;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0)
      v20 = 0x3FFFFFFFFFFFFFFLL;
    else
      v20 = v16;
    v41 = a1 + 16;
    if (v20)
      v21 = (char *)sub_10014A8B8(a1 + 16, v20);
    else
      v21 = 0;
    v28 = &v21[64 * v18];
    __p = v21;
    v38 = v28;
    v39 = v28;
    v40 = &v21[64 * v20];
    if (v18 == v20)
    {
      if (v17 < 1)
      {
        if (v15 == v4)
          v30 = 1;
        else
          v30 = v17 >> 5;
        v31 = (char *)sub_10014A8B8(v8, v30);
        v28 = &v31[64 * (v30 >> 2)];
        __p = v31;
        v38 = v28;
        v40 = &v31[64 * v32];
        if (v21)
          operator delete(v21);
      }
      else
      {
        v29 = v18 + 2;
        if (v18 >= -1)
          v29 = v18 + 1;
        v28 -= 64 * (v29 >> 1);
        v38 = v28;
      }
    }
    v33 = *((_OWORD *)v3 + 2);
    v34 = *((_OWORD *)v3 + 3);
    v35 = *((_OWORD *)v3 + 1);
    *(_OWORD *)v28 = *(_OWORD *)v3;
    *((_OWORD *)v28 + 1) = v35;
    *((_OWORD *)v28 + 2) = v33;
    *((_OWORD *)v28 + 3) = v34;
    v39 = v28 + 64;
    v4 = (char *)sub_10014BB6C((void **)a1, (uint64_t)&__p, v4);
    if (v39 != v38)
      v39 += (v38 - v39 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v25 = *(_OWORD *)a3;
    v26 = *((_OWORD *)a3 + 1);
    v27 = *((_OWORD *)a3 + 3);
    *((_OWORD *)__src + 2) = *((_OWORD *)a3 + 2);
    *((_OWORD *)__src + 3) = v27;
    *(_OWORD *)__src = v25;
    *((_OWORD *)__src + 1) = v26;
    *(_QWORD *)(a1 + 8) = __src + 64;
  }
  else
  {
    v9 = __src + 64;
    v10 = v6 - 64;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v13 = *((_OWORD *)v10 + 1);
      v14 = *((_OWORD *)v10 + 3);
      v11[2] = *((_OWORD *)v10 + 2);
      v11[3] = v14;
      *v11 = v12;
      v11[1] = v13;
      v11 += 4;
      v10 += 64;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-64 * ((v6 - v9) >> 6)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 64 * (unint64_t)(*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    v22 = *(_OWORD *)v3;
    v23 = *((_OWORD *)v3 + 1);
    v24 = *((_OWORD *)v3 + 3);
    *((_OWORD *)v4 + 2) = *((_OWORD *)v3 + 2);
    *((_OWORD *)v4 + 3) = v24;
    *(_OWORD *)v4 = v22;
    *((_OWORD *)v4 + 1) = v23;
  }
  return v4;
}

void sub_1001474A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001474D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147508(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147538(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147568(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147598(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001475C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001475F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147628(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147658(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147688(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001476B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001476E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_100147718(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _BYTE *v12;
  _BYTE *v13;
  char *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  BOOL v23;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *__p;
  _BYTE *v32;
  uint64_t v33;

  v7 = a4;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(a1 + 208))
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B588);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFEE0C();
      v9 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPLineFragment::nextOrPreviousCharIndexForDirection(CRLWPCharIndex, CRLWPTextLayoutDirection, CRLWPStorage *__strong, CRLWPCharIndex &, BOOL) const"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 2519, 0, "invalid nil value for '%{public}s'", "_textSource");

    }
    __p = 0;
    v32 = 0;
    v33 = 0;
    sub_100146C68(&__p, v8);
    sub_100146D0C(a1, (uint64_t)&__p);
    v13 = __p;
    v12 = v32;
    v14 = (char *)objc_msgSend(*(id *)(a1 + 208), "charIndexRemappedFromStorage:", a2);
    v15 = __p;
    if (v12 != v13)
    {
      v16 = 0;
      v17 = (v12 - v13) >> 6;
      v18 = 1;
      while (1)
      {
        v19 = (unint64_t *)((char *)__p + 64 * v16);
        v21 = *v19;
        v20 = v19[1];
        v23 = (unint64_t)v14 >= v21;
        v22 = &v14[-v21];
        v23 = !v23 || (unint64_t)v22 >= v20;
        if (!v23)
          break;
        v16 = v18;
        if (v17 <= v18++)
        {
          if ((*(_BYTE *)(a1 + 25) & 0x10) != 0)
            v16 = 0;
          else
            v16 = v17 - 1;
          break;
        }
      }
      if (a3 == 3)
      {
        if (!v16)
        {
LABEL_38:
          v26 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_39;
        }
        v25 = v16 - 1;
LABEL_28:
        v26 = *((_QWORD *)__p + 8 * v25);
LABEL_39:
        v32 = v15;
        operator delete(v15);
        goto LABEL_40;
      }
      if (a3 == 2)
      {
        v25 = v16 + 1;
        if (v16 + 1 >= v17)
          goto LABEL_38;
        goto LABEL_28;
      }
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123B5C8);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DFED54();
      v27 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPLineFragment::nextOrPreviousCharIndexForDirection(CRLWPCharIndex, CRLWPTextLayoutDirection, CRLWPStorage *__strong, CRLWPCharIndex &, BOOL) const"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v28, v29, 2581, 0, "This routine supports left and right only.");

      v15 = __p;
    }
    v26 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v15)
      goto LABEL_40;
    goto LABEL_39;
  }
  v26 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_40:

  return v26;
}

void sub_100147A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100147B24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147B54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147B84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100147BB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_100147BE4(uint64_t a1, uint64_t a2, double a3)
{
  double v6;
  uint64_t v7;
  const __CTLine *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  double v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  double v30;
  id v31;
  id v32;
  uint64_t v33;
  void *k;
  void *v35;
  double v36;
  id v37;
  id v38;
  uint64_t v39;
  void *m;
  void *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 IsNull;
  uint64_t v47;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];

  if ((unint64_t)(a2 - 1) >= 2)
  {
    v9 = *(double *)(a1 + 88);
    v10 = 0.0;
  }
  else
  {
    if (sub_100145018(a1) != 1 || (v6 = a3, (*(_BYTE *)(a1 + 25) & 8) == 0))
    {
      v7 = *(_QWORD *)(a1 + 216);
      if (*(_QWORD *)(a1 + 224) == v7)
      {
        v6 = 0.0;
      }
      else
      {
        v8 = (const __CTLine *)sub_10019FA78(v7);
        v6 = CTLineGetTrailingWhitespaceWidth(v8) + a3 - *(double *)(a1 + 240);
      }
    }
    if (a2 == 2)
      v10 = v6 * 0.5;
    else
      v10 = v6;
    v11 = *(_QWORD *)(a1 + 216);
    v12 = *(_QWORD *)(a1 + 224) - v11;
    if (v12)
    {
      v13 = v12 / 104;
      if (v13 <= 1)
        v13 = 1;
      v14 = (double *)(v11 + 8);
      do
      {
        *v14 = v10 + *v14;
        v14 += 13;
        --v13;
      }
      while (v13);
    }
    v15 = *(_QWORD *)(a1 + 248);
    v16 = *(_QWORD *)(a1 + 256) - v15;
    if (v16)
    {
      v17 = v16 / 104;
      if (v17 <= 1)
        v17 = 1;
      v18 = (double *)(v15 + 8);
      do
      {
        *v18 = v10 + *v18;
        v18 += 13;
        --v17;
      }
      while (v17);
    }
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v19 = *(id *)(a1 + 336);
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v69, v76, 16);
    if (v20)
    {
      v21 = *(_QWORD *)v70;
      do
      {
        for (i = 0; i != v20; i = (char *)i + 1)
        {
          if (*(_QWORD *)v70 != v21)
            objc_enumerationMutation(v19);
          v23 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v23, "start");
          objc_msgSend(v23, "setStart:", v10 + v24);
        }
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v69, v76, 16);
      }
      while (v20);
    }

    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v25 = *(id *)(a1 + 344);
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v65, v75, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v66;
      do
      {
        for (j = 0; j != v26; j = (char *)j + 1)
        {
          if (*(_QWORD *)v66 != v27)
            objc_enumerationMutation(v25);
          v29 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)j);
          objc_msgSend(v29, "start");
          objc_msgSend(v29, "setStart:", v10 + v30);
        }
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v65, v75, 16);
      }
      while (v26);
    }

    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v31 = *(id *)(a1 + 352);
    v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
    if (v32)
    {
      v33 = *(_QWORD *)v62;
      do
      {
        for (k = 0; k != v32; k = (char *)k + 1)
        {
          if (*(_QWORD *)v62 != v33)
            objc_enumerationMutation(v31);
          v35 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)k);
          objc_msgSend(v35, "start");
          objc_msgSend(v35, "setStart:", v10 + v36);
        }
        v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
      }
      while (v32);
    }

    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v37 = *(id *)(a1 + 360);
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v57, v73, 16);
    if (v38)
    {
      v39 = *(_QWORD *)v58;
      do
      {
        for (m = 0; m != v38; m = (char *)m + 1)
        {
          if (*(_QWORD *)v58 != v39)
            objc_enumerationMutation(v37);
          v41 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * (_QWORD)m);
          objc_msgSend(v41, "start", (_QWORD)v57);
          objc_msgSend(v41, "setStart:", v10 + v42);
        }
        v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v57, v73, 16);
      }
      while (v38);
    }

    *(double *)(a1 + 240) = v10 + *(double *)(a1 + 240);
    v9 = v10 + *(double *)(a1 + 88);
    *(double *)(a1 + 88) = v9;
  }
  v43 = *(_QWORD *)(a1 + 72);
  v44 = *(_QWORD *)(a1 + 80);
  v45 = *(_QWORD *)(a1 + 96);
  IsNull = CGRectIsNull(*(CGRect *)(&v9 - 2));
  v49 = 0.0;
  v50 = 0.0;
  if (!IsNull)
    v50 = *(double *)(a1 + 40) - *(double *)(a1 + 72);
  if ((*(_BYTE *)(a1 + 26) & 4) != 0)
    v49 = 50.0;
  v51 = (*(double *)(a1 + 120) + *(double *)(a1 + 136)) * 0.25 + v49;
  if (v51 < v50)
    v51 = v50;
  if (*(double *)(a1 + 88) < a3 + v51 * 2.0)
  {
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)IsNull, *(Swift::String *)&v47);
    *(_QWORD *)(a1 + 72) = v52;
    *(_QWORD *)(a1 + 80) = v53;
    *(_QWORD *)(a1 + 88) = v54;
    *(_QWORD *)(a1 + 96) = v55;
  }
  *(double *)(a1 + 56) = a3;
  return v10;
}

void sub_100148078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1001480CC(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  void *v5;

  if (!a2)
    return 0;
  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(a2 + 224) == *(_QWORD *)(a2 + 216))
  {
    return 0;
  }
  result = 0;
  if ((*(_QWORD *)(a2 + 24) & 4) == 0
    && ((*(_QWORD *)(a2 + 24) & 0x2000) == 0) != (*(_BYTE *)(a1 + 25) & 0x20) >> 5)
  {
    result = CGRectEqualToRect(*(CGRect *)(a2 + 40), *(CGRect *)(a1 + 40));
    if (result)
    {
      if (a1 != a2)
        sub_10014BC48(a1 + 216, *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 3));
      objc_storeStrong((id *)(a1 + 336), *(id *)(a2 + 336));
      objc_storeStrong((id *)(a1 + 344), *(id *)(a2 + 344));
      objc_storeStrong((id *)(a1 + 352), *(id *)(a2 + 352));
      objc_storeStrong((id *)(a1 + 360), *(id *)(a2 + 360));
      objc_storeStrong((id *)(a1 + 408), *(id *)(a2 + 408));
      v5 = *(void **)(a2 + 416);
      if (v5)
        objc_storeStrong((id *)(a1 + 416), v5);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      objc_storeStrong((id *)(a1 + 456), *(id *)(a2 + 456));
      return 1;
    }
  }
  return result;
}

void sub_1001481FC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 456), a2);
}

uint64_t sub_100148204(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 216);
  while (result != v3)
    result = sub_10019FA00(result - 104);
  *(_QWORD *)(a1 + 224) = v3;
  return result;
}

uint64_t sub_100148240(_QWORD *a1, uint64_t a2, CGFloat *a3, double *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v30;
  const __CTLine *v31;
  CFIndex location;
  const __CTLine *v33;
  unint64_t v34;
  const __CTLine *v35;
  const __CTLine *v36;
  const __CTLine *v37;
  CFArrayRef GlyphRuns;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  const __CTRun *v44;
  CFRange StringRange;
  BOOL v46;
  void *v47;
  void *v48;
  const __CFDictionary *Attributes;
  const void *Value;
  uint64_t v51;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];

  if (a1[35] == a1[34])
    return 0;
  v12 = (void *)a1[26];
  if (!v12)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B608);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFEF50();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B628);
    v13 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLineFragment::isInsideTateChuYokoLineAtCharIndex(CRLWPCharIndex, CGFloat &, CGFloat &, CGFloat &, CGFloat &, CGFloat &) const"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v14, v15, 2818, 0, "invalid nil value for '%{public}s'", "_textSource");

    v12 = (void *)a1[26];
  }
  v16 = (char *)objc_msgSend(v12, "charIndexMappedFromStorage:", a2);
  v17 = a1[34];
  v18 = a1[35];
  v19 = v18 - v17;
  if (v18 == v17)
    return 0;
  v20 = 0;
  v21 = 0x4EC4EC4EC4EC4EC5 * (v19 >> 3);
  v22 = 1;
  while (1)
  {
    v23 = v17 + 104 * v20;
    v24 = *(_QWORD *)(v23 + 24);
    v25 = *(_QWORD *)(v23 + 32) + v24;
    v26 = &v16[-v24];
    if ((unint64_t)v16 > v24 && (unint64_t)v16 < v25)
      break;
    v20 = v22;
    v46 = v21 > v22++;
    if (!v46)
      return 0;
  }
  v30 = v17 + 104 * v20;
  v31 = (const __CTLine *)sub_10019FA78(v30);
  location = CTLineGetStringRange(v31).location;
  v33 = (const __CTLine *)sub_10019FA78(v30);
  v34 = (unint64_t)&v26[location];
  *a3 = CTLineGetOffsetForStringIndex(v33, v34, 0);
  v35 = (const __CTLine *)sub_10019FA78(v30);
  *a4 = CTLineGetTypographicBounds(v35, 0, 0, 0);
  v36 = (const __CTLine *)sub_10019FA78(v30);
  CTLineGetGlyphRuns(v36);
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v37 = (const __CTLine *)sub_10019FA78(v30);
  GlyphRuns = CTLineGetGlyphRuns(v37);
  v39 = (void *)objc_claimAutoreleasedReturnValue(GlyphRuns);
  v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
  v41 = v40;
  if (v40)
  {
    v42 = *(_QWORD *)v55;
    do
    {
      v43 = 0;
      do
      {
        if (*(_QWORD *)v55 != v42)
          objc_enumerationMutation(v39);
        v44 = *(const __CTRun **)(*((_QWORD *)&v54 + 1) + 8 * (_QWORD)v43);
        StringRange = CTRunGetStringRange(v44);
        v46 = StringRange.location >= v34 || v34 > StringRange.location + StringRange.length;
        if (!v46)
        {
          Attributes = CTRunGetAttributes(v44);
          Value = CFDictionaryGetValue(Attributes, kCTFontAttributeName);
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          sub_1001B21AC((uint64_t)Value, &v58);
          v51 = v60;
          *a5 = v59;
          *a6 = v51;
          *a7 = *((_QWORD *)&v60 + 1);
          v28 = 1;
          goto LABEL_43;
        }
        v43 = (char *)v43 + 1;
      }
      while (v41 != v43);
      v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
    }
    while (v41);
  }

  +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10123B648);
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DFEED0();
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10123B668);
  v47 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)v47, OS_LOG_TYPE_ERROR))
  {
    objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
    sub_100DE7E60();
  }

  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL CRLWPLineFragment::isInsideTateChuYokoLineAtCharIndex(CRLWPCharIndex, CGFloat &, CGFloat &, CGFloat &, CGFloat &, CGFloat &) const"));
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v39, v48, 2853, 0, "Could not find the CTRun for the tate chu yoko run.");

  v28 = 0;
LABEL_43:

  return v28;
}

void sub_1001486F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10014874C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014877C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001487AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001487DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10014880C(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = 2;
  if (!a2)
    v2 = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFFDLL | v2;
  return result;
}

void sub_10014882C(uint64_t a1, void *a2)
{
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFDFFFFFFLL | ((unint64_t)(a2 != 0) << 25);
  objc_storeStrong((id *)(a1 + 200), a2);
}

uint64_t sub_100148848(uint64_t result)
{
  *(_QWORD *)(result + 24) |= 0x400000uLL;
  return result;
}

uint64_t sub_100148858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  int32x2_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  _BOOL4 v23;
  CGAffineTransform v25;
  CGAffineTransform t1;
  uint64_t v27;
  uint64_t v28;

  if (a2 == a1)
    return 0;
  v27 = v3;
  v28 = v4;
  if (CGRectEqualToRect(*(CGRect *)(a1 + 40), *(CGRect *)(a2 + 40))
    && CGRectEqualToRect(*(CGRect *)(a1 + 72), *(CGRect *)(a2 + 72))
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(_QWORD *)a1 == *(_QWORD *)a2 + a3
    && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) + a3
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    v9 = *(_QWORD *)(a2 + 216);
    v8 = *(_QWORD *)(a2 + 224);
    v10 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v9) >> 3);
    if (v10 == 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3))
    {
      if (v8 == v9)
        return 0;
      v11 = 0;
      v12 = 1;
      while (1)
      {
        v13 = *(_QWORD *)(a2 + 216);
        v14 = *(_QWORD *)(a1 + 216);
        v15 = vmovn_s64(vceqq_f64(*(float64x2_t *)(v13 + 104 * v11 + 8), *(float64x2_t *)(v14 + 104 * v11 + 8)));
        if ((v15.i32[0] & v15.i32[1] & 1) == 0)
          break;
        if (!CFEqual(*(CFTypeRef *)(v13 + 104 * v11), *(CFTypeRef *)(v14 + 104 * v11)))
          break;
        v16 = vmovn_s64(vceqq_s64(*(int64x2_t *)(v13 + 104 * v11 + 24), *(int64x2_t *)(v14 + 104 * v11 + 24)));
        if ((v16.i32[0] & v16.i32[1] & 1) == 0
          || *(_QWORD *)(v13 + 104 * v11 + 96) != *(_QWORD *)(v14 + 104 * v11 + 96)
          || *(_QWORD *)(v13 + 104 * v11 + 40) != *(_QWORD *)(v14 + 104 * v11 + 40))
        {
          break;
        }
        v17 = (_OWORD *)(v13 + 104 * v11);
        v18 = v17[3];
        v19 = v17[5];
        *(_OWORD *)&t1.c = v17[4];
        *(_OWORD *)&t1.tx = v19;
        *(_OWORD *)&t1.a = v18;
        v20 = (_OWORD *)(v14 + 104 * v11);
        v21 = v20[3];
        v22 = v20[5];
        *(_OWORD *)&v25.c = v20[4];
        *(_OWORD *)&v25.tx = v22;
        *(_OWORD *)&v25.a = v21;
        v23 = CGAffineTransformEqualToTransform(&t1, &v25);
        if (v23)
        {
          v11 = v12++;
          if (v10 > v11)
            continue;
        }
        return !v23;
      }
    }
  }
  return 1;
}

double sub_100148A8C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = 0.0;
  if ((v3 & 0x100000000) == 0)
  {
    v5 = *(double *)(a1 + 136);
    v6 = *(double *)(a1 + 144);
    v7 = *(double *)(a1 + 112);
    v8 = *(double *)(a1 + 120);
    v9 = v5 + v6 + fmax(v7, v8);
    v10 = a3;
    switch(a2)
    {
      case 0:
        if ((v3 & 0x10) != 0)
        {
          v11 = v5 + v7;
        }
        else if (a3 <= 1.0)
        {
          v11 = v9 * a3;
          if (v11 < v7)
            v11 = *(double *)(a1 + 112);
        }
        else
        {
          v11 = v9 + (a3 + -1.0) * (v6 + v8 + v5);
        }
        v10 = v11 + *(double *)(a1 + 152);
        break;
      case 1:
        v12 = v9 + *(double *)(a1 + 152);
        if (v12 >= a3)
          v10 = v12;
        else
          v10 = a3;
        break;
      case 2:
        return v10 + *(double *)(a1 + 104) + *(double *)(a1 + 160);
      case 3:
        v10 = fmin(v9 + *(double *)(a1 + 152), a3);
        break;
      case 4:
        v10 = fmax(v9 + *(double *)(a1 + 152) + a3, 0.0);
        break;
      default:
        v10 = v9;
        break;
    }
    return v10 + *(double *)(a1 + 104) + *(double *)(a1 + 160);
  }
  return v4;
}

void sub_100148DE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100148E24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100148E54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_100148E84(double *a1, uint64_t a2, char a3, double a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;

  v6 = a1[15];
  v8 = a1[17];
  v7 = a1[18];
  v9 = a1[13];
  v10 = v7 + v6 + v8;
  v11 = v8 + v7 + fmax(a1[14], v6);
  v12 = a1[20];
  v13 = v9 + a1[19] + v11;
  v14 = v12 + v13;
  if (a2 == 2)
  {
    v15 = v9 + a4 + v12;
  }
  else if (a2 == 1)
  {
    v15 = fmax(v14, a4);
  }
  else
  {
    v15 = v12 + v13;
    if (!a2)
    {
      v15 = v12 + v13;
      if (a4 > 1.0)
      {
        v15 = v12 + v13;
        if ((a3 & 1) == 0)
          v15 = v14 + (a4 + -1.0) * v10;
      }
    }
  }
  if (v15 <= 0.0)
  {
    v16 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B6C8);
    v17 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110914;
      v23 = v16;
      v24 = 2082;
      v25 = "CGFloat CRLWPLineFragment::heightForHeightInfo(CRLWPLineSpacingMode, CGFloat, BOOL) const";
      v26 = 2082;
      v27 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm";
      v28 = 1024;
      v29 = 3030;
      v30 = 2048;
      v31 = a2;
      v32 = 2048;
      v33 = a4;
      v34 = 2048;
      v35 = v10;
      v36 = 2048;
      v37 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad lineheight; mode: %lu, amount: %g, text: %g, total: %g",
        buf,
        0x4Au);
    }
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B6E8);
    v18 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CGFloat CRLWPLineFragment::heightForHeightInfo(CRLWPLineSpacingMode, CGFloat, BOOL) const"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v19, v20, 3030, 0, "bad lineheight; mode: %lu, amount: %g, text: %g, total: %g",
      a2,
      *(_QWORD *)&a4,
      *(_QWORD *)&v10,
      *(_QWORD *)&v14);

  }
  return v15;
}

void sub_100149134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10014915C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014918C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_1001491BC(double *a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double result;

  v3 = a1[4];
  v4 = a3 + a1[6];
  a1[5] = a2 + a1[5];
  a1[6] = v4;
  v5 = a3 + a1[10];
  a1[9] = a2 + a1[9];
  a1[10] = v5;
  result = a3 + v3;
  a1[4] = a3 + v3;
  return result;
}

id sub_1001491EC(uint64_t a1, double a2, double a3)
{
  objc_msgSend(*(id *)(a1 + 368), "setStartPos:");
  return _objc_msgSend(*(id *)(a1 + 368), "setEndPos:", a3);
}

id sub_100149224(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  id result;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 368), "startPos");
  *a2 = v6;
  result = objc_msgSend(*(id *)(a1 + 368), "endPos");
  *a3 = v8;
  return result;
}

void sub_100149268(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 368), "setHyphenationAttr:");
  objc_msgSend(*(id *)(a1 + 368), "setHyphenationChar:", a3);
  *(_DWORD *)(a1 + 376) = a3;

}

void sub_1001492B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1001492CC(uint64_t a1, _DWORD *a2)
{
  *a2 = objc_msgSend(*(id *)(a1 + 368), "hyphenationChar");
  return _objc_msgSend(*(id *)(a1 + 368), "hyphenationAttr");
}

uint64_t sub_1001492FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 376);
}

id sub_100149304(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 368), "setOikomiSquish:", a2);
}

id sub_100149310(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 368), "oikomiSquish");
}

id sub_100149318(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 368), "clear");
}

void sub_100149320(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 424) = v2;
  if ((v2 & 2) != 0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B708);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
      sub_100DFF3F4();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B728);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v5);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 3114, 0, "bad starting line fragment state: hyphenated");

  }
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 224))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B748);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
      sub_100DFF374();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B768);
    v9 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v10);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 3115, 0, "bad starting line fragment state: line vector");

  }
  if (objc_msgSend(*(id *)(a1 + 408), "count"))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B788);
    v13 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
      sub_100DFF2F4();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B7A8);
    v14 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v15);
    }

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 3116, 0, "bad starting line fragment state: adornments");

  }
  if (objc_msgSend(*(id *)(a1 + 336), "count"))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B7C8);
    v18 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR))
      sub_100DFF274();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B7E8);
    v19 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR))
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v20);
    }

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v21, v22, 3117, 0, "bad starting line fragment state: _underlines positions");

  }
  if (objc_msgSend(*(id *)(a1 + 344), "count"))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B808);
    v23 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR))
      sub_100DFF1F4();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B828);
    v24 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v25);
    }

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v26, v27, 3118, 0, "bad starting line fragment state: _strikesthrough positions");

  }
  if (objc_msgSend(*(id *)(a1 + 352), "count"))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B848);
    v28 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR))
      sub_100DFF174();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B868);
    v29 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_ERROR))
    {
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v30);
    }

    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v31, v32, 3119, 0, "bad starting line fragment state: _textBackgrounds positions");

  }
  if (objc_msgSend(*(id *)(a1 + 360), "count"))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B888);
    v33 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
      sub_100DFF0F4();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B8A8);
    v34 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
    {
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v35);
    }

    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v36, v37, 3120, 0, "bad starting line fragment state: _textHighlights positions");

  }
  if (*(_QWORD *)(a1 + 416))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B8C8);
    v38 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v38, OS_LOG_TYPE_ERROR))
      sub_100DFF068();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B8E8);
    v39 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v39, OS_LOG_TYPE_ERROR))
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v40);
    }

    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v41, v42, 3121, 0, "expected nil value for '%{public}s'", "_breakLine");

  }
  if (*(_QWORD *)(a1 + 456))
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B908);
    v43 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_ERROR))
      sub_100DFEFDC();

    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123B928);
    v44 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR))
    {
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFE1F8(v45);
    }

    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLWPLineFragment::saveLayoutState()"));
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLineFragment.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v46, v47, 3122, 0, "expected nil value for '%{public}s'", "_paragraphString");

  }
}

void sub_100149DB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100149E7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100149EAC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100149EDC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100149F0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100149F3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100149F6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100149F9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100149FCC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100149FFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A02C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A05C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A08C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A0BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A0EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A11C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A14C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A17C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A1AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A1DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 424) & 0xFFFFFFFFFFFFFFFDLL;
  v2 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 216);
  while (v2 != v3)
    v2 = sub_10019FA00(v2 - 104);
  *(_QWORD *)(a1 + 224) = v3;
  objc_msgSend(*(id *)(a1 + 408), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 336), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 344), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 352), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 360), "removeAllObjects");
  v4 = *(void **)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;

  v5 = *(void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;

}

id sub_10014A260(id result)
{
  void *v1;

  v1 = (void *)*((_QWORD *)result + 52);
  if (v1)
  {
    objc_msgSend(*((id *)result + 52), "start");
    return objc_msgSend(v1, "setStart:");
  }
  return result;
}

void sub_10014A2B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A2E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014A310(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_10019FA00(v4 - 104);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10014A380(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_10019FA00(v3 - 104);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10014A3DC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    sub_100007810();
  result = (char *)sub_10014A430((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

void *sub_10014A430(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    sub_1000078E0();
  return operator new(104 * a2);
}

uint64_t sub_10014A478(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    sub_100007810();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x13B13B13B13B13BLL)
    v9 = 0x276276276276276;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_10014A430(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[104 * v4];
  v16 = &v10[104 * v9];
  sub_10019F9CC(v14, a2);
  v15 = v14 + 104;
  sub_10014A594(a1, &v13);
  v11 = a1[1];
  sub_10014A698((uint64_t)&v13);
  return v11;
}

void sub_10014A580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10014A698((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10014A594(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10014A608((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10014A608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 104;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 104;
    sub_10019F9CC(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_10014A698(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    sub_10019FA00(i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t **sub_10014A6E4(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_10001D650(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *sub_10014A7AC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10014A824(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10014A808(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10014A824(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    sub_100007810();
  result = (char *)sub_10014A874((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *sub_10014A874(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_1000078E0();
  return operator new(40 * a2);
}

void *sub_10014A8B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_1000078E0();
  return operator new(a2 << 6);
}

void sub_10014A8EC(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  char v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

uint64_t sub_10014AC70(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  if ((_OWORD *)result != a2)
  {
    v25 = v3;
    v26 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 64);
    if ((_OWORD *)(result + 64) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v12 = v10[1];
          v21 = *v10;
          v22 = v12;
          v13 = v10[3];
          v23 = v10[2];
          v24 = v13;
          v14 = v9;
          while (1)
          {
            v15 = (_OWORD *)((char *)v6 + v14);
            v16 = *(_OWORD *)((char *)v6 + v14 + 16);
            v15[4] = *(_OWORD *)((char *)v6 + v14);
            v15[5] = v16;
            v17 = *(_OWORD *)((char *)v6 + v14 + 48);
            v15[6] = *(_OWORD *)((char *)v6 + v14 + 32);
            v15[7] = v17;
            if (!v14)
              break;
            v14 -= 64;
            result = (*a3)(&v21, (char *)v6 + v14);
            if ((result & 1) == 0)
            {
              v18 = (_OWORD *)((char *)v6 + v14 + 64);
              goto LABEL_10;
            }
          }
          v18 = v6;
LABEL_10:
          v19 = v22;
          *v18 = v21;
          v18[1] = v19;
          v20 = v24;
          v18[2] = v23;
          v18[3] = v20;
        }
        v7 = v10 + 4;
        v9 += 64;
      }
      while (v10 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_10014AD54(uint64_t result, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  if ((_OWORD *)result != a2)
  {
    v22 = v3;
    v23 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 64);
    if ((_OWORD *)(result + 64) != a2)
    {
      v9 = (_OWORD *)(result - 64);
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v11 = v6[1];
          v18 = *v6;
          v19 = v11;
          v12 = v6[3];
          v20 = v6[2];
          v21 = v12;
          v13 = v9;
          do
          {
            v14 = v13[5];
            v13[8] = v13[4];
            v13[9] = v14;
            v15 = v13[7];
            v13[10] = v13[6];
            v13[11] = v15;
            result = (*a3)(&v18, v13);
            v13 -= 4;
          }
          while ((result & 1) != 0);
          v16 = v19;
          v13[8] = v18;
          v13[9] = v16;
          v17 = v21;
          v13[10] = v20;
          v13[11] = v17;
        }
        v7 = v6 + 4;
        v9 += 4;
      }
      while (v6 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_10014AE1C(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v11 = a1[2];
      v10 = a1[3];
      v13 = *a1;
      v12 = a1[1];
      v14 = a3[3];
      v16 = *a3;
      v15 = a3[1];
      a1[2] = a3[2];
      a1[3] = v14;
      *a1 = v16;
      a1[1] = v15;
      *a3 = v13;
      a3[1] = v12;
      result = 1;
LABEL_9:
      a3[2] = v11;
      a3[3] = v10;
      return result;
    }
    v32 = a1[2];
    v31 = a1[3];
    v34 = *a1;
    v33 = a1[1];
    v35 = a2[3];
    v37 = *a2;
    v36 = a2[1];
    a1[2] = a2[2];
    a1[3] = v35;
    *a1 = v37;
    a1[1] = v36;
    *a2 = v34;
    a2[1] = v33;
    a2[2] = v32;
    a2[3] = v31;
    if ((*a4)(a3, a2))
    {
      v11 = a2[2];
      v10 = a2[3];
      v39 = *a2;
      v38 = a2[1];
      v40 = a3[3];
      v42 = *a3;
      v41 = a3[1];
      a2[2] = a3[2];
      a2[3] = v40;
      *a2 = v42;
      a2[1] = v41;
      *a3 = v39;
      a3[1] = v38;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v18 = a2[2];
    v17 = a2[3];
    v20 = *a2;
    v19 = a2[1];
    v21 = a3[3];
    v23 = *a3;
    v22 = a3[1];
    a2[2] = a3[2];
    a2[3] = v21;
    *a2 = v23;
    a2[1] = v22;
    *a3 = v20;
    a3[1] = v19;
    a3[2] = v18;
    a3[3] = v17;
    if ((*a4)(a2, a1))
    {
      v25 = a1[2];
      v24 = a1[3];
      v27 = *a1;
      v26 = a1[1];
      v28 = a2[3];
      v30 = *a2;
      v29 = a2[1];
      a1[2] = a2[2];
      a1[3] = v28;
      *a1 = v30;
      a1[1] = v29;
      *a2 = v27;
      a2[1] = v26;
      result = 2;
      a2[2] = v25;
      a2[3] = v24;
      return result;
    }
  }
  return 1;
}

__int128 *sub_10014AF6C(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 v6;
  __int128 v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = a2;
  v6 = a1[1];
  v28 = *a1;
  v29 = v6;
  v7 = a1[3];
  v30 = a1[2];
  v31 = v7;
  if (((*a3)(&v28, a2 - 4) & 1) != 0)
  {
    v8 = a1;
    do
      v8 += 4;
    while (((*a3)(&v28, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 4;
    do
    {
      v8 = v9;
      if (v9 >= v4)
        break;
      v10 = (*a3)(&v28, v9);
      v9 = v8 + 4;
    }
    while (!v10);
  }
  if (v8 < v4)
  {
    do
      v4 -= 4;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    v12 = v8[1];
    v13 = v8[3];
    v34 = v8[2];
    v35 = v13;
    v32 = v11;
    v33 = v12;
    v14 = *v4;
    v15 = v4[1];
    v16 = v4[3];
    v8[2] = v4[2];
    v8[3] = v16;
    *v8 = v14;
    v8[1] = v15;
    v17 = v32;
    v18 = v33;
    v19 = v35;
    v4[2] = v34;
    v4[3] = v19;
    *v4 = v17;
    v4[1] = v18;
    do
      v8 += 4;
    while (!(*a3)(&v28, v8));
    do
      v4 -= 4;
    while (((*a3)(&v28, v4) & 1) != 0);
  }
  v20 = v8 - 4;
  if (v8 - 4 != a1)
  {
    v21 = *v20;
    v22 = *(v8 - 3);
    v23 = *(v8 - 1);
    a1[2] = *(v8 - 2);
    a1[3] = v23;
    *a1 = v21;
    a1[1] = v22;
  }
  v24 = v28;
  v25 = v29;
  v26 = v31;
  *(v8 - 2) = v30;
  *(v8 - 1) = v26;
  *v20 = v24;
  *(v8 - 3) = v25;
  return v8;
}

__int128 *sub_10014B0C8(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v6 = 0;
  v7 = a1[1];
  v27 = *a1;
  v28 = v7;
  v8 = a1[3];
  v29 = a1[2];
  v30 = v8;
  do
    v6 += 4;
  while (((*a3)(&a1[v6], &v27) & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 4];
  if (v6 == 4)
  {
    do
    {
      if (v9 >= a2)
        break;
      a2 -= 4;
    }
    while (((*a3)(a2, &v27) & 1) == 0);
  }
  else
  {
    do
      a2 -= 4;
    while (!(*a3)(a2, &v27));
  }
  if (v9 < a2)
  {
    v11 = &a1[v6];
    v12 = a2;
    do
    {
      v14 = v11[1];
      v31 = *v11;
      v13 = v31;
      v32 = v14;
      v16 = v11[3];
      v33 = v11[2];
      v15 = v33;
      v34 = v16;
      v18 = v12[2];
      v17 = v12[3];
      v19 = v12[1];
      *v11 = *v12;
      v11[1] = v19;
      v11[2] = v18;
      v11[3] = v17;
      v12[2] = v15;
      v12[3] = v16;
      *v12 = v13;
      v12[1] = v14;
      do
        v11 += 4;
      while (((*a3)(v11, &v27) & 1) != 0);
      do
        v12 -= 4;
      while (!(*a3)(v12, &v27));
    }
    while (v11 < v12);
    v10 = v11 - 4;
  }
  if (v10 != a1)
  {
    v20 = *v10;
    v21 = v10[1];
    v22 = v10[3];
    a1[2] = v10[2];
    a1[3] = v22;
    *a1 = v20;
    a1[1] = v21;
  }
  v23 = v27;
  v24 = v28;
  v25 = v30;
  v10[2] = v29;
  v10[3] = v25;
  *v10 = v23;
  v10[1] = v24;
  return v10;
}

BOOL sub_10014B224(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v6 = ((char *)a2 - (char *)a1) >> 6;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 4;
      if (!(*a3)(a2 - 4, a1))
        return 1;
      v10 = a1[2];
      v9 = a1[3];
      v12 = *a1;
      v11 = a1[1];
      v13 = *(a2 - 1);
      v15 = *v8;
      v14 = *(a2 - 3);
      a1[2] = *(a2 - 2);
      a1[3] = v13;
      *a1 = v15;
      a1[1] = v14;
      *v8 = v12;
      *(a2 - 3) = v11;
      result = 1;
      *(a2 - 2) = v10;
      *(a2 - 1) = v9;
      return result;
    case 3:
      sub_10014AE1C(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      sub_10014B408((uint64_t)a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return 1;
    case 5:
      sub_10014B4F0((uint64_t)a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return 1;
    default:
      v16 = a1 + 8;
      sub_10014AE1C(a1, a1 + 4, a1 + 8, a3);
      v17 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v17, v16))
    {
      v20 = v17[1];
      v29 = *v17;
      v30 = v20;
      v21 = v17[3];
      v31 = v17[2];
      v32 = v21;
      v22 = v18;
      while (1)
      {
        v23 = (__int128 *)((char *)a1 + v22);
        v24 = *(__int128 *)((char *)a1 + v22 + 144);
        v23[12] = *(__int128 *)((char *)a1 + v22 + 128);
        v23[13] = v24;
        v25 = *(__int128 *)((char *)a1 + v22 + 176);
        v23[14] = *(__int128 *)((char *)a1 + v22 + 160);
        v23[15] = v25;
        if (v22 == -128)
          break;
        v22 -= 64;
        if (((*a3)(&v29, v23 + 4) & 1) == 0)
        {
          v26 = (__int128 *)((char *)a1 + v22 + 192);
          goto LABEL_12;
        }
      }
      v26 = a1;
LABEL_12:
      v27 = v30;
      *v26 = v29;
      v26[1] = v27;
      v28 = v32;
      v26[2] = v31;
      v26[3] = v28;
      if (++v19 == 8)
        return v17 + 4 == a2;
    }
    v16 = v17;
    v18 += 64;
    v17 += 4;
    if (v17 == a2)
      return 1;
  }
}

__n128 sub_10014B408(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  sub_10014AE1C((__int128 *)a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    v12 = a3[2];
    v11 = a3[3];
    v14 = *a3;
    v13 = a3[1];
    v15 = a4[3];
    v17 = *a4;
    v16 = a4[1];
    a3[2] = a4[2];
    a3[3] = v15;
    *a3 = v17;
    a3[1] = v16;
    *a4 = v14;
    a4[1] = v13;
    a4[2] = v12;
    a4[3] = v11;
    if ((*a5)(a3, a2))
    {
      v19 = a2[2];
      v18 = a2[3];
      v21 = *a2;
      v20 = a2[1];
      v22 = a3[3];
      v24 = *a3;
      v23 = a3[1];
      a2[2] = a3[2];
      a2[3] = v22;
      *a2 = v24;
      a2[1] = v23;
      *a3 = v21;
      a3[1] = v20;
      a3[2] = v19;
      a3[3] = v18;
      if ((*a5)(a2, (__int128 *)a1))
      {
        v25 = *(_OWORD *)(a1 + 32);
        result = *(__n128 *)(a1 + 48);
        v27 = *(_OWORD *)a1;
        v26 = *(_OWORD *)(a1 + 16);
        v28 = a2[3];
        v30 = *a2;
        v29 = a2[1];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v28;
        *(_OWORD *)a1 = v30;
        *(_OWORD *)(a1 + 16) = v29;
        *a2 = v27;
        a2[1] = v26;
        a2[2] = v25;
        a2[3] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_10014B4F0(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v12 = sub_10014B408(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a6)(a5, a4, v12))
  {
    v15 = a4[2];
    v14 = a4[3];
    v17 = *a4;
    v16 = a4[1];
    v18 = a5[3];
    v20 = *a5;
    v19 = a5[1];
    a4[2] = a5[2];
    a4[3] = v18;
    *a4 = v20;
    a4[1] = v19;
    *a5 = v17;
    a5[1] = v16;
    a5[2] = v15;
    a5[3] = v14;
    if ((*a6)(a4, a3))
    {
      v22 = a3[2];
      v21 = a3[3];
      v24 = *a3;
      v23 = a3[1];
      v25 = a4[3];
      v27 = *a4;
      v26 = a4[1];
      a3[2] = a4[2];
      a3[3] = v25;
      *a3 = v27;
      a3[1] = v26;
      *a4 = v24;
      a4[1] = v23;
      a4[2] = v22;
      a4[3] = v21;
      if ((*a6)(a3, a2))
      {
        v29 = a2[2];
        v28 = a2[3];
        v31 = *a2;
        v30 = a2[1];
        v32 = a3[3];
        v34 = *a3;
        v33 = a3[1];
        a2[2] = a3[2];
        a2[3] = v32;
        *a2 = v34;
        a2[1] = v33;
        *a3 = v31;
        a3[1] = v30;
        a3[2] = v29;
        a3[3] = v28;
        if ((*a6)(a2, (__int128 *)a1))
        {
          v35 = *(_OWORD *)(a1 + 32);
          result = *(__n128 *)(a1 + 48);
          v37 = *(_OWORD *)a1;
          v36 = *(_OWORD *)(a1 + 16);
          v38 = a2[3];
          v40 = *a2;
          v39 = a2[1];
          *(_OWORD *)(a1 + 32) = a2[2];
          *(_OWORD *)(a1 + 48) = v38;
          *(_OWORD *)a1 = v40;
          *(_OWORD *)(a1 + 16) = v39;
          *a2 = v37;
          a2[1] = v36;
          a2[2] = v35;
          a2[3] = (__int128)result;
        }
      }
    }
  }
  return result;
}

__n128 *sub_10014B618(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(__n128 *, __n128 *), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 *v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) >> 6;
    if ((uint64_t)a2 - a1 >= 65)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)(a1 + (v11 << 6));
      do
      {
        a5 = sub_10014B820(a1, a4, v10, v13);
        v13 -= 4;
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          v17 = v15[2];
          v16 = v15[3];
          v19 = *v15;
          v18 = v15[1];
          v20 = *(__n128 *)(a1 + 48);
          v22 = *(__n128 *)a1;
          v21 = *(__n128 *)(a1 + 16);
          v15[2] = *(__n128 *)(a1 + 32);
          v15[3] = v20;
          *v15 = v22;
          v15[1] = v21;
          *(__n128 *)a1 = v19;
          *(__n128 *)(a1 + 16) = v18;
          *(__n128 *)(a1 + 32) = v17;
          *(__n128 *)(a1 + 48) = v16;
          a5 = sub_10014B820(a1, a4, v10, (__n128 *)a1);
        }
        v15 += 4;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 65)
    {
      return v14;
    }
    else
    {
      v37 = v14;
      v23 = (unint64_t)v9 >> 6;
      do
      {
        v24 = 0;
        v38 = *(__n128 *)a1;
        v39 = *(__n128 *)(a1 + 16);
        v40 = *(__n128 *)(a1 + 32);
        v41 = *(__n128 *)(a1 + 48);
        v25 = (_OWORD *)a1;
        do
        {
          v26 = (__n128 *)&v25[4 * v24 + 4];
          v27 = (2 * v24) | 1;
          v28 = 2 * v24 + 2;
          if (v28 < v23 && (*a4)((__n128 *)&v25[4 * v24 + 4], (__n128 *)&v25[4 * v24 + 8]))
          {
            v26 += 4;
            v27 = v28;
          }
          v29 = *v26;
          v30 = v26[1];
          v31 = v26[3];
          v25[2] = v26[2];
          v25[3] = v31;
          *v25 = v29;
          v25[1] = v30;
          v25 = v26;
          v24 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
        v7 -= 4;
        if (v26 == v7)
        {
          v26[2] = v40;
          v26[3] = v41;
          *v26 = v38;
          v26[1] = v39;
        }
        else
        {
          v32 = *v7;
          v33 = v7[1];
          v34 = v7[3];
          v26[2] = v7[2];
          v26[3] = v34;
          *v26 = v32;
          v26[1] = v33;
          *v7 = v38;
          v7[1] = v39;
          v7[2] = v40;
          v7[3] = v41;
          sub_10014B968(a1, (uint64_t)&v26[4], (uint64_t (**)(__int128 *, __int128 *))a4, ((uint64_t)&v26[4] - a1) >> 6);
        }
      }
      while (v23-- > 2);
      return v37;
    }
  }
  return a3;
}

__n128 sub_10014B820(uint64_t a1, unsigned int (**a2)(__n128 *, __n128 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 result;
  __n128 v17;
  __n128 v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v31 = v4;
    v32 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 6)
    {
      v12 = ((uint64_t)a4 - a1) >> 5;
      v13 = v12 + 1;
      v14 = (__n128 *)(a1 + ((v12 + 1) << 6));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 4))
      {
        v14 += 4;
        v13 = v15;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v14, v7) & 1) == 0)
      {
        v17 = v7[1];
        v27 = *v7;
        v28 = v17;
        v18 = v7[3];
        v29 = v7[2];
        v30 = v18;
        do
        {
          v19 = v14;
          v20 = *v14;
          v21 = v14[1];
          v22 = v14[3];
          v7[2] = v14[2];
          v7[3] = v22;
          *v7 = v20;
          v7[1] = v21;
          if (v9 < v13)
            break;
          v23 = (2 * v13) | 1;
          v14 = (__n128 *)(a1 + (v23 << 6));
          v24 = 2 * v13 + 2;
          if (v24 < a3)
          {
            if ((*a2)((__n128 *)(a1 + (v23 << 6)), v14 + 4))
            {
              v14 += 4;
              v23 = v24;
            }
          }
          v7 = v19;
          v13 = v23;
        }
        while (!(*a2)(v14, &v27));
        result = v27;
        v25 = v28;
        v26 = v30;
        v19[2] = v29;
        v19[3] = v26;
        *v19 = result;
        v19[1] = v25;
      }
    }
  }
  return result;
}

double sub_10014B968(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v25 = v4;
    v26 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + (v6 >> 1 << 6));
    v11 = (__int128 *)(a2 - 64);
    if ((*a3)(v10, (__int128 *)(a2 - 64)))
    {
      v13 = v11[1];
      v21 = *v11;
      v22 = v13;
      v14 = v11[3];
      v23 = v11[2];
      v24 = v14;
      do
      {
        v15 = v10;
        v16 = *v10;
        v17 = v10[1];
        v18 = v10[3];
        v11[2] = v10[2];
        v11[3] = v18;
        *v11 = v16;
        v11[1] = v17;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + (v9 << 6));
        v11 = v15;
      }
      while (((*a3)(v10, &v21) & 1) != 0);
      v19 = v22;
      *v15 = v21;
      v15[1] = v19;
      result = *(double *)&v23;
      v20 = v24;
      v15[2] = v23;
      v15[3] = v20;
    }
  }
  return result;
}

char *sub_10014BA24(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 6)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 58)
      sub_100007810();
    v10 = v8 >> 5;
    if (v8 >> 5 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_10014BB2C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 6;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_10014BB2C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    sub_100007810();
  result = (char *)sub_10014A8B8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_10014BB6C(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  void *v17;
  void *v18;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 4);
      v11 = *((_OWORD *)v8 - 3);
      v12 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 64);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      v8 -= 64;
      v9 -= 64;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v13 = a1[1];
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v14 + v15;
  v16 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v16;
  v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v17;
  v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t sub_10014BC48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_10014A380((void **)a1);
    if (a4 > 0x276276276276276)
      sub_100007810();
    v10 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v10;
    sub_10014A3DC((_QWORD *)a1, v11);
    result = sub_10014BDD0(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_10014BE50(a2, v13, (uint64_t)v9);
    result = sub_10014BDD0(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  sub_10014BE50(a2, a3, (uint64_t)v9);
  v15 = v14;
  result = *(_QWORD *)(a1 + 8);
  if (result != v14)
  {
    do
      result = sub_10019FA00(result - 104);
    while (result != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_10014BDC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10014BDC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10014BDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_10019F9CC(a4 + v7, a2 + v7);
      v7 += 104;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10014BE2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 104;
    do
    {
      sub_10019FA00(v4 + v2);
      v2 -= 104;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014BE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10019FA04(a3, v4);
      v4 += 104;
      a3 += 104;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_10014BEAC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, a3, a4, a5, 0x12u);
}

void sub_10014C1CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10014C45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10014C928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10014C964(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014C994(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014C9C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014C9F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014D1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10014D234(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014D264(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014D584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10014D638(void *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unint64_t v10;
  float v12;
  int v13;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSScanner scannerWithString:](NSScanner, "scannerWithString:", v1));
  v13 = 0;
  if (objc_msgSend(v2, "scanInt:", &v13)
    && ((v3 = objc_msgSend(v2, "isAtEnd"), v4 = v13, v13 >= 0) ? (v5 = v3) : (v5 = 0),
        v5 == 1))
  {
    v6 = v2;
  }
  else
  {
    v12 = 0.0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSScanner scannerWithString:](NSScanner, "scannerWithString:", v1));

    if (objc_msgSend(v6, "scanFloat:", &v12))
    {
      v7 = objc_msgSend(v6, "isAtEnd");
      if (v12 >= 0.0)
        v8 = v7;
      else
        v8 = 0;
      v9 = v8 == 1;
      v10 = vcvtas_u32_f32(v12);
      if (v9)
        v4 = v10;
      else
        v4 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v4 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  return v4;
}

void sub_10014D720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10014D740(void *a1)
{
  id v1;
  char *v2;
  int v3;
  uint64_t v4;
  __uint32_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = objc_retainAutorelease(a1);
  v2 = (char *)objc_msgSend(v1, "UTF8String");
  LOBYTE(v3) = *v2;
  if (*v2)
  {
    v4 = 0;
    while (1)
    {
      if ((v3 & 0x80) != 0)
        v5 = __maskrune((char)v3, 0x100uLL);
      else
        v5 = _DefaultRuneLocale.__runetype[(char)v3] & 0x100;
      if (!v5 || (v6 = (*v2 & 0xFFFFFFFFFFFFFFDFLL) - 65, ((0x34FE4F3uLL >> v6) & 1) != 0))
      {
        v4 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_17;
      }
      v7 = dword_100EECC88[v6];
      if (!v2[1])
        break;
      v8 = dword_100EECC88[(v2[1] & 0xFFFFFFFFFFFFFFDFLL) - 65];
      if (v8 <= v7)
      {
        v3 = v2[1];
      }
      else
      {
        v7 = v8 - v7;
        v3 = v2[2];
        ++v2;
      }
      v4 += v7;
      ++v2;
      if (!v3)
        goto LABEL_17;
    }
    v4 += v7;
  }
  else
  {
    v4 = 0;
  }
LABEL_17:

  return v4;
}

void sub_10014D848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10014D860(void *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uppercaseString"));
  v2 = sub_10014D740(v1);

  return v2;
}

void sub_10014D894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10014D8A4(void *a1)
{
  id v1;
  id v2;
  id v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v8;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  v3 = objc_retainAutorelease(v1);
  v4 = (char *)objc_msgSend(v3, "UTF8String");
  v5 = *v4;
  if (v2)
  {
    v6 = 0;
    while (v5 < 0 ? __maskrune(v5, 0x100uLL) : _DefaultRuneLocale.__runetype[v5] & 0x100)
    {
      v5 = *v4;
      if (((v4[v6] ^ *v4) & 0xDF) != 0)
        break;
      if (v2 == (id)++v6)
        goto LABEL_9;
    }
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
LABEL_9:
    v8 = 26 * (_QWORD)v2 + (char)(v5 & 0xDF) - 90;
  }

  return v8;
}

void sub_10014D980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10014D99C(void *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uppercaseString"));
  v2 = sub_10014D8A4(v1);

  return v2;
}

void sub_10014D9D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10014D9E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014DA10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014DCB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10014DD28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014DD58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10014EFDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10014F234(unsigned int a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  if (!a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BD28);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFF80C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BD48);
    v2 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::CRLWPArabicLabelFromNumber"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 422, 0, "Illegal value for arabic numeral topic label <= 0");

  }
  if (a1 <= 1)
    v5 = 1;
  else
    v5 = a1;
  return (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), v5));
}

void sub_10014F3E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10014F408(unsigned int a1)
{
  unsigned __int8 v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v12;

  v2 = atomic_load((unsigned __int8 *)&qword_101414E98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101414E98))
  {
    __cxa_atexit((void (*)(void *))sub_10015390C, 0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101414E98);
  }
  if (!a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BE38);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFF88C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BE58);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::CRLWPRomanUpperLabelFromNumber"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 525, 0, "Illegal value for roman numeral topic label <= 0");

  }
  if (a1 <= 1)
    v6 = 1;
  else
    v6 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v8 = 12;
  do
  {
    v9 = (char *)&unk_10123BD68 + 16 * v8;
    if (v6 >= *(_DWORD *)v9)
    {
      v10 = *((_QWORD *)v9 + 1);
      do
      {
        objc_msgSend(v7, "appendString:", v10);
        v6 -= *(_DWORD *)v9;
      }
      while (v6 >= *(_DWORD *)v9);
    }
    v12 = v8-- != 0;
  }
  while (v6 && v12);
  return v7;
}

void sub_10014F640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10014F66C(unsigned int a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = sub_10014F408(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lowercaseString"));

  return v3;
}

void sub_10014F6A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10014F6B4(int a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = sub_100152260(a1, (uint64_t)aAbcdefghijklmn_0, 0x1AuLL);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lowercaseString"));

  return v3;
}

void sub_10014F6F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10014F708(int a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v3 = (unsigned __int16)aAbcdefghijklmn_0[(((_BYTE)a1 - 1) & 3) + 26];
  v4 = ((unint64_t)(a1 - 1) >> 2) + 1;
  do
  {
    objc_msgSend(v2, "appendFormat:", CFSTR("%C"), v3);
    --v4;
  }
  while (v4);
  return v2;
}

void sub_10014F788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10014F798(uint64_t a1, unsigned int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int16 v22;
  id v23;
  unsigned int v24;
  char v25;
  uint64_t v26;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v5 = v4;
  v6 = a2;
  if ((_DWORD)a1)
  {
    v7 = (char *)&word_100EECD2C[8 * a2];
    v8 = (uint64_t)*(&off_10123BE78 + a2);
    v9 = v4;
    v23 = v9;
    v24 = a2;
    v25 = 1;
    v26 = v8;
    v10 = sub_1001524EC((uint64_t)v7, (uint64_t)(v7 + 16), a1, (uint64_t)&v23);
    v11 = sub_1001525D8(v10, a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    objc_msgSend(v9, "appendString:", v12);

    v22 = word_100EECD8C[10 * a2];
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", &v22, 1));
    if (a2 && a2 != 3)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsSeparatedByString:", v13));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v18));

      objc_msgSend(v14, "removeObject:", &stru_1012A72B0);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "componentsJoinedByString:", v13));
      v15 = objc_msgSend(v19, "mutableCopy");

      if ((unint64_t)objc_msgSend(v15, "length") >= 2)
      {
        v20 = objc_msgSend(v15, "characterAtIndex:", 0);
        v21 = objc_msgSend(v15, "characterAtIndex:", 1);
        if (v20 == word_100EECD8C[10 * v6 + 1]
          && (v21 == *((unsigned __int16 *)v7 + 2)
           || v21 == word_100EECD2C[8 * v6 + 6]
           || v21 == word_100EECE04[12 * v6 + 10]))
        {
          objc_msgSend(v15, "deleteCharactersInRange:", 0, 1);
        }
      }
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByReplacingOccurrencesOfString:withString:", v13, &stru_1012A72B0));
      v15 = objc_msgSend(v14, "mutableCopy");

    }
    v16 = v15;

  }
  else
  {
    objc_msgSend(v4, "crl_appendCharacter:", word_100EECD8C[10 * a2]);
    v16 = v5;
  }

  return v16;
}

void sub_10014FA04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_10014FA74(unsigned int a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  id v7;
  void *v8;
  __int16 v10;

  if (!a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BF58);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFF90C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BF78);
    v2 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::CRLWPCircledNumberLabelFromNumber"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 814, 0, "Illegal value for circled number numeral topic label <= 0");

  }
  v5 = 0;
  while (1)
  {
    v6 = dword_100EECF6C[v5];
    if (a1 >= v6 && dword_100EECF78[v5] + v6 > a1)
      break;
    if (++v5 == 3)
      goto LABEL_15;
  }
  v10 = word_100EECF84[v5] + a1 - v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", &v10, 1));
  if (!v8)
  {
LABEL_15:
    v7 = sub_10014F234(a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }
  return v8;
}

void sub_10014FC74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10014FC9C(unsigned int a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  void *v11;

  v3 = a2;
  if (!a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BF98);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFF98C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BFB8);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::CRLWPArabicLabelFromNumberAndLocale(unsigned int, NSString *__strong)"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 434, 0, "Illegal value for arabic numeral topic label <= 0");

  }
  if (a1 <= 1)
    v7 = 1;
  else
    v7 = a1;
  v8 = objc_alloc_init((Class)NSNumberFormatter);
  v9 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", v3);
  objc_msgSend(v8, "setLocale:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringFromNumber:", v10));

  return v11;
}

void sub_10014FEAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10014FF14(unsigned int a1)
{
  unsigned int v1;
  int v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _WORD __b[11];

  v1 = a1;
  if (a1 >= 0xF4240)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BFD8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFFA8C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BFF8);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::CRLWPArabianAbjadLabelFromNumber(uint)"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 747, 0, "number out of bounds for algorithm");

LABEL_14:
    v6 = sub_100152E00(v1 / 0x3E8, __b);
    v2 = v6 + 1;
    __b[v6] = 39;
    v1 %= 0x3E8u;
    goto LABEL_15;
  }
  if (!a1)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", &unk_100EECFC2, 3));
    return v11;
  }
  if (a1 >= 0x3E8)
    goto LABEL_14;
  v2 = 0;
LABEL_15:
  v7 = sub_100152E00(v1, &__b[v2]) + v2;
  if (v7 >= 0xC)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C018);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFFA0C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C038);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::CRLWPArabianAbjadLabelFromNumber(uint)"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 767, 0, "string out of bounds");

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", __b, v7));
  return v11;
}

void sub_10015025C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001502A8(unsigned int a1)
{
  unsigned int v1;
  int v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _WORD __b[13];

  v1 = a1;
  if (a1 >= 0xF4240)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C0D8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFFB8C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C0F8);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::CRLWPHebrewBiblicalLabelFromNumber(uint)"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 689, 0, "Hebrew number out of bounds for algorithm");

LABEL_14:
    v6 = sub_1001533B0(v1 / 0x3E8, __b);
    v2 = v6 + 1;
    __b[v6] = 1523;
    v1 %= 0x3E8u;
    goto LABEL_15;
  }
  if (!a1)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", &unk_100EED02C, 3));
    return v11;
  }
  if (a1 >= 0x3E8)
    goto LABEL_14;
  v2 = 0;
LABEL_15:
  v7 = sub_1001533B0(v1, &__b[v2]) + v2;
  if (v7 >= 0xE)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C118);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFFB0C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C138);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *(anonymous namespace)::CRLWPHebrewBiblicalLabelFromNumber(uint)"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 709, 0, "string out of bounds");

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", __b, v7));
  return v11;
}

void sub_1001505F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10015063C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015066C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015069C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableCharacterSet);
  objc_msgSend(v1, "addCharactersInRange:", 46, 1);
  objc_msgSend(v1, "addCharactersInRange:", 40, 1);
  objc_msgSend(v1, "addCharactersInRange:", 41, 1);
  v2 = (void *)qword_101414E88;
  qword_101414E88 = (uint64_t)v1;

}

void sub_1001506FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100150908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001510F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100151144(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151174(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001511A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001511D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151204(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151234(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015199C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100151A00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151A30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151A60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151A90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151AC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151AF0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151B20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151B50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_100151F84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100151FB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015217C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001521A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001521D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152200(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152230(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100152260(int a1, uint64_t a2, unint64_t a3)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  if (a1)
  {
    v7 = (a1 - 1);
    v8 = *(unsigned __int16 *)(a2 + 2 * (v7 % a3));
    if ((int)(v7 / a3 + 1) < 100)
      v9 = v7 / a3 + 1;
    else
      v9 = 100;
    while (1)
    {
      v10 = __OFSUB__(v9--, 1);
      if (v9 < 0 != v10)
        break;
      objc_msgSend(v6, "crl_appendCharacter:", v8);
    }
  }
  return v6;
}

void sub_1001522E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001522F0(void *a1, unsigned int a2, int a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = a1;
  if (a2 >= 0xA)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BEA8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFFEB4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BEC8);
    v6 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void (anonymous namespace)::appendIdeographicDigit(NSMutableString *__strong, unsigned int, CRLWPListIdeographicType)"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v7, v8, 195, 0, "inDigit is larger than single digit");

  }
  objc_msgSend(v5, "crl_appendCharacter:", word_100EECD8C[10 * a3 + a2]);

}

void sub_1001524AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1001524EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  void (*v10)(id, _QWORD);
  id v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = *(_DWORD *)(a4 + 8);
      v9 = *(unsigned __int8 *)(a4 + 12);
      v10 = *(void (**)(id, _QWORD))(a4 + 16);
      v11 = *(id *)a4;
      v12 = v11;
      v13 = *(_DWORD *)v7;
      v14 = a3 / *(_DWORD *)v7;
      if (((_DWORD)a3 || !v13) && (v9 || v14 != 1 || v8 && v8 != 3))
        v10(v11, a3 / v13);
      if (v13 <= a3)
        objc_msgSend(v12, "crl_appendCharacter:", *(unsigned __int16 *)(v7 + 4));
      v15 = *(_DWORD *)v7;
      v7 += 8;
      a3 = a3 - v15 * v14;

    }
    while (v7 != a2);
  }

  return a3;
}

void sub_1001525C0(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1001525D8(uint64_t a1, unsigned int a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  unsigned int v10;
  id v12;
  unsigned int v13;
  char v14;
  uint64_t v15;

  if (a1 >> 4 >= 0x271)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BEE8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFFF34();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123BF08);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSMutableString *(anonymous namespace)::ideographicNumberStringForSmallValue(unsigned int, CRLWPListIdeographicType, BOOL)"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 308, 0, "inValue too large for ideographicNumberStringForSmallValue");

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v8 = (uint64_t)*(&off_10123BF28 + a2);
  v9 = v7;
  v12 = v9;
  v13 = a2;
  v14 = 0;
  v15 = v8;
  v10 = sub_1001524EC((uint64_t)&unk_100EECE04 + 24 * a2, (uint64_t)&unk_100EECE04 + 24 * a2 + 24, a1, (uint64_t)&v12);
  if (v10)
    sub_1001522F0(v9, v10, a2);
  return v9;
}

void sub_1001527DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100152808(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152838(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152868(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = sub_1001525D8(a2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v5, "appendString:", v4);

}

void sub_1001528C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001528F0(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = sub_1001525D8(a2, 1u);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v5, "appendString:", v4);

}

void sub_100152950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100152978(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = sub_1001525D8(a2, 2u);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v5, "appendString:", v4);

}

void sub_1001529D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100152A00(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = sub_1001525D8(a2, 3u);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v5, "appendString:", v4);

}

void sub_100152A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100152A88(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = sub_1001525D8(a2, 4u);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v5, "appendString:", v4);

}

void sub_100152AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100152B10(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = sub_1001525D8(a2, 5u);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v5, "appendString:", v4);

}

void sub_100152B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100152B98(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152BC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152BF8(void *a1, unsigned int a2)
{
  sub_1001522F0(a1, a2, 0);
}

void sub_100152C00(void *a1, unsigned int a2)
{
  sub_1001522F0(a1, a2, 1);
}

void sub_100152C08(void *a1, unsigned int a2)
{
  sub_1001522F0(a1, a2, 2);
}

void sub_100152C10(void *a1, unsigned int a2)
{
  sub_1001522F0(a1, a2, 3);
}

void sub_100152C18(void *a1, unsigned int a2)
{
  sub_1001522F0(a1, a2, 4);
}

void sub_100152C20(void *a1, unsigned int a2)
{
  sub_1001522F0(a1, a2, 5);
}

id sub_100152C28(int a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v7;
  void *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned __int16 v11;

  LODWORD(v7) = a1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  if ((_DWORD)v7)
  {
    v9 = 0;
    do
    {
      v10 = (v7 - 1);
      if (a4)
        v11 = *(_WORD *)(a2 + 2 * (v10 % a3)) + 96;
      else
        v11 = *(_WORD *)(a2 + 2 * (v10 % a3));
      objc_msgSend(v8, "crl_insertCharacter:atIndex:", v11, 0);
      v7 = (v10 - (v10 % a3)) / a3;
      if (!(_DWORD)v7)
        break;
    }
    while (v9++ < 0x64);
  }
  return v8;
}

void sub_100152CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100152CE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152D10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152D40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152D70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152DA0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100152DD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

unint64_t sub_100152E00(unsigned int a1, void *__b)
{
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1 >= 0x3E8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C058);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E00034();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C078);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "uint (anonymous namespace)::toAbjadUnder1000(uint, unichar *)"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 720, 0, "number out of range");

  }
  else if (a1 < 0x190)
  {
    v4 = 0;
    goto LABEL_14;
  }
  v4 = a1 / 0x190uLL;
  memset_pattern16(__b, &unk_100EED050, (2 * v4));
LABEL_14:
  if (a1 % 0x190 >= 0x64)
  {
    *((_WORD *)__b + v4) = word_100EECFC8[a1 % 0x190 / 0x64 - 1];
    v4 = (v4 + 1);
  }
  v8 = a1 % 0x190 % 0x64;
  if (v8 - 15 <= 1)
  {
    *((_WORD *)__b + v4) = 1610;
    v9 = (v4 + 2);
    v10 = v8 - 11;
    LODWORD(v4) = v4 + 1;
LABEL_22:
    *((_WORD *)__b + v4) = word_100EECFEE[v10];
    v4 = v9;
    goto LABEL_23;
  }
  if (v8 >= 0xA)
  {
    *((_WORD *)__b + v4) = word_100EECFDC[a1 % 0x190 % 0x64 / 0xA - 1];
    v4 = (v4 + 1);
  }
  if (a1 % 0x190 % 0x64 % 0xA)
  {
    v10 = a1 % 0x190 % 0x64 % 0xA - 1;
    v9 = (v4 + 1);
    goto LABEL_22;
  }
LABEL_23:
  if (v4 >= 6)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C098);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DFFFB4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C0B8);
    v11 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "uint (anonymous namespace)::toAbjadUnder1000(uint, unichar *)"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 742, 0, "string out of range");

  }
  return v4;
}

void sub_1001531F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100153230(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100153260(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100153290(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001532C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001532F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100153320(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100153350(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100153380(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

unint64_t sub_1001533B0(unsigned int a1, void *__b)
{
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1 >= 0x3E8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C158);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E00134();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123C178);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "uint (anonymous namespace)::toHebrewUnder1000(uint, unichar *)"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 653, 0, "number out of range");

  }
  else if (a1 < 0x190)
  {
    v4 = 0;
    goto LABEL_14;
  }
  v4 = a1 / 0x190uLL;
  memset_pattern16(__b, &unk_100EED060, (2 * v4));
LABEL_14:
  if (a1 % 0x190 >= 0x64)
  {
    *((_WORD *)__b + v4) = a1 % 0x190 / 0x64 + 1510;
    v4 = (v4 + 1);
  }
  v8 = a1 % 0x190 % 0x64;
  if (v8 - 15 <= 1)
  {
    v9 = v4 + 1;
    *((_WORD *)__b + v4) = 1496;
    LODWORD(v4) = v4 + 2;
    *((_WORD *)__b + v9) = v8 + 1478;
LABEL_23:
    v10 = v4;
    *((_WORD *)__b + v4) = *((_WORD *)__b + (v4 - 1));
    *((_WORD *)__b + (v4 - 1)) = 1524;
    v4 = (v4 + 1);
    if (v10 >= 6)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123C198);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100E000B4();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123C1B8);
      v11 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DFF474();
      }

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "uint (anonymous namespace)::toHebrewUnder1000(uint, unichar *)"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v12, v13, 684, 0, "string out of range");

    }
    return v4;
  }
  if (a1 % 0x190 % 0x64 >= 0xA)
  {
    *((_WORD *)__b + v4) = word_100EED032[v8 / 0xAu - 1];
    v4 = (v4 + 1);
  }
  if (a1 % 0x190 % 0x64 % 0xA)
  {
    *((_WORD *)__b + v4) = a1 % 0x190 % 0x64 % 0xA + 1487;
    v4 = (v4 + 1);
  }
  if (v4 >= 2)
    goto LABEL_23;
  return v4;
}

void sub_1001537B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001537EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015381C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015384C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015387C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001538AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001538DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015390C()
{
  uint64_t i;

  for (i = &stru_1000000B0.segname[8]; i != -8; i -= 16)

}

void sub_100154548(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100154578(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001549A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001549D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100154C5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100154C8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_100154E28(double *a1, double a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v4 = *a1;
  v5 = a1[1];
  v6 = sub_1000603B8(a2, a3, *a1);
  v8 = v7;
  v9 = a1[2];
  v10 = a1[3];
  v11 = sub_1000603B8(v9, v10, v4);
  v13 = sub_1000603C4(v6, v8, v11, v12);
  v14 = v13 / sub_10006010C(v9, v10, v4, v5);
  return sub_1003C65EC(v14, 0.0, 1.0);
}

void sub_100155458()
{
  operator delete();
}

void sub_1001556E4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  id v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[4];
  v3 = (void *)a1[5];
  v4 = *(NSObject **)(v2 + 168);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10015578C;
  v12[3] = &unk_10123C2A0;
  v12[4] = v2;
  v5 = v3;
  v6 = a1[7];
  v13 = v5;
  v14 = v6;
  v15 = a1[8];
  dispatch_sync(v4, v12);
  v11 = a1[6];
  if (v11)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(v11, v7, v8, v9, v10);

}

void sub_100155778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10015578C(uint64_t a1)
{
  void *v2;
  uint64_t v8;
  id v9;
  _QWORD v11[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 80), *(id *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "_setInputType:", *(_QWORD *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 304) = *(_QWORD *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "setUseRuler:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setCanSnapToRuler:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setIsSnappedToRuler:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setStrokeMaxForce:", 0.0);
  objc_msgSend(*(id *)(a1 + 32), "setTouchSensitivity:", 1.0);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) = 0;
  memset(v11, 0, sizeof(v11));
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
  __asm { FMOV            V0.2D, #1.0 }
  v12 = _Q0;
  objc_msgSend(v2, "_setBaseValues:", v11);
  objc_msgSend(*(id *)(a1 + 40), "timestamp");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 288) + 104) = v8;
  v9 = objc_msgSend(*(id *)(a1 + 32), "outputFilter");
  return (*(uint64_t (**)(id, _QWORD, double))(*(_QWORD *)v9 + 16))(v9, *(_QWORD *)(a1 + 48), *(double *)(*(_QWORD *)(a1 + 32) + 304));
}

id sub_1001558FC(uint64_t a1)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 72);
  objc_msgSend(*(id *)(a1 + 32), "setRulerTransform:", v4);
  objc_msgSend(*(id *)(a1 + 32), "setRulerWidth:", *(double *)(a1 + 88));
  objc_msgSend(*(id *)(a1 + 32), "setUseRuler:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "setCanSnapToRuler:", 1);
}

void sub_100155FFC(uint64_t a1, double a2)
{
  int v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2 <= 0.0)
  {
    v3 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123CF80);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E00304(v3, v4, a2);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123CFA0);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLPKPointReductionFilter::setPointReductionFilterThresholdMultiplier(CGFloat)"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKPointReductionFilter.h"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 46, 0, "Unexpected multiplier value < 0 (%f).", *(_QWORD *)&a2);

  }
  else
  {
    *(double *)(a1 + 128) = a2;
  }
}

void sub_10015619C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10015625C(uint64_t a1)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend(*(id *)(a1 + 32), "outputFilter");
  result = (*(uint64_t (**)(id, _QWORD))(*(_QWORD *)v2 + 32))(v2, *(_QWORD *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10015639C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10015D584((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 80 * a2;
  }
}

void sub_100156678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001566A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001566D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100156794(uint64_t a1)
{
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 64))
  {
    sub_10015639C(v2 + 32, *(_QWORD *)(v2 + 56));
    v3 = objc_msgSend(*(id *)(a1 + 32), "outputFilter");
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = (*(uint64_t (**)(id, _QWORD, uint64_t))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(_QWORD *)(a1 + 32) + 32);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  sub_10015639C(*(_QWORD *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v2 + 40) - *(_QWORD *)(v2 + 32)) >> 4));
  v4 = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (_BYTE *)v4[5];
  v7 = (_BYTE *)(v4[4] + 80 * v5);
  if (v6 != v7)
  {
    memmove((void *)(**(_QWORD **)(a1 + 48) + 80 * v5), v7, v6 - v7);
    v4 = *(_QWORD **)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4[7];
}

void sub_1001568F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  v1 = *(_QWORD **)(a1 + 32);
  v2 = a1 + 40;
  v3 = v1[14];
  v4 = v1[15];
  if (v3 >= v4)
  {
    v10 = v1[13];
    v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v3 - v10) >> 3);
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x2E8BA2E8BA2E8BALL)
      sub_100007810();
    v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x1745D1745D1745DLL)
      v14 = 0x2E8BA2E8BA2E8BALL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)sub_100007898((uint64_t)(v1 + 15), v14);
    else
      v15 = 0;
    v16 = &v15[88 * v11];
    v17 = &v15[88 * v14];
    v18 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v2;
    *((_OWORD *)v16 + 1) = v18;
    v19 = *(_OWORD *)(v2 + 32);
    v20 = *(_OWORD *)(v2 + 48);
    v21 = *(_OWORD *)(v2 + 64);
    *((_QWORD *)v16 + 10) = *(_QWORD *)(v2 + 80);
    *((_OWORD *)v16 + 3) = v20;
    *((_OWORD *)v16 + 4) = v21;
    *((_OWORD *)v16 + 2) = v19;
    v9 = v16 + 88;
    v23 = (char *)v1[13];
    v22 = (char *)v1[14];
    if (v22 != v23)
    {
      do
      {
        v24 = *(_OWORD *)(v22 - 88);
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v22 - 72);
        *(_OWORD *)(v16 - 88) = v24;
        v25 = *(_OWORD *)(v22 - 56);
        v26 = *(_OWORD *)(v22 - 40);
        v27 = *(_OWORD *)(v22 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v22 - 1);
        *(_OWORD *)(v16 - 24) = v27;
        *(_OWORD *)(v16 - 40) = v26;
        *(_OWORD *)(v16 - 56) = v25;
        v16 -= 88;
        v22 -= 88;
      }
      while (v22 != v23);
      v22 = (char *)v1[13];
    }
    v1[13] = v16;
    v1[14] = v9;
    v1[15] = v17;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)v3 = *(_OWORD *)v2;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_OWORD *)(a1 + 72);
    v7 = *(_OWORD *)(a1 + 88);
    v8 = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(v3 + 80) = *(_QWORD *)(a1 + 120);
    *(_OWORD *)(v3 + 48) = v7;
    *(_OWORD *)(v3 + 64) = v8;
    *(_OWORD *)(v3 + 32) = v6;
    v9 = (char *)(v3 + 88);
  }
  v1[14] = v9;
}

id sub_100156ADC(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  int64_t v15;
  id result;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE **)(v2 + 104);
  if (*(_BYTE **)(v2 + 112) != v3)
  {
    v4 = 0;
    v5 = 0;
    while (2)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v2 + 96);
      v8 = *(_QWORD *)(v2 + 8);
      v9 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v2 + 16) - v8) >> 3);
      v5 = v3;
      while (v9 <= v7)
      {
LABEL_8:
        v5 += 11;
        if (v5 == *(_QWORD **)(v2 + 112))
        {
          v3 = v5;
          if ((v4 & 1) == 0)
            goto LABEL_19;
          goto LABEL_15;
        }
      }
      v10 = v9 - v7;
      v11 = 88 * v7;
      while (*(_QWORD *)(v8 + v11 + 64) != v5[8])
      {
        v11 += 88;
        if (!--v10)
          goto LABEL_8;
      }
      *(_QWORD *)(v8 + v11 + 16) = v5[2];
      v12 = *(_QWORD *)(a1 + 32);
      if (!*(_QWORD *)(v12 + 88))
      {
        *(double *)(*(_QWORD *)(v12 + 8) + v11 + 16) = *(double *)(*(_QWORD *)(v12 + 8) + v11 + 16)
                                                     / *(double *)(v12 + 312);
        v12 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v12 + 8) + v11 + 64) = -1;
      v2 = *(_QWORD *)(a1 + 32);
      v3 = v5 + 11;
      v4 = 1;
      v6 = v5;
      if (v5 + 11 != *(_QWORD **)(v2 + 112))
        continue;
      break;
    }
LABEL_15:
    v13 = *(_QWORD **)(v2 + 104);
    v14 = v6 + 11;
    if (v13 != v6 + 11)
    {
      v15 = v3 - v14;
      if (v3 != v14)
        memmove(*(void **)(v2 + 104), v14, v3 - v14);
      *(_QWORD *)(v2 + 112) = (char *)v13 + v15;
      v2 = *(_QWORD *)(a1 + 32);
    }
  }
LABEL_19:
  result = objc_msgSend((id)v2, "updateImmutableCount");
  v17 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v17 + 128))
  {
    if (*(_QWORD *)(v17 + 96) >= (unint64_t)(0x2E8BA2E8BA2E8BA3
                                                   * ((uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 3)))
    {
      *(_BYTE *)(v17 + 128) = 0;
      return (id)dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136));
    }
  }
  return result;
}

void sub_100156D5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100156E60(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  _QWORD v4[5];
  void *__p;
  void *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 80))
  {
    v3 = *(NSObject **)(v1 + 168);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3321888768;
    v4[2] = sub_100156F18;
    v4[3] = &unk_10123C3D0;
    v6 = 0;
    v7 = 0;
    __p = 0;
    sub_10015D70C(&__p, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3));
    v4[4] = *(_QWORD *)(a1 + 32);
    dispatch_sync(v3, v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
}

_QWORD *sub_100156F18(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[5];
  uint64_t v13;

  v1 = result[6] - result[5];
  if (v1 >= 1)
  {
    v2 = result;
    v3 = 0;
    v4 = v1 / 0x58uLL;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    do
    {
      v6 = (void *)v2[4];
      v7 = v2[5] + v3;
      v8 = *(_OWORD *)(v7 + 16);
      v12[0] = *(_OWORD *)v7;
      v12[1] = v8;
      v10 = *(_OWORD *)(v7 + 48);
      v9 = *(_OWORD *)(v7 + 64);
      v11 = *(_OWORD *)(v7 + 32);
      v13 = *(_QWORD *)(v7 + 80);
      v12[3] = v10;
      v12[4] = v9;
      v12[2] = v11;
      result = objc_msgSend(v6, "_drawingAddPoint:", v12);
      v3 += 88;
      --v5;
    }
    while (v5);
  }
  return result;
}

_QWORD *sub_100156FB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return sub_10015D70C(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
}

void sub_100156FE4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_10015707C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 80))
  {
    v2 = *(NSObject **)(v1 + 168);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100157110;
    v3[3] = &unk_10123C3A8;
    v3[4] = v1;
    v6 = *(_OWORD *)(a1 + 72);
    v7 = *(_OWORD *)(a1 + 88);
    v8 = *(_OWORD *)(a1 + 104);
    v9 = *(_QWORD *)(a1 + 120);
    v4 = *(_OWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 56);
    dispatch_sync(v2, v3);
  }
}

id sub_100157110(uint64_t a1)
{
  void *v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[5];
  uint64_t v6;

  v1 = *(void **)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 88);
  v5[2] = *(_OWORD *)(a1 + 72);
  v5[3] = v2;
  v5[4] = *(_OWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 120);
  v3 = *(_OWORD *)(a1 + 56);
  v5[0] = *(_OWORD *)(a1 + 40);
  v5[1] = v3;
  return objc_msgSend(v1, "_drawingAddPoint:", v5);
}

void sub_1001573C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1001573DC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  dispatch_time_t v4;
  dispatch_queue_global_t global_queue;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD block[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 80))
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    v3 = *(NSObject **)(v2 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001575A0;
    block[3] = &unk_10123C408;
    block[4] = v2;
    block[5] = &v15;
    dispatch_sync(v3, block);
    if (*((_BYTE *)v16 + 24))
    {
      v4 = dispatch_time(0, 200000000);
      global_queue = dispatch_get_global_queue(25, 0);
      v6 = objc_claimAutoreleasedReturnValue(global_queue);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100157648;
      v13[3] = &unk_101231C50;
      v13[4] = *(_QWORD *)(a1 + 32);
      dispatch_after(v4, v6, v13);

      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
    }
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(NSObject **)(v7 + 168);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100157650;
    v12[3] = &unk_101231C50;
    v12[4] = v7;
    dispatch_sync(v8, v12);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(NSObject **)(v9 + 168);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001576FC;
    v11[3] = &unk_101231C50;
    v11[4] = v9;
    dispatch_sync(v10, v11);
    _Block_object_dispose(&v15, 8);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_100157588(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_1001575A0(uint64_t a1)
{
  id v2;
  id result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  objc_msgSend(*(id *)(a1 + 32), "removePredictedTouches");
  v2 = objc_msgSend(*(id *)(a1 + 32), "outputFilter");
  (*(void (**)(id))(*(_QWORD *)v2 + 24))(v2);
  objc_msgSend(*(id *)(a1 + 32), "setCanSnapToRuler:", 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200) + 40) = 0;
  result = objc_msgSend(*(id *)(a1 + 32), "updateImmutableCount");
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) != 0x2E8BA2E8BA2E8BA3
                                                 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)) >> 3))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 128) = 1;
  }
  return result;
}

id sub_100157648(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "drawingUpdateAllPoints");
}

void sub_100157650(uint64_t a1)
{
  id v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "compressionFilter");
  (*(void (**)(id, _QWORD, void **))(*(_QWORD *)v2 + 40))(v2, 0, &__p);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "_setPoints:count:copy:");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "set_inflight:", 0);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1001576E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001576FC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "outputFilter");
  (*(void (**)(id))(*(_QWORD *)v2 + 48))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;

}

void sub_1001577D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1001577E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD block[5];

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 168);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100157858;
  block[3] = &unk_101231C50;
  block[4] = v2;
  dispatch_sync(v3, block);
}

void sub_100157858(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "outputFilter");
  (*(void (**)(id))(*(_QWORD *)v2 + 48))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;

}

void sub_100157D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;

  v36 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v36;
    operator delete(v36);
  }
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  v37 = *(void **)(v34 - 160);
  if (v37)
  {
    *(_QWORD *)(v34 - 152) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v34 - 136);
  if (v38)
  {
    *(_QWORD *)(v34 - 128) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

void sub_100157FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  uint64_t v24;
  void *v26;

  _Block_object_dispose(&a18, 8);
  v26 = *(void **)(v24 - 72);
  if (v26)
  {
    *(_QWORD *)(v24 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100158020(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100158030(uint64_t a1)
{

}

void sub_100158038(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100158100(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  _QWORD block[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 168);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100158170;
  block[3] = &unk_10123C4A8;
  v4 = v1;
  dispatch_async(v2, block);

}

uint64_t sub_100158170(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10015845C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v4 = objc_msgSend(WeakRetained, "getInputUpdatedRangeFromIndex:", a2);

  return v4;
}

void sub_100158498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001584A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v6 = objc_msgSend(WeakRetained, "copyInputUpdatedRangeFromIndex:into:", a2, a3);

  return v6;
}

void sub_1001584F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100158504(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  objc_msgSend(WeakRetained, "reset");

}

void sub_100158538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10015854C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  return a1;
}

void sub_100158574(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  operator delete();
}

uint64_t sub_1001585B4(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 48));
  return a1;
}

void sub_1001585DC(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 48));
  operator delete();
}

double sub_100158614(uint64_t a1, uint64_t a2, __n128 a3)
{
  double v3;
  uint64_t v6;
  double result;

  v3 = a3.n128_f64[0];
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v6 + 16))(v6, a2, a3);
  result = v3 * 0.5;
  *(double *)(a1 + 24) = v3;
  *(double *)(a1 + 32) = v3 * 0.5;
  *(_QWORD *)(a1 + 40) = a2;
  return result;
}

uint64_t sub_10015866C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *a3;
  v5 = a3[1];
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ((objc_msgSend(WeakRetained, "isSnappedToRuler") & 1) != 0)
  {

  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);

    if (v9 != 1)
    {
      v10 = (v5 - v6) / 88;
      v11 = *a3;
      v12 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
      if (v10 + 1 < v12 - 1)
      {
        v13 = (double *)(v11 + 88 * (v10 + 1));
        v15 = *v13;
        v14 = v13[1];
        v16 = (double *)(v11 + 88 * v10);
        v17 = *v16;
        v18 = v12 - v10 - 2;
        v19 = v16 + 12;
        do
        {
          v20 = v19[10];
          v21 = v19[11];
          v22 = sub_1000603D0(v15, v14, v17);
          v23 = sub_1000603D0(v20, v21, v22);
          v17 = sub_1000603DC(v23, v24, 0.333333333);
          v26 = v25;
          v27 = sub_1000603B8(v17, v25, v15);
          v29 = v28;
          v30 = sub_100061070(v27, v28);
          v31 = *(double *)(a1 + 32);
          if (v30 >= v31)
          {
            v32 = sub_1000603DC(v27, v29, v31 / v30);
            v17 = sub_1000603D0(v15, v14, v32);
            v26 = v33;
          }
          *(v19 - 1) = v17;
          *v19 = v26;
          v19 += 11;
          v14 = v21;
          v15 = v20;
          --v18;
        }
        while (v18);
      }
      if (v7 <= 1)
        v34 = 1;
      else
        v34 = v7;
      v35 = v34 - 1;
      if (!*(_BYTE *)(a1 + 16))
        return v35;
    }
  }
  return v7;
}

void sub_10015884C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10015885C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

_QWORD *sub_100158890(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = off_10123C598;
  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  *a1 = off_10122C0C0;
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  *a1 = off_10122C128;
  v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_100158914(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = off_10123C598;
  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  *a1 = off_10122C0C0;
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  *a1 = off_10122C128;
  v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  operator delete();
}

float64x2_t sub_1001589A8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  float64x2_t v6;
  float64x2_t result;
  double v8;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v8 = a3;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    a3 = v8;
  }
  *(double *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  v6 = vmulq_n_f64(vmulq_n_f64((float64x2_t)xmmword_100EED0B0, a3), *(double *)(a1 + 128));
  result = vmulq_f64(v6, v6);
  *(float64x2_t *)(a1 + 136) = result;
  return result;
}

_QWORD *sub_100158A14(uint64_t a1)
{
  _QWORD *result;

  result = sub_100007444(a1);
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  return result;
}

uint64_t sub_100158A3C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  sub_100007118(a1 + 48, *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

void sub_100158A98(uint64_t a1)
{
  void **v2;
  unint64_t v3;
  char *v4;
  double *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  unsigned int v27;
  NSObject *v28;
  void *v29;
  char *v30;
  double *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  double *v37;
  double *v38;
  int64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  double *v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  double v84;
  int v85;
  int64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  char *v112;
  char *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  double v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  double v122;
  unsigned int v123;
  NSObject *log;
  os_log_t logb;
  NSObject *loga;
  void **v127;
  void **v128;
  unint64_t v129;
  _QWORD *v130;
  void **v131;
  uint8_t buf[4];
  unsigned int v133;
  __int16 v134;
  const char *v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  int v139;

  if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48) || *(_BYTE *)(a1 + 200))
    return;
  sub_1001596A0(a1);
  v127 = (void **)(a1 + 80);
  sub_100007118(a1 + 80, *(_QWORD *)(a1 + 72));
  v2 = (void **)(a1 + 152);
  sub_100159824(a1 + 152, 0);
  v3 = *(_QWORD *)(a1 + 168);
  v128 = (void **)(a1 + 152);
  v130 = (_QWORD *)(a1 + 168);
  v4 = *(char **)(a1 + 160);
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)*v2;
    v7 = (v4 - (_BYTE *)*v2) >> 4;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60)
      sub_100007810();
    v9 = v3 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (char *)sub_10001FB2C((uint64_t)v130, v10);
      v6 = *(char **)(a1 + 152);
      v4 = *(char **)(a1 + 160);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[16 * v7];
    v13 = &v11[16 * v10];
    *(_QWORD *)v12 = -1;
    *((_QWORD *)v12 + 1) = 0;
    v5 = (double *)(v12 + 16);
    if (v4 != v6)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v4 - 1);
        v12 -= 16;
        v4 -= 16;
      }
      while (v4 != v6);
      v6 = (char *)*v2;
    }
    *(_QWORD *)(a1 + 152) = v12;
    *(_QWORD *)(a1 + 160) = v5;
    *(_QWORD *)(a1 + 168) = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v4 = -1;
    *((_QWORD *)v4 + 1) = 0;
    v5 = (double *)(v4 + 16);
  }
  *(_QWORD *)(a1 + 160) = v5;
  v14 = *(_QWORD *)(a1 + 112);
  v15 = v14 + 1;
  if (v14 + 1 >= (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)))
    goto LABEL_61;
  v16 = (16 * v14) | 8;
  v17 = 88 * v14 + 8;
  do
  {
    v18 = v14;
    v14 = v15;
    v19 = *(_QWORD *)(a1 + 112);
    v20 = 1.79769313e308;
    if (v18 < v19)
      goto LABEL_44;
    v21 = v17;
    v22 = v16;
    v23 = *(_QWORD *)(a1 + 112);
    do
    {
      v24 = sub_10006010C(*(double *)(*(_QWORD *)(a1 + 48) + 88 * v14), *(double *)(*(_QWORD *)(a1 + 48) + 88 * v14 + 8), *(double *)(*(_QWORD *)(a1 + 48) + v21 - 8), *(double *)(*(_QWORD *)(a1 + 48) + v21));
      if (*(double *)(*(_QWORD *)(a1 + 152) - 16 * v19 + v22) >= 1.79769313e308 || v24 < *(double *)(a1 + 136))
        goto LABEL_31;
      v25 = sub_100159854(a1, v18, v14) + *(double *)(*(_QWORD *)(a1 + 152) - 16 * *(_QWORD *)(a1 + 112) + v22);
      if (v25 < v20)
      {
        v23 = v18;
        v20 = v25;
      }
      v26 = v14;
      if (v14 < 0)
      {
        v27 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123C608);
        log = off_1013D9070;
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109890;
          v133 = v27;
          v134 = 2082;
          v135 = "virtual void CRLPKPointReductionFilter::run()";
          v136 = 2082;
          v137 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKPointReductionFilter.h";
          v138 = 1024;
          v139 = 170;
          _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", buf, 0x22u);
        }
        v123 = v27;
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123C628);
        v28 = off_1013D9070;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          loga = v28;
          v30 = (char *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
          *(_DWORD *)buf = 67109378;
          v133 = v123;
          v134 = 2114;
          v135 = v30;
          _os_log_error_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

          v28 = loga;
        }

        logb = (os_log_t)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "virtual void CRLPKPointReductionFilter::run()"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKPointReductionFilter.h"));
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", logb, v29, 170, 0, "Out-of-bounds type assignment was clamped to max");

        v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v18 < v26 - 50 || v24 > *(double *)(a1 + 144))
        break;
      v19 = *(_QWORD *)(a1 + 112);
LABEL_31:
      v22 -= 16;
      v21 -= 88;
      v94 = v18-- <= v19;
    }
    while (!v94);
    v5 = *(double **)(a1 + 160);
    v19 = v23;
LABEL_44:
    if ((unint64_t)v5 >= *v130)
    {
      v31 = (double *)*v128;
      v32 = ((char *)v5 - (_BYTE *)*v128) >> 4;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60)
        sub_100007810();
      v34 = *v130 - (_QWORD)v31;
      if (v34 >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (char *)sub_10001FB2C((uint64_t)v130, v35);
        v31 = *(double **)(a1 + 152);
        v5 = *(double **)(a1 + 160);
      }
      else
      {
        v36 = 0;
      }
      v37 = (double *)&v36[16 * v32];
      *(_QWORD *)v37 = v19;
      v37[1] = v20;
      v38 = v37;
      if (v5 != v31)
      {
        do
        {
          *((_OWORD *)v38 - 1) = *((_OWORD *)v5 - 1);
          v38 -= 2;
          v5 -= 2;
        }
        while (v5 != v31);
        v31 = (double *)*v128;
      }
      v5 = v37 + 2;
      *(_QWORD *)(a1 + 152) = v38;
      *(_QWORD *)(a1 + 160) = v37 + 2;
      *(_QWORD *)(a1 + 168) = &v36[16 * v35];
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_QWORD *)v5 = v19;
      v5[1] = v20;
      v5 += 2;
    }
    *(_QWORD *)(a1 + 160) = v5;
    v15 = v14 + 1;
    v16 += 16;
    v17 += 88;
  }
  while (v14 + 1 < (unint64_t)(0x2E8BA2E8BA2E8BA3
                                     * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)));
LABEL_61:
  v131 = (void **)(a1 + 176);
  sub_1001599B4(a1 + 176, 0);
  v39 = *(_QWORD *)(a1 + 112);
  v40 = v39 + ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 4) - 1;
  if (v40 > v39)
  {
    v41 = (_QWORD *)(a1 + 192);
    v42 = *(uint64_t **)(a1 + 184);
    do
    {
      if ((unint64_t)v42 >= *v41)
      {
        v44 = (uint64_t *)*v131;
        v45 = ((char *)v42 - (_BYTE *)*v131) >> 3;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61)
          sub_100007810();
        v47 = *v41 - (_QWORD)v44;
        if (v47 >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          v49 = (char *)sub_10002BA34(a1 + 192, v48);
          v44 = *(uint64_t **)(a1 + 176);
          v42 = *(uint64_t **)(a1 + 184);
        }
        else
        {
          v49 = 0;
        }
        v50 = (uint64_t *)&v49[8 * v45];
        *v50 = v40;
        v43 = v50 + 1;
        while (v42 != v44)
        {
          v51 = *--v42;
          *--v50 = v51;
        }
        *(_QWORD *)(a1 + 176) = v50;
        *(_QWORD *)(a1 + 184) = v43;
        *(_QWORD *)(a1 + 192) = &v49[8 * v48];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *v42 = v40;
        v43 = v42 + 1;
      }
      *(_QWORD *)(a1 + 184) = v43;
      v39 = *(_QWORD *)(a1 + 112);
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 16 * (v40 - v39));
      v42 = v43;
    }
    while (v40 > v39);
  }
  v53 = *(double **)(a1 + 80);
  v52 = *(char **)(a1 + 88);
  v54 = v52 - (char *)v53;
  if (v52 == (char *)v53)
  {
    v55 = *(_QWORD *)(a1 + 96);
    v56 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v52 >= v55)
    {
      v61 = v54 / 88;
      v62 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v55 - (_QWORD)v53) >> 3);
      if (2 * v62 <= v54 / 88 + 1)
        v63 = v61 + 1;
      else
        v63 = 2 * v62;
      if (v62 >= 0x1745D1745D1745DLL)
        v64 = 0x2E8BA2E8BA2E8BALL;
      else
        v64 = v63;
      v65 = (char *)sub_100007898(a1 + 96, v64);
      v66 = &v65[88 * v61];
      v68 = &v65[88 * v67];
      v69 = *(_OWORD *)(v56 + 16);
      *(_OWORD *)v66 = *(_OWORD *)v56;
      *((_OWORD *)v66 + 1) = v69;
      v70 = *(_OWORD *)(v56 + 32);
      v71 = *(_OWORD *)(v56 + 48);
      v72 = *(_OWORD *)(v56 + 64);
      *((_QWORD *)v66 + 10) = *(_QWORD *)(v56 + 80);
      *((_OWORD *)v66 + 3) = v71;
      *((_OWORD *)v66 + 4) = v72;
      *((_OWORD *)v66 + 2) = v70;
      v52 = v66 + 88;
      v74 = *(char **)(a1 + 80);
      v73 = *(char **)(a1 + 88);
      if (v73 != v74)
      {
        do
        {
          v75 = *(_OWORD *)(v73 - 88);
          *(_OWORD *)(v66 - 72) = *(_OWORD *)(v73 - 72);
          *(_OWORD *)(v66 - 88) = v75;
          v76 = *(_OWORD *)(v73 - 56);
          v77 = *(_OWORD *)(v73 - 40);
          v78 = *(_OWORD *)(v73 - 24);
          *((_QWORD *)v66 - 1) = *((_QWORD *)v73 - 1);
          *(_OWORD *)(v66 - 24) = v78;
          *(_OWORD *)(v66 - 40) = v77;
          *(_OWORD *)(v66 - 56) = v76;
          v66 -= 88;
          v73 -= 88;
        }
        while (v73 != v74);
        v73 = (char *)*v127;
      }
      *(_QWORD *)(a1 + 80) = v66;
      *(_QWORD *)(a1 + 88) = v52;
      *(_QWORD *)(a1 + 96) = v68;
      if (v73)
        operator delete(v73);
    }
    else
    {
      v57 = *(_OWORD *)(v56 + 16);
      *(_OWORD *)v52 = *(_OWORD *)v56;
      *((_OWORD *)v52 + 1) = v57;
      v58 = *(_OWORD *)(v56 + 32);
      v59 = *(_OWORD *)(v56 + 48);
      v60 = *(_OWORD *)(v56 + 64);
      *((_QWORD *)v52 + 10) = *(_QWORD *)(v56 + 80);
      *((_OWORD *)v52 + 3) = v59;
      *((_OWORD *)v52 + 4) = v60;
      *((_OWORD *)v52 + 2) = v58;
      v52 += 88;
    }
    *(_QWORD *)(a1 + 88) = v52;
    v39 = *(_QWORD *)(a1 + 112);
    v53 = *(double **)(a1 + 80);
  }
  v79 = *(char **)(a1 + 176);
  v80 = *(char **)(a1 + 184);
  if (v52 - (char *)v53 == 88
    && v80 - v79 == 8
    && (v81 = *(_QWORD *)(a1 + 56), sub_10005FDF0(*v53, v53[1], *(double *)(v81 - 88), *(double *)(v81 - 80))))
  {
    v82 = *(_QWORD *)(a1 + 48);
    if (v81 - v82 >= 89)
    {
      v83 = (v81 - v82) / 0x58uLL;
      v84 = *((double *)v52 - 9);
      v85 = *(v52 - 8);
      if (v83 <= 2)
        v83 = 2;
      v86 = v83 - 1;
      v87 = v82 + 104;
      do
      {
        if (v84 <= *(double *)v87)
          v84 = *(double *)v87;
        *((double *)v52 - 9) = v84;
        if (!v85 || *(_BYTE *)(v87 + 64))
        {
          if (v85 == *(unsigned __int8 *)(v87 + 64))
          {
            v88 = *((double *)v52 - 7);
            if (v88 <= *(double *)(v87 + 16))
              v88 = *(double *)(v87 + 16);
            *((double *)v52 - 7) = v88;
          }
        }
        else
        {
          v85 = 0;
          *((_QWORD *)v52 - 7) = *(_QWORD *)(v87 + 16);
          *(v52 - 8) = 0;
        }
        v87 += 88;
        --v86;
      }
      while (v86);
    }
  }
  else
  {
    if (v80 != v79)
    {
      v129 = 0;
      v89 = -1;
      do
      {
        v91 = *((_QWORD *)v80 - 1);
        v80 -= 8;
        v90 = v91;
        v92 = (v52 - (char *)v53) / 88;
        if (v91 < *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 120))
        {
          v93 = *(_QWORD *)(a1 + 72) + 5;
          v94 = v92 > v93;
          if (v92 > v93)
            v89 = (v52 - (char *)v53) / 88;
          v95 = v129;
          if (v94)
            v95 = v90;
          v129 = v95;
        }
        v96 = *(_QWORD *)(a1 + 48) + 88 * v90;
        v97 = *(_QWORD *)(a1 + 96);
        if ((unint64_t)v52 >= v97)
        {
          v102 = v92 + 1;
          if (v92 + 1 > 0x2E8BA2E8BA2E8BALL)
            sub_100007810();
          v103 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v97 - (_QWORD)v53) >> 3);
          if (2 * v103 > v102)
            v102 = 2 * v103;
          if (v103 >= 0x1745D1745D1745DLL)
            v104 = 0x2E8BA2E8BA2E8BALL;
          else
            v104 = v102;
          if (v104)
            v105 = (char *)sub_100007898(a1 + 96, v104);
          else
            v105 = 0;
          v106 = &v105[88 * v92];
          v107 = *(_OWORD *)(v96 + 16);
          *(_OWORD *)v106 = *(_OWORD *)v96;
          *((_OWORD *)v106 + 1) = v107;
          v108 = *(_OWORD *)(v96 + 32);
          v109 = *(_OWORD *)(v96 + 48);
          v110 = *(_OWORD *)(v96 + 64);
          *((_QWORD *)v106 + 10) = *(_QWORD *)(v96 + 80);
          *((_OWORD *)v106 + 3) = v109;
          *((_OWORD *)v106 + 4) = v110;
          *((_OWORD *)v106 + 2) = v108;
          v112 = *(char **)(a1 + 80);
          v111 = *(char **)(a1 + 88);
          v113 = v106;
          if (v111 != v112)
          {
            do
            {
              v114 = *(_OWORD *)(v111 - 88);
              *(_OWORD *)(v113 - 72) = *(_OWORD *)(v111 - 72);
              *(_OWORD *)(v113 - 88) = v114;
              v115 = *(_OWORD *)(v111 - 56);
              v116 = *(_OWORD *)(v111 - 40);
              v117 = *(_OWORD *)(v111 - 24);
              *((_QWORD *)v113 - 1) = *((_QWORD *)v111 - 1);
              *(_OWORD *)(v113 - 24) = v117;
              *(_OWORD *)(v113 - 40) = v116;
              *(_OWORD *)(v113 - 56) = v115;
              v113 -= 88;
              v111 -= 88;
            }
            while (v111 != v112);
            v111 = (char *)*v127;
          }
          v52 = v106 + 88;
          *(_QWORD *)(a1 + 80) = v113;
          *(_QWORD *)(a1 + 88) = v106 + 88;
          *(_QWORD *)(a1 + 96) = &v105[88 * v104];
          if (v111)
            operator delete(v111);
        }
        else
        {
          v98 = *(_OWORD *)(v96 + 16);
          *(_OWORD *)v52 = *(_OWORD *)v96;
          *((_OWORD *)v52 + 1) = v98;
          v99 = *(_OWORD *)(v96 + 32);
          v100 = *(_OWORD *)(v96 + 48);
          v101 = *(_OWORD *)(v96 + 64);
          *((_QWORD *)v52 + 10) = *(_QWORD *)(v96 + 80);
          *((_OWORD *)v52 + 3) = v100;
          *((_OWORD *)v52 + 4) = v101;
          *((_OWORD *)v52 + 2) = v99;
          v52 += 88;
        }
        *(_QWORD *)(a1 + 88) = v52;
        v53 = *(double **)(a1 + 80);
        *((double *)v52 - 2) = sub_10006108C(v53[11 * v92 - 11], v53[11 * v92 - 10], *((double *)v52 - 11), *((double *)v52 - 10));
        if (v39 + 1 < v90)
        {
          v118 = *((double *)v52 - 9);
          v119 = *(v52 - 8);
          v120 = ~v39 + v90;
          v121 = *(_QWORD *)(a1 + 48) + 88 * v39 + 104;
          do
          {
            if (v118 <= *(double *)v121)
              v118 = *(double *)v121;
            *((double *)v52 - 9) = v118;
            if (!v119 || *(_BYTE *)(v121 + 64))
            {
              if (v119 == *(unsigned __int8 *)(v121 + 64))
              {
                v122 = *((double *)v52 - 7);
                if (v122 <= *(double *)(v121 + 16))
                  v122 = *(double *)(v121 + 16);
                *((double *)v52 - 7) = v122;
              }
            }
            else
            {
              v119 = 0;
              *((_QWORD *)v52 - 7) = *(_QWORD *)(v121 + 16);
              *(v52 - 8) = 0;
            }
            v121 += 88;
            --v120;
          }
          while (v120);
        }
        v39 = v90;
      }
      while (v80 != *v131);
      if (v89 > 0)
      {
        *(_QWORD *)(a1 + 72) = v89 + 1;
        *(_QWORD *)(a1 + 112) = v129;
      }
    }
    if (*(_BYTE *)(a1 + 16))
    {
      *(_QWORD *)(a1 + 72) = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v52[-*(_QWORD *)(a1 + 80)] >> 3);
      *(_QWORD *)(a1 + 112) = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
      *(_BYTE *)(a1 + 200) = 1;
    }
  }
}

void sub_100159674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1001596A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  double *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double *v23;
  int64_t v24;
  double *v25;

  v1 = *(_QWORD *)(a1 + 112);
  v2 = *(_QWORD *)(a1 + 120);
  v3 = *(_QWORD *)(a1 + 32) - v2 - 20;
  v4 = v1 + 1;
  if (v1 + 1 < v3)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = (double *)(v6 + 88 * v1);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(a1 + 112);
    do
    {
      v11 = (double *)(v6 + 88 * v4);
      if (sub_10006010C(*v11, v11[1], v8, v9) > *(double *)(a1 + 136) || v4 >= v3 - 1)
      {
        v13 = v10 - v1;
        if (v10 <= v1)
        {
          v1 = v4;
        }
        else
        {
          v14 = v6 + 88 * v1;
          v16 = *(double *)(v14 + 16);
          v15 = v14 + 16;
          v17 = v16;
          v18 = *(unsigned __int8 *)(v15 + 64);
          v19 = (double *)(v15 + 16);
          v20 = v15 + 88;
          do
          {
            if (v17 <= *(double *)v20)
              v17 = *(double *)v20;
            *(double *)v15 = v17;
            if (!v18 || *(_BYTE *)(v20 + 64))
            {
              if (v18 == *(unsigned __int8 *)(v20 + 64))
              {
                v21 = *v19;
                if (*v19 <= *(double *)(v20 + 16))
                  v21 = *(double *)(v20 + 16);
                *v19 = v21;
              }
            }
            else
            {
              v18 = 0;
              *v19 = *(double *)(v20 + 16);
              *(_BYTE *)(v15 + 64) = 0;
            }
            --v10;
            v20 += 88;
          }
          while (v1 != v10);
          v22 = v6 + 88 * v1 + 88;
          if ((double *)v22 != v11)
          {
            v23 = *(double **)(a1 + 56);
            v24 = (char *)v23 - (char *)v11;
            if (v23 != v11)
            {
              memmove((void *)(v6 + 88 * v1 + 88), v11, (char *)v23 - (char *)v11);
              v2 = *(_QWORD *)(a1 + 120);
              v6 = *(_QWORD *)(a1 + 48);
            }
            *(_QWORD *)(a1 + 56) = v22 + v24;
          }
          v2 += v13;
          *(_QWORD *)(a1 + 120) = v2;
          v3 -= v13;
          v4 = v1;
        }
        v25 = (double *)(v6 + 88 * v1);
        v8 = *v25;
        v9 = v25[1];
      }
      v10 = v4++;
    }
    while (v4 < v3);
  }
}

void sub_100159824(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_1001599E4((void **)a1, a2 - v2);
  }
}

double sub_100159854(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  double v5;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(v3 + 88 * a3);
  v15 = *(_OWORD *)(v3 + 88 * a2);
  v16 = v4;
  v5 = 0.0;
  if (a2 + 1 < a3)
  {
    v7 = v15;
    v8 = v16;
    v9 = ~a2 + a3;
    v10 = 88 * a2;
    do
    {
      v11 = sub_100154E28((double *)&v15, *(double *)(v3 + v10 + 88), *(double *)(v3 + v10 + 96));
      v12 = sub_100061A8C(*(double *)&v7, *((double *)&v7 + 1), *(double *)&v8, *((double *)&v8 + 1), v11);
      v3 = *(_QWORD *)(a1 + 48);
      v5 = v5 + sub_10006010C(v12, v13, *(double *)(v3 + v10 + 88), *(double *)(v3 + v10 + 96));
      v10 += 88;
      --v9;
    }
    while (v9);
  }
  return v5;
}

void sub_100159954(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100159984(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001599B4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_100159AF0((char **)a1, a2 - v2);
  }
}

void sub_1001599E4(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_100007810();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_10001FB2C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_100159AF0(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_100007810();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_10002BA34(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_100159BF8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_10122BFE8;
  *(_QWORD *)(a1 + 8) = a2;
  v4 = a3;
  *(_QWORD *)(a1 + 120) = 0;
  objc_storeWeak((id *)(a1 + 120), v4);

  return a1;
}

uint64_t sub_100159C64(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 128));
  return a1;
}

void sub_100159C8C(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 128));
  operator delete();
}

__n128 sub_100159CC4(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t v6;
  __n128 result;

  v3 = a3.n128_u64[0];
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v6 + 16))(v6, a2, a3);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 56) = result;
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 96) = 0;
  return result;
}

uint64_t sub_100159D30(uint64_t a1, unint64_t a2, double **a3)
{
  uint64_t v6;
  id WeakRetained;
  int v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  uint64_t result;
  double *v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double *v46;
  unint64_t v47;
  double v48;
  double v49;
  void *v50;
  void *v51;
  void *v52;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (*(_QWORD *)(a1 + 88) != 1 || !*(_BYTE *)(a1 + 96))
    return v6;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 128));
  if ((objc_msgSend(WeakRetained, "isSnappedToRuler") & 1) != 0 || a3[1] == *a3)
  {

    return v6;
  }
  v8 = *((unsigned __int8 *)*a3 + 80);

  if (!v8)
    return v6;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 != -1)
    goto LABEL_7;
  v24 = *a3;
  v25 = 0x2E8BA2E8BA2E8BA3 * (a3[1] - *a3);
  v26 = v25 - 1;
  if (v25 - 1 > a2)
  {
    v27 = &v24[11 * a2 + 10];
    v9 = a2;
    while (*(_BYTE *)v27)
    {
      ++v9;
      v27 += 11;
      if (v26 == v9)
        goto LABEL_33;
    }
    *(_QWORD *)(a1 + 32) = v9;
    *(int8x16_t *)(a1 + 72) = vextq_s8(*(int8x16_t *)(v27 - 7), *(int8x16_t *)(v27 - 7), 8uLL);
    if (v9 != -1)
    {
LABEL_7:
      if ((a2 & 0x8000000000000000) != 0)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123C6A8);
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          sub_100E00438();
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123C6C8);
        v50 = off_1013D9070;
        if (os_log_type_enabled((os_log_t)v50, OS_LOG_TYPE_ERROR))
        {
          objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
          sub_100DE7E60();
        }

        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "virtual NSUInteger CRLPKEstimatedAltitudeAndAzimuthFilter::copyUpdatedRangeFromIndex(NSUInteger, std::vector<CRLPKInputPoint> *)"));
        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKEstimatedAltitudeAndAzimuthFilter.h"));
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v51, v52, 169, 0, "Out-of-bounds type assignment was clamped to max");

      }
      else
      {
        v10 = v9 - a2;
        if (v9 > (uint64_t)a2)
        {
          v11 = **a3;
          v12 = (*a3)[1];
          v13 = (uint64_t)(*a3 + 11);
          v14 = 0.0;
          v15 = v9;
          do
          {
            v16 = *(double *)v13;
            v17 = *(double *)(v13 + 8);
            v18 = sub_10006108C(*(double *)v13, v17, v11, v12);
            *(double *)(v13 + 72) = v18;
            v14 = v14 + v18;
            v13 += 88;
            v12 = v17;
            v11 = v16;
            --v15;
          }
          while (v15);
          if (v14 >= *(double *)(a1 + 112))
          {
            v28 = *(_QWORD *)(a1 + 40);
            v29 = *a3;
            if (v28 == -1)
            {
              v28 = sub_10015A244(a3, v9, *(_QWORD *)(a1 + 48), *(double *)(a1 + 120));
              *(_QWORD *)(a1 + 40) = v28;
              *(int8x16_t *)(a1 + 56) = vextq_s8(*(int8x16_t *)&v29[11 * v28 + 3], *(int8x16_t *)&v29[11 * v28 + 3], 8uLL);
            }
            if (v28 + 1 < v9)
            {
              v30 = ~v28 + v9;
              v31 = &v29[11 * v28 + 20];
              v32 = 0.0;
              do
              {
                v33 = *v31;
                v31 += 11;
                v32 = v32 + v33;
                --v30;
              }
              while (v30);
              if (v28 + 1 < v9)
              {
                v34 = *(float64x2_t *)(a1 + 56);
                v35 = *(float64x2_t *)(a1 + 72);
                v36 = ~v28 + v9;
                v37 = &v29[11 * v28 + 20];
                v38 = 0.0;
                do
                {
                  v38 = v38 + *v37;
                  v39 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v35, v38 / v32), v34, 1.0 - v38 / v32);
                  *((int8x16_t *)v37 - 3) = vextq_s8(v39, v39, 8uLL);
                  v37 += 11;
                  --v36;
                }
                while (v36);
              }
            }
            v22 = (char *)a3[1] - (char *)v29;
          }
          else
          {
            v19 = *a3;
            v20 = &(*a3)[11 * v9 + 3];
            v21 = &(*a3)[11 * a2 + 3];
            do
            {
              *(_OWORD *)v21 = *(_OWORD *)v20;
              v21 += 11;
              --v10;
            }
            while (v10);
            v22 = (char *)a3[1] - (char *)v19;
          }
          v40 = 0x2E8BA2E8BA2E8BA3 * (v22 >> 3);
          goto LABEL_39;
        }
      }
      return v6;
    }
  }
LABEL_33:
  if (v25 <= *(_QWORD *)(a1 + 104))
    return 0;
  v41 = *(_QWORD *)(a1 + 48);
  if (v41 != -1)
  {
    v42 = sub_10015A244(a3, v25 - 1, 0, *(double *)(a1 + 120) * 1.25);
    if (v41 <= v42)
      v40 = v42;
    else
      v40 = v41;
    *(_QWORD *)(a1 + 48) = v40;
LABEL_39:
    if (v40 >= v6)
      return v6;
    else
      return v40;
  }
  v43 = 0.0;
  if (v25 >= 2)
  {
    v44 = *v24;
    v45 = v24[1];
    v46 = v24 + 12;
    v47 = v25 - 1;
    do
    {
      v48 = *(v46 - 1);
      v49 = *v46;
      v43 = v43 + sub_10006108C(v48, *v46, v44, v45);
      v46 += 11;
      v45 = v49;
      v44 = v48;
      --v47;
    }
    while (v47);
  }
  if (v43 <= *(double *)(a1 + 112) * 1.25)
    return 0;
  result = sub_10015A244(a3, v26, 0, *(double *)(a1 + 120) * 1.25);
  *(_QWORD *)(a1 + 48) = result;
  if (result >= v6)
    return v6;
  return result;
}

void sub_10015A208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10015A244(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  double v12;

  v6 = a2;
  v8 = a3 + 1;
  v9 = 88 * a2 + 8;
  v10 = 0.0;
  do
  {
    result = -1;
    if (v6 < 1)
      break;
    if (v6 < a3)
      break;
    v12 = sub_10006108C(*(double *)(*a1 + v9 - 8), *(double *)(*a1 + v9), *(double *)(*a1 + v9 - 96), *(double *)(*a1 + v9 - 88));
    result = v6 - 1;
    if (v6 == 1)
      break;
    v9 -= 88;
    v10 = v10 + v12;
  }
  while (v10 <= a4 && v8 != v6--);
  return result;
}

void sub_10015A2E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015A310(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015A344()
{
  operator delete();
}

uint64_t sub_10015A358(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t result;

  v3 = a3.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2, a3);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = a2 == 0;
  return result;
}

uint64_t sub_10015A3B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32) + a2);
  if (!*(_BYTE *)(a1 + 40))
    return (v5 - *(_QWORD *)(a1 + 32)) & ~((v5 - *(_QWORD *)(a1 + 32)) >> 63);
  sub_10015A450(a1, a3);
  return 0;
}

uint64_t sub_10015A414(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

void sub_10015A450(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  int v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  long double v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  unsigned int v27;
  void *v28;
  NSObject *log;
  os_log_t logb;
  os_log_t loga;
  os_log_t logc;
  uint8_t buf[4];
  unsigned int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;

  v3 = (char *)*a2;
  v2 = a2[1];
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v2 - *a2) >> 3)) >= 3 && *(_BYTE *)(a1 + 40))
  {
    v6 = -1;
    v7 = 1;
    v8 = 0.0;
    v9 = 160;
    do
    {
      v8 = v8 + *(double *)&v3[v9];
      if (v8 / *(double *)(a1 + 24) > 6.0 && v6 == -1)
      {
        if (v7 >> 31)
        {
          v12 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_10123C748);
          log = off_1013D9070;
          if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109890;
            v34 = v12;
            v35 = 2082;
            v36 = "void CRLPKStartHookFilter::fixStartHook(std::vector<CRLPKInputPoint> *)";
            v37 = 2082;
            v38 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKStartHookFilter.h";
            v39 = 1024;
            v40 = 115;
            _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", buf, 0x22u);
          }
          v27 = v12;
          if (qword_10147E370 != -1)
            dispatch_once(&qword_10147E370, &stru_10123C768);
          v13 = off_1013D9070;
          if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
          {
            v15 = objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
            *(_DWORD *)buf = 67109378;
            v34 = v27;
            v35 = 2114;
            v36 = (const char *)v15;
            v28 = (void *)v15;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v13, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

          }
          logb = (os_log_t)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLPKStartHookFilter::fixStartHook(std::vector<CRLPKInputPoint> *)"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKStartHookFilter.h"));
          +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", logb, v14, 115, 0, "Out-of-bounds type assignment was clamped to max");

          v3 = (char *)*a2;
          v2 = a2[1];
          v6 = 0x7FFFFFFF;
        }
        else
        {
          v6 = v7;
        }
      }
      ++v7;
      v11 = 0x2E8BA2E8BA2E8BA3 * ((v2 - (uint64_t)v3) >> 3);
      v9 += 88;
    }
    while (v7 < v11);
    if (v8 / *(double *)(a1 + 24) >= 24.0 && v6 != -1)
    {
      if (v11 >> 31)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123C788);
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          sub_100E004B8();
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123C7A8);
        loga = off_1013D9070;
        if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
        {
          objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
          sub_100DE7E60();
        }

        logc = (os_log_t)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLPKStartHookFilter::fixStartHook(std::vector<CRLPKInputPoint> *)"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKStartHookFilter.h"));
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", logc, v26, 132, 0, "Out-of-bounds type assignment was clamped to max");

        v17 = 2147483645;
      }
      else
      {
        v17 = v11 - 2;
      }
      if (v6 < v17)
      {
        *(_BYTE *)(a1 + 40) = 0;
        v18 = (char *)*a2;
        if (*(double *)(*a2 + 88 * v6 + 48) - *(double *)(*a2 + 48) <= 0.1)
        {
          v19 = v6;
          v20 = 88 * v6;
          while (v19-- >= 1)
          {
            v22 = sub_10015AAA0((double *)&v18[v20 - 88], (double *)&v18[v20], (double *)&v18[v20 + 88]);
            v20 -= 88;
            if (v22 < 150.0)
            {
              *(_QWORD *)(a1 + 32) = v19 + 1;
              v23 = (char *)a2[1];
              v24 = v23 - v18 - v20 - 88;
              v25 = &v18[v20 + 88];
              if (v25 != v23)
                memmove(v18, v25, v23 - v18 - v20 - 88);
              a2[1] = &v18[v24];
              return;
            }
          }
        }
      }
    }
  }
}

void sub_10015A9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10015A9E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015AA10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015AA40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015AA70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

long double sub_10015AAA0(double *a1, double *a2, double *a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v4 = *a2;
  v5 = sub_1000603B8(*a1, a1[1], *a2);
  v7 = v6;
  v8 = sub_1000603B8(*a3, a3[1], v4);
  v10 = v9;
  v11 = sub_100061070(v5, v7);
  v12 = sub_100061070(v8, v10);
  v13 = sub_1000603C4(v5, v7, v8, v10) / (v11 * v12);
  if (v13 < -1.0)
    v13 = -1.0;
  if (v13 > 1.0)
    v13 = 1.0;
  return acos(v13) * 57.2957795;
}

void sub_10015AB70()
{
  operator delete();
}

uint64_t sub_10015AB84(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t result;

  v3 = a3.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2, a3);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 40) = a2 == 0;
  return result;
}

uint64_t sub_10015ABE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  v5 = a2 - 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v7 = v6;
  if (!*(_BYTE *)(a1 + 40))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = a3[1] - *a3;
    if (v9 < 0)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123C828);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100E00538();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123C848);
      v14 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DE7E60();
      }

      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "virtual NSUInteger CRLPKEndHookFilter::copyUpdatedRangeFromIndex(NSUInteger, std::vector<CRLPKInputPoint> *)"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKEndHookFilter.h"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v15, v16, 58, 0, "Out-of-bounds type assignment was clamped to max");

      v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v10 = v9 / 0x58uLL;
    }
    if (v8 < (uint64_t)(v10 + v5))
    {
      v11 = *(_QWORD *)(a1 + 32);
      if (v11 > v5)
        sub_100007118((uint64_t)a3, v11 - v5);
    }
    goto LABEL_9;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    sub_10015AECC(a1, a3);
    *(_QWORD *)(a1 + 32) = v5 + 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
LABEL_9:
    if (v7 >= *(_QWORD *)(a1 + 32))
      return *(_QWORD *)(a1 + 32);
    else
      return v7;
  }
  v13 = 8;
  if (v6 > 8)
    v13 = v6;
  return v13 - 8;
}

void sub_10015AE64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10015AE8C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

void sub_10015AECC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double v6;
  double *v7;
  double v8;
  uint64_t v9;
  double v10;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  double *v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  double *v21;
  long double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;

  v2 = *a2;
  v3 = a2[1] - *a2;
  v4 = 0x2E8BA2E8BA2E8BA3 * (v3 >> 3);
  if (v4 >= 3)
  {
    v6 = *(double *)(a1 + 24);
    v7 = (double *)(v2 + 160);
    v8 = 0.0;
    v9 = 2;
    do
    {
      v10 = *v7;
      v7 += 11;
      v8 = v8 + v10;
    }
    while (v8 / v6 < 24.0 && v4 != v9++);
    if (v8 / v6 >= 24.0)
    {
      v12 = v4 - 1;
      v13 = v2 + 8 * (v3 >> 3);
      v14 = (double *)(v13 - 40);
      v15 = 2;
      if ((uint64_t)(v4 - 2) < 2)
        v15 = v4 - 2;
      v16 = (double *)(v13 - 128);
      v17 = 0.0;
      v18 = v4 - 1;
      while (--v18 >= 3)
      {
        if (*v14 - *v16 > 0.1)
          return;
        v17 = v17 + v16[14];
        v16 -= 11;
        if (v17 / v6 > 6.0)
          goto LABEL_17;
      }
      v18 = v15;
      if (v15 < 1)
        return;
LABEL_17:
      if (v18 <= (uint64_t)(v4 - 2))
        v19 = v4 - 2;
      else
        v19 = v18;
      v20 = (double *)(v2 + 88 * v18);
      while (v19 != v18)
      {
        ++v18;
        v21 = v20 + 11;
        v22 = sub_10015AAA0(v20 + 11, v20, v20 - 11);
        v20 = v21;
        if (v22 < 150.0)
        {
          v12 = v18 - 1;
          break;
        }
      }
      if (v3 < 0)
      {
        +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123C868);
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
          sub_100E005B8();
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_10123C888);
        v26 = off_1013D9070;
        if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_ERROR))
        {
          objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
          sub_100DE7E60();
        }

        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLPKEndHookFilter::fixEndHook(std::vector<CRLPKInputPoint> *)"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKEndHookFilter.h"));
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v27, v28, 151, 0, "Out-of-bounds type assignment was clamped to max");

        v4 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v12 != v4 - 1)
      {
        v23 = a2[1];
        v24 = 0x2E8BA2E8BA2E8BA3 * ((v23 - *a2) >> 3);
        if ((uint64_t)(v24 + ~v12) >= 1)
        {
          v25 = v24 - v12 - 2;
          if (v25 >= 7)
            v25 = 7;
          a2[1] = v23 - 88 * v25 - 88;
        }
      }
    }
  }
}

void sub_10015B1FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10015B224(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015B254(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015B284(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015B2B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015B2E8()
{
  operator delete();
}

uint64_t sub_10015B2FC(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = a2.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = 0x3FA99999A0000000;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

unint64_t sub_10015B354(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;

  v7 = *a3;
  v6 = a3[1];
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v10 = *a3;
  v9 = a3[1];
  v11 = v9 - *a3;
  if (v9 != *a3)
  {
    v12 = (v6 - v7) / 88;
    v13 = v11 / 88;
    if (v12 >= v11 / 88)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(a1 + 32);
      v16 = v10 + 88 * v12;
      v17 = (double *)(v16 + 72);
      v18 = (double *)(v16 + 160);
      v19 = (v6 - v7) / 88;
      do
      {
        v20 = *(double *)(v10 + 88 * v19 + 48);
        v21 = v20 - v15;
        if (v19 < 0)
        {
          v23 = 0.0;
        }
        else if (v19)
        {
          v22 = 0;
          v23 = 0.0;
          v24 = v17;
          while (1)
          {
            v25 = *(v24 - 14);
            v26 = *v24;
            if (v25 <= v21)
              break;
            v23 = v23 + v26;
            ++v22;
            v24 -= 11;
            if (v19 == v22)
              goto LABEL_12;
          }
          v23 = v23 + v26 * (*(v24 - 3) - v21) / (*(v24 - 3) - v25);
        }
        else
        {
          v23 = 0.0;
LABEL_12:
          v21 = *(double *)(v10 + 48);
        }
        if (v19 == v13 - 1)
        {
LABEL_18:
          v27 = *(double *)(v10 + 88 * (v13 - 1) + 48);
        }
        else
        {
          v27 = v20 + v15;
          v28 = v13 - 1;
          v29 = v18;
          while (1)
          {
            v30 = *(v29 - 3);
            v31 = *v29;
            if (v30 >= v27)
              break;
            v23 = v23 + v31;
            v29 += 11;
            if (v19 == --v28)
              goto LABEL_18;
          }
          v23 = v23 + v31 * (v27 - *(v29 - 14)) / (v30 - *(v29 - 14));
          v14 = v19;
        }
        v32 = v27 - v21;
        v33 = 0.0;
        if (v32 > 0.0)
          v33 = v23 / v32 / *(double *)(a1 + 24);
        *(double *)(v10 + 88 * v19++ + 40) = v33;
        v17 += 11;
        v18 += 11;
      }
      while (v19 != v13);
    }
    if (!*(_BYTE *)(a1 + 16) && !*(_BYTE *)(a1 + 40))
    {
      v34 = v12 - a2 + v14;
      if (result >= v34)
        return v34;
    }
  }
  return result;
}

uint64_t sub_10015B534(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)a1 = off_10123C918;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v4 = a3;
  *(_QWORD *)(a1 + 104) = 0;
  objc_storeWeak((id *)(a1 + 104), v4);

  return a1;
}

uint64_t sub_10015B59C(uint64_t a1)
{
  void *v2;

  objc_destroyWeak((id *)(a1 + 104));
  *(_QWORD *)a1 = off_10122C128;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10015B5E0(uint64_t a1)
{
  void *v2;

  objc_destroyWeak((id *)(a1 + 104));
  *(_QWORD *)a1 = off_10122C128;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_10015B634(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t result;

  v3 = a3.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2, a3);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 96) = a2;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_10015B688(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t sub_10015B6CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return result;
}

uint64_t sub_10015B718(uint64_t a1)
{
  return a1 + 48;
}

void sub_10015B720(uint64_t a1)
{
  unsigned int v2;
  id WeakRetained;
  double v4;
  long double v5;
  double v6;
  double v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48))
    return;
  if (*(_QWORD *)(a1 + 96) == 1)
  {
    v2 = 0;
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
    v2 = objc_msgSend(WeakRetained, "isSnappedToRuler") ^ 1;

  }
  if (!*(_BYTE *)(a1 + 80))
  {
    v4 = sub_1000603B8(*(double *)(*(_QWORD *)(a1 + 56) - 88), *(double *)(*(_QWORD *)(a1 + 56) - 80), **(double **)(a1 + 48));
    v6 = v5;
    *(long double *)(a1 + 88) = atan2(-v4, v5);
    v7 = sub_100061080(v4, v6);
    v8 = 1;
    if (v7 / (*(double *)(a1 + 24) * *(double *)(a1 + 24)) <= 400.0)
      goto LABEL_9;
    *(_BYTE *)(a1 + 80) = 1;
  }
  v8 = 0;
LABEL_9:
  if (v2)
  {
    v9 = *(_QWORD *)(a1 + 72);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 56) - v10) >> 3);
    v12 = v11 <= v9;
    v13 = v11 - v9;
    if (!v12)
    {
      v14 = *(_QWORD *)(a1 + 88);
      v15 = (_QWORD *)(v10 + 88 * v9 + 24);
      do
      {
        *v15 = v14;
        v15 += 11;
        --v13;
      }
      while (v13);
    }
  }
  if ((v8 & 1) == 0)
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 32);
}

void sub_10015B83C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10015B84C(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_destroyWeak((id *)(a1 + 104));
  *(_QWORD *)a1 = off_10123CA80;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_10123CAE8;
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10015B8AC(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_destroyWeak((id *)(a1 + 104));
  *(_QWORD *)a1 = off_10123CA80;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_10123CAE8;
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  operator delete();
}

uint64_t sub_10015B91C(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = a2.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2);
  *(_QWORD *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_10015B960(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_10015B998()
{
  operator new();
}

uint64_t sub_10015BA04(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(_QWORD *))(*a1 + 56))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  sub_10015BD94(a3, *(_QWORD *)(a3 + 8), (char *)(*(_QWORD *)v6 + 80 * a2), *(char **)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v6 + 8) - (*(_QWORD *)v6 + 80 * a2)) >> 4));
  return a1[9];
}

_QWORD *sub_10015BA7C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_10015BAD8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  sub_100007118(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t sub_10015BB2C(uint64_t a1)
{
  return a1 + 80;
}

void sub_10015BB34(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[5];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  sub_10015639C(a1 + 80, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3))
  {
    v3 = 88 * v2;
    v4 = 80 * v2;
    do
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
      v6 = WeakRetained;
      v7 = *(_QWORD *)(a1 + 48) + v3;
      v8 = *(_OWORD *)(v7 + 16);
      v16[0] = *(_OWORD *)v7;
      v16[1] = v8;
      v10 = *(_OWORD *)(v7 + 48);
      v9 = *(_OWORD *)(v7 + 64);
      v11 = *(_OWORD *)(v7 + 32);
      v17 = *(_QWORD *)(v7 + 80);
      v16[3] = v10;
      v16[4] = v9;
      v16[2] = v11;
      if (WeakRetained)
      {
        objc_msgSend(WeakRetained, "outputCurrentStrokePoint:", v16);
      }
      else
      {
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v18 = 0u;
      }
      v12 = (_OWORD *)(*(_QWORD *)(a1 + 80) + v4);
      *v12 = v18;
      v13 = v19;
      v14 = v20;
      v15 = v22;
      v12[3] = v21;
      v12[4] = v15;
      v12[1] = v13;
      v12[2] = v14;

      ++v2;
      v3 += 88;
      v4 += 80;
    }
    while (v2 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 32);
}

void sub_10015BC74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10015BC84()
{
  return 0;
}

_QWORD *sub_10015BC8C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CA80;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CAE8;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10015BCE4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CA80;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CAE8;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  operator delete();
}

uint64_t sub_10015BD50(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

char *sub_10015BD94(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 > 0x333333333333333)
      sub_100007810();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 4);
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 4);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x199999999999999)
      v18 = 0x333333333333333;
    else
      v18 = v17;
    v41 = v9;
    if (v18)
      v19 = (char *)sub_10015C128(v9, v18);
    else
      v19 = 0;
    v30 = &v19[80 * v15];
    __p = v19;
    v38 = v30;
    v40 = &v19[80 * v18];
    v31 = &v30[80 * a5];
    v32 = 80 * a5;
    do
    {
      *(_OWORD *)v30 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 1);
      v34 = *((_OWORD *)v7 + 2);
      v35 = *((_OWORD *)v7 + 4);
      *((_OWORD *)v30 + 3) = *((_OWORD *)v7 + 3);
      *((_OWORD *)v30 + 4) = v35;
      *((_OWORD *)v30 + 1) = v33;
      *((_OWORD *)v30 + 2) = v34;
      v30 += 80;
      v7 += 80;
      v32 -= 80;
    }
    while (v32);
    v39 = v31;
    v5 = (char *)sub_10015C044((void **)a1, (uint64_t)&__p, v5);
    if (v39 != v38)
      v39 = &v38[(v39 - v38 - 80) % 0x50uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 4)) >= a5)
  {
    v21 = &__src[80 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[80 * a5];
    v25 = &v23[-80 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        *(_OWORD *)v26 = *(_OWORD *)v25;
        v27 = *((_OWORD *)v25 + 1);
        v28 = *((_OWORD *)v25 + 2);
        v29 = *((_OWORD *)v25 + 4);
        *((_OWORD *)v26 + 3) = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 4) = v29;
        *((_OWORD *)v26 + 1) = v27;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 80;
        v26 += 80;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[80 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_10015BFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_10015C044(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  void *v17;
  void *v18;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      *(_OWORD *)(v9 - 80) = *((_OWORD *)v8 - 5);
      v10 = *((_OWORD *)v8 - 4);
      v11 = *((_OWORD *)v8 - 3);
      v12 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 80);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      v8 -= 80;
      v9 -= 80;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v13 = a1[1];
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v14 + v15;
  v16 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v16;
  v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v17;
  v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void *sub_10015C128(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    sub_1000078E0();
  return operator new(80 * a2);
}

void sub_10015C170()
{
  operator delete();
}

uint64_t sub_10015C184(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t result;
  double v7;

  v3 = a3.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2, a3);
  v7 = 0.0;
  if (!a2)
    v7 = 1.0;
  *(_QWORD *)(a1 + 24) = v3;
  *(double *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_10015C1E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_10015C21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  double *v16;
  double v17;

  v7 = *(_QWORD **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (!a2 && *(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
    *(_QWORD *)(a1 + 48) = **(_QWORD **)a3;
  v9 = *(double *)(a1 + 32);
  if (v9 > 0.0)
  {
    v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v10)
    {
      v11 = (v6 - (uint64_t)v7) / 80;
      v12 = v10 / 80;
      v13 = v12 <= v11;
      v14 = v12 - v11;
      if (!v13)
      {
        v15 = *(double *)(a1 + 48);
        v16 = (double *)(*(_QWORD *)a3 + 80 * v11 + 72);
        do
        {
          v17 = *(v16 - 9) - v15;
          if (v17 < v9)
            *v16 = *v16 * (1.0 - *(double *)(a1 + 40) * (1.0 - v17 / v9));
          v16 += 10;
          --v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t sub_10015C314(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_10015C34C()
{
  operator delete();
}

uint64_t sub_10015C360(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t result;
  double v7;

  v3 = a3.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2, a3);
  v7 = 0.0;
  if (!a2)
    v7 = 1.0;
  *(_QWORD *)(a1 + 24) = v3;
  *(double *)(a1 + 32) = v7;
  *(double *)(a1 + 40) = v7;
  return result;
}

uint64_t sub_10015C3C0(uint64_t a1, uint64_t a2, char **a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  char *v12;
  char **v13;
  int64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  uint64_t v24;
  double *v25;
  double v26;

  v7 = *a3;
  v6 = a3[1];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v9 = v8;
  if (!a2 && a3[1] != *a3)
    *(_QWORD *)(a1 + 48) = *(_QWORD *)*a3;
  v10 = *(double *)(a1 + 32);
  if (v10 > 0.0)
  {
    v13 = a3;
    v12 = *a3;
    v11 = v13[1];
    v14 = v11 - v12;
    if (v11 != v12)
    {
      if (*(double *)(a1 + 56) <= *((double *)v11 - 10))
        v15 = *((double *)v11 - 10);
      else
        v15 = *(double *)(a1 + 56);
      *(double *)(a1 + 56) = v15;
      if (*(_BYTE *)(a1 + 16))
      {
        if (v10 > 0.0 && v15 - *(double *)(a1 + 48) > v10 + v10)
        {
          v16 = v14 / 80;
          v17 = (uint64_t)&v12[80 * (v14 / 80) + 16];
          v18 = v16;
          while (--v18)
          {
            v19 = (double *)(v17 - 80);
            v20 = v15 - *(double *)(v17 - 96);
            v17 -= 80;
            if (v20 > v10)
            {
              v21 = *(v19 - 1);
              v22 = *v19;
              goto LABEL_22;
            }
          }
          v22 = 0.0;
          v21 = 0.0;
LABEL_22:
          if (sub_10006010C(v21, v22, *((double *)v11 - 9), *((double *)v11 - 8)) > 225.0)
          {
            v24 = v16 - 1;
            if (v16 != 1)
            {
              v25 = (double *)&v12[80 * v16 - 8];
              do
              {
                v26 = v15 - *(v25 - 9);
                if (v26 >= v10)
                  break;
                *v25 = *v25 * (1.0 - *(double *)(a1 + 40) * (1.0 - v26 / v10));
                v25 -= 10;
                --v24;
              }
              while (v24);
            }
          }
        }
      }
      else if (v8)
      {
        v23 = (double *)&v12[80 * (v8 + (v6 - v7) / 80 - a2)];
        do
        {
          if (*v23 <= v15 - v10)
            break;
          v23 -= 10;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v9;
}

_QWORD *sub_10015C584(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CCF8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CD60;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10015C5DC(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CCF8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CD60;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  operator delete();
}

uint64_t sub_10015C644(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = a2.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2);
  *(_QWORD *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_10015C688(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_10015C6C0()
{
  operator new();
}

uint64_t sub_10015C72C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(_QWORD *))(*a1 + 56))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  sub_10015CA64(a3, *(_QWORD *)(a3 + 8), (char *)(*(_QWORD *)v6 + 24 * a2), *(char **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 8) - (*(_QWORD *)v6 + 24 * a2)) >> 3));
  return a1[9];
}

_QWORD *sub_10015C7A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_10015C800(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  sub_10015639C(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t sub_10015C854(uint64_t a1)
{
  return a1 + 80;
}

void sub_10015C85C(_QWORD *a1)
{
  unint64_t v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[14];

  sub_10015CCFC((uint64_t)(a1 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[7] - a1[6]) >> 4));
  v2 = a1[9];
  v3 = (double *)a1[6];
  if (v2 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[7] - (_QWORD)v3) >> 4))
  {
    v4 = 10 * v2;
    v5 = 24 * v2;
    do
    {
      *(_OWORD *)v11 = *(_OWORD *)&v3[v4];
      v6 = *(_OWORD *)&v3[v4 + 8];
      v8 = *(_OWORD *)&v3[v4 + 2];
      v7 = *(_OWORD *)&v3[v4 + 4];
      *(_OWORD *)&v11[6] = *(_OWORD *)&v3[v4 + 6];
      *(_OWORD *)&v11[8] = v6;
      *(_OWORD *)&v11[2] = v8;
      *(_OWORD *)&v11[4] = v7;
      +[CRLPKStrokePoint compressStrokePoint:withTimestamp:](CRLPKStrokePoint, "compressStrokePoint:withTimestamp:", v11, *v3);
      v9 = a1[10] + v5;
      v10 = *(_OWORD *)&v11[11];
      *(_QWORD *)(v9 + 16) = v11[13];
      *(_OWORD *)v9 = v10;
      ++v2;
      v3 = (double *)a1[6];
      v4 += 10;
      v5 += 24;
    }
    while (v2 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[7] - (_QWORD)v3) >> 4));
  }
  a1[9] = a1[4];
}

uint64_t sub_10015C954()
{
  return 0;
}

_QWORD *sub_10015C95C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CCF8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CD60;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10015C9B4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CCF8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CD60;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  operator delete();
}

uint64_t sub_10015CA20(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

char *sub_10015CA64(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_100007810();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__dst - (uint64_t)v13) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    v37 = v9;
    if (v18)
      v19 = (char *)sub_100045008(v9, v18);
    else
      v19 = 0;
    v28 = &v19[24 * v15];
    __p = v19;
    v34 = v28;
    v36 = &v19[24 * v18];
    v29 = &v28[24 * a5];
    v30 = 24 * a5;
    do
    {
      v31 = *(_OWORD *)v7;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v28 = v31;
      v28 += 24;
      v7 += 24;
      v30 -= 24;
    }
    while (v30);
    v35 = v29;
    v5 = (char *)sub_10007D840((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 = &v34[(v35 - v34 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    v21 = &__src[24 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[24 * a5];
    v25 = &v23[-24 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v26 = v27;
        v26 += 24;
        v25 += 24;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[24 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_10015CCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10015CCFC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10015CD38((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_10015CD38(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_100007810();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_100045008(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *sub_10015CEB8(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CE88;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CEF0;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10015CF10(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CE88;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CEF0;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  operator delete();
}

uint64_t sub_10015CF78(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = a2.n128_u64[0];
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 16))(result, a2);
  *(_QWORD *)(a1 + 24) = v2;
  return result;
}

uint64_t sub_10015CFBC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_10015CFF4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(_QWORD *))(*a1 + 56))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  sub_10015BD94(a3, *(_QWORD *)(a3 + 8), (char *)(*(_QWORD *)v6 + 80 * a2), *(char **)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v6 + 8) - (*(_QWORD *)v6 + 80 * a2)) >> 4));
  return a1[9];
}

_QWORD *sub_10015D06C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  result[1] = *result;
  return result;
}

uint64_t sub_10015D0C8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  sub_10015CCFC(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t sub_10015D11C(uint64_t a1)
{
  return a1 + 80;
}

void sub_10015D124(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (*(double *)(a1 + 104) <= 0.0)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123CF40);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E00638();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123CF60);
    v2 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DE7E60();
    }

    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "virtual void CRLPKDecompressionFilter::run()"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCompressionFilter.h"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 34, 0, "Reference timestamp is needed to decompress points.");

  }
  sub_10015639C(a1 + 80, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3));
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 48);
  if (v5 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 56) - v6) >> 3))
  {
    v7 = 24 * v5;
    v8 = 80 * v5;
    do
    {
      v9 = (__int128 *)(v6 + v7);
      v10 = *((_QWORD *)v9 + 2);
      v15 = *v9;
      v16 = v10;
      +[CRLPKStrokePoint decompressStrokePoint:withTimestamp:](CRLPKStrokePoint, "decompressStrokePoint:withTimestamp:", &v15, *(double *)(a1 + 104));
      v11 = (_OWORD *)(*(_QWORD *)(a1 + 80) + v8);
      *v11 = v17;
      v12 = v18;
      v13 = v19;
      v14 = v21;
      v11[3] = v20;
      v11[4] = v14;
      v11[1] = v12;
      v11[2] = v13;
      ++v5;
      v6 = *(_QWORD *)(a1 + 48);
      v7 += 24;
      v8 += 80;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 56) - v6) >> 3));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 32);
}

void sub_10015D38C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10015D3B4()
{
  return 0;
}

_QWORD *sub_10015D3BC(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CE88;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CEF0;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10015D414(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10123CE88;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = off_10123CEF0;
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  operator delete();
}

uint64_t sub_10015D480(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_10015D4C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015D4F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015D524(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015D554(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015D584(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333)
      sub_100007810();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_10015C128(v4, v11);
    else
      v12 = 0;
    v14 = &v12[80 * v8];
    v15 = &v12[80 * v11];
    v16 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 5) = *((_OWORD *)v18 - 5);
        v20 = *((_OWORD *)v18 - 4);
        v21 = *((_OWORD *)v18 - 3);
        v22 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v22;
        *((_OWORD *)v14 - 4) = v20;
        *((_OWORD *)v14 - 3) = v21;
        v14 -= 80;
        v18 -= 80;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *sub_10015D70C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10015D784(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10015D768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10015D784(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_100007810();
  result = (char *)sub_100007898((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

_QWORD *sub_10015D7D8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10001FC68(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10015D834(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

NSSet *__cdecl sub_10015DD64(id a1, NSDictionary *a2, NSSet *a3)
{
  NSDictionary *v4;
  NSSet *v5;
  void *v6;
  uint64_t v7;
  NSSet *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  NSSet *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v7 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v8 = v5;
  v9 = -[NSSet countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v9)
  {
    v11 = v9;
    v12 = *(_QWORD *)v44;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v44 != v12)
          objc_enumerationMutation(v8);
        v14 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v13);
        v15 = objc_opt_class(_TtC8Freeform22CRLFreehandDrawingItem, v10);
        v16 = sub_100221D0C(v15, v14);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = v17;
        if (v17 && (objc_msgSend(v17, "locked") & 1) == 0)
        {
          v19 = v6;
          v20 = v18;
        }
        else
        {
          v19 = (void *)v7;
          v20 = v14;
        }
        objc_msgSend(v19, "addObject:", v20);

        v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      v11 = -[NSSet countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    }
    while (v11);
  }
  v37 = v8;
  v38 = (void *)v7;

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v22 = v6;
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
  if (v23)
  {
    v25 = v23;
    v26 = *(_QWORD *)v40;
    do
    {
      v27 = 0;
      do
      {
        if (*(_QWORD *)v40 != v26)
          objc_enumerationMutation(v22);
        v28 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v27);
        v29 = objc_opt_class(NSSet, v24);
        v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v4, "objectForKey:", v28));
        v31 = sub_100221D0C(v29, v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

        if (v32)
          objc_msgSend(v21, "unionSet:", v32);

        v27 = (char *)v27 + 1;
      }
      while (v25 != v27);
      v25 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
    }
    while (v25);
  }

  if (objc_msgSend(v21, "count"))
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v34 = v38;
    objc_msgSend(v33, "unionSet:", v38);
    objc_msgSend(v33, "unionSet:", v21);
    v35 = objc_msgSend(v33, "copy");

  }
  else
  {
    v35 = 0;
    v34 = v38;
  }

  return (NSSet *)v35;
}

void sub_10015E570(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015E5A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015E8C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015E8F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015ED64(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015ED94(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015F548(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015F578(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015F5A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015F5D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015FD34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015FD64(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015FD94(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10015FDC4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10016007C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001600AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10016023C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10016026C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001606B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001606E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100160714(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100160744(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100161960(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100161990(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100162F84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100162FB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001635B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001635E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100163C3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100163C6C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

UIMenu *sub_100163F6C(uint64_t a1)
{
  return +[UIMenu menuWithTitle:children:](UIMenu, "menuWithTitle:children:", &stru_1012A72B0, *(_QWORD *)(a1 + 32));
}

void sub_1001643D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001643E8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "crl_enumerateBoardItemNestedRecursivelyUsingBlock:", *(_QWORD *)(a1 + 32));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a4 = 1;
  return result;
}

void sub_100164A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100164A58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  uint64_t v7;
  objc_class *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[6];

  v6 = a2;
  v8 = (objc_class *)objc_opt_class(NSArray, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("text")));

  v10 = sub_1002223BC(v8, v9);
  v11 = (id)objc_claimAutoreleasedReturnValue(v10);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100164B24;
  v12[3] = &unk_10123D438;
  v12[4] = *(_QWORD *)(a1 + 32);
  v12[5] = a4;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v12);

}

void sub_100164B24(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  objc_class *v8;
  void *v9;
  id v10;
  void *v11;
  _BYTE *v12;

  v6 = a2;
  v8 = (objc_class *)objc_opt_class(NSNumber, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("hasText")));

  v10 = sub_1002223BC(v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  LODWORD(v6) = objc_msgSend(v11, "BOOLValue");

  if ((_DWORD)v6)
  {
    v12 = *(_BYTE **)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *v12 = 1;
    *a4 = 1;
  }
}

void sub_10016502C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100165044(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  objc_class *v8;
  void *v9;
  id v10;
  NSString *v11;
  Class v12;
  unsigned __int8 v13;
  NSString *aClassName;

  v6 = a2;
  v8 = (objc_class *)objc_opt_class(NSString, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("class")));

  v10 = sub_1002223BC(v8, v9);
  aClassName = (NSString *)objc_claimAutoreleasedReturnValue(v10);

  v11 = aClassName;
  if (aClassName)
  {
    v12 = NSClassFromString(aClassName);
    v11 = aClassName;
    if (v12)
    {
      v13 = -[objc_class isSubclassOfClass:](v12, "isSubclassOfClass:", objc_opt_class(_TtC8Freeform22CRLFreehandDrawingItem, aClassName));
      v11 = aClassName;
      if ((v13 & 1) == 0)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
        *a4 = 1;
      }
    }
  }

}

void sub_1001651D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001651E8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  objc_class *v7;
  void *v8;
  id v9;
  NSString *v10;
  Class v11;
  uint64_t v12;
  Class v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;

  v20 = a2;
  v7 = (objc_class *)objc_opt_class(NSString, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("class")));
  v9 = sub_1002223BC(v7, v8);
  v10 = (NSString *)objc_claimAutoreleasedReturnValue(v9);

  if (v10)
  {
    v11 = NSClassFromString(v10);
    if (v11)
    {
      v13 = v11;
      if (-[objc_class isSubclassOfClass:](v11, "isSubclassOfClass:", objc_opt_class(_TtC8Freeform22CRLFreehandDrawingItem, v12)))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        *a4 = 1;
      }
      else if (-[objc_class isSubclassOfClass:](v13, "isSubclassOfClass:", objc_opt_class(_TtC8Freeform12CRLGroupItem, v14)))
      {
        v16 = (objc_class *)objc_opt_class(NSNumber, v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("containsFreehandDrawing")));
        v18 = sub_1002223BC(v16, v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

        if (objc_msgSend(v19, "BOOLValue"))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          *a4 = 1;
        }

      }
    }
  }

}

BOOL sub_1001657F8(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  uint64_t v3;
  objc_class *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  objc_class *v14;
  void *v15;
  id v16;
  void *v17;
  unsigned int v18;
  objc_class *v19;
  void *v20;
  id v21;
  void *v22;
  unsigned __int8 v23;
  BOOL v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v2 = a2;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v4 = (objc_class *)objc_opt_class(NSArray, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("text")));
  v6 = sub_1002223BC(v4, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v8)
  {
    v10 = v8;
    v11 = *(_QWORD *)v27;
    while (2)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v11)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v14 = (objc_class *)objc_opt_class(NSNumber, v9);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("hasVisibleText")));
        v16 = sub_1002223BC(v14, v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = objc_msgSend(v17, "BOOLValue");

        if (v18)
        {
          v19 = (objc_class *)objc_opt_class(NSNumber, v9);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("hasText")));
          v21 = sub_1002223BC(v19, v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          v23 = objc_msgSend(v22, "BOOLValue");

          if ((v23 & 1) != 0)
          {
            v24 = 1;
            goto LABEL_13;
          }
        }
      }
      v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v10)
        continue;
      break;
    }
    v24 = 0;
  }
  else
  {
    v24 = 0;
  }
LABEL_13:

  return v24;
}

void sub_100165D98(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100165DC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001660CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001660FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

_TtC8Freeform12CRLBoardItem *__cdecl sub_10016617C(id a1, CRLIngestibleBoardItemAndDescription *a2)
{
  return -[CRLIngestibleBoardItemAndDescription boardItem](a2, "boardItem");
}

uint64_t sub_100167F24(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", *(_QWORD *)(a1 + 40)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UICommand commandWithTitle:image:action:propertyList:](UICommand, "commandWithTitle:image:action:propertyList:", v2, v3, "snapToShape:", 0));

  objc_msgSend(*(id *)(a1 + 48), "snapToShape:", v4);
  return 1;
}

id sub_100167FA4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "requestPauseFollow");
}

id sub_100168704(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "addAdditionalChildLayersToArray:", *(_QWORD *)(a1 + 40));
}

id sub_100168900(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endEditing");
}

id sub_100169454(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "crlaxInteractiveCanvasController"));
  v3 = objc_msgSend(v2, "crlaxScrollLayoutToVisibleAndFocusTheAssociatedRep:", *(_QWORD *)(a1 + 40));

  return v3;
}

void sub_10016CDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016CE10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10016CE20(uint64_t a1)
{

}

void sub_10016CE28(_QWORD *a1)
{
  void *v2;
  CRLBezierSubpath *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = *(void **)(*(_QWORD *)(a1[4] + 8) + 40);
  if (!v2)
  {
    v3 = objc_alloc_init(CRLBezierSubpath);
    v4 = *(_QWORD *)(a1[4] + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

    objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "addObject:", *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40));
    v2 = *(void **)(*(_QWORD *)(a1[4] + 8) + 40);
  }
  objc_msgSend(v2, "addNode:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0;

}

void sub_100170BC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100170BF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100170E40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100170E70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100171160(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100171190(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1001717A8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)a1[4];
  if (!a2)
    a2 = v3[2];
  return objc_msgSend(v3, "p_provideBoardItemWithURL:factory:completionHandler:", a2, a1[5], a1[6]);
}

void sub_10017195C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD block[4];
  id v8;

  v3 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "stop");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "advanceToStage:", 1);
  if (v3)
  {
    if (qword_10147E368 != -1)
      dispatch_once(&qword_10147E368, &stru_10123D720);
    v4 = off_1013D9068;
    if (os_log_type_enabled((os_log_t)off_1013D9068, OS_LOG_TYPE_ERROR))
      sub_100E01030(v4, v3);
    if (*(_QWORD *)(a1 + 56))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100171AC4;
      block[3] = &unk_10122D7E0;
      v8 = *(id *)(a1 + 56);
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    }
  }
  else
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "URL"));
    objc_msgSend(v5, "p_provideBoardItemWithFinalURL:factory:completionHandler:", v6, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_100171A94(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

uint64_t sub_100171AC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100171C48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

intptr_t sub_100171EE4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id *sub_100171FA4(id *a1)
{

  return a1;
}

double sub_100171FD4(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  result = NAN;
  *(_OWORD *)(a1 + 56) = xmmword_100EEE418;
  return result;
}

uint64_t sub_100171FFC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t sub_10017205C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;

  v11 = a2;
  v12 = a3;
  *(_QWORD *)a1 = v11;
  v13 = v12;
  v14 = v13;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a4;
  *(_BYTE *)(a1 + 48) = a6;
  *(_OWORD *)(a1 + 56) = xmmword_100EEE418;
  if (v13 == v11)
  {
    *(_QWORD *)(a1 + 8) = 0;

    a4 = *(_QWORD *)(a1 + 32);
  }
  *(_OWORD *)(a1 + 56) = xmmword_100EEE418;
  *(_QWORD *)(a1 + 16) = a4;

  return a1;
}

double sub_100172100(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 32) - 1;
  *(_QWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 40) = v1;
  result = NAN;
  *(_OWORD *)(a1 + 56) = xmmword_100EEE418;
  *(_QWORD *)(a1 + 16) = v1;
  return result;
}

double sub_100172124(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  double result;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 < *(_QWORD *)(a1 + 24))
    v2 = v1 + 1;
  else
    v2 = 0x7FFFFFFFFFFFFFFFLL;
  result = NAN;
  *(_OWORD *)(a1 + 56) = xmmword_100EEE418;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

BOOL sub_100172154(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) >= *(_QWORD *)(a1 + 24);
}

double sub_100172168@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_100171FFC(a2, a1);
  v3 = *(_QWORD *)(v2 + 32) - 1;
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  result = NAN;
  *(_OWORD *)(v2 + 56) = xmmword_100EEE418;
  *(_QWORD *)(v2 + 16) = v3;
  return result;
}

id sub_1001721A4(uint64_t a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  id v7;

  if (a2)
  {
    v4 = *(id *)(a1 + 56);
    if (v4 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v4 = objc_msgSend(*(id *)a1, "textRangeForParagraphAtIndex:", *(_QWORD *)(a1 + 16));
      *(_QWORD *)(a1 + 56) = v4;
      *(_QWORD *)(a1 + 64) = v5;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 64);
    }
    *a2 = v4;
    a2[1] = v5;
  }
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a1 + 24))
    return 0;
  v7 = *(id *)(a1 + 8);
  if (!v7)
    v7 = *(id *)a1;
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "paragraphStyleAtParIndex:effectiveRange:"));
}

id sub_100172228(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = *(id *)(a1 + 56);
  if (result == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    result = objc_msgSend(*(id *)a1, "textRangeForParagraphAtIndex:", *(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 56) = result;
    *(_QWORD *)(a1 + 64) = v3;
  }
  return result;
}

id sub_10017226C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(id *)(a1 + 56);
  if (v2 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v2 = objc_msgSend(*(id *)a1, "textRangeForParagraphAtIndex:", *(_QWORD *)(a1 + 16));
    v4 = v3;
    *(_QWORD *)(a1 + 56) = v2;
    *(_QWORD *)(a1 + 64) = v3;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 64);
  }
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)a1, "substringWithRange:", v2, v4));
}

id sub_1001722C4(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id sub_1001722CC(uint64_t a1)
{
  return _objc_msgSend(*(id *)a1, "paragraphLevelAtParIndex:", *(_QWORD *)(a1 + 16));
}

id sub_1001722DC(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a1 + 24))
    return 0;
  if (*(_QWORD *)(a1 + 8))
    v2 = *(void **)(a1 + 8);
  else
    v2 = *(void **)a1;
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "listStyleAtParIndex:effectiveRange:"));
}

BOOL sub_100172320(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  v1 = sub_1001722DC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "firstLabelType") != 0;
  else
    v4 = 0;

  return v4;
}

void sub_100172368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100172378(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, "isWritingDirectionRightToLeftForParagraphAtParIndex:", *(_QWORD *)(a1 + 16));
}

uint64_t variable initialization expression of CRLDocumentSessionAnalyticsManager.totalEventKeyCount()
{
  return 7;
}

BOOL sub_100172390(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) == 0;
}

uint64_t sub_1001723A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_100172BD4(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_101414EB8;
  qword_101414EB8 = (uint64_t)v1;

  if (!qword_101414EB8)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123D740);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E01120();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123D760);
    v3 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100DE87A4(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[CRLImageProviderPool sharedPool]_block_invoke"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageProviderPool.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v4, v5, 65, 0, "invalid nil value for '%{public}s'", "instance");

  }
}

void sub_100172D40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100172D70(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100173398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001733BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

id sub_1001733E8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = 5;
  while (1)
  {
    result = objc_msgSend(a2, "readToBuffer:size:", v4, v5);
    v5 -= (uint64_t)result;
    if (v5 == 5)
      break;
    v4 += v5;
    if (!v5)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      return result;
    }
  }
  return result;
}

void sub_10017344C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

void sub_100173478(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

void sub_100173B78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100173B9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

void sub_100173BC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

void sub_100173BF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

void sub_100173C20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

void sub_100173DCC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100173DFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100173FC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100173FD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100174008(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100174214(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100174238(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

void sub_1001743DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100174404(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLImageProviderPoolCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F78;
  off_1013D9F78 = v2;

}

void sub_100174540(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100174FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100175020(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLFileDescriptors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F70;
  off_1013D9F70 = v2;

}

void sub_10017504C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLFileDescriptors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F70;
  off_1013D9F70 = v2;

}

void sub_100175078(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLFileDescriptors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F70;
  off_1013D9F70 = v2;

}

void sub_1001750A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLFileDescriptors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F70;
  off_1013D9F70 = v2;

}

void sub_1001750D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLFileDescriptors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F70;
  off_1013D9F70 = v2;

}

void sub_1001750FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLFileDescriptors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F70;
  off_1013D9F70 = v2;

}

void sub_100175128(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLFileDescriptors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F70;
  off_1013D9F70 = v2;

}

void sub_100175154(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100175184(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001751B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLFileDescriptors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9F70;
  off_1013D9F70 = v2;

}

void sub_100175340(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_100175454(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_flushProvidersWithNoOneActivelyHoldingAReference");
}

void sub_100175678(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001757B4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_10017594C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017597C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100175ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100175C18(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  v3 = a2;
  *(_QWORD *)&v5 = objc_opt_class(NSNumber, v4).n128_u64[0];
  v7 = v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo", v5));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("CRLProgressOverallProgress")));
  v10 = sub_100221D0C(v7, v9);
  v13 = (id)objc_claimAutoreleasedReturnValue(v10);

  v11 = v13;
  if (v13)
  {
    v12 = *(_QWORD *)(a1 + 32);
    objc_msgSend(v13, "doubleValue");
    (*(void (**)(uint64_t))(v12 + 16))(v12);
    v11 = v13;
  }

}

void sub_100175E08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100175E1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100175EC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100175F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100175FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100176038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1001760AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100176120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_10017621C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100176298(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100176630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100176D50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100176D80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100176DB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100176DE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100177518(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100177548(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100177A0C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100177A3C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100178594(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001785C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100178DE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100178E14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100179170(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10017927C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10017AEB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017AEE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017AF14(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017AF44(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017AF74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017AFA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017B214(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017B244(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017B5C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017B5F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017B780(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017B7B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D130(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D160(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D190(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D1C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D1F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D220(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D250(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D280(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D2B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D2E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D310(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D340(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D370(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLUUIDSelectionCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA0A0;
  off_1013DA0A0 = v2;

}

void sub_10017D39C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D3CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D3FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D42C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D45C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D48C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D4BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D4EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D51C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLEditorStackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA0A8;
  off_1013DA0A8 = v2;

}

void sub_10017D824(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D854(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D884(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017D8B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017DC5C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017DC8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017DE64(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017DE94(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017E084(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017E0B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017E76C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLEditorStackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA0A8;
  off_1013DA0A8 = v2;

}

void sub_10017E798(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017E7C8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017E7F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017E828(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017EC34(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLEditorStackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA0A8;
  off_1013DA0A8 = v2;

}

void sub_10017EC60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017EC90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017ECC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017ECF0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017EEB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017EEE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017F848(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017F878(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10017F8A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLEditorStackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA0A8;
  off_1013DA0A8 = v2;

}

void sub_10017FC48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLEditorStackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA0A8;
  off_1013DA0A8 = v2;

}

void sub_10017FDF4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_10017FE54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017FEB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017FF14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017FF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10017FFD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180034(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001800F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001801B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001802D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001803F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001805B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001808C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100180934(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100180964(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100180B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100180C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100180D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100180F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100180FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100181080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10018120C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100181354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001814C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100181598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1001816E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10018179C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10018182C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100181978(CRLTextRepAccessibility *self, SEL a2)
{
  return __CRLAccessibilityGetAssociatedBool(self, &unk_101414ED2);
}

void sub_100181984(CRLTextRepAccessibility *self, SEL a2, BOOL a3)
{
  __CRLAccessibilitySetAssociatedBool(self, &unk_101414ED2, a3);
}

void sub_100181AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100181B10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100181B20(uint64_t a1)
{

}

void sub_100181B28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  double v13;
  id v14;
  void *v15;

  v3 = a3;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    if (!a3)
      return;
  }
  else
  {
    v6 = objc_msgSend(objc_alloc((Class)NSMutableAttributedString), "initWithString:attributes:", *(_QWORD *)(a1 + 32), 0);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    if (!v3)
      return;
  }
  do
  {
    v9 = a2 + *(_QWORD *)(a1 + 56);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "crlaxStorage"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "crlaxAttachmentOrFootnoteAtCharIndex:", v9));

    *(_QWORD *)&v13 = objc_opt_class(v11, v12).n128_u64[0];
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "crlaxAttachmentElementForAttachment:inTextRep:", v11, *(_QWORD *)(a1 + 40), v13));
    if (v15)
    {
      if (a2 >= (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "length"))
        NSLog(CFSTR("here"));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addAttribute:value:range:", CFSTR("UIAccessibilityTokenAttachment"), v15, a2, 1);
    }

    ++a2;
    --v3;
  }
  while (v3);
}

BOOL sub_100181DB4(id a1)
{
  return 1;
}

void sub_100182320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018233C(_QWORD *a1, unint64_t a2, NSUInteger a3, void *a4, void *a5)
{
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  BOOL v19;
  NSUInteger v20;
  NSUInteger v21;
  int ShouldCrashOnValidationErrorAfterLaunch;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSRange v28;
  uint64_t v29;
  id v30;
  NSRange v31;
  NSRange v32;

  v30 = a4;
  v10 = a5;
  if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    v11 = a1[4];
    objc_opt_class(NSAttributedString, v9);
    LOBYTE(v11) = objc_opt_isKindOfClass(v11, v12);
    v13 = objc_alloc((Class)NSMutableAttributedString);
    v14 = a1[4];
    if ((v11 & 1) != 0)
      v15 = objc_msgSend(v13, "initWithAttributedString:", v14);
    else
      v15 = objc_msgSend(v13, "initWithString:", v14);
    v16 = *(_QWORD *)(a1[5] + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "beginEditing");
  }
  v18 = a1[6];
  v19 = a2 >= v18;
  v20 = a2 - v18;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  if (CRLAccessibilityShouldPerformValidationChecks())
  {
    if (v21 >= (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "length"))
    {
      ShouldCrashOnValidationErrorAfterLaunch = CRLAccessibilityShouldCrashOnValidationErrorAfterLaunch();
      if (__CRLAccessibilityHandleValidationErrorWithDescription(ShouldCrashOnValidationErrorAfterLaunch, 0, (uint64_t)CFSTR("The attribute being applied is out of bounds!"), v23, v24, v25, v26, v27, v29))abort();
    }
  }
  v32.length = (NSUInteger)objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "length");
  v31.location = v21;
  v31.length = a3;
  v32.location = 0;
  v28 = NSIntersectionRange(v31, v32);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "addAttribute:value:range:", v30, v10, v28.location, v28.length);

}

void sub_100183844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100183860(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "isEqual:", *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_1001846D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100184704(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100184C8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100184CBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100184DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100184E08(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "crlaxSetPreventSelectedTextRangeChanges:", 0);

}

void sub_100185C58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100185C88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100185CB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100185CE8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100185D18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100185D48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100185D78(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100185DA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001860E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186110(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001866D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186704(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186734(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186764(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186794(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001867C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186B30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186B60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186B90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100186BC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10018705C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "p_selectionOrSelectedInfosChanged");
}

void sub_100188188(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001881B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001881E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100188218(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100188248(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100188278(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100188C1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100188D24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100189108(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100189138(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001892F4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100189628(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_100189E24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100189E54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100189E84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100189EB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_10018A3AC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "id"));
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_10018A3EC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018A41C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018A720(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018A750(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018B578(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018B5A8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018B5D8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018B608(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10018B858(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  void *v13;
  void *v14;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v19;
  CGAffineTransform v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && !(*(unsigned int (**)(uint64_t, id))(v4 + 16))(v4, v3))
    goto LABEL_7;
  objc_msgSend(v3, "clipRect");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layout"));
  v14 = v13;
  if (v13)
    objc_msgSend(v13, "transform");
  else
    memset(&v21, 0, sizeof(v21));
  v22.origin.x = v6;
  v22.origin.y = v8;
  v22.size.width = v10;
  v22.size.height = v12;
  v23 = CGRectApplyAffineTransform(v22, &v21);
  x = v23.origin.x;
  y = v23.origin.y;
  width = v23.size.width;
  height = v23.size.height;

  v24.origin.x = x;
  v24.origin.y = y;
  v24.size.width = width;
  v24.size.height = height;
  v25 = CGRectIntersection(v24, *(CGRect *)(a1 + 40));
  if (CGRectIsEmpty(v25))
LABEL_7:
    v19 = 0;
  else
    v19 = 1;

  return v19;
}

void sub_10018BF48(id a1)
{
  dispatch_queue_global_t global_queue;
  CRLWidthLimitedQueue *v2;
  CRLWidthLimitedQueue *v3;
  void *v4;
  id v5;

  global_queue = dispatch_get_global_queue(33, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue(global_queue);
  v2 = [CRLWidthLimitedQueue alloc];
  v3 = -[CRLWidthLimitedQueue initWithLimit:name:targetQueue:](v2, "initWithLimit:name:targetQueue:", qword_10147E600, CFSTR("com.apple.freeform.freehand-drawing.child-rendering"), v5);
  v4 = (void *)qword_101414EF8;
  qword_101414EF8 = (uint64_t)v3;

}

void sub_10018BFB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018BFE0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018C1B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018C1E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018C7D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018C804(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018C834(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018C864(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018C894(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018C8C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018CBEC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018CC1C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018CC4C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018CC7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018CF84(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018CFB4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018CFE4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D014(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D37C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D3AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D7CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D7FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D82C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D85C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D88C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018D8BC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018DBA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018DBD8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018DC08(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018DC38(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E058(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E088(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E0B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E0E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E118(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E148(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E434(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E464(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E494(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10018E4C4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100190284(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDrawingDataDetectors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9260;
  off_1013D9260 = v2;

}

void sub_1001902B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDrawingDataDetectors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9260;
  off_1013D9260 = v2;

}

void sub_1001902E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDrawingDataDetectors");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9260;
  off_1013D9260 = v2;

}

void sub_10019099C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001909CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019154C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019157C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1001920A8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2) ^ 1;
}

BOOL sub_100192264(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "parentRep"));
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

BOOL sub_100192BD4(double *a1)
{
  return !a1 || fabs(*a1) != INFINITY;
}

BOOL sub_100192C0C(double *a1)
{
  _BOOL8 result;

  if (!a1)
    return 1;
  result = 0;
  if (fabs(*a1) != INFINITY)
  {
    result = 0;
    if (fabs(a1[1]) != INFINITY)
    {
      result = 0;
      if (fabs(a1[2]) != INFINITY)
      {
        result = 0;
        if (fabs(a1[3]) != INFINITY)
        {
          result = 0;
          if (fabs(a1[4]) != INFINITY)
            return fabs(a1[5]) != INFINITY;
        }
      }
    }
  }
  return result;
}

void sub_100192CD8()
{
  int v0;
  NSObject *v1;
  void *v2;
  void *v3;
  void *v4;

  v0 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10123F288);
  v1 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100E03E1C(v0, v1);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_10123F2A8);
  v2 = off_1013D9070;
  if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
    sub_100DE81F0(v2, v0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void CRLNotifyCGAssertionAvoided()"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLSafeCGWrappers.m"));
  +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 94, 0, "A CG call was elided because of an invalid parameter.");

}

void sub_100192E10(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100192E40(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019315C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019318C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100194244(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100194274(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001942A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001942D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100194304(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100194334(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

double sub_1001943D4(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double result;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = (uint64_t)(a1[1] - *a1) >> 4;
  v2 = v1 - 1;
  if (v1 == 1)
    return 0.0;
  if (v1 <= 1)
    v3 = 1;
  else
    v3 = (uint64_t)(a1[1] - *a1) >> 4;
  v4 = v3 - 1;
  if (v1 >= v4)
    v5 = v4;
  else
    v5 = (uint64_t)(a1[1] - *a1) >> 4;
  if (v5 >= v1 - 2)
    v5 = v1 - 2;
  v6 = (double *)(*a1 + 16);
  result = 0.0;
  do
  {
    if (v1 == v5 || v4 == v5)
      sub_100194D18();
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    v11 = v6[1];
    v6 += 2;
    result = result + sqrt((v9 - v11) * (v9 - v11) + (v8 - v10) * (v8 - v10));
    --v2;
  }
  while (v2);
  return result;
}

void sub_100194460(const CGPath *a1, float64_t a2, float64_t a3, float64_t a4, float64_t a5, CGFloat a6, CGFloat a7, double a8)
{
  CGPoint CurrentPoint;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int v34;
  int v38;
  unsigned int v39;
  float64x2_t v43;
  float64x2_t v45;
  float64x2_t v47;
  float64x2_t v49;

  CurrentPoint = CGPathGetCurrentPoint(a1);
  v12.f64[0] = CurrentPoint.y;
  v11.f64[0] = a3;
  v11.f64[1] = a2;
  v12.f64[1] = CurrentPoint.x;
  v13 = vsubq_f64(v11, v12);
  v14 = v11;
  v11.f64[0] = a5;
  v11.f64[1] = a4;
  v15.f64[0] = a7;
  v15.f64[1] = a6;
  v16 = vsubq_f64(v11, v14);
  v17 = vsubq_f64(v15, v11);
  v18 = vsubq_f64(v16, v13);
  v19 = vsubq_f64(v17, v16);
  v20 = (float64x2_t)vzip1q_s64((int64x2_t)v18, (int64x2_t)v19);
  v21 = (float64x2_t)vzip2q_s64((int64x2_t)v18, (int64x2_t)v19);
  v22 = vmlaq_f64(vmulq_f64(v20, v20), v21, v21);
  if (v22.f64[0] <= v22.f64[1])
    v22.f64[0] = v22.f64[1];
  v23 = v22.f64[0] * 9.0 * 0.0625;
  if (v23 > a8 * a8)
  {
    v24 = vsubq_f64(v19, v18);
    __asm
    {
      FMOV            V5.2D, #3.0
      FMOV            V6.2D, #6.0
    }
    v31 = vmulq_f64(v24, _Q6);
    v32 = vmlaq_f64(v24, _Q5, vaddq_f64(v13, v18));
    v33 = vmulq_f64(vaddq_f64(v18, v24), _Q6);
    v34 = 1;
    __asm
    {
      FMOV            V2.2D, #0.125
      FMOV            V3.2D, #0.25
      FMOV            V4.2D, #0.5
    }
    do
    {
      v38 = v34;
      v31 = vmulq_f64(v31, _Q2);
      v33 = vsubq_f64(vmulq_f64(v33, _Q3), v31);
      v32 = vsubq_f64(vmulq_f64(v32, _Q4), vmulq_f64(v33, _Q4));
      v34 *= 2;
      v23 = v23 * 0.0625;
    }
    while (v23 > a8 * a8 && v34 <= 0x10000);
    if (v34 >= 2)
    {
      v39 = (2 * v38) | 1;
      do
      {
        v47 = v31;
        v49 = vaddq_f64(v12, v32);
        v43 = vaddq_f64(v32, v33);
        v45 = vaddq_f64(v31, v33);
        CGPathAddLineToPoint(a1, 0, v49.f64[1], v49.f64[0]);
        v32 = v43;
        v33 = v45;
        v31 = v47;
        v12 = v49;
        --v39;
      }
      while (v39 > 2);
    }
  }
  CGPathAddLineToPoint(a1, 0, a6, a7);
}

void sub_1001945E0(const CGPath *a1, double a2, double a3, CGFloat a4, CGFloat a5, double a6)
{
  CGPoint CurrentPoint;

  CurrentPoint = CGPathGetCurrentPoint(a1);
  sub_100194460(a1, (CurrentPoint.x + a2 * 2.0) / 3.0, (CurrentPoint.y + a3 * 2.0) / 3.0, (a4 + a2 * 2.0) / 3.0, (a5 + a3 * 2.0) / 3.0, a4, a5, a6);
}

void sub_100194664(uint64_t a1, uint64_t a2)
{
  float64_t *v2;

  switch(*(_DWORD *)a2)
  {
    case 0:
      CGPathMoveToPoint(*(CGMutablePathRef *)a1, 0, **(CGFloat **)(a2 + 8), *(CGFloat *)(*(_QWORD *)(a2 + 8) + 8));
      break;
    case 1:
      CGPathAddLineToPoint(*(CGMutablePathRef *)a1, 0, **(CGFloat **)(a2 + 8), *(CGFloat *)(*(_QWORD *)(a2 + 8) + 8));
      break;
    case 2:
      sub_1001945E0(*(const CGPath **)a1, **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *(CGFloat *)(*(_QWORD *)(a2 + 8) + 16), *(CGFloat *)(*(_QWORD *)(a2 + 8) + 24), *(double *)(a1 + 8));
      break;
    case 3:
      v2 = *(float64_t **)(a2 + 8);
      sub_100194460(*(const CGPath **)a1, *v2, v2[1], v2[2], v2[3], v2[4], v2[5], *(double *)(a1 + 8));
      break;
    case 4:
      CGPathCloseSubpath(*(CGMutablePathRef *)a1);
      break;
    default:
      return;
  }
}

void sub_1001946F8(void **a1, int *a2)
{
  int v2;
  _OWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  int v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint8_t v32[24];

  v2 = *a2;
  if (*a2 != 4)
  {
    if (v2 == 1)
    {
      v4 = (_OWORD *)*((_QWORD *)a2 + 1);
      v13 = (uint64_t)(a1 + 2);
      v14 = (unint64_t)a1[2];
      v7 = a1[1];
      if ((unint64_t)v7 >= v14)
      {
        v22 = ((char *)v7 - (_BYTE *)*a1) >> 4;
        v23 = v22 + 1;
        if (!((unint64_t)(v22 + 1) >> 60))
        {
          v24 = v14 - (_QWORD)*a1;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
            v26 = (char *)sub_10001FB2C(v13, v25);
          else
            v26 = 0;
          v27 = &v26[16 * v22];
          v28 = &v26[16 * v25];
          *(_OWORD *)v27 = *v4;
          v15 = v27 + 16;
          v31 = (char *)*a1;
          v29 = (char *)a1[1];
          if (v29 == *a1)
            goto LABEL_40;
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v29 - 1);
            v27 -= 16;
            v29 -= 16;
          }
          while (v29 != v31);
          goto LABEL_39;
        }
LABEL_44:
        sub_100007810();
      }
LABEL_14:
      *v7 = *v4;
      v15 = v7 + 1;
LABEL_42:
      a1[1] = v15;
      return;
    }
    if (!v2)
    {
      v4 = (_OWORD *)*((_QWORD *)a2 + 1);
      v5 = (uint64_t)(a1 + 2);
      v6 = (unint64_t)a1[2];
      v7 = a1[1];
      if ((unint64_t)v7 >= v6)
      {
        v8 = ((char *)v7 - (_BYTE *)*a1) >> 4;
        v9 = v8 + 1;
        if (!((unint64_t)(v8 + 1) >> 60))
        {
          v10 = v6 - (_QWORD)*a1;
          if (v10 >> 3 > v9)
            v9 = v10 >> 3;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
            v11 = 0xFFFFFFFFFFFFFFFLL;
          else
            v11 = v9;
          if (v11)
            v12 = (char *)sub_10001FB2C(v5, v11);
          else
            v12 = 0;
          v27 = &v12[16 * v8];
          v28 = &v12[16 * v11];
          *(_OWORD *)v27 = *v4;
          v15 = v27 + 16;
          v30 = (char *)*a1;
          v29 = (char *)a1[1];
          if (v29 == *a1)
            goto LABEL_40;
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v29 - 1);
            v27 -= 16;
            v29 -= 16;
          }
          while (v29 != v30);
LABEL_39:
          v29 = (char *)*a1;
LABEL_40:
          *a1 = v27;
          a1[1] = v15;
          a1[2] = v28;
          if (v29)
            operator delete(v29);
          goto LABEL_42;
        }
        goto LABEL_44;
      }
      goto LABEL_14;
    }
    v16 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123F3F0);
    v17 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E040EC(v16, v17);
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_10123F410);
    v18 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100E02830(v19, v32, v16, (os_log_t)v18);
    }

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void _CRLPKControlPointsFromFlattenedPathApplier(std::vector<CGPoint> *, const CGPathElement *)"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCGPathUtility.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v20, v21, 206, 0, "If path includes kCGPathElementAddQuadCurveToPoint or kCGPathElementAddCurveToPoint it was not properly flattened.");

  }
}

void sub_100194A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100194A28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100194A58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100194A88(const CGPath *a1, void *a2)
{
  const CGPath *Mutable;
  _QWORD v5[2];

  if (a1)
  {
    Mutable = CGPathCreateMutable();
    v5[0] = Mutable;
    v5[1] = 0x3F847AE147AE147BLL;
    CGPathApply(a1, v5, (CGPathApplierFunction)sub_100194664);
    CGPathApply(Mutable, a2, (CGPathApplierFunction)sub_1001946F8);
    CGPathRelease(Mutable);
  }
}

void sub_100194B08(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  double *v6;
  double *v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  double v23;
  double *v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;

  v5 = (_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 >= v4)
  {
    v8 = *(double **)a2;
    v9 = ((uint64_t)v6 - *(_QWORD *)a2) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
LABEL_40:
      sub_100007810();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10002BA34((uint64_t)v5, v12);
      v8 = *(double **)a2;
      v6 = *(double **)(a2 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = 0;
    v7 = (double *)(v14 + 8);
    while (v6 != v8)
    {
      v16 = *((_QWORD *)v6-- - 1);
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = 0.0;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v17 = *a1;
  v18 = a1[1] - *a1;
  if (v18 != 16)
  {
    v19 = 0;
    v20 = v18 >> 4;
    do
    {
      if (v20 <= v19 || (v21 = v19 + 1, v20 <= v19 + 1))
        sub_100194D18();
      v22 = (double *)(v17 + 16 * v19);
      v23 = sqrt((v22[1] - *(double *)(v17 + 16 * v21 + 8)) * (v22[1] - *(double *)(v17 + 16 * v21 + 8))+ (*v22 - *(double *)(v17 + 16 * v21)) * (*v22 - *(double *)(v17 + 16 * v21)));
      if ((unint64_t)v7 >= *v5)
      {
        v25 = *(double **)a2;
        v26 = ((uint64_t)v7 - *(_QWORD *)a2) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_40;
        v28 = *v5 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)sub_10002BA34((uint64_t)v5, v29);
          v25 = *(double **)a2;
          v7 = *(double **)(a2 + 8);
        }
        else
        {
          v30 = 0;
        }
        v31 = (double *)&v30[8 * v26];
        *v31 = v23;
        v24 = v31 + 1;
        while (v7 != v25)
        {
          v32 = *((_QWORD *)v7-- - 1);
          *((_QWORD *)v31-- - 1) = v32;
        }
        *(_QWORD *)a2 = v31;
        *(_QWORD *)(a2 + 8) = v24;
        *(_QWORD *)(a2 + 16) = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v7 = v23;
        v24 = v7 + 1;
      }
      *(_QWORD *)(a2 + 8) = v24;
      v17 = *a1;
      v20 = (a1[1] - *a1) >> 4;
      v7 = v24;
      v19 = v21;
    }
    while (v21 < v20 - 1);
  }
}

void sub_100194D18()
{
  sub_10001E2D0("vector");
}

uint64_t sub_100194D2C()
{
  return kdebug_trace(875561004, 0, 0, 0, 0);
}

uint64_t sub_100194D48(uint64_t a1)
{
  return kdebug_trace(875561008, a1, 0, 0, 0);
}

void sub_100194DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CRLWPCTTypesetterCache;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100195000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100195028(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195058(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t *sub_1001951E0(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v12[6] = 0;
    v15 = 1;
    sub_10001D650(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_1001952C4((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void sub_1001952C4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100038CC0((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

void sub_100195308(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100195308(a1, *a2);
    sub_100195308(a1, a2[1]);
    sub_100038CC0((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void sub_1001955D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195600(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195870(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001958A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195B74(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195BA4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195BD4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195C04(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195FC4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100195FF4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100196424(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100196454(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100196688(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001966B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100196884(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001968B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001973E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100197410(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100197440(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100197470(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001974A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001974D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100197DD0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[CRLCIKernelLoader loadKernelWithMetalName:legacyName:](CRLCIKernelLoader, "loadKernelWithMetalName:legacyName:", CFSTR("curvedShadowDisplacement"), CFSTR("CRLCurvedShadow_CurveDisplacement")));
  v2 = (void *)qword_101414F10;
  qword_101414F10 = v1;

}

void sub_100197EB4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[CRLCIKernelLoader loadKernelWithMetalName:legacyName:](CRLCIKernelLoader, "loadKernelWithMetalName:legacyName:", CFSTR("curvedShadowBlurBlend"), CFSTR("CRLCurvedShadow_BlurBlend")));
  v2 = (void *)qword_101414F20;
  qword_101414F20 = v1;

}

void sub_10019895C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019898C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100198B18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100198B48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100198CC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100198CF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100198E88(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_100198EB8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001997C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001997F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_100199948(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_10019A460(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10019A5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10019A604(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10019A614(uint64_t a1)
{

}

void sub_10019A61C(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v3 + 40);
  v4 = objc_msgSend(a2, "getPromisedItemResourceValue:forKey:error:", &obj, NSURLContentTypeKey, 0);
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
}

void sub_10019AA9C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9068;
  off_1013D9068 = v2;

}

void sub_10019B124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10019B13C(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  id v6;
  void *v7;
  int v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v6 = a2;
  if (objc_msgSend(v6, "resultType") == (id)2048)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "phoneNumber"));
    if (!objc_msgSend(v7, "length"))
    {
      v8 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123F978);
      v9 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100E04A94(v8, v9);
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_10123F998);
      v10 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100DE87A4(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "+[NSURL(CRLAdditions) crl_urlFromUserProvidedTelephoneString:withDataDetector:]_block_invoke"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSURL_CRLAdditions.m"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v11, v12, 275, 0, "Expected phone number match from NSDataDetector");

    }
    if (objc_msgSend(v7, "length"))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet alphanumericCharacterSet](NSCharacterSet, "alphanumericCharacterSet"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByAddingPercentEncodingWithAllowedCharacters:", v13));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("tel:"), "stringByAppendingString:", v14));
      v16 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v15));
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v18 = *(void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = v16;

      *a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;
    }

  }
}

void sub_10019B35C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019B38C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019B638(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019B668(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019B8C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019B8F0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019B9CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019BB7C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019BBA8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019C848(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019C874(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019C8A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019C8CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019C8F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019C924(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019D178(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019D4B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019D6E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019D7E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019E358(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019E384(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019E3B0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019E3E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019E410(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMultiSelectGRCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DA410;
  off_1013DA410 = v2;

}

void sub_10019E534(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

_BYTE *sub_10019E548(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

id sub_10019E564()
{
  void *v0;

  return objc_msgSend(v0, "state");
}

void sub_10019EB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10019EB4C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  objc_class *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v25 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "nsRange");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLWPSelection crlaxSelectionWithRange:](CRLWPSelection, "crlaxSelectionWithRange:", v2, v3));
  objc_opt_class(CRLWPSelection, v5);
  v7 = __CRLAccessibilityCastAsClass(v6, (uint64_t)v4, 1, &v25);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (v25)
    abort();
  v9 = (void *)v8;

  objc_msgSend(*(id *)(a1 + 40), "rectForSelection:includeRuby:includePaginatedAttachments:", v9, 0, 0);
  v10 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
  v10[4] = v11;
  v10[5] = v12;
  v10[6] = v13;
  v10[7] = v14;
  objc_msgSend(*(id *)(a1 + 40), "convertNaturalRectToUnscaledCanvas:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 56));
  v15 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
  v15[4] = v16;
  v15[5] = v17;
  v15[6] = v18;
  v15[7] = v19;
  objc_msgSend(*(id *)(a1 + 48), "convertUnscaledToBoundsRect:", *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 56));
  v20 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
  v20[4] = v21;
  v20[5] = v22;
  v20[6] = v23;
  v20[7] = v24;

}

void sub_10019EF30(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019EF60(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019EF90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019EFC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_10019F910(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  __int128 v8;

  *(_QWORD *)a1 = cf;
  *(double *)(a1 + 8) = a6;
  *(double *)(a1 + 16) = a7;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = 0x7FFFFFFFFFFFFFFFLL;
  v8 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_QWORD *)(a1 + 96) = a5;
  if (cf)
    CFRetain(cf);
  return a1;
}

uint64_t sub_10019F96C(uint64_t a1, uint64_t a2)
{
  const void *v3;
  __int128 v4;
  __int128 v5;

  v3 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  if (v3)
    CFRetain(v3);
  return a1;
}

const void **sub_10019F9D0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_10019FA04(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t sub_10019FA78(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_10019FD18(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_10019FD48(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A04F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A0528(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A0558(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A0588(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A0810(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A0840(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A1AD0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A1B00(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1001A2060(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  double v4;
  id result;
  _QWORD v6[4];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  v3 = *(_OWORD *)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 48);
  v4 = 0.2;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 57))
    v4 = 0.0;
  v6[1] = 3221225472;
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_1001A2104;
  v6[3] = &unk_10123FE68;
  v7 = v3;
  v8 = v2;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  result = +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v6, v4);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 57) = 0;
  return result;
}

id sub_1001A2104(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  id result;

  v2 = *(void **)(a1 + 32);
  v3 = sub_10005FDDC();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v10, "setBounds:", v3, v5, v7, v9);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setHidden:", 0);
  v11 = *(double *)(a1 + 48);
  *(float *)&v11 = v11;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setMinimumValue:", v11);
  v12 = *(double *)(a1 + 56);
  *(float *)&v12 = v12;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setMaximumValue:", v12);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setDetents:", *(_QWORD *)(a1 + 40));
  v13 = *(double *)(a1 + 64);
  *(float *)&v13 = v13;
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "setValue:animated:", 0, v13);
  if (*(_BYTE *)(a1 + 72))
    return objc_msgSend(*(id *)(a1 + 32), "p_updateViewPosition");
  return result;
}

void sub_1001A2604(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A2634(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A2664(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A2694(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1001A26C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

void sub_1001A294C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A297C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1001A29AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

void sub_1001A2ACC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_1001A2E28(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A2E58(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A38F8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A3928(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A3958(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A3988(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A39B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A39E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A3E38(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

CRLPathKnob *sub_1001A63A4(uint64_t a1, uint64_t a2)
{
  CRLPathKnob *v4;
  void *v5;
  double v6;

  v4 = -[CRLPathKnob initWithInControlForNode:onRep:]([CRLPathKnob alloc], "initWithInControlForNode:onRep:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  -[CRLPathKnob setNextNode:](v4, "setNextNode:", *(_QWORD *)(a1 + 48));
  -[CRLPathKnob setPrevNode:](v4, "setPrevNode:", *(_QWORD *)(a1 + 56));
  -[CRLCanvasKnob setTag:](v4, "setTag:", a2);
  -[CRLPathKnob setNodeIndex:](v4, "setNodeIndex:", *(_QWORD *)(a1 + 72));
  -[CRLPathKnob setSubpathIndex:](v4, "setSubpathIndex:", *(_QWORD *)(a1 + 80));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[CRLCanvasKnob renderable](v4, "renderable"));
  LODWORD(v6) = 0;
  objc_msgSend(v5, "setOpacity:", v6);

  objc_msgSend(*(id *)(a1 + 64), "addObject:", v4);
  return v4;
}

void sub_1001A68FC(id a1, CRLPathEditableRep *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  objc_msgSend(v2, "selectAllNodes");

}

BOOL sub_1001A692C(id a1, CRLPathEditableRep *a2)
{
  return 1;
}

void sub_1001A69B0(id a1, CRLPathEditableRep *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  objc_msgSend(v2, "deselectAllNodes");

}

BOOL sub_1001A69E0(id a1, CRLPathEditableRep *a2)
{
  return 1;
}

void sub_1001A6F8C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A6FBC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A7418(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A7448(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_1001A7AF0(uint64_t a1, void *a2, uint64_t a3)
{
  return *(_QWORD *)(a1 + 32) != a3 && objc_msgSend(a2, "type") != (id)3;
}

void sub_1001A7C00(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstNode"));
  if (objc_msgSend(v2, "type") == (id)3)
    objc_msgSend(v2, "setType:", 1);
  objc_msgSend(v3, "closePath");

}

BOOL sub_1001A7C64(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) == a2;
}

void sub_1001A8690(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A86C0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A886C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A889C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A8C24(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A8C54(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A8C84(uint64_t a1, void *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "editablePathSource"));
  objc_msgSend(v3, "toggleSelectedNodesToType:", *(_QWORD *)(a1 + 32));

}

BOOL sub_1001A8CC4(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v3 = objc_msgSend(v2, "hasSelectedNode");

  return v3;
}

void sub_1001A8D94(id a1, CRLPathEditableRep *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  objc_msgSend(v2, "cutAtSelectedNodes");

}

BOOL sub_1001A8DC4(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v3 = objc_msgSend(v2, "hasSelectedNode");

  return v3;
}

void sub_1001A8E7C(id a1, CRLPathEditableRep *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  objc_msgSend(v2, "connectSelectedNodes");

}

BOOL sub_1001A8EAC(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v3 = objc_msgSend(v2, "hasSelectedNode");

  return v3;
}

void sub_1001A8F64(id a1, CRLPathEditableRep *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  objc_msgSend(v2, "closeSelectedNodes");

}

BOOL sub_1001A8F94(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v3 = objc_msgSend(v2, "hasSelectedNode");

  return v3;
}

void sub_1001A9440(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A9470(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001A9628(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *k;
  void *v29;
  double v30;
  double v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *j;
  void *v37;
  double v38;
  double v39;
  uint64_t v40;
  float64x2_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  CGAffineTransform v54;
  CGAffineTransform v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  _BYTE v59[128];
  _BYTE v60[128];
  _BYTE v61[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "editablePathSource"));
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layout"));
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "transformInRoot");
  }
  else
  {
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
  }

  *(float64x2_t *)&v54.a = v56;
  *(float64x2_t *)&v54.c = v57;
  *(float64x2_t *)&v54.tx = v58;
  memset(&v55, 0, sizeof(v55));
  CGAffineTransformInvert(&v55, &v54);
  x = CGRectNull.origin.x;
  y = CGRectNull.origin.y;
  width = CGRectNull.size.width;
  height = CGRectNull.size.height;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "nodes"));
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v51 != v15)
          objc_enumerationMutation(v12);
        v17 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v17, "isSelected"))
        {
          objc_msgSend(v17, "nodePoint");
          x = sub_1000615D8(x, y, width, height, vaddq_f64(v58, vmlaq_n_f64(vmulq_n_f64(v57, v18), v56, v19)).f64[0]);
          y = v20;
          width = v21;
          height = v22;
          objc_msgSend(v11, "addObject:", v17);
        }
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
    }
    while (v14);
  }

  v23 = *(_DWORD *)(a1 + 32);
  v40 = sub_10005FD50(v23, x, y, width, height);
  if (v23 > 2)
  {
    v44 = 0uLL;
    v45 = 0uLL;
    v42 = 0uLL;
    v43 = 0uLL;
    v32 = v11;
    v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v42, v59, 16);
    if (v33)
    {
      v34 = v33;
      v35 = *(_QWORD *)v43;
      do
      {
        for (j = 0; j != v34; j = (char *)j + 1)
        {
          if (*(_QWORD *)v43 != v35)
            objc_enumerationMutation(v32);
          v37 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)j);
          objc_msgSend(v37, "nodePoint", v40);
          objc_msgSend(v37, "setNodePoint:", vaddq_f64(*(float64x2_t *)&v55.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v55.c, *(double *)&v40), *(float64x2_t *)&v55.a, v58.f64[0] + v38 * v57.f64[0] + v56.f64[0] * v39)));
        }
        v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v42, v59, 16);
      }
      while (v34);
    }
  }
  else
  {
    v48 = 0uLL;
    v49 = 0uLL;
    v46 = 0uLL;
    v47 = 0uLL;
    v24 = v11;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v47;
      v41 = (float64x2_t)vdupq_lane_s64(v40, 0);
      do
      {
        for (k = 0; k != v26; k = (char *)k + 1)
        {
          if (*(_QWORD *)v47 != v27)
            objc_enumerationMutation(v24);
          v29 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)k);
          objc_msgSend(v29, "nodePoint", *(_QWORD *)&v41.f64[0]);
          objc_msgSend(v29, "setNodePoint:", vaddq_f64(*(float64x2_t *)&v55.tx, vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v55.c, v58.f64[1] + v30 * v57.f64[1] + v56.f64[1] * v31), v41, *(float64x2_t *)&v55.a)));
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
      }
      while (v26);
    }
  }

}

BOOL sub_1001A99F8(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v3 = objc_msgSend(v2, "hasSelectedNode");

  return v3;
}

void sub_1001A9B28(uint64_t a1, void *a2)
{
  void *v3;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double MinX;
  double v21;
  id v22;
  id v23;
  id v24;
  id v25;
  double v26;
  uint64_t v27;
  void *k;
  void *v29;
  double MinY;
  double v31;
  id v32;
  id v33;
  id v34;
  id v35;
  double v36;
  uint64_t v37;
  void *j;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE v53[128];
  _BYTE v54[128];
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "editablePathSource"));
  x = CGRectNull.origin.x;
  y = CGRectNull.origin.y;
  width = CGRectNull.size.width;
  height = CGRectNull.size.height;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "nodes"));
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v49;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v49 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v14, "isSelected"))
        {
          objc_msgSend(v14, "nodePoint");
          x = sub_1000615D8(x, y, width, height, v15);
          y = v16;
          width = v17;
          height = v18;
          objc_msgSend(v8, "addObject:", v14);
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
    }
    while (v11);
  }

  v19 = *(_DWORD *)(a1 + 32);
  if (v19 == 4)
  {
    objc_msgSend(v8, "sortUsingComparator:", &stru_101240478);
    v57.origin.x = x;
    v57.origin.y = y;
    v57.size.width = width;
    v57.size.height = height;
    MinY = CGRectGetMinY(v57);
    v58.origin.x = x;
    v58.origin.y = y;
    v58.size.width = width;
    v58.size.height = height;
    v31 = CGRectGetHeight(v58);
    v32 = objc_msgSend(v8, "count");
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v33 = v8;
    v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v40, v52, 16);
    if (v34)
    {
      v35 = v34;
      v36 = v31 / (double)(unint64_t)v32;
      v37 = *(_QWORD *)v41;
      do
      {
        for (j = 0; j != v35; j = (char *)j + 1)
        {
          if (*(_QWORD *)v41 != v37)
            objc_enumerationMutation(v33);
          v39 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)j);
          objc_msgSend(v39, "nodePoint", (_QWORD)v40);
          objc_msgSend(v39, "setNodePoint:");
          MinY = v36 + MinY;
        }
        v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v40, v52, 16);
      }
      while (v35);
    }
    goto LABEL_27;
  }
  if (v19 == 1)
  {
    objc_msgSend(v8, "sortUsingComparator:", &stru_101240458);
    v55.origin.x = x;
    v55.origin.y = y;
    v55.size.width = width;
    v55.size.height = height;
    MinX = CGRectGetMinX(v55);
    v56.origin.x = x;
    v56.origin.y = y;
    v56.size.width = width;
    v56.size.height = height;
    v21 = CGRectGetWidth(v56);
    v22 = objc_msgSend(v8, "count");
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v23 = v8;
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
    if (v24)
    {
      v25 = v24;
      v26 = v21 / (double)(unint64_t)v22;
      v27 = *(_QWORD *)v45;
      do
      {
        for (k = 0; k != v25; k = (char *)k + 1)
        {
          if (*(_QWORD *)v45 != v27)
            objc_enumerationMutation(v23);
          v29 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)k);
          objc_msgSend(v29, "nodePoint");
          objc_msgSend(v29, "setNodePoint:", MinX);
          MinX = v26 + MinX;
        }
        v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
      }
      while (v25);
    }
LABEL_27:

  }
}

int64_t sub_1001A9EB8(id a1, id a2, id a3)
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = a3;
  objc_msgSend(a2, "nodePoint");
  v6 = v5;
  objc_msgSend(v4, "nodePoint");
  v8 = v7;

  if (v6 < v8)
    return -1;
  else
    return v6 > v8;
}

int64_t sub_1001A9F0C(id a1, id a2, id a3)
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = a3;
  objc_msgSend(a2, "nodePoint");
  v6 = v5;
  objc_msgSend(v4, "nodePoint");
  v8 = v7;

  if (v6 < v8)
    return -1;
  else
    return v6 > v8;
}

BOOL sub_1001A9F60(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v3 = objc_msgSend(v2, "hasSelectedNode");

  return v3;
}

void sub_1001AA388(id a1, CRLPathEditableRep *a2)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  objc_msgSend(v2, "deleteSelectedNodes");

}

BOOL sub_1001AA3B8(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  char v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v3 = objc_msgSend(v2, "deletingSelectedNodesWillDeleteShape") ^ 1;

  return v3;
}

void sub_1001AA3F0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;

  v5 = a2;
  v6 = v5;
  if (*(id *)(a1 + 32) != v5)
  {
    v8 = v5;
    v7 = objc_msgSend(v5, "canPerformEditorAction:withSender:", "delete:", *(_QWORD *)(a1 + 40));
    v6 = v8;
    if (v7)
    {
      objc_msgSend(v8, "performSelector:withObject:", "delete:", *(_QWORD *)(a1 + 40));
      v6 = v8;
      *a3 = 1;
    }
  }

}

void sub_1001AA474(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "editablePathSource"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastNode"));
  objc_msgSend(v3, "setSelected:", 1);

  objc_msgSend(v4, "deleteSelectedNodesForced:", 0);
  objc_msgSend(*(id *)(a1 + 32), "updateGhost");

}

BOOL sub_1001AA4D8(id a1, CRLPathEditableRep *a2)
{
  return 1;
}

void sub_1001AA5C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  CGAffineTransform v10;
  CGAffineTransform v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layout"));
  v5 = v4;
  if (v4)
    objc_msgSend(v4, "transformInRoot");
  else
    memset(&v10, 0, sizeof(v10));
  CGAffineTransformInvert(&v11, &v10);
  v6 = sub_10006214C((float64x2_t *)&v11, *(double *)(a1 + 32), *(double *)(a1 + 40));
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "editablePathSource"));
  objc_msgSend(v9, "offsetSelectedNodesByDelta:", v6, v8);

}

BOOL sub_1001AA674(id a1, CRLPathEditableRep *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CRLPathEditableRep editablePathSource](a2, "editablePathSource"));
  v3 = objc_msgSend(v2, "hasSelectedNode");

  return v3;
}

void sub_1001AB288(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AB2B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AB7B4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AB7E4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AB894(id a1)
{
  CRLMoviePlaybackRegistry *v1;
  void *v2;

  v1 = objc_alloc_init(CRLMoviePlaybackRegistry);
  v2 = (void *)qword_101414F38;
  qword_101414F38 = (uint64_t)v1;

}

void sub_1001ABE90(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001ABEC0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001ABEF0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001ABF20(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001ABF50(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMoviePlaybackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB560;
  off_1013DB560 = v2;

}

void sub_1001ABF80(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001ABFB0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC71C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC74C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC77C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC7AC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC7DC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLMoviePlaybackCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013DB560;
  off_1013DB560 = v2;

}

void sub_1001AC80C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC83C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC86C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC89C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC8CC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AC8FC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

BOOL sub_1001AC968(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 == a3)
    return a3 + a4 < a1 + a2;
  else
    return a1 < a3;
}

void sub_1001AC988(char **a1)
{
  char *v2;
  char *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL (*v24)(unint64_t, uint64_t, unint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  if ((unint64_t)(v3 - v2) < 0x11)
    return;
  v24 = sub_1001AC968;
  v5 = 126 - 2 * __clz((v3 - v2) >> 4);
  if (v3 == v2)
    v6 = 0;
  else
    v6 = v5;
  sub_1001ACAD8(v2, v3, (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v24, v6, 1);
  v7 = 0;
  v9 = *a1;
  v8 = a1[1];
  v10 = v8 - *a1;
  v11 = v8 != *a1;
  if ((unint64_t)v10 >= 0x11 && v8 != v9)
  {
    v7 = 0;
    v12 = v10 >> 4;
    v13 = *(_QWORD *)v9;
    v14 = 1;
    while (2)
    {
      if (v12 <= v14 + 1)
        v15 = v14 + 1;
      else
        v15 = v12;
      v16 = &v9[16 * v14 + 8];
      while (1)
      {
        v17 = *((_QWORD *)v16 - 1);
        if (v13 != v17)
          break;
        ++v14;
        v16 += 16;
        if (v15 == v14)
        {
          if (v7 >= v12)
            return;
          goto LABEL_25;
        }
      }
      v18 = &v9[16 * v7];
      v20 = *(_QWORD *)v18;
      v19 = *((_QWORD *)v18 + 1);
      v21 = *(_QWORD *)v16;
      if (v19 + v20 >= v17)
      {
        v22 = v21 + v17;
        if (v19 + v20 >= v22)
        {
LABEL_20:
          ++v14;
          v11 = v7 < v12;
          if (v14 < v12)
          {
            v13 = v17;
            if (v7 < v12)
              continue;
          }
          goto LABEL_22;
        }
        v21 = v22 - v20;
      }
      else
      {
        ++v7;
        *(_QWORD *)&v9[16 * v7] = v17;
      }
      break;
    }
    *(_QWORD *)&v9[16 * v7 + 8] = v21;
    goto LABEL_20;
  }
LABEL_22:
  if (v11)
  {
LABEL_25:
    v23 = (uint64_t)&v9[16 * v7 + 16];
    if ((char *)v23 != v8)
      a1[1] = (char *)v23;
  }
}

void sub_1001ACAD8(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, char a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;

uint64_t sub_1001ACE2C(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      v7 = 0;
      v8 = (_QWORD *)result;
      do
      {
        v9 = v5;
        result = (*a3)(v8[2], v8[3], *v8, v8[1]);
        if ((_DWORD)result)
        {
          v10 = *v9;
          v11 = v8[3];
          v12 = v7;
          while (1)
          {
            *(_OWORD *)((char *)v4 + v12 + 16) = *(_OWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v10, v11, *(_QWORD *)((char *)v4 + v12 - 16), *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 16;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 16);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v10;
          v13[1] = v11;
        }
        v5 = v9 + 2;
        v7 += 16;
        v8 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1001ACEFC(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _QWORD *v11;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      do
      {
        v7 = v5;
        result = (*a3)(v4[2], v4[3], *v4, v4[1]);
        if ((_DWORD)result)
        {
          v8 = *v7;
          v9 = v4[3];
          v10 = v7;
          do
          {
            v11 = v10 - 1;
            *v10 = *(v10 - 1);
            result = (*a3)(v8, v9, *((_QWORD *)v10 - 4), *((_QWORD *)v10 - 3));
            v10 = v11;
          }
          while ((result & 1) != 0);
          *v11 = v8;
          v11[1] = v9;
        }
        v5 = v7 + 2;
        v4 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1001ACFA4(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = (*a4)(*a2, a2[1], *a1, a1[1]);
  result = (*a4)(*a3, a3[1], *a2, a2[1]);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if (!(*a4)(*a2, a2[1], *a1, a1[1]))
      return 1;
    v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    if (!(*a4)(*a3, a3[1], *a2, a2[1]))
      return 1;
    v14 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v14;
    return 2;
  }
  v10 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v10;
  return 1;
}

_QWORD *sub_1001AD0A0(_QWORD *a1, _OWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _OWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;

  v4 = a2;
  v6 = *a1;
  v7 = a1[1];
  if (((*a3)(*a1, v7, *((_QWORD *)a2 - 2), *((_QWORD *)a2 - 1)) & 1) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[2];
      v10 = v8[3];
      v8 += 2;
    }
    while (((*a3)(v6, v7, v9, v10) & 1) == 0);
  }
  else
  {
    v11 = a1 + 2;
    do
    {
      v8 = v11;
      if (v11 >= (_QWORD *)v4)
        break;
      v12 = (*a3)(v6, v7, *v11, v11[1]);
      v11 = v8 + 2;
    }
    while (!v12);
  }
  if (v8 < (_QWORD *)v4)
  {
    do
    {
      v13 = *((_QWORD *)v4 - 2);
      v14 = *((_QWORD *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v13, v14) & 1) != 0);
  }
  while (v8 < (_QWORD *)v4)
  {
    v20 = *(_OWORD *)v8;
    *(_OWORD *)v8 = *v4;
    *v4 = v20;
    do
    {
      v15 = v8[2];
      v16 = v8[3];
      v8 += 2;
    }
    while (!(*a3)(v6, v7, v15, v16));
    do
    {
      v17 = *((_QWORD *)v4 - 2);
      v18 = *((_QWORD *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v17, v18) & 1) != 0);
  }
  if (v8 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
  *(v8 - 2) = v6;
  *(v8 - 1) = v7;
  return v8;
}

uint64_t *sub_1001AD1D4(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *result;

  v6 = 0;
  v7 = *a1;
  v8 = a1[1];
  do
  {
    v9 = (*a3)(a1[v6 + 2], a1[v6 + 3], v7, v8);
    v6 += 2;
  }
  while ((v9 & 1) != 0);
  v10 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v10 >= a2)
        break;
      v13 = *(a2 - 2);
      v14 = *(a2 - 1);
      a2 -= 2;
    }
    while (((*a3)(v13, v14, v7, v8) & 1) == 0);
  }
  else
  {
    do
    {
      v11 = *(a2 - 2);
      v12 = *(a2 - 1);
      a2 -= 2;
    }
    while (!(*a3)(v11, v12, v7, v8));
  }
  v15 = &a1[v6];
  if (v10 < a2)
  {
    v16 = a2;
    do
    {
      v17 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v17;
      do
      {
        v18 = v15[2];
        v19 = v15[3];
        v15 += 2;
      }
      while (((*a3)(v18, v19, v7, v8) & 1) != 0);
      do
      {
        v20 = *(v16 - 2);
        v21 = *(v16 - 1);
        v16 -= 2;
      }
      while (!(*a3)(v20, v21, v7, v8));
    }
    while (v15 < v16);
  }
  result = v15 - 2;
  if (v15 - 2 != a1)
    *(_OWORD *)a1 = *(_OWORD *)result;
  *(v15 - 2) = v7;
  *(v15 - 1) = v8;
  return result;
}

BOOL sub_1001AD304(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 16;
      if ((*a3)(*((_QWORD *)a2 - 2), *((_QWORD *)a2 - 1), *(_QWORD *)a1, *((_QWORD *)a1 + 1)))
      {
        v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)v8 = v9;
      }
      return 1;
    case 3:
      sub_1001ACFA4(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2, a3);
      return 1;
    case 4:
      sub_1001AD4BC(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2, a3);
      return 1;
    case 5:
      sub_1001AD574(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, (_QWORD *)a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 32;
      sub_1001ACFA4(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, a3);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(_QWORD *)v11, *((_QWORD *)v11 + 1), *(_QWORD *)v10, *((_QWORD *)v10 + 1)))
    {
      v14 = *(_QWORD *)v11;
      v15 = *((_QWORD *)v11 + 1);
      v16 = v12;
      while (1)
      {
        v17 = &a1[v16];
        *(_OWORD *)&a1[v16 + 48] = *(_OWORD *)&a1[v16 + 32];
        if (v16 == -32)
          break;
        v16 -= 16;
        if (((*a3)(v14, v15, *((_QWORD *)v17 + 2), *((_QWORD *)v17 + 3)) & 1) == 0)
        {
          v18 = &a1[v16 + 48];
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *((_QWORD *)v18 + 1) = v15;
      if (++v13 == 8)
        return v11 + 16 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_1001AD4BC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  __n128 result;
  __int128 v11;
  __int128 v12;

  sub_1001ACFA4(a1, a2, a3, a5);
  if ((*a5)(*a4, a4[1], *a3, a3[1]))
  {
    v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if ((*a5)(*a3, a3[1], *a2, a2[1]))
    {
      v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      if ((*a5)(*a2, a2[1], *a1, a1[1]))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1001AD574(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v12 = sub_1001AD4BC(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))*a6)(*a5, a5[1], *a4, a4[1], v12))
  {
    v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if ((*a6)(*a4, a4[1], *a3, a3[1]))
    {
      v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if ((*a6)(*a3, a3[1], *a2, a2[1]))
      {
        v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if ((*a6)(*a2, a2[1], *a1, a1[1]))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *sub_1001AD654(char *a1, char *a2, char *a3, uint64_t (**a4)(_QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v21;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[16 * v10];
      do
      {
        sub_1001AD7BC((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)(*(_QWORD *)v14, *((_QWORD *)v14 + 1), *(_QWORD *)a1, *((_QWORD *)a1 + 1)))
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_1001AD7BC((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 16;
      do
      {
        v21 = *(_OWORD *)a1;
        v18 = (char *)sub_1001AD8F8(a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)v18 = v21;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v21;
          sub_1001AD9A8((uint64_t)a1, (uint64_t)(v18 + 16), a4, (v18 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1001AD7BC(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v17 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v9 = ((uint64_t)a4 - result) >> 3;
      v10 = v9 + 1;
      v11 = (_QWORD *)(result + 16 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3 && (*a2)(*v11, v11[1], v11[2], v11[3]))
      {
        v11 += 2;
        v10 = v12;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))*a2)(*v11, v11[1], *v5, v5[1]);
      if ((result & 1) == 0)
      {
        v13 = *v5;
        v14 = v5[1];
        do
        {
          v15 = v11;
          *(_OWORD *)v5 = *(_OWORD *)v11;
          if (v17 < v10)
            break;
          v16 = (2 * v10) | 1;
          v11 = (_QWORD *)(v6 + 16 * v16);
          if (2 * v10 + 2 < a3)
          {
            if ((*a2)(*v11, v11[1], v11[2], v11[3]))
            {
              v11 += 2;
              v16 = 2 * v10 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))*a2)(*v11, v11[1], v13, v14);
          v5 = v15;
          v10 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v13;
        v15[1] = v14;
      }
    }
  }
  return result;
}

_OWORD *sub_1001AD8F8(_OWORD *a1, unsigned int (**a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*a2)(*(_QWORD *)&a1[v6 + 1], *((_QWORD *)&a1[v6 + 1] + 1), *(_QWORD *)&a1[v6 + 2], *((_QWORD *)&a1[v6 + 2] + 1)))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_1001AD9A8(uint64_t result, uint64_t a2, uint64_t (**a3)(_QWORD, _QWORD, uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = (_QWORD *)(result + 16 * (v4 >> 1));
    v10 = (_OWORD *)(a2 - 16);
    result = (*a3)(*v9, v9[1], *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v11 = *(_QWORD *)(a2 - 16);
      v12 = *(_QWORD *)(a2 - 8);
      do
      {
        v13 = v9;
        *v10 = *(_OWORD *)v9;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (_QWORD *)(v7 + 16 * v8);
        result = (*a3)(*v9, v9[1], v11, v12);
        v10 = v13;
      }
      while ((result & 1) != 0);
      *v13 = v11;
      v13[1] = v12;
    }
  }
  return result;
}

void sub_1001ADA8C(id a1)
{
  byte_101414F48 = sub_1003A91A0();
}

id sub_1001ADAC0(__int16 a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  __int16 v6;

  v6 = a1;
  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithCharacters:length:", &v6, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringByApplyingTransform:reverse:", NSStringTransformFullwidthToHalfwidth, 1));
  if (objc_msgSend(v2, "length"))
    v3 = v2;
  else
    v3 = v1;
  v4 = objc_msgSend(v3, "characterAtIndex:", 0);

  return v4;
}

void sub_1001ADB48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001ADB64(UChar32 a1)
{
  UBlockCode Code;
  uint64_t result;

  Code = ublock_getCode(a1);
  result = 0;
  if (Code <= UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION)
  {
    switch(Code)
    {
      case UBLOCK_BASIC_LATIN:
      case UBLOCK_LATIN_1_SUPPLEMENT:
      case UBLOCK_LATIN_EXTENDED_A:
      case UBLOCK_LATIN_EXTENDED_B:
        return 2;
      case UBLOCK_IPA_EXTENSIONS:
      case UBLOCK_SPACING_MODIFIER_LETTERS:
      case UBLOCK_COMBINING_DIACRITICAL_MARKS:
      case UBLOCK_GREEK:
      case UBLOCK_ARMENIAN:
        return result;
      case UBLOCK_CYRILLIC:
        return 9;
      case UBLOCK_HEBREW:
        return 8;
      case UBLOCK_ARABIC:
        return 7;
      default:
        if (Code == UBLOCK_HANGUL_JAMO)
          return 10;
        if (Code != UBLOCK_LATIN_EXTENDED_ADDITIONAL)
          return result;
        break;
    }
    return 2;
  }
  if (Code <= UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS)
  {
    switch(Code)
    {
      case UBLOCK_HIRAGANA:
        result = 3;
        break;
      case UBLOCK_KATAKANA:
        return 4;
      case UBLOCK_BOPOMOFO:
      case UBLOCK_BOPOMOFO_EXTENDED:
        result = 5;
        break;
      case UBLOCK_HANGUL_COMPATIBILITY_JAMO:
      case UBLOCK_HANGUL_SYLLABLES:
        return 10;
      case UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A:
      case UBLOCK_CJK_UNIFIED_IDEOGRAPHS:
      case UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS:
        return 6;
      default:
        return result;
    }
    return result;
  }
  if (Code > UBLOCK_BALINESE)
  {
    if ((Code - 148) >= 2)
    {
      if (Code != UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C && Code != UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D)
        return result;
      return 6;
    }
    return 2;
  }
  if ((Code - 94) < 2)
    return 6;
  if (Code == UBLOCK_KATAKANA_PHONETIC_EXTENSIONS)
    return 4;
  return result;
}

CFTypeRef sub_1001ADC68(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  CFTypeRef v6;

  v3 = a1;
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLWPFontList sharedInstance](CRLWPFontList, "sharedInstance"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fontForPostscriptName:atSize:", v3, a2));
    v6 = CFRetain(objc_msgSend(v5, "ctFont"));

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1001ADCEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const __CTFont *sub_1001ADD14(const __CTFont *a1)
{
  const __CTFontDescriptor *v2;
  const __CTFontDescriptor *v3;
  void *v4;
  const void *v5;
  unsigned int v6;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CTFont *v9;
  const __CFDictionary *v10;
  const __CTFontDescriptor *v11;
  CGFloat Size;
  CTFontRef CopyWithAttributes;
  CTFontRef v14;
  void *v15;
  void *v16;
  void *v17;
  CFTypeRef v18;
  CFStringRef v20;
  _UNKNOWN **v21;
  CFRange v22;

  v2 = CTFontCopyFontDescriptor(a1);
  if (!v2)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012408A8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E0604C();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012408C8);
    v15 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CTFontRef CRLWPGetVerticalVersionOfFont(CTFontRef)"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v16, v17, 597, 0, "invalid nil value for '%{public}s'", "fd");

    goto LABEL_22;
  }
  v3 = v2;
  v4 = (void *)CTFontDescriptorCopyAttribute(v2, kCTFontOrientationAttribute);
  if (v4 && (v5 = v4, v6 = objc_msgSend(v4, "intValue"), CFRelease(v5), v6 == 2)
    || (v7 = CTFontCopyAvailableTables(a1, 0)) == 0)
  {
    CFRelease(v3);
LABEL_22:
    v18 = CFRetain(a1);
    CFAutorelease(v18);
    return a1;
  }
  v8 = v7;
  v22.length = CFArrayGetCount(v7);
  v22.location = 0;
  v9 = a1;
  if (CFArrayGetFirstIndexOfValue(v8, v22, (const void *)0x766D7478) != -1)
  {
    v20 = kCTFontOrientationAttribute;
    v21 = &off_1012CBBD8;
    v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
    v11 = CTFontDescriptorCreateWithAttributes(v10);

    v9 = a1;
    if (v11)
    {
      Size = CTFontGetSize(a1);
      CopyWithAttributes = CTFontCreateCopyWithAttributes(a1, Size, 0, v11);
      v14 = CopyWithAttributes;
      v9 = a1;
      if (CopyWithAttributes)
      {
        CFAutorelease(CopyWithAttributes);
        v9 = v14;
      }
      CFRelease(v11);
    }
  }
  CFRelease(v8);
  CFRelease(v3);
  if (v9 == a1)
    goto LABEL_22;
  return v9;
}

void sub_1001ADFD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001ADFFC(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AE02C(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

CGFloat sub_1001AE05C(const __CTFont *a1)
{
  CGFloat v2;
  CGFloat v3;

  if (!a1)
    return 0.0;
  v2 = CTFontGetAscent(a1) + 0.0;
  v3 = v2 + CTFontGetDescent(a1);
  return v3 + CTFontGetLeading(a1);
}

id sub_1001AE0B0()
{
  if (qword_101414F60 != -1)
    dispatch_once(&qword_101414F60, &stru_1012408E8);
  return (id)qword_101414F58;
}

void sub_1001AE0F0(id a1)
{
  id v1;
  void *v2;
  id v3;

  v3 = objc_alloc_init((Class)NSMutableCharacterSet);
  objc_msgSend(v3, "addCharactersInRange:", 10, 1);
  objc_msgSend(v3, "addCharactersInRange:", 13, 1);
  objc_msgSend(v3, "addCharactersInRange:", 8233, 1);
  objc_msgSend(v3, "addCharactersInRange:", 11, 1);
  objc_msgSend(v3, "addCharactersInRange:", 5, 1);
  objc_msgSend(v3, "addCharactersInRange:", 12, 1);
  objc_msgSend(v3, "addCharactersInRange:", 6, 1);
  objc_msgSend(v3, "addCharactersInRange:", 15, 1);
  objc_msgSend(v3, "addCharactersInRange:", 4, 1);
  v1 = objc_msgSend(v3, "copy");
  v2 = (void *)qword_101414F58;
  qword_101414F58 = (uint64_t)v1;

}

void sub_1001AE1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1001AE1DC()
{
  if (qword_101414F70 != -1)
    dispatch_once(&qword_101414F70, &stru_101240908);
  return (id)qword_101414F68;
}

void sub_1001AE21C(id a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = sub_1001AE0B0();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v5 = objc_msgSend(v2, "mutableCopy");

  objc_msgSend(v5, "addCharactersInRange:", 8232, 1);
  v3 = objc_msgSend(v5, "copy");
  v4 = (void *)qword_101414F68;
  qword_101414F68 = (uint64_t)v3;

}

void sub_1001AE280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001AE2A0(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = sub_1001AE0B0();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_msgSend(v3, "longCharacterIsMember:", a1);

  return v4;
}

void sub_1001AE2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001AE2EC(uint64_t a1)
{
  if (qword_101414F80 != -1)
    dispatch_once(&qword_101414F80, &stru_101240928);
  return objc_msgSend((id)qword_101414F78, "longCharacterIsMember:", a1);
}

void sub_1001AE33C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
  v2 = (void *)qword_101414F78;
  qword_101414F78 = v1;

}

uint64_t sub_1001AE368(uint64_t a1)
{
  uint64_t result;

  if ((sub_1001AE2EC(a1) & 1) != 0)
    return 1;
  LODWORD(result) = sub_1001AE2A0(a1);
  if ((_DWORD)a1 == 8232)
    return 1;
  else
    return result;
}

BOOL sub_1001AE3AC(int a1)
{
  return a1 == 65532 || a1 == 14;
}

id sub_1001AE3C0(uint64_t a1)
{
  if (qword_101414F90 != -1)
    dispatch_once(&qword_101414F90, &stru_101240948);
  return objc_msgSend((id)qword_101414F88, "longCharacterIsMember:", a1);
}

void sub_1001AE410(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet crlwp_breakingSpaceCharacterSet](NSCharacterSet, "crlwp_breakingSpaceCharacterSet"));
  v2 = (void *)qword_101414F88;
  qword_101414F88 = v1;

}

uint64_t sub_1001AE43C(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  void *v4;

  v2 = 1;
  if ((int)a1 <= 8211)
  {
    if (!(_DWORD)a1 || (_DWORD)a1 == 14)
      return v2;
  }
  else if ((_DWORD)a1 == 8212 || (_DWORD)a1 == 8232 || (_DWORD)a1 == 65532)
  {
    return v2;
  }
  v3 = sub_1001AE2A0(a1);
  if ((_DWORD)a1 != 8232 && (v3 & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet crlwp_spaceCharacterSet](NSCharacterSet, "crlwp_spaceCharacterSet"));
    v2 = (uint64_t)objc_msgSend(v4, "longCharacterIsMember:", a1);

  }
  return v2;
}

void sub_1001AE4E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001AE4F4(uint64_t a1)
{
  if (qword_101414FA0 != -1)
    dispatch_once(&qword_101414FA0, &stru_101240968);
  return objc_msgSend((id)qword_101414F98, "longCharacterIsMember:", a1);
}

void sub_1001AE544(id a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = xmmword_100EED8C0;
  v5 = unk_100EED8D0;
  v6 = xmmword_100EED8E0;
  v7 = unk_100EED8F0;
  LODWORD(v8) = 10551138;
  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithCharacters:length:", &v4, 34);
  v2 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", v1, v4, v5, v6, v7, v8));
  v3 = (void *)qword_101414F98;
  qword_101414F98 = v2;

}

void sub_1001AE5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001AE610(uint64_t a1)
{
  if (qword_101414FB0 != -1)
    dispatch_once(&qword_101414FB0, &stru_101240988);
  return objc_msgSend((id)qword_101414FA8, "longCharacterIsMember:", a1);
}

void sub_1001AE660(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  _BYTE __dst[258];

  memcpy(__dst, &unk_100EED904, sizeof(__dst));
  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithCharacters:length:", __dst, 129);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableCharacterSet characterSetWithCharactersInString:](NSMutableCharacterSet, "characterSetWithCharactersInString:", v1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
  objc_msgSend(v2, "formUnionWithCharacterSet:", v3);

  v4 = objc_msgSend(v2, "copy");
  v5 = (void *)qword_101414FA8;
  qword_101414FA8 = (uint64_t)v4;

}

void sub_1001AE740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id sub_1001AE774(uint64_t a1)
{
  if (qword_101414FC0 != -1)
    dispatch_once(&qword_101414FC0, &stru_1012409A8);
  return objc_msgSend((id)qword_101414FB8, "longCharacterIsMember:", a1);
}

void sub_1001AE7C4(id a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  _BYTE __dst[1534];

  memcpy(__dst, &unk_100EEDA06, sizeof(__dst));
  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithCharacters:length:", __dst, 767);
  v2 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", v1));
  v3 = (void *)qword_101414FB8;
  qword_101414FB8 = v2;

}

void sub_1001AE870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001AE888(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  BOOL v7;

  if ((int)a1 > 12338)
  {
    if ((a1 - 12339) >= 2)
    {
      v6 = 65073;
      if ((_DWORD)a1 != 65073)
        goto LABEL_20;
    }
    else
    {
      v6 = 12341;
    }
    v7 = (_DWORD)a2 == v6;
    return !v7;
  }
  if ((a1 - 8208) <= 0x16)
  {
    v4 = 1 << (a1 - 16);
    if ((v4 & 0x3D) != 0)
    {
LABEL_4:
      if ((a2 - 8208) > 5)
        return (_DWORD)a2 != 45;
      result = 0;
      if ((_DWORD)a2 == 8209)
        return (_DWORD)a2 != 45;
      return result;
    }
    if ((v4 & 0x600000) != 0)
    {
      v7 = (_DWORD)a2 == (_DWORD)a1;
      return !v7;
    }
  }
  if ((_DWORD)a1 == 45)
    goto LABEL_4;
  if ((_DWORD)a1 == 47)
  {
    v7 = (_DWORD)a2 == 47;
    return !v7;
  }
LABEL_20:
  if (sub_1001AE368(a1) && (sub_1001AE368(a2) & 1) != 0)
    return 0;
  if (sub_1001AE774(a1))
    return sub_1001AE774(a2) ^ 1;
  return 1;
}

double sub_1001AE99C(int a1)
{
  double result;
  char v2;

  result = 0.0;
  if (a1 > 10628)
  {
    if (((a1 - 12289) > 0x1E || ((1 << (a1 - 1)) & 0x51F9FF81) == 0) && (a1 - 10629) >= 2)
    {
      if (a1 != 12539)
        return result;
      return 0.5;
    }
    return 0.25;
  }
  if (a1 > 122)
  {
    if ((a1 - 8216) <= 5 && ((1 << (a1 - 24)) & 0x33) != 0
      || (a1 - 125) <= 0x3E && ((1 << (a1 - 125)) & 0x4000400000000001) != 0
      || a1 == 123)
    {
      return 0.25;
    }
  }
  else
  {
    v2 = a1 - 32;
    if ((a1 - 32) > 0x3D)
      return result;
    if (((1 << v2) & 0x2800000000001300) != 0)
      return 0.25;
    if (((1 << v2) & 0xC000000) != 0)
      return 0.5;
    if (a1 == 32)
      return 0.0833333333;
  }
  return result;
}

unint64_t sub_1001AEAA8(unint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char *v12;
  char *v13;
  id i;
  char *v15;
  void *v16;
  void *v17;

  v3 = a2;
  v4 = objc_msgSend(v3, "length");
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012409C8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E06258();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_1012409E8);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPPreviousCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 1318, 0, "invalid nil value for '%{public}s'", "source");

  }
  if ((unint64_t)objc_msgSend(v3, "charIndexMappedToStorage:", v4) >= a1)
  {
    if (!v3)
    {
      a1 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_23;
    }
    v12 = (char *)objc_msgSend(v3, "charIndexMappedFromStorage:", a1);
    v13 = v12;
    if (v12)
    {
      if ((unint64_t)v12 < 0x7FFFFFFFFFFFFFFFLL)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "string"));
        for (i = (id)a1; i == (id)a1 && v13; i = objc_msgSend(v3, "charIndexMappedToStorage:", v13))
        {
          v15 = (char *)objc_msgSend(v9, "rangeOfComposedCharacterSequenceAtIndex:", --v13);
          if (v13 >= v15)
            v13 = v15;
        }
        a1 = (unint64_t)i;
        goto LABEL_22;
      }
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101240A88);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100E061D8();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101240AA8);
      v17 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DFF474();
      }

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPPreviousCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 1326, 0, "charIndex should be < NSNotFound");
    }
    else
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101240A48);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100E06158();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101240A68);
      v16 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DFF474();
      }

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPPreviousCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 1325, 0, "charIndex should not be at the start of the text source");
    }
  }
  else
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240A08);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E060D8();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240A28);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPPreviousCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 1321, 0, "charIndex should be <= end of storage");
    a1 = 0x7FFFFFFFFFFFFFFFLL;
  }

LABEL_22:
LABEL_23:

  return a1;
}

void sub_1001AF044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001AF114(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF144(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF174(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF1A4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF1D4(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF204(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF234(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF264(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

uint64_t sub_1001AF294(unint64_t a1, void *a2)
{
  id v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t i;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  v3 = a2;
  v4 = (char *)objc_msgSend(v3, "length");
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240AC8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E063E4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240AE8);
    v5 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPNextCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v6, v7, 1347, 0, "invalid nil value for '%{public}s'", "source");

  }
  if ((unint64_t)objc_msgSend(v3, "charIndexMappedToStorage:", v4) < a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240B08);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E062E4();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240B28);
    v8 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPNextCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v9, v10, 1350, 0, "charIndex should be <= end of storage");

    i = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_21;
  }
  if (!v3)
  {
    i = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_43;
  }
  v12 = (char *)objc_msgSend(v3, "charIndexMappedFromStorage:", a1);
  v13 = v12;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFFLL)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240B48);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E06364();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240B68);
    v16 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "CRLWPCharIndex CRLWPNextCharIndexFromTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v17, v18, 1353, 0, "charIndex should be < NSNotFound");

    goto LABEL_42;
  }
  if (v12 >= v4 - 1)
  {
LABEL_42:
    i = (uint64_t)objc_msgSend(v3, "charIndexMappedToStorage:", v13 + 1);
    goto LABEL_43;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "string"));
  for (i = a1; i == a1 && v13 < v4; i = (uint64_t)objc_msgSend(v3, "charIndexMappedToStorage:", v13))
  {
    v14 = (char *)objc_msgSend(v9, "rangeOfComposedCharacterSequenceAtIndex:", v13);
    if (&v14[v15] <= v13 + 1)
      ++v13;
    else
      v13 = &v14[v15];
  }
LABEL_21:

LABEL_43:
  return i;
}

void sub_1001AF738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001AF7E0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF810(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF840(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF870(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF8A0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AF8D0(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

id sub_1001AF904(unint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  uint8_t buf[4];
  unsigned int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unsigned int v34;

  v3 = a2;
  if (!v3)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240B88);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E06570();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240BA8);
    v4 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v5, v6, 1404, 0, "invalid nil value for '%{public}s'", "source");

  }
  v7 = objc_msgSend(v3, "length");
  if ((unint64_t)v7 <= a1)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240BC8);
    if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
      sub_100E064F0();
    if (qword_10147E370 != -1)
      dispatch_once(&qword_10147E370, &stru_101240BE8);
    v12 = off_1013D9070;
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
      sub_100DFF474();
    }

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v13, v14, 1406, 0, "index out of bounds");

    v8 = 0;
  }
  else
  {
    v8 = objc_msgSend(v3, "characterAtIndex:", a1);
    if (((unsigned __int16)v8 & 0xFC00) == 0xDC00)
    {
      +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101240C08);
      if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        sub_100E06470();
      if (qword_10147E370 != -1)
        dispatch_once(&qword_10147E370, &stru_101240C28);
      v9 = off_1013D9070;
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
      {
        objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
        sub_100DFF474();
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
      +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v10, v11, 1410, 0, "index inside surrogate pair");

    }
    else if (a1 + 1 < (unint64_t)v7 && ((unsigned __int16)v8 & 0xFC00) == 0xD800)
    {
      v16 = objc_msgSend(v3, "characterAtIndex:");
      v17 = v16;
      if (v16 >> 10 == 55)
      {
        v8 = (id)(v16 + ((_DWORD)v8 << 10) - 56613888);
      }
      else
      {
        v18 = +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_101240C48);
        v19 = off_1013D9070;
        if (os_log_type_enabled((os_log_t)off_1013D9070, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67110402;
          v24 = v18;
          v25 = 2082;
          v26 = "UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)";
          v27 = 2082;
          v28 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm";
          v29 = 1024;
          v30 = 1414;
          v31 = 1024;
          v32 = (int)v8;
          v33 = 1024;
          v34 = v17;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid surrogate pair: %x:%x", buf, 0x2Eu);
        }
        if (qword_10147E370 != -1)
          dispatch_once(&qword_10147E370, &stru_101240C68);
        v20 = off_1013D9070;
        if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
        {
          objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
          sub_100DFF474();
        }

        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "UTF32Char CRLWPComposedCharacterAtIndexForTextSource(CRLWPCharIndex, __strong id<CRLWPTextSource>)"));
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm"));
        +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v21, v22, 1414, 0, "invalid surrogate pair: %x:%x", v8, v17);

      }
    }
  }

  return v8;
}

void sub_1001AFF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1001AFFC8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001AFFF8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001B0028(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001B0058(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001B0088(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001B00B8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

void sub_1001B00E8(id a1)
{
  os_log_t v1;
  void *v2;
  void *v3;

  v1 = sub_1003C0E38("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = off_1013D9070;
  off_1013D9070 = v2;

}

