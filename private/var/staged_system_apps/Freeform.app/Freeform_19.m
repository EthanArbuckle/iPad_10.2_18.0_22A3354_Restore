uint64_t sub_100DA74E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DA74F4);
}

char *sub_100DA74F4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_1004B804C(&qword_1013FB248);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 52);
    }
    else
    {
      v10 = sub_1004B804C(&qword_101411CD8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 56);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_100DA7598(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = &unk_100F38190;
  v6[2] = &unk_100F38190;
  v6[3] = &unk_100F38190;
  v6[4] = &unk_100F381A8;
  v6[5] = &unk_100F384A8;
  v6[6] = &unk_100F384C0;
  v6[7] = &unk_100F384D8;
  v6[8] = &unk_100F384D8;
  sub_100DA7684(319, (unint64_t *)&qword_1013FB2B8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorSchemeContrast);
  if (v3 <= 0x3F)
  {
    v6[9] = *(_QWORD *)(v2 - 8) + 64;
    sub_100DA7684(319, (unint64_t *)&unk_101411D68, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    if (v5 <= 0x3F)
    {
      v6[10] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 11, v6, a1 + 16);
    }
  }
}

void sub_100DA7684(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

double destroy for CRLCollaborationParticipantLegacyRowView(uint64_t a1)
{

  swift_unknownObjectWeakDestroy(a1 + 24);
  swift_release(*(_QWORD *)(a1 + 48));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease();
  sub_100BF26FC(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
  return sub_100BF26FC(*(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
}

uint64_t initializeWithCopy for CRLCollaborationParticipantLegacyRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v2 = a2;
  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a1 + 24;
  v8 = a2 + 24;
  v9 = v4;
  v10 = v6;
  swift_unknownObjectWeakCopyInit(v7, v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(v2 + 40);
  v11 = *(_QWORD *)(v2 + 48);
  v12 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  v14 = *(_QWORD *)(v2 + 64);
  v13 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v13;
  v15 = *(_QWORD *)(v2 + 80);
  v16 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(a1 + 80) = v15;
  v17 = *(_BYTE *)(v2 + 96);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v14);
  swift_bridgeObjectRetain(v15);
  sub_100BF25E8(v16, v17);
  *(_QWORD *)(a1 + 88) = v16;
  *(_BYTE *)(a1 + 96) = v17;
  v18 = *(_QWORD *)(v2 + 104);
  LOBYTE(v2) = *(_BYTE *)(v2 + 112);
  sub_100BF25E8(v18, v2);
  *(_QWORD *)(a1 + 104) = v18;
  *(_BYTE *)(a1 + 112) = v2;
  return a1;
}

uint64_t assignWithCopy for CRLCollaborationParticipantLegacyRowView(uint64_t a1, void **a2)
{
  void **v2;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = a2;
  v4 = *a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = v2[1];
  v7 = v2[2];
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  swift_unknownObjectWeakCopyAssign(a1 + 24, v2 + 3);
  *(_QWORD *)(a1 + 32) = v2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)v2 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = v2[6];
  *(_QWORD *)(a1 + 48) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = v2[7];
  *(_QWORD *)(a1 + 56) = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = v2[8];
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_QWORD *)(a1 + 72) = v2[9];
  v16 = v2[10];
  *(_QWORD *)(a1 + 80) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  v17 = (uint64_t)v2[11];
  v18 = *((_BYTE *)v2 + 96);
  sub_100BF25E8(v17, v18);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v17;
  *(_BYTE *)(a1 + 96) = v18;
  sub_100BF26FC(v19, v20);
  v21 = (uint64_t)v2[13];
  LOBYTE(v2) = *((_BYTE *)v2 + 112);
  sub_100BF25E8(v21, (char)v2);
  v22 = *(_QWORD *)(a1 + 104);
  v23 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v21;
  *(_BYTE *)(a1 + 112) = (_BYTE)v2;
  sub_100BF26FC(v22, v23);
  return a1;
}

uint64_t initializeWithTake for CRLCollaborationParticipantLegacyRowView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeInit(a1 + 24, a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for CRLCollaborationParticipantLegacyRowView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;

  swift_unknownObjectWeakTakeAssign(a1 + 24, a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_BYTE *)(a2 + 96);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v11;
  sub_100BF26FC(v12, v13);
  v14 = *(_BYTE *)(a2 + 112);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v14;
  sub_100BF26FC(v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLCollaborationParticipantLegacyRowView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLCollaborationParticipantLegacyRowView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLCollaborationParticipantLegacyRowView()
{
  return &type metadata for CRLCollaborationParticipantLegacyRowView;
}

ValueMetadata *type metadata accessor for CRLEmptyCollaboratorListView()
{
  return &type metadata for CRLEmptyCollaboratorListView;
}

uint64_t destroy for CRLIneligibleCollaboratorListView(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

_QWORD *initializeWithCopy for CRLIneligibleCollaboratorListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = swift_unknownObjectWeakCopyInit(a1, a2);
  v5 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v5;
  v6 = a2[3];
  v7 = a2[4];
  a1[3] = v6;
  a1[4] = v7;
  v8 = a2[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for CRLIneligibleCollaboratorListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = swift_unknownObjectWeakCopyAssign(a1, a2);
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = a2[2];
  v5 = a2[3];
  v6 = a1[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  a1[4] = a2[4];
  v7 = a2[5];
  v8 = a1[5];
  a1[5] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

_QWORD *assignWithTake for CRLIneligibleCollaboratorListView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = swift_unknownObjectWeakTakeAssign(a1, a2);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(v4 + 24);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for CRLIneligibleCollaboratorListView()
{
  return &type metadata for CRLIneligibleCollaboratorListView;
}

uint64_t sub_100DA7CB8()
{
  return sub_100DA7CEC(&qword_101412E40, &qword_101412E48, (void (*)(void))sub_100DA6508, (void (*)(void))sub_100DA65B4);
}

uint64_t sub_100DA7CEC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1004CB6A4(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100DA7D5C()
{
  return sub_100DA7CEC(&qword_101412E50, &qword_101412E58, (void (*)(void))sub_100DA6508, (void (*)(void))sub_100DA6854);
}

uint64_t sub_100DA7D90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10113CB00, 1);
}

uint64_t sub_100DA7DA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10113CAD8, 1);
}

uint64_t sub_100DA7DB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10113CAB0, 1);
}

uint64_t sub_100DA7DC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10113CA88, 1);
}

unint64_t sub_100DA7DD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101412E88;
  if (!qword_101412E88)
  {
    v1 = sub_1004CB6A4(&qword_101412E68);
    sub_1004CBA30(&qword_101412E90, &qword_101412E60, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101412E88);
  }
  return result;
}

uint64_t sub_100DA7E64@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100DA2CE0(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], a1, v1[10]);
}

uint64_t sub_100DA7E98@<X0>(uint64_t *a1@<X8>)
{
  return sub_100DA4020(a1);
}

uint64_t sub_100DA7EA4()
{
  return sub_100DA80C0((uint64_t (*)(void))sub_100DA1DAC);
}

uint64_t sub_100DA7EB0()
{
  uint64_t v0;

  return sub_100DA3FAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD00000000000001DLL, 0x8000000101010DC0);
}

uint64_t sub_100DA7EF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100DA7F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for CRLCollaborationParticipantRowView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  swift_unknownObjectWeakDestroy(v0 + v4 + 56);
  swift_release(*(_QWORD *)(v0 + v4 + 80));
  swift_release(*(_QWORD *)(v0 + v4 + 88));
  swift_release(*(_QWORD *)(v0 + v4 + 96));
  swift_bridgeObjectRelease();
  sub_100BF26FC(*(_QWORD *)(v6 + 120), *(_BYTE *)(v6 + 128));
  sub_100BF26FC(*(_QWORD *)(v6 + 136), *(_BYTE *)(v6 + 144));
  v7 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 52));
  v8 = sub_1004B804C(&qword_1013FB240);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorSchemeContrast(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + *(int *)(v1 + 56));
  v11 = sub_1004B804C(&qword_101409328);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100DA806C()
{
  return sub_100D8301C(type metadata accessor for CRLCollaborationParticipantRowView, (uint64_t (*)(uint64_t))sub_100DA3D94);
}

uint64_t sub_100DA8080()
{
  uint64_t v0;

  return sub_100DA3FAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD00000000000001CLL, 0x8000000101010D80);
}

uint64_t sub_100DA80B4()
{
  return sub_100DA80C0((uint64_t (*)(void))sub_100DA3B20);
}

uint64_t sub_100DA80C0(uint64_t (*a1)(void))
{
  type metadata accessor for CRLCollaborationParticipantRowView(0);
  return a1();
}

uint64_t sub_100DA8100()
{
  return sub_100DA80C0((uint64_t (*)(void))sub_100DA3804);
}

uint64_t sub_100DA810C()
{
  uint64_t v0;

  return sub_100DA3FAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD000000000000019, 0x8000000100FBED60);
}

id sub_100DA813C(int a1)
{
  uint64_t v1;

  return sub_1004DA1CC(a1, *(id *)(v1 + 16));
}

void sub_100DA8148()
{
  void **v0;

  sub_1004DA1E4(v0[2], v0[3], v0[4]);
}

double sub_100DA8154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100DA8164(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_100DA8178()
{
  unint64_t result;

  result = qword_101412F38;
  if (!qword_101412F38)
  {
    result = swift_getWitnessTable(&unk_100F38AE0, &type metadata for CRLUserColorBar);
    atomic_store(result, (unint64_t *)&qword_101412F38);
  }
  return result;
}

unint64_t sub_100DA81CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101412F80;
  if (!qword_101412F80)
  {
    v1 = sub_1004CB6A4(&qword_101412F78);
    sub_100DA84C4((unint64_t *)&qword_1014120D0, &qword_1014120C8, &qword_1014120D8, &qword_1014120E0);
    sub_1004CBA30(&qword_1013ECDB0, &qword_1013ECDB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101412F80);
  }
  return result;
}

uint64_t sub_100DA8270()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_100DA8298(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit(a2, a1);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  return a2;
}

uint64_t sub_100DA82E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100DA00D8(a1, v1 + 16);
}

uint64_t sub_100DA82F4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

double sub_100DA8328()
{
  uint64_t v0;

  return sub_100DA0114(v0 + 16);
}

unint64_t sub_100DA8330()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101412FB8;
  if (!qword_101412FB8)
  {
    v1 = sub_1004CB6A4(&qword_101412FB0);
    sub_100DA839C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101412FB8);
  }
  return result;
}

unint64_t sub_100DA839C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101412FC0;
  if (!qword_101412FC0)
  {
    v1 = sub_1004CB6A4(&qword_101412FA8);
    sub_100DA8420();
    sub_1004CBA30(&qword_1013ECDB0, &qword_1013ECDB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101412FC0);
  }
  return result;
}

unint64_t sub_100DA8420()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101412FC8;
  if (!qword_101412FC8)
  {
    v1 = sub_1004CB6A4(&qword_101412FA0);
    sub_100DA84C4(&qword_101412FD0, &qword_101412F98, &qword_101412FD8, &qword_101412F90);
    sub_1004CBA30(&qword_101412FE0, &qword_101412FE8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101412FC8);
  }
  return result;
}

uint64_t sub_100DA84C4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1004CB6A4(a2);
    sub_1004CBA30(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100DA8544()
{
  AttributeScopes.FoundationAttributes.link.getter();
  __break(1u);
}

unint64_t sub_100DA8560()
{
  unint64_t result;

  result = qword_101412FF8;
  if (!qword_101412FF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LinkAttribute, &type metadata for AttributeScopes.FoundationAttributes.LinkAttribute);
    atomic_store(result, (unint64_t *)&qword_101412FF8);
  }
  return result;
}

void sub_100DA85A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_100DA8560();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_100DA85C8()
{
  return 8;
}

double sub_100DA85D4(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  return result;
}

double sub_100DA85DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100DA85E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_101413010) & 1;
}

uint64_t sub_100DA8608(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_101413010);
}

_QWORD *sub_100DA8614(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_100DA8620()
{
  AttributeScopes.SwiftUIAttributes.foregroundColor.getter();
  __break(1u);
}

unint64_t sub_100DA863C()
{
  unint64_t result;

  result = qword_101413000;
  if (!qword_101413000)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
    atomic_store(result, (unint64_t *)&qword_101413000);
  }
  return result;
}

void sub_100DA8680(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_100DA863C();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_100DA86A4()
{
  return 8;
}

uint64_t sub_100DA86B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_101413008) & 1;
}

uint64_t sub_100DA86D0(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_101413008);
}

uint64_t sub_100DA86E8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  swift_unknownObjectWeakTakeInit(a2 + 24, a1 + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  v5 = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a2 + 88) = v5;
  v6 = *(_QWORD *)(a1 + 104);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a2 + 104) = v6;
  return a2;
}

void sub_100DA8768()
{
  uint64_t v0;

  sub_100DA5058(v0 + 16);
}

unint64_t sub_100DA8770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101413040;
  if (!qword_101413040)
  {
    v1 = sub_1004CB6A4(&qword_101413038);
    sub_1004B7878(&qword_1013FB120, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101413040);
  }
  return result;
}

uint64_t sub_100DA87F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100DA881C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101413068;
  if (!qword_101413068)
  {
    v1 = sub_1004CB6A4(&qword_101413060);
    sub_1004CBA30(&qword_101413070, &qword_101413078, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_1004CBA30(&qword_101412000, &qword_101412008, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101413068);
  }
  return result;
}

uint64_t sub_100DA88B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_QWORD *)(a1 + 184);
  v5 = *(_BYTE *)(a1 + 192);
  v6 = *(_QWORD *)(a1 + 208);

  swift_release(v2);
  sub_1005EFC24(v3, v4, v5);
  swift_release(v6);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DA8934()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease();
  sub_100BF26FC(*(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
  sub_100BF26FC(*(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
  return swift_deallocObject(v0, 129, 7);
}

void sub_100DA89A0()
{
  sub_100DA4C18();
}

uint64_t sub_100DA89C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_1006CCFD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_100DA8A0C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1005EFC24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v2);
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for CRLUserAvatar(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = v3;
  return a1;
}

void destroy for CRLUserAvatar(uint64_t a1)
{

}

_QWORD *assignWithCopy for CRLUserAvatar(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  v3 = (void *)a2[1];
  v4 = (void *)a1[1];
  a1[1] = v3;
  v5 = v3;

  return a1;
}

_QWORD *assignWithTake for CRLUserAvatar(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;

  v3 = a2[1];
  v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

ValueMetadata *type metadata accessor for CRLUserAvatar()
{
  return &type metadata for CRLUserAvatar;
}

ValueMetadata *type metadata accessor for CRLUserColorBar()
{
  return &type metadata for CRLUserColorBar;
}

unint64_t sub_100DA8B1C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101413080;
  if (!qword_101413080)
  {
    v1 = sub_1004CB6A4(&qword_101412E78);
    v2[0] = sub_1004CB6A4(&qword_101412E68);
    v2[1] = sub_100DA7DD0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1004B7878(&qword_1013FB120, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101413080);
  }
  return result;
}

unint64_t sub_100DA8BCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101413088;
  if (!qword_101413088)
  {
    v1 = sub_1004CB6A4(&qword_101413090);
    sub_100DA8330();
    sub_1004B7878(&qword_1013FB120, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101413088);
  }
  return result;
}

unint64_t sub_100DA8C54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101413098;
  if (!qword_101413098)
  {
    v1 = sub_1004CB6A4(&qword_1014130A0);
    sub_100DA8CD8();
    sub_1004CBA30(&qword_1014120D8, &qword_1014120E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101413098);
  }
  return result;
}

unint64_t sub_100DA8CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1014130A8;
  if (!qword_1014130A8)
  {
    v1 = sub_1004CB6A4(&qword_1014130B0);
    sub_100DA8D5C();
    sub_1004CBA30(&qword_1013E7048, &qword_1013E7050, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1014130A8);
  }
  return result;
}

unint64_t sub_100DA8D5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1014130B8;
  if (!qword_1014130B8)
  {
    v1 = sub_1004CB6A4(&qword_1014130C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1014130B8);
  }
  return result;
}

uint64_t sub_100DA8DC0()
{
  return sub_1004CBA30(&qword_1014130C8, &qword_1014130D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100DA8DEC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10113CB98, 1);
}

uint64_t sub_100DA8DFC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10113CB70, 1);
}

ValueMetadata *type metadata accessor for CRLAvatarViewModifier()
{
  return &type metadata for CRLAvatarViewModifier;
}

ValueMetadata *type metadata accessor for CRLAvatarViewControllerRepresentable()
{
  return &type metadata for CRLAvatarViewControllerRepresentable;
}

unint64_t sub_100DA8E30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1014130E0;
  if (!qword_1014130E0)
  {
    v1 = sub_1004CB6A4(&qword_1014130D8);
    sub_1004CBA30(&qword_1014130E8, &qword_1013ED868, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1014130E0);
  }
  return result;
}

uint64_t sub_100DA8EB4()
{
  return sub_10093B6F0(&qword_1014130F0, &qword_1014130F8, (void (*)(void))sub_100DA8EE8, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_100DA8EE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101413100;
  if (!qword_101413100)
  {
    v1 = sub_1004CB6A4(&qword_101413108);
    sub_100DA8F54();
    sub_100DA8F98();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101413100);
  }
  return result;
}

unint64_t sub_100DA8F54()
{
  unint64_t result;

  result = qword_101413110;
  if (!qword_101413110)
  {
    result = swift_getWitnessTable(&unk_100F38B78, &type metadata for CRLAvatarViewControllerRepresentable);
    atomic_store(result, (unint64_t *)&qword_101413110);
  }
  return result;
}

unint64_t sub_100DA8F98()
{
  unint64_t result;

  result = qword_101413118;
  if (!qword_101413118)
  {
    result = swift_getWitnessTable(&unk_100F38C40, &type metadata for CRLAvatarViewModifier);
    atomic_store(result, (unint64_t *)&qword_101413118);
  }
  return result;
}

void *sub_100DA8FDC()
{
  return &protocol witness table for Never;
}

uint64_t sub_100DA8FEC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10113CBC0, 1);
}

unint64_t sub_100DA8FFC()
{
  unint64_t result;

  result = qword_101413130;
  if (!qword_101413130)
  {
    result = swift_getWitnessTable(&unk_100F38BC8, &type metadata for CRLAvatarViewControllerRepresentable);
    atomic_store(result, (unint64_t *)&qword_101413130);
  }
  return result;
}

unint64_t sub_100DA9044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101413138;
  if (!qword_101413138)
  {
    v1 = sub_1004CB6A4(&qword_101413120);
    sub_1004CBA30(&qword_101413140, &qword_101413128, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101413138);
  }
  return result;
}

uint64_t sub_100DA90F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100DA9128 + 4 * byte_100F38C90[a1]))(0x61447463656A626FLL, 0xEA00000000006174);
}

uint64_t sub_100DA9128()
{
  return 0x52436E6F6D6D6F63;
}

unint64_t sub_100DA914C()
{
  return 0xD000000000000010;
}

unint64_t sub_100DA9168()
{
  return 0xD000000000000017;
}

uint64_t sub_100DA91A4()
{
  return sub_100DA91DC(1, 5);
}

uint64_t sub_100DA91C0()
{
  return sub_100DA91DC(3, 7);
}

uint64_t sub_100DA91DC(char a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  _BYTE *v14;
  __n128 v15;

  v4 = *(_QWORD *)(v2 + 40);
  if (*(_QWORD *)(v4 + 16) && (sub_10084342C(a1), (v6 & 1) != 0))
  {
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
    v8 = *v7;
    v9 = v7[1];
    v10 = sub_1004B804C((uint64_t *)&unk_1013F02C0);
    sub_1004BE310(v8, v9);
    v11 = sub_100DA9320();
    return CRDT.init(serializedData:)(v8, v9, v10, v11);
  }
  else
  {
    v13 = sub_100577444();
    swift_allocError(&type metadata for CRLSerializationError, v13, 0, 0);
    *v14 = a2;
    return swift_willThrow(v15);
  }
}

void sub_100DA92A8(char *a1)
{
  sub_10083BCBC(*a1);
}

void sub_100DA92B4()
{
  char *v0;

  sub_10074BF58(*v0);
}

void sub_100DA92BC(uint64_t a1)
{
  char *v1;

  sub_10083CFCC(a1, *v1);
}

void sub_100DA92C4(uint64_t a1)
{
  char *v1;

  sub_10083D530(a1, *v1);
}

unint64_t sub_100DA92CC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100DA95CC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100DA92F8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100DA90F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100DA9320()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F7470;
  if (!qword_1013F7470)
  {
    v1 = sub_1004CB6A4((uint64_t *)&unk_1013F02C0);
    result = swift_getWitnessTable(&unk_100EFD44C, v1);
    atomic_store(result, (unint64_t *)&qword_1013F7470);
  }
  return result;
}

uint64_t destroy for CRLSerializableObjectDataRepresentation(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for CRLSerializableObjectDataRepresentation(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for CRLSerializableObjectDataRepresentation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[6];
  v7 = a1[6];
  a1[6] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for CRLSerializableObjectDataRepresentation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for CRLSerializableObjectDataRepresentation()
{
  return &type metadata for CRLSerializableObjectDataRepresentation;
}

uint64_t storeEnumTagSinglePayload for CRLSerializableObjectDataRepresentation.DataDictionaryKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100DA9504 + 4 * byte_100F38C9A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100DA9538 + 4 * byte_100F38C95[v4]))();
}

uint64_t sub_100DA9538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100DA9540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100DA9548);
  return result;
}

uint64_t sub_100DA9554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100DA955CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100DA9560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100DA9568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLSerializableObjectDataRepresentation.DataDictionaryKey()
{
  return &type metadata for CRLSerializableObjectDataRepresentation.DataDictionaryKey;
}

unint64_t sub_100DA9588()
{
  unint64_t result;

  result = qword_101413148;
  if (!qword_101413148)
  {
    result = swift_getWitnessTable(&unk_100F38D1C, &type metadata for CRLSerializableObjectDataRepresentation.DataDictionaryKey);
    atomic_store(result, (unint64_t *)&qword_101413148);
  }
  return result;
}

unint64_t sub_100DA95CC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101264670, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

void sub_100DA9614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;

  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 56);
  v24 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  v5 = _swiftEmptyArrayStorage;
  if (!v3)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (i = v6 | (v4 << 6); ; i = __clz(__rbit64(v9)) + (v4 << 6))
  {
    v11 = *(_QWORD *)(a1 + 48) + 32 * i;
    v12 = *(id *)v11;
    v13 = *(void **)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_BYTE *)(v11 + 24);
    sub_1004DD884(*(id *)v11, v13, v14, v15);
    sub_1009E30F0((uint64_t)v12, (uint64_t)v13, v14, v15);
    v17 = v16;
    v19 = v18;
    sub_1004DD8B8(v12, v13, v14, v15);
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_100D0EF94(0, v5[2] + 1, 1, v5);
    v21 = v5[2];
    v20 = v5[3];
    if (v21 >= v20 >> 1)
      v5 = sub_100D0EF94((_QWORD *)(v20 > 1), v21 + 1, 1, v5);
    v5[2] = v21 + 1;
    v22 = &v5[2 * v21];
    v22[4] = v17;
    v22[5] = v19;
    if (v3)
      goto LABEL_4;
LABEL_5:
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v8 >= v24)
      goto LABEL_27;
    v9 = *(_QWORD *)(v23 + 8 * v8);
    ++v4;
    if (!v9)
    {
      v4 = v8 + 1;
      if (v8 + 1 >= v24)
        goto LABEL_27;
      v9 = *(_QWORD *)(v23 + 8 * v4);
      if (!v9)
      {
        v4 = v8 + 2;
        if (v8 + 2 >= v24)
          goto LABEL_27;
        v9 = *(_QWORD *)(v23 + 8 * v4);
        if (!v9)
        {
          v4 = v8 + 3;
          if (v8 + 3 >= v24)
            goto LABEL_27;
          v9 = *(_QWORD *)(v23 + 8 * v4);
          if (!v9)
            break;
        }
      }
    }
LABEL_20:
    v3 = (v9 - 1) & v9;
  }
  v10 = v8 + 4;
  if (v10 >= v24)
  {
LABEL_27:
    swift_release(a1);
    return;
  }
  v9 = *(_QWORD *)(v23 + 8 * v10);
  if (v9)
  {
    v4 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v4 >= v24)
      goto LABEL_27;
    v9 = *(_QWORD *)(v23 + 8 * v4);
    ++v10;
    if (v9)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

void sub_100DA9874(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100DA98A0()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

void sub_100DA9CE4(char a1)
{
  __asm { BR              X10 }
}

id sub_100DA9D20()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", 30.0);
  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100FB1C20);
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v1, v0);

  return v2;
}

void sub_100DA9EB4()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_100BCB498();
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1, swift_bridgeObjectRelease().n128_f64[0]);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1004C4938((uint64_t)v5, (uint64_t)v6, &qword_1013E0230);
  if (v7)
  {
    v3 = sub_1004B804C(&qword_1013FA4C0);
    if ((swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
    {
      sub_100DAA244(v4);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1004CB800((uint64_t)v6, &qword_1013E0230);
  }
}

unint64_t sub_100DA9FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  char v3;
  unsigned __int8 *v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v17[2];
  _BYTE v18[24];
  __int128 v19;
  uint64_t v20;
  _QWORD v21[5];
  _BYTE v22[320];

  v1 = sub_1004B804C(&qword_1013E49B0);
  inited = swift_initStackObject(v1, v22);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E30;
  strcpy((char *)v21, "isGridLayout");
  BYTE5(v21[1]) = unk_10141315D;
  HIWORD(v21[1]) = unk_10141315E;
  swift_bridgeObjectRetain(aIsgridlayout_2[1]);
  AnyHashable.init<A>(_:)(v21, &type metadata for String, &protocol witness table for String);
  v3 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_isGridLayout);
  *(_QWORD *)(inited + 96) = &type metadata for Bool;
  *(_BYTE *)(inited + 72) = v3;
  v21[0] = qword_101413160;
  v21[1] = off_101413168;
  swift_bridgeObjectRetain(off_101413168);
  AnyHashable.init<A>(_:)(v21, &type metadata for String, &protocol witness table for String);
  v4 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController__persistedSortOptions);
  v5 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController__persistedSortOptions + 2);
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = v5;
  v21[0] = qword_101413180;
  v21[1] = off_101413188;
  swift_bridgeObjectRetain(off_101413188);
  AnyHashable.init<A>(_:)(v21, &type metadata for String, &protocol witness table for String);
  v6 = v4[1];
  *(_QWORD *)(inited + 240) = &type metadata for Bool;
  *(_BYTE *)(inited + 216) = v6;
  v21[0] = qword_101413170;
  v21[1] = off_101413178;
  swift_bridgeObjectRetain(off_101413178);
  AnyHashable.init<A>(_:)(v21, &type metadata for String, &protocol witness table for String);
  v7 = *v4;
  *(_QWORD *)(inited + 312) = &type metadata for Int;
  *(_QWORD *)(inited + 288) = v7;
  v8 = sub_1008D5828(inited);
  v9 = *(&off_101413190 + 1);
  v19 = off_101413190;
  swift_bridgeObjectRetain_n(*(&off_101413190 + 1), 2);
  AnyHashable.init<A>(_:)(&v19, &type metadata for String, &protocol witness table for String);
  v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_collapsedSections);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_collapsedSections, v18, 0, 0);
  v11 = *v10;
  swift_bridgeObjectRetain(v11);
  sub_100DA9614(v12);
  v14 = v13;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v11);
  v20 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  *(_QWORD *)&v19 = v14;
  sub_10050CB14(&v19, v17);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  sub_100825E68(v17, (uint64_t)v21, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1004B89A4((uint64_t)v21);
  return v8;
}

void sub_100DAA244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;
  int v10;
  int v11;
  unint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  char v16;
  int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BOOL8 v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  __n128 v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t *v33;
  id v34;
  Class isa;
  NSString v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSString v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  int v55;
  int v56;
  char v57[160];
  _QWORD v58[2];
  _BYTE v59[40];
  __int128 v60;
  __int128 v61;

  v2 = v1;
  v4 = sub_1004B804C((uint64_t *)&unk_1013FA380);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v58, "isGridLayout");
  BYTE5(v58[1]) = unk_10141315D;
  HIWORD(v58[1]) = unk_10141315E;
  swift_bridgeObjectRetain(aIsgridlayout_2[1]);
  AnyHashable.init<A>(_:)(v58, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v8 = sub_1008432BC((uint64_t)v59), (v9 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_1004B89A4((uint64_t)v59);
  if (*((_QWORD *)&v61 + 1))
  {
    if ((swift_dynamicCast(v58, &v60, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      v10 = LOBYTE(v58[0]);
      v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_isGridLayout);
      *(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_isGridLayout) = v58[0];
      if (v10 != v11)
        sub_100B792A4();
    }
  }
  else
  {
    sub_1004CB800((uint64_t)&v60, &qword_1013E0230);
  }
  v58[0] = qword_101413180;
  v58[1] = off_101413188;
  swift_bridgeObjectRetain(off_101413188);
  AnyHashable.init<A>(_:)(v58, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v12 = sub_1008432BC((uint64_t)v59), (v13 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_1004B89A4((uint64_t)v59);
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_31;
  if ((swift_dynamicCast(v58, &v60, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
    goto LABEL_32;
  v14 = LOBYTE(v58[0]);
  v58[0] = qword_101413160;
  v58[1] = off_101413168;
  swift_bridgeObjectRetain(off_101413168);
  AnyHashable.init<A>(_:)(v58, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v15 = sub_1008432BC((uint64_t)v59), (v16 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_1004B89A4((uint64_t)v59);
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_31;
  if ((swift_dynamicCast(v58, &v60, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
    goto LABEL_32;
  v17 = LOBYTE(v58[0]);
  v58[0] = qword_101413170;
  v58[1] = off_101413178;
  swift_bridgeObjectRetain(off_101413178);
  AnyHashable.init<A>(_:)(v58, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v18 = sub_1008432BC((uint64_t)v59), (v19 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_1004B89A4((uint64_t)v59);
  if (!*((_QWORD *)&v61 + 1))
  {
LABEL_31:
    sub_1004CB800((uint64_t)&v60, &qword_1013E0230);
    goto LABEL_32;
  }
  if ((swift_dynamicCast(v58, &v60, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
  {
    v56 = v17;
    v20 = v58[0];
    if (v58[0] <= 2uLL)
    {
      v55 = v14;
      v54 = (id)(v1 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_folder);
      sub_100BCD968();
      v22 = sub_100C9DFEC(v20, v21);
      swift_bridgeObjectRelease();
      if (v22)
      {
        v23 = v20;
      }
      else
      {
        v37 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        inited = swift_initStackObject(v37, v57);
        *(_OWORD *)(inited + 16) = xmmword_100EF5550;
        v39 = sub_1009E353C();
        v51 = v40;
        *(_QWORD *)(inited + 56) = &type metadata for String;
        v41 = sub_1004CFC2C();
        *(_QWORD *)(inited + 64) = v41;
        v52 = v41;
        *(_QWORD *)(inited + 32) = v39;
        v53 = inited + 32;
        *(_QWORD *)(inited + 40) = v51;
        sub_100BCAD68();
        *(_QWORD *)(inited + 96) = &type metadata for String;
        *(_QWORD *)(inited + 104) = v41;
        *(_QWORD *)(inited + 72) = v42;
        *(_QWORD *)(inited + 80) = v43;
        v44 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v51 = v44;
        v45 = String._bridgeToObjectiveC()();
        v54 = String._bridgeToObjectiveC()();
        v46 = objc_msgSend(v44, "localizedStringForKey:value:table:", v45, v54, 0);

        v54 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v48 = v47;

        v49 = v52;
        *(_QWORD *)(inited + 136) = &type metadata for String;
        *(_QWORD *)(inited + 144) = v49;
        *(_QWORD *)(inited + 112) = v54;
        *(_QWORD *)(inited + 120) = v48;
        sub_100757E04(&_mh_execute_header, (uint64_t)"restoreState(from:)", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLFolderGridViewController.swift", 103, 2, 152, "Tried to restore \"%@\" sort option from cached view state, but it's disallowed in the \"%@\" folder. Using the default sort option \"%@\" instead.", 141, 2u, inited);
        sub_1004F5394(inited, (uint64_t)"restoreState(from:)", 19, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLFolderGridViewController.swift", 103, 2u, 152, (uint64_t)"Tried to restore \"%@\" sort option from cached view state, but it's disallowed in the \"%@\" folder. Using the default sort option \"%@\" instead.", 141, 2u);
        swift_setDeallocating(inited);
        v50 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v53, 3, v50);
        v23 = 1;
      }
      sub_100B7976C(v23, v55, v56);
    }
  }
LABEL_32:
  v58[0] = off_101413190;
  v58[1] = *(&off_101413190 + 1);
  swift_bridgeObjectRetain(*(&off_101413190 + 1));
  AnyHashable.init<A>(_:)(v58, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v24 = sub_1008432BC((uint64_t)v59), (v25 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(a1 + 56) + 32 * v24, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_1004B89A4((uint64_t)v59);
  if (*((_QWORD *)&v61 + 1))
  {
    v26 = sub_1004B804C((uint64_t *)&unk_1013E4970);
    if ((swift_dynamicCast(v58, &v60, (char *)&type metadata for Any + 8, v26, 6) & 1) != 0)
    {
      v27 = v58[0];
      v28 = sub_100B787A8();
      dispatch thunk of UICollectionViewDiffableDataSource.snapshot()(v29);

      v30 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter(v4);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_bridgeObjectRetain(v27);
      v31 = sub_100DAD180(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v27, 2);
      v32 = sub_100AF8BFC((uint64_t)v31);
      swift_bridgeObjectRelease();
      v33 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_collapsedSections);
      swift_beginAccess(v2 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_collapsedSections, v59, 1, 0);
      *v33 = v32;
      swift_bridgeObjectRelease();
      if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_shouldSaveViewState) == 1)
      {
        v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        sub_100DA9FF0();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        sub_100BCB498();
        v36 = String._bridgeToObjectiveC()();
        objc_msgSend(v34, "setObject:forKey:", isa, v36, swift_bridgeObjectRelease().n128_f64[0]);

      }
      sub_100B87C38();
    }
  }
  else
  {
    sub_1004CB800((uint64_t)&v60, &qword_1013E0230);
  }
}

uint64_t sub_100DAAA5C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _BYTE v33[24];

  v32 = a1;
  v5 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v31 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C(&qword_1014131D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1004B804C((uint64_t *)&unk_1013E3830);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v30 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v30 - v18;
  swift_beginAccess(a2 + 16, v33, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (result)
  {
    v21 = result;
    v22 = *(_QWORD *)(a2 + 24);
    ObjectType = swift_getObjectType(result);
    v24 = *(void (**)(uint64_t, uint64_t))(v22 + 24);
    v30 = ObjectType;
    v24(ObjectType, v22);
    sub_1004B8460(a3, (uint64_t)v17, type metadata accessor for CRLBoardLibraryViewModel.Item);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
    v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_10057B540((uint64_t)v19, (uint64_t)v10);
    sub_10057B540((uint64_t)v17, v25);
    v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    if (v26((uint64_t)v10, 1, v5) == 1)
    {
      sub_1004CB800((uint64_t)v17, (uint64_t *)&unk_1013E3830);
      sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E3830);
      if (v26(v25, 1, v5) == 1)
      {
        sub_1004CB800((uint64_t)v10, (uint64_t *)&unk_1013E3830);
LABEL_9:
        v29 = objc_msgSend(v32, "UIImage");
        (*(void (**)(id, uint64_t, uint64_t))(v22 + 56))(v29, v30, v22);
        return swift_unknownObjectRelease(v21);
      }
    }
    else
    {
      sub_10057B540((uint64_t)v10, (uint64_t)v14);
      if (v26(v25, 1, v5) != 1)
      {
        v27 = v31;
        sub_1004B84E0(v25, v31, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v28 = sub_100BD121C((uint64_t)v14, v27);
        sub_1004B84A4(v27, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004CB800((uint64_t)v17, (uint64_t *)&unk_1013E3830);
        sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E3830);
        sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004CB800((uint64_t)v10, (uint64_t *)&unk_1013E3830);
        if ((v28 & 1) != 0)
          goto LABEL_9;
        return swift_unknownObjectRelease(v21);
      }
      sub_1004CB800((uint64_t)v17, (uint64_t *)&unk_1013E3830);
      sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E3830);
      sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardLibraryViewModel.Item);
    }
    sub_1004CB800((uint64_t)v10, &qword_1014131D0);
    return swift_unknownObjectRelease(v21);
  }
  return result;
}

uint64_t sub_100DAAD94(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  *(_QWORD *)(v9 + 296) = a9;
  *(_QWORD *)(v9 + 304) = v23;
  *(_QWORD *)(v9 + 288) = a8;
  *(double *)(v9 + 280) = a1;
  *(_QWORD *)(v9 + 264) = a6;
  *(_QWORD *)(v9 + 272) = a7;
  *(_QWORD *)(v9 + 256) = a5;
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CRLBoardLibraryViewModel.Folder(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 312) = swift_task_alloc(v10);
  *(_QWORD *)(v9 + 320) = swift_task_alloc(v10);
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  *(_QWORD *)(v9 + 328) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C(&qword_1013E4660);
  *(_QWORD *)(v9 + 336) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  *(_QWORD *)(v9 + 344) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v9 + 352) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 360) = swift_task_alloc(v15);
  *(_QWORD *)(v9 + 368) = swift_task_alloc(v15);
  v16 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  *(_QWORD *)(v9 + 376) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v9 + 384) = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 392) = swift_task_alloc(v18);
  *(_QWORD *)(v9 + 400) = swift_task_alloc(v18);
  *(_QWORD *)(v9 + 408) = swift_task_alloc(v18);
  *(_QWORD *)(v9 + 416) = swift_task_alloc(v18);
  v19 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v9 + 424) = static MainActor.shared.getter(v19);
  v20 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  *(_QWORD *)(v9 + 432) = v20;
  *(_QWORD *)(v9 + 440) = v21;
  return swift_task_switch(sub_100DAAF14, v20, v21);
}

uint64_t sub_100DAAF14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 384);
    v4 = *(_QWORD *)(v0 + 352);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v37 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      v7 = *(_QWORD *)(v0 + 408);
      v8 = *(_QWORD *)(v0 + 416);
      v9 = *(_QWORD *)(v0 + 376);
      sub_1004B8460(v5, v8, type metadata accessor for CRLBoardLibraryViewModel.Item);
      sub_1004B8460(v8, v7, type metadata accessor for CRLBoardLibraryViewModel.Item);
      if (swift_getEnumCaseMultiPayload(v7, v9) == 2)
      {
        v10 = *(_QWORD *)(v0 + 408);
        v12 = *(_QWORD *)(v0 + 336);
        v11 = *(_QWORD *)(v0 + 344);
        v13 = *(_QWORD *)(v0 + 328);
        sub_1004B804C((uint64_t *)&unk_1013EA630);
        swift_bridgeObjectRelease();
        sub_1004B84E0(v10, v13, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84E0(v13, v12, type metadata accessor for CRLBoardIdentifier);
        v14 = v12;
        v15 = v11;
        v16 = 1;
      }
      else
      {
        v17 = *(_QWORD *)(v0 + 416);
        v18 = *(_QWORD *)(v0 + 400);
        v19 = *(_QWORD *)(v0 + 376);
        sub_1004B84A4(*(_QWORD *)(v0 + 408), type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B8460(v17, v18, type metadata accessor for CRLBoardLibraryViewModel.Item);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v19);
        v21 = *(_QWORD *)(v0 + 400);
        if (EnumCaseMultiPayload != 1)
        {
          sub_1004B84A4(v21, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v25 = 1;
          goto LABEL_11;
        }
        v23 = *(_QWORD *)(v0 + 336);
        v22 = *(_QWORD *)(v0 + 344);
        v24 = *(_QWORD *)(v0 + 320);
        sub_1004B84E0(v21, v24, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        sub_1004B84E0(v24, v23, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v14 = v23;
        v15 = v22;
        v16 = 0;
      }
      swift_storeEnumTagMultiPayload(v14, v15, v16);
      v25 = 0;
LABEL_11:
      v26 = *(_QWORD *)(v0 + 416);
      v28 = *(_QWORD *)(v0 + 336);
      v27 = *(_QWORD *)(v0 + 344);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v28, v25, 1, v27);
      sub_1004B84A4(v26, type metadata accessor for CRLBoardLibraryViewModel.Item);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v28, 1, v27) == 1)
      {
        sub_1004CB800(*(_QWORD *)(v0 + 336), &qword_1013E4660);
      }
      else
      {
        v30 = *(_QWORD *)(v0 + 360);
        v29 = *(_QWORD *)(v0 + 368);
        sub_1004B84E0(*(_QWORD *)(v0 + 336), v29, type metadata accessor for CRLBoardPreviewImageCache.Item);
        sub_1004B84E0(v29, v30, type metadata accessor for CRLBoardPreviewImageCache.Item);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = (double *)sub_100D104AC(0, *((_QWORD *)v6 + 2) + 1, 1, (unint64_t)v6);
        v32 = *((_QWORD *)v6 + 2);
        v31 = *((_QWORD *)v6 + 3);
        if (v32 >= v31 >> 1)
          v6 = (double *)sub_100D104AC(v31 > 1, v32 + 1, 1, (unint64_t)v6);
        v33 = *(_QWORD *)(v0 + 360);
        *((_QWORD *)v6 + 2) = v32 + 1;
        sub_1004B84E0(v33, (uint64_t)v6+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v32, type metadata accessor for CRLBoardPreviewImageCache.Item);
      }
      v5 += v37;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
  }
  v6 = _swiftEmptyArrayStorage;
LABEL_19:
  *(_QWORD *)(v0 + 448) = v6;
  if (*(_BYTE *)(*(_QWORD *)(v0 + 272) + OBJC_IVAR____TtC8Freeform30CRLiOSFolderGridViewController_isGridLayout))
    v34 = 2;
  else
    v34 = 0;
  v35 = (_QWORD *)swift_task_alloc(dword_1013E432C);
  *(_QWORD *)(v0 + 456) = v35;
  *v35 = v0;
  v35[1] = sub_100DAB25C;
  return sub_1005916E0((uint64_t)v6, v34, 0, 1, *(double *)(v0 + 280));
}

uint64_t sub_100DAB25C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 456);
  *(_QWORD *)(*(_QWORD *)v2 + 464) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v6 = v4[54];
    v7 = v4[55];
    v8 = sub_100DAB39C;
  }
  else
  {
    v4[59] = a1;
    v6 = v4[54];
    v7 = v4[55];
    v8 = sub_100DAB2D8;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100DAB2D8()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, __n128);
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 472);
  v2 = *(void (**)(void *, __n128))(v0 + 288);
  v3 = swift_release(*(_QWORD *)(v0 + 424));
  v2(v1, v3);

  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DAB39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  int EnumCaseMultiPayload;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  swift_release(*(_QWORD *)(v0 + 424));
  if (qword_1013DD6B8 != -1)
    swift_once(&qword_1013DD6B8, sub_100A00A6C);
  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 304);
  swift_beginAccess(&static OS_os_log.crlDefault, v0 + 168, 0, 0);
  v4 = (void *)static OS_os_log.crlDefault;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v5, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  sub_1004B8460(v3, v1, type metadata accessor for CRLBoardLibraryViewModel.Item);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *(_QWORD *)(v0 + 312);
      sub_1004B84E0(*(_QWORD *)(v0 + 392), v8, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      v9 = v4;
      sub_100BCAD68();
      v39 = v10;
      v12 = v11;
      v13 = v8;
      v14 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
    }
    else
    {
      v17 = *(_QWORD *)(v0 + 392);
      v18 = (uint64_t *)(v17 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48));
      v12 = v18[1];
      v39 = *v18;
      v19 = v4;
      v14 = type metadata accessor for CRLBoardIdentifier;
      v13 = v17;
    }
    sub_1004B84A4(v13, v14);
  }
  else
  {
    v15 = v4;
    v39 = sub_100BCE3AC();
    v12 = v16;
  }
  v20 = *(_QWORD *)(v0 + 464);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v21 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v21;
  *(_QWORD *)(inited + 32) = v39;
  *(_QWORD *)(inited + 40) = v12;
  swift_getErrorValue(v20, v0 + 240, v0 + 192);
  v22 = Error.publicDescription.getter(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v21;
  *(_QWORD *)(inited + 72) = v22;
  *(_QWORD *)(inited + 80) = v23;
  swift_getErrorValue(v20, v0 + 248, v0 + 216);
  v24 = Error.fullDescription.getter(*(_QWORD *)(v0 + 224));
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v21;
  *(_QWORD *)(inited + 112) = v24;
  *(_QWORD *)(inited + 120) = v25;
  v26 = static os_log_type_t.error.getter(v24);
  sub_100A06EBC((uint64_t)v4, &_mh_execute_header, v26, "Error generating image for folder (%@): %{public}@ <%@>", 55, 2, inited);
  swift_setDeallocating(inited);
  v27 = *(_QWORD *)(inited + 16);
  v28 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, v27, v28);

  swift_errorRelease(v20);
  v29 = *(_QWORD *)(v0 + 408);
  v31 = *(_QWORD *)(v0 + 392);
  v30 = *(_QWORD *)(v0 + 400);
  v33 = *(_QWORD *)(v0 + 360);
  v32 = *(_QWORD *)(v0 + 368);
  v35 = *(_QWORD *)(v0 + 328);
  v34 = *(_QWORD *)(v0 + 336);
  v37 = *(_QWORD *)(v0 + 312);
  v36 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DAB684(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 352) = a7;
  *(_QWORD *)(v8 + 360) = a8;
  *(double *)(v8 + 344) = a1;
  *(_QWORD *)(v8 + 328) = a5;
  *(_QWORD *)(v8 + 336) = a6;
  v9 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  *(_QWORD *)(v8 + 368) = v9;
  *(_QWORD *)(v8 + 376) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 384) = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 392) = v11;
  *(_QWORD *)(v8 + 400) = v12;
  return swift_task_switch(sub_100DAB71C, v11, v12);
}

uint64_t sub_100DAB71C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (qword_1013DD750 != -1)
    swift_once(&qword_1013DD750, sub_100A02540);
  v2 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 328);
  swift_beginAccess(&static OS_os_log.crlBoardPreviewImageCache, v0 + 240, 0, 0);
  v4 = (void *)static OS_os_log.crlBoardPreviewImageCache;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  *(_QWORD *)(v0 + 408) = v5;
  inited = swift_initStackObject(v5, v0 + 168);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v7 = v4;
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v11 = sub_1004CFC2C();
  *(_QWORD *)(v0 + 416) = v11;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v10;
  v13 = static os_log_type_t.default.getter(v12);
  sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v13, "About to request image from cache for board UUID: %@", 52, 2, inited);
  swift_setDeallocating(inited);
  v14 = sub_1004B804C(&qword_1013E0190);
  *(_QWORD *)(v0 + 424) = v14;
  swift_arrayDestroy(inited + 32, 1, v14);

  sub_1004B8460(v3, v1, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v1, v2, 1);
  v15 = (_QWORD *)swift_task_alloc(dword_1013E431C);
  *(_QWORD *)(v0 + 432) = v15;
  *v15 = v0;
  v15[1] = sub_100DAB8C4;
  return sub_100590F30(*(_QWORD *)(v0 + 376), 2, 0, 1, *(double *)(v0 + 344));
}

uint64_t sub_100DAB8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 432);
  *(_QWORD *)(*(_QWORD *)v2 + 440) = v1;
  swift_task_dealloc(v5);
  v6 = v4[47];
  if (v1)
  {
    sub_1004B84A4(v6, type metadata accessor for CRLBoardPreviewImageCache.Item);
    v7 = v4[49];
    v8 = v4[50];
    v9 = sub_100DAB9A8;
  }
  else
  {
    v4[56] = a1;
    sub_1004B84A4(v6, type metadata accessor for CRLBoardPreviewImageCache.Item);
    v7 = v4[49];
    v8 = v4[50];
    v9 = sub_100DAB954;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_100DAB954()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, __n128);
  __n128 v3;

  v1 = *(void **)(v0 + 448);
  v2 = *(void (**)(void *, __n128))(v0 + 352);
  v3 = swift_release(*(_QWORD *)(v0 + 384));
  v2(v1, v3);

  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DAB9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  void (*v17)(void);

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 408);
  v17 = *(void (**)(void))(v0 + 352);
  v16 = *(_QWORD *)(v0 + 424);
  swift_release(*(_QWORD *)(v0 + 384));
  v4 = (void *)static OS_os_log.crlBoardPreviewImageCache;
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  v6 = v4;
  v7 = UUID.uuidString.getter(v6);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v8;
  swift_getErrorValue(v1, v0 + 320, v0 + 288);
  v9 = Error.publicDescription.getter(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v2;
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 80) = v10;
  swift_getErrorValue(v1, v0 + 312, v0 + 264);
  v11 = Error.fullDescription.getter(*(_QWORD *)(v0 + 272));
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v2;
  *(_QWORD *)(inited + 112) = v11;
  *(_QWORD *)(inited + 120) = v12;
  v13 = static os_log_type_t.error.getter(v11);
  sub_100A06EBC((uint64_t)v6, &_mh_execute_header, v13, "Error generating image for board UUID (%@): %{public}@ <%@>", 59, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 3, v16);

  v14 = sub_100594468();
  v17();

  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DABB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7[4] = a4;
  v12 = type metadata accessor for MainActor(0);
  v7[5] = v12;
  v7[6] = static MainActor.shared.getter(v12);
  ObjectType = swift_getObjectType(a4);
  v7[7] = ObjectType;
  v7[2] = a4;
  v14 = *(_QWORD *)(a5 + 16);
  v7[8] = v14;
  v15 = *(int **)(v14 + 8);
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  v7[9] = v16;
  *v16 = v7;
  v16[1] = sub_100DABBF4;
  return v18(a6, a7, ObjectType, v14);
}

uint64_t sub_100DABBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100DABC64, v2, v3);
}

uint64_t sub_100DABC64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_release(*(_QWORD *)(v0 + 48));
  *(_QWORD *)(v0 + 24) = v3;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 16))(v2, v1, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DABCBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[16] = a1;
  v2[17] = v1;
  v3 = sub_1004B804C(&qword_1013FE140);
  v2[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRLBoardEntity(0);
  v2[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[20] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v6);
  v2[22] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C((uint64_t *)&unk_1013E3830) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v7);
  v2[24] = swift_task_alloc(v7);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013E0270) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v8);
  v2[26] = swift_task_alloc(v8);
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  v2[27] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[28] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v11);
  v2[30] = swift_task_alloc(v11);
  v2[31] = swift_task_alloc(v11);
  v2[32] = swift_task_alloc(v11);
  v2[33] = swift_task_alloc(v11);
  v2[34] = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  v2[35] = v12;
  v2[36] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  v2[37] = v13;
  v2[38] = v14;
  return swift_task_switch(sub_100DABE58, v13, v14);
}

id sub_100DABE58()
{
  uint64_t v0;
  id result;
  void *v2;
  id v3;
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  void (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  result = objc_msgSend(*(id *)(v0 + 136), "collectionView");
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, "visibleCells");

    v4 = sub_100DAD144();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    v6 = (double *)sub_1005B9BE0(v5);
    *(_QWORD *)(v0 + 312) = v6;
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyArrayStorage;
    if (v6)
      v8 = v6;
    else
      v8 = _swiftEmptyArrayStorage;
    v9 = *((_QWORD *)v8 + 2);
    *(_QWORD *)(v0 + 320) = v9;
    if (v9)
    {
      v38 = *(_QWORD *)(v0 + 224);
      swift_bridgeObjectRetain(v8);
      v11 = (uint64_t *)(v10 + 40);
      v12 = &qword_1013E0270;
      while (1)
      {
        v13 = v12;
        v14 = *(_QWORD *)(v0 + 192);
        v15 = *(v11 - 1);
        v16 = *v11;
        ObjectType = swift_getObjectType(v15);
        v18 = *(void (**)(uint64_t, uint64_t, __n128))(v16 + 24);
        v19 = swift_unknownObjectRetain(v15);
        v18(ObjectType, v16, v19);
        v20 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v14, 1, v20);
        v22 = *(_QWORD *)(v0 + 192);
        if (v21 == 1)
          break;
        if (swift_getEnumCaseMultiPayload(*(_QWORD *)(v0 + 192), v20) != 2)
        {
          sub_1004B84A4(v22, type metadata accessor for CRLBoardLibraryViewModel.Item);
          goto LABEL_14;
        }
        v23 = *(_QWORD *)(v0 + 264);
        v24 = *(_QWORD *)(v0 + 200);
        sub_1004B804C((uint64_t *)&unk_1013EA630);
        swift_bridgeObjectRelease();
        sub_1004B84E0(v22, v23, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84E0(v23, v24, type metadata accessor for CRLBoardIdentifier);
        v25 = 0;
LABEL_15:
        v12 = v13;
        v27 = *(_QWORD *)(v0 + 208);
        v26 = *(_QWORD *)(v0 + 216);
        v28 = *(_QWORD *)(v0 + 200);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v28, v25, 1, v26);
        sub_1004C4938(v28, v27, v13);
        v29 = swift_unknownObjectRelease(v15);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v38 + 48))(v27, 1, v26, v29) == 1)
        {
          sub_1004CB800(*(_QWORD *)(v0 + 208), v13);
        }
        else
        {
          v30 = *(_QWORD *)(v0 + 272);
          v31 = *(_QWORD *)(v0 + 256);
          sub_1004B84E0(*(_QWORD *)(v0 + 208), v30, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84E0(v30, v31, type metadata accessor for CRLBoardIdentifier);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v7 = (double *)sub_100D104C0(0, *((_QWORD *)v7 + 2) + 1, 1, (unint64_t)v7);
          v33 = *((_QWORD *)v7 + 2);
          v32 = *((_QWORD *)v7 + 3);
          if (v33 >= v32 >> 1)
            v7 = (double *)sub_100D104C0(v32 > 1, v33 + 1, 1, (unint64_t)v7);
          v34 = *(_QWORD *)(v0 + 256);
          *((_QWORD *)v7 + 2) = v33 + 1;
          sub_1004B84E0(v34, (uint64_t)v7+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v33, type metadata accessor for CRLBoardIdentifier);
        }
        v11 += 2;
        if (!--v9)
        {
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
      }
      sub_1004CB800(*(_QWORD *)(v0 + 192), (uint64_t *)&unk_1013E3830);
LABEL_14:
      v25 = 1;
      goto LABEL_15;
    }
LABEL_22:
    *(_QWORD *)(v0 + 328) = v7;
    v35 = *(_QWORD *)(v0 + 280);
    *(_QWORD *)(v0 + 336) = static MainActor.shared.getter(v8);
    v36 = dispatch thunk of Actor.unownedExecutor.getter(v35, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 344) = v36;
    *(_QWORD *)(v0 + 352) = v37;
    return (id)swift_task_switch(sub_100DAC1C0, v36, v37);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DAC1C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_entityStore);
  *(_QWORD *)(v0 + 360) = v1;
  if (v1)
  {
    swift_retain(v1);
    return swift_task_switch(sub_100DAC218, v1, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100DAC218()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[45];
  v2 = v0[41];
  swift_retain(v1);
  v0[46] = sub_100C80904(v2, v1);
  v0[47] = 0;
  v3 = v0[45];
  swift_release(v3);
  swift_release(v3);
  return swift_task_switch(sub_100DAC29C, v0[43], v0[44]);
}

uint64_t sub_100DAC29C()
{
  _QWORD *v0;

  swift_release(v0[42]);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100DAC2DC, v0[37], v0[38]);
}

void sub_100DAC2DC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  double *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  double *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_QWORD *)(v0 + 320);
  swift_release(*(_QWORD *)(v0 + 288));
  if (!v1)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54 = *(_QWORD *)(v0 + 264);
    v56 = *(_QWORD *)(v0 + 248);
    v55 = *(_QWORD *)(v0 + 256);
    v58 = *(_QWORD *)(v0 + 232);
    v57 = *(_QWORD *)(v0 + 240);
    v60 = *(_QWORD *)(v0 + 200);
    v59 = *(_QWORD *)(v0 + 208);
    v62 = *(_QWORD *)(v0 + 184);
    v61 = *(_QWORD *)(v0 + 192);
    v70 = *(_QWORD *)(v0 + 176);
    v72 = *(_QWORD *)(v0 + 168);
    v74 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 272));
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v63 = *(_QWORD *)(v0 + 368);
  v2 = 0;
  v69 = *(_QWORD *)(v0 + 152);
  if (*(_QWORD *)(v0 + 312))
    v3 = *(double **)(v0 + 312);
  else
    v3 = _swiftEmptyArrayStorage;
  v65 = v3 + 4;
  v4 = type metadata accessor for CRLBoardIdentifier;
  v5 = type metadata accessor for CRLBoardEntity;
  v64 = *(_QWORD *)(v0 + 160);
LABEL_8:
  v6 = *(double **)(v0 + 312);
  if (!v6)
    v6 = _swiftEmptyArrayStorage;
  if (v2 < *((_QWORD *)v6 + 2))
  {
    v7 = *(_QWORD *)(v0 + 184);
    v68 = v2;
    v8 = &v65[2 * v2];
    v10 = *(_QWORD *)v8;
    v9 = *((_QWORD *)v8 + 1);
    ObjectType = swift_getObjectType(*(_QWORD *)v8);
    v12 = *(void (**)(uint64_t, uint64_t, __n128))(v9 + 24);
    v13 = swift_unknownObjectRetain(v10);
    v66 = ObjectType;
    v67 = v9;
    v12(ObjectType, v9, v13);
    v14 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v7, 1, v14);
    v16 = *(_QWORD *)(v0 + 184);
    if (v15 == 1)
    {
      swift_unknownObjectRelease(v10);
      v17 = v16;
      v18 = (uint64_t *)&unk_1013E3830;
      goto LABEL_13;
    }
    if (swift_getEnumCaseMultiPayload(*(_QWORD *)(v0 + 184), v14) != 2)
    {
      swift_unknownObjectRelease(v10);
      sub_1004B84A4(v16, type metadata accessor for CRLBoardLibraryViewModel.Item);
      goto LABEL_7;
    }
    v19 = *(_QWORD *)(v0 + 248);
    sub_1004B804C((uint64_t *)&unk_1013EA630);
    swift_bridgeObjectRelease();
    sub_1004B84E0(v16, v19, v4);
    v20 = *(_QWORD *)(v63 + 16);
    v21 = *(_QWORD *)(v0 + 368);
    if (!v20)
    {
      v23 = swift_bridgeObjectRetain(v21);
LABEL_27:
      v42 = v64;
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))(v64 + 56))(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 152), v23);
      goto LABEL_30;
    }
    v22 = v21 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
    swift_bridgeObjectRetain(v21);
    v71 = *(_QWORD *)(v64 + 72);
    v73 = v10;
    while (1)
    {
      v25 = *(_QWORD *)(v0 + 240);
      v24 = *(_QWORD *)(v0 + 248);
      v26 = *(_QWORD *)(v0 + 232);
      v27 = v4;
      v28 = *(_QWORD *)(v0 + 168);
      v29 = v5;
      sub_1004B8460(v22, v28, v5);
      v30 = v28 + *(int *)(v69 + 40);
      v31 = static UUID.== infix(_:_:)(v30);
      v32 = v30;
      v4 = v27;
      sub_1004B8460(v32, v25, v27);
      sub_1004B8460(v24, v26, v27);
      v34 = *(_QWORD *)(v0 + 232);
      v33 = *(_QWORD *)(v0 + 240);
      if ((v31 & 1) != 0)
      {
        v35 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
        v36 = *(_QWORD *)(v33 + v35);
        v37 = *(_QWORD *)(v33 + v35 + 8);
        v38 = (_QWORD *)(v34 + v35);
        v39 = v38[1];
        if (v36 == *v38 && v37 == v39)
        {
          sub_1004B84A4(v34, v27);
          sub_1004B84A4(v33, v27);
          v5 = v29;
          v10 = v73;
LABEL_29:
          v43 = *(_QWORD *)(v0 + 144);
          v44 = *(_QWORD *)(v0 + 152);
          sub_1004B84E0(*(_QWORD *)(v0 + 168), v43, v5);
          v45 = v43;
          v42 = v64;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v64 + 56))(v45, 0, 1, v44, v46);
LABEL_30:
          v48 = *(_QWORD *)(v0 + 144);
          v47 = *(_QWORD *)(v0 + 152);
          v49 = swift_bridgeObjectRelease();
          v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v42 + 48))(v48, 1, v47, v49);
          v51 = *(_QWORD *)(v0 + 248);
          if (v50 == 1)
          {
            v52 = *(_QWORD *)(v0 + 144);
            swift_unknownObjectRelease(v10);
            sub_1004B84A4(v51, v4);
            v17 = v52;
            v18 = &qword_1013FE140;
LABEL_13:
            sub_1004CB800(v17, v18);
          }
          else
          {
            v53 = *(_QWORD *)(v0 + 176);
            sub_1004B84E0(*(_QWORD *)(v0 + 144), v53, v5);
            *(_QWORD *)(v0 + 120) = v10;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 + 8) + 16))(v53, v66);
            sub_1004B84A4(v53, v5);
            sub_1004B84A4(v51, v4);
            swift_unknownObjectRelease(v10);
          }
LABEL_7:
          v2 = v68 + 1;
          if (v68 + 1 == *(_QWORD *)(v0 + 320))
            goto LABEL_33;
          goto LABEL_8;
        }
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, *v38, v39, 0);
        sub_1004B84A4(v34, v27);
        sub_1004B84A4(v33, v27);
        v5 = v29;
        v10 = v73;
        if ((v41 & 1) != 0)
          goto LABEL_29;
      }
      else
      {
        sub_1004B84A4(*(_QWORD *)(v0 + 232), v27);
        sub_1004B84A4(v33, v27);
        v5 = v29;
        v10 = v73;
      }
      sub_1004B84A4(*(_QWORD *)(v0 + 168), v5);
      v22 += v71;
      if (!--v20)
        goto LABEL_27;
    }
  }
  __break(1u);
}

uint64_t sub_100DAC7C0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[45];
  swift_release(v0[42]);
  swift_bridgeObjectRelease();
  swift_release(v1);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100DAC82C, v0[37], v0[38]);
}

uint64_t sub_100DAC82C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_release(*(_QWORD *)(v0 + 288));
  if (qword_1013DD740 != -1)
    swift_once(&qword_1013DD740, sub_100A02288);
  v1 = *(_QWORD *)(v0 + 376);
  swift_beginAccess(&static OS_os_log.crlFolderUI, v0 + 88, 0, 0);
  v2 = (void *)static OS_os_log.crlFolderUI;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v0 + 112) = v1;
  v5 = v2;
  swift_errorRetain(v1);
  v6 = sub_1004B804C(&qword_1013E0210);
  v7 = String.init<A>(describing:)(v0 + 112, v6);
  v9 = v8;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v10 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v9;
  v11 = static os_log_type_t.error.getter(v10);
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v11, "Error annotating folder items: %@", 33, 2, inited);
  swift_setDeallocating(inited);
  v12 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v12);

  swift_errorRelease(v1);
  v13 = *(_QWORD *)(v0 + 264);
  v15 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100DACA30()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = objc_msgSend(v0, "collectionView");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "visibleCells");

    v4 = sub_100DAD144();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
      goto LABEL_20;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      v7 = 4;
      while (1)
      {
        v8 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5)
           : *(id *)(v5 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        ObjectType = swift_getObjectType(v8);
        v12 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLFolderCollectionViewItem);
        if (v12)
          v13 = v12;
        else
          v13 = 0;
        if (v12)
          v14 = v9;
        else
          v14 = 0;
        if (!v14)
        {
          swift_bridgeObjectRelease();

          return;
        }
        v15 = swift_getObjectType(v14);
        (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 16) + 16))(v15);

        ++v7;
        if (v10 == v6)
          goto LABEL_17;
      }
      __break(1u);
LABEL_20:
      if (v5 < 0)
        v16 = v5;
      else
        v16 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease();
    }
LABEL_17:
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100DACBD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1014131B4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1004CF80C;
  return sub_100DABCBC(a1);
}

void sub_100DACC24()
{
  sub_100DACA30();
}

uint64_t sub_100DACC44(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100DACC74 + 4 * byte_100F38DA0[a1]))(0x656D616E6572, 0xE600000000000000);
}

uint64_t sub_100DACC74()
{
  return 0x6572616873;
}

unint64_t sub_100DACC88()
{
  return 0xD000000000000011;
}

uint64_t sub_100DACCA4()
{
  return 0x734174726F707865;
}

uint64_t sub_100DACCC4()
{
  return 0x746163696C707564;
}

uint64_t sub_100DACCE0()
{
  return 0x657469726F766166;
}

uint64_t sub_100DACCF8()
{
  return 0x69726F7661666E75;
}

uint64_t sub_100DACD14()
{
  return 0x6574656C6564;
}

uint64_t sub_100DACD24()
{
  return 1701079400;
}

uint64_t sub_100DACD34()
{
  return 0x796C706572;
}

uint64_t sub_100DACD48()
{
  return 0x7265766F636572;
}

uint64_t sub_100DACD60(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_100DACC44(*a1);
  v5 = v4;
  v6 = sub_100DACC44(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100DACDE8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_100DACC44(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_100DACE48(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_100DACC44(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_100DACE88(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_100DACC44(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100DACEE4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100DAE20C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100DACF10@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100DACC44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100DACF38(_QWORD *a1@<X8>)
{
  *a1 = &off_101264370;
}

uint64_t sub_100DACF48()
{
  void *v0;
  id v1;
  objc_super v3;

  if (objc_msgSend(v0, "isEditing"))
  {
    objc_msgSend(v0, "setEditing:", 0);
    v1 = objc_msgSend((id)objc_opt_self(CRLAccessibility), "sharedInstance");
    objc_msgSend(v1, "setFirstElementForUpcomingScreenChange:", v0);

    UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, v0);
    return 1;
  }
  else
  {
    v3.receiver = v0;
    v3.super_class = (Class)type metadata accessor for CRLiOSFolderGridViewController(0);
    return (uint64_t)objc_msgSendSuper2(&v3, "accessibilityPerformEscape");
  }
}

uint64_t _s23BoardLibraryLayoutStyleOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100DAD07C + 4 * byte_100F38DB0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100DAD0B0 + 4 * byte_100F38DAB[v4]))();
}

uint64_t sub_100DAD0B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100DAD0B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100DAD0C0);
  return result;
}

uint64_t sub_100DAD0CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100DAD0D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100DAD0D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100DAD0E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s23BoardLibraryLayoutStyleOMa()
{
  return &_s23BoardLibraryLayoutStyleON;
}

unint64_t sub_100DAD100()
{
  unint64_t result;

  result = qword_1014131A0;
  if (!qword_1014131A0)
  {
    result = swift_getWitnessTable(&unk_100F38EA0, &_s23BoardLibraryLayoutStyleON);
    atomic_store(result, (unint64_t *)&qword_1014131A0);
  }
  return result;
}

unint64_t sub_100DAD144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013E3840;
  if (!qword_1013E3840)
  {
    v1 = objc_opt_self(UICollectionViewCell);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1013E3840);
  }
  return result;
}

double *sub_100DAD180(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    __asm { BR              X9 }
  }
  return _swiftEmptyArrayStorage;
}

void sub_100DAD910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  unint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  Class isa;
  void (*v104)(char *, uint64_t, uint64_t, uint64_t);
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v0 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v0);
  v108 = (char *)&v104 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v107 = (char *)&v104 - v3;
  __chkstk_darwin(v4);
  v106 = (char *)&v104 - v5;
  __chkstk_darwin(v6);
  v105 = (char *)&v104 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v104 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v104 - v12;
  v14 = sub_1004B804C(&qword_1014131D8);
  inited = swift_initStackObject(v14, &v114);
  *(_OWORD *)(inited + 16) = xmmword_100EFD140;
  v16 = sub_1004B804C(&qword_1013E1790);
  v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v104(v13, 1, 5, v16);
  sub_100BCB498();
  v18 = v17;
  v20 = v19;
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  *(_QWORD *)(inited + 32) = v18;
  *(_QWORD *)(inited + 40) = v20;
  v21 = sub_1004B804C(&qword_1013F7600);
  v109 = v21;
  v22 = swift_initStackObject(v21, &v113);
  v110 = xmmword_100EF5E30;
  *(_OWORD *)(v22 + 16) = xmmword_100EF5E30;
  v23 = aIsgridlayout_2[1];
  *(_QWORD *)(v22 + 32) = aIsgridlayout_2[0];
  *(_QWORD *)(v22 + 40) = v23;
  *(_BYTE *)(v22 + 48) = 1;
  v24 = qword_101413170;
  v25 = off_101413178;
  *(_QWORD *)(v22 + 72) = &type metadata for Bool;
  *(_QWORD *)(v22 + 80) = v24;
  *(_QWORD *)(v22 + 88) = v25;
  *(_QWORD *)(v22 + 96) = 1;
  v26 = qword_101413180;
  v27 = off_101413188;
  *(_QWORD *)(v22 + 120) = &type metadata for Int;
  *(_QWORD *)(v22 + 128) = v26;
  *(_QWORD *)(v22 + 136) = v27;
  *(_BYTE *)(v22 + 144) = 0;
  v28 = qword_101413160;
  v29 = off_101413168;
  *(_QWORD *)(v22 + 168) = &type metadata for Bool;
  *(_QWORD *)(v22 + 176) = v28;
  *(_QWORD *)(v22 + 184) = v29;
  *(_QWORD *)(v22 + 216) = &type metadata for Bool;
  *(_BYTE *)(v22 + 192) = 0;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v29);
  *(_QWORD *)(inited + 48) = sub_1008D5E68(v22);
  v30 = v104;
  v104(v10, 2, 5, v16);
  sub_100BCB498();
  v32 = v31;
  v34 = v33;
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  *(_QWORD *)(inited + 56) = v32;
  *(_QWORD *)(inited + 64) = v34;
  v35 = swift_initStackObject(v21, &v112);
  *(_OWORD *)(v35 + 16) = v110;
  v36 = aIsgridlayout_2[1];
  *(_QWORD *)(v35 + 32) = aIsgridlayout_2[0];
  *(_QWORD *)(v35 + 40) = v36;
  *(_BYTE *)(v35 + 48) = 1;
  v37 = qword_101413170;
  v38 = off_101413178;
  *(_QWORD *)(v35 + 72) = &type metadata for Bool;
  *(_QWORD *)(v35 + 80) = v37;
  *(_QWORD *)(v35 + 88) = v38;
  *(_QWORD *)(v35 + 96) = 1;
  v39 = qword_101413180;
  v40 = off_101413188;
  *(_QWORD *)(v35 + 120) = &type metadata for Int;
  *(_QWORD *)(v35 + 128) = v39;
  *(_QWORD *)(v35 + 136) = v40;
  *(_BYTE *)(v35 + 144) = 0;
  v41 = qword_101413160;
  v42 = off_101413168;
  *(_QWORD *)(v35 + 168) = &type metadata for Bool;
  *(_QWORD *)(v35 + 176) = v41;
  *(_QWORD *)(v35 + 184) = v42;
  *(_QWORD *)(v35 + 216) = &type metadata for Bool;
  *(_BYTE *)(v35 + 192) = 1;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v42);
  *(_QWORD *)(inited + 72) = sub_1008D5E68(v35);
  v43 = (uint64_t)v105;
  v30(v105, 3, 5, v16);
  v44 = v30;
  sub_100BCB498();
  v46 = v45;
  v48 = v47;
  sub_1004B84A4(v43, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  *(_QWORD *)(inited + 80) = v46;
  *(_QWORD *)(inited + 88) = v48;
  v49 = v109;
  v50 = swift_initStackObject(v109, &v111);
  *(_OWORD *)(v50 + 16) = v110;
  v51 = aIsgridlayout_2[1];
  *(_QWORD *)(v50 + 32) = aIsgridlayout_2[0];
  *(_QWORD *)(v50 + 40) = v51;
  *(_BYTE *)(v50 + 48) = 1;
  v52 = qword_101413170;
  v53 = off_101413178;
  *(_QWORD *)(v50 + 72) = &type metadata for Bool;
  *(_QWORD *)(v50 + 80) = v52;
  *(_QWORD *)(v50 + 88) = v53;
  *(_QWORD *)(v50 + 96) = 1;
  v54 = qword_101413180;
  v55 = off_101413188;
  *(_QWORD *)(v50 + 120) = &type metadata for Int;
  *(_QWORD *)(v50 + 128) = v54;
  *(_QWORD *)(v50 + 136) = v55;
  *(_BYTE *)(v50 + 144) = 0;
  v56 = qword_101413160;
  v57 = off_101413168;
  *(_QWORD *)(v50 + 168) = &type metadata for Bool;
  *(_QWORD *)(v50 + 176) = v56;
  *(_QWORD *)(v50 + 184) = v57;
  *(_QWORD *)(v50 + 216) = &type metadata for Bool;
  *(_BYTE *)(v50 + 192) = 0;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v57);
  *(_QWORD *)(inited + 96) = sub_1008D5E68(v50);
  v58 = (uint64_t)v106;
  v44(v106, 4, 5, v16);
  sub_100BCB498();
  v60 = v59;
  v62 = v61;
  sub_1004B84A4(v58, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  *(_QWORD *)(inited + 104) = v60;
  *(_QWORD *)(inited + 112) = v62;
  v63 = swift_allocObject(v49, 224, 7);
  *(_OWORD *)(v63 + 16) = v110;
  v64 = aIsgridlayout_2[1];
  *(_QWORD *)(v63 + 32) = aIsgridlayout_2[0];
  *(_QWORD *)(v63 + 40) = v64;
  *(_BYTE *)(v63 + 48) = 1;
  v65 = qword_101413170;
  v66 = off_101413178;
  *(_QWORD *)(v63 + 72) = &type metadata for Bool;
  *(_QWORD *)(v63 + 80) = v65;
  *(_QWORD *)(v63 + 88) = v66;
  *(_QWORD *)(v63 + 96) = 2;
  v67 = qword_101413180;
  v68 = off_101413188;
  *(_QWORD *)(v63 + 120) = &type metadata for Int;
  *(_QWORD *)(v63 + 128) = v67;
  *(_QWORD *)(v63 + 136) = v68;
  *(_BYTE *)(v63 + 144) = 1;
  v69 = qword_101413160;
  v70 = off_101413168;
  *(_QWORD *)(v63 + 168) = &type metadata for Bool;
  *(_QWORD *)(v63 + 176) = v69;
  *(_QWORD *)(v63 + 184) = v70;
  *(_QWORD *)(v63 + 216) = &type metadata for Bool;
  *(_BYTE *)(v63 + 192) = 1;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v70);
  *(_QWORD *)(inited + 120) = sub_1008D5E68(v63);
  v71 = (uint64_t)v107;
  v44(v107, 5, 5, v16);
  sub_100BCB498();
  v73 = v72;
  v75 = v74;
  sub_1004B84A4(v71, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  *(_QWORD *)(inited + 128) = v73;
  *(_QWORD *)(inited + 136) = v75;
  v76 = swift_allocObject(v49, 224, 7);
  *(_OWORD *)(v76 + 16) = v110;
  v77 = aIsgridlayout_2[1];
  *(_QWORD *)(v76 + 32) = aIsgridlayout_2[0];
  *(_QWORD *)(v76 + 40) = v77;
  *(_BYTE *)(v76 + 48) = 1;
  v78 = qword_101413170;
  v79 = off_101413178;
  *(_QWORD *)(v76 + 72) = &type metadata for Bool;
  *(_QWORD *)(v76 + 80) = v78;
  *(_QWORD *)(v76 + 88) = v79;
  *(_QWORD *)(v76 + 96) = 1;
  v80 = qword_101413180;
  v81 = off_101413188;
  *(_QWORD *)(v76 + 120) = &type metadata for Int;
  *(_QWORD *)(v76 + 128) = v80;
  *(_QWORD *)(v76 + 136) = v81;
  *(_BYTE *)(v76 + 144) = 0;
  v82 = qword_101413160;
  v83 = off_101413168;
  *(_QWORD *)(v76 + 168) = &type metadata for Bool;
  *(_QWORD *)(v76 + 176) = v82;
  *(_QWORD *)(v76 + 184) = v83;
  *(_QWORD *)(v76 + 216) = &type metadata for Bool;
  *(_BYTE *)(v76 + 192) = 0;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v83);
  v84 = sub_1008D5E68(v76);
  *(_QWORD *)(inited + 144) = v84;
  v85 = (uint64_t)v108;
  v86 = &v108[*(int *)(v16 + 48)];
  UUID.init()(v84);
  *(_QWORD *)v86 = 0;
  *((_QWORD *)v86 + 1) = 0xE000000000000000;
  v44((char *)v85, 0, 5, v16);
  sub_100BCB498();
  v88 = v87;
  v90 = v89;
  sub_1004B84A4(v85, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  *(_QWORD *)(inited + 152) = v88;
  *(_QWORD *)(inited + 160) = v90;
  v91 = swift_allocObject(v109, 224, 7);
  *(_OWORD *)(v91 + 16) = v110;
  v92 = aIsgridlayout_2[1];
  *(_QWORD *)(v91 + 32) = aIsgridlayout_2[0];
  *(_QWORD *)(v91 + 40) = v92;
  *(_BYTE *)(v91 + 48) = 1;
  v93 = qword_101413170;
  v94 = off_101413178;
  *(_QWORD *)(v91 + 72) = &type metadata for Bool;
  *(_QWORD *)(v91 + 80) = v93;
  *(_QWORD *)(v91 + 88) = v94;
  *(_QWORD *)(v91 + 96) = 1;
  v95 = qword_101413180;
  v96 = off_101413188;
  *(_QWORD *)(v91 + 120) = &type metadata for Int;
  *(_QWORD *)(v91 + 128) = v95;
  *(_QWORD *)(v91 + 136) = v96;
  *(_BYTE *)(v91 + 144) = 0;
  v97 = qword_101413160;
  v98 = off_101413168;
  *(_QWORD *)(v91 + 168) = &type metadata for Bool;
  *(_QWORD *)(v91 + 176) = v97;
  *(_QWORD *)(v91 + 184) = v98;
  *(_QWORD *)(v91 + 216) = &type metadata for Bool;
  *(_BYTE *)(v91 + 192) = 0;
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v98);
  *(_QWORD *)(inited + 168) = sub_1008D5E68(v91);
  v99 = sub_1008D6810(inited);
  v100 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_100C9BFD8(v99);
  v102 = v101;
  swift_bridgeObjectRelease(v99);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v100, "registerDefaults:", isa, swift_bridgeObjectRelease(v102).n128_f64[0]);

}

uint64_t _s19AccessibilityActionOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100DAE0F4 + 4 * byte_100F38DBA[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100DAE128 + 4 * byte_100F38DB5[v4]))();
}

uint64_t sub_100DAE128(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100DAE130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100DAE138);
  return result;
}

uint64_t sub_100DAE144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100DAE14CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100DAE150(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100DAE158(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s19AccessibilityActionOMa()
{
  return &_s19AccessibilityActionON;
}

unint64_t sub_100DAE178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1014131E0;
  if (!qword_1014131E0)
  {
    v1 = sub_1004CB6A4(&qword_1014131E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1014131E0);
  }
  return result;
}

unint64_t sub_100DAE1C8()
{
  unint64_t result;

  result = qword_1014131F0;
  if (!qword_1014131F0)
  {
    result = swift_getWitnessTable(&unk_100F38FB4, &_s19AccessibilityActionON);
    atomic_store(result, (unint64_t *)&qword_1014131F0);
  }
  return result;
}

unint64_t sub_100DAE20C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101265D38, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

void sub_100DAE254(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v17 = a3;
  v16 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_sceneTitle);
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_sceneTitle + 8);
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v9 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandSetSceneTitle.swift", 95, 2, 18, "Scene's title shouldn't be empty string.", 40, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"commit(with:transaction:undoable:)", 34, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandSetSceneTitle.swift", 95, 2u, 18, (uint64_t)"Scene's title shouldn't be empty string.", 40, 2u);
  }
  sub_100DBEE64(a1, (uint64_t)&off_1012942F0);
  if (!v4)
  {
    v12 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_sceneInfo)+ OBJC_IVAR____TtC8Freeform12CRLSceneInfo_sceneID, v16);
    v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform8CRLBoard_data);
    swift_retain(v13);
    sub_100DD1CFC((uint64_t)v8, v9, v10);
    v14 = swift_release(v13);
    (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v12, v14);
    sub_100DB0D78(a1, (uint64_t)&off_1012942F0, v17);
  }
}

uint64_t sub_100DAE494()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_sceneTitle + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_actionString + 8));
}

id sub_100DAE4D8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLCommandSetSceneTitle();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLCommandSetSceneTitle()
{
  return objc_opt_self(_TtC8Freeform23CRLCommandSetSceneTitle);
}

uint64_t sub_100DAE578()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_actionString);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

id sub_100DAE5B4(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v7;
  void *v8;
  char *v9;
  id v10;
  NSString v11;
  NSString v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  objc_super v22;

  v7 = &v3[OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_actionString];
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = v3;
  v10 = objc_msgSend(v8, "mainBundle");
  v11 = String._bridgeToObjectiveC()();
  v12 = String._bridgeToObjectiveC()();
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v10, "localizedStringForKey:value:table:", v11, v12, v13);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v16 = v15;
  v18 = v17;

  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v18;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_sceneInfo] = a1;
  v19 = &v9[OBJC_IVAR____TtC8Freeform23CRLCommandSetSceneTitle_sceneTitle];
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 1) = a3;
  v20 = a1;

  v22.receiver = v9;
  v22.super_class = (Class)type metadata accessor for CRLCommandSetSceneTitle();
  return objc_msgSendSuper2(&v22, "init");
}

id sub_100DAE760()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLAnalyticsSharePlayJoined();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLAnalyticsSharePlayJoined()
{
  return objc_opt_self(_TtC8Freeform27CRLAnalyticsSharePlayJoined);
}

uint64_t type metadata accessor for CRLAnalyticsSharePlaySessionInvalidation()
{
  return objc_opt_self(_TtC8Freeform40CRLAnalyticsSharePlaySessionInvalidation);
}

id sub_100DAEB28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLAnalyticsSpatialPreview();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLAnalyticsSpatialPreview()
{
  return objc_opt_self(_TtC8Freeform26CRLAnalyticsSpatialPreview);
}

void sub_100DAEB7C(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _UNKNOWN ****v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  NSString v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  NSString v28;
  Class isa;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v4 = type metadata accessor for CRLMovieItemAssetData(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1008D5C30((uint64_t)_swiftEmptyArrayStorage);
  v8 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xC8))();
  v10 = v9;
  v11._countAndFlagsBits = sub_100BC8F78(v8, v9 & 1);
  v31 = 0x657079546D657469;
  v32 = 0xE800000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0 && v8 == 4)
  {
    v12 = type metadata accessor for CRLMovieItem(0);
    v13 = swift_dynamicCastClass(a1, v12);
    if (v13)
    {
      v14 = v13;
      v15 = a1;
      swift_bridgeObjectRelease();
      v16 = *(_UNKNOWN *****)(v14 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
      if (*v16 == &off_1013E07D8)
        v17 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
      else
        v17 = 0;
      swift_beginAccess(v17 + qword_10147E7D8, &v31, 32, 0);
      swift_retain(v16);
      v18 = sub_1004B804C(&qword_10140FCF0);
      CRRegister.wrappedValue.getter(v18);
      v19 = v6[*(int *)(v4 + 36)];
      swift_endAccess(&v31);
      sub_1004BF6D4((uint64_t)v6);
      swift_release(v16);
      if (v19)
        v20 = 0x6F69647541;
      else
        v20 = 0x6569766F4DLL;
      v31 = 0x657079546D657469;
      v32 = 0xE800000000000000;
      v21 = 0xE500000000000000;
      String.append(_:)(*(Swift::String *)&v20);
      swift_bridgeObjectRelease();

    }
  }
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31 = v7;
  sub_100826868((uint64_t)v22, 0x54746E65746E6F63, 0xEB00000000657079, isUniquelyReferenced_nonNull_native);
  v24 = v31;
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", a2 & 1);
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v31 = v24;
  sub_100826868((uint64_t)v25, 0xD00000000000001FLL, 0x8000000101011220, v26);
  swift_bridgeObjectRelease();
  v27 = (void *)objc_opt_self(CRLAnalyticsLogger);
  v28 = String._bridgeToObjectiveC()();
  sub_100511A70();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "sendEventInDomain:lazily:eventPayload:", v28, 1, isa, swift_bridgeObjectRelease().n128_f64[0]);

}

id sub_100DAEEF0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLAnalyticsSharePlayEnded();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLAnalyticsSharePlayEnded()
{
  return objc_opt_self(_TtC8Freeform26CRLAnalyticsSharePlayEnded);
}

id sub_100DAEF90()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLPasteboardSourceContext();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLPasteboardSourceContext()
{
  return objc_opt_self(_TtC8Freeform26CRLPasteboardSourceContext);
}

uint64_t sub_100DAF018()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = sub_1004B804C((uint64_t *)&unk_1013E16F0);
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRLProto_Data(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (__int128 *)((char *)&v24 - v9);
  v11 = type metadata accessor for CRLProto_EncryptedRealTimeMessage(0);
  __chkstk_darwin(v11);
  v13 = (_QWORD *)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  UnknownStorage.init()(v14);
  v25 = v11;
  v15 = (uint64_t)v13 + *(int *)(v11 + 24);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v17 = v16(v15, 1, 1, v4);
  *v13 = v0[2];
  v24 = xmmword_100EF78C0;
  *v10 = xmmword_100EF78C0;
  UnknownStorage.init()(v17);
  sub_10078F968(v15);
  sub_100552FCC((uint64_t)v10, v15);
  v26 = v16;
  v16(v15, 0, 1, v4);
  v19 = v0[3];
  v18 = v0[4];
  sub_100552F84(v15, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *(_OWORD *)v7 = v24;
    v20 = sub_1004BE310(v19, v18);
    UnknownStorage.init()(v20);
    sub_10078F968((uint64_t)v3);
  }
  else
  {
    sub_100552FCC((uint64_t)v3, (uint64_t)v7);
    sub_1004BE310(v19, v18);
  }
  sub_1004BBBC8(*(_QWORD *)v7, *((_QWORD *)v7 + 1));
  *(_QWORD *)v7 = v19;
  *((_QWORD *)v7 + 1) = v18;
  sub_10078F968(v15);
  sub_100552FCC((uint64_t)v7, v15);
  v26(v15, 0, 1, v4);
  v21 = sub_100552F3C();
  v22 = Message.serializedData(partial:)(0, v25, v21);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLProto_EncryptedRealTimeMessage);
  return v22;
}

uint64_t sub_100DAF290()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_100DAF2D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100DAFAF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100DAF2F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100DAF6BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100DAF31C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100DAF6BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t type metadata accessor for CRLEncryptedRealTimeMessage()
{
  return objc_opt_self(_TtC8Freeform27CRLEncryptedRealTimeMessage);
}

uint64_t sub_100DAF364(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  __int128 v17;

  v3 = v1;
  v5 = sub_1004B804C(&qword_101413448);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1004BB5A4(a1, v9);
  v11 = sub_100DAF6BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLEncryptedRealTimeMessage.CodingKeys, &type metadata for CRLEncryptedRealTimeMessage.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 16);
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v17, v5);
  if (!v2)
  {
    v17 = *(_OWORD *)(v3 + 24);
    v16 = 1;
    v13 = sub_100587C2C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t *sub_100DAF490(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;

  v4 = *v1;
  v16 = sub_1004B804C(&qword_101413438);
  v5 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_1004BB5A4(a1, v8);
  v10 = sub_100DAF6BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLEncryptedRealTimeMessage.CodingKeys, &type metadata for CRLEncryptedRealTimeMessage.CodingKeys, v10, v8, v9);
  if (v2)
  {
    swift_deallocPartialClassInstance(v1, v4, 40, 7);
  }
  else
  {
    v11 = v5;
    LOBYTE(v17) = 0;
    v12 = v16;
    v1[2] = KeyedDecodingContainer.decode(_:forKey:)(&v17, v16);
    v18 = 1;
    v13 = sub_100587AC0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v18, v12, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
    *(_OWORD *)(v1 + 3) = v17;
  }
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(a1);
  return v1;
}

uint64_t *sub_100DAF61C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *result;

  v6 = swift_allocObject(v2, 40, 7);
  result = sub_100DAF490(a1);
  if (!v3)
    *a2 = v6;
  return result;
}

uint64_t sub_100DAF670(_QWORD *a1)
{
  return sub_100DAF364(a1);
}

void sub_100DAF690(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16))
    sub_1007B38CC(*(_QWORD *)(*(_QWORD *)a1 + 24), *(_QWORD *)(*(_QWORD *)a1 + 32));
}

unint64_t sub_100DAF6BC()
{
  unint64_t result;

  result = qword_101413440;
  if (!qword_101413440)
  {
    result = swift_getWitnessTable(&unk_100F39248, &type metadata for CRLEncryptedRealTimeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101413440);
  }
  return result;
}

_QWORD *sub_100DAF700(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v4 = sub_1004B804C((uint64_t *)&unk_1013E16F0);
  __chkstk_darwin(v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLProto_Data(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for BinaryDecodingOptions(0, v9);
  __chkstk_darwin(v12);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRLProto_EncryptedRealTimeMessage(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v18 = sub_1004BE310(a1, a2);
  BinaryDecodingOptions.init()(v18);
  v19 = sub_100552F3C();
  v20 = v28;
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v26, 0, v14, v15, v19);
  if (v20)
    return (_QWORD *)sub_1004BBBC8(a1, a2);
  v28 = *v17;
  sub_100552F84((uint64_t)v17 + *(int *)(v15 + 24), (uint64_t)v6);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if ((_DWORD)v22 == 1)
  {
    *(_OWORD *)v11 = xmmword_100EF78C0;
    UnknownStorage.init()(v22);
    sub_10078F968((uint64_t)v6);
  }
  else
  {
    sub_100552FCC((uint64_t)v6, (uint64_t)v11);
  }
  sub_1004BBBC8(a1, a2);
  sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLProto_EncryptedRealTimeMessage);
  v23 = *v11;
  v24 = v11[1];
  sub_1004BE310(*v11, v24);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLProto_Data);
  v25 = type metadata accessor for CRLEncryptedRealTimeMessage();
  result = (_QWORD *)swift_allocObject(v25, 40, 7);
  result[2] = v28;
  result[3] = v23;
  result[4] = v24;
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLEncryptedRealTimeMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100DAF99C + 4 * byte_100F390C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100DAF9D0 + 4 * asc_100F390C0[v4]))();
}

uint64_t sub_100DAF9D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100DAF9D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100DAF9E0);
  return result;
}

uint64_t sub_100DAF9EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100DAF9F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100DAF9F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100DAFA00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLEncryptedRealTimeMessage.CodingKeys()
{
  return &type metadata for CRLEncryptedRealTimeMessage.CodingKeys;
}

unint64_t sub_100DAFA20()
{
  unint64_t result;

  result = qword_101413450;
  if (!qword_101413450)
  {
    result = swift_getWitnessTable(&unk_100F39220, &type metadata for CRLEncryptedRealTimeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101413450);
  }
  return result;
}

unint64_t sub_100DAFA68()
{
  unint64_t result;

  result = qword_101413458;
  if (!qword_101413458)
  {
    result = swift_getWitnessTable(&unk_100F39190, &type metadata for CRLEncryptedRealTimeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101413458);
  }
  return result;
}

unint64_t sub_100DAFAB0()
{
  unint64_t result;

  result = qword_101413460;
  if (!qword_101413460)
  {
    result = swift_getWitnessTable(&unk_100F391B8, &type metadata for CRLEncryptedRealTimeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101413460);
  }
  return result;
}

uint64_t sub_100DAFAF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100FEE220)
  {
    swift_bridgeObjectRelease(0x8000000100FEE220);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100FEE220, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL sub_100DAFBE0(uint64_t (*a1)(char *), _BOOL8 a2, uint64_t a3)
{
  return sub_100DAFC30(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_1013E1A50);
}

BOOL sub_100DAFC08(uint64_t (*a1)(char *), _BOOL8 a2, uint64_t a3)
{
  return sub_100DAFC30(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, (uint64_t *)&unk_101407260);
}

BOOL sub_100DAFC30(uint64_t (*a1)(char *), _BOOL8 a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t, __n128);
  int v20;
  BOOL v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t, __n128);
  _BOOL8 v35;
  uint64_t (*v36)(char *);
  uint64_t v37;

  v7 = v5;
  v35 = a2;
  v36 = a1;
  v37 = a4(0);
  v9 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v11 = (char *)&v29 - v10;
  v12 = sub_1004B804C(a5);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 + 16);
  if (v15)
  {
    v16 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v32 = *(_QWORD *)(v9 + 72);
    v33 = v11;
    v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
    v30 = a3;
    v17 = swift_bridgeObjectRetain(a3);
    while (1)
    {
      v18 = v37;
      v34(v14, v16, v37, v17);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v19)(v14, 0, 1, v18);
      v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v18);
      v21 = v20 != 1;
      if (v20 == 1)
      {
        a3 = v30;
        goto LABEL_13;
      }
      v31 = 1;
      v22 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v23 = v9;
      v24 = v33;
      v22(v33, v14, v18);
      v21 = v35;
      v25 = v36(v24);
      if (v7)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v18);
        swift_bridgeObjectRelease(v30);
        return v21;
      }
      v26 = v25;
      v27 = v19;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v18);
      if ((v26 & 1) != 0)
        break;
      v16 += v32;
      --v15;
      v7 = 0;
      v9 = v23;
      if (!v15)
      {
        a3 = v30;
        goto LABEL_9;
      }
    }
    a3 = v30;
    v21 = v31;
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56);
    v17 = swift_bridgeObjectRetain(a3);
LABEL_9:
    v27(v14, 1, 1, v37, v17);
    v21 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease(a3);
  return v21;
}

void *sub_100DAFE54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v2 = a2;
  v3 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_5;
LABEL_11:
    if (v4 > *(_QWORD *)(v2 + 16) >> 3)
      return sub_100DB78D0(v3, v2);
    goto LABEL_13;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001) == 0)
    goto LABEL_11;
LABEL_5:
  if (v2 < 0)
    v5 = v2;
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    v6 = __CocoaSet.count.getter(v5);
    v7 = sub_100ADBE80(v5, v6);
    swift_bridgeObjectRelease(v2);
    v2 = v7;
    return sub_100DB78D0(v3, v2);
  }
LABEL_13:
  sub_100DB6150(v3);
  return (void *)v2;
}

void *sub_100DAFF48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v5 = a2;
    else
      v5 = a2 & 0xFFFFFFFFFFFFFF8;
    if (v4 > __CocoaSet.count.getter(v5) / 8)
    {
      swift_bridgeObjectRetain(a2);
      v6 = __CocoaSet.count.getter(v5);
      v7 = sub_100ADC95C(v5, v6);
      swift_bridgeObjectRelease();
      a2 = v7;
      return sub_100DBA23C(v3, a2, (uint64_t (*)(uint64_t))sub_1004DD8D8, (unint64_t *)&qword_1013E1768, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100CD89C0);
    }
  }
  else if (v4 > *(_QWORD *)(a2 + 16) >> 3)
  {
    return sub_100DBA23C(v3, a2, (uint64_t (*)(uint64_t))sub_1004DD8D8, (unint64_t *)&qword_1013E1768, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100CD89C0);
  }
  sub_100DB7020(v3, (uint64_t (*)(uint64_t))sub_1004DD8D8, (unint64_t *)&qword_1013E1768, (uint64_t (*)(id, __n128))sub_100B27FBC);
  return (void *)a2;
}

void *sub_100DB005C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v5 = a2;
    else
      v5 = a2 & 0xFFFFFFFFFFFFFF8;
    if (v4 > __CocoaSet.count.getter(v5) / 8)
    {
      swift_bridgeObjectRetain(a2);
      v6 = __CocoaSet.count.getter(v5);
      v7 = sub_100ADCB20(v5, v6);
      swift_bridgeObjectRelease();
      a2 = v7;
      return sub_100DBA23C(v3, a2, type metadata accessor for CRLSceneInfo, &qword_10140B790, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100CD9104);
    }
  }
  else if (v4 > *(_QWORD *)(a2 + 16) >> 3)
  {
    return sub_100DBA23C(v3, a2, type metadata accessor for CRLSceneInfo, &qword_10140B790, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100CD9104);
  }
  sub_100DB7020(v3, type metadata accessor for CRLSceneInfo, &qword_10140B790, (uint64_t (*)(id, __n128))sub_100B29038);
  return (void *)a2;
}

void *sub_100DB0170(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v5 = a2;
    else
      v5 = a2 & 0xFFFFFFFFFFFFFF8;
    if (v4 > __CocoaSet.count.getter(v5) / 8)
    {
      swift_bridgeObjectRetain(a2);
      v6 = __CocoaSet.count.getter(v5);
      v7 = sub_100ADC314(v5, v6);
      swift_bridgeObjectRelease();
      a2 = v7;
      return sub_100DBA23C(v3, a2, type metadata accessor for CRLCollaborationParticipant, (unint64_t *)&unk_1013E8E30, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100CD9390);
    }
  }
  else if (v4 > *(_QWORD *)(a2 + 16) >> 3)
  {
    return sub_100DBA23C(v3, a2, type metadata accessor for CRLCollaborationParticipant, (unint64_t *)&unk_1013E8E30, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100CD9390);
  }
  sub_100DB7020(v3, type metadata accessor for CRLCollaborationParticipant, (unint64_t *)&unk_1013E8E30, (uint64_t (*)(id, __n128))sub_100B2748C);
  return (void *)a2;
}

uint64_t sub_100DB0284(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  void (*v32)(_BYTE *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  _QWORD *v43;

  v38 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    v7 = __CocoaSet.count.getter(v6);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
  }
  v8 = _swiftEmptyArrayStorage;
  if (!v7)
  {
LABEL_30:
    v34 = sub_100AF7994((uint64_t)v8);
    swift_bridgeObjectRelease(v8);
    return v34;
  }
  v43 = _swiftEmptyArrayStorage;
  sub_100600724(0, v7 & ~(v7 >> 63), 0);
  if (v5)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.startIndex.getter(v9);
    v12 = 1;
  }
  else
  {
    result = sub_1005C461C(a1);
    v12 = v13 & 1;
  }
  v40 = result;
  v41 = v11;
  v42 = v12;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v14 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v14 = a1;
    v36 = v2;
    v37 = v14;
    v35 = v4;
    do
    {
      while (1)
      {
        v23 = sub_1005C3F18(v40, v41, v42, a1);
        v24 = *(_QWORD *)(v23 + 24);
        ObjectType = swift_getObjectType(*(_QWORD *)(v23 + 16));
        (*(void (**)(uint64_t, uint64_t))(v24 + 32))(ObjectType, v24);
        swift_release(v23);
        v26 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        {
          sub_100600724(0, v26[2] + 1, 1);
          v26 = v43;
        }
        v28 = v26[2];
        v27 = v26[3];
        if (v28 >= v27 >> 1)
        {
          sub_100600724(v27 > 1, v28 + 1, 1);
          v26 = v43;
        }
        v26[2] = v28 + 1;
        result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v26+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v28, v4, v38);
        v43 = v26;
        if (v5)
          break;
        v15 = v40;
        v16 = v41;
        v17 = v42;
        v18 = sub_1005C3B08(v40, v41, v42, a1);
        v20 = v19;
        v22 = v21;
        sub_100503494(v15, v16, v17);
        v40 = v18;
        v41 = v20;
        v4 = v35;
        v2 = v36;
        v42 = v22 & 1;
        if (!--v7)
          goto LABEL_29;
      }
      if ((v42 & 1) == 0)
        goto LABEL_32;
      v29 = __CocoaSet.Index.handleBitPattern.getter(v40, v41);
      if (v29)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v31 = sub_1004B804C(&qword_1013EBC60);
      v32 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v39, v31);
      __CocoaSet.formIndex(after:isUnique:)(v33, isUniquelyReferenced_nonNull_native, v37);
      v32(v39, 0);
      --v7;
    }
    while (v7);
LABEL_29:
    sub_100503494(v40, v41, v42);
    v8 = v43;
    goto LABEL_30;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100DB0550(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _QWORD *v44;

  v2 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 64);
  v38 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v39 = (unint64_t)(v6 + 63) >> 6;
  v40 = a1;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  v10 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v9 << 6);
    }
    else
    {
      v16 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_36;
      if (v16 >= v39)
      {
LABEL_33:
        swift_release(v40);
        return (uint64_t)v10;
      }
      v17 = *(_QWORD *)(v38 + 8 * v16);
      ++v9;
      if (!v17)
      {
        v9 = v16 + 1;
        if (v16 + 1 >= v39)
          goto LABEL_33;
        v17 = *(_QWORD *)(v38 + 8 * v9);
        if (!v17)
        {
          v9 = v16 + 2;
          if (v16 + 2 >= v39)
            goto LABEL_33;
          v17 = *(_QWORD *)(v38 + 8 * v9);
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v39)
              goto LABEL_33;
            v17 = *(_QWORD *)(v38 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                v9 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_37;
                if (v9 >= v39)
                  goto LABEL_33;
                v17 = *(_QWORD *)(v38 + 8 * v9);
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v9 = v18;
          }
        }
      }
LABEL_21:
      v8 = (v17 - 1) & v17;
      v15 = __clz(__rbit64(v17)) + (v9 << 6);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(v40 + 48) + 8 * v15);
    v43 = *(_OWORD *)(*(_QWORD *)(v40 + 56) + 16 * v15);
    v20 = *(_QWORD *)(v19 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v19 + 16));
    v22 = *(void (**)(uint64_t, uint64_t))(v20 + 32);
    swift_retain(v19);
    v23 = v43;
    swift_unknownObjectRetain(v43);
    v22(ObjectType, v20);
    swift_unknownObjectRetain(v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    v44 = v10;
    v26 = sub_100842EFC((uint64_t)v4);
    v27 = v10[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (v10[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v10 = v44;
        if ((v25 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10082C13C();
        v10 = v44;
        if ((v30 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100813BF8(v29, isUniquelyReferenced_nonNull_native);
      v31 = sub_100842EFC((uint64_t)v4);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_38;
      v26 = v31;
      v10 = v44;
      if ((v30 & 1) != 0)
      {
LABEL_4:
        v11 = v10[7];
        v12 = 16 * v26;
        swift_unknownObjectRelease(*(_QWORD *)(v11 + v12));
        *(_OWORD *)(v11 + v12) = v43;
        goto LABEL_5;
      }
    }
    v10[(v26 >> 6) + 8] |= 1 << v26;
    (*(void (**)(unint64_t, char *, uint64_t))(v41 + 16))(v10[6] + *(_QWORD *)(v41 + 72) * v26, v4, v42);
    *(_OWORD *)(v10[7] + 16 * v26) = v43;
    v33 = v10[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_35;
    v10[2] = v35;
LABEL_5:
    v13 = swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t, __n128))(v41 + 8))(v4, v42, v13);
    swift_release(v19);
    swift_unknownObjectRelease(v23);
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

void *sub_100DB08A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain(a1);
  v3 = (uint64_t *)(v2 + 56);
  do
  {
    v4 = *(v3 - 3);
    v5 = *(v3 - 2);
    v6 = *(v3 - 1);
    v7 = *v3;
    swift_bridgeObjectRetain_n(v4, 2);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    sub_10051257C(v4);
    swift_bridgeObjectRetain(v5);
    sub_10051257C(v8);
    swift_bridgeObjectRetain(v6);
    sub_10051257C(v9);
    swift_bridgeObjectRetain(v7);
    sub_10051257C(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 += 4;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return &_swiftEmptySetSingleton;
}

uint64_t type metadata accessor for CRLTransactableHashableWrapper()
{
  return objc_opt_self(_TtC8Freeform30CRLTransactableHashableWrapper);
}

Swift::Int sub_100DB09D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  _QWORD v12[9];

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v12[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  Hasher.init(_seed:)(v12, 0);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  ObjectType = swift_getObjectType(v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
  v9 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v12, v1, v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return Hasher._finalize()();
}

uint64_t sub_100DB0AB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(*(_QWORD *)v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
  v9 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_100DB0B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  _QWORD v12[9];

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v12, a1);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(*(_QWORD *)v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
  v9 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v12, v3, v9);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return Hasher._finalize()();
}

uint64_t sub_100DB0C78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *a2;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  ObjectType = swift_getObjectType(v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(ObjectType, v13);
  v15 = *(_QWORD *)(v11 + 24);
  v16 = swift_getObjectType(*(_QWORD *)(v11 + 16));
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
  LOBYTE(v12) = static UUID.== infix(_:_:)(v10);
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v12 & 1;
}

void sub_100DB0D78(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE v46[24];
  uint64_t v47;

  v5 = v4;
  v8 = a3;
  v9 = type metadata accessor for UUID(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v8 == 2)
  {
    if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable) & 1) == 0)
      return;
    goto LABEL_11;
  }
  if ((v8 & 1) != 0)
  {
LABEL_11:
    *(_BYTE *)(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableAffectedItemSetNeedsUpdate) = 1;
    return;
  }
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable) == 1)
  {
    v12 = type metadata accessor for CRLTransactableHashableWrapper();
    ObjectType = swift_getObjectType(a1);
    v14 = swift_allocObject(v12, 32, 7);
    *(_QWORD *)(v14 + 16) = a1;
    *(_QWORD *)(v14 + 24) = a2;
    v15 = (_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications);
    swift_beginAccess(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications, v46, 0, 0);
    v16 = *v15;
    v17 = *(_QWORD *)(*v15 + 16);
    swift_unknownObjectRetain(a1);
    if (v17)
    {
      swift_retain(v14);
      swift_bridgeObjectRetain(v16);
      v18 = sub_1008430EC(v14);
      if ((v20 & 1) == 0)
      {
        swift_release_n(v14, 2, v19);
        swift_bridgeObjectRelease(v16);
        return;
      }
      v21 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 16 * v18);
      v22 = *v21;
      v43 = v21[1];
      swift_unknownObjectRetain(v22);
      swift_release(v14);
      v23 = swift_bridgeObjectRelease(v16);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 48))(ObjectType, a2, v23);
      v26 = v25;
      v27 = swift_getObjectType(v24);
      v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
      v44 = v22;
      v43 = v28(v22, v43, v27, v26);
      v29 = type metadata accessor for CRLInertOwner();
      v30 = swift_allocObject(v29, 32, 7);
      *(_QWORD *)(v30 + 16) = 0x774F207472656E49;
      *(_QWORD *)(v30 + 24) = 0xEB0000000072656ELL;
      sub_1005034A0(&qword_1013EBC48, v31, (uint64_t (*)(uint64_t))type metadata accessor for CRLInertOwner, (uint64_t)&unk_100F393B4);
      v32 = swift_unknownObjectRetain(v30);
      UUID.init()(v32);
      v33 = type metadata accessor for CRLTransactionContext(0);
      v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
      v35 = sub_1006AD81C(v30, 0, 1, (uint64_t)v11, 1, v34);
      v36 = v30;
      v37 = v43;
      v38 = swift_release(v36);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v26 + 72))(v37, v35, v27, v26, v38);
      if (v5)
      {
        swift_release(v37);
        swift_release(v35);
        swift_release(v14);
        swift_unknownObjectRelease(v44);
        swift_unknownObjectRelease(v24);
        return;
      }
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 720))(v39);
      swift_release(v40);
      swift_beginAccess(v15, v45, 33, 0);
      swift_retain(v14);
      swift_unknownObjectRetain(v24);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
      v47 = *v15;
      *v15 = 0x8000000000000000;
      sub_100825578(v24, v26, v14, isUniquelyReferenced_nonNull_native);
      v42 = *v15;
      *v15 = v47;
      swift_release(v14);
      swift_bridgeObjectRelease(v42);
      swift_endAccess(v45);
      swift_unknownObjectRelease(v24);
      swift_unknownObjectRelease(v44);
      swift_release(v37);
      swift_release(v35);
    }
    swift_release(v14);
  }
}

void sub_100DB1104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t inited;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, __n128);
  __n128 v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void (*v82)(__n128);
  __n128 v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(char *, uint64_t, uint64_t, __n128);
  __n128 v90;
  uint64_t v91;
  __n128 v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  unint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  void *v125;
  id v126;
  void *v127;
  uint64_t v128;
  void (*v129)(void);
  char *v130;
  uint64_t v131;
  double *v132;
  char *v133;
  double *v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  __n128 v138;
  void (*v139)(char *, char *, uint64_t, __n128);
  char *v140;
  _QWORD *v141;
  void (*v142)(char *, _QWORD, uint64_t, uint64_t);
  char *v143;
  char v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  void *v148;
  id v149;
  id v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __n128 v158;
  char *v159;
  int v160;
  uint64_t v161;
  __n128 v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  char *v166;
  id v167;
  __n128 v168;
  id v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t i;
  _QWORD *v178;
  void *v179;
  int64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  char *v191;
  int64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  unint64_t v207;
  int64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  void *v215;
  id v216;
  void *v217;
  void (*v218)(void);
  char *v219;
  uint64_t v220;
  double *v221;
  double *v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  __n128 v226;
  void (*v227)(char *, char *, uint64_t, __n128);
  uint64_t v228;
  char *v229;
  unsigned int (*v230)(char *, uint64_t, uint64_t);
  void (*v231)(char *, char *, uint64_t);
  char *v232;
  char v233;
  void (*v234)(char *, uint64_t);
  uint64_t v235;
  uint64_t v236;
  void *v237;
  id v238;
  _QWORD *v239;
  char *v240;
  int64_t v241;
  id v242;
  uint64_t v243;
  int64_t v244;
  uint64_t v245;
  double *v246;
  uint64_t v247;
  id v248;
  uint64_t v249;
  uint64_t v250;
  __n128 v251;
  char *v252;
  char *v253;
  int v254;
  uint64_t v255;
  __n128 v256;
  uint64_t v257;
  unint64_t v258;
  char v259;
  id v260;
  __n128 v261;
  id v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t k;
  _QWORD *v271;
  void *v272;
  int64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  __n128 v277;
  char *v278;
  id v279;
  __n128 v280;
  char *v281;
  int64_t v282;
  char *v283;
  void (*v284)(char *, char *, uint64_t);
  uint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  __int128 v289;
  uint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t v293;
  int64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  int64_t v299;
  double *v300;
  char *v301;
  double *v302;
  char *v303;
  char *j;
  uint64_t v305;
  int64_t v306;
  char *v307;
  char *v308;
  uint64_t (*v309)(char *, uint64_t, uint64_t);
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD v321[3];
  _QWORD v322[3];
  uint64_t v323;
  char v324[24];
  _QWORD v325[5];
  _QWORD v326[5];
  _QWORD v327[6];
  uint64_t v328;

  v1 = v0;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v2);
  v287 = (char *)&v283 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v310 = (char *)&v283 - v5;
  __chkstk_darwin(v6);
  v288 = (char *)&v283 - v7;
  __chkstk_darwin(v8);
  v312 = (char *)&v283 - v9;
  __chkstk_darwin(v10);
  j = (char *)&v283 - v11;
  v12 = type metadata accessor for UUID(0);
  v316 = *(_QWORD *)(v12 - 8);
  v317 = v12;
  __chkstk_darwin(v12);
  v286 = (char *)&v283 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v307 = (char *)&v283 - v15;
  __chkstk_darwin(v16);
  v314 = (char *)&v283 - v17;
  __chkstk_darwin(v18);
  v283 = (char *)&v283 - v19;
  __chkstk_darwin(v20);
  v308 = (char *)&v283 - v21;
  __chkstk_darwin(v22);
  v315 = (char *)&v283 - v23;
  __chkstk_darwin(v24);
  v301 = (char *)&v283 - v25;
  if (qword_1013DD8B8 != -1)
LABEL_214:
    swift_once(&qword_1013DD8B8, sub_100A06704);
  swift_beginAccess(&static OS_os_log.boardItemLifecycle, v324, 0, 0);
  v26 = (void *)static OS_os_log.boardItemLifecycle;
  v27 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v27, &v323);
  v289 = xmmword_100EF5E40;
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v29 = (double *)(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v30 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner + 8);
  ObjectType = swift_getObjectType(v30);
  v322[0] = v30;
  v33 = *(_QWORD *)(v31 + 8);
  v34 = v26;
  v35 = dispatch thunk of CustomStringConvertible.description.getter(ObjectType, v33);
  v37 = v36;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v35;
  *(_QWORD *)(inited + 40) = v37;
  v39 = static os_log_type_t.default.getter(v38);
  sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v39, "Calling _ensureNoOrphans() on owner: [%{public}@]", 49, 2, inited);
  swift_setDeallocating(inited);
  v40 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v40);

  v41 = *v29;
  v42 = *((_QWORD *)v29 + 1);
  v300 = v29;
  v43 = swift_getObjectType(*(_QWORD *)&v41);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v42 + 56);
  v45 = swift_unknownObjectRetain(*(_QWORD *)&v41);
  LOBYTE(v42) = v44(v43, v42, v45);
  swift_unknownObjectRelease(*(_QWORD *)&v41);
  v305 = v1;
  v46 = v317;
  if ((v42 & 1) != 0)
  {
    v47 = (_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications);
    swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, &v319, 0, 0);
    swift_bridgeObjectRetain(*v47);
    sub_100A65018(v48);
    v50 = v49;
    v51 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
    swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, &v318, 0, 0);
    v52 = *v51;
    swift_bridgeObjectRetain(*v51);
    sub_100CA0104(v50, v52);
    v54 = v53;
    if ((v53 & 0xC000000000000001) != 0)
    {
      if (v53 >= 0)
        v53 &= 0xFFFFFFFFFFFFFF8uLL;
      v55 = __CocoaSet.makeIterator()(v53);
      v56 = type metadata accessor for CRLTransactableHashableWrapper();
      v58 = sub_1005034A0((unint64_t *)&qword_101405D90, v57, (uint64_t (*)(uint64_t))type metadata accessor for CRLTransactableHashableWrapper, (uint64_t)&unk_100F393F8);
      v53 = (uint64_t)Set.Iterator.init(_cocoa:)(v325, v55, v56, v58);
      v54 = v325[0];
      v309 = (uint64_t (*)(char *, uint64_t, uint64_t))v325[1];
      v59 = v325[2];
      v1 = v325[3];
      v60 = v325[4];
    }
    else
    {
      v1 = 0;
      v61 = -1 << *(_BYTE *)(v53 + 32);
      v62 = *(_QWORD *)(v53 + 56);
      v309 = (uint64_t (*)(char *, uint64_t, uint64_t))(v53 + 56);
      v63 = ~v61;
      v64 = -v61;
      if (v64 < 64)
        v65 = ~(-1 << v64);
      else
        v65 = -1;
      v60 = v65 & v62;
      v59 = v63;
    }
    v66 = v316;
    v67 = (uint64_t)j;
    v303 = (char *)(v54 & 0x7FFFFFFFFFFFFFFFLL);
    v298 = v59;
    v306 = (unint64_t)(v59 + 64) >> 6;
    v302 = (double *)((char *)&type metadata for Swift.AnyObject + 8);
    v299 = v54;
    while (1)
    {
      if (v54 < 0)
      {
        v71 = __CocoaSet.Iterator.next()(v53);
        if (!v71)
          goto LABEL_41;
        v72 = v71;
        v321[0] = v71;
        v73 = type metadata accessor for CRLTransactableHashableWrapper();
        swift_unknownObjectRetain(v72);
        swift_dynamicCast(v322, v321, v302, v73, 7);
        v74 = v322[0];
        swift_unknownObjectRelease(v72);
        v70 = v1;
        v68 = v60;
        if (!v74)
          goto LABEL_41;
      }
      else
      {
        if (v60)
        {
          v68 = (v60 - 1) & v60;
          v69 = __clz(__rbit64(v60)) | (v1 << 6);
          v70 = v1;
        }
        else
        {
          v75 = v1 + 1;
          if (__OFADD__(v1, 1))
          {
LABEL_213:
            __break(1u);
            goto LABEL_214;
          }
          if (v75 >= v306)
            goto LABEL_41;
          v76 = *((_QWORD *)v309 + v75);
          v70 = v1 + 1;
          if (!v76)
          {
            v70 = v1 + 2;
            if (v1 + 2 >= v306)
              goto LABEL_41;
            v76 = *((_QWORD *)v309 + v70);
            if (!v76)
            {
              v70 = v1 + 3;
              if (v1 + 3 >= v306)
                goto LABEL_41;
              v76 = *((_QWORD *)v309 + v70);
              if (!v76)
              {
                v70 = v1 + 4;
                if (v1 + 4 >= v306)
                  goto LABEL_41;
                v76 = *((_QWORD *)v309 + v70);
                if (!v76)
                {
                  v77 = v1 + 5;
                  while (v306 != v77)
                  {
                    v76 = *((_QWORD *)v309 + v77++);
                    if (v76)
                    {
                      v70 = v77 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_41:
                  sub_1004D284C(v54);
                  v46 = v317;
                  v1 = v305;
                  break;
                }
              }
            }
          }
LABEL_32:
          v68 = (v76 - 1) & v76;
          v69 = __clz(__rbit64(v76)) + (v70 << 6);
        }
        v74 = *(_QWORD *)(*(_QWORD *)(v54 + 48) + 8 * v69);
        swift_retain(v74);
        if (!v74)
          goto LABEL_41;
      }
      v78 = *(_QWORD *)(v74 + 16);
      v79 = type metadata accessor for CRLBoardItem(0);
      v80 = (_QWORD *)swift_dynamicCastClass(v78, v79);
      if (v80)
      {
        v81 = v80;
        v311 = v68;
        v313 = v70;
        v82 = *(void (**)(__n128))((swift_isaMask & *v80) + 0xB8);
        v83 = swift_unknownObjectRetain(v78);
        v82(v83);
        v84 = v317;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v67, 1, v317) == 1)
        {
          swift_release(v74);
          swift_unknownObjectRelease(v78);
          v53 = sub_1004CB800(v67, (uint64_t *)&unk_1013E1A50);
          v1 = v313;
          v60 = v311;
        }
        else
        {
          v85 = v301;
          (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v301, v67, v84);
          v86 = *(_QWORD *)v300;
          v87 = *((_QWORD *)v300 + 1);
          v88 = swift_getObjectType(*(_QWORD *)v300);
          v89 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v87 + 16);
          v90 = swift_unknownObjectRetain(v86);
          v91 = v89(v85, v88, v87, v90);
          swift_unknownObjectRelease(v86);
          v92 = swift_unknownObjectRelease(v91);
          if (v91)
          {
            v66 = v316;
            (*(void (**)(char *, uint64_t, __n128))(v316 + 8))(v85, v84, v92);
            swift_release(v74);
            swift_unknownObjectRelease(v78);
          }
          else
          {
            swift_unknownObjectRetain(v78);
            sub_100DBC500(v81, 1uLL, 1, v305);
            swift_release(v74);
            swift_unknownObjectRelease_n(v78, 2);
            v66 = v316;
            v53 = (*(uint64_t (**)(char *, uint64_t))(v316 + 8))(v85, v84);
          }
          v1 = v313;
          v60 = v311;
          v67 = (uint64_t)j;
          v54 = v299;
        }
      }
      else
      {
        swift_release(v74);
        v1 = v70;
        v60 = v68;
      }
    }
  }
  v93 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v322, 0, 0);
  v94 = *v93;
  if ((*v93 & 0xC000000000000001) != 0)
  {
    if (v94 < 0)
      v95 = *v93;
    else
      v95 = v94 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v93);
    v96 = __CocoaSet.makeIterator()(v95);
    v97 = type metadata accessor for CRLTransactableHashableWrapper();
    v99 = sub_1005034A0((unint64_t *)&qword_101405D90, v98, (uint64_t (*)(uint64_t))type metadata accessor for CRLTransactableHashableWrapper, (uint64_t)&unk_100F393F8);
    v100 = Set.Iterator.init(_cocoa:)(v326, v96, v97, v99);
    v94 = v326[0];
    v295 = v326[1];
    v101 = v326[2];
    v102 = v326[3];
    v103 = v326[4];
  }
  else
  {
    v104 = -1 << *(_BYTE *)(v94 + 32);
    v105 = *(_QWORD *)(v94 + 56);
    v295 = v94 + 56;
    v106 = ~v104;
    v107 = -v104;
    if (v107 < 64)
      v108 = ~(-1 << v107);
    else
      v108 = -1;
    v103 = v108 & v105;
    swift_bridgeObjectRetain(v94);
    v101 = v106;
    v102 = 0;
  }
  v109 = v310;
  v110 = v316;
  v285 = v101;
  v293 = v94 & 0x7FFFFFFFFFFFFFFFLL;
  v294 = (unint64_t)(v101 + 64) >> 6;
  v292 = (char *)&type metadata for Swift.AnyObject + 8;
  v296 = (char *)v94;
  while ((v94 & 0x8000000000000000) == 0)
  {
    if (v103)
    {
      v1 = (v103 - 1) & v103;
      v111 = __clz(__rbit64(v103)) | (v102 << 6);
      v112 = v102;
    }
    else
    {
      v112 = v102 + 1;
      if (__OFADD__(v102, 1))
      {
        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      if (v112 >= v294)
        goto LABEL_121;
      v118 = *(_QWORD *)(v295 + 8 * v112);
      v1 = v305;
      if (!v118)
      {
        v119 = v102 + 2;
        if (v102 + 2 >= v294)
          goto LABEL_122;
        v118 = *(_QWORD *)(v295 + 8 * v119);
        if (v118)
          goto LABEL_66;
        v119 = v102 + 3;
        if (v102 + 3 >= v294)
          goto LABEL_122;
        v118 = *(_QWORD *)(v295 + 8 * v119);
        if (v118)
        {
LABEL_66:
          v112 = v119;
        }
        else
        {
          v112 = v102 + 4;
          if (v102 + 4 >= v294)
            goto LABEL_122;
          v118 = *(_QWORD *)(v295 + 8 * v112);
          if (!v118)
          {
            v180 = v102 + 5;
            do
            {
              if (v294 == v180)
                goto LABEL_122;
              v118 = *(_QWORD *)(v295 + 8 * v180++);
            }
            while (!v118);
            v112 = v180 - 1;
          }
        }
      }
      v1 = (v118 - 1) & v118;
      v111 = __clz(__rbit64(v118)) + (v112 << 6);
    }
    v117 = *(_QWORD *)(*(_QWORD *)(v94 + 48) + 8 * v111);
    swift_retain(v117);
    if (!v117)
      goto LABEL_121;
LABEL_69:
    v301 = (char *)v103;
    v302 = (double *)v102;
    v306 = v112;
    v120 = *(_QWORD *)(v117 + 16);
    v121 = type metadata accessor for CRLBoardItem(0);
    v122 = swift_dynamicCastClass(v120, v121);
    if (v122)
    {
      v123 = (_QWORD *)v122;
      v124 = type metadata accessor for CRLContainerItem(0);
      v125 = (void *)swift_dynamicCastClass(v123, v124);
      swift_unknownObjectRetain_n(v120, 2);
      if (v125)
        sub_100DB3C60(v125, 0);
      v126 = objc_msgSend(v123, "parentContainerItem");
      if (v126)
      {
        v127 = v126;
        v299 = v117;
        j = (char *)v1;
        v128 = v120;
        v129 = *(void (**)(void))((swift_isaMask & *v123) + 0x88);
        v298 = v128;
        swift_unknownObjectRetain(v128);
        v130 = v127;
        v129();
        v131 = OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItemUUIDs;
        v303 = v130;
        v132 = *(double **)&v130[OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItemUUIDs];
        if (!v132)
        {
          v133 = v303;
          sub_100740DA4();
          v132 = *(double **)&v133[v131];
        }
        if (v132)
          v134 = v132;
        else
          v134 = _swiftEmptyArrayStorage;
        v135 = *((_QWORD *)v134 + 2);
        v300 = v134;
        if (v135)
        {
          v136 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
          v290 = *(unsigned __int8 *)(v110 + 80);
          v291 = v136;
          v137 = (char *)v134 + v136;
          swift_bridgeObjectRetain(v132);
          v138 = swift_bridgeObjectRetain(v134);
          v311 = *(_QWORD *)(v110 + 72);
          v139 = *(void (**)(char *, char *, uint64_t, __n128))(v110 + 16);
          v140 = v312;
          while (1)
          {
            v139(v140, v137, v46, v138);
            v141 = (_QWORD *)v316;
            v142 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v316 + 56);
            v142(v140, 0, 1, v46);
            v1 = v141[6];
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v1)(v140, 1, v46) == 1)
              goto LABEL_88;
            v309 = (uint64_t (*)(char *, uint64_t, uint64_t))v1;
            v313 = (uint64_t)v142;
            v1 = v141[4];
            v143 = v308;
            ((void (*)(char *, char *, uint64_t))v1)(v308, v140, v46);
            sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v144 = dispatch thunk of static Equatable.== infix(_:_:)(v143, v315);
            v145 = (void (*)(char *, uint64_t))v141[1];
            v145(v143, v46);
            if ((v144 & 1) != 0)
              break;
            v140 = v312;
            v137 += v311;
            --v135;
            v46 = v317;
            if (!v135)
              goto LABEL_87;
          }
          v284 = (void (*)(char *, char *, uint64_t))v1;
          swift_bridgeObjectRelease_n(v300, 2);
          v151 = sub_1004B804C(&qword_1013E77A8);
          v152 = v291;
          v153 = swift_allocObject(v151, v311 + v291, v290 | 7);
          *(_OWORD *)(v153 + 16) = v289;
          v154 = (char *)(v153 + v152);
          v155 = v317;
          ((void (*)(unint64_t, char *, uint64_t))v139)(v153 + v152, v315, v317);
          v156 = v297;
          sub_100DBEE64((uint64_t)v303, (uint64_t)&off_10127C5E0);
          v297 = v156;
          if (!v156)
          {
            v321[0] = _swiftEmptyArrayStorage;
            v157 = OBJC_IVAR____TtC8Freeform16CRLContainerItem_items;
            v158 = swift_bridgeObjectRetain(v153);
            v159 = v288;
            v139(v288, v154, v155, v158);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v313)(v159, 0, 1, v155);
            v160 = v309(v159, 1, v155);
            v1 = v305;
            v311 = v153;
            if (v160 == 1)
              goto LABEL_101;
            v161 = (uint64_t)v283;
            v284(v283, v159, v317);
            v163 = *(_QWORD *)&v303[v157];
            if (*(_QWORD *)(v163 + 16))
            {
              swift_bridgeObjectRetain(v163);
              v164 = sub_100842EFC(v161);
              if ((v165 & 1) != 0)
              {
                v166 = v154;
                v167 = *(id *)(*(_QWORD *)(v163 + 56) + 8 * v164);
                v168 = swift_bridgeObjectRelease();
                ((void (*)(uint64_t, uint64_t, __n128))v145)(v161, v317, v168);
                v169 = v167;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v169);
                v171 = *(_QWORD *)((v321[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
                v170 = *(_QWORD *)((v321[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v171 >= v170 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v170 > 1, v171 + 1, 1);
                v172 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v171, v169);
                specialized Array._endMutation()(v172);

                v173 = v317;
                v153 = v311;
                v154 = v166;
LABEL_100:
                ((void (*)(char *, uint64_t, uint64_t, uint64_t))v313)(v159, 1, 1, v173);
LABEL_101:
                swift_bridgeObjectRelease();
                v174 = v297;
                sub_100745B54(v153);
                if (!v174)
                {
                  v313 = (uint64_t)v154;
                  v175 = v321[0];
                  if (v321[0] >> 62)
                  {
                    if (v321[0] < 0)
                      v181 = v321[0];
                    else
                      v181 = v321[0] & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(v321[0]);
                    v176 = _CocoaArrayWrapper.endIndex.getter(v181);
                    swift_bridgeObjectRelease();
                    if (v176)
                    {
LABEL_104:
                      if (v176 < 1)
                      {
                        __break(1u);
LABEL_216:
                        __break(1u);
                        return;
                      }
                      for (i = 0; i != v176; ++i)
                      {
                        if ((v175 & 0xC000000000000001) != 0)
                          v178 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v175);
                        else
                          v178 = *(id *)(v175 + 8 * i + 32);
                        v179 = v178;
                        sub_100DBC500(v178, 0, 0, v1);

                      }
                    }
                  }
                  else
                  {
                    v176 = *(_QWORD *)((v321[0] & 0xFFFFFFFFFFFFF8) + 0x10);
                    if (v176)
                      goto LABEL_104;
                  }
                  swift_bridgeObjectRelease();
                  sub_100DB0D78((uint64_t)v303, (uint64_t)&off_10127C5E0, 2u);
                  v297 = 0;
                  v182 = v311;
                  swift_setDeallocating(v311);
                  v46 = v317;
                  swift_arrayDestroy(v313, *(_QWORD *)(v182 + 16), v317);
                  swift_deallocClassInstance(v182, 32, 7);
                  goto LABEL_89;
                }
                v297 = v174;
                swift_bridgeObjectRelease();
                v277 = swift_bridgeObjectRelease();
                v278 = v296;
LABEL_207:
                ((void (*)(char *, uint64_t, __n128))v145)(v315, v317, v277);
                swift_release(v299);
                swift_unknownObjectRelease_n(v298, 3);
                v279 = v303;

                v276 = (uint64_t)v278;
                goto LABEL_203;
              }
              v162 = swift_bridgeObjectRelease();
            }
            v173 = v317;
            ((void (*)(uint64_t, uint64_t, __n128))v145)(v161, v317, v162);
            v153 = v311;
            goto LABEL_100;
          }
          v277 = swift_bridgeObjectRelease();
          v278 = v296;
          goto LABEL_207;
        }
        swift_bridgeObjectRetain(v132);
        swift_bridgeObjectRetain(v134);
        v313 = *(_QWORD *)(v110 + 56);
        v140 = v312;
LABEL_87:
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v313)(v140, 1, 1, v46);
LABEL_88:
        swift_bridgeObjectRelease_n(v300, 2);
LABEL_89:
        v94 = (uint64_t)v296;
        v110 = v316;
        (*(void (**)(char *, uint64_t))(v316 + 8))(v315, v46);
        swift_release(v299);
        swift_unknownObjectRelease_n(v298, 3);
        v150 = v303;

        v102 = v306;
        v103 = (unint64_t)j;
        v109 = v310;
      }
      else
      {
        swift_release(v117);
        v100 = (_QWORD *)swift_unknownObjectRelease_n(v120, 2);
        v102 = v306;
        v103 = v1;
        v94 = (uint64_t)v296;
      }
    }
    else
    {
      v146 = type metadata accessor for CRLBoard(0);
      v147 = swift_dynamicCastClass(v120, v146);
      if (v147)
      {
        v148 = *(void **)(v147 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
        swift_unknownObjectRetain(v120);
        v149 = v148;
        j = (char *)v1;
        v1 = v94;
        sub_100DB3C60(v149, 0);
        swift_release(v117);
        swift_unknownObjectRelease(v120);

        v102 = v306;
        v103 = (unint64_t)j;
      }
      else
      {
        swift_release(v117);
        v102 = v306;
        v103 = v1;
      }
    }
  }
  v113 = __CocoaSet.Iterator.next()(v100);
  if (v113)
  {
    v114 = v113;
    v328 = v113;
    v115 = type metadata accessor for CRLTransactableHashableWrapper();
    swift_unknownObjectRetain(v114);
    swift_dynamicCast(v321, &v328, v292, v115, 7);
    v116 = v114;
    v117 = v321[0];
    swift_unknownObjectRelease(v116);
    v112 = v102;
    v1 = v103;
    if (v117)
      goto LABEL_69;
  }
LABEL_121:
  v1 = v305;
LABEL_122:
  sub_1004D284C(v94);
  v183 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects, v321, 0, 0);
  v184 = *v183;
  if ((*v183 & 0xC000000000000001) != 0)
  {
    if (v184 < 0)
      v185 = *v183;
    else
      v185 = v184 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v183);
    v186 = __CocoaSet.makeIterator()(v185);
    v187 = type metadata accessor for CRLTransactableHashableWrapper();
    v189 = sub_1005034A0((unint64_t *)&qword_101405D90, v188, (uint64_t (*)(uint64_t))type metadata accessor for CRLTransactableHashableWrapper, (uint64_t)&unk_100F393F8);
    v190 = Set.Iterator.init(_cocoa:)(v327, v186, v187, v189);
    v184 = v327[0];
    v300 = (double *)v327[1];
    v191 = (char *)v327[2];
    v192 = v327[3];
    v193 = v327[4];
  }
  else
  {
    v194 = -1 << *(_BYTE *)(v184 + 32);
    v195 = *(_QWORD *)(v184 + 56);
    v300 = (double *)(v184 + 56);
    v196 = ~v194;
    v197 = -v194;
    if (v197 < 64)
      v198 = ~(-1 << v197);
    else
      v198 = -1;
    v199 = v198 & v195;
    swift_bridgeObjectRetain(v184);
    v191 = (char *)v196;
    v193 = v199;
    v192 = 0;
  }
  v292 = v191;
  v298 = v184 & 0x7FFFFFFFFFFFFFFFLL;
  v299 = (unint64_t)(v191 + 64) >> 6;
  v296 = (char *)&type metadata for Swift.AnyObject + 8;
  for (j = (char *)v184; ; v184 = (uint64_t)j)
  {
LABEL_134:
    v308 = (char *)v193;
    if (v184 < 0)
    {
      v203 = __CocoaSet.Iterator.next()(v190);
      if (!v203)
        goto LABEL_202;
      v204 = v203;
      v320 = v203;
      v205 = type metadata accessor for CRLTransactableHashableWrapper();
      swift_unknownObjectRetain(v204);
      swift_dynamicCast(&v328, &v320, v296, v205, 7);
      v206 = v328;
      swift_unknownObjectRelease(v204);
      v202 = v192;
      v200 = (uint64_t)v308;
      if (!v206)
        goto LABEL_202;
    }
    else
    {
      if (v193)
      {
        v200 = (v193 - 1) & v193;
        v201 = __clz(__rbit64(v193)) | (v192 << 6);
        v202 = v192;
      }
      else
      {
        v202 = v192 + 1;
        if (__OFADD__(v192, 1))
          goto LABEL_212;
        if (v202 >= v299)
        {
LABEL_202:
          v276 = v184;
          goto LABEL_203;
        }
        v207 = *(_QWORD *)&v300[v202];
        if (!v207)
        {
          v208 = v192 + 2;
          if (v192 + 2 >= v299)
            goto LABEL_202;
          v207 = *(_QWORD *)&v300[v208];
          if (v207)
            goto LABEL_147;
          v208 = v192 + 3;
          if (v192 + 3 >= v299)
            goto LABEL_202;
          v207 = *(_QWORD *)&v300[v208];
          if (v207)
          {
LABEL_147:
            v202 = v208;
          }
          else
          {
            v202 = v192 + 4;
            if (v192 + 4 >= v299)
              goto LABEL_202;
            v207 = *(_QWORD *)&v300[v202];
            if (!v207)
            {
              v273 = v192 + 5;
              do
              {
                if (v299 == v273)
                  goto LABEL_202;
                v207 = *(_QWORD *)&v300[v273++];
              }
              while (!v207);
              v202 = v273 - 1;
            }
          }
        }
        v200 = (v207 - 1) & v207;
        v201 = __clz(__rbit64(v207)) + (v202 << 6);
      }
      v206 = *(_QWORD *)(*(_QWORD *)(v184 + 48) + 8 * v201);
      swift_retain(v206);
      if (!v206)
        goto LABEL_202;
    }
    v209 = v1;
    v311 = v202;
    v210 = *(_QWORD **)(v206 + 16);
    v211 = type metadata accessor for CRLBoardItem(0);
    v212 = swift_dynamicCastClass(v210, v211);
    if (v212)
      break;
    v235 = type metadata accessor for CRLBoard(0);
    v236 = swift_dynamicCastClass(v210, v235);
    if (!v236)
    {
      swift_release(v206);
      goto LABEL_133;
    }
    v237 = *(void **)(v236 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
    swift_unknownObjectRetain(v210);
    v238 = v237;
    sub_100DB3C60(v238, 1);
    swift_release(v206);
    v239 = v210;
    v1 = v209;
    swift_unknownObjectRelease(v239);

    v192 = v311;
    v193 = v200;
  }
  v213 = (_QWORD *)v212;
  v306 = v206;
  v214 = type metadata accessor for CRLContainerItem(0);
  v215 = (void *)swift_dynamicCastClass(v213, v214);
  v309 = (uint64_t (*)(char *, uint64_t, uint64_t))v210;
  swift_unknownObjectRetain_n(v210, 2);
  if (v215)
    sub_100DB3C60(v215, 1);
  v216 = objc_msgSend(v213, "parentContainerItem");
  if (!v216)
  {
    swift_release(v306);
    v190 = (_QWORD *)swift_unknownObjectRelease_n(v309, 2);
LABEL_133:
    v192 = v311;
    v193 = v200;
    v1 = v209;
    v184 = (uint64_t)j;
    goto LABEL_134;
  }
  v217 = v216;
  v301 = (char *)v200;
  v295 = v192;
  v218 = *(void (**)(void))((swift_isaMask & *v213) + 0x88);
  swift_unknownObjectRetain(v309);
  v219 = v217;
  v218();
  v220 = OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItemUUIDs;
  v221 = *(double **)&v219[OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItemUUIDs];
  if (!v221)
  {
    sub_100740DA4();
    v221 = *(double **)&v219[v220];
  }
  v303 = v219;
  if (v221)
    v222 = v221;
  else
    v222 = _swiftEmptyArrayStorage;
  v223 = *((_QWORD *)v222 + 2);
  v302 = v222;
  if (!v223)
  {
    swift_bridgeObjectRetain(v221);
    swift_bridgeObjectRetain(v222);
    v315 = *(char **)(v110 + 56);
LABEL_168:
    v228 = v317;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v315)(v109, 1, 1, v317);
LABEL_169:
    swift_bridgeObjectRelease_n(v302, 2);
    v240 = j;
    v1 = v305;
    v241 = v306;
    v242 = v303;
    goto LABEL_170;
  }
  v224 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
  v293 = *(unsigned __int8 *)(v110 + 80);
  v294 = v224;
  v225 = (char *)v222 + v224;
  swift_bridgeObjectRetain(v221);
  v226 = swift_bridgeObjectRetain(v222);
  v313 = *(_QWORD *)(v110 + 72);
  v227 = *(void (**)(char *, char *, uint64_t, __n128))(v110 + 16);
  while (1)
  {
    v228 = v317;
    v227(v109, v225, v317, v226);
    v229 = *(char **)(v110 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v229)(v109, 0, 1, v228);
    v230 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
    if (v230(v109, 1, v228) == 1)
      goto LABEL_169;
    v312 = (char *)v230;
    v315 = v229;
    v231 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
    v232 = v307;
    v231(v307, v109, v228);
    sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v233 = dispatch thunk of static Equatable.== infix(_:_:)(v232, v314);
    v234 = *(void (**)(char *, uint64_t))(v110 + 8);
    v234(v232, v228);
    if ((v233 & 1) != 0)
      break;
    v225 += v313;
    --v223;
    v109 = v310;
    v110 = v316;
    if (!v223)
      goto LABEL_168;
  }
  swift_bridgeObjectRelease_n(v302, 2);
  v243 = sub_1004B804C(&qword_1013E77A8);
  v244 = v294;
  v245 = swift_allocObject(v243, v313 + v294, v293 | 7);
  *(_OWORD *)(v245 + 16) = v289;
  v246 = (double *)(v245 + v244);
  v247 = v317;
  ((void (*)(uint64_t, char *, uint64_t))v227)(v245 + v244, v314, v317);
  v248 = v303;
  v249 = v297;
  sub_100DBEE64((uint64_t)v303, (uint64_t)&off_10127C5E0);
  v297 = v249;
  if (v249)
    goto LABEL_210;
  v328 = (uint64_t)_swiftEmptyArrayStorage;
  v250 = OBJC_IVAR____TtC8Freeform16CRLContainerItem_items;
  v313 = v245;
  v251 = swift_bridgeObjectRetain(v245);
  v252 = v287;
  v302 = v246;
  v227(v287, (char *)v246, v247, v251);
  v253 = v315;
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v315)(v252, 0, 1, v247);
  v254 = ((uint64_t (*)(char *, uint64_t, uint64_t))v312)(v252, 1, v247);
  v1 = v305;
  v255 = (uint64_t)v286;
  if (v254 == 1)
    goto LABEL_182;
  v231(v286, v252, v247);
  v257 = *(_QWORD *)&v303[v250];
  if (!*(_QWORD *)(v257 + 16))
  {
LABEL_180:
    ((void (*)(uint64_t, uint64_t, __n128))v234)(v255, v247, v256);
    goto LABEL_181;
  }
  swift_bridgeObjectRetain(v257);
  v258 = sub_100842EFC(v255);
  if ((v259 & 1) == 0)
  {
    v256 = swift_bridgeObjectRelease();
    goto LABEL_180;
  }
  v260 = *(id *)(*(_QWORD *)(v257 + 56) + 8 * v258);
  v261 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, __n128))v234)(v255, v247, v261);
  v262 = v260;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v262);
  v264 = *(_QWORD *)((v328 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v263 = *(_QWORD *)((v328 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v264 >= v263 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v263 > 1, v264 + 1, 1);
  v265 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v264, v262);
  specialized Array._endMutation()(v265);

  v247 = v317;
LABEL_181:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v253)(v252, 1, 1, v247);
LABEL_182:
  v266 = v313;
  swift_bridgeObjectRelease();
  v248 = v303;
  v267 = v297;
  sub_100745B54(v266);
  if (!v267)
  {
    v268 = v328;
    if ((unint64_t)v328 >> 62)
    {
      if (v328 < 0)
        v274 = v328;
      else
        v274 = v328 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v328);
      v269 = _CocoaArrayWrapper.endIndex.getter(v274);
      swift_bridgeObjectRelease();
      if (v269)
      {
LABEL_185:
        if (v269 < 1)
          goto LABEL_216;
        for (k = 0; k != v269; ++k)
        {
          if ((v268 & 0xC000000000000001) != 0)
            v271 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(k, v268);
          else
            v271 = *(id *)(v268 + 8 * k + 32);
          v272 = v271;
          sub_100DBC500(v271, 0, 0, v1);

        }
      }
    }
    else
    {
      v269 = *(_QWORD *)((v328 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v269)
        goto LABEL_185;
    }
    swift_bridgeObjectRelease();
    v242 = v303;
    sub_100DB0D78((uint64_t)v303, (uint64_t)&off_10127C5E0, 2u);
    v297 = 0;
    v275 = v313;
    swift_setDeallocating(v313);
    v228 = v317;
    swift_arrayDestroy(v302, *(_QWORD *)(v275 + 16), v317);
    swift_deallocClassInstance(v275, 32, 7);
    v109 = v310;
    v110 = v316;
    v240 = j;
    v241 = v306;
LABEL_170:
    (*(void (**)(char *, uint64_t))(v110 + 8))(v314, v228);
    swift_release(v241);
    swift_unknownObjectRelease_n(v309, 3);

    v192 = v311;
    v193 = (unint64_t)v301;
    v184 = (uint64_t)v240;
    goto LABEL_134;
  }
  v297 = v267;
  swift_bridgeObjectRelease();
LABEL_210:
  v280 = swift_bridgeObjectRelease();
  v281 = j;
  v282 = v306;
  ((void (*)(char *, uint64_t, __n128))v234)(v314, v247, v280);
  swift_release(v282);
  swift_unknownObjectRelease_n(v309, 3);

  v276 = (uint64_t)v281;
LABEL_203:
  sub_1004D284C(v276);
}

_QWORD *sub_100DB2B18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v9;
  uint64_t v10;
  void *v11;

  v3 = v0;
  sub_100DB1104();
  if (!v1)
  {
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable) == 1)
    {
      v4 = type metadata accessor for CRLUndoingAction();
      v2 = (_QWORD *)swift_allocObject(v4, 40, 7);
      v2[2] = _swiftEmptyDictionarySingleton;
      v2[3] = &_swiftEmptySetSingleton;
      v2[4] = &_swiftEmptySetSingleton;
    }
    else
    {
      v2 = 0;
    }
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_dirtiesOwner) == 1)
    {
      v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
      v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner + 8);
      ObjectType = swift_getObjectType(*(_QWORD *)(v3
                                                 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner));
      v8 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 40);
      v9 = swift_unknownObjectRetain(v5);
      v8(v3, ObjectType, v6, v9);
      swift_unknownObjectRelease(v5);
    }
    v10 = sub_100DB2C28((uint64_t)v2, 1);
    v11 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext__observableDelta);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext__observableDelta) = v10;

    *(_BYTE *)(v3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_active) = 0;
  }
  return v2;
}

uint64_t sub_100DB2C28(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  int64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  char v76;
  uint64_t v77;
  void (*v78)(int64_t, uint64_t);
  __n128 v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  Swift::Int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, __n128);
  __n128 v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  char v138;
  unint64_t v139;
  _BOOL8 v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __n128 v150;
  uint64_t result;
  CKRecordID v152;
  Swift::String v153;
  uint64_t v154;
  char *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  int64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  int64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  void (*v179)(int64_t, uint64_t);
  int64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char v184[24];
  uint64_t v185;
  _QWORD *v186;
  _BYTE v187[12];
  char v188[8];
  char v189;
  uint64_t v190;
  char v191[8];
  _QWORD v192[5];

  v183 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v183 - 8);
  v6 = __chkstk_darwin(v183);
  v175 = (uint64_t)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v176 = (char *)&v154 - v9;
  __chkstk_darwin(v8);
  v181 = (char *)&v154 - v10;
  v155 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLObservableDelta()), "init");
  if (a1)
  {
    v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v184, 0, 0);
    v12 = *v11;
    swift_retain(v2);
    swift_bridgeObjectRetain(v12);
    v14 = sub_100DBFD64(v13, v2);
    swift_release(v2);
    v15 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v14;
    swift_bridgeObjectRelease(v15);
  }
  v166 = 0;
  v167 = a2;
  v16 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableCreatedObjects);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableCreatedObjects, v191, 0, 0);
  v161 = v16;
  v17 = *v16;
  v160 = v2;
  v158 = v5;
  if ((v17 & 0xC000000000000001) != 0)
  {
    if (v17 < 0)
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v19 = __CocoaSet.makeIterator()(v18);
    v20 = type metadata accessor for CRLTransactableHashableWrapper();
    v22 = sub_1005034A0((unint64_t *)&qword_101405D90, v21, (uint64_t (*)(uint64_t))type metadata accessor for CRLTransactableHashableWrapper, (uint64_t)&unk_100F393F8);
    v23 = Set.Iterator.init(_cocoa:)(v192, v19, v20, v22);
    v17 = v192[0];
    v182 = v192[1];
    v24 = v192[2];
    v25 = v192[3];
    v26 = v192[4];
  }
  else
  {
    v27 = -1 << *(_BYTE *)(v17 + 32);
    v28 = *(_QWORD *)(v17 + 56);
    v182 = v17 + 56;
    v24 = ~v27;
    v29 = -v27;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    else
      v30 = -1;
    v26 = v30 & v28;
    swift_bridgeObjectRetain(v17);
    v25 = 0;
  }
  v179 = (void (*)(int64_t, uint64_t))(v17 & 0x7FFFFFFFFFFFFFFFLL);
  v177 = v24;
  v180 = (unint64_t)(v24 + 64) >> 6;
  v164 = a1;
  v31 = a1 + 24;
  v32 = (unint64_t)&type metadata for Swift.AnyObject + 8;
  v178 = (char *)&type metadata for Swift.AnyObject + 8;
  while (v17 < 0)
  {
    v36 = __CocoaSet.Iterator.next()(v23);
    if (!v36)
      goto LABEL_39;
    v37 = v36;
    v190 = v36;
    v38 = type metadata accessor for CRLTransactableHashableWrapper();
    swift_unknownObjectRetain(v37);
    swift_dynamicCast(&v185, &v190, v178, v38, 7);
    v39 = v185;
    swift_unknownObjectRelease(v37);
    v35 = v25;
    v33 = v26;
    if (!v39)
      goto LABEL_39;
LABEL_31:
    v43 = *(_QWORD *)(v39 + 16);
    v44 = *(_QWORD *)(v39 + 24);
    ObjectType = swift_getObjectType(v43);
    v46 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 48);
    swift_unknownObjectRetain(v43);
    v48 = v46(ObjectType, v44);
    if (v164)
    {
      v49 = v47;
      v50 = type metadata accessor for CRLTransactableHashableWrapper();
      v51 = swift_allocObject(v50, 32, 7);
      *(_QWORD *)(v51 + 16) = v48;
      *(_QWORD *)(v51 + 24) = v49;
      swift_beginAccess(v31, &v185, 33, 0);
      swift_unknownObjectRetain(v48);
      sub_100AD58F8(&v190, v51);
      swift_endAccess(&v185);
      swift_release(v39);
      swift_unknownObjectRelease(v43);
      swift_unknownObjectRelease(v48);
      swift_release(v190);
    }
    else
    {
      swift_release(v39);
      swift_unknownObjectRelease(v43);
      v23 = (_QWORD *)swift_unknownObjectRelease(v48);
    }
    v25 = v35;
    v26 = v33;
  }
  if (v26)
  {
    v33 = (v26 - 1) & v26;
    v34 = __clz(__rbit64(v26)) | (v25 << 6);
    v35 = v25;
    goto LABEL_30;
  }
  v35 = v25 + 1;
  if (__OFADD__(v25, 1))
    goto LABEL_105;
  if (v35 >= v180)
  {
LABEL_39:
    v41 = v158;
    goto LABEL_40;
  }
  v40 = *(_QWORD *)(v182 + 8 * v35);
  v41 = v158;
  if (v40)
  {
LABEL_29:
    v33 = (v40 - 1) & v40;
    v34 = __clz(__rbit64(v40)) + (v35 << 6);
LABEL_30:
    v39 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * v34);
    swift_retain(v39);
    if (!v39)
      goto LABEL_39;
    goto LABEL_31;
  }
  v42 = v25 + 2;
  if (v25 + 2 >= v180)
    goto LABEL_40;
  v40 = *(_QWORD *)(v182 + 8 * v42);
  if (v40)
    goto LABEL_28;
  v42 = v25 + 3;
  if (v25 + 3 >= v180)
    goto LABEL_40;
  v40 = *(_QWORD *)(v182 + 8 * v42);
  if (v40)
  {
LABEL_28:
    v35 = v42;
    goto LABEL_29;
  }
  v35 = v25 + 4;
  if (v25 + 4 >= v180)
    goto LABEL_40;
  v40 = *(_QWORD *)(v182 + 8 * v35);
  if (v40)
    goto LABEL_29;
  v52 = v25 + 5;
  while (v180 != v52)
  {
    v40 = *(_QWORD *)(v182 + 8 * v52++);
    if (v40)
    {
      v35 = v52 - 1;
      goto LABEL_29;
    }
  }
LABEL_40:
  sub_1004D284C(v17);
  v53 = v160;
  v54 = (uint64_t *)(v160 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications);
  swift_beginAccess(v160 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, &v190, 0, 0);
  v55 = *v54;
  v56 = *(_QWORD *)(*v54 + 64);
  v162 = *v54 + 64;
  v57 = 1 << *(_BYTE *)(v55 + 32);
  if (v57 < 64)
    v58 = ~(-1 << v57);
  else
    v58 = -1;
  v59 = v58 & v56;
  v60 = (uint64_t *)(v53 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects);
  v61 = v53 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications;
  v169 = &v155[OBJC_IVAR____TtC8Freeform18CRLObservableDelta_observableDeltas];
  v168 = v55;
  swift_bridgeObjectRetain(v55);
  v165 = v60;
  swift_beginAccess(v60, v188, 0, 0);
  v157 = v61;
  swift_beginAccess(v61, v187, 0, 0);
  v62 = 0;
  v163 = (unint64_t)(v57 + 63) >> 6;
  v32 = v164 + 16;
  v156 = (_QWORD *)(v164 + 16);
  if (!v59)
    goto LABEL_45;
  while (2)
  {
    while (2)
    {
      v63 = __clz(__rbit64(v59));
      v59 &= v59 - 1;
      v64 = v63 | (v62 << 6);
LABEL_56:
      v67 = *(_QWORD *)(*(_QWORD *)(v168 + 48) + 8 * v64);
      v68 = (uint64_t *)(*(_QWORD *)(v168 + 56) + 16 * v64);
      v69 = *v68;
      v173 = v68[1];
      v70 = *(_QWORD *)(v67 + 16);
      v71 = *(_QWORD *)(v67 + 24);
      if ((v167 & 1) != 0)
      {
        v72 = swift_getObjectType(*(_QWORD *)(v67 + 16));
        swift_retain(v67);
        swift_unknownObjectRetain(v69);
        swift_unknownObjectRetain(v70);
        v73 = v166;
        sub_100D5E5C8(v160, v72, v71);
        v32 = (unint64_t)v187;
        v166 = v73;
        if (v73)
          goto LABEL_106;
      }
      else
      {
        swift_retain(v67);
        swift_unknownObjectRetain(v69);
        swift_unknownObjectRetain(v70);
      }
      v74 = *v165;
      if ((*v165 & 0xC000000000000001) == 0)
      {
        if (*(_QWORD *)(v74 + 16))
        {
          v174 = v69;
          v159 = v67;
          v171 = v59;
          v172 = v62;
          Hasher.init(_seed:)(&v185, *(_QWORD *)(v74 + 40));
          v77 = swift_getObjectType(v70);
          v78 = *(void (**)(int64_t, uint64_t))(v71 + 32);
          v79 = swift_bridgeObjectRetain(v74);
          v80 = v181;
          v182 = v70;
          v180 = v77;
          v179 = v78;
          ((void (*)(uint64_t, uint64_t, __n128))v78)(v77, v71, v79);
          v81 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v82 = v183;
          dispatch thunk of Hashable.hash(into:)(&v185, v183, v81);
          v83 = *(void (**)(char *, uint64_t))(v41 + 8);
          v83(v80, v82);
          v84 = Hasher._finalize()();
          v85 = -1 << *(_BYTE *)(v74 + 32);
          v86 = v84 & ~v85;
          v178 = (char *)(v74 + 56);
          if (((*(_QWORD *)(v74 + 56 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8)) >> v86) & 1) != 0)
          {
            v177 = ~v85;
            while (1)
            {
              v87 = *(_QWORD *)(*(_QWORD *)(v74 + 48) + 8 * v86);
              v88 = v71;
              v89 = *(_QWORD *)(v87 + 24);
              v90 = swift_getObjectType(*(_QWORD *)(v87 + 16));
              v91 = *(void (**)(uint64_t, uint64_t, __n128))(v89 + 32);
              v92 = swift_retain(v87);
              v93 = v181;
              v94 = v89;
              v71 = v88;
              v91(v90, v94, v92);
              v95 = v176;
              v179(v180, v88);
              v96 = static UUID.== infix(_:_:)(v93);
              v97 = v95;
              v98 = v183;
              v83(v97, v183);
              v83(v93, v98);
              swift_release(v87);
              if ((v96 & 1) != 0)
                break;
              v86 = (v86 + 1) & v177;
              if (((*(_QWORD *)&v178[(v86 >> 3) & 0xFFFFFFFFFFFFF8] >> v86) & 1) == 0)
                goto LABEL_70;
            }
            swift_unknownObjectRelease(v174);
            swift_unknownObjectRelease(v182);
            swift_bridgeObjectRelease(v74);
            v41 = v158;
            v62 = v172;
            v59 = v171;
            v67 = v159;
            goto LABEL_63;
          }
LABEL_70:
          v170 = v71;
          swift_bridgeObjectRelease(v74);
          v41 = v158;
          v62 = v172;
          v59 = v171;
          v67 = v159;
          v70 = v182;
          v69 = v174;
LABEL_72:
          v99 = *v161;
          swift_bridgeObjectRetain(*v161);
          v100 = sub_100621710(v67, v99);
          swift_bridgeObjectRelease(v99);
          v174 = v69;
          if ((v100 & 1) == 0)
          {
            v101 = *(_QWORD *)v157;
            if (*(_QWORD *)(*(_QWORD *)v157 + 16))
            {
              swift_retain(v67);
              swift_bridgeObjectRetain(v101);
              v102 = sub_1008430EC(v67);
              if ((v103 & 1) != 0)
              {
                v104 = (_QWORD *)(*(_QWORD *)(v101 + 56) + 16 * v102);
                v105 = *v104;
                v106 = v104[1];
                swift_unknownObjectRetain(*v104);
                swift_release(v67);
                swift_bridgeObjectRelease(v101);
                if (v164)
                {
                  v107 = swift_getObjectType(v70);
                  v182 = v106;
                  v108 = v105;
                  v109 = v170;
                  v110 = (uint64_t)v181;
                  (*(void (**)(uint64_t, uint64_t))(v170 + 32))(v107, v170);
                  v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56))(v108, v182, v107, v109);
                  v112 = v156;
                  swift_beginAccess(v156, &v185, 33, 0);
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v112);
                  v186 = (_QWORD *)*v112;
                  *v112 = 0x8000000000000000;
                  sub_100825B54(v111, v110, isUniquelyReferenced_nonNull_native);
                  v114 = *v112;
                  *v112 = v186;
                  v115 = swift_bridgeObjectRelease(v114);
                  v116 = v110;
                  v69 = v174;
                  (*(void (**)(uint64_t, uint64_t, __n128))(v41 + 8))(v116, v183, v115);
                  swift_endAccess(&v185);
                  v117 = v108;
                }
                else
                {
                  v117 = v105;
                }
                swift_unknownObjectRelease(v117);
                goto LABEL_87;
              }
              swift_release(v67);
              swift_bridgeObjectRelease(v101);
            }
            if (v164)
            {
              v118 = swift_getObjectType(v70);
              v119 = v170;
              v120 = v69;
              v121 = (uint64_t)v181;
              (*(void (**)(uint64_t, uint64_t))(v170 + 32))(v118, v170);
              v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 56))(v120, v173, v118, v119);
              v123 = v156;
              swift_beginAccess(v156, &v185, 33, 0);
              v124 = swift_isUniquelyReferenced_nonNull_native(*v123);
              v186 = (_QWORD *)*v123;
              *v123 = 0x8000000000000000;
              sub_100825B54(v122, v121, v124);
              v125 = *v123;
              *v123 = v186;
              v126 = swift_bridgeObjectRelease(v125);
              v127 = v121;
              v69 = v120;
              (*(void (**)(uint64_t, uint64_t, __n128))(v41 + 8))(v127, v183, v126);
              swift_endAccess(&v185);
            }
          }
LABEL_87:
          v128 = v41;
          v129 = v67;
          v171 = v59;
          v172 = v62;
          v130 = swift_getObjectType(v70);
          v131 = v170;
          v132 = v175;
          (*(void (**)(uint64_t, uint64_t))(v170 + 32))(v130, v170);
          v133 = v70;
          v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 64))(v69, v173, v130, v131);
          v135 = v169;
          swift_beginAccess(v169, &v185, 33, 0);
          v136 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v135);
          v186 = *(_QWORD **)v135;
          v137 = v186;
          *(_QWORD *)v135 = 0x8000000000000000;
          v139 = sub_100842EFC(v132);
          v32 = v137[2];
          v140 = (v138 & 1) == 0;
          v141 = v32 + v140;
          if (__OFADD__(v32, v140))
          {
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
            goto LABEL_104;
          }
          v142 = v138;
          if (v137[3] >= v141)
          {
            if ((v136 & 1) == 0)
              sub_10082CC68();
          }
          else
          {
            sub_100815284(v141, v136);
            v143 = sub_100842EFC(v175);
            if ((v142 & 1) != (v144 & 1))
              goto LABEL_107;
            v139 = v143;
          }
          v145 = v129;
          v146 = v186;
          v41 = v128;
          if ((v142 & 1) != 0)
          {
            v147 = v186[7];
            swift_release(*(_QWORD *)(v147 + 8 * v139));
            *(_QWORD *)(v147 + 8 * v139) = v134;
          }
          else
          {
            v186[(v139 >> 6) + 8] |= 1 << v139;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v128 + 16))(v146[6] + *(_QWORD *)(v128 + 72) * v139, v175, v183);
            *(_QWORD *)(v146[7] + 8 * v139) = v134;
            v148 = v146[2];
            v65 = __OFADD__(v148, 1);
            v32 = v148 + 1;
            if (v65)
              goto LABEL_103;
            v146[2] = v32;
          }
          v149 = *(_QWORD *)v169;
          *(_QWORD *)v169 = v146;
          v150 = swift_bridgeObjectRelease(v149);
          (*(void (**)(uint64_t, uint64_t, __n128))(v128 + 8))(v175, v183, v150);
          swift_endAccess(&v185);
          swift_release(v145);
          swift_unknownObjectRelease(v133);
          swift_unknownObjectRelease(v174);
          v62 = v172;
          v32 = (unint64_t)&v189;
          v59 = v171;
          if (v171)
            continue;
          goto LABEL_45;
        }
LABEL_71:
        v170 = v71;
        goto LABEL_72;
      }
      break;
    }
    swift_retain(v67);
    v75 = swift_bridgeObjectRetain(v74);
    v76 = __CocoaSet.contains(_:)(v75);
    swift_bridgeObjectRelease(v74);
    swift_release(v67);
    if ((v76 & 1) == 0)
      goto LABEL_71;
    swift_unknownObjectRelease(v69);
    swift_unknownObjectRelease(v70);
LABEL_63:
    swift_release(v67);
    if (v59)
      continue;
    break;
  }
LABEL_45:
  v65 = __OFADD__(v62++, 1);
  if (v65)
    goto LABEL_102;
  if (v62 >= v163)
  {
LABEL_99:
    swift_release(v168);
    return (uint64_t)v155;
  }
  v32 = *(_QWORD *)(v162 + 8 * v62);
  if (v32)
  {
LABEL_55:
    v59 = (v32 - 1) & v32;
    v64 = __clz(__rbit64(v32)) + (v62 << 6);
    goto LABEL_56;
  }
  v66 = v62 + 1;
  if (v62 + 1 >= v163)
    goto LABEL_99;
  v32 = *(_QWORD *)(v162 + 8 * v66);
  if (v32)
    goto LABEL_54;
  v66 = v62 + 2;
  if (v62 + 2 >= v163)
    goto LABEL_99;
  v32 = *(_QWORD *)(v162 + 8 * v66);
  if (v32)
    goto LABEL_54;
  v66 = v62 + 3;
  if (v62 + 3 >= v163)
    goto LABEL_99;
  v32 = *(_QWORD *)(v162 + 8 * v66);
  if (v32)
  {
LABEL_54:
    v62 = v66;
    goto LABEL_55;
  }
  while (1)
  {
    v62 = v66 + 1;
    if (__OFADD__(v66, 1))
      break;
    if (v62 >= v163)
      goto LABEL_99;
    v32 = *(_QWORD *)(v162 + 8 * v62);
    ++v66;
    if (v32)
      goto LABEL_55;
  }
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  swift_errorRelease(*(_QWORD *)(v32 - 256));
  sub_100757E04(&_mh_execute_header, (uint64_t)"_createObservableDelta(populating:shouldCloseTransaction:)", 58, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 474, "Transactable failed to provide a snapshot in an undoable transaction context", 76, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Transactable failed to provide a snapshot in an undoable transaction context");
  sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_createObservableDelta(populating:shouldCloseTransaction:)", 58, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 474, (uint64_t)"Transactable failed to provide a snapshot in an undoable transaction context", 76, 2u);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v152, v153);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
  __break(1u);
LABEL_107:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v183);
  __break(1u);
  return result;
}

uint64_t sub_100DB3C60(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjectType;
  uint64_t (*v57)(char *, uint64_t, uint64_t, __n128);
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(__n128);
  __n128 v68;
  uint64_t v69;
  void (*v70)(__n128);
  __n128 v71;
  uint64_t v72;
  __n128 v73;
  void (*v74)(uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t, __n128);
  __n128 v86;
  uint64_t v87;
  __n128 v88;
  void (*v89)(char *, uint64_t, __n128);
  __n128 v90;
  char *v91;
  char v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unsigned int (*v121)(_QWORD, _QWORD, _QWORD);
  char v122[72];
  char v123[16];

  v3 = v2;
  v113 = a2;
  v111 = sub_1004B804C((uint64_t *)&unk_1013F62D0);
  __chkstk_darwin(v111);
  v112 = (uint64_t)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v104 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v103 = (char *)&v101 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v101 - v12;
  v14 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v14);
  v105 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v108 = (char *)&v101 - v17;
  __chkstk_darwin(v18);
  v115 = (uint64_t)&v101 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v101 - v21;
  __chkstk_darwin(v23);
  v118 = (char *)&v101 - v24;
  v25 = sub_1004B804C((uint64_t *)&unk_1013F02F0);
  v120 = *(_QWORD *)(v25 - 8);
  v121 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v25;
  __chkstk_darwin(v25);
  v116 = (char *)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for CRLContainerItemCRDTData(0);
  __chkstk_darwin(v27);
  v101 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_1004B804C(&qword_1013F0320);
  v102 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v119 = (char *)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1013DD8B8 != -1)
    swift_once(&qword_1013DD8B8, sub_100A06704);
  swift_beginAccess(&static OS_os_log.boardItemLifecycle, v123, 0, 0);
  v30 = (void *)static OS_os_log.boardItemLifecycle;
  v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v31, v122);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v110 = v30;
  v33 = a1;
  v34 = objc_msgSend(v33, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v36 = v35;
  v38 = v37;

  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v36;
  *(_QWORD *)(inited + 40) = v38;
  v40 = static os_log_type_t.default.getter(v39);
  v41 = v110;
  sub_100A06EBC((uint64_t)v110, &_mh_execute_header, v40, "Calling _recursivelyDeleteChildren() on parent: [%{public}@]", 60, 2, inited);
  swift_setDeallocating(inited);
  v42 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v42);

  v110 = v33;
  v109 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  v43 = *(_QWORD *)&v33[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v44 = type metadata accessor for CRLContainerItemData(0);
  v45 = swift_dynamicCastClassUnconditional(v43, v44, 0, 0, 0);
  v46 = (uint64_t)v101;
  (*(void (**)(void))(*(_QWORD *)v45 + 680))();
  v48 = v120;
  v47 = v121;
  v49 = v116;
  (*(void (**)(char *, uint64_t, unsigned int (*)(_QWORD, _QWORD, _QWORD)))(v120 + 16))(v116, v46, v121);
  sub_1004B84A4(v46, type metadata accessor for CRLContainerItemCRDTData);
  CROrderedSet.makeIterator()(v47);
  (*(void (**)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD)))(v48 + 8))(v49, v47);
  v50 = OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner;
  v52 = v117;
  v51 = v118;
  CROrderedSet.Iterator.next()(v117);
  v121 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v7 + 48);
  if (v121(v51, 1, v6) != 1)
  {
    v53 = (_QWORD *)(v3 + v50);
    v120 = *(_QWORD *)(v7 + 32);
    v107 = v3;
    v114 = v7;
    v106 = v13;
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))v120)(v13, v51, v6);
      v55 = *v53;
      v54 = v53[1];
      ObjectType = swift_getObjectType(*v53);
      v57 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v54 + 16);
      v58 = swift_unknownObjectRetain(v55);
      v59 = v57(v13, ObjectType, v54, v58);
      v61 = v60;
      v62 = swift_unknownObjectRelease(v55);
      if (!v59)
        goto LABEL_23;
      v63 = type metadata accessor for CRLBoardItem(0);
      v64 = (_QWORD *)swift_dynamicCastClass(v59, v63);
      if (!v64)
        goto LABEL_20;
      v116 = (char *)v61;
      v65 = (uint64_t)v22;
      v66 = v7;
      v67 = *(void (**)(__n128))((swift_isaMask & *v64) + 0xB8);
      v68 = swift_unknownObjectRetain(v59);
      v67(v68);
      v69 = *(_QWORD *)&v110[v109];
      v70 = *(void (**)(__n128))(*(_QWORD *)v69 + 256);
      v71 = swift_retain(v69);
      v72 = v115;
      v70(v71);
      v73 = swift_release(v69);
      v74 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v66 + 56);
      v22 = (char *)v65;
      v74(v72, 0, 1, v6, v73);
      v75 = v112;
      v76 = v112 + *(int *)(v111 + 48);
      sub_1006950CC(v65, v112);
      sub_1006950CC(v72, v76);
      v77 = v121;
      if (v121(v75, 1, v6) == 1)
        break;
      v78 = (uint64_t)v108;
      sub_1006950CC(v75, (uint64_t)v108);
      if (v77(v76, 1, v6) == 1)
      {
        sub_1004CB800(v115, (uint64_t *)&unk_1013E1A50);
        sub_1004CB800((uint64_t)v22, (uint64_t *)&unk_1013E1A50);
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v78, v6);
LABEL_12:
        v79 = sub_1004CB800(v75, (uint64_t *)&unk_1013F62D0);
        goto LABEL_13;
      }
      v91 = v103;
      ((void (*)(char *, uint64_t, uint64_t))v120)(v103, v76, v6);
      sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v92 = dispatch thunk of static Equatable.== infix(_:_:)(v108, v91);
      v93 = *(void (**)(char *, uint64_t))(v114 + 8);
      v93(v91, v6);
      sub_1004CB800(v115, (uint64_t *)&unk_1013E1A50);
      sub_1004CB800((uint64_t)v22, (uint64_t *)&unk_1013E1A50);
      v93(v108, v6);
      v79 = sub_1004CB800(v112, (uint64_t *)&unk_1013E1A50);
      if ((v92 & 1) != 0)
        goto LABEL_18;
LABEL_13:
      v80 = (uint64_t)v105;
      ((void (*)(uint64_t))v67)(v79);
      if (v77(v80, 1, v6) == 1)
      {
        swift_unknownObjectRelease(v59);
        sub_1004CB800(v80, (uint64_t *)&unk_1013E1A50);
LABEL_19:
        v3 = v107;
        v7 = v114;
        v13 = v106;
        v61 = (uint64_t)v116;
LABEL_20:
        v94 = swift_getObjectType(v59);
        v95 = v113 & 1;
        sub_100DBDC14(v59, v113 & 1, 1, v3, v94, v61);
        v96 = type metadata accessor for CRLContainerItem(0);
        v97 = swift_dynamicCastClass(v59, v96);
        if (v97)
        {
          v98 = v97;
          v99 = swift_unknownObjectRetain(v59);
          sub_100DB3C60(v98, v95, v99);
          swift_unknownObjectRelease(v59);
        }
        v62 = swift_unknownObjectRelease(v59);
LABEL_23:
        (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v13, v6, v62);
        goto LABEL_24;
      }
      v81 = v104;
      ((void (*)(char *, uint64_t, uint64_t))v120)(v104, v80, v6);
      v82 = *v53;
      v83 = v53[1];
      v84 = swift_getObjectType(*v53);
      v85 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v83 + 16);
      v86 = swift_unknownObjectRetain(v82);
      v87 = v85(v81, v84, v83, v86);
      swift_unknownObjectRelease(v82);
      v88 = swift_unknownObjectRelease(v59);
      v7 = v114;
      v89 = *(void (**)(char *, uint64_t, __n128))(v114 + 8);
      v89(v81, v6, v88);
      v90 = swift_unknownObjectRelease(v87);
      v3 = v107;
      v13 = v106;
      v61 = (uint64_t)v116;
      if (!v87)
        goto LABEL_20;
      v89(v106, v6, v90);
      swift_unknownObjectRelease(v59);
LABEL_24:
      v52 = v117;
      v51 = v118;
      CROrderedSet.Iterator.next()(v117);
      if (v121(v51, 1, v6) == 1)
        return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v119, v52);
    }
    sub_1004CB800(v72, (uint64_t *)&unk_1013E1A50);
    sub_1004CB800((uint64_t)v22, (uint64_t *)&unk_1013E1A50);
    if (v77(v76, 1, v6) == 1)
    {
      sub_1004CB800(v75, (uint64_t *)&unk_1013E1A50);
LABEL_18:
      swift_unknownObjectRelease(v59);
      goto LABEL_19;
    }
    goto LABEL_12;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v119, v52);
}

uint64_t sub_100DB45B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableCreatedObjects));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedOrphans));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds));

  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_affectedItemUUIDSetForUndoableItems));
  return v0;
}

uint64_t sub_100DB46C8()
{
  uint64_t v0;

  sub_100DB45B4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100DB46EC()
{
  return type metadata accessor for CRLTransactionContext(0);
}

uint64_t type metadata accessor for CRLTransactionContext(uint64_t a1)
{
  return sub_1004BD408(a1, qword_101413560, (uint64_t)&nominal type descriptor for CRLTransactionContext);
}

uint64_t sub_100DB4708(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[20];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100F392E8;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = &unk_100F39300;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = &unk_100F39300;
    v4[14] = &unk_100F39300;
    v4[15] = &unk_100F39318;
    v4[16] = &unk_100F39300;
    v4[17] = &unk_100F39300;
    v4[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[19] = &unk_100F39300;
    return swift_updateClassMetadata2(a1, 256, 20, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_100DB47B8(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t i;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjectType;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(_QWORD *, uint64_t, uint64_t);
  char v70;
  _QWORD *v71;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v73;
  char v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  char v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  unint64_t v123;
  int64_t v124;
  unint64_t j;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(_QWORD *, uint64_t, uint64_t);
  char v143;
  char *v144;
  uint64_t v145;
  char v146;
  unint64_t v147;
  uint64_t v148;
  _BOOL8 v149;
  uint64_t v150;
  char v151;
  unint64_t v152;
  char v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  _QWORD *v162;
  char v163;
  unint64_t v164;
  uint64_t v165;
  _BOOL8 v166;
  uint64_t v167;
  char v168;
  unint64_t v169;
  char v170;
  _QWORD *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char v176;
  uint64_t *v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  char v202;
  __n128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t result;
  uint64_t v227;
  CKRecordID v228;
  uint64_t v229;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  _QWORD *v258;
  uint64_t v259;
  int64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD v276[3];
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char v285[24];
  char v286[24];
  char v287[24];
  char v288[24];
  char v289[24];
  char v290[24];
  char v291[32];

  v3 = type metadata accessor for UUID(0);
  v234 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v231 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = v1;
  v233 = a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_id;
  if ((static UUID.== infix(_:_:)(&v1[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_id]) & 1) != 0)
  {
    v235 = v3;
    v236 = v5;
    v232 = type metadata accessor for CRLWatermarkTransactionContext(0);
    if (swift_dynamicCastClass(a1, v232))
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"stepTo(_:)", 10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 576, "Cannot call stepTo on another watermark", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Cannot call stepTo on another watermark");
      sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"stepTo(_:)", 10, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 576, (uint64_t)"Cannot call stepTo on another watermark", 39, 2u);
      goto LABEL_148;
    }
    v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, v291, 0, 0);
    v248 = v6;
    v7 = *v6;
    v8 = v257;
    v9 = &v257[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects];
    swift_beginAccess(&v257[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects], v290, 1, 0);
    v247 = (uint64_t *)v9;
    v10 = *(_QWORD *)v9;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
    v255 = (uint64_t)sub_100DAFE54(v11, v7);
    swift_bridgeObjectRelease(v10);
    v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v289, 0, 0);
    v246 = v12;
    v13 = *v12;
    v14 = &v8[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects];
    swift_beginAccess(&v8[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects], v288, 1, 0);
    v245 = (uint64_t *)v14;
    v15 = *(_QWORD *)v14;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    v254 = (uint64_t)sub_100DAFE54(v16, v13);
    swift_bridgeObjectRelease(v15);
    v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects, v287, 0, 0);
    v244 = v17;
    v18 = *v17;
    v19 = (uint64_t *)&v8[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects];
    swift_beginAccess(&v8[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects], v286, 1, 0);
    v253 = v19;
    v20 = *v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    v252 = sub_100DAFE54(v21, v18);
    swift_bridgeObjectRelease(v20);
    v22 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances, v285, 0, 0);
    v243 = v22;
    v23 = *v22;
    v24 = &v8[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances];
    swift_beginAccess(&v8[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances], &v284, 1, 0);
    v242 = (uint64_t *)v24;
    v25 = *(_QWORD *)v24;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    v251 = sub_100DAFE54(v26, v23);
    swift_bridgeObjectRelease(v25);
    v262 = a1;
    v27 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds, &v283, 0, 0);
    v241 = v27;
    v28 = *v27;
    v29 = (uint64_t *)&v8[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds];
    swift_beginAccess(&v8[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds], &v282, 1, 0);
    v240 = v29;
    v30 = *v29;
    if (*(_QWORD *)(v30 + 16) <= *(_QWORD *)(v28 + 16) >> 3)
    {
      v276[0] = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v30);
      sub_100DB6D50(v30, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_1013E1A50, (void (*)(char *))sub_100B26E60);
      swift_bridgeObjectRelease(v30);
      v250 = (void *)v276[0];
    }
    else
    {
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v30);
      v250 = sub_100DB730C(v31, v28);
      swift_bridgeObjectRelease(v30);
    }
    v32 = (uint64_t *)(v262 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds);
    swift_beginAccess(v262 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds, &v281, 0, 0);
    v239 = v32;
    v33 = *v32;
    v34 = (uint64_t *)&v257[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds];
    swift_beginAccess(&v257[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds], &v280, 1, 0);
    v238 = v34;
    v35 = *v34;
    if (*(_QWORD *)(v35 + 16) <= *(_QWORD *)(v33 + 16) >> 3)
    {
      v276[0] = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v35);
      sub_100DB6D50(v35, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_1013E1A50, (void (*)(char *))sub_100B26E60);
      swift_bridgeObjectRelease(v35);
      v249 = (void *)v276[0];
    }
    else
    {
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v35);
      v249 = sub_100DB730C(v36, v33);
      swift_bridgeObjectRelease(v35);
    }
    v37 = v262;
    v38 = (uint64_t *)(v262 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications);
    swift_beginAccess(v262 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, &v279, 0, 0);
    v39 = *v38;
    v40 = *(_QWORD *)(*v38 + 64);
    v259 = *v38 + 64;
    v41 = 1 << *(_BYTE *)(v39 + 32);
    v42 = -1;
    if (v41 < 64)
      v42 = ~(-1 << v41);
    v43 = v42 & v40;
    v44 = &v257[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications];
    v261 = v39;
    swift_bridgeObjectRetain(v39);
    v264 = (uint64_t)v44;
    swift_beginAccess(v44, &v278, 0, 0);
    v45 = 0;
    v46 = v41 + 63;
    v47 = v37;
    v260 = v46 >> 6;
    v258 = &_swiftEmptyDictionarySingleton;
    if (v43)
      goto LABEL_14;
LABEL_15:
    v50 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_134;
    }
    if (v50 < v260)
    {
      v51 = *(_QWORD *)(v259 + 8 * v50);
      ++v45;
      if (v51)
        goto LABEL_28;
      v45 = v50 + 1;
      if (v50 + 1 >= v260)
        goto LABEL_58;
      v51 = *(_QWORD *)(v259 + 8 * v45);
      if (v51)
        goto LABEL_28;
      v45 = v50 + 2;
      if (v50 + 2 >= v260)
        goto LABEL_58;
      v51 = *(_QWORD *)(v259 + 8 * v45);
      if (v51)
      {
LABEL_28:
        v43 = (v51 - 1) & v51;
        for (i = __clz(__rbit64(v51)) + (v45 << 6); ; i = v48 | (v45 << 6))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v261 + 48) + 8 * i);
          v265 = *(_OWORD *)(*(_QWORD *)(v261 + 56) + 16 * i);
          v54 = *(_QWORD *)(v53 + 16);
          v55 = *(_QWORD *)(v53 + 24);
          ObjectType = swift_getObjectType(v54);
          v57 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 48);
          swift_retain(v53);
          v58 = v265;
          swift_unknownObjectRetain(v265);
          swift_unknownObjectRetain(v54);
          v59 = v57(ObjectType, v55);
          v263 = (uint64_t *)v60;
          swift_unknownObjectRelease(v54);
          v61 = *(_QWORD *)v264;
          if (!*(_QWORD *)(*(_QWORD *)v264 + 16))
            goto LABEL_34;
          swift_retain(v53);
          swift_bridgeObjectRetain(v61);
          v62 = sub_1008430EC(v53);
          if ((v63 & 1) == 0)
            break;
          *(_QWORD *)&v265 = v43;
          v64 = v45;
          v65 = (uint64_t *)(*(_QWORD *)(v61 + 56) + 16 * v62);
          v66 = *v65;
          v67 = v65[1];
          swift_unknownObjectRetain(*v65);
          swift_release(v53);
          swift_bridgeObjectRelease(v61);
          v68 = swift_getObjectType(v66);
          v277 = swift_getObjectType(v59);
          v276[0] = v59;
          v69 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v67 + 128);
          swift_unknownObjectRetain(v59);
          v70 = v69(v276, v68, v67);
          sub_1004CB800((uint64_t)v276, &qword_1013E0230);
          if ((v70 & 1) != 0)
          {
            swift_unknownObjectRelease(v58);
            swift_release(v53);
            swift_unknownObjectRelease(v59);
            swift_unknownObjectRelease(v66);
            v47 = v262;
            v45 = v64;
            v43 = v265;
            if (!(_QWORD)v265)
              goto LABEL_15;
            goto LABEL_14;
          }
          swift_retain(v53);
          swift_unknownObjectRetain(v66);
          v71 = v258;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v258);
          v276[0] = v71;
          sub_100825578(v66, v67, v53, isUniquelyReferenced_nonNull_native);
          v258 = (_QWORD *)v276[0];
          swift_release(v53);
          swift_bridgeObjectRelease(0x8000000000000000);
          v73 = (_QWORD *)v264;
          swift_beginAccess(v264, v276, 33, 0);
          swift_retain(v53);
          swift_unknownObjectRetain(v59);
          v74 = swift_isUniquelyReferenced_nonNull_native(*v73);
          v275 = (_QWORD *)*v73;
          *v73 = 0x8000000000000000;
          sub_100825578(v59, (uint64_t)v263, v53, v74);
          v75 = *v73;
          *v73 = v275;
          swift_release(v53);
          swift_bridgeObjectRelease(v75);
          swift_endAccess(v276);
          swift_unknownObjectRelease(v66);
          v45 = v64;
          v43 = v265;
LABEL_56:
          swift_unknownObjectRelease(v59);
          swift_unknownObjectRelease(v58);
          swift_release(v53);
          v47 = v262;
          if (!v43)
            goto LABEL_15;
LABEL_14:
          v48 = __clz(__rbit64(v43));
          v43 &= v43 - 1;
        }
        swift_release(v53);
        swift_bridgeObjectRelease(v61);
LABEL_34:
        swift_retain(v53);
        swift_unknownObjectRetain(v58);
        v76 = v258;
        v77 = swift_isUniquelyReferenced_nonNull_native(v258);
        v276[0] = v76;
        v79 = sub_1008430EC(v53);
        v80 = v76[2];
        v81 = (v78 & 1) == 0;
        v82 = v80 + v81;
        if (__OFADD__(v80, v81))
          goto LABEL_137;
        v83 = v78;
        if (v76[3] >= v82)
        {
          if ((v77 & 1) == 0)
            sub_10082C378();
        }
        else
        {
          sub_100813F94(v82, v77);
          v84 = sub_1008430EC(v53);
          if ((v83 & 1) != (v85 & 1))
            goto LABEL_145;
          v79 = v84;
        }
        v86 = (_QWORD *)v276[0];
        v258 = (_QWORD *)v276[0];
        if ((v83 & 1) != 0)
        {
          v87 = *(_QWORD *)(v276[0] + 56);
          v88 = 16 * v79;
          swift_unknownObjectRelease(*(_QWORD *)(v87 + v88));
          *(_OWORD *)(v87 + v88) = v265;
        }
        else
        {
          *(_QWORD *)(v276[0] + 8 * (v79 >> 6) + 64) |= 1 << v79;
          *(_QWORD *)(v86[6] + 8 * v79) = v53;
          *(_OWORD *)(v86[7] + 16 * v79) = v265;
          v89 = v86[2];
          v90 = __OFADD__(v89, 1);
          v91 = v89 + 1;
          if (v90)
            goto LABEL_141;
          v86[2] = v91;
          swift_retain(v53);
        }
        swift_release(v53);
        swift_bridgeObjectRelease(0x8000000000000000);
        v92 = (_QWORD *)v264;
        swift_beginAccess(v264, v276, 33, 0);
        swift_retain(v53);
        swift_unknownObjectRetain(v59);
        v93 = swift_isUniquelyReferenced_nonNull_native(*v92);
        v275 = (_QWORD *)*v92;
        v94 = v275;
        *v92 = 0x8000000000000000;
        v96 = sub_1008430EC(v53);
        v97 = v94[2];
        v98 = (v95 & 1) == 0;
        v99 = v97 + v98;
        if (__OFADD__(v97, v98))
          goto LABEL_138;
        v100 = v95;
        if (v94[3] < v99)
        {
          sub_100813F94(v99, v93);
          v101 = sub_1008430EC(v53);
          if ((v100 & 1) != (v102 & 1))
            goto LABEL_145;
          v96 = v101;
          v103 = v275;
          if ((v100 & 1) == 0)
            goto LABEL_53;
LABEL_51:
          v104 = (uint64_t *)(v103[7] + 16 * v96);
          swift_unknownObjectRelease(*v104);
          v105 = (uint64_t)v263;
          *v104 = v59;
          v104[1] = v105;
LABEL_55:
          v110 = *(_QWORD *)v264;
          *(_QWORD *)v264 = v103;
          swift_release(v53);
          swift_bridgeObjectRelease(v110);
          swift_endAccess(v276);
          goto LABEL_56;
        }
        if ((v93 & 1) != 0)
        {
          v103 = v275;
          if ((v95 & 1) != 0)
            goto LABEL_51;
        }
        else
        {
          sub_10082C378();
          v103 = v275;
          if ((v100 & 1) != 0)
            goto LABEL_51;
        }
LABEL_53:
        v103[(v96 >> 6) + 8] |= 1 << v96;
        *(_QWORD *)(v103[6] + 8 * v96) = v53;
        v106 = (uint64_t *)(v103[7] + 16 * v96);
        v107 = (uint64_t)v263;
        *v106 = v59;
        v106[1] = v107;
        v108 = v103[2];
        v90 = __OFADD__(v108, 1);
        v109 = v108 + 1;
        if (v90)
          goto LABEL_142;
        v103[2] = v109;
        swift_retain(v53);
        goto LABEL_55;
      }
      v52 = v50 + 3;
      if (v52 < v260)
      {
        v51 = *(_QWORD *)(v259 + 8 * v52);
        if (v51)
        {
          v45 = v52;
          goto LABEL_28;
        }
        while (1)
        {
          v45 = v52 + 1;
          if (__OFADD__(v52, 1))
            goto LABEL_135;
          if (v45 >= v260)
            break;
          v51 = *(_QWORD *)(v259 + 8 * v45);
          ++v52;
          if (v51)
            goto LABEL_28;
        }
      }
    }
LABEL_58:
    swift_release(v261);
    v111 = (uint64_t *)(v47 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications);
    swift_beginAccess(v111, &v275, 0, 0);
    v237 = v111;
    v112 = *v111;
    v113 = *(_QWORD *)(*v111 + 64);
    v259 = *v111 + 64;
    v114 = 1 << *(_BYTE *)(v112 + 32);
    v115 = -1;
    if (v114 < 64)
      v115 = ~(-1 << v114);
    v116 = v115 & v113;
    v117 = (uint64_t)&v257[OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications];
    v261 = v112;
    swift_bridgeObjectRetain(v112);
    v263 = (uint64_t *)v117;
    swift_beginAccess(v117, &v274, 0, 0);
    v118 = 0;
    v260 = (unint64_t)(v114 + 63) >> 6;
    v257 = (char *)&_swiftEmptyDictionarySingleton;
    if (v116)
      goto LABEL_83;
LABEL_65:
    v122 = v118 + 1;
    if (!__OFADD__(v118, 1))
    {
      if (v122 >= v260)
        goto LABEL_107;
      v123 = *(_QWORD *)(v259 + 8 * v122);
      ++v118;
      if (!v123)
      {
        v118 = v122 + 1;
        if (v122 + 1 >= v260)
          goto LABEL_107;
        v123 = *(_QWORD *)(v259 + 8 * v118);
        if (!v123)
        {
          v118 = v122 + 2;
          if (v122 + 2 >= v260)
            goto LABEL_107;
          v123 = *(_QWORD *)(v259 + 8 * v118);
          if (!v123)
          {
            v124 = v122 + 3;
            if (v124 < v260)
            {
              v123 = *(_QWORD *)(v259 + 8 * v124);
              if (!v123)
              {
                while (1)
                {
                  v118 = v124 + 1;
                  if (__OFADD__(v124, 1))
                    goto LABEL_136;
                  if (v118 >= v260)
                    goto LABEL_107;
                  v123 = *(_QWORD *)(v259 + 8 * v118);
                  ++v124;
                  if (v123)
                    goto LABEL_78;
                }
              }
              v118 = v124;
              goto LABEL_78;
            }
LABEL_107:
            swift_release(v261);
            v180 = *v248;
            v181 = *v247;
            *v247 = *v248;
            swift_bridgeObjectRetain(v180);
            swift_bridgeObjectRelease(v181);
            v182 = *v246;
            v183 = *v245;
            *v245 = *v246;
            swift_bridgeObjectRetain(v182);
            swift_bridgeObjectRelease(v183);
            v184 = *v244;
            v185 = *v253;
            *v253 = *v244;
            swift_bridgeObjectRetain(v184);
            swift_bridgeObjectRelease(v185);
            v186 = *v243;
            v187 = *v242;
            *v242 = *v243;
            swift_bridgeObjectRetain(v186);
            swift_bridgeObjectRelease(v187);
            v188 = *v241;
            v189 = *v240;
            *v240 = *v241;
            swift_bridgeObjectRetain(v188);
            swift_bridgeObjectRelease(v189);
            v190 = *v239;
            v191 = *v238;
            *v238 = *v239;
            swift_bridgeObjectRetain(v190);
            swift_bridgeObjectRelease(v191);
            v192 = *v237;
            v193 = v263;
            swift_beginAccess(v263, v276, 1, 0);
            v194 = *v193;
            *v193 = v192;
            swift_bridgeObjectRetain(v192);
            swift_bridgeObjectRelease(v194);
            if (!v258[2])
            {
              if ((v255 & 0xC000000000000001) != 0)
              {
                if (v255 < 0)
                  v195 = v255;
                else
                  v195 = v255 & 0xFFFFFFFFFFFFFF8;
                if (__CocoaSet.count.getter(v195))
                  goto LABEL_127;
              }
              else if (*(_QWORD *)(v255 + 16))
              {
                goto LABEL_127;
              }
              if ((v254 & 0xC000000000000001) != 0)
              {
                if (v254 < 0)
                  v196 = v254;
                else
                  v196 = v254 & 0xFFFFFFFFFFFFFF8;
                if (__CocoaSet.count.getter(v196))
                  goto LABEL_127;
              }
              else if (*(_QWORD *)(v254 + 16))
              {
                goto LABEL_127;
              }
              v197 = *v253;
              if ((*v253 & 0xC000000000000001) != 0)
              {
                if (v197 < 0)
                  v198 = *v253;
                else
                  v198 = v197 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(*v253);
                v199 = __CocoaSet.count.getter(v198);
                swift_bridgeObjectRelease(v197);
                v200 = v258;
                if (v199)
                  goto LABEL_127;
LABEL_132:
                swift_bridgeObjectRelease(v200);
                swift_bridgeObjectRelease(v257);
                swift_bridgeObjectRelease(v255);
                swift_bridgeObjectRelease(v254);
                swift_bridgeObjectRelease(v252);
                swift_bridgeObjectRelease(v251);
                swift_bridgeObjectRelease(v250);
                swift_bridgeObjectRelease(v249);
                return 0;
              }
              v200 = v258;
              if (!*(_QWORD *)(v197 + 16))
                goto LABEL_132;
            }
LABEL_127:
            v201 = swift_allocObject(v232, *(unsigned int *)(v232 + 48), *(unsigned __int16 *)(v232 + 52));
            v202 = *(_BYTE *)(v262 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_trackChanges);
            v203 = swift_retain(v262);
            if ((v202 & 1) == 0)
            {
              sub_100757E04(&_mh_execute_header, (uint64_t)"init(from:)", 11, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 560, "Should not be trying to watermark a transaction that doesnt want to be tracked.", 79, 2u, (uint64_t)_swiftEmptyArrayStorage);
              sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(from:)", 11, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 560, (uint64_t)"Should not be trying to watermark a transaction that doesnt want to be tracked.", 79, 2u);
            }
            v204 = v262;
            v205 = *(_QWORD *)(v262 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
            v206 = *(_QWORD *)(v262 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner + 8);
            v207 = (uint64_t)v236;
            (*(void (**)(char *, uint64_t, uint64_t, __n128))(v234 + 16))(v236, v233, v235, v203);
            swift_unknownObjectRetain(v205);
            swift_release(v204);
            v208 = swift_getObjectType(v205);
            v209 = sub_100DBE750(v205, 0, 1, v207, 1, v201, v208, v206);
            *(_BYTE *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_active) = 0;
            v210 = (uint64_t *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications);
            swift_beginAccess(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, &v273, 1, 0);
            v211 = *v210;
            *v210 = (uint64_t)v258;
            swift_bridgeObjectRelease(v211);
            v212 = (uint64_t *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
            swift_beginAccess(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, &v272, 1, 0);
            v213 = *v212;
            *v212 = v255;
            swift_bridgeObjectRelease(v213);
            v214 = (uint64_t *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects);
            swift_beginAccess(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, &v271, 1, 0);
            v215 = *v214;
            *v214 = v254;
            swift_bridgeObjectRelease(v215);
            v216 = (uint64_t *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects);
            swift_beginAccess(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects, &v270, 1, 0);
            v217 = *v216;
            *v216 = (uint64_t)v252;
            swift_bridgeObjectRelease(v217);
            v218 = (uint64_t *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances);
            swift_beginAccess(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances, &v269, 1, 0);
            v219 = *v218;
            *v218 = (uint64_t)v251;
            swift_bridgeObjectRelease(v219);
            v220 = (uint64_t *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications);
            swift_beginAccess(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications, &v268, 1, 0);
            v221 = *v220;
            *v220 = (uint64_t)v257;
            swift_bridgeObjectRelease(v221);
            v222 = (uint64_t *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds);
            swift_beginAccess(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds, &v267, 1, 0);
            v223 = *v222;
            *v222 = (uint64_t)v250;
            swift_bridgeObjectRelease(v223);
            v224 = (uint64_t *)(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds);
            swift_beginAccess(v209 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds, &v266, 1, 0);
            v225 = *v224;
            *v224 = (uint64_t)v249;
            swift_bridgeObjectRelease(v225);
            return v209;
          }
        }
      }
LABEL_78:
      v264 = (v123 - 1) & v123;
      for (j = __clz(__rbit64(v123)) + (v118 << 6); ; j = __clz(__rbit64(v116)) | (v118 << 6))
      {
        v126 = *(_QWORD *)(*(_QWORD *)(v261 + 48) + 8 * j);
        v265 = *(_OWORD *)(*(_QWORD *)(v261 + 56) + 16 * j);
        v127 = *(_QWORD *)(v126 + 16);
        v128 = *(_QWORD *)(v126 + 24);
        v129 = swift_getObjectType(v127);
        v130 = *(uint64_t (**)(uint64_t, uint64_t))(v128 + 48);
        swift_retain(v126);
        v121 = v265;
        swift_unknownObjectRetain(v265);
        swift_unknownObjectRetain(v127);
        v131 = v130(v129, v128);
        v133 = v132;
        swift_unknownObjectRelease(v127);
        v134 = *v263;
        if (!*(_QWORD *)(*v263 + 16))
          goto LABEL_85;
        swift_retain(v126);
        swift_bridgeObjectRetain(v134);
        v135 = sub_1008430EC(v126);
        if ((v136 & 1) == 0)
          break;
        *(_QWORD *)&v265 = v133;
        v137 = v118;
        v138 = (uint64_t *)(*(_QWORD *)(v134 + 56) + 16 * v135);
        v140 = *v138;
        v139 = v138[1];
        swift_unknownObjectRetain(*v138);
        swift_release(v126);
        swift_bridgeObjectRelease(v134);
        v141 = swift_getObjectType(v140);
        v277 = swift_getObjectType(v131);
        v276[0] = v131;
        v142 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v139 + 128);
        swift_unknownObjectRetain(v131);
        v143 = v142(v276, v141, v139);
        sub_1004CB800((uint64_t)v276, &qword_1013E0230);
        if ((v143 & 1) == 0)
        {
          swift_retain(v126);
          swift_unknownObjectRetain(v140);
          v175 = v257;
          v176 = swift_isUniquelyReferenced_nonNull_native(v257);
          v276[0] = v175;
          sub_100825578(v140, v139, v126, v176);
          v257 = (char *)v276[0];
          swift_release(v126);
          swift_bridgeObjectRelease(0x8000000000000000);
          v177 = v263;
          swift_beginAccess(v263, v276, 33, 0);
          swift_retain(v126);
          swift_unknownObjectRetain(v131);
          v178 = swift_isUniquelyReferenced_nonNull_native(*v177);
          v273 = (_QWORD *)*v177;
          *v177 = 0x8000000000000000;
          sub_100825578(v131, v265, v126, v178);
          v179 = *v177;
          *v177 = (uint64_t)v273;
          swift_release(v126);
          swift_bridgeObjectRelease(v179);
          swift_endAccess(v276);
          swift_unknownObjectRelease(v140);
          v118 = v137;
LABEL_64:
          swift_unknownObjectRelease(v131);
          swift_unknownObjectRelease(v121);
          swift_release(v126);
          v116 = v264;
          if (!v264)
            goto LABEL_65;
          goto LABEL_83;
        }
        swift_unknownObjectRelease(v121);
        swift_release(v126);
        swift_unknownObjectRelease(v131);
        swift_unknownObjectRelease(v140);
        v118 = v137;
        v116 = v264;
        if (!v264)
          goto LABEL_65;
LABEL_83:
        v264 = (v116 - 1) & v116;
      }
      swift_release(v126);
      swift_bridgeObjectRelease(v134);
LABEL_85:
      swift_retain(v126);
      swift_unknownObjectRetain(v121);
      v144 = v257;
      v145 = swift_isUniquelyReferenced_nonNull_native(v257);
      v276[0] = v144;
      v147 = sub_1008430EC(v126);
      v148 = *((_QWORD *)v144 + 2);
      v149 = (v146 & 1) == 0;
      v150 = v148 + v149;
      if (__OFADD__(v148, v149))
        goto LABEL_139;
      v151 = v146;
      if (*((_QWORD *)v144 + 3) >= v150)
      {
        if ((v145 & 1) == 0)
          sub_10082C378();
      }
      else
      {
        sub_100813F94(v150, v145);
        v152 = sub_1008430EC(v126);
        if ((v151 & 1) != (v153 & 1))
          goto LABEL_145;
        v147 = v152;
      }
      v154 = (_QWORD *)v276[0];
      v256 = v121;
      v257 = (char *)v276[0];
      if ((v151 & 1) != 0)
      {
        v155 = v133;
        v156 = v118;
        v157 = *(_QWORD *)(v276[0] + 56);
        swift_unknownObjectRelease(*(_QWORD *)(v157 + 16 * v147));
        *(_OWORD *)(v157 + 16 * v147) = v265;
      }
      else
      {
        *(_QWORD *)(v276[0] + 8 * (v147 >> 6) + 64) |= 1 << v147;
        *(_QWORD *)(v154[6] + 8 * v147) = v126;
        *(_OWORD *)(v154[7] + 16 * v147) = v265;
        v158 = v154[2];
        v90 = __OFADD__(v158, 1);
        v159 = v158 + 1;
        if (v90)
          goto LABEL_143;
        v155 = v133;
        v156 = v118;
        v154[2] = v159;
        swift_retain(v126);
      }
      swift_release(v126);
      swift_bridgeObjectRelease(0x8000000000000000);
      v160 = v263;
      swift_beginAccess(v263, v276, 33, 0);
      swift_retain(v126);
      swift_unknownObjectRetain(v131);
      v161 = swift_isUniquelyReferenced_nonNull_native(*v160);
      v273 = (_QWORD *)*v160;
      v162 = v273;
      *v160 = 0x8000000000000000;
      v164 = sub_1008430EC(v126);
      v165 = v162[2];
      v166 = (v163 & 1) == 0;
      v167 = v165 + v166;
      if (__OFADD__(v165, v166))
        goto LABEL_140;
      v168 = v163;
      if (v162[3] < v167)
      {
        sub_100813F94(v167, v161);
        v169 = sub_1008430EC(v126);
        if ((v168 & 1) != (v170 & 1))
          goto LABEL_145;
        v164 = v169;
        v118 = v156;
        v171 = v273;
        if ((v168 & 1) == 0)
          goto LABEL_102;
LABEL_62:
        v119 = (uint64_t *)(v171[7] + 16 * v164);
        swift_unknownObjectRelease(*v119);
        *v119 = v131;
        v119[1] = v155;
LABEL_63:
        v120 = *v263;
        *v263 = (uint64_t)v171;
        swift_release(v126);
        swift_bridgeObjectRelease(v120);
        swift_endAccess(v276);
        v121 = v256;
        goto LABEL_64;
      }
      v118 = v156;
      if ((v161 & 1) != 0)
      {
        v171 = v273;
        if ((v163 & 1) != 0)
          goto LABEL_62;
      }
      else
      {
        sub_10082C378();
        v171 = v273;
        if ((v168 & 1) != 0)
          goto LABEL_62;
      }
LABEL_102:
      v171[(v164 >> 6) + 8] |= 1 << v164;
      *(_QWORD *)(v171[6] + 8 * v164) = v126;
      v172 = (uint64_t *)(v171[7] + 16 * v164);
      *v172 = v131;
      v172[1] = v155;
      v173 = v171[2];
      v90 = __OFADD__(v173, 1);
      v174 = v173 + 1;
      if (v90)
        goto LABEL_144;
      v171[2] = v174;
      swift_retain(v126);
      goto LABEL_63;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    v227 = type metadata accessor for CRLTransactableHashableWrapper();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v227);
    __break(1u);
  }
  sub_100757E04(&_mh_execute_header, (uint64_t)"stepTo(_:)", 10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 572, "Cannot call stepTo on a different context than the one it was created with.", 75, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Cannot call stepTo on a different context than the one it was created with.");
  sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"stepTo(_:)", 10, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 572, (uint64_t)"Cannot call stepTo on a different context than the one it was created with.", 75, 2u);
LABEL_148:
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v228, *(Swift::String *)&v229);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
  __break(1u);
  return result;
}

void sub_100DB5EDC()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000031, 0x80000001010117D0, "Freeform/CRLTransactionContext.swift", 36, 2, 654, 0);
  __break(1u);
}

uint64_t sub_100DB5F34()
{
  return type metadata accessor for CRLWatermarkTransactionContext(0);
}

uint64_t type metadata accessor for CRLWatermarkTransactionContext(uint64_t a1)
{
  return sub_1004BD408(a1, qword_1014138E0, (uint64_t)&nominal type descriptor for CRLWatermarkTransactionContext);
}

uint64_t sub_100DB5F50(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 816);
}

uint64_t type metadata accessor for CRLInertOwner()
{
  return objc_opt_self(_TtC8Freeform13CRLInertOwner);
}

ValueMetadata *type metadata accessor for CRLTransactionChangeSummary()
{
  return &type metadata for CRLTransactionChangeSummary;
}

uint64_t sub_100DB5FB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t sub_100DB5FE4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1005034A0(&qword_101413D28, a2, (uint64_t (*)(uint64_t))type metadata accessor for CRLInertOwner, (uint64_t)&unk_100F3938C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100DB6020(uint64_t a1, uint64_t a2)
{
  return sub_1005034A0(&qword_101413D30, a2, (uint64_t (*)(uint64_t))type metadata accessor for CRLTransactableHashableWrapper, (uint64_t)&unk_100F393D0);
}

uint64_t sub_100DB604C(uint64_t a1, uint64_t a2)
{
  return sub_100DB60AC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&qword_1013E4880, (uint64_t)&protocol conformance descriptor for UUID) & 1;
}

uint64_t sub_100DB607C(uint64_t a1, uint64_t a2)
{
  return sub_100DB60AC(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_101405D30, (uint64_t)&protocol conformance descriptor for IndexPath) & 1;
}

uint64_t sub_100DB60AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  a3(0);
  sub_1005034A0(a4, 255, a3, a5);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2) & 1;
}

void sub_100DB6134(uint64_t a1)
{
  sub_100DB6D50(a1, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_1013E1A50, (void (*)(char *))sub_100B26E60);
}

void sub_100DB6150(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v3 + 16))
      return;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v5 = a1;
      else
        v5 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v6 = __CocoaSet.makeIterator()(v5);
      v7 = type metadata accessor for CRLTransactableHashableWrapper();
      v9 = sub_1005034A0((unint64_t *)&qword_101405D90, v8, (uint64_t (*)(uint64_t))type metadata accessor for CRLTransactableHashableWrapper, (uint64_t)&unk_100F393F8);
      v10 = Set.Iterator.init(_cocoa:)(v32, v6, v7, v9);
      a1 = v32[0];
      v29 = v32[1];
      v11 = v32[2];
      v12 = v32[3];
      v13 = v32[4];
    }
    else
    {
      v14 = -1 << *(_BYTE *)(a1 + 32);
      v29 = a1 + 56;
      v11 = ~v14;
      v15 = -v14;
      if (v15 < 64)
        v16 = ~(-1 << v15);
      else
        v16 = -1;
      v13 = v16 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      v12 = 0;
    }
    v17 = (unint64_t)(v11 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v13)
      {
        v18 = (v13 - 1) & v13;
        v19 = __clz(__rbit64(v13)) | (v12 << 6);
        v20 = v12;
      }
      else
      {
        v25 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          return;
        }
        if (v25 >= v17)
          goto LABEL_42;
        v26 = *(_QWORD *)(v29 + 8 * v25);
        v20 = v12 + 1;
        if (!v26)
        {
          v20 = v12 + 2;
          if (v12 + 2 >= v17)
            goto LABEL_42;
          v26 = *(_QWORD *)(v29 + 8 * v20);
          if (!v26)
          {
            v20 = v12 + 3;
            if (v12 + 3 >= v17)
              goto LABEL_42;
            v26 = *(_QWORD *)(v29 + 8 * v20);
            if (!v26)
            {
              v20 = v12 + 4;
              if (v12 + 4 >= v17)
                goto LABEL_42;
              v26 = *(_QWORD *)(v29 + 8 * v20);
              if (!v26)
              {
                v20 = v12 + 5;
                if (v12 + 5 >= v17)
                  goto LABEL_42;
                v26 = *(_QWORD *)(v29 + 8 * v20);
                if (!v26)
                {
                  v27 = v12 + 6;
                  while (v17 != v27)
                  {
                    v26 = *(_QWORD *)(v29 + 8 * v27++);
                    if (v26)
                    {
                      v20 = v27 - 1;
                      goto LABEL_38;
                    }
                  }
LABEL_42:
                  sub_1004D284C(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_38:
        v18 = (v26 - 1) & v26;
        v19 = __clz(__rbit64(v26)) + (v20 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v19);
      swift_retain(v24);
      if (!v24)
        goto LABEL_42;
      while (1)
      {
        v28 = sub_100B26B84(v24);
        swift_release(v24);
        swift_release(v28);
        v12 = v20;
        v13 = v18;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v21 = __CocoaSet.Iterator.next()(v10);
        if (v21)
        {
          v22 = v21;
          v30 = v21;
          v23 = type metadata accessor for CRLTransactableHashableWrapper();
          swift_unknownObjectRetain(v22);
          swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
          v24 = v31;
          swift_unknownObjectRelease(v22);
          v20 = v12;
          v18 = v13;
          if (v24)
            continue;
        }
        goto LABEL_42;
      }
    }
  }
  if (v3 < 0)
    v4 = *v1;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v4))
    goto LABEL_8;
}

void sub_100DB6428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      goto LABEL_24;
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v7)
        goto LABEL_24;
      v17 = *(_QWORD *)(v3 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v7)
          goto LABEL_24;
        v17 = *(_QWORD *)(v3 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v7)
            goto LABEL_24;
          v17 = *(_QWORD *)(v3 + 8 * v8);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_100B2709C(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v17 = *(_QWORD *)(v3 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_100DB65BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v3 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a1 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v13 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_24;
      v22 = *(_QWORD *)(v13 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_24;
        v22 = *(_QWORD *)(v13 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v17)
            goto LABEL_24;
          v22 = *(_QWORD *)(v13 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    sub_1004E1B3C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v20, (uint64_t)v12);
    sub_1004DB5FC((uint64_t)v12, (uint64_t)v9);
    sub_100B274B0((uint64_t)v9, (uint64_t)v5);
    sub_1004CB800((uint64_t)v5, &qword_1013E0270);
    sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
  }
  v23 = v21 + 4;
  if (v23 >= v17)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v13 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_100DB67EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v3 + 16))
      return;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v5 = a1;
      else
        v5 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v6 = __CocoaSet.makeIterator()(v5);
      v7 = type metadata accessor for CalculateExpression(0);
      v8 = sub_1005034A0((unint64_t *)&unk_1013E8820, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
      v9 = Set.Iterator.init(_cocoa:)(v31, v6, v7, v8);
      a1 = v31[0];
      v28 = v31[1];
      v10 = v31[2];
      v11 = v31[3];
      v12 = v31[4];
    }
    else
    {
      v13 = -1 << *(_BYTE *)(a1 + 32);
      v28 = a1 + 56;
      v10 = ~v13;
      v14 = -v13;
      if (v14 < 64)
        v15 = ~(-1 << v14);
      else
        v15 = -1;
      v12 = v15 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      v11 = 0;
    }
    v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v11 << 6);
        v19 = v11;
      }
      else
      {
        v24 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          return;
        }
        if (v24 >= v16)
          goto LABEL_42;
        v25 = *(_QWORD *)(v28 + 8 * v24);
        v19 = v11 + 1;
        if (!v25)
        {
          v19 = v11 + 2;
          if (v11 + 2 >= v16)
            goto LABEL_42;
          v25 = *(_QWORD *)(v28 + 8 * v19);
          if (!v25)
          {
            v19 = v11 + 3;
            if (v11 + 3 >= v16)
              goto LABEL_42;
            v25 = *(_QWORD *)(v28 + 8 * v19);
            if (!v25)
            {
              v19 = v11 + 4;
              if (v11 + 4 >= v16)
                goto LABEL_42;
              v25 = *(_QWORD *)(v28 + 8 * v19);
              if (!v25)
              {
                v19 = v11 + 5;
                if (v11 + 5 >= v16)
                  goto LABEL_42;
                v25 = *(_QWORD *)(v28 + 8 * v19);
                if (!v25)
                {
                  v26 = v11 + 6;
                  while (v16 != v26)
                  {
                    v25 = *(_QWORD *)(v28 + 8 * v26++);
                    if (v25)
                    {
                      v19 = v26 - 1;
                      goto LABEL_38;
                    }
                  }
LABEL_42:
                  sub_1004D284C(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_38:
        v17 = (v25 - 1) & v25;
        v18 = __clz(__rbit64(v25)) + (v19 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v18);
      swift_retain(v23);
      if (!v23)
        goto LABEL_42;
      while (1)
      {
        v27 = sub_100B27A18(v23);
        swift_release(v23);
        swift_release(v27);
        v11 = v19;
        v12 = v17;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          v21 = v20;
          v29 = v20;
          v22 = type metadata accessor for CalculateExpression(0);
          swift_unknownObjectRetain(v21);
          swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
          v23 = v30;
          swift_unknownObjectRelease(v21);
          v19 = v11;
          v17 = v12;
          if (v23)
            continue;
        }
        goto LABEL_42;
      }
    }
  }
  if (v3 < 0)
    v4 = *v1;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v4))
    goto LABEL_8;
}

void sub_100DB6AD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_1004B804C((uint64_t *)&unk_1013E3620);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_24;
      v22 = *(_QWORD *)(v25 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_24;
        v22 = *(_QWORD *)(v25 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v17)
            goto LABEL_24;
          v22 = *(_QWORD *)(v25 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    sub_100B281B0((uint64_t)v9, (uint64_t)v5);
    sub_1004CB800((uint64_t)v5, (uint64_t *)&unk_1013E3620);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v23 = v21 + 4;
  if (v23 >= v17)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_100DB6D34(uint64_t a1)
{
  sub_100DB6D50(a1, (uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, (uint64_t *)&unk_101407260, (void (*)(char *))sub_100B28DFC);
}

void sub_100DB6D50(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, void (*a4)(char *))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  void (*v31)(char *);

  v31 = a4;
  v7 = a2(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - v9;
  v11 = sub_1004B804C(a3);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v28 - v15;
  if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
    return;
  v17 = *(_QWORD *)(a1 + 56);
  v29 = a1 + 56;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v30 = (unint64_t)(v18 + 63) >> 6;
  v21 = swift_bridgeObjectRetain(a1);
  v22 = 0;
  if (!v20)
    goto LABEL_6;
LABEL_5:
  v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))(v16, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v8 + 72) * i, v7, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7) == 1)
      goto LABEL_26;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v16, v7);
    v31(v10);
    sub_1004CB800((uint64_t)v14, a3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (v20)
      goto LABEL_5;
LABEL_6:
    v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v25 >= v30)
      goto LABEL_25;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v22;
    if (!v26)
    {
      v22 = v25 + 1;
      if (v25 + 1 >= v30)
        goto LABEL_25;
      v26 = *(_QWORD *)(v29 + 8 * v22);
      if (!v26)
      {
        v22 = v25 + 2;
        if (v25 + 2 >= v30)
          goto LABEL_25;
        v26 = *(_QWORD *)(v29 + 8 * v22);
        if (!v26)
        {
          v22 = v25 + 3;
          if (v25 + 3 >= v30)
            goto LABEL_25;
          v26 = *(_QWORD *)(v29 + 8 * v22);
          if (!v26)
            break;
        }
      }
    }
LABEL_21:
    v20 = (v26 - 1) & v26;
  }
  v27 = v25 + 4;
  if (v27 >= v30)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))(v16, 1, 1, v7, v21);
LABEL_26:
    swift_release(a1);
    return;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v22 = v27;
    goto LABEL_21;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v30)
      goto LABEL_25;
    v26 = *(_QWORD *)(v29 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
}

void sub_100DB7020(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t (*a4)(id, __n128))
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  __n128 v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD v38[5];

  v8 = *v4;
  if ((*v4 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v8 + 16))
      return;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v10 = a1;
      else
        v10 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v11 = __CocoaSet.makeIterator()(v10);
      v12 = a2(0);
      v13 = sub_1005034A0(a3, 255, a2, (uint64_t)&protocol conformance descriptor for NSObject);
      v14 = Set.Iterator.init(_cocoa:)(v38, v11, v12, v13);
      a1 = v38[0];
      v35 = v38[1];
      v15 = v38[2];
      v16 = v38[3];
      v17 = v38[4];
    }
    else
    {
      v18 = -1 << *(_BYTE *)(a1 + 32);
      v35 = a1 + 56;
      v15 = ~v18;
      v19 = -v18;
      if (v19 < 64)
        v20 = ~(-1 << v19);
      else
        v20 = -1;
      v17 = v20 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      v16 = 0;
    }
    v21 = (unint64_t)(v15 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v17)
      {
        v22 = (v17 - 1) & v17;
        v23 = __clz(__rbit64(v17)) | (v16 << 6);
        v24 = v16;
      }
      else
      {
        v30 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
          return;
        }
        if (v30 >= v21)
          goto LABEL_42;
        v31 = *(_QWORD *)(v35 + 8 * v30);
        v24 = v16 + 1;
        if (!v31)
        {
          v24 = v16 + 2;
          if (v16 + 2 >= v21)
            goto LABEL_42;
          v31 = *(_QWORD *)(v35 + 8 * v24);
          if (!v31)
          {
            v24 = v16 + 3;
            if (v16 + 3 >= v21)
              goto LABEL_42;
            v31 = *(_QWORD *)(v35 + 8 * v24);
            if (!v31)
            {
              v24 = v16 + 4;
              if (v16 + 4 >= v21)
                goto LABEL_42;
              v31 = *(_QWORD *)(v35 + 8 * v24);
              if (!v31)
              {
                v24 = v16 + 5;
                if (v16 + 5 >= v21)
                  goto LABEL_42;
                v31 = *(_QWORD *)(v35 + 8 * v24);
                if (!v31)
                {
                  v32 = v16 + 6;
                  while (v21 != v32)
                  {
                    v31 = *(_QWORD *)(v35 + 8 * v32++);
                    if (v31)
                    {
                      v24 = v32 - 1;
                      goto LABEL_38;
                    }
                  }
LABEL_42:
                  sub_1004D284C(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_38:
        v22 = (v31 - 1) & v31;
        v23 = __clz(__rbit64(v31)) + (v24 << 6);
      }
      v28 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v23);
      if (!v28)
        goto LABEL_42;
      while (1)
      {
        v33 = (void *)a4(v28, v29);

        v16 = v24;
        v17 = v22;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v25 = __CocoaSet.Iterator.next()(v14);
        if (v25)
        {
          v26 = v25;
          v36 = v25;
          v27 = a2(0);
          swift_unknownObjectRetain(v26);
          swift_dynamicCast(&v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
          v28 = v37;
          v29 = swift_unknownObjectRelease(v26);
          v24 = v16;
          v22 = v17;
          if (v28)
            continue;
        }
        goto LABEL_42;
      }
    }
  }
  if (v8 < 0)
    v9 = *v4;
  else
    v9 = v8 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v9))
    goto LABEL_8;
}

void *sub_100DB730C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  void *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;

  v4 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v60 = (char *)&v54 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v61 = a1;
  v62 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v63 = v15;
  v64 = 0;
  v65 = v17 & v14;
  v59 = (char *)(a2 + 56);
  v22 = v18;
  v23 = swift_bridgeObjectRetain(v18);
  v24 = 0;
  v55 = v6;
  v58 = a2;
  v56 = v20;
  v57 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v25 = (v20 - 1) & v20;
  v26 = __clz(__rbit64(v20)) | (v24 << 6);
  v27 = v24;
  v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v26, v7, v23);
  v29 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1, v7);
    v61 = v22;
    v62 = v28;
    v63 = v21;
    v64 = v27;
    v65 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_1004D284C(v22);
      sub_1004CB800((uint64_t)v6, (uint64_t *)&unk_1013E1A50);
      return (void *)v58;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v60, v6, v7);
    v33 = v58;
    v34 = *(_QWORD *)(v58 + 40);
    v35 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    v37 = -1 << *(_BYTE *)(v33 + 32);
    v38 = v36 & ~v37;
    if (((*(_QWORD *)&v59[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) != 0)
      break;
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v44(v60, v7);
    v24 = v64;
    v20 = v65;
    v22 = v61;
    v19 = v62;
    v21 = v63;
    v6 = v55;
    v56 = v65;
    v57 = v64;
    if (v65)
      goto LABEL_6;
LABEL_8:
    v27 = v24 + 1;
    if (__OFADD__(v24, 1))
      __break(1u);
    v28 = v19;
    v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30)
      goto LABEL_26;
    v31 = *(_QWORD *)(v19 + 8 * v27);
    if (v31)
      goto LABEL_11;
    v24 += 2;
    if (v27 + 1 >= v30)
      goto LABEL_36;
    v31 = *(_QWORD *)(v19 + 8 * v24);
    if (v31)
      goto LABEL_14;
    if (v27 + 2 >= v30)
    {
LABEL_26:
      v25 = 0;
      v29 = 1;
      v27 = v24;
    }
    else
    {
      v31 = *(_QWORD *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2;
        goto LABEL_11;
      }
      v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        v25 = 0;
        v29 = 1;
        v27 += 2;
      }
      else
      {
        v31 = *(_QWORD *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          v27 = v24;
LABEL_11:
          v25 = (v31 - 1) & v31;
          v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }
        v27 += 4;
        if (v27 >= v30)
          goto LABEL_26;
        v31 = *(_QWORD *)(v19 + 8 * v27);
        if (v31)
          goto LABEL_11;
        v27 = v30 - 1;
        v32 = v57 + 6;
        while (v30 != v32)
        {
          v31 = *(_QWORD *)(v19 + 8 * v32++);
          if (v31)
          {
            v27 = v32 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v25 = 0;
        v29 = 1;
      }
    }
  }
  v39 = v33;
  v40 = ~v37;
  v41 = *(_QWORD *)(v8 + 72);
  v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v11, *(_QWORD *)(v39 + 48) + v41 * v38, v7);
    sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v60);
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
    v44(v11, v7);
    if ((v43 & 1) != 0)
      break;
    v38 = (v38 + 1) & v40;
    if (((*(_QWORD *)&v59[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v44)(v60, v7);
  v46 = *(_BYTE *)(v39 + 32);
  v47 = v46 & 0x3F;
  v48 = (1 << v46) + 63;
  v49 = v48 >> 6;
  v50 = 8 * (v48 >> 6);
  if (v47 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v48 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0), v59, v50);
    v51 = sub_100DBA774((unint64_t *)((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0)), v49, v39, v38, &v61);
    swift_release(v39);
    sub_1004D284C(v61);
  }
  else
  {
    v53 = (void *)swift_slowAlloc(v50, -1);
    memcpy(v53, v59, v50);
    v51 = sub_100DBA774((unint64_t *)v53, v49, v39, v38, &v61);
    swift_release(v39);
    sub_1004D284C(v61);
    swift_slowDealloc(v53, -1, -1);
  }
  return v51;
}

void *sub_100DB78D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, __n128);
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t isStackAllocationSafe;
  char v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[9];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  _QWORD v76[5];

  v68 = type metadata accessor for UUID(0);
  v63 = *(_QWORD *)(v68 - 8);
  v4 = __chkstk_darwin(v68);
  v65 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v67 = (char *)&v62 - v6;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = type metadata accessor for CRLTransactableHashableWrapper();
    v11 = sub_1005034A0((unint64_t *)&qword_101405D90, v10, (uint64_t (*)(uint64_t))type metadata accessor for CRLTransactableHashableWrapper, (uint64_t)&unk_100F393F8);
    v12 = Set.Iterator.init(_cocoa:)(v76, v8, v9, v11);
    a1 = v76[0];
    v13 = v76[1];
    v15 = v76[2];
    v14 = v76[3];
    v16 = v76[4];
  }
  else
  {
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v13 = a1 + 56;
    v15 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v16 = v19 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v14 = 0;
  }
  v71 = a1;
  v72 = v13;
  v73 = v15;
  v74 = v14;
  v75 = v16;
  v66 = (char *)(a2 + 56);
  v62 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    if ((a1 & 0x8000000000000000) == 0)
    {
      if (v16)
      {
        v20 = (v16 - 1) & v16;
        v21 = __clz(__rbit64(v16)) | (v14 << 6);
LABEL_17:
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v21);
        swift_retain(v22);
        goto LABEL_18;
      }
      v46 = v14 + 1;
      if (__OFADD__(v14, 1))
        __break(1u);
      v47 = (unint64_t)(v15 + 64) >> 6;
      if (v46 >= v47)
      {
        v22 = 0;
        v20 = 0;
        goto LABEL_18;
      }
      v48 = *(_QWORD *)(v72 + 8 * v46);
      if (v48)
      {
LABEL_30:
        v20 = (v48 - 1) & v48;
        v21 = __clz(__rbit64(v48)) + (v46 << 6);
        v14 = v46;
        goto LABEL_17;
      }
      v49 = v14 + 2;
      if (v14 + 2 >= v47)
        goto LABEL_46;
      v48 = *(_QWORD *)(v72 + 8 * v49);
      if (v48)
      {
LABEL_34:
        v46 = v49;
        goto LABEL_30;
      }
      if (v14 + 3 < v47)
      {
        v48 = *(_QWORD *)(v72 + 8 * (v14 + 3));
        if (v48)
        {
          v46 = v14 + 3;
          goto LABEL_30;
        }
        v49 = v14 + 4;
        if (v14 + 4 >= v47)
        {
          v22 = 0;
          v20 = 0;
          v14 += 3;
LABEL_18:
          v74 = v14;
          v75 = v20;
          if (!v22)
            goto LABEL_55;
          goto LABEL_22;
        }
        v48 = *(_QWORD *)(v72 + 8 * v49);
        if (v48)
          goto LABEL_34;
        v46 = v14 + 5;
        if (v14 + 5 < v47)
        {
          v48 = *(_QWORD *)(v72 + 8 * v46);
          if (v48)
            goto LABEL_30;
          v46 = v47 - 1;
          v50 = v14 + 6;
          while (v47 != v50)
          {
            v48 = *(_QWORD *)(v72 + 8 * v50++);
            if (v48)
            {
              v46 = v50 - 1;
              goto LABEL_30;
            }
          }
LABEL_46:
          v22 = 0;
          v20 = 0;
          v14 = v46;
          goto LABEL_18;
        }
      }
      v22 = 0;
      v20 = 0;
      v14 = v49;
      goto LABEL_18;
    }
    v23 = __CocoaSet.Iterator.next()(v12);
    if (!v23)
      goto LABEL_56;
    v24 = v23;
    v69 = v23;
    v25 = type metadata accessor for CRLTransactableHashableWrapper();
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(v70, &v69, v62, v25, 7);
    v22 = v70[0];
    swift_unknownObjectRelease(v24);
    if (!v22)
    {
LABEL_55:
      a1 = v71;
LABEL_56:
      sub_1004D284C(a1);
      return (void *)a2;
    }
LABEL_22:
    Hasher.init(_seed:)(v70, *(_QWORD *)(a2 + 40));
    v26 = *(_QWORD *)(v22 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v22 + 16));
    v28 = v67;
    (*(void (**)(uint64_t, uint64_t))(v26 + 32))(ObjectType, v26);
    v29 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = v68;
    dispatch thunk of Hashable.hash(into:)(v70, v68, v29);
    v31 = *(void (**)(char *, uint64_t))(v63 + 8);
    v31(v28, v30);
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(a2 + 32);
    v34 = v32 & ~v33;
    if (((*(_QWORD *)&v66[(v34 >> 3) & 0xFFFFFFFFFFFFF8] >> v34) & 1) != 0)
      break;
LABEL_13:
    swift_release(v22);
    a1 = v71;
    v15 = v73;
    v14 = v74;
    v16 = v75;
  }
  v64 = ~v33;
  while (1)
  {
    v35 = a2;
    v36 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v34);
    v37 = *(_QWORD *)(v36 + 24);
    v38 = swift_getObjectType(*(_QWORD *)(v36 + 16));
    v39 = *(void (**)(uint64_t, uint64_t, __n128))(v37 + 32);
    v40 = swift_retain(v36);
    v41 = v67;
    v39(v38, v37, v40);
    v42 = *(_QWORD *)(v22 + 24);
    v43 = swift_getObjectType(*(_QWORD *)(v22 + 16));
    v44 = v65;
    (*(void (**)(uint64_t, uint64_t))(v42 + 32))(v43, v42);
    LOBYTE(v42) = static UUID.== infix(_:_:)(v41);
    v45 = v68;
    v31(v44, v68);
    v31(v41, v45);
    swift_release(v36);
    if ((v42 & 1) != 0)
      break;
    v34 = (v34 + 1) & v64;
    a2 = v35;
    if (((*(_QWORD *)&v66[(v34 >> 3) & 0xFFFFFFFFFFFFF8] >> v34) & 1) == 0)
      goto LABEL_13;
  }
  swift_release(v22);
  v52 = *(_BYTE *)(v35 + 32);
  v53 = v52 & 0x3F;
  v54 = (1 << v52) + 63;
  v55 = v54 >> 6;
  v56 = 8 * (v54 >> 6);
  if (v53 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v54 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v62 - ((v56 + 15) & 0x3FFFFFFFFFFFFFF0), v66, v56);
    sub_100DBABC0((unint64_t *)((char *)&v62 - ((v56 + 15) & 0x3FFFFFFFFFFFFFF0)), v55, v35, v34, &v71);
    v58 = v57;
    swift_release(v35);
    sub_1004D284C(v71);
  }
  else
  {
    v59 = (void *)swift_slowAlloc(v56, -1);
    memcpy(v59, v66, v56);
    sub_100DBABC0((unint64_t *)v59, v55, v35, v34, &v71);
    v58 = v60;
    swift_release(v35);
    sub_1004D284C(v71);
    swift_slowDealloc(v59, -1, -1);
  }
  return (void *)v58;
}

void *sub_100DB7F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[9];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v43 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v41 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v42 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v42)
          goto LABEL_47;
        v13 = *(_QWORD *)(v43 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v42)
            goto LABEL_47;
          v13 = *(_QWORD *)(v43 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v42)
              goto LABEL_47;
            v13 = *(_QWORD *)(v43 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v42)
                goto LABEL_47;
              v13 = *(_QWORD *)(v43 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v42)
                {
LABEL_47:
                  sub_1004D284C(a1);
                  return (void *)v2;
                }
                v13 = *(_QWORD *)(v43 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v42)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v43 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v44, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v44, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v17);
      v45 = a1;
      v46 = v43;
      v47 = v41;
      v48 = v9;
      v49 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v45 = a1;
      v46 = v43;
      v47 = v41;
      v48 = v9;
      v49 = v7;
      swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v41 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      sub_100DBBA30((unint64_t *)((char *)&v41 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v45);
      v37 = v36;
      swift_release(v2);
      sub_1004D284C(v45);
    }
    else
    {
      v38 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v38, (const void *)(v2 + 56), v35);
      sub_100DBBA30((unint64_t *)v38, v34, v2, v21, &v45);
      v37 = v39;
      swift_release(v2);
      sub_1004D284C(v45);
      swift_slowDealloc(v38, -1, -1);
    }
    return (void *)v37;
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
}

void *sub_100DB83E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v56;
  int64_t v57;
  int64_t v58;
  uint64_t isStackAllocationSafe;
  char v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD v80[9];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;

  v4 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v4);
  v74 = (uint64_t)v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v8 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v71 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)v71 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)v71 - v16;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v18 = -1 << *(_BYTE *)(a1 + 32);
  v20 = a1 + 56;
  v19 = *(_QWORD *)(a1 + 56);
  v21 = ~v18;
  v22 = -v18;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  else
    v23 = -1;
  v81 = a1;
  v82 = a1 + 56;
  v24 = v23 & v19;
  v83 = v21;
  v84 = 0;
  v85 = v23 & v19;
  v79 = (char *)(a2 + 56);
  swift_bridgeObjectRetain(a1);
  v25 = v24;
  v26 = v21;
  v27 = 0;
  v75 = v6;
  v72 = a2;
  while (1)
  {
    v78 = v20;
    v71[2] = v25;
    v71[1] = v27;
    if (v25)
    {
      v28 = v26;
      v76 = (v25 - 1) & v25;
      v77 = v27;
      v29 = __clz(__rbit64(v25)) | (v27 << 6);
LABEL_9:
      v30 = v74;
      sub_1004E1B3C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v6 + 72) * v29, v74);
      v31 = 0;
      v32 = a1;
      goto LABEL_16;
    }
    v33 = v27 + 1;
    if (__OFADD__(v27, 1))
      __break(1u);
    v34 = (unint64_t)(v26 + 64) >> 6;
    if (v33 >= v34)
    {
      v28 = v26;
      v76 = 0;
      v77 = v27;
    }
    else
    {
      v35 = *(_QWORD *)(v20 + 8 * v33);
      if (v35)
        goto LABEL_13;
      v57 = v27 + 2;
      if (v27 + 2 >= v34)
      {
        v77 = v27 + 1;
      }
      else
      {
        v35 = *(_QWORD *)(v20 + 8 * v57);
        if (v35)
          goto LABEL_30;
        if (v27 + 3 >= v34)
          goto LABEL_44;
        v35 = *(_QWORD *)(v20 + 8 * (v27 + 3));
        if (v35)
        {
          v33 = v27 + 3;
          goto LABEL_13;
        }
        v57 = v27 + 4;
        if (v27 + 4 >= v34)
        {
          v28 = v26;
          v76 = 0;
          v77 = v27 + 3;
          goto LABEL_15;
        }
        v35 = *(_QWORD *)(v20 + 8 * v57);
        if (v35)
        {
LABEL_30:
          v33 = v57;
LABEL_13:
          v28 = v26;
          v76 = (v35 - 1) & v35;
          v77 = v33;
          v29 = __clz(__rbit64(v35)) + (v33 << 6);
          goto LABEL_9;
        }
        v33 = v27 + 5;
        if (v27 + 5 >= v34)
        {
LABEL_44:
          v28 = v26;
          v76 = 0;
          v77 = v57;
          goto LABEL_15;
        }
        v35 = *(_QWORD *)(v20 + 8 * v33);
        if (v35)
          goto LABEL_13;
        v58 = v27 + 6;
        while (v34 != v58)
        {
          v35 = *(_QWORD *)(v20 + 8 * v58++);
          if (v35)
          {
            v33 = v58 - 1;
            goto LABEL_13;
          }
        }
        v77 = v34 - 1;
      }
      v28 = v26;
      v76 = 0;
    }
LABEL_15:
    v31 = 1;
    v32 = a1;
    v30 = v74;
LABEL_16:
    v36 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v30, v31, 1, v73);
    v81 = v32;
    v82 = v78;
    v83 = v28;
    v84 = v77;
    v85 = v76;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v30, 1, v36) == 1)
    {
      sub_1004D284C(v32);
      sub_1004CB800(v30, &qword_1013E0270);
      return (void *)v72;
    }
    sub_1004DB5FC(v30, (uint64_t)v17);
    v37 = v72;
    Hasher.init(_seed:)(v80, *(_QWORD *)(v72 + 40));
    v38 = type metadata accessor for UUID(0);
    v39 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v80, v38, v39);
    v78 = type metadata accessor for CRLBoardIdentifierStorage(0);
    v40 = &v17[*(int *)(v78 + 20)];
    v41 = *(_QWORD *)v40;
    v42 = *((_QWORD *)v40 + 1);
    swift_bridgeObjectRetain(v42);
    String.hash(into:)(v80, v41, v42);
    swift_bridgeObjectRelease();
    v43 = Hasher._finalize()();
    v44 = -1 << *(_BYTE *)(v37 + 32);
    v45 = v43 & ~v44;
    if (((*(_QWORD *)&v79[(v45 >> 3) & 0xFFFFFFFFFFFFF8] >> v45) & 1) != 0)
      break;
LABEL_6:
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
    v27 = v84;
    v25 = v85;
    a1 = v81;
    v20 = v82;
    v26 = v83;
    v6 = v75;
  }
  v46 = v37;
  v47 = ~v44;
  v48 = *(_QWORD *)(v75 + 72);
  while (1)
  {
    sub_1004E1B3C(*(_QWORD *)(v46 + 48) + v48 * v45, (uint64_t)v14);
    v49 = static UUID.== infix(_:_:)(v14);
    sub_1004E1B3C((uint64_t)v14, (uint64_t)v11);
    sub_1004E1B3C((uint64_t)v17, (uint64_t)v8);
    if ((v49 & 1) == 0)
    {
      sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      goto LABEL_20;
    }
    v50 = *(int *)(v78 + 20);
    v51 = *(_QWORD *)&v11[v50];
    v52 = *(_QWORD *)&v11[v50 + 8];
    v53 = &v8[v50];
    v54 = *((_QWORD *)v53 + 1);
    if (v51 == *(_QWORD *)v53 && v52 == v54)
      break;
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, *(_QWORD *)v53, v54, 0);
    sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    if ((v56 & 1) != 0)
      goto LABEL_49;
LABEL_20:
    v45 = (v45 + 1) & v47;
    if (((*(_QWORD *)&v79[(v45 >> 3) & 0xFFFFFFFFFFFFF8] >> v45) & 1) == 0)
      goto LABEL_6;
  }
  sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
LABEL_49:
  isStackAllocationSafe = sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
  v61 = *(_BYTE *)(v46 + 32);
  v62 = v61 & 0x3F;
  v63 = (1 << v61) + 63;
  v64 = v63 >> 6;
  v65 = 8 * (v63 >> 6);
  if (v62 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v63 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)v71 - ((v65 + 15) & 0x3FFFFFFFFFFFFFF0), v79, v65);
    sub_100DBB498((_QWORD *)((char *)v71 - ((v65 + 15) & 0x3FFFFFFFFFFFFFF0)), v64, v46, v45, &v81);
    v67 = v66;
    swift_release(v46);
    sub_1004D284C(v81);
    return (void *)v67;
  }
  else
  {
    v68 = (void *)swift_slowAlloc(v65, -1);
    memcpy(v68, v79, v65);
    sub_100DBB498((unint64_t *)v68, v64, v46, v45, &v81);
    v70 = v69;
    swift_release(v46);
    sub_1004D284C(v81);
    swift_slowDealloc(v68, -1, -1);
    return (void *)v70;
  }
}

void *sub_100DB8B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  void *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;

  v4 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v60 = (char *)&v54 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v61 = a1;
  v62 = a1 + 64;
  v18 = a1;
  v19 = a1 + 64;
  v20 = v17 & v14;
  v21 = v15;
  v63 = v15;
  v64 = 0;
  v65 = v17 & v14;
  v59 = (char *)(a2 + 56);
  v22 = v18;
  v23 = swift_bridgeObjectRetain(v18);
  v24 = 0;
  v55 = v6;
  v58 = a2;
  v56 = v20;
  v57 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v25 = (v20 - 1) & v20;
  v26 = __clz(__rbit64(v20)) | (v24 << 6);
  v27 = v24;
  v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v26, v7, v23);
  v29 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1, v7);
    v61 = v22;
    v62 = v28;
    v63 = v21;
    v64 = v27;
    v65 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_1004D284C(v22);
      sub_1004CB800((uint64_t)v6, (uint64_t *)&unk_1013E1A50);
      return (void *)v58;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v60, v6, v7);
    v33 = v58;
    v34 = *(_QWORD *)(v58 + 40);
    v35 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    v37 = -1 << *(_BYTE *)(v33 + 32);
    v38 = v36 & ~v37;
    if (((*(_QWORD *)&v59[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) != 0)
      break;
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v44(v60, v7);
    v24 = v64;
    v20 = v65;
    v22 = v61;
    v19 = v62;
    v21 = v63;
    v6 = v55;
    v56 = v65;
    v57 = v64;
    if (v65)
      goto LABEL_6;
LABEL_8:
    v27 = v24 + 1;
    if (__OFADD__(v24, 1))
      __break(1u);
    v28 = v19;
    v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30)
      goto LABEL_26;
    v31 = *(_QWORD *)(v19 + 8 * v27);
    if (v31)
      goto LABEL_11;
    v24 += 2;
    if (v27 + 1 >= v30)
      goto LABEL_36;
    v31 = *(_QWORD *)(v19 + 8 * v24);
    if (v31)
      goto LABEL_14;
    if (v27 + 2 >= v30)
    {
LABEL_26:
      v25 = 0;
      v29 = 1;
      v27 = v24;
    }
    else
    {
      v31 = *(_QWORD *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2;
        goto LABEL_11;
      }
      v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        v25 = 0;
        v29 = 1;
        v27 += 2;
      }
      else
      {
        v31 = *(_QWORD *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          v27 = v24;
LABEL_11:
          v25 = (v31 - 1) & v31;
          v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }
        v27 += 4;
        if (v27 >= v30)
          goto LABEL_26;
        v31 = *(_QWORD *)(v19 + 8 * v27);
        if (v31)
          goto LABEL_11;
        v27 = v30 - 1;
        v32 = v57 + 6;
        while (v30 != v32)
        {
          v31 = *(_QWORD *)(v19 + 8 * v32++);
          if (v31)
          {
            v27 = v32 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v25 = 0;
        v29 = 1;
      }
    }
  }
  v39 = v33;
  v40 = ~v37;
  v41 = *(_QWORD *)(v8 + 72);
  v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v11, *(_QWORD *)(v39 + 48) + v41 * v38, v7);
    sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v60);
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
    v44(v11, v7);
    if ((v43 & 1) != 0)
      break;
    v38 = (v38 + 1) & v40;
    if (((*(_QWORD *)&v59[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v44)(v60, v7);
  v46 = *(_BYTE *)(v39 + 32);
  v47 = v46 & 0x3F;
  v48 = (1 << v46) + 63;
  v49 = v48 >> 6;
  v50 = 8 * (v48 >> 6);
  if (v47 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v48 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0), v59, v50);
    v51 = sub_100DBB038((unint64_t *)((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0)), v49, v39, v38, &v61);
    swift_release(v39);
    sub_1004D284C(v61);
  }
  else
  {
    v53 = (void *)swift_slowAlloc(v50, -1);
    memcpy(v53, v59, v50);
    v51 = sub_100DBB038((unint64_t *)v53, v49, v39, v38, &v61);
    swift_release(v39);
    sub_1004D284C(v61);
    swift_slowDealloc(v53, -1, -1);
  }
  return v51;
}

void *sub_100DB90DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v56;
  int64_t v57;
  int64_t v58;
  uint64_t isStackAllocationSafe;
  char v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD v80[9];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;

  v4 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v4);
  v74 = (uint64_t)v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v8 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v71 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)v71 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)v71 - v16;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v18 = -1 << *(_BYTE *)(a1 + 32);
  v20 = a1 + 64;
  v19 = *(_QWORD *)(a1 + 64);
  v21 = ~v18;
  v22 = -v18;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  else
    v23 = -1;
  v81 = a1;
  v82 = a1 + 64;
  v24 = v23 & v19;
  v83 = v21;
  v84 = 0;
  v85 = v23 & v19;
  v79 = (char *)(a2 + 56);
  swift_bridgeObjectRetain(a1);
  v25 = v24;
  v26 = v21;
  v27 = 0;
  v75 = v6;
  v72 = a2;
  while (1)
  {
    v78 = v20;
    v71[2] = v25;
    v71[1] = v27;
    if (v25)
    {
      v28 = v26;
      v76 = (v25 - 1) & v25;
      v77 = v27;
      v29 = __clz(__rbit64(v25)) | (v27 << 6);
LABEL_9:
      v30 = v74;
      sub_1004E1B3C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v6 + 72) * v29, v74);
      v31 = 0;
      v32 = a1;
      goto LABEL_16;
    }
    v33 = v27 + 1;
    if (__OFADD__(v27, 1))
      __break(1u);
    v34 = (unint64_t)(v26 + 64) >> 6;
    if (v33 >= v34)
    {
      v28 = v26;
      v76 = 0;
      v77 = v27;
    }
    else
    {
      v35 = *(_QWORD *)(v20 + 8 * v33);
      if (v35)
        goto LABEL_13;
      v57 = v27 + 2;
      if (v27 + 2 >= v34)
      {
        v77 = v27 + 1;
      }
      else
      {
        v35 = *(_QWORD *)(v20 + 8 * v57);
        if (v35)
          goto LABEL_30;
        if (v27 + 3 >= v34)
          goto LABEL_44;
        v35 = *(_QWORD *)(v20 + 8 * (v27 + 3));
        if (v35)
        {
          v33 = v27 + 3;
          goto LABEL_13;
        }
        v57 = v27 + 4;
        if (v27 + 4 >= v34)
        {
          v28 = v26;
          v76 = 0;
          v77 = v27 + 3;
          goto LABEL_15;
        }
        v35 = *(_QWORD *)(v20 + 8 * v57);
        if (v35)
        {
LABEL_30:
          v33 = v57;
LABEL_13:
          v28 = v26;
          v76 = (v35 - 1) & v35;
          v77 = v33;
          v29 = __clz(__rbit64(v35)) + (v33 << 6);
          goto LABEL_9;
        }
        v33 = v27 + 5;
        if (v27 + 5 >= v34)
        {
LABEL_44:
          v28 = v26;
          v76 = 0;
          v77 = v57;
          goto LABEL_15;
        }
        v35 = *(_QWORD *)(v20 + 8 * v33);
        if (v35)
          goto LABEL_13;
        v58 = v27 + 6;
        while (v34 != v58)
        {
          v35 = *(_QWORD *)(v20 + 8 * v58++);
          if (v35)
          {
            v33 = v58 - 1;
            goto LABEL_13;
          }
        }
        v77 = v34 - 1;
      }
      v28 = v26;
      v76 = 0;
    }
LABEL_15:
    v31 = 1;
    v32 = a1;
    v30 = v74;
LABEL_16:
    v36 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v30, v31, 1, v73);
    v81 = v32;
    v82 = v78;
    v83 = v28;
    v84 = v77;
    v85 = v76;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v30, 1, v36) == 1)
    {
      sub_1004D284C(v32);
      sub_1004CB800(v30, &qword_1013E0270);
      return (void *)v72;
    }
    sub_1004DB5FC(v30, (uint64_t)v17);
    v37 = v72;
    Hasher.init(_seed:)(v80, *(_QWORD *)(v72 + 40));
    v38 = type metadata accessor for UUID(0);
    v39 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v80, v38, v39);
    v78 = type metadata accessor for CRLBoardIdentifierStorage(0);
    v40 = &v17[*(int *)(v78 + 20)];
    v41 = *(_QWORD *)v40;
    v42 = *((_QWORD *)v40 + 1);
    swift_bridgeObjectRetain(v42);
    String.hash(into:)(v80, v41, v42);
    swift_bridgeObjectRelease();
    v43 = Hasher._finalize()();
    v44 = -1 << *(_BYTE *)(v37 + 32);
    v45 = v43 & ~v44;
    if (((*(_QWORD *)&v79[(v45 >> 3) & 0xFFFFFFFFFFFFF8] >> v45) & 1) != 0)
      break;
LABEL_6:
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
    v27 = v84;
    v25 = v85;
    a1 = v81;
    v20 = v82;
    v26 = v83;
    v6 = v75;
  }
  v46 = v37;
  v47 = ~v44;
  v48 = *(_QWORD *)(v75 + 72);
  while (1)
  {
    sub_1004E1B3C(*(_QWORD *)(v46 + 48) + v48 * v45, (uint64_t)v14);
    v49 = static UUID.== infix(_:_:)(v14);
    sub_1004E1B3C((uint64_t)v14, (uint64_t)v11);
    sub_1004E1B3C((uint64_t)v17, (uint64_t)v8);
    if ((v49 & 1) == 0)
    {
      sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      goto LABEL_20;
    }
    v50 = *(int *)(v78 + 20);
    v51 = *(_QWORD *)&v11[v50];
    v52 = *(_QWORD *)&v11[v50 + 8];
    v53 = &v8[v50];
    v54 = *((_QWORD *)v53 + 1);
    if (v51 == *(_QWORD *)v53 && v52 == v54)
      break;
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, *(_QWORD *)v53, v54, 0);
    sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    if ((v56 & 1) != 0)
      goto LABEL_49;
LABEL_20:
    v45 = (v45 + 1) & v47;
    if (((*(_QWORD *)&v79[(v45 >> 3) & 0xFFFFFFFFFFFFF8] >> v45) & 1) == 0)
      goto LABEL_6;
  }
  sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
LABEL_49:
  isStackAllocationSafe = sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
  v61 = *(_BYTE *)(v46 + 32);
  v62 = v61 & 0x3F;
  v63 = (1 << v61) + 63;
  v64 = v63 >> 6;
  v65 = 8 * (v63 >> 6);
  if (v62 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v63 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)v71 - ((v65 + 15) & 0x3FFFFFFFFFFFFFF0), v79, v65);
    sub_100DBB498((_QWORD *)((char *)v71 - ((v65 + 15) & 0x3FFFFFFFFFFFFFF0)), v64, v46, v45, &v81);
    v67 = v66;
    swift_release(v46);
    sub_1004D284C(v81);
    return (void *)v67;
  }
  else
  {
    v68 = (void *)swift_slowAlloc(v65, -1);
    memcpy(v68, v79, v65);
    sub_100DBB498((unint64_t *)v68, v64, v46, v45, &v81);
    v70 = v69;
    swift_release(v46);
    sub_1004D284C(v81);
    swift_slowDealloc(v68, -1, -1);
    return (void *)v70;
  }
}

void *sub_100DB9810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[9];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 64);
    v43 = a1 + 64;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v41 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v42 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v42)
          goto LABEL_47;
        v13 = *(_QWORD *)(v43 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v42)
            goto LABEL_47;
          v13 = *(_QWORD *)(v43 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v42)
              goto LABEL_47;
            v13 = *(_QWORD *)(v43 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v42)
                goto LABEL_47;
              v13 = *(_QWORD *)(v43 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v42)
                {
LABEL_47:
                  sub_1004D284C(a1);
                  return (void *)v2;
                }
                v13 = *(_QWORD *)(v43 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v42)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v43 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v44, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v44, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v17);
      v45 = a1;
      v46 = v43;
      v47 = v41;
      v48 = v9;
      v49 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v45 = a1;
      v46 = v43;
      v47 = v41;
      v48 = v9;
      v49 = v7;
      swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v41 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      sub_100DBBA30((unint64_t *)((char *)&v41 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v45);
      v37 = v36;
      swift_release(v2);
      sub_1004D284C(v45);
    }
    else
    {
      v38 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v38, (const void *)(v2 + 56), v35);
      sub_100DBBA30((unint64_t *)v38, v34, v2, v21, &v45);
      v37 = v39;
      swift_release(v2);
      sub_1004D284C(v45);
      swift_slowDealloc(v38, -1, -1);
    }
    return (void *)v37;
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
}

void *sub_100DB9C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  void *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;

  v4 = sub_1004B804C((uint64_t *)&unk_101407260);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v60 = (char *)&v54 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v61 = a1;
  v62 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v63 = v15;
  v64 = 0;
  v65 = v17 & v14;
  v59 = (char *)(a2 + 56);
  v22 = v18;
  v23 = swift_bridgeObjectRetain(v18);
  v24 = 0;
  v55 = v6;
  v58 = a2;
  v56 = v20;
  v57 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v25 = (v20 - 1) & v20;
  v26 = __clz(__rbit64(v20)) | (v24 << 6);
  v27 = v24;
  v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v26, v7, v23);
  v29 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1, v7);
    v61 = v22;
    v62 = v28;
    v63 = v21;
    v64 = v27;
    v65 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_1004D284C(v22);
      sub_1004CB800((uint64_t)v6, (uint64_t *)&unk_101407260);
      return (void *)v58;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v60, v6, v7);
    v33 = v58;
    v34 = *(_QWORD *)(v58 + 40);
    v35 = sub_1005034A0(&qword_101405480, 255, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    v37 = -1 << *(_BYTE *)(v33 + 32);
    v38 = v36 & ~v37;
    if (((*(_QWORD *)&v59[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) != 0)
      break;
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v44(v60, v7);
    v24 = v64;
    v20 = v65;
    v22 = v61;
    v19 = v62;
    v21 = v63;
    v6 = v55;
    v56 = v65;
    v57 = v64;
    if (v65)
      goto LABEL_6;
LABEL_8:
    v27 = v24 + 1;
    if (__OFADD__(v24, 1))
      __break(1u);
    v28 = v19;
    v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30)
      goto LABEL_26;
    v31 = *(_QWORD *)(v19 + 8 * v27);
    if (v31)
      goto LABEL_11;
    v24 += 2;
    if (v27 + 1 >= v30)
      goto LABEL_36;
    v31 = *(_QWORD *)(v19 + 8 * v24);
    if (v31)
      goto LABEL_14;
    if (v27 + 2 >= v30)
    {
LABEL_26:
      v25 = 0;
      v29 = 1;
      v27 = v24;
    }
    else
    {
      v31 = *(_QWORD *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2;
        goto LABEL_11;
      }
      v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        v25 = 0;
        v29 = 1;
        v27 += 2;
      }
      else
      {
        v31 = *(_QWORD *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          v27 = v24;
LABEL_11:
          v25 = (v31 - 1) & v31;
          v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }
        v27 += 4;
        if (v27 >= v30)
          goto LABEL_26;
        v31 = *(_QWORD *)(v19 + 8 * v27);
        if (v31)
          goto LABEL_11;
        v27 = v30 - 1;
        v32 = v57 + 6;
        while (v30 != v32)
        {
          v31 = *(_QWORD *)(v19 + 8 * v32++);
          if (v31)
          {
            v27 = v32 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v25 = 0;
        v29 = 1;
      }
    }
  }
  v39 = v33;
  v40 = ~v37;
  v41 = *(_QWORD *)(v8 + 72);
  v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v11, *(_QWORD *)(v39 + 48) + v41 * v38, v7);
    sub_1005034A0(&qword_101405D30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v43 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v60);
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
    v44(v11, v7);
    if ((v43 & 1) != 0)
      break;
    v38 = (v38 + 1) & v40;
    if (((*(_QWORD *)&v59[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v44)(v60, v7);
  v46 = *(_BYTE *)(v39 + 32);
  v47 = v46 & 0x3F;
  v48 = (1 << v46) + 63;
  v49 = v48 >> 6;
  v50 = 8 * (v48 >> 6);
  if (v47 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v48 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0), v59, v50);
    v51 = sub_100DBBD0C((unint64_t *)((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0)), v49, v39, v38, &v61);
    swift_release(v39);
    sub_1004D284C(v61);
  }
  else
  {
    v53 = (void *)swift_slowAlloc(v50, -1);
    memcpy(v53, v59, v50);
    v51 = sub_100DBBD0C((unint64_t *)v53, v49, v39, v38, &v61);
    swift_release(v39);
    sub_1004D284C(v61);
    swift_slowDealloc(v53, -1, -1);
  }
  return v51;
}

void *sub_100DBA23C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  id v35;
  char v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  uint64_t isStackAllocationSafe;
  char v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  _QWORD v62[5];

  v5 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v7 = a1;
  v54 = a5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = a3(0);
    v12 = sub_1005034A0(a4, 255, a3, (uint64_t)&protocol conformance descriptor for NSObject);
    v13 = Set.Iterator.init(_cocoa:)(v62, v10, v11, v12);
    v7 = v62[0];
    v14 = v62[1];
    v16 = v62[2];
    v15 = v62[3];
    v17 = v62[4];
  }
  else
  {
    v18 = -1 << *(_BYTE *)(a1 + 32);
    v14 = a1 + 56;
    v16 = ~v18;
    v19 = -v18;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v17 = v20 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v15 = 0;
  }
  v57 = v7;
  v58 = v14;
  v59 = v16;
  v60 = v15;
  v61 = v17;
  v21 = v5 + 56;
  while (1)
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      if (v17)
      {
        v22 = (v17 - 1) & v17;
        v23 = __clz(__rbit64(v17)) | (v15 << 6);
LABEL_17:
        v24 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v23);
        v25 = v24;
        goto LABEL_18;
      }
      v37 = v15 + 1;
      if (__OFADD__(v15, 1))
        __break(1u);
      v38 = (unint64_t)(v16 + 64) >> 6;
      if (v37 >= v38)
      {
        v24 = 0;
        v22 = 0;
        goto LABEL_18;
      }
      v39 = *(_QWORD *)(v58 + 8 * v37);
      if (v39)
      {
LABEL_31:
        v22 = (v39 - 1) & v39;
        v23 = __clz(__rbit64(v39)) + (v37 << 6);
        v15 = v37;
        goto LABEL_17;
      }
      v40 = v15 + 2;
      if (v15 + 2 >= v38)
        goto LABEL_47;
      v39 = *(_QWORD *)(v58 + 8 * v40);
      if (v39)
      {
LABEL_35:
        v37 = v40;
        goto LABEL_31;
      }
      if (v15 + 3 < v38)
      {
        v39 = *(_QWORD *)(v58 + 8 * (v15 + 3));
        if (v39)
        {
          v37 = v15 + 3;
          goto LABEL_31;
        }
        v40 = v15 + 4;
        if (v15 + 4 >= v38)
        {
          v24 = 0;
          v22 = 0;
          v15 += 3;
LABEL_18:
          v60 = v15;
          v61 = v22;
          if (!v24)
            goto LABEL_56;
          goto LABEL_22;
        }
        v39 = *(_QWORD *)(v58 + 8 * v40);
        if (v39)
          goto LABEL_35;
        v37 = v15 + 5;
        if (v15 + 5 < v38)
        {
          v39 = *(_QWORD *)(v58 + 8 * v37);
          if (v39)
            goto LABEL_31;
          v37 = v38 - 1;
          v41 = v15 + 6;
          while (v38 != v41)
          {
            v39 = *(_QWORD *)(v58 + 8 * v41++);
            if (v39)
            {
              v37 = v41 - 1;
              goto LABEL_31;
            }
          }
LABEL_47:
          v24 = 0;
          v22 = 0;
          v15 = v37;
          goto LABEL_18;
        }
      }
      v24 = 0;
      v22 = 0;
      v15 = v40;
      goto LABEL_18;
    }
    v26 = __CocoaSet.Iterator.next()(v13);
    if (!v26)
      goto LABEL_57;
    v27 = v26;
    v55 = v26;
    v28 = a3(0);
    swift_unknownObjectRetain(v27);
    swift_dynamicCast(&v56, &v55, (char *)&type metadata for Swift.AnyObject + 8, v28, 7);
    v24 = v56;
    swift_unknownObjectRelease(v27);
    if (!v24)
    {
LABEL_56:
      v7 = v57;
LABEL_57:
      sub_1004D284C(v7);
      return (void *)v5;
    }
LABEL_22:
    v29 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v5 + 40));
    v30 = -1 << *(_BYTE *)(v5 + 32);
    v31 = v29 & ~v30;
    if (((*(_QWORD *)(v21 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
      goto LABEL_13;
    a3(0);
    v32 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v31);
    v33 = static NSObject.== infix(_:_:)(v32, v24);

    if ((v33 & 1) != 0)
      break;
    v34 = ~v30;
    while (1)
    {
      v31 = (v31 + 1) & v34;
      if (((*(_QWORD *)(v21 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
        break;
      v35 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v31);
      v36 = static NSObject.== infix(_:_:)(v35, v24);

      if ((v36 & 1) != 0)
        goto LABEL_50;
    }
LABEL_13:

    v7 = v57;
    v16 = v59;
    v15 = v60;
    v17 = v61;
  }
LABEL_50:

  v43 = *(_BYTE *)(v5 + 32);
  v44 = v43 & 0x3F;
  v45 = (1 << v43) + 63;
  v46 = v45 >> 6;
  v47 = 8 * (v45 >> 6);
  if (v44 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v45 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v53 - ((v47 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v5 + 56), v47);
    sub_100DBC158((uint64_t)&v53 - ((v47 + 15) & 0x3FFFFFFFFFFFFFF0), v46, v5, v31, &v57, a3, v54);
    v49 = v48;
    swift_release(v5);
    sub_1004D284C(v57);
  }
  else
  {
    v50 = (void *)swift_slowAlloc(v47, -1);
    memcpy(v50, (const void *)(v5 + 56), v47);
    sub_100DBC158((uint64_t)v50, v46, v5, v31, &v57, a3, v54);
    v49 = v51;
    swift_release(v5);
    sub_1004D284C(v57);
    swift_slowDealloc(v50, -1, -1);
  }
  return (void *)v49;
}

void *sub_100DBA774(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  char v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;

  v50 = a2;
  v9 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v14);
  v58 = (char *)&v49 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v52 = a1;
  v53 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v56 = a3 + 56;
  v57 = a3;
  v54 = a5;
  while (2)
  {
    v51 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v55 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v42 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v43 = (unint64_t)(v27 + 64) >> 6;
        if (v42 >= v43)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v44 = *(_QWORD *)(v25 + 8 * v42);
        if (v44)
          goto LABEL_17;
        if (v26 + 2 >= v43)
          goto LABEL_34;
        v44 = *(_QWORD *)(v25 + 8 * (v26 + 2));
        if (v44)
        {
          v42 = v26 + 2;
LABEL_17:
          v29 = (v44 - 1) & v44;
          v30 = __clz(__rbit64(v44)) + (v42 << 6);
          v26 = v42;
          goto LABEL_7;
        }
        if (v26 + 3 >= v43)
        {
          v29 = 0;
          v31 = 1;
          v26 += 2;
          goto LABEL_8;
        }
        v44 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v44)
        {
          v42 = v26 + 3;
          goto LABEL_17;
        }
        v42 = v26 + 4;
        if (v26 + 4 < v43)
        {
          v44 = *(_QWORD *)(v25 + 8 * v42);
          if (v44)
            goto LABEL_17;
          v42 = v43 - 1;
          v47 = v26 + 5;
          while (v43 != v47)
          {
            v44 = *(_QWORD *)(v25 + 8 * v47++);
            if (v44)
            {
              v42 = v47 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          v29 = 0;
          v31 = 1;
          v26 = v42;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v55;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_1004CB800((uint64_t)v11, (uint64_t *)&unk_1013E1A50);
          v48 = v57;
          swift_retain(v57);
          return (void *)sub_100CD7E88(v52, v50, v51, v48);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v58, v11, v12);
        v32 = v57;
        v33 = *(_QWORD *)(v57 + 40);
        v34 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = (void *)v23(v58, v12);
        v11 = v53;
        a5 = v54;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(_QWORD *)(v57 + 48) + v39 * v37, v12);
        sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v41 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v58);
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v41 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      result = (void *)v23(v58, v12);
      v45 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v53;
      v46 = *(unint64_t *)((char *)v52 + v45);
      *(unint64_t *)((char *)v52 + v45) = v46 & ~(1 << v37);
      a5 = v54;
    }
    while ((v46 & (1 << v37)) == 0);
    v22 = v51 - 1;
    if (__OFSUB__(v51, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v51 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

void sub_100DBABC0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, __n128);
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[10];
  uint64_t v67;

  v56 = a2;
  v64 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v64 - 8);
  v9 = __chkstk_darwin(v64);
  v62 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v55 - v12;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v16 = *(unint64_t *)((char *)a1 + v15) & ((-1 << a4) - 1);
  v58 = a1;
  *(unint64_t *)((char *)a1 + v15) = v16;
  v17 = v14 - 1;
  v65 = a3;
  v63 = a3 + 56;
  v59 = (char *)&type metadata for Swift.AnyObject + 8;
  v60 = a5;
  while (2)
  {
    v57 = v17;
    do
    {
      while (1)
      {
        if ((*a5 & 0x8000000000000000) == 0)
        {
          v19 = a5[3];
          v18 = a5[4];
          if (v18)
          {
            v20 = (v18 - 1) & v18;
            v21 = __clz(__rbit64(v18)) | (v19 << 6);
LABEL_7:
            v22 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v21);
            swift_retain(v22);
            goto LABEL_8;
          }
          v48 = v19 + 1;
          if (__OFADD__(v19, 1))
          {
            __break(1u);
            goto LABEL_46;
          }
          v49 = (unint64_t)(a5[2] + 64) >> 6;
          if (v48 >= v49)
          {
            v22 = 0;
            v20 = 0;
            goto LABEL_8;
          }
          v50 = a5[1];
          v51 = *(_QWORD *)(v50 + 8 * v48);
          if (v51)
          {
LABEL_22:
            v20 = (v51 - 1) & v51;
            v21 = __clz(__rbit64(v51)) + (v48 << 6);
            v19 = v48;
            goto LABEL_7;
          }
          v52 = v19 + 2;
          if (v19 + 2 >= v49)
            goto LABEL_38;
          v51 = *(_QWORD *)(v50 + 8 * v52);
          if (v51)
          {
LABEL_26:
            v48 = v52;
            goto LABEL_22;
          }
          if (v19 + 3 < v49)
          {
            v51 = *(_QWORD *)(v50 + 8 * (v19 + 3));
            if (v51)
            {
              v48 = v19 + 3;
              goto LABEL_22;
            }
            v52 = v19 + 4;
            if (v19 + 4 >= v49)
            {
              v22 = 0;
              v20 = 0;
              v19 += 3;
LABEL_8:
              a5[3] = v19;
              a5[4] = v20;
              if (!v22)
                goto LABEL_44;
              goto LABEL_12;
            }
            v51 = *(_QWORD *)(v50 + 8 * v52);
            if (v51)
              goto LABEL_26;
            v48 = v19 + 5;
            if (v19 + 5 < v49)
            {
              v51 = *(_QWORD *)(v50 + 8 * v48);
              if (v51)
                goto LABEL_22;
              v48 = v49 - 1;
              v53 = v19 + 6;
              while (v49 != v53)
              {
                v51 = *(_QWORD *)(v50 + 8 * v53++);
                if (v51)
                {
                  v48 = v53 - 1;
                  goto LABEL_22;
                }
              }
LABEL_38:
              v22 = 0;
              v20 = 0;
              v19 = v48;
              goto LABEL_8;
            }
          }
          v22 = 0;
          v20 = 0;
          v19 = v52;
          goto LABEL_8;
        }
        v23 = __CocoaSet.Iterator.next()(v11);
        if (!v23
          || (v24 = v23,
              v67 = v23,
              v25 = type metadata accessor for CRLTransactableHashableWrapper(),
              swift_unknownObjectRetain(v24),
              swift_dynamicCast(v66, &v67, v59, v25, 7),
              v22 = v66[0],
              swift_unknownObjectRelease(v24),
              !v22))
        {
LABEL_44:
          v54 = v65;
          swift_retain(v65);
          sub_100CD7B48(v58, v56, v57, v54);
          return;
        }
LABEL_12:
        v26 = v65;
        Hasher.init(_seed:)(v66, *(_QWORD *)(v65 + 40));
        v27 = *(_QWORD *)(v22 + 24);
        ObjectType = swift_getObjectType(*(_QWORD *)(v22 + 16));
        (*(void (**)(uint64_t, uint64_t))(v27 + 32))(ObjectType, v27);
        v29 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v30 = v64;
        dispatch thunk of Hashable.hash(into:)(v66, v64, v29);
        v31 = *(void (**)(char *, uint64_t))(v61 + 8);
        v31(v13, v30);
        v32 = Hasher._finalize()();
        v33 = -1 << *(_BYTE *)(v26 + 32);
        v34 = v32 & ~v33;
        if (((*(_QWORD *)(v63 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) != 0)
          break;
LABEL_3:
        swift_release(v22);
        a5 = v60;
      }
      v35 = ~v33;
      while (1)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v65 + 48) + 8 * v34);
        v37 = *(_QWORD *)(v36 + 24);
        v38 = swift_getObjectType(*(_QWORD *)(v36 + 16));
        v39 = *(void (**)(uint64_t, uint64_t, __n128))(v37 + 32);
        v40 = swift_retain(v36);
        v39(v38, v37, v40);
        v41 = *(_QWORD *)(v22 + 24);
        v42 = swift_getObjectType(*(_QWORD *)(v22 + 16));
        v43 = v62;
        (*(void (**)(uint64_t, uint64_t))(v41 + 32))(v42, v41);
        v44 = static UUID.== infix(_:_:)(v13);
        v45 = v64;
        v31(v43, v64);
        v31(v13, v45);
        swift_release(v36);
        if ((v44 & 1) != 0)
          break;
        v34 = (v34 + 1) & v35;
        if (((*(_QWORD *)(v63 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
          goto LABEL_3;
      }
      swift_release(v22);
      v46 = (v34 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v47 = *(unint64_t *)((char *)v58 + v46);
      *(unint64_t *)((char *)v58 + v46) = v47 & ~(1 << v34);
      a5 = v60;
    }
    while ((v47 & (1 << v34)) == 0);
    v17 = v57 - 1;
    if (__OFSUB__(v57, 1))
    {
LABEL_46:
      __break(1u);
      return;
    }
    if (v57 != 1)
      continue;
    break;
  }
}

void *sub_100DBB038(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  char v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v51 = a2;
  v9 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v14);
  v59 = (char *)&v50 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v53 = a1;
  v54 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v57 = a3 + 56;
  v58 = a3;
  v55 = a5;
  while (2)
  {
    v52 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v56 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v42 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = (unint64_t)(v27 + 64) >> 6;
        if (v42 >= v43)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v44 = *(_QWORD *)(v25 + 8 * v42);
        if (v44)
          goto LABEL_17;
        v47 = v26 + 2;
        if (v26 + 2 >= v43)
          goto LABEL_35;
        v44 = *(_QWORD *)(v25 + 8 * v47);
        if (v44)
          goto LABEL_23;
        if (v26 + 3 >= v43)
          goto LABEL_36;
        v44 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v44)
        {
          v42 = v26 + 3;
          goto LABEL_17;
        }
        v47 = v26 + 4;
        if (v26 + 4 < v43)
        {
          v44 = *(_QWORD *)(v25 + 8 * v47);
          if (v44)
          {
LABEL_23:
            v42 = v47;
LABEL_17:
            v29 = (v44 - 1) & v44;
            v30 = __clz(__rbit64(v44)) + (v42 << 6);
            v26 = v42;
            goto LABEL_7;
          }
          v42 = v26 + 5;
          if (v26 + 5 < v43)
          {
            v44 = *(_QWORD *)(v25 + 8 * v42);
            if (v44)
              goto LABEL_17;
            v42 = v43 - 1;
            v48 = v26 + 6;
            while (v43 != v48)
            {
              v44 = *(_QWORD *)(v25 + 8 * v48++);
              if (v44)
              {
                v42 = v48 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            v29 = 0;
            v31 = 1;
            v26 = v42;
            goto LABEL_8;
          }
LABEL_36:
          v29 = 0;
          v31 = 1;
          v26 = v47;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_1004CB800((uint64_t)v11, (uint64_t *)&unk_1013E1A50);
          v49 = v58;
          swift_retain(v58);
          return (void *)sub_100CD7E88(v53, v51, v52, v49);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        v32 = v58;
        v33 = *(_QWORD *)(v58 + 40);
        v34 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = (void *)v23(v59, v12);
        v11 = v54;
        a5 = v55;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(_QWORD *)(v58 + 48) + v39 * v37, v12);
        sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v41 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59);
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v41 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      result = (void *)v23(v59, v12);
      v45 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v54;
      v46 = *(unint64_t *)((char *)v53 + v45);
      *(unint64_t *)((char *)v53 + v45) = v46 & ~(1 << v37);
      a5 = v55;
    }
    while ((v46 & (1 << v37)) == 0);
    v22 = v52 - 1;
    if (__OFSUB__(v52, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v52 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

void sub_100DBB498(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char v59;
  int64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[10];
  uint64_t v82;

  v69 = a2;
  v9 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v9);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v74);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v68 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v68 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v68 - v21;
  v23 = *(_QWORD *)(a3 + 16);
  v24 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v25 = -1 << a4;
  v27 = v26;
  v28 = *(unint64_t *)((char *)a1 + v24) & (v25 - 1);
  v71 = a1;
  v72 = v11;
  *(unint64_t *)((char *)a1 + v24) = v28;
  v29 = (uint64_t)v11;
  v30 = v23 - 1;
  v82 = a3;
  v80 = a3 + 56;
  v73 = a5;
  v75 = v26;
  do
  {
    v70 = v30;
    do
    {
      while (1)
      {
        v32 = *a5;
        v31 = a5[1];
        v33 = a5[2];
        v34 = a5[3];
        v35 = a5[4];
        v78 = v33;
        v79 = v31;
        if (v35)
        {
          v76 = (v35 - 1) & v35;
          v77 = v34;
          v36 = __clz(__rbit64(v35)) | (v34 << 6);
LABEL_6:
          sub_1004E1B3C(*(_QWORD *)(v32 + 48) + *(_QWORD *)(v27 + 72) * v36, v29);
          v37 = 0;
          goto LABEL_7;
        }
        v60 = v34 + 1;
        if (__OFADD__(v34, 1))
        {
          __break(1u);
LABEL_49:
          __break(1u);
          return;
        }
        v61 = (unint64_t)(v33 + 64) >> 6;
        if (v60 >= v61)
        {
          v76 = 0;
          v77 = v34;
          v37 = 1;
          goto LABEL_7;
        }
        v62 = *(_QWORD *)(v31 + 8 * v60);
        if (v62)
          goto LABEL_22;
        v65 = v34 + 2;
        if (v34 + 2 >= v61)
          goto LABEL_41;
        v62 = *(_QWORD *)(v31 + 8 * v65);
        if (v62)
          goto LABEL_29;
        if (v34 + 3 >= v61)
          goto LABEL_42;
        v62 = *(_QWORD *)(v31 + 8 * (v34 + 3));
        if (v62)
        {
          v60 = v34 + 3;
          goto LABEL_22;
        }
        v65 = v34 + 4;
        if (v34 + 4 < v61)
        {
          v62 = *(_QWORD *)(v31 + 8 * v65);
          if (v62)
          {
LABEL_29:
            v60 = v65;
LABEL_22:
            v76 = (v62 - 1) & v62;
            v77 = v60;
            v36 = __clz(__rbit64(v62)) + (v60 << 6);
            goto LABEL_6;
          }
          v60 = v34 + 5;
          if (v34 + 5 < v61)
          {
            v62 = *(_QWORD *)(v31 + 8 * v60);
            if (v62)
              goto LABEL_22;
            v60 = v61 - 1;
            v66 = v34 + 6;
            while (v61 != v66)
            {
              v62 = *(_QWORD *)(v31 + 8 * v66++);
              if (v62)
              {
                v60 = v66 - 1;
                goto LABEL_22;
              }
            }
LABEL_41:
            v76 = 0;
            v77 = v60;
            v37 = 1;
            goto LABEL_7;
          }
LABEL_42:
          v76 = 0;
          v77 = v65;
          v37 = 1;
          goto LABEL_7;
        }
        v76 = 0;
        v77 = v34 + 3;
        v37 = 1;
LABEL_7:
        v38 = v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v29, v37, 1, v74);
        v39 = v79;
        *a5 = v32;
        a5[1] = v39;
        v40 = v77;
        a5[2] = v78;
        a5[3] = v40;
        a5[4] = v76;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v29, 1, v38) == 1)
        {
          sub_1004CB800(v29, &qword_1013E0270);
          v67 = v82;
          swift_retain(v82);
          sub_100CD814C(v71, v69, v70, v67);
          return;
        }
        sub_1004DB5FC(v29, (uint64_t)v22);
        v41 = v82;
        Hasher.init(_seed:)(v81, *(_QWORD *)(v82 + 40));
        v42 = type metadata accessor for UUID(0);
        v43 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v81, v42, v43);
        v79 = type metadata accessor for CRLBoardIdentifierStorage(0);
        v44 = &v22[*(int *)(v79 + 20)];
        v46 = *(_QWORD *)v44;
        v45 = *((_QWORD *)v44 + 1);
        swift_bridgeObjectRetain(v45);
        String.hash(into:)(v81, v46, v45);
        swift_bridgeObjectRelease();
        v47 = Hasher._finalize()();
        v48 = -1 << *(_BYTE *)(v41 + 32);
        v49 = v47 & ~v48;
        if (((*(_QWORD *)(v80 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0)
          break;
LABEL_3:
        sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLBoardIdentifier);
        v29 = (uint64_t)v72;
        a5 = v73;
        v27 = v75;
      }
      v50 = ~v48;
      v51 = *(_QWORD *)(v75 + 72);
      while (1)
      {
        sub_1004E1B3C(*(_QWORD *)(v82 + 48) + v51 * v49, (uint64_t)v19);
        v52 = static UUID.== infix(_:_:)(v19);
        sub_1004E1B3C((uint64_t)v19, (uint64_t)v16);
        sub_1004E1B3C((uint64_t)v22, (uint64_t)v13);
        if ((v52 & 1) == 0)
        {
          sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
          goto LABEL_11;
        }
        v53 = *(int *)(v79 + 20);
        v54 = *(_QWORD *)&v16[v53];
        v55 = *(_QWORD *)&v16[v53 + 8];
        v56 = &v13[v53];
        v57 = *((_QWORD *)v56 + 1);
        if (v54 == *(_QWORD *)v56 && v55 == v57)
          break;
        v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, *(_QWORD *)v56, v57, 0);
        sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
        if ((v59 & 1) != 0)
          goto LABEL_25;
LABEL_11:
        v49 = (v49 + 1) & v50;
        if (((*(_QWORD *)(v80 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          goto LABEL_3;
      }
      sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
LABEL_25:
      sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLBoardIdentifier);
      v63 = (v49 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v29 = (uint64_t)v72;
      v64 = *(unint64_t *)((char *)v71 + v63);
      *(unint64_t *)((char *)v71 + v63) = v64 & ~(1 << v49);
      a5 = v73;
      v27 = v75;
    }
    while ((v64 & (1 << v49)) == 0);
    v30 = v70 - 1;
    if (__OFSUB__(v70, 1))
      goto LABEL_49;
  }
  while (v70 != 1);
}

void sub_100DBBA30(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v39;
  _QWORD v41[9];
  uint64_t v42;

  v7 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v42 = a3 + 56;
  while (2)
  {
    v39 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          v14 = (unint64_t)(a5[2] + 64) >> 6;
          v15 = a5[3];
          if (v13 >= v14)
            goto LABEL_43;
          v16 = a5[1];
          v17 = *(_QWORD *)(v16 + 8 * v13);
          if (!v17)
          {
            v15 = v9 + 1;
            if (v9 + 2 >= v14)
              goto LABEL_43;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              v13 = v9 + 2;
            }
            else
            {
              v15 = v9 + 2;
              if (v9 + 3 >= v14)
                goto LABEL_43;
              v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                v13 = v9 + 3;
              }
              else
              {
                v13 = v9 + 4;
                v15 = v9 + 3;
                if (v9 + 4 >= v14)
                  goto LABEL_43;
                v17 = *(_QWORD *)(v16 + 8 * v13);
                if (!v17)
                {
                  v15 = v14 - 1;
                  v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    v17 = *(_QWORD *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain(a3);
                  sub_100CD7EAC(a1, a2, v39, a3);
                  return;
                }
              }
            }
          }
LABEL_21:
          v11 = (v17 - 1) & v17;
          v12 = __clz(__rbit64(v17)) + (v13 << 6);
          v9 = v13;
        }
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v41, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v41, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v42 + 8 * (v24 >> 6))) != 0)
          break;
LABEL_3:
        swift_bridgeObjectRelease(v20);
      }
      v27 = *(_QWORD *)(a3 + 48);
      v28 = (_QWORD *)(v27 + 16 * v24);
      v29 = v28[1];
      v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) == 0)
      {
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v42 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      swift_bridgeObjectRelease(v20);
LABEL_29:
      v31 = a1[v25];
      a1[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v39 - 1;
    if (__OFSUB__(v39, 1))
    {
LABEL_45:
      __break(1u);
      return;
    }
    if (v39 != 1)
      continue;
    break;
  }
}

void *sub_100DBBD0C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  char v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;

  v50 = a2;
  v9 = sub_1004B804C((uint64_t *)&unk_101407260);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IndexPath(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v14);
  v58 = (char *)&v49 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v52 = a1;
  v53 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v56 = a3 + 56;
  v57 = a3;
  v54 = a5;
  while (2)
  {
    v51 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v55 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v42 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v43 = (unint64_t)(v27 + 64) >> 6;
        if (v42 >= v43)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v44 = *(_QWORD *)(v25 + 8 * v42);
        if (v44)
          goto LABEL_17;
        if (v26 + 2 >= v43)
          goto LABEL_34;
        v44 = *(_QWORD *)(v25 + 8 * (v26 + 2));
        if (v44)
        {
          v42 = v26 + 2;
LABEL_17:
          v29 = (v44 - 1) & v44;
          v30 = __clz(__rbit64(v44)) + (v42 << 6);
          v26 = v42;
          goto LABEL_7;
        }
        if (v26 + 3 >= v43)
        {
          v29 = 0;
          v31 = 1;
          v26 += 2;
          goto LABEL_8;
        }
        v44 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v44)
        {
          v42 = v26 + 3;
          goto LABEL_17;
        }
        v42 = v26 + 4;
        if (v26 + 4 < v43)
        {
          v44 = *(_QWORD *)(v25 + 8 * v42);
          if (v44)
            goto LABEL_17;
          v42 = v43 - 1;
          v47 = v26 + 5;
          while (v43 != v47)
          {
            v44 = *(_QWORD *)(v25 + 8 * v47++);
            if (v44)
            {
              v42 = v47 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          v29 = 0;
          v31 = 1;
          v26 = v42;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v55;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_1004CB800((uint64_t)v11, (uint64_t *)&unk_101407260);
          v48 = v57;
          swift_retain(v57);
          return (void *)sub_100CD8DF0(v52, v50, v51, v48);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v58, v11, v12);
        v32 = v57;
        v33 = *(_QWORD *)(v57 + 40);
        v34 = sub_1005034A0(&qword_101405480, 255, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = (void *)v23(v58, v12);
        v11 = v53;
        a5 = v54;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(_QWORD *)(v57 + 48) + v39 * v37, v12);
        sub_1005034A0(&qword_101405D30, 255, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
        v41 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v58);
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v41 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      result = (void *)v23(v58, v12);
      v45 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v53;
      v46 = *(unint64_t *)((char *)v52 + v45);
      *(unint64_t *)((char *)v52 + v45) = v46 & ~(1 << v37);
      a5 = v54;
    }
    while ((v46 & (1 << v37)) == 0);
    v22 = v51 - 1;
    if (__OFSUB__(v51, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v51 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

void sub_100DBC158(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  id v30;
  char v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  __n128 v39;
  uint64_t v42;
  uint64_t v46;
  uint64_t v47;
  void *v48;

  v7 = a5;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v10 = v9 - 1;
  v46 = a3 + 56;
  while (2)
  {
    v42 = v10;
    do
    {
      while (1)
      {
        if ((*v7 & 0x8000000000000000) == 0)
        {
          v12 = v7[3];
          v11 = v7[4];
          if (v11)
          {
            v13 = (v11 - 1) & v11;
            v14 = __clz(__rbit64(v11)) | (v12 << 6);
LABEL_7:
            v15 = *(void **)(*(_QWORD *)(*v7 + 48) + 8 * v14);
            v16 = v15;
            goto LABEL_8;
          }
          v32 = v12 + 1;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
          v33 = (unint64_t)(v7[2] + 64) >> 6;
          if (v32 >= v33)
          {
            v15 = 0;
            v13 = 0;
            goto LABEL_8;
          }
          v34 = v7[1];
          v35 = *(_QWORD *)(v34 + 8 * v32);
          if (v35)
          {
LABEL_22:
            v13 = (v35 - 1) & v35;
            v14 = __clz(__rbit64(v35)) + (v32 << 6);
            v12 = v32;
            goto LABEL_7;
          }
          v37 = v12 + 2;
          if (v12 + 2 >= v33)
            goto LABEL_41;
          v35 = *(_QWORD *)(v34 + 8 * v37);
          if (v35)
          {
LABEL_29:
            v32 = v37;
            goto LABEL_22;
          }
          if (v12 + 3 < v33)
          {
            v35 = *(_QWORD *)(v34 + 8 * (v12 + 3));
            if (v35)
            {
              v32 = v12 + 3;
              goto LABEL_22;
            }
            v37 = v12 + 4;
            if (v12 + 4 >= v33)
            {
              v15 = 0;
              v13 = 0;
              v12 += 3;
LABEL_8:
              v7[3] = v12;
              v7[4] = v13;
              if (!v15)
                goto LABEL_47;
              goto LABEL_12;
            }
            v35 = *(_QWORD *)(v34 + 8 * v37);
            if (v35)
              goto LABEL_29;
            v32 = v12 + 5;
            if (v12 + 5 < v33)
            {
              v35 = *(_QWORD *)(v34 + 8 * v32);
              if (v35)
                goto LABEL_22;
              v32 = v33 - 1;
              v38 = v12 + 6;
              while (v33 != v38)
              {
                v35 = *(_QWORD *)(v34 + 8 * v38++);
                if (v35)
                {
                  v32 = v38 - 1;
                  goto LABEL_22;
                }
              }
LABEL_41:
              v15 = 0;
              v13 = 0;
              v12 = v32;
              goto LABEL_8;
            }
          }
          v15 = 0;
          v13 = 0;
          v12 = v37;
          goto LABEL_8;
        }
        v17 = __CocoaSet.Iterator.next()();
        if (!v17
          || (v18 = v17,
              v47 = v17,
              v19 = a6(0),
              swift_unknownObjectRetain(v18),
              swift_dynamicCast(&v48, &v47, (char *)&type metadata for Swift.AnyObject + 8, v19, 7),
              v15 = v48,
              swift_unknownObjectRelease(v18),
              !v15))
        {
LABEL_47:
          v39 = swift_retain(a3);
          a7(a1, a2, v42, a3, v39);
          return;
        }
LABEL_12:
        v20 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a3 + 40));
        v21 = -1 << *(_BYTE *)(a3 + 32);
        v22 = v20 & ~v21;
        v23 = v22 >> 6;
        v24 = 1 << v22;
        if (((1 << v22) & *(_QWORD *)(v46 + 8 * (v22 >> 6))) == 0)
          goto LABEL_3;
        a6(0);
        v25 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v22);
        v26 = static NSObject.== infix(_:_:)(v25, v15);

        if ((v26 & 1) != 0)
          break;
        v27 = ~v21;
        for (i = v22 + 1; ; i = v29 + 1)
        {
          v29 = i & v27;
          if (((*(_QWORD *)(v46 + (((i & v27) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v27)) & 1) == 0)
            break;
          v30 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v29);
          v31 = static NSObject.== infix(_:_:)(v30, v15);

          if ((v31 & 1) != 0)
          {

            v23 = v29 >> 6;
            v24 = 1 << v29;
            goto LABEL_25;
          }
        }
LABEL_3:

        v7 = a5;
      }

LABEL_25:
      v7 = a5;
      v36 = *(_QWORD *)(a1 + 8 * v23);
      *(_QWORD *)(a1 + 8 * v23) = v36 & ~v24;
    }
    while ((v24 & v36) == 0);
    v10 = v42 - 1;
    if (__OFSUB__(v42, 1))
    {
LABEL_49:
      __break(1u);
      return;
    }
    if (v42 != 1)
      continue;
    break;
  }
}

uint64_t sub_100DBC4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for CRLTransactableHashableWrapper();
  result = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a4;
  return result;
}

double sub_100DBC500(_QWORD *a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  id v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjectType;
  void (*v61)(_QWORD *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t inited;
  uint64_t (*v74)(void);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  double result;
  _QWORD *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  id v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124[24];
  uint64_t v125[3];
  _BYTE v126[32];

  LODWORD(v119) = a3;
  v121 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v121 - 8);
  v8 = __chkstk_darwin(v121);
  v114 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (unint64_t *)((char *)&v110 - v11);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v110 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v110 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v110 - v19;
  v21 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v22 = __chkstk_darwin(v21);
  v113 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v110 - v24;
  if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_active) != 1)
  {
    __break(1u);
LABEL_46:
    a2 = sub_100D0EC28(0, *(_QWORD *)(a2 + 16) + 1, 1, a2);
    *v12 = a2;
    goto LABEL_41;
  }
  v115 = v20;
  v116 = v12;
  v111 = v15;
  *(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableAffectedItemSetNeedsUpdate) = 1;
  v26 = type metadata accessor for CRLTransactableHashableWrapper();
  v27 = swift_allocObject(v26, 32, 7);
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = &off_10127C5E0;
  v117 = v7;
  v118 = v27;
  v120 = a1;
  v112 = v18;
  if ((a2 & 1) != 0)
  {
    v28 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, &v122, 0, 0);
    v29 = *v28;
    v110 = a1;
    swift_bridgeObjectRetain(v29);
    v30 = v27;
    v31 = sub_100621710(v27, v29);
    swift_bridgeObjectRelease(v29);
    if ((v31 & 1) != 0)
    {
      swift_beginAccess(v28, v126, 33, 0);
      v32 = sub_100B26B84(v30);
      swift_endAccess(v126);
      swift_release(v32);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableCreatedObjects, v126, 33, 0);
      v33 = sub_100B26B84(v30);
      swift_endAccess(v126);
      swift_release(v33);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, v126, 33, 0);
      v34 = sub_100846C6C(v30);
      swift_endAccess(v126);
      swift_unknownObjectRelease(v34);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects, v126, 33, 0);
      swift_retain(v30);
      sub_100AD58F8(v125, v30);
      swift_endAccess(v126);
      swift_release(v125[0]);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances, v126, 33, 0);
      swift_retain(v30);
      sub_100AD58F8(v125, v30);
      swift_endAccess(v126);
      v35 = swift_release(v125[0]);
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState) == 1)
      {
        v36 = v115;
        (*(void (**)(__n128))((swift_isaMask & *v110) + 0x88))(v35);
        swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds, v126, 33, 0);
        sub_100B26E60((uint64_t)v36, (uint64_t)v25);
        (*(void (**)(id, uint64_t))(v7 + 8))(v36, v121);
        sub_1004CB800((uint64_t)v25, (uint64_t *)&unk_1013E1A50);
        swift_endAccess(v126);
      }
      v37 = 1;
      v38 = v120;
      v39 = (char)v119;
      goto LABEL_18;
    }
  }
  else
  {
    swift_unknownObjectRetain(a1);
    v30 = v27;
  }
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, v126, 33, 0);
  v40 = sub_100846C6C(v30);
  v42 = v41;
  v43 = swift_endAccess(v126);
  v44 = v30;
  if (v40)
  {
    v45 = swift_allocObject(v26, 32, 7);
    *(_QWORD *)(v45 + 16) = v40;
    *(_QWORD *)(v45 + 24) = v42;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v126, 33, 0);
    swift_unknownObjectRetain(v40);
    sub_100AD58F8(v125, v45);
    swift_endAccess(v126);
    swift_unknownObjectRelease(v40);
    swift_release(v125[0]);
    v38 = v120;
    v46 = v121;
  }
  else
  {
    v38 = v120;
    v47 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v120) + 0x300))(v43);
    v49 = v48;
    v50 = swift_allocObject(v26, 32, 7);
    *(_QWORD *)(v50 + 16) = v47;
    *(_QWORD *)(v50 + 24) = v49;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v126, 33, 0);
    swift_unknownObjectRetain(v47);
    sub_100AD58F8(v125, v50);
    swift_endAccess(v126);
    swift_unknownObjectRelease(v47);
    swift_release(v125[0]);
    v46 = v121;
  }
  v39 = (char)v119;
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances, v126, 33, 0);
  swift_retain(v44);
  sub_100AD58F8(v125, v44);
  swift_endAccess(v126);
  v51 = swift_release(v125[0]);
  if ((a2 & 1) == 0 && (v39 & 1) == 0)
  {
    v52 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, v126, 0, 0);
    v53 = *v52;
    swift_bridgeObjectRetain(v53);
    v54 = sub_100621710(v44, v53);
    v51 = swift_bridgeObjectRelease(v53);
    if ((v54 & 1) != 0)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"objectDeleted(_:allowDeletingNewlyCreated:deletedAsOrphan:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 359, "A deleted object should not be listed as a created object", 57, 2u, (uint64_t)_swiftEmptyArrayStorage);
      v7 = v117;
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"objectDeleted(_:allowDeletingNewlyCreated:deletedAsOrphan:)", 59, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 359, (uint64_t)"A deleted object should not be listed as a created object", 57, 2u);
    }
  }
  if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState) == 1)
  {
    v55 = (uint64_t)v114;
    (*(void (**)(__n128))((swift_isaMask & *v38) + 0x88))(v51);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds, v125, 33, 0);
    v56 = v115;
    sub_100AD569C((uint64_t)v115, v55);
    (*(void (**)(id, uint64_t))(v7 + 8))(v56, v46);
    swift_endAccess(v125);
  }
  v37 = 0;
LABEL_18:
  v57 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v58 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v59 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner + 8);
  ObjectType = swift_getObjectType(v58);
  v61 = *(void (**)(_QWORD *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v59 + 32);
  swift_unknownObjectRetain(v58);
  v61(v38, &off_10127C5E0, v37, ObjectType, v59);
  swift_unknownObjectRelease(v58);
  if ((v39 & 1) == 0)
    goto LABEL_44;
  v62 = type metadata accessor for CRLBoardItem(0);
  v63 = (_QWORD *)swift_dynamicCastClass(v38, v62);
  if (v63)
  {
    v64 = v63;
    v65 = *(void (**)(uint64_t))((swift_isaMask & *v63) + 0xB8);
    v66 = swift_unknownObjectRetain(v38);
    v67 = (uint64_t)v113;
    v65(v66);
    v68 = v117;
    v69 = v121;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v67, 1, v121) == 1)
    {

      v63 = (_QWORD *)sub_1004CB800(v67, (uint64_t *)&unk_1013E1A50);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v112, v67, v69);
      v70 = v69;
      if (qword_1013DD8B8 != -1)
        swift_once(&qword_1013DD8B8, sub_100A06704);
      swift_beginAccess(&static OS_os_log.boardItemLifecycle, v124, 0, 0);
      v71 = (void *)static OS_os_log.boardItemLifecycle;
      v72 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v72, &v123);
      *(_OWORD *)(inited + 16) = xmmword_100EF7D10;
      v74 = *(uint64_t (**)(void))((swift_isaMask & *v64) + 0x88);
      v115 = v71;
      v75 = v111;
      v76 = v74();
      v77 = UUID.uuidString.getter(v76);
      v79 = v78;
      v119 = *(void (**)(char *, uint64_t))(v68 + 8);
      v119(v75, v70);
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v80 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v80;
      *(_QWORD *)(inited + 32) = v77;
      v114 = (char *)(inited + 32);
      *(_QWORD *)(inited + 40) = v79;
      v38 = v120;
      swift_unknownObjectRetain(v120);
      v81 = objc_msgSend(v64, "description");
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 104) = v80;
      *(_QWORD *)(inited + 72) = v82;
      *(_QWORD *)(inited + 80) = v84;
      v85 = v112;
      v87 = UUID.uuidString.getter(v86);
      *(_QWORD *)(inited + 136) = &type metadata for String;
      *(_QWORD *)(inited + 144) = v80;
      *(_QWORD *)(inited + 112) = v87;
      *(_QWORD *)(inited + 120) = v88;
      v89 = 1702195828;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_trackChanges))
        v90 = 1702195828;
      else
        v90 = 0x65736C6166;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_trackChanges))
        v91 = 0xE400000000000000;
      else
        v91 = 0xE500000000000000;
      *(_QWORD *)(inited + 176) = &type metadata for String;
      *(_QWORD *)(inited + 184) = v80;
      *(_QWORD *)(inited + 152) = v90;
      *(_QWORD *)(inited + 160) = v91;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable))
        v92 = 1702195828;
      else
        v92 = 0x65736C6166;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable))
        v93 = 0xE400000000000000;
      else
        v93 = 0xE500000000000000;
      *(_QWORD *)(inited + 216) = &type metadata for String;
      *(_QWORD *)(inited + 224) = v80;
      *(_QWORD *)(inited + 192) = v92;
      *(_QWORD *)(inited + 200) = v93;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState))
      {
        v94 = 0xE400000000000000;
      }
      else
      {
        v89 = 0x65736C6166;
        v94 = 0xE500000000000000;
      }
      *(_QWORD *)(inited + 256) = &type metadata for String;
      *(_QWORD *)(inited + 264) = v80;
      *(_QWORD *)(inited + 232) = v89;
      *(_QWORD *)(inited + 240) = v94;
      v95 = *v57;
      v96 = v57[1];
      v97 = swift_getObjectType(*v57);
      v125[0] = v95;
      v98 = dispatch thunk of CustomStringConvertible.description.getter(v97, *(_QWORD *)(v96 + 8));
      *(_QWORD *)(inited + 296) = &type metadata for String;
      *(_QWORD *)(inited + 304) = v80;
      *(_QWORD *)(inited + 272) = v98;
      *(_QWORD *)(inited + 280) = v99;
      v101 = static os_log_type_t.default.getter(v100);
      v102 = v115;
      sub_100A06EBC((uint64_t)v115, &_mh_execute_header, v101, "⭕ deleting orphan [%{public}@%{public}@] with parent [%{public}@] during transaction that is tracked: [%{public}@], undoable: [%{public}@], marking: [%{public}@] for owner: [%{public}@]", 187, 0, inited);
      swift_setDeallocating(inited);
      v103 = *(_QWORD *)(inited + 16);
      v104 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v114, v103, v104);

      v63 = (_QWORD *)((uint64_t (*)(char *, uint64_t))v119)(v85, v121);
    }
  }
  v15 = (char *)v116;
  (*(void (**)(_QWORD *))((swift_isaMask & *v38) + 0x88))(v63);
  v12 = (unint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedOrphans);
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedOrphans, v125, 33, 0);
  a2 = *v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  *v12 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_46;
LABEL_41:
  v106 = v117;
  v108 = *(_QWORD *)(a2 + 16);
  v107 = *(_QWORD *)(a2 + 24);
  if (v108 >= v107 >> 1)
  {
    a2 = sub_100D0EC28(v107 > 1, v108 + 1, 1, a2);
    *v12 = a2;
  }
  *(_QWORD *)(a2 + 16) = v108 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v106 + 32))(a2+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))+ *(_QWORD *)(v106 + 72) * v108, v15, v121);
  swift_endAccess(v125);
LABEL_44:
  *(_QWORD *)&result = swift_release(v118).n128_u64[0];
  return result;
}

double sub_100DBD020(char *a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(__n128);
  __n128 v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  char *v51;
  objc_class *v52;
  id v53;
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  void (*v61)(__n128);
  __n128 v62;
  uint64_t v63;
  id v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ObjectType;
  void (*v69)(char *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  void (*v73)(uint64_t);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t inited;
  uint64_t (*v81)(void);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(__n128);
  __n128 v114;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v116;
  unint64_t v117;
  double result;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  id v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  void (*v129)(char *, char *);
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char v133[24];
  uint64_t v134[3];
  objc_super v135;
  _BYTE v136[32];

  LODWORD(v129) = a3;
  v126 = type metadata accessor for UUID(0);
  v7 = *(unint64_t **)(v126 - 8);
  v8 = __chkstk_darwin(v126);
  v123 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v119 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v119 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v119 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v119 - v19;
  v21 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v22 = __chkstk_darwin(v21);
  v122 = (char *)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v119 - v24;
  if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_active) != 1)
  {
    __break(1u);
LABEL_47:
    a2 = sub_100D0EC28(0, *(_QWORD *)(a2 + 16) + 1, 1, a2);
    *v7 = a2;
    goto LABEL_42;
  }
  v124 = v20;
  v125 = v12;
  v120 = v15;
  v121 = v18;
  v128 = v7;
  *(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableAffectedItemSetNeedsUpdate) = 1;
  v26 = type metadata accessor for CRLTransactableHashableWrapper();
  v27 = swift_allocObject(v26, 32, 7);
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = &off_10127C5E0;
  v130 = a1;
  v127 = v27;
  if ((a2 & 1) != 0)
  {
    v28 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, &v131, 0, 0);
    v29 = *v28;
    v119 = a1;
    swift_bridgeObjectRetain(v29);
    v30 = v27;
    v31 = sub_100621710(v27, v29);
    swift_bridgeObjectRelease(v29);
    if ((v31 & 1) != 0)
    {
      swift_beginAccess(v28, v136, 33, 0);
      v32 = sub_100B26B84(v30);
      swift_endAccess(v136);
      swift_release(v32);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableCreatedObjects, v136, 33, 0);
      v33 = sub_100B26B84(v30);
      swift_endAccess(v136);
      swift_release(v33);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, v136, 33, 0);
      v34 = sub_100846C6C(v30);
      swift_endAccess(v136);
      swift_unknownObjectRelease(v34);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects, v136, 33, 0);
      swift_retain(v30);
      sub_100AD58F8(v134, v30);
      swift_endAccess(v136);
      swift_release(v134[0]);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances, v136, 33, 0);
      swift_retain(v30);
      sub_100AD58F8(v134, v30);
      swift_endAccess(v136);
      swift_release(v134[0]);
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState) == 1)
      {
        v35 = *(_QWORD *)&v119[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
        v36 = *(void (**)(__n128))(*(_QWORD *)v35 + 256);
        v37 = swift_retain(v35);
        v38 = v124;
        v36(v37);
        swift_release(v35);
        swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds, v136, 33, 0);
        sub_100B26E60((uint64_t)v38, (uint64_t)v25);
        v39 = (char *)v126;
        ((void (*)(id, uint64_t))v128[1])(v38, v126);
        v40 = (uint64_t)v25;
        v25 = v39;
        sub_1004CB800(v40, (uint64_t *)&unk_1013E1A50);
        swift_endAccess(v136);
        v41 = 1;
      }
      else
      {
        v41 = 1;
        v25 = (char *)v126;
      }
      v56 = v130;
      goto LABEL_19;
    }
  }
  else
  {
    swift_unknownObjectRetain(a1);
    v30 = v27;
  }
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, v136, 33, 0);
  v42 = sub_100846C6C(v30);
  v44 = v43;
  swift_endAccess(v136);
  if (v42)
  {
    v45 = v30;
    v46 = swift_allocObject(v26, 32, 7);
    *(_QWORD *)(v46 + 16) = v42;
    *(_QWORD *)(v46 + 24) = v44;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v136, 33, 0);
    swift_unknownObjectRetain(v42);
    sub_100AD58F8(v134, v46);
    swift_endAccess(v136);
    swift_unknownObjectRelease(v42);
  }
  else
  {
    v47 = v130;
    v48 = *(_QWORD *)&v130[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
    swift_retain(v48);
    v49 = sub_100582484(0);
    swift_release(v48);
    v50 = *(void **)&v47[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store];
    v51 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLFreehandDrawingShapeItem(0));
    *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokes] = 0;
    *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform27CRLFreehandDrawingShapeItem_cachedPencilKitStrokesInParentSpace] = 0;
    *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke] = 0;
    *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = v50;
    *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = v49;
    v52 = (objc_class *)type metadata accessor for CRLBoardItemBase(0);
    v135.receiver = v51;
    v135.super_class = v52;
    v53 = v50;
    v45 = v127;
    v54 = objc_msgSendSuper2(&v135, "init");
    v55 = swift_allocObject(v26, 32, 7);
    *(_QWORD *)(v55 + 16) = v54;
    *(_QWORD *)(v55 + 24) = &off_10127C5E0;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v136, 33, 0);
    swift_unknownObjectRetain(v54);
    sub_100AD58F8(v134, v55);
    swift_endAccess(v136);

  }
  swift_release(v134[0]);
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances, v136, 33, 0);
  swift_retain(v45);
  sub_100AD58F8(v134, v45);
  swift_endAccess(v136);
  swift_release(v134[0]);
  v25 = (char *)v126;
  v56 = v130;
  if ((a2 & 1) == 0 && (v129 & 1) == 0)
  {
    v57 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, v136, 0, 0);
    v58 = *v57;
    swift_bridgeObjectRetain(v58);
    v59 = sub_100621710(v45, v58);
    swift_bridgeObjectRelease(v58);
    if ((v59 & 1) != 0)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"objectDeleted(_:allowDeletingNewlyCreated:deletedAsOrphan:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 359, "A deleted object should not be listed as a created object", 57, 2u, (uint64_t)_swiftEmptyArrayStorage);
      v56 = v130;
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"objectDeleted(_:allowDeletingNewlyCreated:deletedAsOrphan:)", 59, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 359, (uint64_t)"A deleted object should not be listed as a created object", 57, 2u);
    }
  }
  if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState) == 1)
  {
    v60 = *(_QWORD *)&v56[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
    v61 = *(void (**)(__n128))(*(_QWORD *)v60 + 256);
    v62 = swift_retain(v60);
    v63 = (uint64_t)v123;
    v61(v62);
    swift_release(v60);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds, v134, 33, 0);
    v64 = v124;
    sub_100AD569C((uint64_t)v124, v63);
    ((void (*)(id, char *))v128[1])(v64, v25);
    swift_endAccess(v134);
  }
  v41 = 0;
LABEL_19:
  v65 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v66 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v67 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner + 8);
  ObjectType = swift_getObjectType(v66);
  v69 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v67 + 32);
  swift_unknownObjectRetain(v66);
  v69(v56, &off_10127C5E0, v41, ObjectType, v67);
  swift_unknownObjectRelease(v66);
  if ((v129 & 1) == 0)
    goto LABEL_45;
  v70 = type metadata accessor for CRLBoardItem(0);
  v71 = (_QWORD *)swift_dynamicCastClass(v56, v70);
  if (v71)
  {
    v72 = v71;
    v73 = *(void (**)(uint64_t))((swift_isaMask & *v71) + 0xB8);
    v74 = swift_unknownObjectRetain(v56);
    v75 = v122;
    v73(v74);
    v76 = (uint64_t)v75;
    v77 = v128;
    if (((unsigned int (*)(uint64_t, uint64_t, char *))v128[6])(v76, 1, v25) == 1)
    {

      sub_1004CB800(v76, (uint64_t *)&unk_1013E1A50);
    }
    else
    {
      ((void (*)(char *, uint64_t, char *))v77[4])(v121, v76, v25);
      if (qword_1013DD8B8 != -1)
        swift_once(&qword_1013DD8B8, sub_100A06704);
      swift_beginAccess(&static OS_os_log.boardItemLifecycle, v133, 0, 0);
      v78 = (void *)static OS_os_log.boardItemLifecycle;
      v79 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v79, &v132);
      *(_OWORD *)(inited + 16) = xmmword_100EF7D10;
      v81 = *(uint64_t (**)(void))((swift_isaMask & *v72) + 0x88);
      v124 = v78;
      v82 = v120;
      v83 = v81();
      v84 = UUID.uuidString.getter(v83);
      v86 = v85;
      v129 = (void (*)(char *, char *))v77[1];
      v129(v82, v25);
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v87 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v87;
      *(_QWORD *)(inited + 32) = v84;
      v123 = (char *)(inited + 32);
      *(_QWORD *)(inited + 40) = v86;
      v56 = v130;
      swift_unknownObjectRetain(v130);
      v88 = objc_msgSend(v72, "description");
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 104) = v87;
      *(_QWORD *)(inited + 72) = v89;
      *(_QWORD *)(inited + 80) = v91;
      v92 = v121;
      v94 = UUID.uuidString.getter(v93);
      *(_QWORD *)(inited + 136) = &type metadata for String;
      *(_QWORD *)(inited + 144) = v87;
      *(_QWORD *)(inited + 112) = v94;
      *(_QWORD *)(inited + 120) = v95;
      v96 = 1702195828;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_trackChanges))
        v97 = 1702195828;
      else
        v97 = 0x65736C6166;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_trackChanges))
        v98 = 0xE400000000000000;
      else
        v98 = 0xE500000000000000;
      *(_QWORD *)(inited + 176) = &type metadata for String;
      *(_QWORD *)(inited + 184) = v87;
      *(_QWORD *)(inited + 152) = v97;
      *(_QWORD *)(inited + 160) = v98;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable))
        v99 = 1702195828;
      else
        v99 = 0x65736C6166;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable))
        v100 = 0xE400000000000000;
      else
        v100 = 0xE500000000000000;
      *(_QWORD *)(inited + 216) = &type metadata for String;
      *(_QWORD *)(inited + 224) = v87;
      *(_QWORD *)(inited + 192) = v99;
      *(_QWORD *)(inited + 200) = v100;
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState))
      {
        v101 = 0xE400000000000000;
      }
      else
      {
        v96 = 0x65736C6166;
        v101 = 0xE500000000000000;
      }
      *(_QWORD *)(inited + 256) = &type metadata for String;
      *(_QWORD *)(inited + 264) = v87;
      *(_QWORD *)(inited + 232) = v96;
      *(_QWORD *)(inited + 240) = v101;
      v102 = *v65;
      v103 = v65[1];
      v104 = swift_getObjectType(*v65);
      v134[0] = v102;
      v105 = dispatch thunk of CustomStringConvertible.description.getter(v104, *(_QWORD *)(v103 + 8));
      *(_QWORD *)(inited + 296) = &type metadata for String;
      *(_QWORD *)(inited + 304) = v87;
      v25 = (char *)v126;
      *(_QWORD *)(inited + 272) = v105;
      *(_QWORD *)(inited + 280) = v106;
      v108 = static os_log_type_t.default.getter(v107);
      v109 = v124;
      sub_100A06EBC((uint64_t)v124, &_mh_execute_header, v108, "⭕ deleting orphan [%{public}@%{public}@] with parent [%{public}@] during transaction that is tracked: [%{public}@], undoable: [%{public}@], marking: [%{public}@] for owner: [%{public}@]", 187, 0, inited);
      swift_setDeallocating(inited);
      v110 = *(_QWORD *)(inited + 16);
      v111 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v123, v110, v111);

      v129(v92, v25);
    }
  }
  v112 = *(_QWORD *)&v56[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v113 = *(void (**)(__n128))(*(_QWORD *)v112 + 256);
  v114 = swift_retain(v112);
  v18 = v125;
  v113(v114);
  swift_release(v112);
  v7 = (unint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedOrphans);
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedOrphans, v134, 33, 0);
  a2 = *v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  *v7 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_47;
LABEL_42:
  v117 = *(_QWORD *)(a2 + 16);
  v116 = *(_QWORD *)(a2 + 24);
  if (v117 >= v116 >> 1)
  {
    a2 = sub_100D0EC28(v116 > 1, v117 + 1, 1, a2);
    *v7 = a2;
  }
  *(_QWORD *)(a2 + 16) = v117 + 1;
  ((void (*)(unint64_t, char *, char *))v128[4])(a2+ ((*((unsigned __int8 *)v128 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v128 + 80))+ v128[9] * v117, v18, v25);
  swift_endAccess(v134);
LABEL_45:
  *(_QWORD *)&result = swift_release(v127).n128_u64[0];
  return result;
}

double sub_100DBDC14(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ObjectType;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  uint64_t inited;
  uint64_t (*v76)(void);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v109;
  unint64_t v110;
  double result;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128[24];
  uint64_t v129[3];
  _BYTE v130[32];

  v120 = a5;
  LODWORD(v124) = a3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD **)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v116 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v112 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v112 - v18;
  v20 = __chkstk_darwin(v17);
  v115 = (char *)&v112 - v21;
  __chkstk_darwin(v20);
  v118 = (char *)&v112 - v22;
  v23 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v24 = __chkstk_darwin(v23);
  v114 = (char *)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v112 - v26;
  if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_active) != 1)
  {
    __break(1u);
LABEL_47:
    v16 = (char *)sub_100D0EC28(0, *((_QWORD *)v16 + 2) + 1, 1, (unint64_t)v16);
    *v11 = v16;
    goto LABEL_42;
  }
  v113 = v19;
  v117 = v16;
  v121 = v11;
  *(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableAffectedItemSetNeedsUpdate) = 1;
  v28 = type metadata accessor for CRLTransactableHashableWrapper();
  v29 = swift_allocObject(v28, 32, 7);
  *(_QWORD *)(v29 + 16) = a1;
  *(_QWORD *)(v29 + 24) = a6;
  v125 = a6;
  v30 = v29;
  v122 = a1;
  v123 = v10;
  v119 = v29;
  if ((a2 & 1) != 0)
  {
    v31 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, &v126, 0, 0);
    v32 = *v31;
    swift_unknownObjectRetain(a1);
    swift_bridgeObjectRetain(v32);
    v33 = sub_100621710(v30, v32);
    v34 = v32;
    v10 = v123;
    swift_bridgeObjectRelease(v34);
    if ((v33 & 1) != 0)
    {
      swift_beginAccess(v31, v130, 33, 0);
      v35 = sub_100B26B84(v30);
      swift_endAccess(v130);
      swift_release(v35);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableCreatedObjects, v130, 33, 0);
      v36 = sub_100B26B84(v30);
      swift_endAccess(v130);
      swift_release(v36);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, v130, 33, 0);
      v37 = sub_100846C6C(v30);
      swift_endAccess(v130);
      swift_unknownObjectRelease(v37);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects, v130, 33, 0);
      swift_retain(v30);
      sub_100AD58F8(v129, v30);
      swift_endAccess(v130);
      swift_release(v129[0]);
      swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances, v130, 33, 0);
      swift_retain(v30);
      v38 = a4;
      sub_100AD58F8(v129, v30);
      swift_endAccess(v130);
      v39 = swift_release(v129[0]);
      if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState) == 1)
      {
        v40 = v125;
        v41 = v118;
        v42 = v122;
        (*(void (**)(uint64_t, uint64_t, __n128))(v125 + 32))(v120, v125, v39);
        swift_beginAccess(v38 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds, v130, 33, 0);
        sub_100B26E60((uint64_t)v41, (uint64_t)v27);
        ((void (*)(id, uint64_t))v121[1])(v41, v10);
        sub_1004CB800((uint64_t)v27, (uint64_t *)&unk_1013E1A50);
        swift_endAccess(v130);
        v43 = 1;
        goto LABEL_19;
      }
      v43 = 1;
      goto LABEL_18;
    }
  }
  else
  {
    swift_unknownObjectRetain(a1);
  }
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, v130, 33, 0);
  v44 = sub_100846C6C(v30);
  v46 = v45;
  swift_endAccess(v130);
  if (v44)
  {
    v47 = swift_allocObject(v28, 32, 7);
    *(_QWORD *)(v47 + 16) = v44;
    *(_QWORD *)(v47 + 24) = v46;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v130, 33, 0);
    swift_unknownObjectRetain(v44);
    sub_100AD58F8(v129, v47);
    swift_endAccess(v130);
    v48 = v44;
  }
  else
  {
    v49 = (*(uint64_t (**)(uint64_t))(v125 + 48))(v120);
    v51 = v50;
    v52 = swift_allocObject(v28, 32, 7);
    *(_QWORD *)(v52 + 16) = v49;
    *(_QWORD *)(v52 + 24) = v51;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v130, 33, 0);
    swift_unknownObjectRetain(v49);
    sub_100AD58F8(v129, v52);
    swift_endAccess(v130);
    v48 = v49;
  }
  swift_unknownObjectRelease(v48);
  swift_release(v129[0]);
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances, v130, 33, 0);
  swift_retain(v30);
  sub_100AD58F8(v129, v30);
  swift_endAccess(v130);
  v53 = swift_release(v129[0]);
  if ((a2 & 1) == 0 && (v124 & 1) == 0)
  {
    v54 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects);
    swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, v130, 0, 0);
    v55 = *v54;
    swift_bridgeObjectRetain(v55);
    v56 = sub_100621710(v30, v55);
    v53 = swift_bridgeObjectRelease(v55);
    if ((v56 & 1) != 0)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"objectDeleted(_:allowDeletingNewlyCreated:deletedAsOrphan:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 359, "A deleted object should not be listed as a created object", 57, 2u, (uint64_t)_swiftEmptyArrayStorage);
      v10 = v123;
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"objectDeleted(_:allowDeletingNewlyCreated:deletedAsOrphan:)", 59, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 359, (uint64_t)"A deleted object should not be listed as a created object", 57, 2u);
    }
  }
  v38 = a4;
  if (*(_BYTE *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState) == 1)
  {
    v40 = v125;
    v57 = (uint64_t)v116;
    v42 = v122;
    (*(void (**)(uint64_t, uint64_t, __n128))(v125 + 32))(v120, v125, v53);
    swift_beginAccess(v38 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds, v129, 33, 0);
    v58 = v118;
    sub_100AD569C((uint64_t)v118, v57);
    ((void (*)(id, uint64_t))v121[1])(v58, v10);
    swift_endAccess(v129);
    v43 = 0;
    goto LABEL_19;
  }
  v43 = 0;
LABEL_18:
  v40 = v125;
  v42 = v122;
LABEL_19:
  v59 = v38;
  v60 = (uint64_t *)(v38 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v61 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v62 = v60[1];
  ObjectType = swift_getObjectType(v61);
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 32);
  swift_unknownObjectRetain(v61);
  v64(v42, v40, v43, ObjectType, v62);
  swift_unknownObjectRelease(v61);
  a6 = v119;
  if ((v124 & 1) == 0)
    goto LABEL_45;
  v65 = type metadata accessor for CRLBoardItem(0);
  v66 = (_QWORD *)swift_dynamicCastClass(v42, v65);
  v10 = v123;
  if (v66)
  {
    v67 = v66;
    v68 = *(void (**)(uint64_t))((swift_isaMask & *v66) + 0xB8);
    v69 = swift_unknownObjectRetain(v42);
    v70 = (uint64_t)v114;
    v68(v69);
    v71 = v121;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v121[6])(v70, 1, v10) == 1)
    {
      swift_unknownObjectRelease(v42);
      sub_1004CB800(v70, (uint64_t *)&unk_1013E1A50);
    }
    else
    {
      v112 = v59;
      ((void (*)(char *, uint64_t, uint64_t))v71[4])(v115, v70, v10);
      v72 = v71;
      if (qword_1013DD8B8 != -1)
        swift_once(&qword_1013DD8B8, sub_100A06704);
      swift_beginAccess(&static OS_os_log.boardItemLifecycle, v128, 0, 0);
      v73 = (void *)static OS_os_log.boardItemLifecycle;
      v74 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v74, &v127);
      *(_OWORD *)(inited + 16) = xmmword_100EF7D10;
      v76 = *(uint64_t (**)(void))((swift_isaMask & *v67) + 0x88);
      v118 = v73;
      v77 = v113;
      v78 = v76();
      v79 = UUID.uuidString.getter(v78);
      v81 = v80;
      v124 = (void (*)(char *, uint64_t))v72[1];
      v124(v77, v123);
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v82 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v82;
      *(_QWORD *)(inited + 32) = v79;
      v116 = (char *)(inited + 32);
      *(_QWORD *)(inited + 40) = v81;
      v83 = v122;
      swift_unknownObjectRetain(v122);
      v84 = objc_msgSend(v67, "description");
      v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
      v87 = v86;
      swift_unknownObjectRelease(v83);

      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 104) = v82;
      *(_QWORD *)(inited + 72) = v85;
      *(_QWORD *)(inited + 80) = v87;
      v88 = v115;
      v90 = UUID.uuidString.getter(v89);
      *(_QWORD *)(inited + 136) = &type metadata for String;
      *(_QWORD *)(inited + 144) = v82;
      *(_QWORD *)(inited + 112) = v90;
      *(_QWORD *)(inited + 120) = v91;
      v59 = v112;
      v92 = 1702195828;
      if (*(_BYTE *)(v112 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_trackChanges))
        v93 = 1702195828;
      else
        v93 = 0x65736C6166;
      if (*(_BYTE *)(v112 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_trackChanges))
        v94 = 0xE400000000000000;
      else
        v94 = 0xE500000000000000;
      *(_QWORD *)(inited + 176) = &type metadata for String;
      *(_QWORD *)(inited + 184) = v82;
      *(_QWORD *)(inited + 152) = v93;
      *(_QWORD *)(inited + 160) = v94;
      if (*(_BYTE *)(v59 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable))
        v95 = 1702195828;
      else
        v95 = 0x65736C6166;
      if (*(_BYTE *)(v59 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable))
        v96 = 0xE400000000000000;
      else
        v96 = 0xE500000000000000;
      *(_QWORD *)(inited + 216) = &type metadata for String;
      *(_QWORD *)(inited + 224) = v82;
      *(_QWORD *)(inited + 192) = v95;
      *(_QWORD *)(inited + 200) = v96;
      if (*(_BYTE *)(v59 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState))
      {
        v97 = 0xE400000000000000;
      }
      else
      {
        v92 = 0x65736C6166;
        v97 = 0xE500000000000000;
      }
      *(_QWORD *)(inited + 256) = &type metadata for String;
      *(_QWORD *)(inited + 264) = v82;
      *(_QWORD *)(inited + 232) = v92;
      *(_QWORD *)(inited + 240) = v97;
      v98 = *v60;
      v99 = v60[1];
      v100 = swift_getObjectType(*v60);
      v129[0] = v98;
      v101 = dispatch thunk of CustomStringConvertible.description.getter(v100, *(_QWORD *)(v99 + 8));
      *(_QWORD *)(inited + 296) = &type metadata for String;
      *(_QWORD *)(inited + 304) = v82;
      *(_QWORD *)(inited + 272) = v101;
      *(_QWORD *)(inited + 280) = v102;
      v104 = static os_log_type_t.default.getter(v103);
      v105 = v118;
      sub_100A06EBC((uint64_t)v118, &_mh_execute_header, v104, "⭕ deleting orphan [%{public}@%{public}@] with parent [%{public}@] during transaction that is tracked: [%{public}@], undoable: [%{public}@], marking: [%{public}@] for owner: [%{public}@]", 187, 0, inited);
      swift_setDeallocating(inited);
      v106 = *(_QWORD *)(inited + 16);
      v107 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v116, v106, v107);
      swift_unknownObjectRelease(v83);

      v10 = v123;
      v124(v88, v123);
      a6 = v119;
    }
  }
  v19 = v117;
  (*(void (**)(uint64_t))(v125 + 32))(v120);
  v11 = (_QWORD *)(v59 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedOrphans);
  swift_beginAccess(v59 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedOrphans, v129, 33, 0);
  v16 = (char *)*v11;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  *v11 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_47;
LABEL_42:
  v110 = *((_QWORD *)v16 + 2);
  v109 = *((_QWORD *)v16 + 3);
  if (v110 >= v109 >> 1)
  {
    v16 = (char *)sub_100D0EC28(v109 > 1, v110 + 1, 1, (unint64_t)v16);
    *v11 = v16;
  }
  *((_QWORD *)v16 + 2) = v110 + 1;
  ((void (*)(char *, char *, uint64_t))v121[4])(&v16[((*((unsigned __int8 *)v121 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v121 + 80))+ v121[9] * v110], v19, v10);
  swift_endAccess(v129);
LABEL_45:
  *(_QWORD *)&result = swift_release(a6).n128_u64[0];
  return result;
}

uint64_t sub_100DBE750(uint64_t a1, char a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableCreatedObjects) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjectOriginalInstances) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedOrphans) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState) = 0;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds) = &_swiftEmptySetSingleton;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_active) = 1;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext__observableDelta) = 0;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_affectedItemUUIDSetForUndoableItems) = &_swiftEmptySetSingleton;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableAffectedItemSetNeedsUpdate) = 0;
  v15 = a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_id;
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a4, v16);
  v17 = (_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  *v17 = a1;
  v17[1] = a8;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable) = a2;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_trackChanges) = a3;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_dirtiesOwner) = a5;
  return a6;
}

void sub_100DBE8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  _BYTE v52[24];

  v13 = type metadata accessor for UUID(0);
  v14 = __chkstk_darwin(v13);
  v15 = __chkstk_darwin(v14);
  if (*(_BYTE *)(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_active) != 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  v49 = v17;
  v50 = v15;
  v47 = (uint64_t)&v45 - v16;
  v48 = v18;
  v46 = a4;
  if (a2 == 2)
  {
    if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoable) & 1) == 0)
    {
LABEL_4:
      v19 = 0;
      goto LABEL_7;
    }
  }
  else if ((a2 & 1) == 0)
  {
    goto LABEL_4;
  }
  v19 = 1;
  *(_BYTE *)(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableAffectedItemSetNeedsUpdate) = 1;
LABEL_7:
  v20 = type metadata accessor for CRLTransactableHashableWrapper();
  v7 = swift_allocObject(v20, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a5;
  swift_beginAccess(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_createdObjects, v52, 33, 0);
  swift_unknownObjectRetain(a1);
  swift_retain(v7);
  sub_100AD58F8(v51, v7);
  swift_endAccess(v52);
  swift_release(v51[0]);
  if (v19)
  {
    swift_beginAccess(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableCreatedObjects, v52, 33, 0);
    swift_retain(v7);
    sub_100AD58F8(v51, v7);
    swift_endAccess(v52);
    swift_release(v51[0]);
  }
  v21 = type metadata accessor for CRLContainerItem(0);
  v22 = swift_dynamicCastClass(a1, v21);
  v6 = _swiftEmptyArrayStorage;
  if (!v22)
  {
    v29 = type metadata accessor for CRLBoard(0);
    v30 = swift_dynamicCastClass(a1, v29);
    if (v30)
    {
      v31 = v30;
      v32 = *(void **)(v30 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
      swift_unknownObjectRetain(a1);
      v33 = v32;
      sub_100C86CC0((uint64_t)v33, a2, a3);

      v34 = *(id *)(v31 + OBJC_IVAR____TtC8Freeform8CRLBoard_alternateRootContainer);
      sub_100C86CC0((uint64_t)v34, a2, a3);
      swift_unknownObjectRelease(a1);

    }
    goto LABEL_32;
  }
  v23 = v22;
  v24 = OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems;
  a4 = *(_QWORD *)(v22 + OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems);
  swift_unknownObjectRetain(a1);
  if (!a4)
  {
    sub_100740DA4();
    a4 = *(_QWORD *)(v23 + v24);
  }
  if (a4)
    v5 = a4;
  else
    v5 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v5 >> 62)
  {
LABEL_27:
    if (v5 < 0)
      v35 = v5;
    else
      v35 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v5);
    v25 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_bridgeObjectRelease(v5);
    if (v25)
      goto LABEL_17;
LABEL_31:
    swift_unknownObjectRelease(a1);
    swift_bridgeObjectRelease(v5);
    goto LABEL_32;
  }
  v25 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a4);
  if (!v25)
    goto LABEL_31;
LABEL_17:
  if (v25 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v25; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    else
      v27 = *(id *)(v5 + 8 * i + 32);
    v28 = v27;
    sub_100C8677C((uint64_t)v27, a2, a3);

  }
  swift_unknownObjectRelease(a1);
  swift_bridgeObjectRelease(v5);
  v6 = _swiftEmptyArrayStorage;
LABEL_32:
  v36 = (uint64_t *)(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects);
  swift_beginAccess(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v52, 0, 0);
  v37 = *v36;
  swift_bridgeObjectRetain(v37);
  v38 = sub_100621710(v7, v37);
  swift_bridgeObjectRelease(v37);
  if ((v38 & 1) != 0)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"objectCreated(_:undoableModification:)", 38, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 308, "A created object should not be listed as a deleted object", 57, 2u, (uint64_t)v6);
    sub_1004F5394((uint64_t)v6, (uint64_t)"objectCreated(_:undoableModification:)", 38, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 308, (uint64_t)"A created object should not be listed as a deleted object", 57, 2u);
  }
  v40 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
  v39 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner + 8);
  ObjectType = swift_getObjectType(v40);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 24);
  swift_unknownObjectRetain(v40);
  v42(a1, a5, ObjectType, v39);
  swift_unknownObjectRelease(v40);
  if (*(_BYTE *)(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markingState) == 1)
  {
    v43 = v48;
    (*(void (**)(uint64_t, uint64_t))(a5 + 32))(v46, a5);
    swift_beginAccess(a3 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedCreatedObjectIds, v51, 33, 0);
    v44 = v47;
    sub_100AD569C(v47, v43);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v44, v50);
    swift_endAccess(v51);
  }
  swift_release(v7);
}

uint64_t sub_100DBEDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_unknownObjectRetain(a1);
  UUID.init()(v10);
  v11 = type metadata accessor for CRLTransactionContext(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  return sub_100DBE750(a1, 0, 0, (uint64_t)v9, 0, v12, a3, a4);
}

void sub_100DBEE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  CKRecordID v68;
  uint64_t v69;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[24];
  char v78[72];
  _BYTE v79[24];
  char v80[24];
  char v81[32];
  uint64_t v82;

  v5 = v2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_active) == 1)
  {
    v12 = type metadata accessor for CRLTransactableHashableWrapper();
    ObjectType = swift_getObjectType(a1);
    v4 = swift_allocObject(v12, 32, 7);
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
    v75 = a2;
    v13 = (uint64_t *)(v5 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects);
    swift_beginAccess(v5 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedNewlyCreatedObjects, v81, 0, 0);
    v14 = *v13;
    v76 = a1;
    swift_unknownObjectRetain(a1);
    swift_bridgeObjectRetain(v14);
    v15 = sub_100621710(v4, v14);
    v16 = swift_bridgeObjectRelease(v14);
    v17 = v5;
    if ((v15 & 1) != 0
      || (v18 = (uint64_t *)(v5 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects),
          swift_beginAccess(v5 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_deletedObjects, v80, 0, 0),
          v19 = *v18,
          swift_bridgeObjectRetain(v19),
          v20 = sub_100621710(v4, v19),
          v16 = swift_bridgeObjectRelease(v19),
          (v20 & 1) != 0))
    {
      a2 = v75;
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v75 + 8))(ObjectType, v75, v16);
      if (v21)
      {
        v22 = v21;
        if ((static UUID.== infix(_:_:)(v21 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_id) & 1) != 0)
        {
          swift_release(v22);
LABEL_7:
          swift_release(v4);
          return;
        }
        sub_100757E04(&_mh_execute_header, (uint64_t)"willModify(_:undoableModification:)", 35, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 220, "Trying to modify a deleted object %@ that has a different transactionContext set on it already.", 95, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Trying to modify a deleted object %@ that has a different transactionContext set on it already.");
        sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"willModify(_:undoableModification:)", 35, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 220, (uint64_t)"Trying to modify a deleted object %@ that has a different transactionContext set on it already.", 95, 2u);
        goto LABEL_36;
      }
      v9 = v74;
      if (qword_1013DD6B8 == -1)
        goto LABEL_9;
      goto LABEL_31;
    }
    v27 = (_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications);
    swift_beginAccess(v17 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_modifications, v79, 0, 0);
    v28 = *v27;
    if (*(_QWORD *)(*v27 + 16)
      && (swift_retain(v4),
          swift_bridgeObjectRetain(v28),
          sub_1008430EC(v4),
          v30 = v29,
          swift_release(v4),
          v31 = swift_bridgeObjectRelease(v28),
          (v30 & 1) != 0))
    {
      v32 = v75;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v75 + 8))(ObjectType, v75, v31);
      if (v33)
      {
        v34 = v33;
        if ((static UUID.== infix(_:_:)(v33 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_id) & 1) != 0)
        {
          swift_release(v34);
          goto LABEL_19;
        }
        sub_100757E04(&_mh_execute_header, (uint64_t)"willModify(_:undoableModification:)", 35, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 237, "Trying to store a different copy of a CRLTransactable with the same UUID", 72, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Trying to store a different copy of a CRLTransactable with the same UUID");
        sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"willModify(_:undoableModification:)", 35, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 237, (uint64_t)"Trying to store a different copy of a CRLTransactable with the same UUID", 72, 2u);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"willModify(_:undoableModification:)", 35, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 239, "Object already exists in modifiedObjects but does not have a transactionContext set", 83, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Object already exists in modifiedObjects but does not have a transactionContext set");
        sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"willModify(_:undoableModification:)", 35, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 239, (uint64_t)"Object already exists in modifiedObjects but does not have a transactionContext set", 83, 2u);
      }
    }
    else
    {
      v71 = v27;
      v73 = v17;
      v35 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v35, v78);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v32 = v75;
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 32))(ObjectType, v75);
      v38 = UUID.uuidString.getter(v37);
      v72 = v39;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v40 = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v38;
      *(_QWORD *)(inited + 64) = v40;
      *(_QWORD *)(inited + 40) = v72;
      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(ObjectType, v32);
      swift_release(v41);
      if (!v41)
      {
        swift_setDeallocating(inited);
        v42 = *(_QWORD *)(inited + 16);
        v43 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(inited + 32, v42, v43);
        v17 = v73;
        v44 = v74;
        v45 = sub_100D5E500(v73, ObjectType, v32);
        if (v44)
          goto LABEL_7;
        v47 = v45;
        v48 = v46;
        v49 = v71;
        swift_beginAccess(v71, v77, 33, 0);
        swift_retain(v4);
        swift_unknownObjectRetain(v47);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v49);
        v82 = *v49;
        *v49 = 0x8000000000000000;
        v51 = v48;
        v27 = v49;
        sub_100825578(v47, v51, v4, isUniquelyReferenced_nonNull_native);
        v52 = *v49;
        *v49 = v82;
        swift_release(v4);
        swift_bridgeObjectRelease(v52);
        swift_endAccess(v77);
        swift_unknownObjectRelease(v47);
LABEL_19:
        v53 = *v27;
        v54 = *(_QWORD *)(*v27 + 16);
        swift_retain(v4);
        if (v54)
        {
          swift_retain(v4);
          swift_bridgeObjectRetain(v53);
          v55 = sub_1008430EC(v4);
          if ((v56 & 1) != 0)
          {
            v57 = (uint64_t *)(*(_QWORD *)(v53 + 56) + 16 * v55);
            v58 = *v57;
            v59 = v57[1];
            swift_unknownObjectRetain(*v57);
            swift_release(v4);
            swift_bridgeObjectRelease(v53);
            v60 = (_QWORD *)(v17 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications);
            swift_beginAccess(v17 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications, v77, 33, 0);
            if (v58)
            {
              v61 = swift_isUniquelyReferenced_nonNull_native(*v60);
              v82 = *v60;
              *v60 = 0x8000000000000000;
              sub_100825578(v58, v59, v4, v61);
              v62 = *v60;
              *v60 = v82;
              swift_release(v4);
              swift_bridgeObjectRelease(v62);
              v32 = v75;
LABEL_26:
              swift_endAccess(v77);
              v65 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner);
              v64 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_transactableOwner + 8);
              v66 = swift_getObjectType(v65);
              v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 24);
              swift_unknownObjectRetain(v65);
              v67(v76, v32, v66, v64);
              swift_release(v4);
              v26 = v65;
              goto LABEL_27;
            }
            v32 = v75;
LABEL_25:
            v63 = sub_100846C6C(v4);
            swift_release(v4);
            swift_unknownObjectRelease(v63);
            goto LABEL_26;
          }
          swift_release(v4);
          swift_bridgeObjectRelease(v53);
        }
        swift_beginAccess(v17 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_undoableModifications, v77, 33, 0);
        goto LABEL_25;
      }
      sub_100757E04(&_mh_execute_header, (uint64_t)"willModify(_:undoableModification:)", 35, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2, 230, "First time we are seeing this transactable %@, it should not already have a transactionContext set", 98, 2u, inited);
      sub_100518FC0(inited, (uint64_t)"First time we are seeing this transactable %@, it should not already have a transactionContext set");
      sub_100519194(inited, (uint64_t)"willModify(_:undoableModification:)", 35, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLTransactions/CRLTransactionContext.swift", 97, 2u, 230, (uint64_t)"First time we are seeing this transactable %@, it should not already have a transactionContext set", 98, 2u);
    }
LABEL_36:
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v68, *(Swift::String *)&v69);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
    __break(1u);
    return;
  }
  __break(1u);
LABEL_31:
  swift_once(&qword_1013DD6B8, sub_100A00A6C);
LABEL_9:
  swift_beginAccess(&static OS_os_log.crlDefault, v79, 0, 0);
  v23 = (id)static OS_os_log.crlDefault;
  v24 = static os_log_type_t.debug.getter();
  sub_100A06EBC((uint64_t)v23, &_mh_execute_header, v24, "Trying to modify a deleted object with no transactionContext set.", 65, 2, (uint64_t)_swiftEmptyArrayStorage);

  v25 = sub_100D5E500(v5, ObjectType, a2);
  swift_release(v4);
  if (v9)
    return;
  v26 = v25;
LABEL_27:
  swift_unknownObjectRelease(v26);
}

void sub_100DBF7A8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  __n128 v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  void (*v26)(uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  __n128 v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  char v58[24];
  char *v59;

  v44 = a2;
  v45 = a1;
  v6 = type metadata accessor for UUID(0);
  v56 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v55 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v59 = (char *)&v44 - v9;
  v49 = a3;
  v10 = *(_QWORD *)(a3 + 56);
  v46 = a3 + 56;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & v10;
  v48 = (uint64_t *)(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds);
  swift_beginAccess(a4 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds, v58, 0, 0);
  v50 = 0;
  v14 = 0;
  v47 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v53 = (v13 - 1) & v13;
      v54 = v14;
      v16 = __clz(__rbit64(v13)) | (v14 << 6);
      goto LABEL_22;
    }
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v17 >= v47)
      goto LABEL_30;
    v18 = *(_QWORD *)(v46 + 8 * v17);
    v19 = v14 + 1;
    if (!v18)
    {
      v19 = v14 + 2;
      if (v14 + 2 >= v47)
        goto LABEL_30;
      v18 = *(_QWORD *)(v46 + 8 * v19);
      if (!v18)
      {
        v19 = v14 + 3;
        if (v14 + 3 >= v47)
          goto LABEL_30;
        v18 = *(_QWORD *)(v46 + 8 * v19);
        if (!v18)
          break;
      }
    }
LABEL_21:
    v53 = (v18 - 1) & v18;
    v54 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_22:
    v21 = *(_QWORD *)(v49 + 48);
    v51 = v16;
    v22 = *(_QWORD *)(v21 + 8 * v16);
    v23 = *v48;
    v24 = *(_QWORD *)(v22 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v22 + 16));
    v26 = *(void (**)(uint64_t, uint64_t, __n128))(v24 + 32);
    v52 = v22;
    swift_retain(v22);
    v27 = swift_bridgeObjectRetain(v23);
    v26(ObjectType, v24, v27);
    v57 = v23;
    if (*(_QWORD *)(v23 + 16)
      && (v28 = v57,
          v29 = *(_QWORD *)(v57 + 40),
          v30 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30), v32 = -1 << *(_BYTE *)(v28 + 32), v33 = v31 & ~v32, v34 = v28 + 56, ((*(_QWORD *)(v28 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0))
    {
      v35 = ~v32;
      v36 = v56[9];
      v37 = (void (*)(char *, unint64_t, uint64_t))v56[2];
      while (1)
      {
        v38 = v55;
        v37(v55, *(_QWORD *)(v57 + 48) + v36 * v33, v6);
        sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v59);
        v40 = (void (*)(char *, uint64_t))v56[1];
        v40(v38, v6);
        if ((v39 & 1) != 0)
          break;
        v33 = (v33 + 1) & v35;
        if (((*(_QWORD *)(v34 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
          goto LABEL_27;
      }
      v15 = swift_bridgeObjectRelease(v57);
      ((void (*)(char *, uint64_t, __n128))v40)(v59, v6, v15);
      swift_release(v52);
      v13 = v53;
      v14 = v54;
    }
    else
    {
LABEL_27:
      v41 = swift_bridgeObjectRelease(v57);
      ((void (*)(char *, uint64_t, __n128))v56[1])(v59, v6, v41);
      swift_release(v52);
      *(unint64_t *)((char *)v45 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v51;
      v42 = __OFADD__(v50++, 1);
      v13 = v53;
      v14 = v54;
      if (v42)
      {
        __break(1u);
LABEL_30:
        v43 = v49;
        swift_retain(v49);
        sub_100CD7B48(v45, v44, v50, v43);
        return;
      }
    }
  }
  v20 = v14 + 4;
  if (v14 + 4 >= v47)
    goto LABEL_30;
  v18 = *(_QWORD *)(v46 + 8 * v20);
  if (v18)
  {
    v19 = v14 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v47)
      goto LABEL_30;
    v18 = *(_QWORD *)(v46 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_100DBFBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;

  v3 = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v18 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain(a2);
    sub_100DBF7A8((unint64_t *)((char *)&v18 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    v12 = v11;
    swift_release(a1);
    v13 = swift_release(a2);
    if (v3)
      swift_willThrow(v13);
    swift_release_n(a2, 2, v13);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v9, -1);
    bzero(v14, v9);
    swift_retain(a2);
    sub_100DBF7A8((unint64_t *)v14, v8, a1, a2);
    v12 = v15;
    swift_release(a1);
    swift_release(a2);
    swift_slowDealloc(v14, -1, -1);
    swift_release_n(a2, 2, v16);
  }
  return v12;
}

Swift::Int sub_100DBFD64(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int result;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  void (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  __n128 v42;
  void (*v43)(char *, uint64_t, __n128);
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  _QWORD v65[9];
  uint64_t v66;
  char v67[32];
  _QWORD *v68;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v62 = *(_QWORD **)(v6 - 8);
  v63 = v6;
  v7 = __chkstk_darwin(v6);
  v61 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (char *)&v53 - v9;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v55 = v2;
    v3 = &_swiftEmptySetSingleton;
    v68 = &_swiftEmptySetSingleton;
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_retain(a2);
    v11 = __CocoaSet.makeIterator()(v10);
    v54 = a2;
    v58 = (uint64_t *)(a2 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds);
    v12 = swift_beginAccess(a2 + OBJC_IVAR____TtC8Freeform21CRLTransactionContext_markedDeletedObjectIds, v67, 0, 0);
    v59 = v11;
    v13 = __CocoaSet.Iterator.next()(v12);
    if (v13)
    {
      v14 = v13;
      v57 = type metadata accessor for CRLTransactableHashableWrapper();
      v56 = (char *)&type metadata for Swift.AnyObject + 8;
      do
      {
        v65[0] = v14;
        swift_dynamicCast(&v66, v65, v56, v57, 7);
        v26 = *v58;
        v27 = *(_QWORD *)(v66 + 24);
        ObjectType = swift_getObjectType(*(_QWORD *)(v66 + 16));
        v29 = *(void (**)(uint64_t, uint64_t, __n128))(v27 + 32);
        v30 = swift_bridgeObjectRetain(v26);
        v29(ObjectType, v27, v30);
        if (*(_QWORD *)(v26 + 16)
          && (v31 = *(_QWORD *)(v26 + 40),
              v32 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v33 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v63, v32), v34 = -1 << *(_BYTE *)(v26 + 32), v35 = v33 & ~v34, ((*(_QWORD *)(v26 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0))
        {
          v60 = ~v34;
          v36 = v62[9];
          v37 = (void (*)(char *, unint64_t, uint64_t))v62[2];
          while (1)
          {
            v38 = v61;
            v39 = v63;
            v37(v61, *(_QWORD *)(v26 + 48) + v36 * v35, v63);
            sub_1005034A0((unint64_t *)&qword_1013E4880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v40 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v64);
            v41 = (void (*)(char *, uint64_t))v62[1];
            v41(v38, v39);
            if ((v40 & 1) != 0)
              break;
            v35 = (v35 + 1) & v60;
            if (((*(_QWORD *)(v26 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
              goto LABEL_16;
          }
          v51 = swift_bridgeObjectRelease(v26);
          ((void (*)(char *, uint64_t, __n128))v41)(v64, v63, v51);
          swift_release(v66);
        }
        else
        {
LABEL_16:
          v42 = swift_bridgeObjectRelease(v26);
          v43 = (void (*)(char *, uint64_t, __n128))v62[1];
          v43(v64, v63, v42);
          v44 = v66;
          v45 = v68;
          v46 = v68[2];
          if (v68[3] <= v46)
          {
            sub_100ADCB34(v46 + 1);
            v45 = v68;
          }
          Hasher.init(_seed:)(v65, v45[5]);
          v15 = *(_QWORD *)(v44 + 24);
          v16 = swift_getObjectType(*(_QWORD *)(v44 + 16));
          v17 = v61;
          (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
          v18 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v19 = v63;
          dispatch thunk of Hashable.hash(into:)(v65, v63, v18);
          ((void (*)(char *, uint64_t))v43)(v17, v19);
          result = Hasher._finalize()();
          v21 = v45 + 7;
          v22 = -1 << *((_BYTE *)v45 + 32);
          v23 = result & ~v22;
          v24 = v23 >> 6;
          if (((-1 << v23) & ~v45[(v23 >> 6) + 7]) != 0)
          {
            v25 = __clz(__rbit64((-1 << v23) & ~v45[(v23 >> 6) + 7])) | v23 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v47 = 0;
            v48 = (unint64_t)(63 - v22) >> 6;
            do
            {
              if (++v24 == v48 && (v47 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v49 = v24 == v48;
              if (v24 == v48)
                v24 = 0;
              v47 |= v49;
              v50 = v21[v24];
            }
            while (v50 == -1);
            v25 = __clz(__rbit64(~v50)) + (v24 << 6);
          }
          *(_QWORD *)((char *)v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
          *(_QWORD *)(v45[6] + 8 * v25) = v44;
          ++v45[2];
        }
        v14 = __CocoaSet.Iterator.next()(result);
      }
      while (v14);
      v3 = v68;
    }
    swift_release(v54);
    swift_release(v59);
  }
  else
  {
    v52 = sub_100DBFBA0(a1, a2);
    if (!v2)
      return v52;
  }
  return (Swift::Int)v3;
}

id sub_100DC01F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilHoveredRepManager_repsModel);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilHoveredRepManager_repsModel, v14, 33, 0);
  v2 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
LABEL_15:
    if (v2 < 0)
      v11 = v2;
    else
      v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v2);
    if (!v3)
      goto LABEL_13;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
    {
LABEL_13:
      swift_endAccess(v14);
      return (id)(v3 != 0);
    }
  }
  v13 = v3;
  v2 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v1);
    if (v4)
      goto LABEL_5;
    goto LABEL_12;
  }
  if (v2 < 0)
    v12 = *v1;
  else
    v12 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v12);
  if (!v4)
  {
LABEL_12:
    swift_bridgeObjectRelease_n(v2, 2);
    *v1 = (uint64_t)_swiftEmptyArrayStorage;
    v3 = v13;
    goto LABEL_13;
  }
LABEL_5:
  v5 = 4;
  while (1)
  {
    if ((v2 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v2);
    else
      v6 = *(id *)(v2 + 8 * v5);
    v7 = v6;
    v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
      goto LABEL_15;
    }
    result = objc_msgSend(v6, "styledLayout");
    if (!result)
      break;
    v10 = result;
    objc_msgSend(result, "dynamicOpacityChangeDidEnd");

    ++v5;
    if (v8 == v4)
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100DC0390()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  if ((unint64_t)*v0 >> 62)
  {
LABEL_13:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (v10)
    {
      swift_bridgeObjectRetain(v1);
      v2 = _CocoaArrayWrapper.endIndex.getter(v9);
      if (!v2)
      {
LABEL_11:
        swift_bridgeObjectRelease_n(v1, 2);
        *v0 = (uint64_t)_swiftEmptyArrayStorage;
        return 1;
      }
      goto LABEL_4;
    }
    return 0;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain(*v0);
LABEL_4:
  v3 = 4;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
      v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1);
    else
      v4 = *(id *)(v1 + 8 * v3);
    v5 = v4;
    v6 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    result = (uint64_t)objc_msgSend(v4, "styledLayout");
    if (!result)
      break;
    v8 = (void *)result;
    objc_msgSend((id)result, "dynamicOpacityChangeDidEnd");

    ++v3;
    if (v6 == v2)
      goto LABEL_11;
  }
  __break(1u);
  return result;
}

id sub_100DC0520()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSPencilHoveredRepManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLiOSPencilHoveredRepManager()
{
  return objc_opt_self(_TtC8Freeform29CRLiOSPencilHoveredRepManager);
}

ValueMetadata *type metadata accessor for CRLiOSPencilHoveredRepManager.RepsModel()
{
  return &type metadata for CRLiOSPencilHoveredRepManager.RepsModel;
}

void sub_100DC0590(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  void *v44;
  _QWORD v45[6];

  v1 = a1;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      goto LABEL_5;
LABEL_11:
    v4 = &_swiftEmptySetSingleton;
    if (v2)
      goto LABEL_6;
LABEL_12:
    v13 = -1 << *(_BYTE *)(v1 + 32);
    v38 = v1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v1);
    swift_retain(v4);
    v11 = 0;
    goto LABEL_16;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v3 = __CocoaSet.count.getter(a1);
  if (!v3)
    goto LABEL_11;
LABEL_5:
  sub_1004B804C(&qword_1013DEA18);
  v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
  if (!v2)
    goto LABEL_12;
LABEL_6:
  if (v1 < 0)
    v5 = v1;
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  swift_retain(v4);
  v6 = __CocoaSet.makeIterator()(v5);
  v7 = type metadata accessor for CRLBoardItem(0);
  v8 = sub_100DD0520((unint64_t *)&qword_1013E4190, type metadata accessor for CRLBoardItem);
  v9 = (Swift::Int)Set.Iterator.init(_cocoa:)(v45, v6, v7, v8);
  v1 = v45[0];
  v38 = v45[1];
  v10 = v45[2];
  v11 = v45[3];
  v12 = v45[4];
LABEL_16:
  v37 = (unint64_t)(v10 + 64) >> 6;
  v16 = (char *)(v4 + 7);
  while (v1 < 0)
  {
    v21 = __CocoaSet.Iterator.next()(v9);
    if (!v21)
      goto LABEL_50;
    *(_QWORD *)&v42[0] = v21;
    v22 = type metadata accessor for CRLBoardItem(0);
    swift_dynamicCast(&v44, v42, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v44;
LABEL_41:
    *(_QWORD *)&v39 = v23;
    v29 = type metadata accessor for CRLBoardItem(0);
    swift_dynamicCast(v42, &v39, v29, &type metadata for AnyHashable, 7);
    v39 = v42[0];
    v40 = v42[1];
    v41 = v43;
    v9 = AnyHashable._rawHashValue(seed:)(v4[5]);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v9 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)&v16[8 * (v31 >> 6)]) != 0)
    {
      v17 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)&v16[8 * (v31 >> 6)])) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)&v16[8 * v32];
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)&v16[(v17 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v17;
    v18 = v4[6] + 40 * v17;
    *(_OWORD *)v18 = v39;
    *(_OWORD *)(v18 + 16) = v40;
    *(_QWORD *)(v18 + 32) = v41;
    ++v4[2];
  }
  if (v12)
  {
    v19 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v20 = v19 | (v11 << 6);
LABEL_40:
    v23 = *(void **)(*(_QWORD *)(v1 + 48) + 8 * v20);
    v44 = v23;
    v28 = v23;
    goto LABEL_41;
  }
  v24 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v24 >= v37)
      goto LABEL_50;
    v25 = *(_QWORD *)(v38 + 8 * v24);
    v26 = v11 + 1;
    if (!v25)
    {
      v26 = v11 + 2;
      if (v11 + 2 >= v37)
        goto LABEL_50;
      v25 = *(_QWORD *)(v38 + 8 * v26);
      if (!v25)
      {
        v26 = v11 + 3;
        if (v11 + 3 >= v37)
          goto LABEL_50;
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          v26 = v11 + 4;
          if (v11 + 4 >= v37)
            goto LABEL_50;
          v25 = *(_QWORD *)(v38 + 8 * v26);
          if (!v25)
          {
            v26 = v11 + 5;
            if (v11 + 5 >= v37)
              goto LABEL_50;
            v25 = *(_QWORD *)(v38 + 8 * v26);
            if (!v25)
            {
              v27 = v11 + 6;
              while (v37 != v27)
              {
                v25 = *(_QWORD *)(v38 + 8 * v27++);
                if (v25)
                {
                  v26 = v27 - 1;
                  goto LABEL_39;
                }
              }
LABEL_50:
              v44 = 0;
              swift_release(v4);
              sub_1004D284C(v1);
              return;
            }
          }
        }
      }
    }
LABEL_39:
    v12 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v26 << 6);
    v11 = v26;
    goto LABEL_40;
  }
LABEL_51:
  __break(1u);
}

void sub_100DC0998(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[5];

  v1 = a1;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      goto LABEL_5;
LABEL_11:
    v4 = &_swiftEmptySetSingleton;
    if (v2)
      goto LABEL_6;
LABEL_12:
    v13 = -1 << *(_BYTE *)(v1 + 32);
    v36 = v1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v1);
    swift_retain(v4);
    v11 = 0;
    goto LABEL_16;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v3 = __CocoaSet.count.getter(a1);
  if (!v3)
    goto LABEL_11;
LABEL_5:
  sub_1004B804C(&qword_1013DEA38);
  v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
  if (!v2)
    goto LABEL_12;
LABEL_6:
  if (v1 < 0)
    v5 = v1;
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  swift_retain(v4);
  v6 = __CocoaSet.makeIterator()(v5);
  v7 = type metadata accessor for CRLGroupItem(0);
  v8 = sub_100DD0520(&qword_1013F48C8, type metadata accessor for CRLGroupItem);
  v9 = (Swift::Int)Set.Iterator.init(_cocoa:)(v39, v6, v7, v8);
  v1 = v39[0];
  v36 = v39[1];
  v10 = v39[2];
  v11 = v39[3];
  v12 = v39[4];
LABEL_16:
  v16 = (unint64_t)(v10 + 64) >> 6;
  v17 = (char *)(v4 + 7);
  while (v1 < 0)
  {
    v21 = __CocoaSet.Iterator.next()(v9);
    if (!v21)
      goto LABEL_50;
    v37 = v21;
    v22 = type metadata accessor for CRLGroupItem(0);
    swift_dynamicCast(&v38, &v37, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v38;
LABEL_41:
    v9 = NSObject._rawHashValue(seed:)(v4[5]);
    v29 = -1 << *((_BYTE *)v4 + 32);
    v30 = v9 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)&v17[8 * (v30 >> 6)]) != 0)
    {
      v18 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)&v17[8 * (v30 >> 6)])) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)&v17[8 * v31];
      }
      while (v35 == -1);
      v18 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)&v17[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v18;
    *(_QWORD *)(v4[6] + 8 * v18) = v23;
    ++v4[2];
  }
  if (v12)
  {
    v19 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v20 = v19 | (v11 << 6);
LABEL_40:
    v23 = *(void **)(*(_QWORD *)(v1 + 48) + 8 * v20);
    v38 = v23;
    v28 = v23;
    goto LABEL_41;
  }
  v24 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v24 >= v16)
      goto LABEL_50;
    v25 = *(_QWORD *)(v36 + 8 * v24);
    v26 = v11 + 1;
    if (!v25)
    {
      v26 = v11 + 2;
      if (v11 + 2 >= v16)
        goto LABEL_50;
      v25 = *(_QWORD *)(v36 + 8 * v26);
      if (!v25)
      {
        v26 = v11 + 3;
        if (v11 + 3 >= v16)
          goto LABEL_50;
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          v26 = v11 + 4;
          if (v11 + 4 >= v16)
            goto LABEL_50;
          v25 = *(_QWORD *)(v36 + 8 * v26);
          if (!v25)
          {
            v26 = v11 + 5;
            if (v11 + 5 >= v16)
              goto LABEL_50;
            v25 = *(_QWORD *)(v36 + 8 * v26);
            if (!v25)
            {
              v27 = v11 + 6;
              while (v16 != v27)
              {
                v25 = *(_QWORD *)(v36 + 8 * v27++);
                if (v25)
                {
                  v26 = v27 - 1;
                  goto LABEL_39;
                }
              }
LABEL_50:
              v38 = 0;
              swift_release(v4);
              sub_1004D284C(v1);
              return;
            }
          }
        }
      }
    }
LABEL_39:
    v12 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v26 << 6);
    v11 = v26;
    goto LABEL_40;
  }
LABEL_51:
  __break(1u);
}

void sub_100DC0D24(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_100DC0D5C(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, __n128))sub_100DC26C8, sub_10073253C, (uint64_t (*)(void))sub_100737ED4);
}

void sub_100DC0D40(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_100DC0D5C(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, __n128))sub_100DC28DC, sub_100732548, (uint64_t (*)(void))sub_10073809C);
}

void sub_100DC0D5C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, uint64_t, __n128), void (*a6)(uint64_t), uint64_t (*a7)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  __n128 v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  _BYTE *v38;
  void *Strong;
  id v40;
  id v41;
  uint64_t v42;
  void (*v43)(_QWORD, uint64_t, __n128);
  uint64_t (*v44)(void);
  int v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;

  v43 = a5;
  v44 = a7;
  v47 = a6;
  v48 = a3;
  v8 = v7;
  v49 = a4;
  v45 = a2;
  v46 = a1;
  v9 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CRLWPStorageCRDTData(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape;
  v21 = *(char **)(*(_QWORD *)(v7 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape)
                 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v21)
    goto LABEL_14;
  v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v22)
  {
LABEL_15:
    __break(1u);
    return;
  }
  (*(void (**)(__n128))(*(_QWORD *)v22 + 760))(v17);
  sub_1004D29BC((uint64_t)&v15[*(int *)(v13 + 20)], (uint64_t)v19);
  v23 = v21;
  sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v19, v9);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPStorageCRDTData);
  v24 = (void *)CRAttributedString.attributedString.getter(v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v25 = (uint64_t)objc_msgSend(v24, "length");

  if (v25 < 1)
    goto LABEL_10;
  if (__OFSUB__(v49, v48))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v49 == v48)
  {
    v26 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle;
    v27 = *(void **)(v8 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle);
    v28 = v46;
    if (v27
      || (v29 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLWPCharacterStyle()), "init"),
          v30 = *(void **)(v8 + v26),
          *(_QWORD *)(v8 + v26) = v29,
          v30,
          (v27 = *(void **)(v8 + v26)) != 0))
    {
      v31 = v27;
      v32 = swift_retain(v28);
      v43(v45 & 1, v28, v32);

    }
    v47(v28);
    return;
  }
LABEL_10:
  v33 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v8
                                                              + OBJC_IVAR____TtC8Freeform11CRLWPEditor_editorController), "selectionPath"));
  v34 = objc_msgSend(objc_allocWithZone((Class)CRLCommandSelectionBehavior), "initWithCommitSelectionPath:forwardSelectionPath:reverseSelectionPath:", v33, v33, v33);
  v35 = *(void **)(v8 + v20);
  v36 = v46;
  swift_retain(v46);
  v37 = v35;
  v38 = (_BYTE *)v44();

  swift_release(v36);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v8 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc);
  v40 = objc_msgSend(Strong, "commandController");

  if (v40)
  {
    v41 = v34;
    sub_1006A5F54(v38, 0, v34, 4, 0);

  }
  v47(v36);

}

void sub_100DC10E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  char *v33;
  _BYTE *v34;
  void *Strong;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = v4;
  v39 = a3;
  v40 = a4;
  v38 = a2;
  v41 = a1;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLWPStorageCRDTData(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape;
  v18 = *(char **)(*(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape)
                 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v18)
    goto LABEL_14;
  v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v19)
  {
LABEL_15:
    __break(1u);
    return;
  }
  (*(void (**)(__n128))(*(_QWORD *)v19 + 760))(v14);
  sub_1004D29BC((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v16);
  v20 = v18;
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v21 = (void *)CRAttributedString.attributedString.getter(v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22 = (uint64_t)objc_msgSend(v21, "length");

  v24 = v40;
  v23 = v41;
  v25 = v39;
  if (v22 < 1)
    goto LABEL_10;
  if (__OFSUB__(v40, v39))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v40 == v39)
  {
    v26 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle;
    v27 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle);
    if (v27
      || (v28 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLWPCharacterStyle()), "init"),
          v29 = *(void **)(v5 + v26),
          *(_QWORD *)(v5 + v26) = v28,
          v29,
          (v27 = *(_QWORD *)(v5 + v26)) != 0))
    {
      v30 = v27 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline;
      *(_QWORD *)v30 = v38;
      *(_BYTE *)(v30 + 8) = 0;
    }
    sub_100732554(v23);
    return;
  }
LABEL_10:
  v31 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v5
                                                              + OBJC_IVAR____TtC8Freeform11CRLWPEditor_editorController), "selectionPath", v38));
  v32 = objc_msgSend(objc_allocWithZone((Class)CRLCommandSelectionBehavior), "initWithCommitSelectionPath:forwardSelectionPath:reverseSelectionPath:", v31, v31, v31);
  v33 = (char *)*(id *)(v5 + v17);
  swift_retain(v23);
  v34 = (_BYTE *)sub_100738268(v33, v25, v24, v23, v38);

  swift_release(v23);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc);
  v36 = objc_msgSend(Strong, "commandController");

  if (v36)
  {
    v37 = v32;
    sub_1006A5F54(v34, 0, v32, 4, 0);

  }
  sub_100732554(v23);

}

void sub_100DC1440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  char *v35;
  _BYTE *v36;
  void *Strong;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = v4;
  v41 = a3;
  v42 = a4;
  v40 = a2;
  v43 = a1;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLWPStorageCRDTData(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape;
  v18 = *(char **)(*(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape)
                 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v18)
    goto LABEL_14;
  v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v19)
  {
LABEL_15:
    __break(1u);
    return;
  }
  (*(void (**)(__n128))(*(_QWORD *)v19 + 760))(v14);
  sub_1004D29BC((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v16);
  v20 = v18;
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v21 = (void *)CRAttributedString.attributedString.getter(v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22 = (uint64_t)objc_msgSend(v21, "length");

  v24 = v42;
  v23 = v43;
  v25 = v41;
  if (v22 < 1)
    goto LABEL_10;
  if (__OFSUB__(v42, v41))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v42 == v41)
  {
    v26 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle;
    v27 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle);
    if (v27
      || (v28 = objc_allocWithZone((Class)type metadata accessor for CRLWPCharacterStyle()),
          v29 = objc_msgSend(v28, "init", v40),
          v30 = *(void **)(v5 + v26),
          *(_QWORD *)(v5 + v26) = v29,
          v30,
          (v27 = *(void **)(v5 + v26)) != 0))
    {
      v31 = v27;
      swift_retain(v23);
      sub_100DC2B3C(v40, 0, v23);

    }
    sub_100732560(v23);
    return;
  }
LABEL_10:
  v32 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v5
                                                              + OBJC_IVAR____TtC8Freeform11CRLWPEditor_editorController), "selectionPath", v40));
  v33 = objc_msgSend(objc_allocWithZone((Class)CRLCommandSelectionBehavior), "initWithCommitSelectionPath:forwardSelectionPath:reverseSelectionPath:", v32, v32, v32);
  v34 = *(void **)(v5 + v17);
  swift_retain(v23);
  v35 = v34;
  v36 = (_BYTE *)sub_100738440(v35, v25, v24, v23, v40);

  swift_release(v23);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc);
  v38 = objc_msgSend(Strong, "commandController");

  if (v38)
  {
    v39 = v33;
    sub_1006A5F54(v36, 0, v33, 4, 0);

  }
  sub_100732560(v23);

}

void sub_100DC17A4(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  char *v35;
  _BYTE *v36;
  void *Strong;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v5 = v4;
  v40 = a2;
  v41 = a3;
  v42 = a1;
  v7 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLWPStorageCRDTData(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape;
  v19 = *(char **)(*(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape)
                 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v19)
    goto LABEL_14;
  v20 = *(_QWORD *)&v19[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v20)
  {
LABEL_15:
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 760))(v15);
  sub_1004D29BC((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v17);
  v21 = v19;
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v17, v7);
  sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLWPStorageCRDTData);
  v22 = (void *)CRAttributedString.attributedString.getter(v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v23 = (uint64_t)objc_msgSend(v22, "length");

  v24 = v41;
  v25 = v42;
  v26 = v40;
  if (v23 < 1)
    goto LABEL_10;
  if (__OFSUB__(v41, v40))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v41 == v40)
  {
    v27 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle;
    v28 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle);
    if (v28
      || (v29 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLWPCharacterStyle()), "init"),
          v30 = *(void **)(v5 + v27),
          *(_QWORD *)(v5 + v27) = v29,
          v30,
          (v28 = *(void **)(v5 + v27)) != 0))
    {
      v31 = v28;
      swift_retain(v25);
      v43 = 0;
      sub_100DC2BF8(LODWORD(a4), v25);

    }
    sub_10073256C(v25);
    return;
  }
LABEL_10:
  v32 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_editorController), "selectionPath", v40, v41, v42);
  v33 = objc_msgSend(objc_allocWithZone((Class)CRLCommandSelectionBehavior), "initWithCommitSelectionPath:forwardSelectionPath:reverseSelectionPath:", v32, v32, v32);
  v34 = *(void **)(v5 + v18);
  swift_retain(v25);
  v35 = v34;
  v36 = (_BYTE *)sub_100738620(v35, v26, v24, v25, a4);

  swift_release(v25);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc);
  v38 = objc_msgSend(Strong, "commandController");

  if (v38)
  {
    v39 = v33;
    sub_1006A5F54(v36, 0, v33, 4, 0);

  }
  sub_10073256C(v25);

}

void sub_100DC1B18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = v5;
  v34 = a1;
  v35 = a5;
  v32 = a2;
  v33 = a3;
  v8 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRLWPStorageCRDTData(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(char **)(*(_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape)
                 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v19)
    goto LABEL_12;
  v20 = *(_QWORD *)&v19[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v20)
  {
LABEL_13:
    __break(1u);
    return;
  }
  (*(void (**)(__n128))(*(_QWORD *)v20 + 760))(v16);
  sub_1004D29BC((uint64_t)&v14[*(int *)(v12 + 20)], (uint64_t)v18);
  v21 = v19;
  sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v18, v8);
  sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLWPStorageCRDTData);
  v22 = (void *)CRAttributedString.attributedString.getter(v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v23 = (uint64_t)objc_msgSend(v22, "length");

  if (v23 < 1)
  {
LABEL_10:
    sub_100DC2014(v34, v32, v33, a4, v35);
    return;
  }
  if (__OFSUB__(v35, a4))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v35 != a4)
    goto LABEL_10;
  v24 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle;
  v25 = *(void **)(v6 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle);
  v26 = v34;
  if (v25
    || (v27 = objc_allocWithZone((Class)type metadata accessor for CRLWPCharacterStyle()),
        v28 = objc_msgSend(v27, "init", v32),
        v29 = *(void **)(v6 + v24),
        *(_QWORD *)(v6 + v24) = v28,
        v29,
        (v25 = *(void **)(v6 + v24)) != 0))
  {
    v30 = v33;
    swift_bridgeObjectRetain(v33);
    v31 = v25;
    swift_retain(v26);
    sub_100DC2CF4(v32, v30, v26);

  }
  sub_100732584(v26);
}

void sub_100DC1D9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v5 = v4;
  v33 = a1;
  v34 = a4;
  v32 = a2;
  v7 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLWPStorageCRDTData(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(char **)(*(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape)
                 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
  if (!v18)
    goto LABEL_12;
  v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v19)
  {
LABEL_13:
    __break(1u);
    return;
  }
  (*(void (**)(__n128))(*(_QWORD *)v19 + 760))(v15);
  sub_1004D29BC((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v17);
  v20 = v18;
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v17, v7);
  sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLWPStorageCRDTData);
  v21 = (void *)CRAttributedString.attributedString.getter(v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v22 = (uint64_t)objc_msgSend(v21, "length");

  if (v22 < 1)
  {
LABEL_10:
    sub_100DC2340(v33, v32, a3, v34);
    return;
  }
  if (__OFSUB__(v34, a3))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v34 != a3)
    goto LABEL_10;
  v23 = OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle;
  v24 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_insertionStyle);
  v25 = v33;
  if (v24
    || (v26 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLWPCharacterStyle()), "init"),
        v27 = *(void **)(v5 + v23),
        *(_QWORD *)(v5 + v23) = v26,
        v27,
        (v24 = *(void **)(v5 + v23)) != 0))
  {
    v28 = v32;
    v29 = v32;
    v30 = v24;
    swift_retain(v25);
    sub_100DC2E84(v28, v25);

  }
  sub_100732590(v25);
}

void sub_100DC2014(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  char *v29;
  _BYTE *v30;
  void *Strong;
  id v32;
  id v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  ValueMetadata *v42;
  ValueMetadata *v43;
  unint64_t v44;
  uint64_t v45;
  ValueMetadata *v46;
  ValueMetadata *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  char v51;

  v6 = v5;
  v39 = a4;
  v40 = a5;
  v37 = a2;
  v9 = sub_1004B804C((uint64_t *)&unk_1013EFC60);
  __chkstk_darwin(v9);
  v38 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (uint64_t *)((char *)&v34 - v13);
  v15 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v5
                                                              + OBJC_IVAR____TtC8Freeform11CRLWPEditor_editorController), "selectionPath", v12));
  v16 = objc_allocWithZone((Class)CRLCommandSelectionBehavior);
  v41 = v15;
  v36 = objc_msgSend(v16, "initWithCommitSelectionPath:forwardSelectionPath:reverseSelectionPath:", v15, v15, v15);
  v17 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape);
  *v14 = &_swiftEmptySetSingleton;
  v18 = sub_100559A64();
  swift_bridgeObjectRetain(a3);
  v35 = v17;
  swift_retain(a1);
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v18);
  v46 = &type metadata for CRLWPCharacterScope;
  v47 = &type metadata for CRLWPFontNameAttribute;
  v19 = sub_100739574();
  v48 = v19;
  v49 = a1;
  KeyPath = swift_getKeyPath(&unk_100F39648);
  swift_bridgeObjectRetain(a3);
  swift_retain(a1);
  sub_100AD8690(v50, 0x656D614E746E6F66, 0xE800000000000000);
  swift_bridgeObjectRelease();
  v42 = &type metadata for CRLWPCharacterScope;
  v43 = &type metadata for CRLWPFontNameAttribute;
  v44 = v19;
  v45 = KeyPath;
  v21 = swift_getKeyPath(&unk_100F39680);
  swift_bridgeObjectRetain(a3);
  swift_retain(KeyPath);
  v50[0] = sub_10098B7E4(v37, a3);
  v50[1] = v22;
  v51 = 0;
  v23 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v24 = sub_1007E6618();
  CRAttributedString.Attributes.subscript.setter(v50, v21, v23, v24);
  swift_bridgeObjectRelease();
  v25 = KeyPath;
  v26 = v36;
  swift_release(v25);
  v27 = v38;
  sub_1004CB7BC((uint64_t)v14, v38, (uint64_t *)&unk_1013EFC60);
  v28 = objc_allocWithZone((Class)sub_1004B804C((uint64_t *)&unk_1013F3EA0));
  v29 = v35;
  v30 = (_BYTE *)sub_100737BD4(v35, v39, v40, v27);
  sub_1004CB800((uint64_t)v14, (uint64_t *)&unk_1013EFC60);

  swift_release(a1);
  swift_bridgeObjectRelease();
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc);
  v32 = objc_msgSend(Strong, "commandController");

  if (v32)
  {
    v33 = v26;
    sub_1006A5F54(v30, 0, v26, 4, 0);

  }
  sub_100732584(a1);

}

void sub_100DC2340(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  id v15;
  void *v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t KeyPath;
  id v21;
  uint64_t v22;
  id v23;
  const mach_header_64 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  void *Strong;
  id v34;
  id v35;
  _QWORD v36[2];
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  ValueMetadata *v43;
  ValueMetadata *v44;
  unint64_t v45;
  uint64_t v46;
  ValueMetadata *v47;
  ValueMetadata *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;

  v5 = v4;
  v40 = a3;
  v41 = a4;
  v8 = sub_1004B804C((uint64_t *)&unk_1013EFC60);
  __chkstk_darwin(v8);
  v39 = (uint64_t)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v13 = (_QWORD *)((char *)v36 - v12);
  v14 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v5
                                                              + OBJC_IVAR____TtC8Freeform11CRLWPEditor_editorController), "selectionPath", v11));
  v15 = objc_allocWithZone((Class)CRLCommandSelectionBehavior);
  v42 = v14;
  v38 = objc_msgSend(v15, "initWithCommitSelectionPath:forwardSelectionPath:reverseSelectionPath:", v14, v14, v14);
  v16 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape);
  *v13 = &_swiftEmptySetSingleton;
  v36[1] = (char *)v13 + *(int *)(v8 + 36);
  v17 = sub_100559A64();
  v18 = a2;
  v37 = v16;
  swift_retain(a1);
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v17);
  v47 = &type metadata for CRLWPCharacterScope;
  v48 = &type metadata for CRLWPCharacterFillAttribute;
  v19 = sub_1007393D0();
  v49 = v19;
  v50 = a1;
  KeyPath = swift_getKeyPath(&unk_100F39648);
  v21 = v18;
  swift_retain(a1);
  sub_100AD8690(&v58, 0x6574636172616863, 0xED00006C6C694672);
  swift_bridgeObjectRelease(v59);
  v43 = &type metadata for CRLWPCharacterScope;
  v44 = &type metadata for CRLWPCharacterFillAttribute;
  v45 = v19;
  v46 = KeyPath;
  v22 = swift_getKeyPath(&unk_100F39680);
  v23 = v21;
  swift_retain(KeyPath);
  sub_100D3743C(v23, (uint64_t)&v58);
  v24 = &_mh_execute_header;
  if (!v61)
    v24 = 0;
  v51[0] = v58;
  v51[1] = v59;
  v51[2] = (unint64_t)v24 | v60;
  v52 = v62;
  v53 = v63;
  v54 = v64;
  v55 = v65;
  v56 = v66;
  v57 = v67;
  v25 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v26 = sub_1007E678C();
  CRAttributedString.Attributes.subscript.setter(v51, v22, v25, v26);

  swift_release(KeyPath);
  v27 = v39;
  sub_1004CB7BC((uint64_t)v13, v39, (uint64_t *)&unk_1013EFC60);
  v28 = objc_allocWithZone((Class)sub_1004B804C((uint64_t *)&unk_1013F3EA0));
  v29 = v37;
  v30 = (_BYTE *)sub_100737BD4(v37, v40, v41, v27);
  v31 = (uint64_t)v13;
  v32 = v38;
  sub_1004CB800(v31, (uint64_t *)&unk_1013EFC60);

  swift_release(a1);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5 + OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc);
  v34 = objc_msgSend(Strong, "commandController");

  if (v34)
  {
    v35 = v32;
    sub_1006A5F54(v30, 0, v32, 4, 0);

  }
  sub_100732590(a1);

}

void sub_100DC26C8(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C7265646E75, 0xE900000000000065, 1684828002, 0xE400000000000000, 0) & 1) != 0)
  {
    swift_release(a2);
    v5 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline;
LABEL_5:
    v6 = v2 + *v5;
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(v6 + 8) = 1;
    return;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6874656B69727473, 0xED00006867756F72, 1684828002, 0xE400000000000000, 0) & 1) != 0)
  {
    swift_release(a2);
    v5 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough;
    goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953746E6F66, 0xE800000000000000, 1684828002, 0xE400000000000000, 0) & 1) != 0)
  {
    swift_release(a2);
    v7 = v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontSize;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 1;
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E746E6F66, 0xE800000000000000, 1684828002, 0xE400000000000000, 0) & 1) != 0)
  {
    v8 = (_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName);
    v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName + 8);
    *v8 = 0;
    v8[1] = 0;
    swift_release(a2);
    swift_bridgeObjectRelease(v9);
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574636172616863, 0xED00006C6C694672, 1684828002, 0xE400000000000000, 0) & 1) != 0)
  {
    v10 = *(id *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill) = 0;
    swift_release(a2);

  }
  else
  {
    swift_release(a2);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_bold) = a1;
  }
}

void sub_100DC28DC(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  id v12;

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C7265646E75, 0xE900000000000065, 0x63696C617469, 0xE600000000000000, 0) & 1) != 0)
  {
    swift_release(a2);
    v5 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline;
LABEL_5:
    v6 = v2 + *v5;
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(v6 + 8) = 1;
    return;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6874656B69727473, 0xED00006867756F72, 0x63696C617469, 0xE600000000000000, 0) & 1) != 0)
  {
    swift_release(a2);
    v5 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough;
    goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953746E6F66, 0xE800000000000000, 0x63696C617469, 0xE600000000000000, 0) & 1) != 0)
  {
    swift_release(a2);
    v7 = v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontSize;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 1;
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E746E6F66, 0xE800000000000000, 0x63696C617469, 0xE600000000000000, 0) & 1) != 0)
  {
    v8 = (_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName);
    v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName + 8);
    *v8 = 0;
    v8[1] = 0;
    swift_release(a2);
    swift_bridgeObjectRelease(v9);
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574636172616863, 0xED00006C6C694672, 0x63696C617469, 0xE600000000000000, 0) & 1) != 0)
  {
    v12 = *(id *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill) = 0;
    swift_release(a2);

  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(1684828002, 0xE400000000000000, 0x63696C617469, 0xE600000000000000, 0);
    swift_release(a2);
    if ((v10 & 1) != 0)
      v11 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_bold;
    else
      v11 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_italic;
    *(_BYTE *)(v2 + *v11) = a1;
  }
}

void sub_100DC2B3C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  uint64_t v8;
  char v9;

  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C7265646E75, 0xE900000000000065, 0x6874656B69727473, 0xED00006867756F72, 0);
  swift_release(a3);
  if ((v7 & 1) != 0)
  {
    v8 = v3 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline;
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline) = 0;
    v9 = 1;
  }
  else
  {
    v8 = v3 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough;
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough) = a1;
    v9 = a2 & 1;
  }
  *(_BYTE *)(v8 + 8) = v9;
}

void sub_100DC2BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C7265646E75, 0xE900000000000065, 0x657A6953746E6F66, 0xE800000000000000, 0) & 1) != 0)
  {
    swift_release(a2);
    v5 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline;
LABEL_5:
    v7 = v2 + *v5;
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 8) = 1;
    return;
  }
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6874656B69727473, 0xED00006867756F72, 0x657A6953746E6F66, 0xE800000000000000, 0);
  swift_release(a2);
  if ((v6 & 1) != 0)
  {
    v5 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough;
    goto LABEL_5;
  }
  v8 = v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontSize;
  *(_DWORD *)v8 = a1;
  *(_BYTE *)(v8 + 4) = BYTE4(a1) & 1;
}

void sub_100DC2CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C7265646E75, 0xE900000000000065, 0x656D614E746E6F66, 0xE800000000000000, 0) & 1) != 0)
  {
    swift_release(a3);
    if (a2)
      swift_bridgeObjectRelease(a2);
    v7 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline;
LABEL_9:
    v8 = v3 + *v7;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(v8 + 8) = 1;
    return;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6874656B69727473, 0xED00006867756F72, 0x656D614E746E6F66, 0xE800000000000000, 0) & 1) != 0)
  {
    swift_release(a3);
    if (a2)
      swift_bridgeObjectRelease(a2);
    v7 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough;
    goto LABEL_9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953746E6F66, 0xE800000000000000, 0x656D614E746E6F66, 0xE800000000000000, 0) & 1) != 0)
  {
    swift_release(a3);
    if (a2)
      swift_bridgeObjectRelease(a2);
    v9 = v3 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontSize;
    *(_DWORD *)v9 = 0;
    *(_BYTE *)(v9 + 4) = 1;
  }
  else
  {
    v10 = (_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName);
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName + 8);
    *v10 = a1;
    v10[1] = a2;
    swift_release(a3);
    swift_bridgeObjectRelease(v11);
  }
}

void sub_100DC2E84(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696C7265646E75, 0xE900000000000065, 0x6574636172616863, 0xED00006C6C694672, 0) & 1) != 0)
  {
    swift_release(a2);
    if (a1)

    v4 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline;
LABEL_9:
    v5 = v2 + *v4;
    *(_QWORD *)v5 = 0;
    *(_BYTE *)(v5 + 8) = 1;
    return;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6874656B69727473, 0xED00006867756F72, 0x6574636172616863, 0xED00006C6C694672, 0) & 1) != 0)
  {
    swift_release(a2);
    if (a1)

    v4 = &OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough;
    goto LABEL_9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953746E6F66, 0xE800000000000000, 0x6574636172616863, 0xED00006C6C694672, 0) & 1) != 0)
  {
    swift_release(a2);
    if (a1)

    v6 = v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontSize;
    *(_DWORD *)v6 = 0;
    *(_BYTE *)(v6 + 4) = 1;
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E746E6F66, 0xE800000000000000, 0x6574636172616863, 0xED00006C6C694672, 0) & 1) != 0)
  {
    v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName);
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName + 8);
    *v7 = 0;
    v7[1] = 0;
    swift_release(a2);
    swift_bridgeObjectRelease(v8);

  }
  else
  {
    v9 = *(id *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill) = a1;
    swift_release(a2);

  }
}

void sub_100DC30A8(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];

  v4 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  v8 = type metadata accessor for CRLWPShapeItemData(0);
  v9 = swift_dynamicCastClassUnconditional(v7, v8, 0, 0, 0);
  (*(void (**)(void))(*(_QWORD *)v9 + 760))();
  type metadata accessor for CRLWPShapeItemCRDTData.WPShapeStyleData(0);
  swift_retain(v7);
  v10 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.getter(v10);
  LOBYTE(a1) = v11[15];
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLWPShapeItemCRDTData);
  swift_release(v7);
  *a2 = (_BYTE)a1;
}

void sub_100DC31B8(char *a1)
{
  sub_10084C6E8(*a1);
}

uint64_t sub_100DC31DC(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  _QWORD *v43;
  __n128 v44;
  Swift::UInt v45;
  char v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  __n128 v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  __n128 v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t KeyPath;
  unint64_t v77;
  __n128 v78;
  uint64_t v79;
  __n128 v80;
  Swift::UInt v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char v107[16];
  Swift::UInt v108;
  char v109;
  void *v110;

  v93 = a4;
  v92 = a3;
  v106 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v103 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1004B804C(&qword_1013F3C90);
  v87 = *(_QWORD *)(v105 - 8);
  v13 = __chkstk_darwin(v105);
  v86 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v104 = (char *)&v85 - v15;
  v100 = (_QWORD *)sub_1004B804C(&qword_1013F3D90);
  v96 = *(v100 - 1);
  __chkstk_darwin(v100);
  v95 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v89);
  v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v90 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v24);
  v28 = (char *)&v85 - v27;
  v99 = a2;
  v91 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v29 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v29)
    goto LABEL_32;
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 760))(result);
  v88 = v17;
  sub_1004D29BC((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v94 = v23;
  v30 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v30(v28, v21, v22);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v110 = &_swiftEmptySetSingleton;
  v97 = v28;
  v98 = v22;
  result = CRAttributedString.count.getter(v22);
  v31 = v99;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v92, (uint64_t)v93);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v92, v93);
      if (__OFSUB__(v52, result))
      {
        __break(1u);
      }
      else
      {
        result = (uint64_t)objc_msgSend(v31, "textRangeForParagraphsInCharRange:", result, v52 - result);
        v54 = __OFADD__(result, v53);
        v55 = result + v53;
        if (!v54)
        {
          if (v55 >= result)
          {
            v56 = v95;
            CRAttributedString.subscript.getter(result, v55, v98);
            v57 = v86;
            v58 = v100;
            CRAttributedString.Substring.runs.getter(v100);
            (*(void (**)(char *, _QWORD *))(v96 + 8))(v56, v58);
            v59 = v105;
            (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v104, v57, v105);
            CRAttributedString.Runs.next()(v59);
            v60 = v103;
            v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
            if (v61(v12, 1, v7) == 1)
            {
              v47 = _swiftEmptyArrayStorage;
            }
            else
            {
              v100 = *(_QWORD **)(v60 + 32);
              v47 = _swiftEmptyArrayStorage;
              v71 = v85;
              ((void (*)(char *, char *, uint64_t))v100)(v9, v12, v7);
              while (1)
              {
                v73 = CRAttributedString.Runs.Run.attributes.getter(v7);
                __chkstk_darwin(v73);
                *(&v85 - 4) = (char *)&type metadata for CRLWPListStartAttribute;
                v74 = sub_1007370EC();
                v75 = v106;
                *(&v85 - 3) = (char *)v74;
                *(&v85 - 2) = v75;
                KeyPath = swift_getKeyPath(&unk_100F39610);
                v77 = sub_100737130();
                v78 = swift_retain(v75);
                v79 = v102;
                CRAttributedString.Attributes.subscript.getter(&v108, KeyPath, v102, v77, v78);
                v80 = swift_release(KeyPath);
                (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v71, v79, v80);
                v81 = v108;
                v82 = v109;
                if ((sub_10062195C(v108, v109, (uint64_t)v110) & 1) == 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
                    v47 = sub_100D0F0A0(0, v47[2] + 1, 1, v47);
                  v84 = v47[2];
                  v83 = v47[3];
                  if (v84 >= v83 >> 1)
                    v47 = sub_100D0F0A0((_QWORD *)(v83 > 1), v84 + 1, 1, v47);
                  v47[2] = v84 + 1;
                  v72 = &v47[2 * v84];
                  v72[4] = v81;
                  *((_BYTE *)v72 + 40) = v82;
                  sub_100AD5CC4((uint64_t)v107, v81, v82);
                }
                (*(void (**)(char *, uint64_t))(v103 + 8))(v9, v7);
                CRAttributedString.Runs.next()(v105);
                if (v61(v12, 1, v7) == 1)
                  break;
                ((void (*)(char *, char *, uint64_t))v100)(v9, v12, v7);
              }
            }
            (*(void (**)(char *, uint64_t))(v87 + 8))(v104, v105);
            v35 = v98;
            v33 = v99;
            v50 = v94;
            goto LABEL_14;
          }
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  v32 = *(_QWORD *)&v31[v91];
  if (!v32)
  {
LABEL_33:
    __break(1u);
    return result;
  }
  v33 = v31;
  (*(void (**)(void))(*(_QWORD *)v32 + 760))();
  sub_1004D29BC((uint64_t)&v19[*(int *)(v88 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v34 = v90;
  v35 = v98;
  v30(v90, &v21[*(int *)(v89 + 20)], v98);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v36 = v95;
  v37 = CRAttributedString.subscript.getter(0, 0, v35);
  __chkstk_darwin(v37);
  *(&v85 - 4) = (char *)&type metadata for CRLWPListStartAttribute;
  v38 = sub_1007370EC();
  v39 = v106;
  *(&v85 - 3) = (char *)v38;
  *(&v85 - 2) = v39;
  v40 = swift_getKeyPath(&unk_100F39610);
  v41 = sub_100737130();
  v42 = swift_retain(v39);
  v43 = v100;
  CRAttributedString.Substring.subscript.getter(&v108, v40, v100, v41, v42);
  v44 = swift_release(v40);
  (*(void (**)(char *, _QWORD *, __n128))(v96 + 8))(v36, v43, v44);
  v45 = v108;
  v46 = v109;
  v47 = sub_100D0F0A0(0, 1, 1, _swiftEmptyArrayStorage);
  v49 = v47[2];
  v48 = v47[3];
  if (v49 >= v48 >> 1)
    v47 = sub_100D0F0A0((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
  v50 = v94;
  v47[2] = v49 + 1;
  v51 = &v47[2 * v49];
  v51[4] = v45;
  *((_BYTE *)v51 + 40) = v46;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v35);
LABEL_14:
  v62 = v33;
  v63 = swift_bridgeObjectRetain(v47);
  v64 = sub_100DCFE88(v63);
  swift_bridgeObjectRelease(v47);

  v65 = v110;
  swift_bridgeObjectRelease(v47);
  v66 = swift_bridgeObjectRelease(v65);
  v67 = v64[2];
  if (v67 == 1)
  {
    v69 = v64[4];
    v70 = swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v97, v35, v70);
    return v69;
  }
  else if (v67)
  {
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v97, v35, v66);
  }
  else
  {
    v68 = swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v97, v35, v68);
    return 1;
  }
  return (uint64_t)v64;
}

uint64_t sub_100DC3A48(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  _QWORD *v43;
  __n128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  __n128 v69;
  uint64_t v70;
  __n128 v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t KeyPath;
  unint64_t v78;
  __n128 v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char v109[16];
  uint64_t v110;
  unsigned __int8 v111;
  void *v112;

  v95 = a4;
  v94 = a3;
  v108 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v103 = *(_QWORD *)(v5 - 8);
  v104 = v5;
  __chkstk_darwin(v5);
  v87 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v105 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_1004B804C(&qword_1013F3C90);
  v89 = *(_QWORD *)(v107 - 8);
  v13 = __chkstk_darwin(v107);
  v88 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v106 = (char *)&v87 - v15;
  v102 = (_QWORD *)sub_1004B804C(&qword_1013F3D90);
  v97 = *(v102 - 1);
  __chkstk_darwin(v102);
  v96 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v91);
  v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v92 = (char *)&v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v24);
  v28 = (char *)&v87 - v27;
  v100 = a2;
  v93 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v29 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v29)
    goto LABEL_32;
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 760))(result);
  v90 = v17;
  sub_1004D29BC((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v101 = v23;
  v30 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v30(v28, v21, v22);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v112 = &_swiftEmptySetSingleton;
  v98 = v28;
  v99 = v22;
  result = CRAttributedString.count.getter(v22);
  v31 = v100;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v94, (uint64_t)v95);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v94, v95);
      if (__OFSUB__(v51, result))
      {
        __break(1u);
      }
      else
      {
        result = (uint64_t)objc_msgSend(v31, "textRangeForParagraphsInCharRange:", result, v51 - result);
        v53 = __OFADD__(result, v52);
        v54 = result + v52;
        if (!v53)
        {
          if (v54 >= result)
          {
            v55 = v96;
            CRAttributedString.subscript.getter(result, v54, v99);
            v56 = v88;
            v57 = v102;
            CRAttributedString.Substring.runs.getter(v102);
            (*(void (**)(char *, _QWORD *))(v97 + 8))(v55, v57);
            v58 = v107;
            (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v106, v56, v107);
            CRAttributedString.Runs.next()(v58);
            v59 = v105;
            v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
            if (v60(v12, 1, v7) == 1)
            {
              v47 = _swiftEmptyArrayStorage;
            }
            else
            {
              v102 = *(_QWORD **)(v59 + 32);
              v47 = _swiftEmptyArrayStorage;
              v72 = v87;
              ((void (*)(char *, char *, uint64_t))v102)(v9, v12, v7);
              while (1)
              {
                v74 = CRAttributedString.Runs.Run.attributes.getter(v7);
                __chkstk_darwin(v74);
                *(&v87 - 4) = (char *)&type metadata for CRLWPListStyleTypeAttribute;
                v75 = sub_100739274();
                v76 = v108;
                *(&v87 - 3) = (char *)v75;
                *(&v87 - 2) = v76;
                KeyPath = swift_getKeyPath(&unk_100F39610);
                v78 = sub_1007392B8();
                v79 = swift_retain(v76);
                v80 = v104;
                CRAttributedString.Attributes.subscript.getter(&v110, KeyPath, v104, v78, v79);
                v81 = swift_release(KeyPath);
                (*(void (**)(char *, uint64_t, __n128))(v103 + 8))(v72, v80, v81);
                v82 = (uint64_t)v112;
                v83 = v110;
                v84 = v111;
                swift_bridgeObjectRetain(v112);
                LOBYTE(v80) = sub_100621A50(v83, v84, v82);
                swift_bridgeObjectRelease(v82);
                if ((v80 & 1) == 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
                    v47 = sub_100D0F0AC(0, v47[2] + 1, 1, v47);
                  v86 = v47[2];
                  v85 = v47[3];
                  if (v86 >= v85 >> 1)
                    v47 = sub_100D0F0AC((_QWORD *)(v85 > 1), v86 + 1, 1, v47);
                  v47[2] = v86 + 1;
                  v73 = &v47[2 * v86];
                  v73[4] = v83;
                  *((_BYTE *)v73 + 40) = v84;
                  sub_100AD5E30((uint64_t)v109, v83, v84);
                }
                (*(void (**)(char *, uint64_t))(v105 + 8))(v9, v7);
                CRAttributedString.Runs.next()(v107);
                if (v60(v12, 1, v7) == 1)
                  break;
                ((void (*)(char *, char *, uint64_t))v102)(v9, v12, v7);
              }
            }
            (*(void (**)(char *, uint64_t))(v89 + 8))(v106, v107);
            v35 = v99;
            v33 = v100;
            goto LABEL_14;
          }
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  v32 = *(_QWORD *)&v31[v93];
  if (!v32)
  {
LABEL_33:
    __break(1u);
    return result;
  }
  v33 = v31;
  (*(void (**)(void))(*(_QWORD *)v32 + 760))();
  sub_1004D29BC((uint64_t)&v19[*(int *)(v90 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v34 = v92;
  v35 = v99;
  v30(v92, &v21[*(int *)(v91 + 20)], v99);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v36 = v96;
  v37 = CRAttributedString.subscript.getter(0, 0, v35);
  __chkstk_darwin(v37);
  *(&v87 - 4) = (char *)&type metadata for CRLWPListStyleTypeAttribute;
  v38 = sub_100739274();
  v39 = v108;
  *(&v87 - 3) = (char *)v38;
  *(&v87 - 2) = v39;
  v40 = swift_getKeyPath(&unk_100F39610);
  v41 = sub_1007392B8();
  v42 = swift_retain(v39);
  v43 = v102;
  CRAttributedString.Substring.subscript.getter(&v110, v40, v102, v41, v42);
  v44 = swift_release(v40);
  (*(void (**)(char *, _QWORD *, __n128))(v97 + 8))(v36, v43, v44);
  v45 = v110;
  v46 = v111;
  v47 = sub_100D0F0AC(0, 1, 1, _swiftEmptyArrayStorage);
  v49 = v47[2];
  v48 = v47[3];
  if (v49 >= v48 >> 1)
    v47 = sub_100D0F0AC((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
  v47[2] = v49 + 1;
  v50 = &v47[2 * v49];
  v50[4] = v45;
  *((_BYTE *)v50 + 40) = v46;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v34, v35);
LABEL_14:
  v61 = v33;
  v62 = swift_bridgeObjectRetain(v47);
  v63 = sub_100DCFDA0(v62);
  swift_bridgeObjectRelease(v47);

  v64 = v112;
  swift_bridgeObjectRelease(v47);
  v65 = swift_bridgeObjectRelease(v64);
  v66 = v63[2];
  if (v66 == 1)
  {
    v70 = *((unsigned __int8 *)v63 + 32);
    v71 = swift_bridgeObjectRelease(v63);
    (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v98, v35, v71);
    return v70;
  }
  else
  {
    v67 = v101;
    v68 = v98;
    if (v66)
    {
      (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v98, v35, v65);
    }
    else
    {
      v69 = swift_bridgeObjectRelease(v63);
      (*(void (**)(char *, uint64_t, __n128))(v67 + 8))(v68, v35, v69);
      return 0;
    }
  }
  return (uint64_t)v63;
}

uint64_t sub_100DC42D4(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  _QWORD *v43;
  __n128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t KeyPath;
  unint64_t v76;
  __n128 v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char v107[16];
  uint64_t v108;
  unsigned __int8 v109;
  void *v110;

  v98 = a3;
  v99 = a4;
  v106 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v103 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1004B804C(&qword_1013F3C90);
  v87 = *(_QWORD *)(v105 - 8);
  v13 = __chkstk_darwin(v105);
  v86 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v104 = (char *)&v85 - v15;
  v100 = (_QWORD *)sub_1004B804C(&qword_1013F3D90);
  v94 = *(v100 - 1);
  __chkstk_darwin(v100);
  v93 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v89);
  v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v90 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v24);
  v28 = (char *)&v85 - v27;
  v97 = a2;
  v91 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v29 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v29)
    goto LABEL_32;
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 760))(result);
  v88 = v17;
  sub_1004D29BC((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v92 = v23;
  v30 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v30(v28, v21, v22);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v110 = &_swiftEmptySetSingleton;
  v95 = v28;
  v96 = v22;
  result = CRAttributedString.count.getter(v22);
  v31 = v97;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v98, (uint64_t)v99);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v98, v99);
      if (__OFSUB__(v52, result))
      {
        __break(1u);
      }
      else
      {
        result = (uint64_t)objc_msgSend(v31, "textRangeForParagraphsInCharRange:", result, v52 - result);
        v54 = __OFADD__(result, v53);
        v55 = result + v53;
        if (!v54)
        {
          if (v55 >= result)
          {
            v56 = v93;
            CRAttributedString.subscript.getter(result, v55, v96);
            v57 = v86;
            v58 = v100;
            CRAttributedString.Substring.runs.getter(v100);
            (*(void (**)(char *, _QWORD *))(v94 + 8))(v56, v58);
            v59 = v105;
            (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v104, v57, v105);
            CRAttributedString.Runs.next()(v59);
            v60 = v103;
            v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
            if (v61(v12, 1, v7) == 1)
            {
              v47 = _swiftEmptyArrayStorage;
            }
            else
            {
              v100 = *(_QWORD **)(v60 + 32);
              v47 = _swiftEmptyArrayStorage;
              v70 = v85;
              ((void (*)(char *, char *, uint64_t))v100)(v9, v12, v7);
              while (1)
              {
                v72 = CRAttributedString.Runs.Run.attributes.getter(v7);
                __chkstk_darwin(v72);
                *(&v85 - 4) = (char *)&type metadata for CRLWPWritingDirectionAttribute;
                v73 = sub_10073D6C0();
                v74 = v106;
                *(&v85 - 3) = (char *)v73;
                *(&v85 - 2) = v74;
                KeyPath = swift_getKeyPath(&unk_100F39610);
                v76 = sub_10073D704();
                v77 = swift_retain(v74);
                v78 = v102;
                CRAttributedString.Attributes.subscript.getter(&v108, KeyPath, v102, v76, v77);
                v79 = swift_release(KeyPath);
                (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v70, v78, v79);
                v80 = (uint64_t)v110;
                v81 = v108;
                v82 = v109;
                swift_bridgeObjectRetain(v110);
                LOBYTE(v74) = sub_100621BD4(v81, v82, v80);
                swift_bridgeObjectRelease(v80);
                if ((v74 & 1) == 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
                    v47 = sub_100D0F1C0(0, v47[2] + 1, 1, v47);
                  v84 = v47[2];
                  v83 = v47[3];
                  if (v84 >= v83 >> 1)
                    v47 = sub_100D0F1C0((_QWORD *)(v83 > 1), v84 + 1, 1, v47);
                  v47[2] = v84 + 1;
                  v71 = &v47[2 * v84];
                  v71[4] = v81;
                  *((_BYTE *)v71 + 40) = v82;
                  sub_100AD603C((uint64_t)v107, v81, v82);
                }
                (*(void (**)(char *, uint64_t))(v103 + 8))(v9, v7);
                CRAttributedString.Runs.next()(v105);
                if (v61(v12, 1, v7) == 1)
                  break;
                ((void (*)(char *, char *, uint64_t))v100)(v9, v12, v7);
              }
            }
            (*(void (**)(char *, uint64_t))(v87 + 8))(v104, v105);
            v35 = v96;
            v33 = v97;
            v50 = v92;
            goto LABEL_14;
          }
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  v32 = *(_QWORD *)&v31[v91];
  if (!v32)
  {
LABEL_33:
    __break(1u);
    return result;
  }
  v33 = v31;
  (*(void (**)(void))(*(_QWORD *)v32 + 760))();
  sub_1004D29BC((uint64_t)&v19[*(int *)(v88 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v34 = v90;
  v35 = v96;
  v30(v90, &v21[*(int *)(v89 + 20)], v96);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v36 = v93;
  v37 = CRAttributedString.subscript.getter(0, 0, v35);
  __chkstk_darwin(v37);
  *(&v85 - 4) = (char *)&type metadata for CRLWPWritingDirectionAttribute;
  v38 = sub_10073D6C0();
  v39 = v106;
  *(&v85 - 3) = (char *)v38;
  *(&v85 - 2) = v39;
  v40 = swift_getKeyPath(&unk_100F39610);
  v41 = sub_10073D704();
  v42 = swift_retain(v39);
  v43 = v100;
  CRAttributedString.Substring.subscript.getter(&v108, v40, v100, v41, v42);
  v44 = swift_release(v40);
  (*(void (**)(char *, _QWORD *, __n128))(v94 + 8))(v36, v43, v44);
  v45 = v108;
  v46 = v109;
  v47 = sub_100D0F1C0(0, 1, 1, _swiftEmptyArrayStorage);
  v49 = v47[2];
  v48 = v47[3];
  if (v49 >= v48 >> 1)
    v47 = sub_100D0F1C0((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
  v50 = v92;
  v47[2] = v49 + 1;
  v51 = &v47[2 * v49];
  v51[4] = v45;
  *((_BYTE *)v51 + 40) = v46;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v35);
LABEL_14:
  v62 = v33;
  v63 = swift_bridgeObjectRetain(v47);
  v64 = sub_100DCF94C(v63, v62);
  swift_bridgeObjectRelease(v47);

  v65 = v110;
  swift_bridgeObjectRelease(v47);
  v66 = swift_bridgeObjectRelease(v65);
  v67 = *(_QWORD *)(v64 + 16);
  if (v67 == 1)
  {
    v68 = *(_QWORD *)(v64 + 32);
    v69 = swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v95, v35, v69);
    return v68;
  }
  else if (v67)
  {
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v95, v35, v66);
  }
  else
  {
    swift_bridgeObjectRelease(v64);
    v64 = sub_1007E8FB0(v62);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v95, v35);
  }
  return v64;
}

uint64_t sub_100DC4B5C(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  _QWORD *v43;
  __n128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t KeyPath;
  unint64_t v76;
  __n128 v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char v107[16];
  uint64_t v108;
  unsigned __int8 v109;
  void *v110;

  v98 = a3;
  v99 = a4;
  v106 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v103 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1004B804C(&qword_1013F3C90);
  v87 = *(_QWORD *)(v105 - 8);
  v13 = __chkstk_darwin(v105);
  v86 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v104 = (char *)&v85 - v15;
  v100 = (_QWORD *)sub_1004B804C(&qword_1013F3D90);
  v94 = *(v100 - 1);
  __chkstk_darwin(v100);
  v93 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v89);
  v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v90 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v24);
  v28 = (char *)&v85 - v27;
  v97 = a2;
  v91 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v29 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v29)
    goto LABEL_32;
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 760))(result);
  v88 = v17;
  sub_1004D29BC((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v92 = v23;
  v30 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v30(v28, v21, v22);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v110 = &_swiftEmptySetSingleton;
  v95 = v28;
  v96 = v22;
  result = CRAttributedString.count.getter(v22);
  v31 = v97;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v98, (uint64_t)v99);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v98, v99);
      if (__OFSUB__(v52, result))
      {
        __break(1u);
      }
      else
      {
        result = (uint64_t)objc_msgSend(v31, "textRangeForParagraphsInCharRange:", result, v52 - result);
        v54 = __OFADD__(result, v53);
        v55 = result + v53;
        if (!v54)
        {
          if (v55 >= result)
          {
            v56 = v93;
            CRAttributedString.subscript.getter(result, v55, v96);
            v57 = v86;
            v58 = v100;
            CRAttributedString.Substring.runs.getter(v100);
            (*(void (**)(char *, _QWORD *))(v94 + 8))(v56, v58);
            v59 = v105;
            (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v104, v57, v105);
            CRAttributedString.Runs.next()(v59);
            v60 = v103;
            v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
            if (v61(v12, 1, v7) == 1)
            {
              v47 = _swiftEmptyArrayStorage;
            }
            else
            {
              v100 = *(_QWORD **)(v60 + 32);
              v47 = _swiftEmptyArrayStorage;
              v70 = v85;
              ((void (*)(char *, char *, uint64_t))v100)(v9, v12, v7);
              while (1)
              {
                v72 = CRAttributedString.Runs.Run.attributes.getter(v7);
                __chkstk_darwin(v72);
                *(&v85 - 4) = (char *)&type metadata for CRLWPParagraphAlignmentAttribute;
                v73 = sub_100573144();
                v74 = v106;
                *(&v85 - 3) = (char *)v73;
                *(&v85 - 2) = v74;
                KeyPath = swift_getKeyPath(&unk_100F39610);
                v76 = sub_10073D7B8();
                v77 = swift_retain(v74);
                v78 = v102;
                CRAttributedString.Attributes.subscript.getter(&v108, KeyPath, v102, v76, v77);
                v79 = swift_release(KeyPath);
                (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v70, v78, v79);
                v80 = (uint64_t)v110;
                v81 = v108;
                v82 = v109;
                swift_bridgeObjectRetain(v110);
                LOBYTE(v74) = sub_100621BF8(v81, v82, v80);
                swift_bridgeObjectRelease(v80);
                if ((v74 & 1) == 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
                    v47 = sub_100D0F1CC(0, v47[2] + 1, 1, v47);
                  v84 = v47[2];
                  v83 = v47[3];
                  if (v84 >= v83 >> 1)
                    v47 = sub_100D0F1CC((_QWORD *)(v83 > 1), v84 + 1, 1, v47);
                  v47[2] = v84 + 1;
                  v71 = &v47[2 * v84];
                  v71[4] = v81;
                  *((_BYTE *)v71 + 40) = v82;
                  sub_100AD6264((uint64_t)v107, v81, v82);
                }
                (*(void (**)(char *, uint64_t))(v103 + 8))(v9, v7);
                CRAttributedString.Runs.next()(v105);
                if (v61(v12, 1, v7) == 1)
                  break;
                ((void (*)(char *, char *, uint64_t))v100)(v9, v12, v7);
              }
            }
            (*(void (**)(char *, uint64_t))(v87 + 8))(v104, v105);
            v35 = v96;
            v33 = v97;
            v50 = v92;
            goto LABEL_14;
          }
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  v32 = *(_QWORD *)&v31[v91];
  if (!v32)
  {
LABEL_33:
    __break(1u);
    return result;
  }
  v33 = v31;
  (*(void (**)(void))(*(_QWORD *)v32 + 760))();
  sub_1004D29BC((uint64_t)&v19[*(int *)(v88 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v34 = v90;
  v35 = v96;
  v30(v90, &v21[*(int *)(v89 + 20)], v96);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v36 = v93;
  v37 = CRAttributedString.subscript.getter(0, 0, v35);
  __chkstk_darwin(v37);
  *(&v85 - 4) = (char *)&type metadata for CRLWPParagraphAlignmentAttribute;
  v38 = sub_100573144();
  v39 = v106;
  *(&v85 - 3) = (char *)v38;
  *(&v85 - 2) = v39;
  v40 = swift_getKeyPath(&unk_100F39610);
  v41 = sub_10073D7B8();
  v42 = swift_retain(v39);
  v43 = v100;
  CRAttributedString.Substring.subscript.getter(&v108, v40, v100, v41, v42);
  v44 = swift_release(v40);
  (*(void (**)(char *, _QWORD *, __n128))(v94 + 8))(v36, v43, v44);
  v45 = v108;
  v46 = v109;
  v47 = sub_100D0F1CC(0, 1, 1, _swiftEmptyArrayStorage);
  v49 = v47[2];
  v48 = v47[3];
  if (v49 >= v48 >> 1)
    v47 = sub_100D0F1CC((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
  v50 = v92;
  v47[2] = v49 + 1;
  v51 = &v47[2 * v49];
  v51[4] = v45;
  *((_BYTE *)v51 + 40) = v46;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v35);
LABEL_14:
  v62 = v33;
  v63 = swift_bridgeObjectRetain(v47);
  v64 = sub_100DCF4F4(v63, v62);
  swift_bridgeObjectRelease(v47);

  v65 = v110;
  swift_bridgeObjectRelease(v47);
  v66 = swift_bridgeObjectRelease(v65);
  v67 = *(_QWORD *)(v64 + 16);
  if (v67 == 1)
  {
    v68 = *(_QWORD *)(v64 + 32);
    v69 = swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v95, v35, v69);
    return v68;
  }
  else if (v67)
  {
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v95, v35, v66);
  }
  else
  {
    swift_bridgeObjectRelease(v64);
    v64 = sub_1007E8C64(v62);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v95, v35);
  }
  return v64;
}

void sub_100DC53E4(uint64_t a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void *v85;
  __n128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __n128 v94;
  uint64_t v95;
  __n128 v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  uint64_t v108;
  unint64_t v109;
  float v110;
  uint64_t v111;
  float v112;
  float v113;
  uint64_t v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  __n128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t);
  uint64_t v190;
  float v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(char *, char *, uint64_t);
  unsigned int (*v201)(char *, uint64_t, uint64_t);
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  _QWORD v270[16];
  void *v271;
  _QWORD v272[14];
  int v273;
  char v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD v285[14];
  _QWORD v286[14];
  _QWORD v287[15];

  v194 = a3;
  v195 = a4;
  v209 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v203 = *(_QWORD *)(v5 - 8);
  v204 = v5;
  __chkstk_darwin(v5);
  v202 = (char *)&v189 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v198 = *(_QWORD *)(v7 - 8);
  v199 = v7;
  __chkstk_darwin(v7);
  v197 = (char *)&v189 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v9);
  v206 = (char *)&v189 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_1004B804C(&qword_1013F3C90);
  v190 = *(_QWORD *)(v208 - 8);
  v11 = __chkstk_darwin(v208);
  v233 = (uint64_t)&v189 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v207 = (char *)&v189 - v13;
  v14 = sub_1004B804C(&qword_1013F3D90);
  v236 = *(_QWORD *)(v14 - 8);
  v237 = v14;
  __chkstk_darwin(v14);
  v235 = (uint64_t)&v189 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v189 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v234);
  v20 = (char *)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v189 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v239 = (uint64_t)&v189 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v189 - v29;
  v31 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v205 = a2;
  v32 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v32)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 760))(v28);
  sub_1004D29BC((uint64_t)&v18[*(int *)(v16 + 20)], (uint64_t)v20);
  sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLWPShapeItemCRDTData);
  v238 = v22;
  v33 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v33(v30, v20, v21);
  sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLWPStorageCRDTData);
  v271 = &_swiftEmptySetSingleton;
  v196 = v21;
  v192 = v30;
  v34 = CRAttributedString.count.getter(v21);
  v35 = v205;
  if (!v34 || (sub_1007DACE0((uint64_t)v194, (uint64_t)v195) & 1) != 0)
  {
    v36 = *(_QWORD *)&v35[v31];
    if (!v36)
    {
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
    (*(void (**)(void))(*(_QWORD *)v36 + 760))();
    sub_1004D29BC((uint64_t)&v18[*(int *)(v16 + 20)], (uint64_t)v20);
    sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLWPShapeItemCRDTData);
    v37 = v196;
    v33((char *)v239, &v20[*(int *)(v234 + 20)], v196);
    sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLWPStorageCRDTData);
    v38 = v235;
    v39 = CRAttributedString.subscript.getter(0, 0, v37);
    __chkstk_darwin(v39);
    sub_1007393D0();
    v40 = v209;
    KeyPath = swift_getKeyPath(&unk_100F39610);
    v42 = sub_1007E678C();
    v43 = swift_retain(v40);
    v44 = v237;
    CRAttributedString.Substring.subscript.getter(&v240, KeyPath, v237, v42, v43);
    v45 = swift_release(KeyPath);
    (*(void (**)(uint64_t, uint64_t, __n128))(v236 + 8))(v38, v44, v45);
    v46 = v247;
    v47 = v248;
    v48 = v249;
    v49 = v250;
    v50 = v251;
    v51 = v252;
    v52 = v253;
    v236 = v241;
    v237 = v240;
    v234 = v243;
    v235 = v242;
    v232 = v245;
    v233 = v244;
    v231 = v246;
    sub_1004C485C(v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253);
    v53 = sub_100D0F1D8(0, 1, 1, _swiftEmptyArrayStorage);
    v55 = v53[2];
    v54 = v53[3];
    v56 = v53;
    if (v55 >= v54 >> 1)
      v56 = sub_100D0F1D8((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
    v56[2] = v55 + 1;
    v57 = &v56[14 * v55];
    v59 = v236;
    v58 = v237;
    v57[4] = v237;
    v57[5] = v59;
    v61 = v234;
    v60 = v235;
    v57[6] = v235;
    v57[7] = v61;
    v63 = v232;
    v62 = v233;
    v57[8] = v233;
    v57[9] = v63;
    v64 = v231;
    v57[10] = v231;
    v57[11] = v46;
    v57[12] = v47;
    v57[13] = v48;
    v57[14] = v49;
    v57[15] = v50;
    v57[16] = v51;
    v57[17] = v52;
    v186 = v51;
    v65 = v56;
    sub_1004C4174(v58, v59, v60, v61, v62, v63, v64, v46, v47, v48, v49, v50, v186, v52);
    v66 = *(_QWORD *)(v238 + 8);
    ((void (*)(uint64_t, uint64_t))v66)(v239, v196);
    v67 = v205;
LABEL_19:
    v83 = v67;
    v84 = swift_bridgeObjectRetain(v65);
    v72 = (uint64_t)sub_100DCEA5C(v84, v83);
    swift_bridgeObjectRelease(v65);

    v85 = v271;
    swift_bridgeObjectRelease(v65);
    v86 = swift_bridgeObjectRelease(v85);
    if ((unint64_t)v72 >> 62)
    {
      if (v72 < 0)
        v177 = v72;
      else
        v177 = v72 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v72);
      v178 = _CocoaArrayWrapper.endIndex.getter(v177);
      swift_bridgeObjectRelease(v72);
      if (v178)
      {
        swift_bridgeObjectRetain(v72);
        v179 = _CocoaArrayWrapper.endIndex.getter(v177);
        v86 = swift_bridgeObjectRelease(v72);
        if (v179 >= 2)
          goto LABEL_103;
        goto LABEL_98;
      }
    }
    else
    {
      v87 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v87)
      {
        if (v87 >= 2)
          goto LABEL_103;
LABEL_98:
        if ((v72 & 0xC000000000000001) == 0)
        {
          if (*(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v180 = *(id *)(v72 + 32);
LABEL_101:
            v86 = swift_bridgeObjectRelease(v72);
LABEL_103:
            ((void (*)(char *, uint64_t, __n128))v66)(v192, v196, v86);
            return;
          }
          __break(1u);
          goto LABEL_107;
        }
LABEL_105:
        specialized _ArrayBuffer._getElementSlowPath(_:)(0, v72);
        goto LABEL_101;
      }
    }
    swift_bridgeObjectRelease(v72);
    sub_1007E85E4(v83);
    goto LABEL_103;
  }
  v68 = sub_1007DAEB0(v194, v195);
  v239 = v69;
  v70 = *(_QWORD *)&v35[v31];
  if (v70)
  {
    v66 = (uint64_t)v68;
    (*(void (**)(void))(*(_QWORD *)v70 + 760))();
    sub_1004D29BC((uint64_t)&v18[*(int *)(v16 + 20)], (uint64_t)v20);
    sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLWPShapeItemCRDTData);
    v71 = v196;
    v33(v25, v20, v196);
    sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLWPStorageCRDTData);
    v72 = CRAttributedString.count.getter(v71);
    v73 = *(void (**)(char *, uint64_t))(v238 + 8);
    v73(v25, v71);
    if (v72 >= (v66 & ~(v66 >> 63)))
      v74 = v66 & ~(v66 >> 63);
    else
      v74 = v72;
    if (v72 >= (v239 & ~(v239 >> 63)))
      v75 = v239 & ~(v239 >> 63);
    else
      v75 = v72;
    if (v75 < v74)
    {
      __break(1u);
      goto LABEL_105;
    }
    v189 = v73;
    v76 = v235;
    CRAttributedString.subscript.getter(v74, v75, v71);
    v77 = v233;
    v78 = v237;
    CRAttributedString.Substring.runs.getter(v237);
    (*(void (**)(uint64_t, uint64_t))(v236 + 8))(v76, v78);
    v79 = v208;
    (*(void (**)(char *, uint64_t, uint64_t))(v190 + 32))(v207, v77, v208);
    v80 = v206;
    CRAttributedString.Runs.next()(v79);
    v82 = v198;
    v81 = v199;
    v201 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48);
    if (v201(v80, 1, v199) == 1)
    {
      v65 = _swiftEmptyArrayStorage;
      v67 = v205;
LABEL_18:
      (*(void (**)(char *, uint64_t))(v190 + 8))(v207, v208);
      v66 = (uint64_t)v189;
      goto LABEL_19;
    }
    v200 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
    v65 = _swiftEmptyArrayStorage;
    v67 = v205;
    v88 = v197;
    while (2)
    {
      v210 = v65;
      v200(v88, v80, v81);
      v89 = v202;
      v90 = CRAttributedString.Runs.Run.attributes.getter(v81);
      __chkstk_darwin(v90);
      sub_1007393D0();
      v91 = v209;
      v92 = swift_getKeyPath(&unk_100F39610);
      v93 = sub_1007E678C();
      v94 = swift_retain(v91);
      v95 = v204;
      CRAttributedString.Attributes.subscript.getter(v270, v92, v204, v93, v94);
      v96 = swift_release(v92);
      (*(void (**)(char *, uint64_t, __n128))(v203 + 8))(v89, v95, v96);
      v97 = v271;
      sub_1004C4938((uint64_t)v270, (uint64_t)v272, &qword_1013F3148);
      if (!v97[2])
        goto LABEL_87;
      v98 = v270[0];
      v99 = v270[1];
      v100 = v270[2];
      v101 = v270[3];
      v102 = v270[4];
      v103 = v270[5];
      v219 = v270[6];
      v216 = v270[8];
      v217 = v270[7];
      v213 = v270[9];
      v215 = v270[10];
      v104 = v270[11];
      v105 = v270[12];
      v211 = v270[13];
      Hasher.init(_seed:)(&v240, v97[5]);
      sub_1004C4938((uint64_t)v272, (uint64_t)v285, &qword_1013F3148);
      v218 = v103;
      v220 = v104;
      v221 = v105;
      v226 = v99;
      v227 = v98;
      v222 = v100;
      v212 = v101;
      v214 = v102;
      if (v285[12])
      {
        Hasher._combine(_:)(1u);
        v273 = v100;
        v274 = BYTE4(v100) & 1;
        v275 = v101;
        v276 = v102;
        v277 = v218;
        v278 = v219;
        v279 = v217;
        v280 = v216;
        v281 = v213;
        v282 = v215;
        v283 = v104;
        v284 = v105;
        v268 = v98;
        v269 = v99 & 1;
        swift_bridgeObjectRetain(v97);
        sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
        v106 = sub_1004B804C(&qword_1013F3EB8);
        CRExtensible.hash(into:)(&v240, v106);
        sub_1006C4BDC();
        sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
      }
      else
      {
        Hasher._combine(_:)(0);
        swift_bridgeObjectRetain(v97);
      }
      v107 = Hasher._finalize()();
      v108 = -1 << *((_BYTE *)v97 + 32);
      v109 = v107 & ~v108;
      v225 = (char *)(v97 + 7);
      if (((*(_QWORD *)((char *)v97 + ((v109 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v109) & 1) == 0)
      {
LABEL_86:
        swift_bridgeObjectRelease(v97);
        v67 = v205;
        v82 = v198;
        v81 = v199;
        v88 = v197;
LABEL_87:
        sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
        v65 = v210;
        if ((swift_isUniquelyReferenced_nonNull_native(v210) & 1) == 0)
          v65 = sub_100D0F1D8(0, v65[2] + 1, 1, v65);
        v80 = v206;
        v175 = v65[2];
        v174 = v65[3];
        if (v175 >= v174 >> 1)
          v65 = sub_100D0F1D8((_QWORD *)(v174 > 1), v175 + 1, 1, v65);
        v65[2] = v175 + 1;
        sub_1004C4938((uint64_t)v272, (uint64_t)&v65[14 * v175 + 4], &qword_1013F3148);
        sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
        sub_100AD648C(&v240, v272);
        sub_1004C4174(v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253);
        sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v88, v81);
        goto LABEL_25;
      }
      v223 = ~v108;
      v110 = *(float *)&v222;
      v111 = v218;
      v112 = *((float *)&v214 + 1);
      v113 = *(float *)&v217;
      v114 = v216;
      v115 = *((float *)&v217 + 1);
      v191 = *(float *)&v215;
      v224 = v97;
      while (1)
      {
        v126 = (uint64_t *)(v97[6] + 112 * v109);
        v128 = *v126;
        v127 = v126[1];
        v130 = v126[2];
        v129 = v126[3];
        v131 = v126[4];
        v132 = v126[5];
        v133 = v126[6];
        v135 = v126[8];
        v134 = v126[9];
        v234 = v126[7];
        v235 = v134;
        v136 = v126[10];
        v237 = v126[11];
        v238 = v136;
        v137 = v126[12];
        v239 = v126[13];
        v236 = v137;
        v232 = v109;
        v233 = v133;
        if (!v137)
          break;
        sub_1004C4938((uint64_t)v272, (uint64_t)v286, &qword_1013F3148);
        if (!v286[12])
          goto LABEL_33;
        v240 = v128;
        LOBYTE(v241) = v127 & 1;
        v268 = v227;
        v269 = v226 & 1;
        sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
        v138 = v235;
        v139 = v133;
        v140 = v234;
        sub_1004C485C(v128, v127, v130, v129, v131, v132, v139, v234, v135, v235, v238, v237, v236, v239);
        v141 = sub_1007C8324();
        if ((static CRExtensible.== infix(_:_:)(&v240, &v268, &type metadata for CRLFillData.FillType, v141, &protocol witness table for Int, &protocol witness table for Int) & 1) != 0)
        {
          v230 = v131;
          v231 = v132;
          if ((v130 & 0x100000000) != 0)
          {
            v146 = v221;
            v147 = v220;
            v125 = v232;
            v142 = v233;
            v148 = v230;
            v149 = v129;
            if ((v222 & 0x100000000) == 0)
              goto LABEL_54;
          }
          else
          {
            v125 = v232;
            v142 = v233;
            v143 = v230;
            v144 = v231;
            v145 = v129;
            if ((v222 & 0x100000000) != 0)
            {
              v154 = v127;
              v151 = v233;
              sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
              v188 = v239;
              v187 = v236;
              v185 = v237;
              v184 = v238;
              v182 = v135;
              v183 = v235;
              v155 = v128;
              v156 = v154;
              v157 = v130;
              v158 = v145;
              v159 = v143;
              v160 = v144;
              goto LABEL_56;
            }
            v147 = v220;
            v146 = v221;
            v148 = v230;
            v149 = v129;
            if (*(float *)&v130 != v110)
              goto LABEL_54;
          }
          if (v142)
          {
            v150 = v219;
            if (!v219)
              goto LABEL_54;
            v193 = v127;
            v240 = v149;
            LOBYTE(v241) = v148 & 1;
            v268 = v212;
            v269 = v214 & 1;
            v151 = v142;
            v229 = sub_1006C5C14();
            swift_bridgeObjectRetain(v151);
            swift_bridgeObjectRetain(v150);
            if ((static CRExtensible.== infix(_:_:)(&v240, &v268, &type metadata for CRLColorModelRGBData.ColorSpace, v229, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)
            {
              swift_bridgeObjectRelease(v151);
              v163 = v150;
              goto LABEL_69;
            }
            if (*((float *)&v148 + 1) != v112)
            {
              swift_bridgeObjectRelease(v151);
              v163 = v219;
LABEL_69:
              swift_bridgeObjectRelease(v163);
              sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
              v188 = v239;
              v187 = v236;
              v185 = v237;
              v184 = v238;
              v182 = v135;
              v183 = v235;
              v155 = v128;
              v156 = v193;
LABEL_55:
              v157 = v130;
              v158 = v149;
              v159 = v148;
              v160 = v231;
LABEL_56:
              v162 = v151;
              goto LABEL_57;
            }
            v152 = v231;
            if (*(float *)&v231 != *(float *)&v111 || *((float *)&v231 + 1) != *((float *)&v111 + 1))
            {
              swift_bridgeObjectRelease(v151);
              swift_bridgeObjectRelease(v219);
              sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
              v188 = v239;
              v187 = v236;
              v185 = v237;
              v184 = v238;
              v182 = v135;
              v183 = v235;
              v155 = v128;
              v156 = v193;
              v157 = v130;
              v158 = v149;
              v159 = v148;
              v160 = v152;
              goto LABEL_56;
            }
            v153 = v219;
            LODWORD(v229) = sub_100C9E04C(v151, v219);
            swift_bridgeObjectRelease(v151);
            swift_bridgeObjectRelease(v153);
            v142 = v151;
            v147 = v220;
            v146 = v221;
            v127 = v193;
            if ((v229 & 1) == 0)
              goto LABEL_54;
          }
          else if (v219)
          {
            goto LABEL_54;
          }
          if (v235)
          {
            if (!v213)
              goto LABEL_54;
            v229 = v130;
            v164 = v234;
            if (*(float *)&v234 != v113 || *((float *)&v234 + 1) != v115 || *(float *)&v135 != *(float *)&v114)
            {
              sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
              sub_1004C4174(v128, v127, v229, v129, v230, v231, v233, v164, v135, v235, v238, v237, v236, v239);
              goto LABEL_34;
            }
            if (*((float *)&v135 + 1) != *((float *)&v114 + 1))
            {
              sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
              v188 = v239;
              v187 = v236;
              v185 = v237;
              v184 = v238;
              v182 = v135;
              v183 = v235;
              v155 = v128;
              v156 = v127;
              v157 = v229;
              v158 = v129;
LABEL_84:
              v159 = v230;
              v160 = v231;
              v162 = v233;
LABEL_57:
              sub_1004C4174(v155, v156, v157, v158, v159, v160, v162, v234, v182, v183, v184, v185, v187, v188);
              goto LABEL_34;
            }
            v165 = v235;
            swift_bridgeObjectRetain(v235);
            v166 = v213;
            swift_bridgeObjectRetain(v213);
            LODWORD(v193) = sub_100C9E04C(v165, v166);
            swift_bridgeObjectRelease(v165);
            swift_bridgeObjectRelease(v166);
            v147 = v220;
            v146 = v221;
            v142 = v233;
            v130 = v229;
            v148 = v230;
            v149 = v129;
            if ((v193 & 1) == 0)
              goto LABEL_54;
          }
          else if (v213)
          {
LABEL_54:
            v161 = v127;
            v151 = v142;
            sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
            v188 = v239;
            v187 = v236;
            v185 = v237;
            v184 = v238;
            v182 = v135;
            v183 = v235;
            v155 = v128;
            v156 = v161;
            goto LABEL_55;
          }
          v228 = v149;
          v167 = v237;
          if (v237)
          {
            v168 = v235;
            v169 = v236;
            v170 = v238;
            if (!v147)
              goto LABEL_82;
            if (*(float *)&v238 != v191)
              goto LABEL_82;
            v171 = v147;
            swift_bridgeObjectRetain(v147);
            v172 = swift_bridgeObjectRetain(v167);
            LODWORD(v229) = sub_100C9E04C(v172, v171);
            swift_bridgeObjectRelease(v167);
            v173 = v171;
            v168 = v235;
            swift_bridgeObjectRelease(v173);
            v146 = v221;
            if ((v229 & 1) == 0)
            {
LABEL_82:
              sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
              v187 = v169;
              v188 = v239;
              v185 = v167;
              goto LABEL_83;
            }
          }
          else
          {
            v168 = v235;
            v169 = v236;
            v170 = v238;
            if (v147)
            {
              sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
              v187 = v169;
              v188 = v239;
              v185 = 0;
LABEL_83:
              v183 = v168;
              v184 = v170;
              v182 = v135;
              v155 = v128;
              v156 = v127;
              v157 = v130;
              v158 = v228;
              goto LABEL_84;
            }
          }
          if ((sub_100C9E04C(v169, v146) & 1) == 0)
            goto LABEL_82;
          LODWORD(v238) = sub_100C9E04C(v239, v211);
          sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
          sub_1004C4174(v128, v127, v130, v228, v230, v231, v233, v234, v135, v168, v170, v167, v169, v239);
          if ((v238 & 1) != 0)
          {
            swift_bridgeObjectRelease(v224);
            sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
            goto LABEL_92;
          }
        }
        else
        {
          sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
          sub_1004C4174(v128, v127, v130, v129, v131, v132, v233, v140, v135, v138, v238, v237, v236, v239);
          v125 = v232;
        }
LABEL_34:
        v97 = v224;
        v109 = (v125 + 1) & v223;
        if (((*(_QWORD *)&v225[(v109 >> 3) & 0xFFFFFFFFFFFFF8] >> v109) & 1) == 0)
          goto LABEL_86;
      }
      sub_1004C4938((uint64_t)v272, (uint64_t)v287, &qword_1013F3148);
      if (!v287[12])
      {
        v176 = swift_bridgeObjectRelease(v224);
LABEL_92:
        v88 = v197;
        v82 = v198;
        v81 = v199;
        (*(void (**)(char *, uint64_t, __n128))(v198 + 8))(v197, v199, v176);
        v67 = v205;
        v80 = v206;
        v65 = v210;
LABEL_25:
        CRAttributedString.Runs.next()(v208);
        if (v201(v80, 1, v81) == 1)
          goto LABEL_18;
        continue;
      }
      break;
    }
LABEL_33:
    v240 = v128;
    v241 = v127;
    v242 = v130;
    v243 = v129;
    v244 = v131;
    v245 = v132;
    v246 = v133;
    v116 = v135;
    v117 = v128;
    v118 = v127;
    v228 = v129;
    v229 = v130;
    v230 = v131;
    v231 = v132;
    v119 = v234;
    v120 = v235;
    v247 = v234;
    v248 = v116;
    v122 = v237;
    v121 = v238;
    v249 = v235;
    v250 = v238;
    v123 = v236;
    v251 = v237;
    v252 = v236;
    v124 = v239;
    v253 = v239;
    v254 = v227;
    v255 = v226;
    v256 = v222;
    v257 = v212;
    v258 = v214;
    v259 = v218;
    v260 = v219;
    v261 = v217;
    v262 = v216;
    v263 = v213;
    v264 = v215;
    v265 = v220;
    v266 = v221;
    v267 = v211;
    sub_1007ECB8C(v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
    v181 = v116;
    v125 = v232;
    sub_1004C485C(v117, v118, v229, v228, v230, v231, v233, v119, v181, v120, v121, v122, v123, v124);
    sub_1007C825C((uint64_t)&v240);
    goto LABEL_34;
  }
LABEL_109:
  __break(1u);
}

uint64_t sub_100DC68C0(uint64_t a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  _QWORD *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t KeyPath;
  unint64_t v85;
  __n128 v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  char *v106;
  uint64_t v107;
  void *v108;
  char *v109;
  char *v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char v118[16];
  uint64_t v119;
  unsigned __int8 v120;
  void *v121;

  v109 = a3;
  v110 = a4;
  v117 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v112 = *(_QWORD *)(v5 - 8);
  v113 = v5;
  __chkstk_darwin(v5);
  v97 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v114 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_1004B804C(&qword_1013F3C90);
  v98 = *(_QWORD *)(v116 - 8);
  v13 = __chkstk_darwin(v116);
  v95 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v115 = (char *)&v94 - v15;
  v103 = sub_1004B804C(&qword_1013F3D90);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v99);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v23 = *(void (**)(char *, uint64_t))(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v96 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v100 = (char *)&v94 - v27;
  result = __chkstk_darwin(v26);
  v30 = (char *)&v94 - v29;
  v108 = a2;
  v111 = (void (*)(char *, char *, uint64_t))OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v31 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v31)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 760))(result);
  v104 = v17;
  sub_1004D29BC((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v105 = v23;
  v32 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v23 + 2);
  v32(v30, v21, v22);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v121 = &_swiftEmptySetSingleton;
  v106 = v30;
  v107 = v22;
  result = CRAttributedString.count.getter(v22);
  v33 = v108;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v109, (uint64_t)v110);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v109, v110);
      v57 = *(_QWORD *)((char *)v111 + (_QWORD)v33);
      if (!v57)
      {
LABEL_37:
        __break(1u);
        return result;
      }
      v58 = result;
      v59 = v56;
      (*(void (**)(void))(*(_QWORD *)v57 + 760))();
      sub_1004D29BC((uint64_t)&v19[*(int *)(v104 + 20)], (uint64_t)v21);
      sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
      v60 = v96;
      v61 = v107;
      v32(v96, v21, v107);
      sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
      v62 = CRAttributedString.count.getter(v61);
      v63 = (void (*)(char *, uint64_t))*((_QWORD *)v105 + 1);
      v63(v60, v61);
      if (v62 >= (v58 & ~(v58 >> 63)))
        result = v58 & ~(v58 >> 63);
      else
        result = v62;
      if (v62 >= (v59 & ~(v59 >> 63)))
        v64 = v59 & ~(v59 >> 63);
      else
        v64 = v62;
      v65 = v97;
      if (v64 >= result)
      {
        v105 = v63;
        v66 = v101;
        CRAttributedString.subscript.getter(result, v64, v61);
        v67 = v95;
        v68 = v103;
        CRAttributedString.Substring.runs.getter(v103);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v66, v68);
        v69 = v116;
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v115, v67, v116);
        CRAttributedString.Runs.next()(v69);
        v70 = v114;
        v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48);
        if (v71(v12, 1, v7) == 1)
        {
          v50 = _swiftEmptyArrayStorage;
        }
        else
        {
          v111 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
          v50 = _swiftEmptyArrayStorage;
          v111(v9, v12, v7);
          while (1)
          {
            v81 = CRAttributedString.Runs.Run.attributes.getter(v7);
            __chkstk_darwin(v81);
            *(&v94 - 4) = (uint64_t)&type metadata for CRLWPStrikethroughAttribute;
            v82 = sub_100739420();
            v83 = v117;
            *(&v94 - 3) = v82;
            *(&v94 - 2) = v83;
            KeyPath = swift_getKeyPath(&unk_100F39610);
            v85 = sub_10073DC5C();
            v86 = swift_retain(v83);
            v87 = v113;
            CRAttributedString.Attributes.subscript.getter(&v119, KeyPath, v113, v85, v86);
            v88 = swift_release(KeyPath);
            (*(void (**)(char *, uint64_t, __n128))(v112 + 8))(v65, v87, v88);
            v89 = (uint64_t)v121;
            v90 = v119;
            v91 = v120;
            swift_bridgeObjectRetain(v121);
            LOBYTE(v83) = sub_100621C1C(v90, v91, v89);
            swift_bridgeObjectRelease(v89);
            if ((v83 & 1) == 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
                v50 = sub_100D0F300(0, v50[2] + 1, 1, v50);
              v93 = v50[2];
              v92 = v50[3];
              if (v93 >= v92 >> 1)
                v50 = sub_100D0F300((_QWORD *)(v92 > 1), v93 + 1, 1, v50);
              v50[2] = v93 + 1;
              v80 = &v50[2 * v93];
              v80[4] = v90;
              *((_BYTE *)v80 + 40) = v91;
              sub_100AD6EA0((uint64_t)v118, v90, v91);
            }
            (*(void (**)(char *, uint64_t))(v114 + 8))(v9, v7);
            CRAttributedString.Runs.next()(v116);
            if (v71(v12, 1, v7) == 1)
              break;
            v111(v9, v12, v7);
          }
        }
        (*(void (**)(char *, uint64_t))(v98 + 8))(v115, v116);
        v38 = v107;
        v36 = v108;
        v55 = v105;
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_35;
    }
  }
  v34 = *(_QWORD *)((char *)v111 + (_QWORD)v33);
  if (!v34)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v35 = v32;
  v36 = v33;
  (*(void (**)(void))(*(_QWORD *)v34 + 760))();
  sub_1004D29BC((uint64_t)&v19[*(int *)(v104 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v37 = v100;
  v38 = v107;
  v35(v100, &v21[*(int *)(v99 + 20)], v107);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v39 = v101;
  v40 = CRAttributedString.subscript.getter(0, 0, v38);
  __chkstk_darwin(v40);
  *(&v94 - 4) = (uint64_t)&type metadata for CRLWPStrikethroughAttribute;
  v41 = sub_100739420();
  v42 = v117;
  *(&v94 - 3) = v41;
  *(&v94 - 2) = v42;
  v43 = swift_getKeyPath(&unk_100F39610);
  v44 = sub_10073DC5C();
  v45 = swift_retain(v42);
  v46 = v103;
  CRAttributedString.Substring.subscript.getter(&v119, v43, v103, v44, v45);
  v47 = swift_release(v43);
  (*(void (**)(char *, uint64_t, __n128))(v102 + 8))(v39, v46, v47);
  v48 = v119;
  v49 = v120;
  v50 = sub_100D0F300(0, 1, 1, _swiftEmptyArrayStorage);
  v52 = v50[2];
  v51 = v50[3];
  v53 = v105;
  if (v52 >= v51 >> 1)
    v50 = sub_100D0F300((_QWORD *)(v51 > 1), v52 + 1, 1, v50);
  v50[2] = v52 + 1;
  v54 = &v50[2 * v52];
  v54[4] = v48;
  *((_BYTE *)v54 + 40) = v49;
  v55 = (void (*)(char *, uint64_t))*((_QWORD *)v53 + 1);
  v55(v37, v38);
LABEL_19:
  v72 = v36;
  v73 = swift_bridgeObjectRetain(v50);
  v74 = sub_100DCE610(v73, v72);
  swift_bridgeObjectRelease(v50);

  v75 = v121;
  swift_bridgeObjectRelease(v50);
  v76 = swift_bridgeObjectRelease(v75);
  v77 = *(_QWORD *)(v74 + 16);
  if (v77 == 1)
  {
    v78 = *(_QWORD *)(v74 + 32);
    v79 = swift_bridgeObjectRelease(v74);
    ((void (*)(char *, uint64_t, __n128))v55)(v106, v38, v79);
    return v78;
  }
  else if (v77)
  {
    ((void (*)(char *, uint64_t, __n128))v55)(v106, v38, v76);
  }
  else
  {
    swift_bridgeObjectRelease(v74);
    v74 = sub_1007E82A0(v72);
    v55(v106, v38);
  }
  return v74;
}

uint64_t sub_100DC71FC(uint64_t a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  _QWORD *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t KeyPath;
  unint64_t v85;
  __n128 v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  char *v106;
  uint64_t v107;
  void *v108;
  char *v109;
  char *v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char v118[16];
  uint64_t v119;
  unsigned __int8 v120;
  void *v121;

  v109 = a3;
  v110 = a4;
  v117 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v112 = *(_QWORD *)(v5 - 8);
  v113 = v5;
  __chkstk_darwin(v5);
  v97 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v114 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_1004B804C(&qword_1013F3C90);
  v98 = *(_QWORD *)(v116 - 8);
  v13 = __chkstk_darwin(v116);
  v95 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v115 = (char *)&v94 - v15;
  v103 = sub_1004B804C(&qword_1013F3D90);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v99);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v23 = *(void (**)(char *, uint64_t))(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v96 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v100 = (char *)&v94 - v27;
  result = __chkstk_darwin(v26);
  v30 = (char *)&v94 - v29;
  v108 = a2;
  v111 = (void (*)(char *, char *, uint64_t))OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v31 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v31)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 760))(result);
  v104 = v17;
  sub_1004D29BC((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v105 = v23;
  v32 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v23 + 2);
  v32(v30, v21, v22);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v121 = &_swiftEmptySetSingleton;
  v106 = v30;
  v107 = v22;
  result = CRAttributedString.count.getter(v22);
  v33 = v108;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v109, (uint64_t)v110);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v109, v110);
      v57 = *(_QWORD *)((char *)v111 + (_QWORD)v33);
      if (!v57)
      {
LABEL_37:
        __break(1u);
        return result;
      }
      v58 = result;
      v59 = v56;
      (*(void (**)(void))(*(_QWORD *)v57 + 760))();
      sub_1004D29BC((uint64_t)&v19[*(int *)(v104 + 20)], (uint64_t)v21);
      sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
      v60 = v96;
      v61 = v107;
      v32(v96, v21, v107);
      sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
      v62 = CRAttributedString.count.getter(v61);
      v63 = (void (*)(char *, uint64_t))*((_QWORD *)v105 + 1);
      v63(v60, v61);
      if (v62 >= (v58 & ~(v58 >> 63)))
        result = v58 & ~(v58 >> 63);
      else
        result = v62;
      if (v62 >= (v59 & ~(v59 >> 63)))
        v64 = v59 & ~(v59 >> 63);
      else
        v64 = v62;
      v65 = v97;
      if (v64 >= result)
      {
        v105 = v63;
        v66 = v101;
        CRAttributedString.subscript.getter(result, v64, v61);
        v67 = v95;
        v68 = v103;
        CRAttributedString.Substring.runs.getter(v103);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v66, v68);
        v69 = v116;
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v115, v67, v116);
        CRAttributedString.Runs.next()(v69);
        v70 = v114;
        v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48);
        if (v71(v12, 1, v7) == 1)
        {
          v50 = _swiftEmptyArrayStorage;
        }
        else
        {
          v111 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
          v50 = _swiftEmptyArrayStorage;
          v111(v9, v12, v7);
          while (1)
          {
            v81 = CRAttributedString.Runs.Run.attributes.getter(v7);
            __chkstk_darwin(v81);
            *(&v94 - 4) = (uint64_t)&type metadata for CRLWPUnderlineAttribute;
            v82 = sub_100739464();
            v83 = v117;
            *(&v94 - 3) = v82;
            *(&v94 - 2) = v83;
            KeyPath = swift_getKeyPath(&unk_100F39610);
            v85 = sub_10073DCA0();
            v86 = swift_retain(v83);
            v87 = v113;
            CRAttributedString.Attributes.subscript.getter(&v119, KeyPath, v113, v85, v86);
            v88 = swift_release(KeyPath);
            (*(void (**)(char *, uint64_t, __n128))(v112 + 8))(v65, v87, v88);
            v89 = (uint64_t)v121;
            v90 = v119;
            v91 = v120;
            swift_bridgeObjectRetain(v121);
            LOBYTE(v83) = sub_100621C40(v90, v91, v89);
            swift_bridgeObjectRelease(v89);
            if ((v83 & 1) == 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
                v50 = sub_100D0F30C(0, v50[2] + 1, 1, v50);
              v93 = v50[2];
              v92 = v50[3];
              if (v93 >= v92 >> 1)
                v50 = sub_100D0F30C((_QWORD *)(v92 > 1), v93 + 1, 1, v50);
              v50[2] = v93 + 1;
              v80 = &v50[2 * v93];
              v80[4] = v90;
              *((_BYTE *)v80 + 40) = v91;
              sub_100AD70C8((uint64_t)v118, v90, v91);
            }
            (*(void (**)(char *, uint64_t))(v114 + 8))(v9, v7);
            CRAttributedString.Runs.next()(v116);
            if (v71(v12, 1, v7) == 1)
              break;
            v111(v9, v12, v7);
          }
        }
        (*(void (**)(char *, uint64_t))(v98 + 8))(v115, v116);
        v38 = v107;
        v36 = v108;
        v55 = v105;
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_35;
    }
  }
  v34 = *(_QWORD *)((char *)v111 + (_QWORD)v33);
  if (!v34)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v35 = v32;
  v36 = v33;
  (*(void (**)(void))(*(_QWORD *)v34 + 760))();
  sub_1004D29BC((uint64_t)&v19[*(int *)(v104 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v37 = v100;
  v38 = v107;
  v35(v100, &v21[*(int *)(v99 + 20)], v107);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v39 = v101;
  v40 = CRAttributedString.subscript.getter(0, 0, v38);
  __chkstk_darwin(v40);
  *(&v94 - 4) = (uint64_t)&type metadata for CRLWPUnderlineAttribute;
  v41 = sub_100739464();
  v42 = v117;
  *(&v94 - 3) = v41;
  *(&v94 - 2) = v42;
  v43 = swift_getKeyPath(&unk_100F39610);
  v44 = sub_10073DCA0();
  v45 = swift_retain(v42);
  v46 = v103;
  CRAttributedString.Substring.subscript.getter(&v119, v43, v103, v44, v45);
  v47 = swift_release(v43);
  (*(void (**)(char *, uint64_t, __n128))(v102 + 8))(v39, v46, v47);
  v48 = v119;
  v49 = v120;
  v50 = sub_100D0F30C(0, 1, 1, _swiftEmptyArrayStorage);
  v52 = v50[2];
  v51 = v50[3];
  v53 = v105;
  if (v52 >= v51 >> 1)
    v50 = sub_100D0F30C((_QWORD *)(v51 > 1), v52 + 1, 1, v50);
  v50[2] = v52 + 1;
  v54 = &v50[2 * v52];
  v54[4] = v48;
  *((_BYTE *)v54 + 40) = v49;
  v55 = (void (*)(char *, uint64_t))*((_QWORD *)v53 + 1);
  v55(v37, v38);
LABEL_19:
  v72 = v36;
  v73 = swift_bridgeObjectRetain(v50);
  v74 = sub_100DCE1B4(v73, v72);
  swift_bridgeObjectRelease(v50);

  v75 = v121;
  swift_bridgeObjectRelease(v50);
  v76 = swift_bridgeObjectRelease(v75);
  v77 = *(_QWORD *)(v74 + 16);
  if (v77 == 1)
  {
    v78 = *(_QWORD *)(v74 + 32);
    v79 = swift_bridgeObjectRelease(v74);
    ((void (*)(char *, uint64_t, __n128))v55)(v106, v38, v79);
    return v78;
  }
  else if (v77)
  {
    ((void (*)(char *, uint64_t, __n128))v55)(v106, v38, v76);
  }
  else
  {
    swift_bridgeObjectRelease(v74);
    v74 = sub_1007E7F60(v72);
    v55(v106, v38);
  }
  return v74;
}

uint64_t sub_100DC7B38(char *a1, char *a2, char *a3, char *a4)
{
  return sub_100DC7BC8(a1, a2, a3, a4, (char *)&type metadata for CRLWPFontItalicAttribute, (uint64_t (*)(uint64_t))sub_1007394A8, (uint64_t (*)(void))sub_10073DCE4, (uint64_t (*)(uint64_t, id, char *))sub_100DCDEA0, (uint64_t (*)(id, __n128))sub_1007E7D14);
}

uint64_t sub_100DC7B80(char *a1, char *a2, char *a3, char *a4)
{
  return sub_100DC7BC8(a1, a2, a3, a4, (char *)&type metadata for CRLWPFontBoldAttribute, (uint64_t (*)(uint64_t))sub_1007394EC, (uint64_t (*)(void))sub_10073DD28, (uint64_t (*)(uint64_t, id, char *))sub_100DCDB8C, (uint64_t (*)(id, __n128))sub_1007E7AC8);
}

uint64_t sub_100DC7BC8(char *a1, char *a2, char *a3, char *a4, char *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void), uint64_t (*a8)(uint64_t, id, char *), uint64_t (*a9)(id, __n128))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  __n128 v51;
  char v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  void (*v58)(char *, uint64_t);
  uint64_t (*v59)(uint64_t, id, char *);
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  int64_t v65;
  void (*v66)(char *, uint64_t);
  int64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  id v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  __n128 v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t KeyPath;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  __n128 v92;
  unsigned __int8 v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, id, char *);
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t v111;
  void *v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t (*v120)(uint64_t);
  char *v121;
  uint64_t (*v122)(void);
  char v123;
  _QWORD v124[2];
  void *v125;

  v107 = a8;
  v122 = a7;
  v119 = a5;
  v120 = a6;
  v103 = (uint64_t)a4;
  v102 = (uint64_t)a3;
  v121 = a1;
  v10 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v114 = *(_QWORD *)(v10 - 8);
  v115 = v10;
  __chkstk_darwin(v10);
  v98 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C(&qword_1013F3C80);
  v116 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v15);
  v17 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_1004B804C(&qword_1013F3C90);
  v99 = *(_QWORD *)(v118 - 8);
  v18 = __chkstk_darwin(v118);
  v96 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v117 = (char *)&v96 - v20;
  v106 = sub_1004B804C(&qword_1013F3D90);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v100);
  v26 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v28 = *(void (**)(char *, uint64_t))(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v97 = (char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v101 = (char *)&v96 - v32;
  result = __chkstk_darwin(v31);
  v35 = (char *)&v96 - v34;
  v112 = a2;
  v113 = (void (*)(char *, char *, uint64_t))OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v36 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v36)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 760))(result);
  v108 = v22;
  sub_1004D29BC((uint64_t)&v24[*(int *)(v22 + 20)], (uint64_t)v26);
  sub_1004B84A4((uint64_t)v24, type metadata accessor for CRLWPShapeItemCRDTData);
  v109 = v28;
  v37 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v28 + 2);
  v37(v35, v26, v27);
  sub_1004B84A4((uint64_t)v26, type metadata accessor for CRLWPStorageCRDTData);
  v125 = &_swiftEmptySetSingleton;
  v110 = v35;
  v111 = v27;
  result = CRAttributedString.count.getter(v27);
  v38 = v112;
  if (result)
  {
    result = sub_1007DACE0(v102, v103);
    if ((result & 1) == 0)
    {
      v60 = v37;
      result = (uint64_t)sub_1007DAEB0((char *)v102, (char *)v103);
      v102 = result;
      v103 = (uint64_t)v61;
      v62 = *(_QWORD *)((char *)v113 + (_QWORD)v38);
      if (!v62)
      {
LABEL_37:
        __break(1u);
        return result;
      }
      (*(void (**)(void))(*(_QWORD *)v62 + 760))();
      sub_1004D29BC((uint64_t)&v24[*(int *)(v108 + 20)], (uint64_t)v26);
      sub_1004B84A4((uint64_t)v24, type metadata accessor for CRLWPShapeItemCRDTData);
      v63 = v97;
      v64 = v111;
      v60(v97, v26, v111);
      sub_1004B84A4((uint64_t)v26, type metadata accessor for CRLWPStorageCRDTData);
      v65 = CRAttributedString.count.getter(v64);
      v66 = (void (*)(char *, uint64_t))*((_QWORD *)v109 + 1);
      v66(v63, v64);
      if (v65 >= (v102 & ~(v102 >> 63)))
        result = v102 & ~(v102 >> 63);
      else
        result = v65;
      if (v65 >= (v103 & ~(v103 >> 63)))
        v67 = v103 & ~(v103 >> 63);
      else
        v67 = v65;
      v68 = v98;
      if (v67 >= result)
      {
        v109 = v66;
        v69 = v104;
        CRAttributedString.subscript.getter(result, v67, v64);
        v70 = v96;
        v71 = v106;
        CRAttributedString.Substring.runs.getter(v106);
        (*(void (**)(char *, uint64_t))(v105 + 8))(v69, v71);
        v72 = v118;
        (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v117, v70, v118);
        CRAttributedString.Runs.next()(v72);
        v73 = v116;
        v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48);
        if (v74(v17, 1, v12) == 1)
        {
          v53 = _swiftEmptyArrayStorage;
        }
        else
        {
          v113 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
          v53 = _swiftEmptyArrayStorage;
          v113(v14, v17, v12);
          while (1)
          {
            v84 = CRAttributedString.Runs.Run.attributes.getter(v12);
            v85 = __chkstk_darwin(v84);
            *(&v96 - 4) = v119;
            v86 = v120(v85);
            v87 = v121;
            *(&v96 - 3) = (char *)v86;
            *(&v96 - 2) = v87;
            KeyPath = swift_getKeyPath(&unk_100F39610);
            v89 = v122();
            v90 = swift_retain(v87);
            v91 = v115;
            CRAttributedString.Attributes.subscript.getter(v124, KeyPath, v115, v89, v90);
            v92 = swift_release(KeyPath);
            (*(void (**)(char *, uint64_t, __n128))(v114 + 8))(v68, v91, v92);
            v93 = v124[0];
            if ((sub_100621DFC(v124[0], (uint64_t)v125) & 1) == 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
                v53 = sub_100D0F318(0, v53[2] + 1, 1, v53);
              v95 = v53[2];
              v94 = v53[3];
              if (v95 >= v94 >> 1)
                v53 = sub_100D0F318((_QWORD *)(v94 > 1), v95 + 1, 1, v53);
              v53[2] = v95 + 1;
              *((_BYTE *)v53 + v95 + 32) = v93;
              sub_100AD72F0(&v123, v93);
            }
            (*(void (**)(char *, uint64_t))(v116 + 8))(v14, v12);
            CRAttributedString.Runs.next()(v118);
            if (v74(v17, 1, v12) == 1)
              break;
            v113(v14, v17, v12);
          }
        }
        (*(void (**)(char *, uint64_t))(v99 + 8))(v117, v118);
        v59 = v107;
        v41 = v111;
        v38 = v112;
        v58 = v109;
        v56 = v110;
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_35;
    }
  }
  v39 = *(_QWORD *)((char *)v113 + (_QWORD)v38);
  if (!v39)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 760))();
  sub_1004D29BC((uint64_t)&v24[*(int *)(v108 + 20)], (uint64_t)v26);
  sub_1004B84A4((uint64_t)v24, type metadata accessor for CRLWPShapeItemCRDTData);
  v40 = v101;
  v41 = v111;
  v37(v101, &v26[*(int *)(v100 + 20)], v111);
  sub_1004B84A4((uint64_t)v26, type metadata accessor for CRLWPStorageCRDTData);
  v42 = v104;
  v43 = CRAttributedString.subscript.getter(0, 0, v41);
  v44 = __chkstk_darwin(v43);
  *(&v96 - 4) = v119;
  v45 = v120(v44);
  v46 = v121;
  *(&v96 - 3) = (char *)v45;
  *(&v96 - 2) = v46;
  v47 = swift_getKeyPath(&unk_100F39610);
  v48 = v122();
  v49 = swift_retain(v46);
  v50 = v106;
  CRAttributedString.Substring.subscript.getter(v124, v47, v106, v48, v49);
  v51 = swift_release(v47);
  (*(void (**)(char *, uint64_t, __n128))(v105 + 8))(v42, v50, v51);
  v52 = v124[0];
  v53 = sub_100D0F318(0, 1, 1, _swiftEmptyArrayStorage);
  v55 = v53[2];
  v54 = v53[3];
  v57 = v109;
  v56 = v110;
  if (v55 >= v54 >> 1)
    v53 = sub_100D0F318((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
  v53[2] = v55 + 1;
  *((_BYTE *)v53 + v55 + 32) = v52;
  v58 = (void (*)(char *, uint64_t))*((_QWORD *)v57 + 1);
  v58(v40, v41);
  v59 = v107;
LABEL_19:
  v75 = v38;
  v76 = swift_bridgeObjectRetain(v53);
  v77 = v59(v76, v75, (char *)v124 + 1);
  swift_bridgeObjectRelease(v53);

  v78 = v125;
  swift_bridgeObjectRelease(v53);
  v79 = swift_bridgeObjectRelease(v78);
  v80 = *(_QWORD *)(v77 + 16);
  if (v80 == 1)
  {
    v82 = *(unsigned __int8 *)(v77 + 32);
    v83 = swift_bridgeObjectRelease(v77);
    ((void (*)(char *, uint64_t, __n128))v58)(v56, v41, v83);
    return v82;
  }
  else if (v80)
  {
    ((void (*)(char *, uint64_t, __n128))v58)(v56, v41, v79);
  }
  else
  {
    v81 = swift_bridgeObjectRelease(v77);
    v77 = a9(v75, v81) & 1;
    v58(v56, v41);
  }
  return v77;
}

uint64_t sub_100DC8518(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t KeyPath;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  int v47;
  char v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  void (*v54)(char *, uint64_t);
  void *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int64_t v60;
  void (*v61)(char *, uint64_t);
  int64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  __n128 v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  __n128 v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  unsigned __int8 v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  uint64_t v105;
  void *v106;
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char v114[8];
  uint64_t v115;
  void *v116;

  v99 = (uint64_t)a4;
  v98 = (uint64_t)a3;
  v113 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v108 = *(_QWORD *)(v5 - 8);
  v109 = v5;
  __chkstk_darwin(v5);
  v94 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v110 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_1004B804C(&qword_1013F3C90);
  v95 = *(_QWORD *)(v112 - 8);
  v13 = __chkstk_darwin(v112);
  v92 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v111 = (char *)&v92 - v15;
  v16 = sub_1004B804C(&qword_1013F3D90);
  v101 = *(_QWORD *)(v16 - 8);
  v102 = v16;
  __chkstk_darwin(v16);
  v100 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v96);
  v22 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v24 = *(char **)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v93 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v97 = (char *)&v92 - v28;
  result = __chkstk_darwin(v27);
  v31 = (char *)&v92 - v30;
  v106 = a2;
  v107 = (void (*)(char *, char *, uint64_t))OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v32 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v32)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 760))(result);
  v103 = (void (*)(char *, uint64_t))v18;
  sub_1004D29BC((uint64_t)&v20[*(int *)(v18 + 20)], (uint64_t)v22);
  sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLWPShapeItemCRDTData);
  v104 = v24;
  v33 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v24 + 2);
  v33(v31, v22, v23);
  sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLWPStorageCRDTData);
  v116 = &_swiftEmptySetSingleton;
  v105 = v23;
  result = CRAttributedString.count.getter(v23);
  v34 = v106;
  if (!result || (result = sub_1007DACE0(v98, v99), (result & 1) != 0))
  {
    v35 = *(_QWORD *)((char *)v107 + (_QWORD)v34);
    if (v35)
    {
      (*(void (**)(void))(*(_QWORD *)v35 + 760))();
      sub_1004D29BC((uint64_t)&v20[*((int *)v103 + 5)], (uint64_t)v22);
      sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLWPShapeItemCRDTData);
      v36 = v97;
      v37 = v105;
      v33(v97, &v22[*(int *)(v96 + 20)], v105);
      sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLWPStorageCRDTData);
      v38 = v100;
      v39 = CRAttributedString.subscript.getter(0, 0, v37);
      __chkstk_darwin(v39);
      *(&v92 - 4) = (char *)&type metadata for CRLWPFontSizeAttribute;
      v40 = sub_100739530();
      v41 = v113;
      *(&v92 - 3) = (char *)v40;
      *(&v92 - 2) = v41;
      KeyPath = swift_getKeyPath(&unk_100F39610);
      v43 = sub_1007395C4();
      v44 = swift_retain(v41);
      v45 = v102;
      CRAttributedString.Substring.subscript.getter(&v115, KeyPath, v102, v43, v44);
      v46 = swift_release(KeyPath);
      (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v38, v45, v46);
      v47 = v115;
      v48 = BYTE4(v115);
      v49 = sub_100D0F410(0, 1, 1, _swiftEmptyArrayStorage);
      v51 = v49[2];
      v50 = v49[3];
      v52 = v104;
      if (v51 >= v50 >> 1)
        v49 = sub_100D0F410((_QWORD *)(v50 > 1), v51 + 1, 1, v49);
      v49[2] = v51 + 1;
      v53 = &v49[v51];
      *((_DWORD *)v53 + 8) = v47;
      *((_BYTE *)v53 + 36) = v48;
      v54 = (void (*)(char *, uint64_t))*((_QWORD *)v52 + 1);
      v54(v36, v37);
      v55 = v106;
      goto LABEL_19;
    }
    goto LABEL_37;
  }
  result = (uint64_t)sub_1007DAEB0((char *)v98, (char *)v99);
  v98 = result;
  v99 = (uint64_t)v56;
  v57 = *(_QWORD *)((char *)v107 + (_QWORD)v34);
  if (v57)
  {
    (*(void (**)(void))(*(_QWORD *)v57 + 760))();
    sub_1004D29BC((uint64_t)&v20[*((int *)v103 + 5)], (uint64_t)v22);
    sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLWPShapeItemCRDTData);
    v58 = v93;
    v59 = v105;
    v33(v93, v22, v105);
    sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLWPStorageCRDTData);
    v60 = CRAttributedString.count.getter(v59);
    v61 = (void (*)(char *, uint64_t))*((_QWORD *)v104 + 1);
    v61(v58, v59);
    if (v60 >= (v98 & ~(v98 >> 63)))
      result = v98 & ~(v98 >> 63);
    else
      result = v60;
    if (v60 >= (v99 & ~(v99 >> 63)))
      v62 = v99 & ~(v99 >> 63);
    else
      v62 = v60;
    v63 = v94;
    if (v62 >= result)
    {
      v103 = v61;
      v104 = v31;
      v64 = v100;
      CRAttributedString.subscript.getter(result, v62, v59);
      v65 = v92;
      v66 = v102;
      CRAttributedString.Substring.runs.getter(v102);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v64, v66);
      v67 = v112;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v111, v65, v112);
      CRAttributedString.Runs.next()(v67);
      v68 = v110;
      v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
      if (v69(v12, 1, v7) == 1)
      {
        v49 = _swiftEmptyArrayStorage;
      }
      else
      {
        v107 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
        v49 = _swiftEmptyArrayStorage;
        v107(v9, v12, v7);
        while (1)
        {
          v80 = CRAttributedString.Runs.Run.attributes.getter(v7);
          __chkstk_darwin(v80);
          *(&v92 - 4) = (char *)&type metadata for CRLWPFontSizeAttribute;
          v81 = sub_100739530();
          v82 = v113;
          *(&v92 - 3) = (char *)v81;
          *(&v92 - 2) = v82;
          v83 = swift_getKeyPath(&unk_100F39610);
          v84 = sub_1007395C4();
          v85 = swift_retain(v82);
          v86 = v109;
          CRAttributedString.Attributes.subscript.getter(&v115, v83, v109, v84, v85);
          v87 = swift_release(v83);
          (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v63, v86, v87);
          v88 = v115;
          v89 = BYTE4(v115);
          v114[0] = BYTE4(v115);
          if ((sub_100621F08(v115 | ((unint64_t)BYTE4(v115) << 32), (uint64_t)v116) & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
              v49 = sub_100D0F410(0, v49[2] + 1, 1, v49);
            v91 = v49[2];
            v90 = v49[3];
            if (v91 >= v90 >> 1)
              v49 = sub_100D0F410((_QWORD *)(v90 > 1), v91 + 1, 1, v49);
            v49[2] = v91 + 1;
            v79 = &v49[v91];
            *((_DWORD *)v79 + 8) = v88;
            *((_BYTE *)v79 + 36) = v89;
            v114[0] = v89;
            sub_100AD7450((uint64_t)v114, v88 | ((unint64_t)v89 << 32));
          }
          (*(void (**)(char *, uint64_t))(v110 + 8))(v9, v7);
          CRAttributedString.Runs.next()(v112);
          if (v69(v12, 1, v7) == 1)
            break;
          v107(v9, v12, v7);
        }
      }
      (*(void (**)(char *, uint64_t))(v95 + 8))(v111, v112);
      v37 = v105;
      v55 = v106;
      v54 = v103;
      v31 = v104;
LABEL_19:
      v70 = v55;
      v71 = swift_bridgeObjectRetain(v49);
      v72 = sub_100DCD87C(v71, (uint64_t)v70);
      swift_bridgeObjectRelease(v49);

      v73 = v116;
      swift_bridgeObjectRelease(v49);
      v74 = swift_bridgeObjectRelease(v73);
      v75 = *(_QWORD *)(v72 + 16);
      if (v75 == 1)
      {
        v77 = *(_DWORD *)(v72 + 32);
        swift_bridgeObjectRelease(v72);
      }
      else
      {
        if (v75)
        {
          ((void (*)(char *, uint64_t, __n128))v54)(v31, v37, v74);
          v77 = v72;
          v78 = v72 & 0xFFFFFFFF00000000;
          return v78 | v77;
        }
        swift_bridgeObjectRelease(v72);
        sub_1007E7874((uint64_t)v70);
        v77 = v76;
      }
      v54(v31, v37);
      v78 = 0;
      return v78 | v77;
    }
    __break(1u);
    goto LABEL_36;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100DC8E48(uint64_t a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t KeyPath;
  unint64_t v85;
  __n128 v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  char *v107;
  uint64_t v108;
  void *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unsigned int (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120[2];
  unsigned __int8 v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 v124;
  void *v125;

  v110 = a3;
  v111 = a4;
  v119 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v114 = *(_QWORD *)(v5 - 8);
  v115 = v5;
  __chkstk_darwin(v5);
  v99 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v116 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_1004B804C(&qword_1013F3C90);
  v100 = *(_QWORD *)(v118 - 8);
  v13 = __chkstk_darwin(v118);
  v97 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v117 = (char *)&v96 - v15;
  v105 = sub_1004B804C(&qword_1013F3D90);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v101);
  v21 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v98 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v102 = (char *)&v96 - v27;
  result = __chkstk_darwin(v26);
  v30 = (char *)&v96 - v29;
  v109 = a2;
  v113 = (unsigned int (*)(char *, uint64_t, uint64_t))OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v31 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v31)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 760))(result);
  v106 = (void (*)(char *, uint64_t))v17;
  sub_1004D29BC((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v112 = v23;
  v32 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v32(v30, v21, v22);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v125 = &_swiftEmptySetSingleton;
  v108 = v22;
  v107 = v30;
  result = CRAttributedString.count.getter(v22);
  v33 = v109;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v110, (uint64_t)v111);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v110, v111);
      v58 = *(_QWORD *)((char *)v113 + (_QWORD)v33);
      if (!v58)
      {
LABEL_36:
        __break(1u);
        return result;
      }
      v59 = result;
      v60 = v57;
      (*(void (**)(void))(*(_QWORD *)v58 + 760))();
      sub_1004D29BC((uint64_t)&v19[*((int *)v106 + 5)], (uint64_t)v21);
      sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
      v61 = v98;
      v62 = v108;
      v32(v98, v21, v108);
      sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
      v63 = CRAttributedString.count.getter(v62);
      v64 = *(void (**)(char *, uint64_t))(v112 + 8);
      v64(v61, v62);
      if (v63 >= (v59 & ~(v59 >> 63)))
        result = v59 & ~(v59 >> 63);
      else
        result = v63;
      if (v63 >= (v60 & ~(v60 >> 63)))
        v65 = v60 & ~(v60 >> 63);
      else
        v65 = v63;
      v66 = v99;
      if (v65 >= result)
      {
        v106 = v64;
        v67 = v103;
        ((void (*)(void))CRAttributedString.subscript.getter)();
        v68 = v97;
        v69 = v105;
        CRAttributedString.Substring.runs.getter(v105);
        (*(void (**)(char *, uint64_t))(v104 + 8))(v67, v69);
        v70 = v118;
        (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v117, v68, v118);
        CRAttributedString.Runs.next()(v70);
        v71 = v116;
        v113 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48);
        v51 = _swiftEmptyArrayStorage;
        if (v113(v12, 1, v7) != 1)
        {
          v112 = *(_QWORD *)(v71 + 32);
          ((void (*)(char *, char *, uint64_t))v112)(v9, v12, v7);
          while (1)
          {
            v81 = CRAttributedString.Runs.Run.attributes.getter(v7);
            __chkstk_darwin(v81);
            *(&v96 - 4) = (uint64_t)&type metadata for CRLWPFontNameAttribute;
            v82 = sub_100739574();
            v83 = v119;
            *(&v96 - 3) = v82;
            *(&v96 - 2) = v83;
            KeyPath = swift_getKeyPath(&unk_100F39610);
            v85 = sub_1007E6618();
            v86 = swift_retain(v83);
            v87 = v115;
            CRAttributedString.Attributes.subscript.getter(&v122, KeyPath, v115, v85, v86);
            v88 = swift_release(KeyPath);
            (*(void (**)(char *, uint64_t, __n128))(v114 + 8))(v66, v87, v88);
            v89 = (uint64_t)v125;
            v91 = v122;
            v90 = v123;
            v92 = v124;
            swift_bridgeObjectRetain(v125);
            v93 = sub_100622008(v91, v90, v92, v89);
            swift_bridgeObjectRelease(v89);
            if ((v93 & 1) == 0)
            {
              sub_1004C48FC(v91, v90, v92);
              if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
                v51 = sub_100D0F51C(0, v51[2] + 1, 1, v51);
              v95 = v51[2];
              v94 = v51[3];
              if (v95 >= v94 >> 1)
                v51 = sub_100D0F51C((_QWORD *)(v94 > 1), v95 + 1, 1, v51);
              v51[2] = v95 + 1;
              v80 = &v51[3 * v95];
              v80[4] = v91;
              v80[5] = v90;
              *((_BYTE *)v80 + 48) = v92;
              sub_1004C48FC(v91, v90, v92);
              sub_100AD75C0((uint64_t)v120, v91, v90, v92);
              sub_1004C4218(v120[0], v120[1], v121);
            }
            sub_1004C4218(v91, v90, v92);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            CRAttributedString.Runs.next()(v118);
            if (v113(v12, 1, v7) == 1)
              break;
            ((void (*)(char *, char *, uint64_t))v112)(v9, v12, v7);
          }
        }
        (*(void (**)(char *, uint64_t))(v100 + 8))(v117, v118);
        v38 = v108;
        v36 = v109;
        v56 = v106;
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_34;
    }
  }
  v34 = *(_QWORD *)((char *)v113 + (_QWORD)v33);
  if (!v34)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v35 = v32;
  v36 = v33;
  (*(void (**)(void))(*(_QWORD *)v34 + 760))();
  sub_1004D29BC((uint64_t)&v19[*((int *)v106 + 5)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v37 = v102;
  v38 = v108;
  v35(v102, &v21[*(int *)(v101 + 20)], v108);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v39 = v103;
  v40 = CRAttributedString.subscript.getter(0, 0, v38);
  __chkstk_darwin(v40);
  *(&v96 - 4) = (uint64_t)&type metadata for CRLWPFontNameAttribute;
  v41 = sub_100739574();
  v42 = v119;
  *(&v96 - 3) = v41;
  *(&v96 - 2) = v42;
  v43 = swift_getKeyPath(&unk_100F39610);
  v44 = sub_1007E6618();
  v45 = swift_retain(v42);
  v46 = v105;
  CRAttributedString.Substring.subscript.getter(&v122, v43, v105, v44, v45);
  v47 = swift_release(v43);
  (*(void (**)(char *, uint64_t, __n128))(v104 + 8))(v39, v46, v47);
  v48 = v122;
  v49 = v123;
  v50 = v124;
  sub_1004C48FC(v122, v123, v124);
  v51 = sub_100D0F51C(0, 1, 1, _swiftEmptyArrayStorage);
  v53 = v51[2];
  v52 = v51[3];
  v54 = v112;
  if (v53 >= v52 >> 1)
    v51 = sub_100D0F51C((_QWORD *)(v52 > 1), v53 + 1, 1, v51);
  v51[2] = v53 + 1;
  v55 = &v51[3 * v53];
  v55[4] = v48;
  v55[5] = v49;
  *((_BYTE *)v55 + 48) = v50;
  sub_1004C4218(v48, v49, v50);
  v56 = *(void (**)(char *, uint64_t))(v54 + 8);
  v56(v37, v38);
LABEL_18:
  v72 = v36;
  v73 = swift_bridgeObjectRetain(v51);
  v74 = sub_100DCD130(v73, v72);
  swift_bridgeObjectRelease(v51);

  v75 = v125;
  swift_bridgeObjectRelease(v51);
  v76 = swift_bridgeObjectRelease(v75);
  v77 = v74[2];
  if (v77 == 1)
  {
    v78 = v74[4];
    swift_bridgeObjectRetain(v74[5]);
    v79 = swift_bridgeObjectRelease(v74);
    ((void (*)(char *, uint64_t, __n128))v56)(v107, v38, v79);
    return v78;
  }
  else if (v77)
  {
    ((void (*)(char *, uint64_t, __n128))v56)(v107, v38, v76);
  }
  else
  {
    swift_bridgeObjectRelease(v74);
    v74 = (_QWORD *)sub_1007E74AC(v72);
    v56(v107, v38);
  }
  return (uint64_t)v74;
}

uint64_t sub_100DC9830(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  _QWORD *v43;
  __n128 v44;
  Swift::UInt v45;
  char v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  __n128 v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  __n128 v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t KeyPath;
  unint64_t v77;
  __n128 v78;
  uint64_t v79;
  __n128 v80;
  Swift::UInt v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char v107[16];
  Swift::UInt v108;
  char v109;
  void *v110;

  v93 = a4;
  v92 = a3;
  v106 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v103 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1004B804C(&qword_1013F3C90);
  v87 = *(_QWORD *)(v105 - 8);
  v13 = __chkstk_darwin(v105);
  v86 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v104 = (char *)&v85 - v15;
  v100 = (_QWORD *)sub_1004B804C(&qword_1013F3D90);
  v96 = *(v100 - 1);
  __chkstk_darwin(v100);
  v95 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v89);
  v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v90 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v24);
  v28 = (char *)&v85 - v27;
  v99 = a2;
  v91 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v29 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v29)
    goto LABEL_32;
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 760))(result);
  v88 = v17;
  sub_1004D29BC((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v94 = v23;
  v30 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v30(v28, v21, v22);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v110 = &_swiftEmptySetSingleton;
  v97 = v28;
  v98 = v22;
  result = CRAttributedString.count.getter(v22);
  v31 = v99;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v92, (uint64_t)v93);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v92, v93);
      if (__OFSUB__(v52, result))
      {
        __break(1u);
      }
      else
      {
        result = (uint64_t)objc_msgSend(v31, "textRangeForParagraphsInCharRange:", result, v52 - result);
        v54 = __OFADD__(result, v53);
        v55 = result + v53;
        if (!v54)
        {
          if (v55 >= result)
          {
            v56 = v95;
            CRAttributedString.subscript.getter(result, v55, v98);
            v57 = v86;
            v58 = v100;
            CRAttributedString.Substring.runs.getter(v100);
            (*(void (**)(char *, _QWORD *))(v96 + 8))(v56, v58);
            v59 = v105;
            (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v104, v57, v105);
            CRAttributedString.Runs.next()(v59);
            v60 = v103;
            v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
            if (v61(v12, 1, v7) == 1)
            {
              v47 = _swiftEmptyArrayStorage;
            }
            else
            {
              v100 = *(_QWORD **)(v60 + 32);
              v47 = _swiftEmptyArrayStorage;
              v71 = v85;
              ((void (*)(char *, char *, uint64_t))v100)(v9, v12, v7);
              while (1)
              {
                v73 = CRAttributedString.Runs.Run.attributes.getter(v7);
                __chkstk_darwin(v73);
                *(&v85 - 4) = (char *)&type metadata for CRLWPParagraphLevelAttribute;
                v74 = sub_100737064();
                v75 = v106;
                *(&v85 - 3) = (char *)v74;
                *(&v85 - 2) = v75;
                KeyPath = swift_getKeyPath(&unk_100F39610);
                v77 = sub_1007370A8();
                v78 = swift_retain(v75);
                v79 = v102;
                CRAttributedString.Attributes.subscript.getter(&v108, KeyPath, v102, v77, v78);
                v80 = swift_release(KeyPath);
                (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v71, v79, v80);
                v81 = v108;
                v82 = v109;
                if ((sub_10062195C(v108, v109, (uint64_t)v110) & 1) == 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
                    v47 = sub_100D0F0A0(0, v47[2] + 1, 1, v47);
                  v84 = v47[2];
                  v83 = v47[3];
                  if (v84 >= v83 >> 1)
                    v47 = sub_100D0F0A0((_QWORD *)(v83 > 1), v84 + 1, 1, v47);
                  v47[2] = v84 + 1;
                  v72 = &v47[2 * v84];
                  v72[4] = v81;
                  *((_BYTE *)v72 + 40) = v82;
                  sub_100AD5CC4((uint64_t)v107, v81, v82);
                }
                (*(void (**)(char *, uint64_t))(v103 + 8))(v9, v7);
                CRAttributedString.Runs.next()(v105);
                if (v61(v12, 1, v7) == 1)
                  break;
                ((void (*)(char *, char *, uint64_t))v100)(v9, v12, v7);
              }
            }
            (*(void (**)(char *, uint64_t))(v87 + 8))(v104, v105);
            v35 = v98;
            v33 = v99;
            v50 = v94;
            goto LABEL_14;
          }
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  v32 = *(_QWORD *)&v31[v91];
  if (!v32)
  {
LABEL_33:
    __break(1u);
    return result;
  }
  v33 = v31;
  (*(void (**)(void))(*(_QWORD *)v32 + 760))();
  sub_1004D29BC((uint64_t)&v19[*(int *)(v88 + 20)], (uint64_t)v21);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v34 = v90;
  v35 = v98;
  v30(v90, &v21[*(int *)(v89 + 20)], v98);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
  v36 = v95;
  v37 = CRAttributedString.subscript.getter(0, 0, v35);
  __chkstk_darwin(v37);
  *(&v85 - 4) = (char *)&type metadata for CRLWPParagraphLevelAttribute;
  v38 = sub_100737064();
  v39 = v106;
  *(&v85 - 3) = (char *)v38;
  *(&v85 - 2) = v39;
  v40 = swift_getKeyPath(&unk_100F39610);
  v41 = sub_1007370A8();
  v42 = swift_retain(v39);
  v43 = v100;
  CRAttributedString.Substring.subscript.getter(&v108, v40, v100, v41, v42);
  v44 = swift_release(v40);
  (*(void (**)(char *, _QWORD *, __n128))(v96 + 8))(v36, v43, v44);
  v45 = v108;
  v46 = v109;
  v47 = sub_100D0F0A0(0, 1, 1, _swiftEmptyArrayStorage);
  v49 = v47[2];
  v48 = v47[3];
  if (v49 >= v48 >> 1)
    v47 = sub_100D0F0A0((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
  v50 = v94;
  v47[2] = v49 + 1;
  v51 = &v47[2 * v49];
  v51[4] = v45;
  *((_BYTE *)v51 + 40) = v46;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v35);
LABEL_14:
  v62 = v33;
  swift_bridgeObjectRetain(v47);
  v64 = sub_100DD02D4(v63);
  swift_bridgeObjectRelease(v47);

  v65 = v110;
  swift_bridgeObjectRelease(v47);
  v66 = swift_bridgeObjectRelease(v65);
  v67 = v64[2];
  if (v67 == 1)
  {
    v69 = v64[4];
    v70 = swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v97, v35, v70);
    return v69;
  }
  else if (v67)
  {
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v97, v35, v66);
  }
  else
  {
    v68 = swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v97, v35, v68);
    return 0;
  }
  return (uint64_t)v64;
}

uint64_t sub_100DCA09C(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t result;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  __n128 v50;
  _QWORD *v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t KeyPath;
  unint64_t v80;
  __n128 v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  id v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  void *v98;
  id v99;
  __n128 v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void *v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned int (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  void *v128;
  _QWORD *v129;

  v109 = (uint64_t)a4;
  v108 = a3;
  v127 = a1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v122 = *(_QWORD *)(v5 - 8);
  v123 = v5;
  __chkstk_darwin(v5);
  v104 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v124 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v103 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v9);
  v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_1004B804C(&qword_1013F3C90);
  v105 = *(_QWORD *)(v126 - 8);
  v12 = __chkstk_darwin(v126);
  v101 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v125 = (char *)&v101 - v14;
  v112 = sub_1004B804C(&qword_1013F3D90);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  v118 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v117 = (uint64_t)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char **)((char *)&v101 - v20);
  __chkstk_darwin(v19);
  v119 = (char **)((char *)&v101 - v22);
  v23 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v106);
  v27 = (char *)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v102 = (char *)&v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v107 = (char *)&v101 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v101 - v35;
  v114 = a2;
  v121 = (unsigned int (*)(char *, uint64_t, uint64_t))OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v37 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v37)
    goto LABEL_30;
  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 760))(v34);
  *(_QWORD *)&v115 = v23;
  sub_1004D29BC((uint64_t)&v25[*(int *)(v23 + 20)], (uint64_t)v27);
  sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLWPShapeItemCRDTData);
  v120 = v29;
  v38 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v38(v36, v27, v28);
  sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLWPStorageCRDTData);
  v129 = _swiftEmptyArrayStorage;
  v128 = &_swiftEmptySetSingleton;
  v116 = v28;
  v113 = v36;
  result = CRAttributedString.count.getter(v28);
  v40 = v114;
  if (result)
  {
    result = sub_1007DACE0((uint64_t)v108, v109);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007DAEB0(v108, (char *)v109);
      v109 = result;
      v62 = *(_QWORD *)((char *)v121 + (_QWORD)v40);
      if (!v62)
      {
LABEL_32:
        __break(1u);
        return result;
      }
      v63 = v61;
      (*(void (**)(void))(*(_QWORD *)v62 + 760))();
      sub_1004D29BC((uint64_t)&v25[*(int *)(v115 + 20)], (uint64_t)v27);
      sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLWPShapeItemCRDTData);
      v64 = v102;
      v65 = v116;
      v38(v102, v27, v116);
      sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLWPStorageCRDTData);
      v66 = CRAttributedString.count.getter(v65);
      v108 = *(char **)(v120 + 8);
      ((void (*)(char *, uint64_t))v108)(v64, v65);
      if (v66 >= (v109 & ~(v109 >> 63)))
        v67 = v109 & ~(v109 >> 63);
      else
        v67 = v66;
      if (v66 >= (v63 & ~(v63 >> 63)))
        v68 = v63 & ~(v63 >> 63);
      else
        v68 = v66;
      v69 = v104;
      v70 = v103;
      if (v68 >= v67)
      {
        v71 = v110;
        v60 = v113;
        CRAttributedString.subscript.getter(v67, v68, v65);
        v72 = v101;
        v73 = v112;
        CRAttributedString.Substring.runs.getter(v112);
        (*(void (**)(char *, uint64_t))(v111 + 8))(v71, v73);
        v74 = v105;
        v75 = v126;
        (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v125, v72, v126);
        CRAttributedString.Runs.next()(v75);
        v76 = v124;
        v121 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48);
        if (v121(v11, 1, v7) == 1)
        {
          v59 = &_swiftEmptySetSingleton;
        }
        else
        {
          v120 = *(_QWORD *)(v76 + 32);
          v115 = xmmword_100EF5E40;
          v77 = v127;
          ((void (*)(char *, char *, uint64_t))v120)(v70, v11, v7);
          while (1)
          {
            v78 = CRAttributedString.Runs.Run.attributes.getter(v7);
            __chkstk_darwin(v78);
            *(&v101 - 4) = (char *)&type metadata for CRLWPHyperlinkAttribute;
            *(&v101 - 3) = (char *)sub_1007EC194();
            *(&v101 - 2) = v77;
            KeyPath = swift_getKeyPath(&unk_100F39610);
            v80 = sub_1007E6AC0();
            v81 = swift_retain(v77);
            v82 = v123;
            CRAttributedString.Attributes.subscript.getter(v21, KeyPath, v123, v80, v81);
            v83 = swift_release(KeyPath);
            (*(void (**)(char *, uint64_t, __n128))(v122 + 8))(v69, v82, v83);
            v84 = (uint64_t)v128;
            swift_bridgeObjectRetain(v128);
            LOBYTE(KeyPath) = sub_10062264C((uint64_t)v21, v84);
            swift_bridgeObjectRelease(v84);
            if ((KeyPath & 1) == 0)
            {
              v85 = sub_1004B804C(&qword_10140E878);
              v86 = *(unsigned __int8 *)(v118 + 80);
              v87 = (v86 + 32) & ~v86;
              v88 = swift_allocObject(v85, v87 + *(_QWORD *)(v118 + 72), v86 | 7);
              *(_OWORD *)(v88 + 16) = v115;
              sub_1004CB7BC((uint64_t)v21, v88 + v87, (uint64_t *)&unk_1013E87D0);
              sub_10061FB6C(v88);
              v89 = v117;
              sub_1004CB7BC((uint64_t)v21, v117, (uint64_t *)&unk_1013E87D0);
              v90 = v119;
              sub_100AD7EFC((uint64_t)v119, v89);
              sub_1004CB800((uint64_t)v90, (uint64_t *)&unk_1013E87D0);
            }
            sub_1004CB800((uint64_t)v21, (uint64_t *)&unk_1013E87D0);
            (*(void (**)(char *, uint64_t))(v124 + 8))(v70, v7);
            CRAttributedString.Runs.next()(v126);
            if (v121(v11, 1, v7) == 1)
              break;
            ((void (*)(char *, char *, uint64_t))v120)(v70, v11, v7);
          }
          v59 = v128;
          v60 = v113;
          v74 = v105;
        }
        (*(void (**)(char *, uint64_t))(v74 + 8))(v125, v126);
        v40 = v114;
        v58 = v108;
        goto LABEL_23;
      }
      __break(1u);
LABEL_30:
      __break(1u);
    }
  }
  v41 = *(_QWORD *)((char *)v121 + (_QWORD)v40);
  if (!v41)
  {
    __break(1u);
    goto LABEL_32;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 760))();
  sub_1004D29BC((uint64_t)&v25[*(int *)(v115 + 20)], (uint64_t)v27);
  sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLWPShapeItemCRDTData);
  v42 = v107;
  v43 = v116;
  v38(v107, &v27[*(int *)(v106 + 20)], v116);
  sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLWPStorageCRDTData);
  v44 = v110;
  v45 = CRAttributedString.subscript.getter(0, 0, v43);
  __chkstk_darwin(v45);
  *(&v101 - 4) = (char *)&type metadata for CRLWPHyperlinkAttribute;
  v46 = sub_1007EC194();
  v47 = v127;
  *(&v101 - 3) = (char *)v46;
  *(&v101 - 2) = v47;
  v48 = swift_getKeyPath(&unk_100F39610);
  v49 = sub_1007E6AC0();
  v50 = swift_retain(v47);
  v51 = v119;
  v52 = v112;
  CRAttributedString.Substring.subscript.getter(v119, v48, v112, v49, v50);
  v53 = swift_release(v48);
  (*(void (**)(char *, uint64_t, __n128))(v111 + 8))(v44, v52, v53);
  v54 = sub_1004B804C(&qword_10140E878);
  v55 = *(unsigned __int8 *)(v118 + 80);
  v56 = (v55 + 32) & ~v55;
  v57 = swift_allocObject(v54, v56 + *(_QWORD *)(v118 + 72), v55 | 7);
  *(_OWORD *)(v57 + 16) = xmmword_100EF5E40;
  sub_1004CB7BC((uint64_t)v51, v57 + v56, (uint64_t *)&unk_1013E87D0);
  sub_10061FB6C(v57);
  sub_1004CB800((uint64_t)v51, (uint64_t *)&unk_1013E87D0);
  v58 = *(char **)(v120 + 8);
  ((void (*)(char *, uint64_t))v58)(v42, v43);
  v59 = &_swiftEmptySetSingleton;
  v60 = v113;
LABEL_23:
  v91 = v129;
  v92 = v40;
  swift_bridgeObjectRetain(v91);
  v94 = sub_100DCFF94(v93, v92);
  swift_bridgeObjectRelease(v59);
  swift_bridgeObjectRelease_n(v91, 2);

  v95 = v94[2];
  if (v95 == 1)
  {
    v98 = (void *)v94[4];
    v99 = v98;
    v100 = swift_bridgeObjectRelease(v94);
    ((void (*)(char *, uint64_t, __n128))v58)(v60, v116, v100);
    return (uint64_t)v98;
  }
  else
  {
    v96 = v116;
    if (v95)
    {
      ((void (*)(char *, uint64_t))v58)(v60, v116);
    }
    else
    {
      v97 = swift_bridgeObjectRelease(v94);
      ((void (*)(char *, uint64_t, __n128))v58)(v60, v96, v97);
      return 0;
    }
  }
  return (uint64_t)v94;
}

void sub_100DCAB10(uint64_t a1)
{
  sub_100DCAE5C(a1, &qword_10140BD28, off_101229A10);
}

void sub_100DCAB24(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  __int16 v13;

  v3 = objc_msgSend(v1, "wpEditors");
  v4 = type metadata accessor for CRLWPEditor(0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  if (v5 < 0)
    v11 = v5;
  else
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v11);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_17;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    v7 = 0;
    v8 = 2;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      else
        v9 = *(id *)(v5 + 8 * v7 + 32);
      v10 = v9;
      v12 = v9;
      swift_getAtKeyPath(&v12, a1);

      if (v13 != 2 && v8 == 2)
        v8 = v13 & 1;
      ++v7;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
  }
}

void sub_100DCACC4(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  float v14;
  unsigned __int8 v15;

  v3 = objc_msgSend(v1, "wpEditors");
  v4 = type metadata accessor for CRLWPEditor(0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    return;
  }
  if (v5 < 0)
    v12 = v5;
  else
    v12 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_19;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = 2;
    v9 = 0.0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      else
        v10 = *(id *)(v5 + 8 * v7 + 32);
      v11 = v10;
      v13 = v10;
      swift_getAtKeyPath(&v13, a1);

      if (v15 != 2)
      {
        if ((_DWORD)v8 == 2)
        {
          v8 = ((LODWORD(v14) | ((unint64_t)v15 << 32)) >> 32) & 1;
          v9 = v14;
        }
        else if (v9 != v14)
        {
          LODWORD(v8) = 1;
        }
      }
      ++v7;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
  }
}

void sub_100DCAE48(uint64_t a1)
{
  sub_100DCAE5C(a1, (unint64_t *)&qword_1013F3910, off_101229898);
}

void sub_100DCAE5C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  void *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  id v30;
  void *v31;
  unsigned __int8 v32;

  v5 = objc_msgSend(v3, "wpEditors");
  v6 = type metadata accessor for CRLWPEditor(0);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease();
    return;
  }
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_21;
LABEL_3:
  if (v8 < 1)
  {
    __break(1u);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v7 & 0xC000000000000001;
    v27 = v7 & 0xC000000000000001;
    do
    {
      if (v12)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v7);
      else
        v13 = *(id *)(v7 + 8 * v11 + 32);
      v14 = v13;
      v30 = v13;
      swift_getAtKeyPath(&v30, a1);
      v15 = v31;
      if (v31)
      {
        if (v10)
        {
          sub_1004B8930(0, a2, a3);
          v16 = v8;
          v17 = v15;
          v18 = v9;
          v19 = v7;
          v20 = a1;
          v21 = v10;
          v22 = v17;
          v23 = v21;
          v24 = static NSObject.== infix(_:_:)(v22, v23);

          a1 = v20;
          v7 = v19;

          v25 = (v24 & 1) == 0;
          v8 = v16;
          v12 = v27;
          if (v25)
            v9 = 1;
          else
            v9 = v18;
        }
        else
        {
          v9 = v32;

          v10 = v15;
        }
      }
      else
      {

      }
      ++v11;
    }
    while (v8 != v11);
    swift_bridgeObjectRelease();
  }
}

void sub_100DCB058(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  id v10;
  void *v11;
  int v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char v16;

  v3 = objc_msgSend(v1, "wpEditors");
  v4 = type metadata accessor for CRLWPEditor(0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease();
    return;
  }
  if (v5 < 0)
    v13 = v5;
  else
    v13 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_21;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 2;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      else
        v10 = *(id *)(v5 + 8 * v8 + 32);
      v11 = v10;
      v14 = v10;
      swift_getAtKeyPath(&v14, a1);

      if (v16 != 2)
      {
        if (v15 == v7)
          v12 = v9;
        else
          v12 = 1;
        if (v9 == 2)
        {
          v7 = v15;
          v9 = v16 & 1;
        }
        else
        {
          v9 = v12;
        }
      }
      ++v8;
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
  }
}

void sub_100DCB1C8(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  id v10;
  void *v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  id v16;
  unsigned __int16 v17;

  v3 = objc_msgSend(v1, "wpEditors");
  v4 = type metadata accessor for CRLWPEditor(0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRelease();
    return;
  }
  if (v5 < 0)
    v15 = v5;
  else
    v15 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_25;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 2;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      else
        v10 = *(id *)(v5 + 8 * v8 + 32);
      v11 = v10;
      v16 = v10;
      swift_getAtKeyPath(&v16, a1);
      v12 = v17;
      if ((v17 & 0xFF00) == 0x200)
      {

      }
      else
      {
        v13 = v9;

        if (v7 == v12)
          v14 = v9;
        else
          v14 = 1;
        if (v9 == 2)
          v9 = (v12 >> 8) & 1;
        else
          v9 = v14;
        if (v13 == 2)
          v7 = v12;
      }
      ++v8;
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
  }
}

void sub_100DCB348(_WORD *a1@<X8>)
{
  sub_100DCB370((uint64_t)&unk_100F394C8, (uint64_t (*)(void))sub_100731A9C, a1);
}

void sub_100DCB35C(_WORD *a1@<X8>)
{
  sub_100DCB370((uint64_t)&unk_100F39510, (uint64_t (*)(void))sub_100731A78, a1);
}

void sub_100DCB370(uint64_t a1@<X3>, uint64_t (*a2)(void)@<X4>, _WORD *a3@<X8>)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(a1);
  LOWORD(a2) = a2();
  swift_release(KeyPath);
  *a3 = (_WORD)a2;
}

void sub_100DCB3BC(__int16 *a1@<X8>)
{
  sub_100DCB3E4((uint64_t)&unk_100F39558, (uint64_t (*)(void))sub_100731FB0, a1);
}

void sub_100DCB3D0(__int16 *a1@<X8>)
{
  sub_100DCB3E4((uint64_t)&unk_100F395A0, (uint64_t (*)(void))sub_100732254, a1);
}

void sub_100DCB3E4(uint64_t a1@<X3>, uint64_t (*a2)(void)@<X4>, __int16 *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int v9;
  __int16 v10;

  KeyPath = swift_getKeyPath(a1);
  v6 = a2();
  v8 = v7;
  v9 = v7;
  swift_release(KeyPath);
  if (v9 == 2)
    v10 = 2;
  else
    v10 = (v6 != 0) | ((v8 & 1) << 8);
  *a3 = v10;
}

void sub_100DCB458(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  id v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for CRLWPShapeItem(0);
  v6 = objc_msgSend(v2, "sortedBoardItemsOfClass:", swift_getObjCClassFromMetadata(v4, v5));
  v7 = type metadata accessor for CRLBoardItem(0);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if (!((unint64_t)v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_3;
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  if (v8 < 0)
    v17 = v8;
  else
    v17 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v9 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_22;
LABEL_3:
  if (v9 < 1)
  {
    __break(1u);
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 2;
    do
    {
      if ((v8 & 0xC000000000000001) != 0)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v8);
      else
        v13 = *(id *)(v8 + 8 * v11 + 32);
      v14 = v13;
      v15 = swift_dynamicCastClass(v13, v4);
      if (v15)
      {
        v18 = v15;
        swift_getAtKeyPath(&v18, a1);

        if (v19 == v10)
          v16 = v12;
        else
          v16 = 1;
        if (v12 == 2)
        {
          v10 = v19;
          v12 = 0;
        }
        else
        {
          v12 = v16;
        }
      }
      else
      {

      }
      ++v11;
    }
    while (v9 != v11);
    swift_bridgeObjectRelease();
  }
}

void sub_100DCB5E8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v2 = v1;
  v4 = type metadata accessor for CRLWPShapeItem(0);
  v6 = objc_msgSend(v2, "sortedBoardItemsOfClass:", swift_getObjCClassFromMetadata(v4, v5));
  v7 = type metadata accessor for CRLBoardItem(0);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if (!((unint64_t)v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRelease();
    return;
  }
  if (v8 < 0)
    v19 = v8;
  else
    v19 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v9 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_25;
LABEL_3:
  if (v9 < 1)
  {
    __break(1u);
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 2;
    do
    {
      if ((v8 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v8);
      else
        v16 = *(id *)(v8 + 8 * v12 + 32);
      v17 = v16;
      v18 = swift_dynamicCastClass(v16, v4);
      if (v18)
      {
        v20 = v18;
        swift_getAtKeyPath(&v20, a1);

        v14 = v13;
        if (((v10 ^ v21) & (v13 != 2)) != 0)
          v15 = 1;
        else
          v15 = v11;
        if (v13 == 2)
        {
          v13 = v21;
          v10 = v21;
        }
        else
        {
          v10 = v13 & 1;
        }
        if (v14 == 2)
          v11 = 0;
        else
          v11 = v15;
      }
      else
      {

      }
      ++v12;
    }
    while (v9 != v12);
    swift_bridgeObjectRelease();
  }
}

void CRLWPShapeEditor.toggleBoldface(_:)()
{
  void *v0;
  uint64_t KeyPath;
  char v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;

  KeyPath = swift_getKeyPath("p8T");
  sub_100DCAB24(KeyPath);
  v14 = v2;
  v3 = objc_msgSend(v0, "wpEditors", swift_release(KeyPath).n128_f64[0]);
  v4 = type metadata accessor for CRLWPEditor(0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (v6)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease_n(v5, 2);
    return;
  }
  if (v5 < 0)
    v13 = v5;
  else
    v13 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v13);
  if (!v6)
    goto LABEL_16;
LABEL_3:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
      else
        v8 = *(id *)(v5 + 8 * i + 32);
      v9 = v8;
      v10 = swift_getKeyPath("P8T");
      v11 = sub_10073138C();
      if (v11)
      {
        v12 = v11;
        sub_100DC0D5C(v10, (v14 & 1) == 0, *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8], (void (*)(_QWORD, uint64_t, __n128))sub_100DC26C8, sub_10073253C, (uint64_t (*)(void))sub_100737ED4);

        swift_release(v10);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2930, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2u, 2930, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);

        swift_release(v10);
      }
    }
    goto LABEL_16;
  }
  __break(1u);
}

void sub_100DCB9D4(_WORD *a1@<X8>)
{
  sub_100DCB370((uint64_t)&unk_100F394C8, (uint64_t (*)(void))sub_100731A9C, a1);
}

void CRLWPShapeEditor.toggleItalics(_:)()
{
  void *v0;
  uint64_t KeyPath;
  char v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;

  KeyPath = swift_getKeyPath("88T");
  sub_100DCAB24(KeyPath);
  v14 = v2;
  v3 = objc_msgSend(v0, "wpEditors", swift_release(KeyPath).n128_f64[0]);
  v4 = type metadata accessor for CRLWPEditor(0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (v6)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease_n(v5, 2);
    return;
  }
  if (v5 < 0)
    v13 = v5;
  else
    v13 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v13);
  if (!v6)
    goto LABEL_16;
LABEL_3:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
      else
        v8 = *(id *)(v5 + 8 * i + 32);
      v9 = v8;
      v10 = swift_getKeyPath(byte_100F39510);
      v11 = sub_10073138C();
      if (v11)
      {
        v12 = v11;
        sub_100DC0D5C(v10, (v14 & 1) == 0, *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8], (void (*)(_QWORD, uint64_t, __n128))sub_100DC28DC, sub_100732548, (uint64_t (*)(void))sub_10073809C);

        swift_release(v10);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2930, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2u, 2930, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);

        swift_release(v10);
      }
    }
    goto LABEL_16;
  }
  __break(1u);
}

void sub_100DCBC44(_WORD *a1@<X8>)
{
  sub_100DCB370((uint64_t)&unk_100F39510, (uint64_t (*)(void))sub_100731A78, a1);
}

void CRLWPShapeEditor.toggleUnderline(_:)(uint64_t a1)
{
  sub_100DCBCDC(a1, byte_100F39530, byte_100F39558, (void (*)(uint64_t, BOOL, _QWORD, _QWORD))sub_100DC10E0);
}

void sub_100DCBC90(__int16 *a1@<X8>)
{
  sub_100DCB3E4((uint64_t)&unk_100F39558, (uint64_t (*)(void))sub_100731FB0, a1);
}

void CRLWPShapeEditor.toggleStrikethrough(_:)(uint64_t a1)
{
  sub_100DCBCDC(a1, byte_100F39578, byte_100F395A0, (void (*)(uint64_t, BOOL, _QWORD, _QWORD))sub_100DC1440);
}

void sub_100DCBCDC(uint64_t a1, const char *a2, const char *a3, void (*a4)(uint64_t, BOOL, _QWORD, _QWORD))
{
  void *v4;
  uint64_t KeyPath;
  char v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  KeyPath = swift_getKeyPath(a2);
  sub_100DCAB24(KeyPath);
  v8 = v7;
  v9 = objc_msgSend(v4, "wpEditors", swift_release(KeyPath).n128_f64[0]);
  v10 = type metadata accessor for CRLWPEditor(0);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if (!((unint64_t)v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v11);
    if (v12)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease_n(v11, 2);
    return;
  }
  if (v11 < 0)
    v19 = v11;
  else
    v19 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v12 = _CocoaArrayWrapper.endIndex.getter(v19);
  if (!v12)
    goto LABEL_16;
LABEL_3:
  if (v12 >= 1)
  {
    for (i = 0; i != v12; ++i)
    {
      if ((v11 & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
      else
        v14 = *(id *)(v11 + 8 * i + 32);
      v15 = v14;
      v16 = swift_getKeyPath(a3);
      v17 = sub_10073138C();
      if (v17)
      {
        v18 = v17;
        a4(v16, (v8 & 1) == 0, *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8]);

        swift_release(v16);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2930, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2u, 2930, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);

        swift_release(v16);
      }
    }
    goto LABEL_16;
  }
  __break(1u);
}

void sub_100DCBF00(__int16 *a1@<X8>)
{
  sub_100DCB3E4((uint64_t)&unk_100F395A0, (uint64_t (*)(void))sub_100732254, a1);
}

void CRLWPShapeEditor.alignLeft(_:)(uint64_t a1)
{
  sub_100DCBF74(a1, 0);
}

void CRLWPShapeEditor.alignRight(_:)(uint64_t a1)
{
  sub_100DCBF74(a1, 1);
}

void CRLWPShapeEditor.alignCenter(_:)(uint64_t a1)
{
  sub_100DCBF74(a1, 2);
}

void CRLWPShapeEditor.alignJustified(_:)(uint64_t a1)
{
  sub_100DCBF74(a1, 3);
}

void sub_100DCBF74(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t v11;

  v4 = objc_msgSend(v2, "wpEditors");
  v5 = type metadata accessor for CRLWPEditor(0);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (v7)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease_n(v6, 2);
    return;
  }
  if (v6 < 0)
    v11 = v6;
  else
    v11 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v11);
  if (!v7)
    goto LABEL_13;
LABEL_3:
  if (v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v9 = *(id *)(v6 + 8 * i + 32);
      v10 = v9;
      sub_10072AF30(a2);

    }
    goto LABEL_13;
  }
  __break(1u);
}

void CRLWPShapeEditor.decreaseFontSizeByOne(_:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  char *v17;
  char *v18;
  char *v19;
  char *KeyPath;
  uint64_t v21;
  char v22;
  double v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30[6];

  v1 = objc_msgSend(v0, "wpEditors");
  v2 = type metadata accessor for CRLWPEditor(0);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
LABEL_20:
    if (v3 < 0)
      v26 = v3;
    else
      v26 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v26);
    if (v4)
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease_n(v3, 2);
    return;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v3);
  if (!v4)
    goto LABEL_24;
LABEL_3:
  v5 = v3 & 0xC000000000000001;
  v6 = 4;
  v7 = (const char *)&unk_100F395C0;
  v28 = v3 & 0xC000000000000001;
  v29 = v3;
  v27 = v4;
  while (1)
  {
    if (v5)
      v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3);
    else
      v8 = (char *)*(id *)(v3 + 8 * v6);
    v9 = v8;
    v10 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    sub_100736D9C();
    if (!v11 || (v12 = (char *)objc_msgSend(v11, "selectedTextRange")) == 0)
    {

      goto LABEL_5;
    }
    v13 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
    v14 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];

    v15 = *(void **)(*(_QWORD *)&v9[OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape]
                   + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
    if (!v15)
      break;
    v16 = v15;
    sub_1007D7CB8(v13, v14, v30);

    v17 = (char *)v30[4];
    v18 = (char *)v30[5];
    v19 = (char *)v30[3];

    v3 = (uint64_t)v7;
    KeyPath = (char *)swift_getKeyPath(v7);
    v21 = sub_100DC8518(KeyPath, v19, v17, v18);
    LOBYTE(v18) = v22;
    *(_QWORD *)&v23 = swift_release(KeyPath).n128_u64[0];
    if ((v18 & 1) != 0)
    {
      if (!*(_QWORD *)(v21 + 16))
        goto LABEL_19;
      v24 = *(float *)(v21 + 32);
      sub_10062E238(v21, 1);
    }
    else
    {
      v24 = *(float *)&v21;
    }
    v7 = (const char *)v3;
    v25 = swift_getKeyPath((const char *)v3, v23);
    sub_100DC17A4(v25, v13, v14, v24 + -1.0);

    swift_release(v25);
    v4 = v27;
    v5 = v28;
    v3 = v29;
LABEL_5:
    ++v6;
    if (v10 == v4)
      goto LABEL_24;
  }
  __break(1u);
}

void CRLWPShapeEditor.increaseFontSizeByOne(_:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  char *v17;
  char *v18;
  char *v19;
  char *KeyPath;
  uint64_t v21;
  char v22;
  double v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30[6];

  v1 = objc_msgSend(v0, "wpEditors");
  v2 = type metadata accessor for CRLWPEditor(0);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
LABEL_20:
    if (v3 < 0)
      v26 = v3;
    else
      v26 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v26);
    if (v4)
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease_n(v3, 2);
    return;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v3);
  if (!v4)
    goto LABEL_24;
LABEL_3:
  v5 = v3 & 0xC000000000000001;
  v6 = 4;
  v7 = (const char *)&unk_100F395C0;
  v28 = v3 & 0xC000000000000001;
  v29 = v3;
  v27 = v4;
  while (1)
  {
    if (v5)
      v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3);
    else
      v8 = (char *)*(id *)(v3 + 8 * v6);
    v9 = v8;
    v10 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    sub_100736D9C();
    if (!v11 || (v12 = (char *)objc_msgSend(v11, "selectedTextRange")) == 0)
    {

      goto LABEL_5;
    }
    v13 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
    v14 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];

    v15 = *(void **)(*(_QWORD *)&v9[OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape]
                   + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
    if (!v15)
      break;
    v16 = v15;
    sub_1007D7CB8(v13, v14, v30);

    v17 = (char *)v30[4];
    v18 = (char *)v30[5];
    v19 = (char *)v30[3];

    v3 = (uint64_t)v7;
    KeyPath = (char *)swift_getKeyPath(v7);
    v21 = sub_100DC8518(KeyPath, v19, v17, v18);
    LOBYTE(v18) = v22;
    *(_QWORD *)&v23 = swift_release(KeyPath).n128_u64[0];
    if ((v18 & 1) != 0)
    {
      if (!*(_QWORD *)(v21 + 16))
        goto LABEL_19;
      v24 = *(float *)(v21 + 32);
      sub_10062E238(v21, 1);
    }
    else
    {
      v24 = *(float *)&v21;
    }
    v7 = (const char *)v3;
    v25 = swift_getKeyPath((const char *)v3, v23);
    sub_100DC17A4(v25, v13, v14, v24 + 1.0);

    swift_release(v25);
    v4 = v27;
    v5 = v28;
    v3 = v29;
LABEL_5:
    ++v6;
    if (v10 == v4)
      goto LABEL_24;
  }
  __break(1u);
}

void CRLWPShapeEditor.addContextualMenuElements(to:at:)(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v7;
  id v8;
  uint64_t isEscapingClosureAtFileLocation;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  NSString v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  Class isa;
  id v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  __int128 aBlock;
  __int128 v58;
  uint64_t (*v59)();
  uint64_t v60;
  objc_super v61;

  v5 = v1;
  v61.super_class = (Class)CRLWPShapeEditor;
  objc_msgSendSuper2(&v61, "addContextualMenuElementsToArray:atPoint:", a1);
  if (!objc_msgSend(v1, "shouldAddAutosizeTextMenuItem"))
    return;
  v59 = sub_100DCCBB0;
  v60 = 0;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = *(_QWORD *)"";
  *(_QWORD *)&v58 = sub_100DCCBB4;
  *((_QWORD *)&v58 + 1) = &unk_1012A68E8;
  v7 = (uint64_t)_Block_copy(&aBlock);
  v8 = objc_msgSend(a1, "indexOfObjectPassingTest:", v7, swift_release(v60).n128_f64[0]);
  _Block_release((const void *)v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(0, "", 82, 58, 63, 1);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v8 == (id)NSNotFound.getter(isEscapingClosureAtFileLocation))
      return;
    v10 = objc_msgSend(a1, "objectAtIndexedSubscript:", v8);
    _bridgeAnyObjectToAny(_:)(&aBlock, v10);
    swift_unknownObjectRelease(v10);
    v11 = sub_1004B8930(0, &qword_1013E1090, UIMenu_ptr);
    if ((swift_dynamicCast(&v56, &aBlock, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
      return;
    v55 = v56;
    sub_1004B8930(0, &qword_1013EFD98, UICommand_ptr);
    v12 = (void *)objc_opt_self(NSBundle);
    v13 = objc_msgSend(v12, "mainBundle");
    v14 = String._bridgeToObjectiveC()();
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, v15, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v18 = v17;
    v20 = v19;

    v21 = String._bridgeToObjectiveC()();
    v22 = (void *)objc_opt_self(UIImage);
    v23 = objc_msgSend(v22, "systemImageNamed:", v21);

    aBlock = 0u;
    v58 = 0u;
    v2 = (void *)UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)(v18, v20, 0, 0, v23, 0, "toggleShrinkToFit:", &aBlock, _swiftEmptyArrayStorage, 0, 0, 0, 0);
    v24 = objc_msgSend(v5, "shrinkToFitControlState");
    if (v24)
    {
      v25 = v24;
      objc_msgSend(v2, "setState:", objc_msgSend(v24, "stateValue"));

    }
    v26 = objc_msgSend(v12, "mainBundle");
    v27 = String._bridgeToObjectiveC()();
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v26, "localizedStringForKey:value:table:", v27, v28, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v31 = v30;
    v33 = v32;

    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v22, "imageNamed:", v34);

    aBlock = 0u;
    v58 = 0u;
    v3 = (id)UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)(v31, v33, 0, 0, v35, 0, "divideCompoundShape:", &aBlock, _swiftEmptyArrayStorage, 0, 0, 0, 0);
    v4 = v55;
    v36 = objc_msgSend(v55, "children");
    v37 = sub_1004B8930(0, &qword_1013E7880, UIMenuElement_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v37);

    *(_QWORD *)&aBlock = v7;
    if (!((unint64_t)v7 >> 62))
    {
      v38 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      v39 = v3;
      v40 = v2;
      v42 = v38 + 2;
      if (!__OFADD__(v38, 2))
        goto LABEL_9;
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
  if (v7 < 0)
    v52 = v7;
  else
    v52 = v7 & 0xFFFFFFFFFFFFFF8;
  v53 = v3;
  v54 = v2;
  swift_bridgeObjectRetain(v7);
  v38 = _CocoaArrayWrapper.endIndex.getter(v52);
  swift_bridgeObjectRelease();
  v42 = v38 + 2;
  if (__OFADD__(v38, 2))
    goto LABEL_20;
LABEL_9:
  v43 = sub_100DCD074(v42, 1);
  specialized Array._endMutation()(v43);
  v3 = v3;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v38 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
  v41 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v38 >= v41 >> 1)
LABEL_21:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v38 + 1, 1);
  v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v3);
  specialized Array._endMutation()(v44);
  v45 = v2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
  v47 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
  v46 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v47 >= v46 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
  v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v45);
  specialized Array._endMutation()(v48);

  isa = Array._bridgeToObjectiveC()().super.isa;
  v50 = objc_msgSend(v4, "menuByReplacingChildren:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v51 = v50;
  objc_msgSend(a1, "replaceObjectAtIndex:withObject:", v8, v51);

}

uint64_t sub_100DCCBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v8;
  _QWORD v10[4];

  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __n128))(a1 + 32);
  v10[3] = swift_getObjectType(a2);
  v10[0] = a2;
  v8 = swift_unknownObjectRetain(a2);
  LOBYTE(a4) = v7(v10, a3, a4, v8);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v10);
  return a4 & 1;
}

uint64_t sub_100DCCCC8()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Class isa;
  unsigned __int8 v7;
  Class v8;
  unsigned __int8 v9;
  Class v10;
  unsigned __int8 v11;
  Class v13;
  unsigned int v14;

  v1 = objc_msgSend(v0, "boardItems");
  v2 = type metadata accessor for CRLBoardItem(0);
  v3 = sub_100DD0520((unint64_t *)&qword_1013E4190, type metadata accessor for CRLBoardItem);
  v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  v5 = (void *)objc_opt_self(CRLShapeEditor);
  sub_100DC0590(v4);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "anyInfoIsTextBox:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  if ((v7 & 1) != 0)
    goto LABEL_4;
  sub_100DC0590(v4);
  v8 = Set._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v5, "anyInfoIsStickyNote:", v8, swift_bridgeObjectRelease().n128_f64[0]);

  if ((v9 & 1) != 0
    || (sub_100DC0590(v4),
        v10 = Set._bridgeToObjectiveC()().super.isa,
        v11 = objc_msgSend(v5, "anyInfoIsLine:", v10, swift_bridgeObjectRelease().n128_f64[0]),
        v10,
        (v11 & 1) != 0))
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_100DC0590(v4);
    swift_bridgeObjectRelease();
    v13 = Set._bridgeToObjectiveC()().super.isa;
    v14 = objc_msgSend(v5, "anyInfoIsConnectionLine:", v13, swift_bridgeObjectRelease().n128_f64[0]);

    return v14 ^ 1;
  }
}

double CRLWPShapeEditor.toggleShrinkToFit(_:)()
{
  uint64_t KeyPath;
  char v1;
  char v2;
  double result;

  KeyPath = swift_getKeyPath("p7T");
  sub_100DCB5E8(KeyPath);
  v2 = v1;
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  if (v2 != 2)
    return sub_1007FA8AC((v2 & 1) == 0);
  return result;
}

id sub_100DCCFD8()
{
  uint64_t KeyPath;
  __int16 v1;
  __int16 v2;

  KeyPath = swift_getKeyPath("p7T");
  sub_100DCB5E8(KeyPath);
  v2 = v1;
  swift_release(KeyPath);
  if (v2 == 2)
    return 0;
  if ((v2 & 0x100) != 0)
    return objc_msgSend(objc_allocWithZone((Class)CRLPlatformControlState), "initWithValue:", 2);
  return objc_msgSend(objc_allocWithZone((Class)CRLPlatformControlState), "initWithValue:", (v2 & 1) != 0);
}

uint64_t sub_100DCD074(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

_QWORD *sub_100DCD130(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  void *v21;
  int v22;
  unsigned __int8 *v23;
  char v24;
  int v25;
  id v26;
  char v27;
  char v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD v55[2];
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  _BYTE v91[248];
  uint64_t v92;
  unint64_t v93;
  unsigned __int8 v94;
  int v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  unsigned __int8 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  unsigned __int8 v117;
  uint64_t v118;
  _BYTE v119[248];
  _BYTE v120[256];
  _QWORD *v121;

  v89 = a2;
  v66 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v66);
  v65 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v55[1] = v2;
    v121 = _swiftEmptyArrayStorage;
    sub_1006006EC(0, v5, 0);
    v6 = v121;
    v7 = (unsigned __int8 *)(a1 + 48);
    v63 = (unint64_t)"rm.system.font.ultralight";
    v64 = (unint64_t)"QuickAction.NewBoard";
    v61 = (unint64_t)"rm.system.font.light";
    v62 = "rm.system.font.thin";
    v59 = (unint64_t)"rm.system.font.medium";
    v60 = (unint64_t)"rm.system.font.regular";
    v57 = "rm.system.font.bold";
    v58 = (unint64_t)"rm.system.font.semibold";
    v56 = "rm.system.font.heavy";
    v8 = v89;
    do
    {
      v9 = *v7;
      if (v9 != 255)
      {
        v14 = 0x63697465766C6548;
        v15 = 0xE900000000000061;
        if ((v9 & 1) == 0)
        {
          v16 = *((_QWORD *)v7 - 2);
          v17 = *((_QWORD *)v7 - 1);
          v14 = 0xD000000000000029;
          v15 = v64 | 0x8000000000000000;
          switch(v17)
          {
            case 0uLL:
              goto LABEL_29;
            case 1uLL:
              v14 = 0xD000000000000023;
              v18 = v63;
              goto LABEL_25;
            case 2uLL:
              v49 = v62;
              goto LABEL_28;
            case 3uLL:
              v14 = 0xD000000000000026;
              v18 = v61;
              goto LABEL_25;
            case 4uLL:
              v14 = 0xD000000000000025;
              v18 = v60;
              goto LABEL_25;
            case 5uLL:
              v14 = 0xD000000000000027;
              v18 = v59;
              goto LABEL_25;
            case 6uLL:
              v14 = 0xD000000000000023;
              v18 = v58;
LABEL_25:
              v15 = v18 | 0x8000000000000000;
              sub_1004C4924(v16, v17);
              goto LABEL_40;
            case 7uLL:
              v49 = v57;
              goto LABEL_28;
            case 8uLL:
              v49 = v56;
LABEL_28:
              v15 = (unint64_t)v49 | 0x8000000000000000;
              v14 = 0xD000000000000024;
LABEL_29:
              sub_1004C4924(v16, v17);
              break;
            default:
              v14 = *((_QWORD *)v7 - 2);
              v15 = *((_QWORD *)v7 - 1);
              sub_1004C4924(v16, v17);
              break;
          }
        }
        goto LABEL_40;
      }
      sub_1004C4938((uint64_t)&v8[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v119, &qword_1013E1B50);
      sub_1004C4938((uint64_t)v119, (uint64_t)v120, &qword_1013E1B50);
      if (sub_100562DF8((uint64_t)v120) == 1)
      {
        v10 = *(_QWORD *)&v8[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
        if (!v10)
        {
          __break(1u);
          JUMPOUT(0x100DCD834);
        }
        v11 = (uint64_t)v65;
        (*(void (**)(void))(*(_QWORD *)v10 + 760))();
        v12 = v8;
        swift_retain(v10);
        v13 = sub_1004B804C(&qword_1013F3C70);
        CRRegister.wrappedValue.getter(v13);
        sub_1004C4938((uint64_t)&v90, (uint64_t)v91, &qword_1013E1B50);
        sub_1004B84A4(v11, type metadata accessor for CRLWPShapeItemCRDTData);
        swift_release(v10);
        sub_1004C4938((uint64_t)v91, (uint64_t)&v92, &qword_1013E1B50);
        if (sub_100562DF8((uint64_t)&v92) == 1)
        {

          v14 = 0x63697465766C6548;
          v15 = 0xE900000000000061;
          v8 = v89;
          goto LABEL_40;
        }
        v47 = v118;
        v48 = v116;
        v46 = v117;
        v45 = v114;
        v44 = v115;
        v41 = v112;
        v43 = v113;
        v42 = v110;
        v40 = v111;
        v38 = v103;
        v39 = v104;
        v36 = v105;
        v37 = v106;
        v34 = v107;
        v35 = v108;
        v33 = v109;
        v32 = v101;
        v31 = v102;
        v30 = v99;
        v29 = v100;
        v28 = v98;
        v20 = v97;
        v22 = v95;
        v27 = v96;
        v14 = v92;
        v15 = v93;
        v25 = v94;
      }
      else
      {
        sub_1004C4938((uint64_t)v119, (uint64_t)&v92, &qword_1013E1B50);
        v85 = v116;
        v86 = v118;
        v84 = v117;
        v83 = v114;
        v82 = v115;
        v79 = v113;
        v88 = v6;
        v80 = v110;
        v81 = v112;
        v78 = v111;
        v76 = v104;
        v77 = v103;
        v74 = v106;
        v75 = v105;
        v72 = v108;
        v73 = v107;
        v70 = v109;
        v71 = v101;
        v69 = v102;
        v68 = v99;
        v87 = v5;
        v67 = v100;
        v19 = v98;
        v20 = v97;
        v21 = v8;
        v22 = v95;
        v23 = v7;
        v24 = v96;
        v14 = v92;
        v15 = v93;
        v25 = v94;
        v26 = v21;
        v27 = v24;
        v7 = v23;
        v28 = v19;
        v29 = v67;
        v5 = v87;
        v6 = v88;
        v30 = v68;
        v31 = v69;
        v32 = v71;
        v33 = v70;
        v35 = v72;
        v34 = v73;
        v37 = v74;
        v36 = v75;
        v39 = v76;
        v38 = v77;
        v40 = v78;
        v42 = v80;
        v41 = v81;
        v43 = v79;
        v44 = v82;
        v45 = v83;
        v46 = v84;
        v48 = v85;
        v47 = v86;
      }
      v92 = v14;
      v93 = v15;
      v94 = v25;
      v95 = v22;
      v96 = v27;
      v97 = v20;
      v98 = v28;
      v99 = v30;
      v100 = v29;
      v101 = v32;
      v102 = v31;
      v103 = v38;
      v104 = v39;
      v105 = v36;
      v106 = v37;
      v107 = v34;
      v108 = v35;
      v109 = v33;
      v110 = v42;
      v111 = v40;
      v112 = v41;
      v113 = v43;
      v114 = v45;
      v115 = v44;
      v116 = v48;
      v117 = v46;
      v118 = v47;
      sub_1004C48FC(v14, v15, v25);
      sub_100DD0434((uint64_t)v119);
      sub_1007844D4((uint64_t)&v92);
      if (v25 != 255)
      {
        if ((v25 & 1) == 0)
        {
          v8 = v89;
          switch(v15)
          {
            case 0uLL:

              v14 = 0xD000000000000029;
              v15 = v64 | 0x8000000000000000;
              goto LABEL_40;
            case 1uLL:

              v14 = 0xD000000000000023;
              v15 = v63 | 0x8000000000000000;
              goto LABEL_40;
            case 2uLL:

              v50 = v62;
              goto LABEL_39;
            case 3uLL:

              v14 = 0xD000000000000026;
              v15 = v61 | 0x8000000000000000;
              goto LABEL_40;
            case 4uLL:

              v14 = 0xD000000000000025;
              v15 = v60 | 0x8000000000000000;
              goto LABEL_40;
            case 5uLL:

              v14 = 0xD000000000000027;
              v15 = v59 | 0x8000000000000000;
              goto LABEL_40;
            case 6uLL:

              v14 = 0xD000000000000023;
              v15 = v58 | 0x8000000000000000;
              goto LABEL_40;
            case 7uLL:

              v50 = v57;
              goto LABEL_39;
            case 8uLL:

              v50 = v56;
LABEL_39:
              v15 = (unint64_t)v50 | 0x8000000000000000;
              v14 = 0xD000000000000024;
              break;
            default:
              v8 = v89;

              break;
          }
          goto LABEL_40;
        }
        sub_1004C4218(v14, v15, v25);
      }
      v8 = v89;

      v14 = 0x63697465766C6548;
      v15 = 0xE900000000000061;
LABEL_40:
      v121 = v6;
      v52 = v6[2];
      v51 = v6[3];
      if (v52 >= v51 >> 1)
      {
        sub_1006006EC(v51 > 1, v52 + 1, 1);
        v8 = v89;
        v6 = v121;
      }
      v7 += 24;
      v6[2] = v52 + 1;
      v53 = &v6[2 * v52];
      v53[4] = v14;
      v53[5] = v15;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t sub_100DCD87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  float *i;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[248];
  _DWORD v24[6];
  unsigned __int8 v25;
  _BYTE v26[248];
  _BYTE v27[256];
  _QWORD *v28;

  v20 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v20);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (!v7)
    return (uint64_t)v8;
  v17[1] = v2;
  v28 = _swiftEmptyArrayStorage;
  sub_100600804(0, v7, 0);
  v8 = v28;
  v19 = a2;
  v21 = a2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride;
  v18 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  for (i = (float *)(a1 + 36); ; i += 2)
  {
    if ((*(_BYTE *)i & 1) == 0)
    {
      v13 = *(i - 1);
      goto LABEL_12;
    }
    sub_1004C4938(v21, (uint64_t)v26, &qword_1013E1B50);
    sub_1004C4938((uint64_t)v26, (uint64_t)v27, &qword_1013E1B50);
    result = sub_100562DF8((uint64_t)v27);
    if ((_DWORD)result != 1)
    {
      sub_1004C4938((uint64_t)v26, (uint64_t)v24, &qword_1013E1B50);
LABEL_10:
      v13 = *(float *)&v24[5];
      v14 = v25;
      sub_100DD0434((uint64_t)v26);
      sub_1007844D4((uint64_t)v24);
      if (v14)
        v13 = 18.0;
      goto LABEL_12;
    }
    v11 = *(_QWORD *)(v19 + v18);
    if (!v11)
      break;
    (*(void (**)(void))(*(_QWORD *)v11 + 760))();
    swift_retain(v11);
    v12 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v12);
    sub_1004C4938((uint64_t)&v22, (uint64_t)v23, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v11);
    sub_1004C4938((uint64_t)v23, (uint64_t)v24, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)v24) != 1)
      goto LABEL_10;
    v13 = 18.0;
LABEL_12:
    v28 = v8;
    v16 = v8[2];
    v15 = v8[3];
    if (v16 >= v15 >> 1)
    {
      sub_100600804(v15 > 1, v16 + 1, 1);
      v8 = v28;
    }
    v8[2] = v16 + 1;
    *((float *)v8 + v16 + 8) = v13;
    if (!--v7)
      return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_100DCDB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  char v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[248];
  _BYTE v27[248];
  _BYTE v28[248];
  _BYTE v29[256];
  _QWORD *v30;

  v23 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v23);
  v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v19 = v2;
  v30 = _swiftEmptyArrayStorage;
  sub_1006007E8(0, v6, 0);
  v7 = v30;
  v8 = (unsigned __int8 *)(a1 + 32);
  v21 = a2;
  v24 = a2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride;
  v20 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  while (1)
  {
    v10 = *v8++;
    v9 = v10;
    if (v10 == 2)
      break;
    v15 = v9 & 1;
LABEL_13:
    v30 = v7;
    v18 = v7[2];
    v17 = v7[3];
    if (v18 >= v17 >> 1)
    {
      sub_1006007E8(v17 > 1, v18 + 1, 1);
      v7 = v30;
    }
    v7[2] = v18 + 1;
    *((_BYTE *)v7 + v18 + 32) = v15;
    if (!--v6)
      return (uint64_t)v7;
  }
  sub_1004C4938(v24, (uint64_t)v28, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v28, (uint64_t)v29, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v29);
  if ((_DWORD)result != 1)
  {
    sub_1004C4938((uint64_t)v28, (uint64_t)v27, &qword_1013E1B50);
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v21 + v20);
  if (v12)
  {
    v13 = (uint64_t)v22;
    (*(void (**)(void))(*(_QWORD *)v12 + 760))();
    swift_retain(v12);
    v14 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v14);
    sub_1004C4938((uint64_t)&v25, (uint64_t)v26, &qword_1013E1B50);
    sub_1004B84A4(v13, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v12);
    sub_1004C4938((uint64_t)v26, (uint64_t)v27, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)v27) == 1)
    {
LABEL_11:
      v15 = 0;
      goto LABEL_13;
    }
LABEL_10:
    v16 = v27[25];
    sub_100DD0434((uint64_t)v28);
    sub_1007844D4((uint64_t)v27);
    if (v16 != 2)
    {
      v15 = v16 & 1;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100DCDEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  char v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[248];
  _BYTE v27[248];
  _BYTE v28[248];
  _BYTE v29[256];
  _QWORD *v30;

  v23 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v23);
  v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v19 = v2;
  v30 = _swiftEmptyArrayStorage;
  sub_1006007E8(0, v6, 0);
  v7 = v30;
  v8 = (unsigned __int8 *)(a1 + 32);
  v21 = a2;
  v24 = a2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride;
  v20 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  while (1)
  {
    v10 = *v8++;
    v9 = v10;
    if (v10 == 2)
      break;
    v15 = v9 & 1;
LABEL_13:
    v30 = v7;
    v18 = v7[2];
    v17 = v7[3];
    if (v18 >= v17 >> 1)
    {
      sub_1006007E8(v17 > 1, v18 + 1, 1);
      v7 = v30;
    }
    v7[2] = v18 + 1;
    *((_BYTE *)v7 + v18 + 32) = v15;
    if (!--v6)
      return (uint64_t)v7;
  }
  sub_1004C4938(v24, (uint64_t)v28, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v28, (uint64_t)v29, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v29);
  if ((_DWORD)result != 1)
  {
    sub_1004C4938((uint64_t)v28, (uint64_t)v27, &qword_1013E1B50);
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v21 + v20);
  if (v12)
  {
    v13 = (uint64_t)v22;
    (*(void (**)(void))(*(_QWORD *)v12 + 760))();
    swift_retain(v12);
    v14 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v14);
    sub_1004C4938((uint64_t)&v25, (uint64_t)v26, &qword_1013E1B50);
    sub_1004B84A4(v13, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v12);
    sub_1004C4938((uint64_t)v26, (uint64_t)v27, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)v27) == 1)
    {
LABEL_11:
      v15 = 0;
      goto LABEL_13;
    }
LABEL_10:
    v16 = v27[26];
    sub_100DD0434((uint64_t)v28);
    sub_1007844D4((uint64_t)v27);
    if (v16 != 2)
    {
      v15 = v16 & 1;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100DCE1B4(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  unsigned __int8 *i;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  _QWORD *v17;
  int v18;
  char v19;
  char v20;
  char *v21;
  char v22;
  __int128 v23;
  char v24;
  int v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[2];
  char *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _BYTE v76[248];
  __int128 v77;
  char v78;
  int v79;
  char v80;
  char v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  unsigned __int8 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  _BYTE v103[248];
  _BYTE v104[256];
  _QWORD *v105;

  v74 = a2;
  v51 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v51);
  v50 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v49[1] = v2;
  v105 = _swiftEmptyArrayStorage;
  sub_1006007CC(0, v5, 0);
  v6 = v105;
  for (i = (unsigned __int8 *)(a1 + 40); ; i += 16)
  {
    v8 = *i;
    if (v8 == 255)
      break;
    if ((v8 & 1) != 0)
      v14 = 0;
    else
      v14 = *((_QWORD *)i - 1);
LABEL_18:
    v105 = v6;
    v48 = v6[2];
    v47 = v6[3];
    if (v48 >= v47 >> 1)
    {
      sub_1006007CC(v47 > 1, v48 + 1, 1);
      v6 = v105;
    }
    v6[2] = v48 + 1;
    v6[v48 + 4] = v14;
    if (!--v5)
      return (uint64_t)v6;
  }
  sub_1004C4938((uint64_t)&v74[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v103, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v103, (uint64_t)v104, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v104);
  if ((_DWORD)result != 1)
  {
    sub_1004C4938((uint64_t)v103, (uint64_t)&v77, &qword_1013E1B50);
    v72 = v100;
    v73 = v102;
    v71 = v101;
    v70 = v98;
    v69 = v99;
    v67 = v94;
    v68 = v96;
    v65 = v95;
    v66 = v97;
    v63 = v88;
    v64 = v87;
    v62 = v89;
    v59 = v91;
    v60 = v90;
    v58 = v92;
    v55 = v93;
    v56 = v85;
    v61 = v83;
    v57 = v84;
    v53 = v82;
    v54 = v86;
    v15 = v81;
    v16 = v74;
    v17 = v6;
    v18 = v79;
    v19 = v80;
    v52 = v77;
    v20 = v78;
    v21 = v74;
    v22 = v20;
    v23 = v52;
    v24 = v19;
    v25 = v18;
    v6 = v17;
    v26 = v53;
    v27 = v54;
    v28 = v56;
    v29 = v55;
    v31 = v58;
    v30 = v59;
    v32 = v60;
    v34 = v62;
    v33 = v63;
    v35 = v64;
    v37 = v65;
    v36 = v66;
    v38 = v57;
    v40 = v67;
    v39 = v68;
    v41 = v61;
    v42 = v69;
    v43 = v70;
    v44 = v71;
    v46 = v72;
    v45 = v73;
LABEL_13:
    v77 = v23;
    v78 = v22;
    v79 = v25;
    v80 = v24;
    v81 = v15;
    v82 = v26;
    v83 = v41;
    v84 = v38;
    v85 = v28;
    v86 = v27;
    v87 = v35;
    v88 = v33;
    v89 = v34;
    v90 = v32;
    v91 = v30;
    v92 = v31;
    v93 = v29;
    v94 = v40;
    v95 = v37;
    v96 = v39;
    v97 = v36;
    v98 = v43;
    v99 = v42;
    v100 = v46;
    v101 = v44;
    v102 = v45;
    sub_100DD0434((uint64_t)v103);
    sub_1007844D4((uint64_t)&v77);

    if (v38 == 255)
    {
      v14 = 0;
    }
    else if ((v38 & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      v14 = v41;
    }
    goto LABEL_18;
  }
  v10 = *(_QWORD *)&v74[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v10)
  {
    v11 = (uint64_t)v50;
    (*(void (**)(void))(*(_QWORD *)v10 + 760))();
    v12 = v74;
    swift_retain(v10);
    v13 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v13);
    sub_1004C4938((uint64_t)&v75, (uint64_t)v76, &qword_1013E1B50);
    sub_1004B84A4(v11, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v10);
    sub_1004C4938((uint64_t)v76, (uint64_t)&v77, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v77) == 1)
    {

      v14 = 0;
      goto LABEL_18;
    }
    v45 = v102;
    v46 = v100;
    v44 = v101;
    v43 = v98;
    v42 = v99;
    v39 = v96;
    v36 = v97;
    v40 = v94;
    v37 = v95;
    v35 = v87;
    v33 = v88;
    v34 = v89;
    v32 = v90;
    v30 = v91;
    v31 = v92;
    v29 = v93;
    v28 = v85;
    v27 = v86;
    v41 = v83;
    v38 = v84;
    v26 = v82;
    v15 = v81;
    v16 = v74;
    v25 = v79;
    v24 = v80;
    v23 = v77;
    v22 = v78;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100DCE610(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  unsigned __int8 *i;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char *v20;
  __int128 v21;
  char v22;
  int v23;
  char v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD v48[2];
  char *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _BYTE v75[248];
  __int128 v76;
  char v77;
  int v78;
  char v79;
  char v80;
  unsigned __int8 v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  unsigned __int8 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  _BYTE v102[248];
  _BYTE v103[256];
  _QWORD *v104;

  v73 = a2;
  v50 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v50);
  v49 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v48[1] = v2;
  v104 = _swiftEmptyArrayStorage;
  sub_1006007B0(0, v5, 0);
  v6 = v104;
  for (i = (unsigned __int8 *)(a1 + 40); ; i += 16)
  {
    v8 = *i;
    if (v8 == 255)
      break;
    if ((v8 & 1) != 0)
      v14 = 0;
    else
      v14 = *((_QWORD *)i - 1);
LABEL_18:
    v104 = v6;
    v47 = v6[2];
    v46 = v6[3];
    if (v47 >= v46 >> 1)
    {
      sub_1006007B0(v46 > 1, v47 + 1, 1);
      v6 = v104;
    }
    v6[2] = v47 + 1;
    v6[v47 + 4] = v14;
    if (!--v5)
      return (uint64_t)v6;
  }
  sub_1004C4938((uint64_t)&v73[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v102, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v102, (uint64_t)v103, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v103);
  if ((_DWORD)result != 1)
  {
    sub_1004C4938((uint64_t)v102, (uint64_t)&v76, &qword_1013E1B50);
    v71 = v99;
    v72 = v101;
    v70 = v100;
    v69 = v97;
    v67 = v96;
    v68 = v98;
    v65 = v95;
    v66 = v93;
    v64 = v94;
    v61 = v87;
    v62 = v86;
    v58 = v89;
    v59 = v88;
    v56 = v91;
    v57 = v90;
    v55 = v92;
    v63 = v84;
    v60 = v85;
    v54 = v82;
    v52 = v81;
    v53 = v83;
    v15 = v73;
    v16 = v80;
    v17 = v78;
    v18 = v79;
    v51 = v76;
    v19 = v77;
    v20 = v73;
    v21 = v51;
    v22 = v18;
    v23 = v17;
    v24 = v16;
    v25 = v52;
    v26 = v53;
    v27 = v54;
    v29 = v55;
    v28 = v56;
    v31 = v57;
    v30 = v58;
    v32 = v59;
    v34 = v61;
    v33 = v62;
    v35 = v64;
    v36 = v65;
    v37 = v66;
    v39 = v67;
    v38 = v68;
    v40 = v60;
    v41 = v69;
    v42 = v63;
    v43 = v70;
    v45 = v71;
    v44 = v72;
LABEL_13:
    v76 = v21;
    v77 = v19;
    v78 = v23;
    v79 = v22;
    v80 = v24;
    v81 = v25;
    v82 = v27;
    v83 = v26;
    v84 = v42;
    v85 = v40;
    v86 = v33;
    v87 = v34;
    v88 = v32;
    v89 = v30;
    v90 = v31;
    v91 = v28;
    v92 = v29;
    v93 = v37;
    v94 = v35;
    v95 = v36;
    v96 = v39;
    v97 = v41;
    v98 = v38;
    v99 = v45;
    v100 = v43;
    v101 = v44;
    sub_100DD0434((uint64_t)v102);
    sub_1007844D4((uint64_t)&v76);

    if (v40 == 255)
    {
      v14 = 0;
    }
    else if ((v40 & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      v14 = v42;
    }
    goto LABEL_18;
  }
  v10 = *(_QWORD *)&v73[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v10)
  {
    v11 = (uint64_t)v49;
    (*(void (**)(void))(*(_QWORD *)v10 + 760))();
    v12 = v73;
    swift_retain(v10);
    v13 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v13);
    sub_1004C4938((uint64_t)&v74, (uint64_t)v75, &qword_1013E1B50);
    sub_1004B84A4(v11, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v10);
    sub_1004C4938((uint64_t)v75, (uint64_t)&v76, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v76) == 1)
    {

      v14 = 0;
      goto LABEL_18;
    }
    v44 = v101;
    v45 = v99;
    v43 = v100;
    v41 = v97;
    v38 = v98;
    v36 = v95;
    v39 = v96;
    v37 = v93;
    v35 = v94;
    v33 = v86;
    v34 = v87;
    v32 = v88;
    v30 = v89;
    v31 = v90;
    v28 = v91;
    v29 = v92;
    v42 = v84;
    v40 = v85;
    v27 = v82;
    v26 = v83;
    v25 = v81;
    v15 = v73;
    v24 = v80;
    v23 = v78;
    v22 = v79;
    v21 = v76;
    v19 = v77;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100DCEA5C(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CGColorSpace *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  int v58;
  char v59;
  char *v60;
  char v61;
  __int128 v62;
  __int128 v63;
  int v64;
  char v65;
  uint64_t v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  CGColorSpace *v93;
  uint64_t v94;
  CGColorSpace *v95;
  CGColorSpace *v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[2];
  char *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[248];
  __int128 v140;
  char v141;
  int v142;
  unsigned __int8 v143;
  char v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  unsigned __int8 v164;
  uint64_t v165;
  unsigned __int8 v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  unsigned __int8 v170;
  uint64_t v171;
  _BYTE v172[248];
  _BYTE v173[248];
  _QWORD *v174;
  int v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  v122 = a2;
  v109 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v109);
  v108 = (char *)v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v5)
  {
    v107[1] = v2;
    v174 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v5);
    v7 = (_QWORD *)(a1 + 72);
    while (1)
    {
      v20 = v7[7];
      v132 = v5;
      if (v20)
      {
        v130 = *(v7 - 5);
        v21 = *(v7 - 3);
        v123 = *(v7 - 4);
        v23 = *(v7 - 1);
        v199 = *(v7 - 2);
        v22 = v199;
        v24 = v7;
        v25 = *v7;
        v128 = v23;
        v129 = v25;
        v26 = v24[1];
        v131 = v24[2];
        v27 = v24[3];
        v126 = v24[4];
        v28 = v24[6];
        v134 = v24[5];
        v135 = v27;
        v121 = v24;
        v29 = v24[8];
        v133 = (id)sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
        v175 = v21;
        v176 = BYTE4(v21) & 1;
        v177 = v22;
        v178 = v23;
        v179 = v25;
        v180 = v26;
        v30 = v131;
        v181 = v131;
        v31 = v134;
        v32 = v135;
        v182 = v135;
        v33 = v126;
        v183 = v126;
        v184 = v134;
        v185 = v28;
        v186 = v20;
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v33);
        v127 = v29;
        v101 = v32;
        v34 = v123;
        v124 = v21;
        sub_1004C485C(v130, v123, v21, v199, v128, v129, v26, v30, v101, v33, v31, v28, v20, v29);
        v120 = v26;
        v35 = v26;
        v36 = v33;
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v20);
        v37 = sub_1006C52C0((uint64_t)&v175);
        v125 = v28;
        if ((v34 & 1) != 0)
        {
          v39 = v127;
          v38 = v128;
          v40 = v124;
          if (qword_1013DD868 != -1)
            swift_once(&qword_1013DD868, sub_100A05844);
          swift_beginAccess(&static OS_os_log.persistence, &v136, 0, 0);
          v41 = (id)static OS_os_log.persistence;
          v42 = static os_log_type_t.info.getter();
          sub_100A06EBC((uint64_t)v41, &_mh_execute_header, v42, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

          v133 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v37);
          v106 = v39;
          v103 = v36;
          v43 = v129;
          v44 = v130;
          v45 = v40;
          v46 = v40;
          v47 = v120;
          v48 = v131;
          sub_1004C4174(v130, v34, v46, v199, v38, v129, v120, v131, v135, v103, v134, v125, v20, v106);
          v17 = (id)sub_1004C4174(v44, v34, v45, v199, v38, v43, v47, v48, v135, v126, v134, v125, v20, v127);
        }
        else
        {
          v133 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v37);

          v105 = v20;
          v104 = v28;
          v8 = v134;
          v102 = v36;
          v9 = v135;
          v10 = v129;
          v11 = v130;
          v12 = v34;
          v119 = v20;
          v13 = v199;
          v14 = v128;
          v15 = v120;
          v16 = v131;
          sub_1004C4174(v130, v12, v124, v199, v128, v129, v120, v131, v135, v102, v134, v104, v105, v127);
          v17 = (id)sub_1004C4174(v11, v123, v124, v13, v14, v10, v15, v16, v9, v126, v8, v125, v119, v127);
        }
        v5 = v132;
        v7 = v121;
        goto LABEL_5;
      }
      sub_1004C4938((uint64_t)&v122[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v172, &qword_1013E1B50);
      sub_1004C4938((uint64_t)v172, (uint64_t)v173, &qword_1013E1B50);
      result = (_QWORD *)sub_100562DF8((uint64_t)v173);
      if ((_DWORD)result != 1)
        break;
      v49 = *(_QWORD *)&v122[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
      if (!v49)
      {
        __break(1u);
        return result;
      }
      v50 = (uint64_t)v108;
      (*(void (**)(void))(*(_QWORD *)v49 + 760))();
      v51 = v122;
      swift_retain(v49);
      v52 = sub_1004B804C(&qword_1013F3C70);
      CRRegister.wrappedValue.getter(v52);
      sub_1004C4938((uint64_t)&v138, (uint64_t)v139, &qword_1013E1B50);
      sub_1004B84A4(v50, type metadata accessor for CRLWPShapeItemCRDTData);
      swift_release(v49);
      sub_1004C4938((uint64_t)v139, (uint64_t)&v140, &qword_1013E1B50);
      if (sub_100562DF8((uint64_t)&v140) != 1)
      {
        v123 = v171;
        v74 = v169;
        v72 = v170;
        v71 = v167;
        v70 = v168;
        v69 = v165;
        v67 = v166;
        v68 = v164;
        v82 = v150;
        v199 = v151;
        v124 = v152;
        v81 = v153;
        v85 = v154;
        v84 = v155;
        v73 = v156;
        v80 = v157;
        v79 = v158;
        v83 = v159;
        v75 = v160;
        v76 = v161;
        v78 = v162;
        v62 = v163;
        v66 = v148;
        v65 = v149;
        v77 = v146;
        v55 = v147;
        v56 = v145;
        v57 = v144;
        v64 = v142;
        LODWORD(v133) = v143;
        v63 = v140;
        v61 = v141;
        goto LABEL_17;
      }

LABEL_21:
      v17 = objc_msgSend((id)objc_opt_self(CRLColorFill), "blackColor");
      v133 = v17;
LABEL_5:
      v7 += 14;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v18 = v174[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v133);
      specialized ContiguousArray._endMutation()(v19);
      if (!--v5)
        return v174;
    }
    sub_1004C4938((uint64_t)v172, (uint64_t)&v140, &qword_1013E1B50);
    v123 = v171;
    v120 = v169;
    LODWORD(v119) = v170;
    v118 = v167;
    v117 = v168;
    v116 = v165;
    v114 = v164;
    v115 = v166;
    v126 = v150;
    v199 = v151;
    v124 = v152;
    v125 = v153;
    v127 = v154;
    v128 = v155;
    v121 = (_QWORD *)v156;
    v134 = v158;
    v135 = v157;
    v131 = v160;
    v129 = v159;
    v130 = v161;
    v53 = v148;
    v54 = v149;
    v112 = v146;
    v113 = v162;
    v55 = v147;
    v56 = v145;
    v57 = v144;
    v58 = v142;
    LODWORD(v133) = v143;
    v110 = v140;
    v111 = v163;
    v59 = v141;
    v60 = v122;
    v61 = v59;
    v63 = v110;
    v62 = v111;
    v64 = v58;
    v65 = v54;
    v66 = v53;
    v68 = v114;
    v67 = v115;
    v69 = v116;
    v70 = v117;
    v71 = v118;
    v72 = v119;
    v74 = v120;
    v73 = (uint64_t)v121;
    v76 = v130;
    v75 = v131;
    v77 = v112;
    v78 = v113;
    v79 = v134;
    v80 = v135;
    v81 = v125;
    v82 = v126;
    v84 = v128;
    v83 = v129;
    v85 = v127;
LABEL_17:
    v130 = v76;
    v131 = v75;
    v134 = v79;
    v140 = v63;
    v141 = v61;
    v142 = v64;
    v143 = v133;
    v144 = v57;
    v145 = v56;
    v146 = v77;
    v147 = v55;
    v148 = v66;
    v149 = v65;
    v86 = v82;
    v150 = v82;
    v87 = v199;
    v151 = v199;
    v88 = v124;
    v152 = v124;
    v153 = v81;
    v154 = v85;
    v155 = v84;
    v156 = v73;
    v157 = v80;
    v158 = v79;
    v159 = v83;
    v160 = v75;
    v161 = v76;
    v162 = v78;
    v163 = v62;
    v164 = v68;
    v165 = v69;
    v166 = v67;
    v167 = v71;
    v168 = v70;
    v169 = v74;
    v170 = v72;
    v120 = v62;
    v171 = v123;
    v129 = v83;
    v89 = v81;
    v90 = v85;
    v128 = v84;
    v135 = v80;
    sub_1004C485C(v82, v199, v124, v81, v85, v84, v73, v80, v79, v83, v75, v76, v78, v62);
    sub_100DD0434((uint64_t)v172);
    sub_1007844D4((uint64_t)&v140);
    if (v78)
    {
      v126 = v86;
      v199 = v87;
      sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
      v187 = v88;
      v188 = BYTE4(v88) & 1;
      v125 = v89;
      v189 = v89;
      v190 = v90;
      v92 = v128;
      v91 = v129;
      v191 = v128;
      v192 = v73;
      v193 = v135;
      v194 = v134;
      v195 = v129;
      v196 = v131;
      v197 = v130;
      v198 = v78;
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRetain(v91);
      v93 = sub_1006C52C0((uint64_t)&v187);
      v94 = v91;
      v5 = v132;
      v127 = v90;
      if ((v199 & 1) != 0)
      {
        v96 = v93;
        v121 = (_QWORD *)v73;
        v97 = v92;
        v98 = v125;
        if (qword_1013DD868 != -1)
          swift_once(&qword_1013DD868, sub_100A05844);
        swift_beginAccess(&static OS_os_log.persistence, &v137, 0, 0);
        v99 = (id)static OS_os_log.persistence;
        v100 = static os_log_type_t.info.getter();
        sub_100A06EBC((uint64_t)v99, &_mh_execute_header, v100, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

        v133 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v96);
        sub_1004C4174(v126, v199, v124, v98, v127, v97, (uint64_t)v121, v135, v134, v129, v131, v130, v78, v120);
      }
      else
      {
        v95 = v93;
        v133 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v93);

        sub_1004C4174(v126, v199, v88, v125, v127, v92, v73, v135, v134, v94, v131, v130, v78, v120);
      }

      goto LABEL_5;
    }

    v5 = v132;
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_100DCF4F4(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  _QWORD *v17;
  char v18;
  id v19;
  char v20;
  char *v21;
  char v22;
  __int128 v23;
  char v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _BYTE v74[248];
  __int128 v75;
  char v76;
  int v77;
  char v78;
  char v79;
  unsigned __int8 v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  _BYTE v101[248];
  _BYTE v102[256];
  _QWORD *v103;

  v72 = a2;
  v49 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v49);
  v48 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v47[1] = v2;
  v103 = _swiftEmptyArrayStorage;
  sub_100600794(0, v5, 0);
  v7 = (unsigned __int8 *)(a1 + 40);
  v6 = v103;
  while (1)
  {
    v8 = *v7;
    if (v8 != 255)
    {
      if ((v8 & 1) != 0)
        v14 = 4;
      else
        v14 = *((_QWORD *)v7 - 1);
      goto LABEL_17;
    }
    sub_1004C4938((uint64_t)&v72[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v101, &qword_1013E1B50);
    sub_1004C4938((uint64_t)v101, (uint64_t)v102, &qword_1013E1B50);
    result = sub_100562DF8((uint64_t)v102);
    if ((_DWORD)result != 1)
    {
      sub_1004C4938((uint64_t)v101, (uint64_t)&v75, &qword_1013E1B50);
      v70 = v98;
      v71 = v100;
      v69 = v99;
      v66 = v94;
      v67 = v96;
      v63 = v95;
      v68 = v92;
      v64 = v93;
      v65 = v97;
      v61 = v86;
      v62 = v85;
      v59 = v88;
      v60 = v87;
      v57 = v90;
      v58 = v89;
      v55 = v91;
      v56 = v83;
      v54 = v84;
      v53 = v81;
      v51 = v80;
      v52 = v82;
      v15 = v79;
      v16 = v77;
      v17 = v6;
      v18 = v78;
      v50 = v75;
      v19 = v72;
      v20 = v76;
      v21 = v72;
      v22 = v20;
      v23 = v50;
      v24 = v18;
      v6 = v17;
      v25 = v51;
      v26 = v52;
      v27 = v53;
      v28 = v54;
      v29 = v56;
      v30 = v55;
      v32 = v57;
      v31 = v58;
      v34 = v59;
      v33 = v60;
      v36 = v61;
      v35 = v62;
      v37 = v63;
      v38 = v64;
      v40 = v66;
      v39 = v67;
      v41 = v65;
      v42 = v69;
      v44 = v70;
      v43 = v71;
      v14 = v68;
      goto LABEL_13;
    }
    v10 = *(_QWORD *)&v72[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (!v10)
      break;
    v11 = (uint64_t)v48;
    (*(void (**)(void))(*(_QWORD *)v10 + 760))();
    v12 = v72;
    swift_retain(v10);
    v13 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v13);
    sub_1004C4938((uint64_t)&v73, (uint64_t)v74, &qword_1013E1B50);
    sub_1004B84A4(v11, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v10);
    sub_1004C4938((uint64_t)v74, (uint64_t)&v75, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v75) != 1)
    {
      v43 = v100;
      v44 = v98;
      v42 = v99;
      v39 = v96;
      v41 = v97;
      v40 = v94;
      v37 = v95;
      v14 = v92;
      v38 = v93;
      v35 = v85;
      v36 = v86;
      v33 = v87;
      v34 = v88;
      v31 = v89;
      v32 = v90;
      v30 = v91;
      v29 = v83;
      v28 = v84;
      v27 = v81;
      v26 = v82;
      v25 = v80;
      v15 = v79;
      v16 = v77;
      v24 = v78;
      v23 = v75;
      v19 = v72;
      v22 = v76;
LABEL_13:
      v75 = v23;
      v76 = v22;
      v77 = v16;
      v78 = v24;
      v79 = v15;
      v80 = v25;
      v81 = v27;
      v82 = v26;
      v83 = v29;
      v84 = v28;
      v85 = v35;
      v86 = v36;
      v87 = v33;
      v88 = v34;
      v89 = v31;
      v90 = v32;
      v91 = v30;
      v92 = v14;
      v93 = v38;
      v94 = v40;
      v95 = v37;
      v96 = v39;
      v97 = v41;
      v98 = v44;
      v99 = v42;
      v100 = v43;
      sub_100DD0434((uint64_t)v101);
      sub_1007844D4((uint64_t)&v75);

      if (v38 == 255)
      {
        v14 = 4;
      }
      else if ((v38 & 1) != 0)
      {
        v14 = 4;
      }
      goto LABEL_17;
    }

    v14 = 4;
LABEL_17:
    v103 = v6;
    v46 = v6[2];
    v45 = v6[3];
    if (v46 >= v45 >> 1)
    {
      sub_100600794(v45 > 1, v46 + 1, 1);
      v6 = v103;
    }
    v6[2] = v46 + 1;
    v6[v46 + 4] = v14;
    v7 += 16;
    if (!--v5)
      return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_100DCF94C(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unsigned __int8 *i;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  _QWORD *v18;
  char v19;
  char v20;
  char *v21;
  __int128 v22;
  char v23;
  int v24;
  char v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  unsigned __int8 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD v48[2];
  char *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[248];
  __int128 v75;
  char v76;
  int v77;
  char v78;
  char v79;
  unsigned __int8 v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  _BYTE v101[248];
  _BYTE v102[256];
  _QWORD *v103;

  v50 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v50);
  v49 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v48[1] = v2;
  v103 = _swiftEmptyArrayStorage;
  sub_100600778(0, v6, 0);
  v7 = v103;
  for (i = (unsigned __int8 *)(a1 + 40); ; i += 16)
  {
    v9 = *i;
    if (v9 != 255)
    {
      if ((v9 & 1) != 0)
        v15 = -1;
      else
        v15 = *((_QWORD *)i - 1);
      goto LABEL_17;
    }
    sub_1004C4938((uint64_t)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v101, &qword_1013E1B50);
    sub_1004C4938((uint64_t)v101, (uint64_t)v102, &qword_1013E1B50);
    result = sub_100562DF8((uint64_t)v102);
    if ((_DWORD)result != 1)
    {
      sub_1004C4938((uint64_t)v101, (uint64_t)&v75, &qword_1013E1B50);
      v70 = v98;
      v67 = v96;
      v66 = v97;
      v71 = v94;
      v72 = v100;
      v68 = v95;
      v69 = v99;
      v65 = v92;
      v64 = v93;
      v62 = v86;
      v63 = v85;
      v60 = v88;
      v61 = v87;
      v58 = v90;
      v59 = v89;
      v56 = v91;
      v57 = v83;
      v55 = v84;
      v54 = v81;
      v52 = v80;
      v53 = v82;
      v16 = v79;
      v17 = v77;
      v18 = v7;
      v19 = v78;
      v51 = v75;
      v20 = v76;
      v21 = a2;
      v22 = v51;
      v23 = v19;
      v7 = v18;
      v24 = v17;
      v25 = v16;
      v26 = v52;
      v27 = v53;
      v28 = v54;
      v29 = v55;
      v30 = v57;
      v31 = v56;
      v33 = v58;
      v32 = v59;
      v35 = v60;
      v34 = v61;
      v37 = v62;
      v36 = v63;
      v38 = v64;
      v39 = v65;
      v40 = v66;
      v41 = v67;
      v43 = v68;
      v42 = v69;
      v44 = v70;
      v15 = v71;
      v45 = v72;
      goto LABEL_13;
    }
    v11 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (!v11)
      break;
    v12 = (uint64_t)v49;
    (*(void (**)(void))(*(_QWORD *)v11 + 760))();
    v13 = a2;
    swift_retain(v11);
    v14 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v14);
    sub_1004C4938((uint64_t)&v73, (uint64_t)v74, &qword_1013E1B50);
    sub_1004B84A4(v12, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v11);
    sub_1004C4938((uint64_t)v74, (uint64_t)&v75, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v75) != 1)
    {
      v45 = v100;
      v44 = v98;
      v42 = v99;
      v41 = v96;
      v40 = v97;
      v15 = v94;
      v43 = v95;
      v39 = v92;
      v38 = v93;
      v36 = v85;
      v37 = v86;
      v34 = v87;
      v35 = v88;
      v32 = v89;
      v33 = v90;
      v31 = v91;
      v30 = v83;
      v29 = v84;
      v28 = v81;
      v27 = v82;
      v26 = v80;
      v25 = v79;
      v24 = v77;
      v23 = v78;
      v22 = v75;
      v20 = v76;
LABEL_13:
      v75 = v22;
      v76 = v20;
      v77 = v24;
      v78 = v23;
      v79 = v25;
      v80 = v26;
      v81 = v28;
      v82 = v27;
      v83 = v30;
      v84 = v29;
      v85 = v36;
      v86 = v37;
      v87 = v34;
      v88 = v35;
      v89 = v32;
      v90 = v33;
      v91 = v31;
      v92 = v39;
      v93 = v38;
      v94 = v15;
      v95 = v43;
      v96 = v41;
      v97 = v40;
      v98 = v44;
      v99 = v42;
      v100 = v45;
      sub_100DD0434((uint64_t)v101);
      sub_1007844D4((uint64_t)&v75);

      if (v43 == 255)
      {
        v15 = -1;
      }
      else if ((v43 & 1) != 0)
      {
        v15 = -1;
      }
      goto LABEL_17;
    }

    v15 = -1;
LABEL_17:
    v103 = v7;
    v47 = v7[2];
    v46 = v7[3];
    if (v47 >= v46 >> 1)
    {
      sub_100600778(v46 > 1, v47 + 1, 1);
      v7 = v103;
    }
    v7[2] = v47 + 1;
    v7[v47 + 4] = v15;
    if (!--v6)
      return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100DCFDA0(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  unsigned __int8 *v4;
  int v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10060075C(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (unsigned __int8 *)(a1 + 40);
    do
    {
      v5 = *v4;
      if (v5 == 255)
      {
        v6 = 0;
      }
      else if ((v5 & 1) != 0)
      {
        v6 = 3;
      }
      else
      {
        v6 = *(v4 - 8);
      }
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_10060075C(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      *((_BYTE *)result + v8 + 32) = v6;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_100DCFE88(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_100600740(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (_BYTE *)(a1 + 40);
    do
    {
      if (*v4)
        v5 = 1;
      else
        v5 = *((_QWORD *)v4 - 1);
      v8 = result;
      v7 = result[2];
      v6 = result[3];
      if (v7 >= v6 >> 1)
      {
        sub_100600740(v6 > 1, v7 + 1, 1);
        result = v8;
      }
      result[2] = v7 + 1;
      result[v7 + 4] = v5;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return result;
}

double sub_100DCFF54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100DCFF64(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_100DCFF70(char *a1)
{
  sub_10084C6E8(*a1);
}

_QWORD *sub_100DCFF94(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  NSURL *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  id v38;
  NSString v39;
  NSString v40;
  double v41;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v47 = a2;
  v4 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v4);
  v48 = (uint64_t)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v14)
  {
    v42[1] = v2;
    v53 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v14);
    v16 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v52 = *(_QWORD *)(v7 + 72);
    v45 = v10;
    v46 = v9;
    v43 = v13;
    v44 = v11;
    do
    {
      sub_1004CB7BC(v16, (uint64_t)v9, (uint64_t *)&unk_1013E87D0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      {
        v17 = sub_1004CB800((uint64_t)v9, (uint64_t *)&unk_1013E87D0);
        v18 = 0;
      }
      else
      {
        sub_1007EC108((uint64_t)v9, (uint64_t)v13);
        v21 = (uint64_t *)&v13[*(int *)(v10 + 24)];
        v22 = v21[1];
        v49 = *v21;
        v23 = v47;
        v24 = sub_1007DC71C(v49, v22);
        v26 = v25;
        v27 = v48;
        sub_1004CB7BC((uint64_t)&v13[*(int *)(v10 + 20)], v48, &qword_1013E04D0);
        v50 = v26;
        v51 = v24;
        v28 = objc_msgSend(v23, "stringEquivalentFromRange:", v24, v26);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v30 = v29;

        v31 = type metadata accessor for URL(0);
        v32 = *(_QWORD *)(v31 - 8);
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v27, 1, v31);
        swift_bridgeObjectRetain(v22);
        v35 = 0;
        if (v33 != 1)
        {
          v36 = v48;
          URL._bridgeToObjectiveC()(v34);
          v35 = v37;
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v31);
        }
        v38 = objc_allocWithZone((Class)CRLWPHyperlinkField);
        v39 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v30);
        v40 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v41 = swift_bridgeObjectRelease(v22).n128_u64[0];
        v18 = objc_msgSend(v38, "initWithURL:range:displayText:uuidString:", v35, v51, v50, v39, v40, v41);

        v13 = v43;
        v17 = sub_1004B84A4((uint64_t)v43, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        v10 = v45;
        v9 = v46;
        v11 = v44;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v19 = v53[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
      v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v18);
      specialized ContiguousArray._endMutation()(v20);
      v16 += v52;
      --v14;
    }
    while (v14);
    return v53;
  }
  return result;
}

_QWORD *sub_100DD02D4(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_100600740(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (_BYTE *)(a1 + 40);
    do
    {
      if (*v4)
        v5 = 0;
      else
        v5 = *((_QWORD *)v4 - 1);
      v8 = result;
      v7 = result[2];
      v6 = result[3];
      if (v7 >= v6 >> 1)
      {
        sub_100600740(v6 > 1, v7 + 1, 1);
        result = v8;
      }
      result[2] = v7 + 1;
      result[v7 + 4] = v5;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_100DD03A0(uint64_t a1, uint64_t *a2)
{
  return sub_1007CB2CC(*a2);
}

double sub_100DD03A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  double result;

  v4 = *a3;
  swift_retain(*a3);
  sub_1007EB6B8(a1, v4);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_100DD03EC()
{
  return 24;
}

double sub_100DD03F8(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  return result;
}

double sub_100DD0400(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *(_QWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 1);
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

__n128 sub_100DD0420(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = a1[1].n128_u64[0];
  result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  return result;
}

uint64_t sub_100DD0434(uint64_t a1)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 208);
  sub_1006A1CF4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240));
  return a1;
}

uint64_t sub_100DD04B4()
{
  return 32;
}

double sub_100DD04C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  double result;

  v2 = *a1;
  *(_QWORD *)a2 = *a1;
  v3 = *(_OWORD *)(a1 + 1);
  *(_QWORD *)(a2 + 24) = a1[3];
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

__n128 sub_100DD04E8(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = a1[1].n128_u64[1];
  result = *a1;
  *(_QWORD *)(a2 + 24) = a1[1].n128_u64[0];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DD050C()
{
  return 32;
}

uint64_t sub_100DD0520(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100DD0560(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  id v13;
  _BYTE v14[32];

  sub_1004CB6E8(a1, (uint64_t)v14);
  v1 = sub_1004B8930(0, &qword_1013E1090, UIMenu_ptr);
  if ((swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, v1, 6) & 1) != 0)
  {
    v2 = v13;
    v3 = objc_msgSend(v13, "identifier");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v5 = v4;
    v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("CRLShapeMenuIdentifier"));
    if (v5 == v8 && v7 == v9)
      v11 = 1;
    else
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

double destroy for CRLSyncSaveResult(uint64_t a1)
{
  return sub_1007B0C8C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32));
}

uint64_t *initializeWithCopy for CRLSyncSaveResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = (void *)a2[2];
  v6 = a2[3];
  v7 = (void *)a2[4];
  sub_1007B0D28(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = (uint64_t)v5;
  a1[3] = v6;
  a1[4] = (uint64_t)v7;
  return a1;
}

uint64_t *assignWithCopy for CRLSyncSaveResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  void *v12;

  v3 = *a2;
  v4 = a2[1];
  v5 = (void *)a2[2];
  v6 = a2[3];
  v7 = (void *)a2[4];
  sub_1007B0D28(*a2, v4, v5, v6, v7);
  v8 = *a1;
  v9 = a1[1];
  v10 = (void *)a1[2];
  v11 = a1[3];
  v12 = (void *)a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = (uint64_t)v5;
  a1[3] = v6;
  a1[4] = (uint64_t)v7;
  sub_1007B0C8C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for CRLSyncSaveResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *a1;
  v6 = a1[1];
  v5 = (void *)a1[2];
  v7 = a1[3];
  v8 = (void *)a1[4];
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  a1[4] = v3;
  sub_1007B0C8C(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLSyncSaveResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(_QWORD *)(a1 + 8) >> 57) & 0x18 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CRLSyncSaveResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_100DD0864(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) >> 62;
}

uint64_t sub_100DD0870(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_100DD0880(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for CRLSyncSaveResult()
{
  return &type metadata for CRLSyncSaveResult;
}

char *sub_100DD08A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char v33[24];
  char v34[24];
  uint64_t v35;

  v3 = v2;
  v32 = a2;
  v5 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - v9;
  v11 = sub_1004B804C((uint64_t *)&unk_101414440);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - v15;
  v17 = v3 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v17, v34, 0, 0);
  sub_1004B8460(v17, (uint64_t)v10, type metadata accessor for CRLBoardCRDTData);
  v18 = v32;
  v19 = a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v33, 0, 0);
  sub_1004B8460(v19, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  v20 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  CRStruct_6.delta(_:from:)(v18, v7, v5, v20);
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardCRDTData);
  sub_100DDC514((uint64_t)v16, (uint64_t)v13);
  v21 = sub_1004B804C(&qword_101414410);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v13, 1, v21) == 1)
  {
    sub_100DDC55C((uint64_t)v16);
    sub_100DDC55C((uint64_t)v13);
    return 0;
  }
  else
  {
    if (qword_1013DCB10 != -1)
      swift_once(&qword_1013DCB10, sub_1005DE88C);
    v24 = type metadata accessor for CRCodableVersion(0);
    v25 = sub_1004F2A1C(v24, (uint64_t)qword_10147EB08);
    v26 = sub_1004CBA30(&qword_101414408, &qword_101414410, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_6<A>);
    v27 = v25;
    v23 = v13;
    v28 = v35;
    v29 = PartialCRDT.deltaSerializedData(_:version:)(v18, v27, v21, v26);
    if (!v28)
      v23 = (char *)v29;
    sub_100DDC55C((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v21);
  }
  return v23;
}

unint64_t sub_100DD0B74()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t result;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[72];

  v1 = v0[3];
  result = sub_1001E9730();
  if (result >= v1)
  {
    v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v3, v8);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v5 = v0[3];
    *(_QWORD *)(inited + 56) = &type metadata for UInt64;
    *(_QWORD *)(inited + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(inited + 32) = v5;
    if (sub_1001E9730() < v5)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"computedMinRequiredVersion", 26, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 68, "Call to board computedMinRequiredVersion while current minRequiredVersion is higher than current: %{public}d", 108, 2u, inited);
      sub_1004F5394(inited, (uint64_t)"computedMinRequiredVersion", 26, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2u, 68, (uint64_t)"Call to board computedMinRequiredVersion while current minRequiredVersion is higher than current: %{public}d", 108, 2u);
    }
    swift_bridgeObjectRelease(inited);
    v0[3] = 0x1000000000000;
    v6 = v0[4];
    if (sub_1001E9730() >= v6)
      v0[4] = sub_100DD15C8();
    v7 = v0[5];
    result = sub_1001E9730();
    if (result >= v7)
    {
      result = sub_100DD17A8();
      v0[5] = result;
    }
  }
  return result;
}

uint64_t sub_100DD0CD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[112];
  _BYTE v48[32];
  uint64_t v49;

  v44 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v44);
  v42 = (uint64_t)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = (uint64_t)&qword_101414410;
  v7 = sub_1004B804C(&qword_101414410);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  sub_100DDC4E8(a1);
  sub_100DDC4E8(a1);
  v13 = sub_1004CBA30(&qword_101414408, &qword_101414410, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_6<A>);
  v14 = v46;
  PartialCRDT.init(serializedData:)(v11, v12, v7, v13);
  if (v14)
  {
    sub_100C87914(a1);
  }
  else
  {
    v40 = v5;
    v41 = v3;
    v46 = v8;
    v15 = v45;
    v16 = v45 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v45 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v48, 33, 0);
    v17 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
    LODWORD(inited) = CRStruct_6.merge(delta:)(v10, v44, v17);
    swift_endAccess(v48);
    if ((inited & 1) != 0)
    {
      *(_OWORD *)(v15 + 24) = *(_OWORD *)a1;
      *(_QWORD *)(v15 + 40) = *(_QWORD *)(a1 + 16);
      sub_100DD0B74();
      sub_100C87914(a1);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v7);
    }
    else
    {
      LODWORD(v44) = inited;
      v38 = v7;
      v39 = a1;
      if (qword_1013DD888 != -1)
        swift_once(&qword_1013DD888, sub_100A05DE4);
      swift_beginAccess(&static OS_os_log.realTimeSync, v48, 0, 0);
      v18 = (void *)static OS_os_log.realTimeSync;
      v19 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v19, v47);
      *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
      v20 = v42;
      sub_1004B8460(v16, v42, type metadata accessor for CRLBoardCRDTData);
      v21 = v18;
      v22 = sub_1004B804C(&qword_1013E1A80);
      v23 = v40;
      CRRegister.wrappedValue.getter(v22);
      v24 = sub_1004B84A4(v20, type metadata accessor for CRLBoardCRDTData);
      v25 = UUID.uuidString.getter(v24);
      v27 = v26;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v43);
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v28 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v28;
      *(_QWORD *)(inited + 32) = v25;
      *(_QWORD *)(inited + 40) = v27;
      v29 = v45;
      v49 = v45;
      v30 = type metadata accessor for CRLBoardData(0);
      swift_retain(v29);
      v31 = String.init<A>(describing:)(&v49, v30);
      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 104) = v28;
      *(_QWORD *)(inited + 72) = v31;
      *(_QWORD *)(inited + 80) = v32;
      v33 = static os_log_type_t.error.getter(v31);
      sub_100A06EBC((uint64_t)v21, &_mh_execute_header, v33, "Delta failed to apply for %{public}@%{public}@", 46, 2, inited);
      swift_setDeallocating(inited);
      v34 = *(_QWORD *)(inited + 16);
      v35 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, v34, v35);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v38);
      sub_100C87914(v39);
      LOBYTE(inited) = v44;
    }
  }
  return inited & 1;
}

uint64_t sub_100DD10B4@<X0>(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  double v50;
  _BYTE v51[880];
  _BYTE v52[384];
  _BYTE v53[384];
  _BYTE v54[888];
  _BYTE v55[880];
  _OWORD v56[24];
  _OWORD v57[24];
  _QWORD v58[112];

  v42 = a4;
  v43 = a5;
  v48 = a2;
  v49 = a3;
  v45 = a1;
  v46 = type metadata accessor for CRLBoardScenesCRDTData(0);
  __chkstk_darwin(v46);
  v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v41 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v40 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v40 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v40 - v19;
  v21 = type metadata accessor for CRLBoardCRDTData(0);
  v22 = *(int *)(v21 + 40);
  v47 = v21;
  *(_QWORD *)(a6 + v22) = _swiftEmptyDictionarySingleton;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v23(v20, (uint64_t)a1, v9);
  v23(v18, (uint64_t)v20, v9);
  v40 = a6;
  CRRegister.init(wrappedValue:)(v18, v9, &protocol witness table for UUID);
  v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24(v20, v9);
  v23(v20, (uint64_t)v48, v9);
  v23(v18, (uint64_t)v49, v9);
  v25 = a6 + *(int *)(v21 + 20);
  *(_QWORD *)(v25 + *(int *)(type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0) + 24)) = _swiftEmptyDictionarySingleton;
  v23(v15, (uint64_t)v20, v9);
  v26 = v41;
  v23(v41, (uint64_t)v15, v9);
  CRRegister.init(wrappedValue:)(v26, v9, &protocol witness table for UUID);
  v24(v15, v9);
  v23(v15, (uint64_t)v18, v9);
  v23(v26, (uint64_t)v15, v9);
  CRRegister.init(wrappedValue:)(v26, v9, &protocol witness table for UUID);
  v24(v15, v9);
  v24(v18, v9);
  v24(v20, v9);
  v27 = v47;
  v28 = v40;
  v58[0] = v42;
  v58[1] = v43;
  CRRegister.init(wrappedValue:)(v58, &type metadata for String, &protocol witness table for String);
  v29 = v27;
  v30 = v28 + *(int *)(v27 + 28);
  sub_1007849E8(v55);
  sub_1004C4938((uint64_t)v55, (uint64_t)v51, &qword_1013F1540);
  sub_100DDC39C(v56);
  sub_1004C4938((uint64_t)v56, (uint64_t)v52, &qword_1013DFA60);
  sub_100DDC39C(v57);
  sub_1004C4938((uint64_t)v57, (uint64_t)v53, &qword_1013DFA48);
  sub_100DDC3D4(v58);
  sub_1004C4938((uint64_t)v58, (uint64_t)v54, &qword_1013DFA70);
  sub_100DD6AF8((uint64_t)v51, (uint64_t)v51, (uint64_t)v51, (uint64_t)v52, (uint64_t)v53, (uint64_t)v54, v30);
  v31 = v28 + *(int *)(v29 + 32);
  v33 = static Date.timeIntervalSinceReferenceDate.getter(v32);
  *(_QWORD *)(v31 + *(int *)(type metadata accessor for CRLSharedBoardMetadataCRDTData(0) + 28)) = _swiftEmptyDictionarySingleton;
  v50 = v33;
  CRMaxRegister.init(wrappedValue:)(&v50, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
  v50 = v33;
  CRRegister.init(wrappedValue:)(&v50, &type metadata for Double, &protocol witness table for Double);
  LOBYTE(v50) = 1;
  CRRegister.init(wrappedValue:)(&v50, &type metadata for Bool, &protocol witness table for Bool);
  v34 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v35 = (uint64_t)v44;
  CROrderedSet.init()(v9, &protocol witness table for UUID, v34);
  v36 = v46;
  CRDictionary.init()(v9, &type metadata for String, &protocol witness table for UUID, v34, &protocol witness table for String, &protocol witness table for String);
  v37 = sub_1005C6DD8();
  v38 = sub_1005C6E1C();
  CRDictionary.init()(v9, &type metadata for CRLSceneSavedRectData, &protocol witness table for UUID, v34, v37, v38);
  *(_QWORD *)(v35 + *(int *)(v36 + 28)) = _swiftEmptyDictionarySingleton;
  v24(v49, v9);
  v24(v48, v9);
  v24(v45, v9);
  return sub_100DDC3DC(v35, v28 + *(int *)(v47 + 36));
}

uint64_t sub_100DD15C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[72];
  _BYTE v8[80];

  v1 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v1, v8);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(inited + 56) = &type metadata for UInt64;
  *(_QWORD *)(inited + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(inited + 32) = v3;
  if (sub_1001E9730() < v3)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForGoodEnoughFidelity", 47, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 89, "Call to board computedMinRequiredVersionForGoodEnoughFidelity while current minRequiredVersion is higher than current: %{public}d", 129, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"computedMinRequiredVersionForGoodEnoughFidelity", 47, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2u, 89, (uint64_t)"Call to board computedMinRequiredVersionForGoodEnoughFidelity while current minRequiredVersion is higher than current: %{public}d", 129, 2u);
  }
  swift_bridgeObjectRelease(inited);
  v4 = swift_initStackObject(v1, v7);
  *(_OWORD *)(v4 + 16) = xmmword_100EF5E40;
  v5 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v4 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v4 + 32) = v5;
  if (sub_1001E9730() < v5)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForGoodEnoughFidelity", 47, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 90, "Call to board computedMinRequiredVersionForGoodEnoughFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 144, 2u, v4);
    sub_1004F5394(v4, (uint64_t)"computedMinRequiredVersionForGoodEnoughFidelity", 47, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2u, 90, (uint64_t)"Call to board computedMinRequiredVersionForGoodEnoughFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 144, 2u);
  }
  swift_bridgeObjectRelease(v4);
  return 0x2000400000000;
}

uint64_t sub_100DD17A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t inited;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10[72];
  char v11[72];
  char v12[80];

  v1 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v1, v12);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v3 = v0[3];
  *(_QWORD *)(inited + 56) = &type metadata for UInt64;
  *(_QWORD *)(inited + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(inited + 32) = v3;
  if (sub_1001E9730() < v3)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 106, "Call to board computedMinRequiredVersionForFullFidelity while current minRequiredVersion is higher than current: %{public}d", 123, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2u, 106, (uint64_t)"Call to board computedMinRequiredVersionForFullFidelity while current minRequiredVersion is higher than current: %{public}d", 123, 2u);
  }
  swift_bridgeObjectRelease(inited);
  v4 = swift_initStackObject(v1, v11);
  *(_OWORD *)(v4 + 16) = xmmword_100EF5E40;
  v5 = v0[5];
  *(_QWORD *)(v4 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v4 + 32) = v5;
  if (sub_1001E9730() < v5)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2, 107, "Call to board computedMinRequiredVersionForFullFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 138, 2u, v4);
    sub_1004F5394(v4, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardData.swift", 84, 2u, 107, (uint64_t)"Call to board computedMinRequiredVersionForFullFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 138, 2u);
  }
  swift_bridgeObjectRelease(v4);
  if (v0[5] >= 0x2000400000000uLL)
    v6 = v0[5];
  else
    v6 = 0x2000400000000;
  if (v0[4] == 0x2000400000000)
    v7 = v0[5];
  else
    v7 = v6;
  v8 = swift_initStackObject(v1, v10);
  *(_OWORD *)(v8 + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v8 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v8 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v8 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  return v7;
}

void sub_100DD19C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  __n128 v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  __n128 v20;
  __n128 v21;
  void (*v22)(char *, uint64_t);
  __n128 v23;
  __n128 v24;
  _QWORD v25[2];
  void (*v26)(char *, uint64_t);
  double (*v27)(char *, char *, uint64_t, __n128);
  _BYTE v28[24];
  _BYTE v29[24];
  uint64_t v30;

  v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - v12;
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    v30 = a1;
    v14 = v1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v29, 0, 0);
    sub_1004B8460(v14, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
    v25[0] = sub_1004B804C(&qword_1013E1A80);
    v25[1] = v2;
    CRRegister.wrappedValue.getter(v25[0]);
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
    sub_1008FD76C((uint64_t)v10, (uint64_t)v13);
    v15 = *(void (**)(char *, uint64_t))(v8 + 8);
    v15(v10, v7);
    v26 = v15;
    v16 = swift_beginAccess(v14, v28, 33, 0);
    v27 = *(double (**)(char *, char *, uint64_t, __n128))(v8 + 16);
    v17.n128_f64[0] = v27(v10, v13, v7, v16);
    v18 = v25[0];
    CRRegister.wrappedValue.setter(v10, v25[0], v17);
    v15(v13, v7);
    swift_endAccess(v28);
    sub_1004B8460(v14, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
    CRRegister.wrappedValue.getter(v18);
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
    sub_1008FD76C((uint64_t)v10, (uint64_t)v13);
    v19 = v26;
    v26(v10, v7);
    v20 = swift_beginAccess(v14, v28, 33, 0);
    v21.n128_f64[0] = v27(v10, v13, v7, v20);
    CRRegister.wrappedValue.setter(v10, v18, v21);
    v19(v13, v7);
    swift_endAccess(v28);
    sub_1004B8460(v14, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
    type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
    CRRegister.wrappedValue.getter(v18);
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
    sub_1008FD76C((uint64_t)v10, (uint64_t)v13);
    v22 = v26;
    v26(v10, v7);
    v23 = swift_beginAccess(v14, v28, 33, 0);
    v24.n128_f64[0] = v27(v10, v13, v7, v23);
    CRRegister.wrappedValue.setter(v10, v18, v24);
    v22(v13, v7);
    swift_endAccess(v28);
  }
}

uint64_t sub_100DD1CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v26[72];
  _QWORD v27[3];
  _BYTE v28[24];

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v28, 33, 0);
  type metadata accessor for CRLBoardCRDTData(0);
  v11 = sub_1004B804C((uint64_t *)&unk_1013F02F0);
  v12 = CROrderedSet.contains(_:)(a1, v11);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
    v27[0] = a2;
    v27[1] = a3;
    type metadata accessor for CRLBoardScenesCRDTData(0);
    swift_bridgeObjectRetain(a3);
    v13 = sub_1004B804C((uint64_t *)&unk_101405CB0);
    CRDictionary.subscript.setter(v27, v10, v13);
  }
  else
  {
    if (qword_1013DD7E0 != -1)
      swift_once(&qword_1013DD7E0, sub_100A03F14);
    swift_beginAccess(&static OS_os_log.crlScenes, v27, 0, 0);
    v14 = (void *)static OS_os_log.crlScenes;
    v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v15, v26);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v17 = v14;
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v18;
    *(_QWORD *)(inited + 40) = v20;
    v22 = static os_log_type_t.default.getter(v21);
    sub_100A06EBC((uint64_t)v17, &_mh_execute_header, v22, "Scene rename failed for UUID %{public}", 38, 2, inited);
    swift_setDeallocating(inited);
    v23 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v23);

  }
  swift_endAccess(v28);
  return v12 & 1;
}

uint64_t sub_100DD1F1C()
{
  uint64_t v0;

  sub_1004B84A4(v0 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100DD1F68()
{
  return type metadata accessor for CRLBoardData(0);
}

uint64_t type metadata accessor for CRLBoardData(uint64_t a1)
{
  return sub_1004BD408(a1, qword_101413D90, (uint64_t)&nominal type descriptor for CRLBoardData);
}

uint64_t sub_100DD1F84(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_100F39708;
  result = type metadata accessor for CRLBoardCRDTData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100F39720;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CRLBoardCRDTData(uint64_t a1)
{
  return sub_1004BD408(a1, qword_101413FB8, (uint64_t)&nominal type descriptor for CRLBoardCRDTData);
}

uint64_t *sub_100DD2024(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  int *inserted;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v71 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v71 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v71);
  }
  else
  {
    v7 = sub_1004B804C(&qword_1013E1A80);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v8((uint64_t *)((char *)a1 + v9), (uint64_t *)((char *)a2 + v9), v7);
    v12 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
    v8((uint64_t *)&v10[*(int *)(v12 + 20)], (uint64_t *)&v11[*(int *)(v12 + 20)], v7);
    v13 = *(int *)(v12 + 24);
    v14 = *(_QWORD *)&v11[v13];
    *(_QWORD *)&v10[v13] = v14;
    v15 = a3[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    swift_bridgeObjectRetain(v14);
    v18 = sub_1004B804C(&qword_1013E1980);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v20, v21, v22);
    inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
    v23(&v20[inserted[5]], &v21[inserted[5]], v22);
    v23(&v20[inserted[6]], &v21[inserted[6]], v22);
    v25 = inserted[7];
    v26 = &v20[v25];
    v27 = &v21[v25];
    v28 = sub_1004B804C(&qword_1013DFA68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = inserted[8];
    v30 = &v20[v29];
    v31 = &v21[v29];
    v32 = sub_1004B804C(&qword_1013DFA50);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = inserted[9];
    v34 = &v20[v33];
    v35 = &v21[v33];
    v36 = sub_1004B804C(&qword_1013DFA78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = inserted[10];
    v38 = *(_QWORD *)&v21[v37];
    *(_QWORD *)&v20[v37] = v38;
    v39 = a3[8];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    swift_bridgeObjectRetain(v38);
    v42 = sub_1004B804C(&qword_1013FE148);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
    v43 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
    v44 = v43[5];
    v45 = &v40[v44];
    v46 = &v41[v44];
    v47 = sub_1004B804C(&qword_1013F7918);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = v43[6];
    v49 = &v40[v48];
    v50 = &v41[v48];
    v51 = sub_1004B804C((uint64_t *)&unk_1013F5590);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    v52 = v43[7];
    v53 = *(_QWORD *)&v41[v52];
    *(_QWORD *)&v40[v52] = v53;
    v54 = a3[9];
    v55 = (char *)a1 + v54;
    v56 = (char *)a2 + v54;
    swift_bridgeObjectRetain(v53);
    v57 = sub_1004B804C((uint64_t *)&unk_1013F02F0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
    v58 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
    v59 = v58[5];
    v60 = &v55[v59];
    v61 = &v56[v59];
    v62 = sub_1004B804C((uint64_t *)&unk_101405CB0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    v63 = v58[6];
    v64 = &v55[v63];
    v65 = &v56[v63];
    v66 = sub_1004B804C(&qword_101405CC0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
    v67 = v58[7];
    v68 = *(_QWORD *)&v56[v67];
    *(_QWORD *)&v55[v67] = v68;
    v69 = a3[10];
    v70 = *(uint64_t *)((char *)a2 + v69);
    *(uint64_t *)((char *)a1 + v69) = v70;
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v70);
  }
  return a1;
}

uint64_t type metadata accessor for CRLBoardRootContainerAffinityCRDTData(uint64_t a1)
{
  return sub_1004BD408(a1, qword_101414108, (uint64_t)&nominal type descriptor for CRLBoardRootContainerAffinityCRDTData);
}

uint64_t type metadata accessor for CRLBoardInsertStyleData(uint64_t a1)
{
  return sub_1004BD408(a1, (uint64_t *)&unk_1014141A0, (uint64_t)&nominal type descriptor for CRLBoardInsertStyleData);
}

uint64_t type metadata accessor for CRLSharedBoardMetadataCRDTData(uint64_t a1)
{
  return sub_1004BD408(a1, (uint64_t *)&unk_101414060, (uint64_t)&nominal type descriptor for CRLSharedBoardMetadataCRDTData);
}

double sub_100DD23E4(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  int *inserted;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double result;

  v4 = sub_1004B804C(&qword_1013E1A80);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v5(v6, v4);
  v7 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v5(v6 + *(int *)(v7 + 20), v4);
  swift_bridgeObjectRelease();
  v8 = a1 + a2[6];
  v9 = sub_1004B804C(&qword_1013E1980);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = a1 + a2[7];
  v11 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v12(v10 + inserted[5], v11);
  v12(v10 + inserted[6], v11);
  v14 = v10 + inserted[7];
  v15 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = v10 + inserted[8];
  v17 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v10 + inserted[9];
  v19 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease();
  v20 = a1 + a2[8];
  v21 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v23 = v20 + *(int *)(v22 + 20);
  v24 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  v25 = v20 + *(int *)(v22 + 24);
  v26 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  swift_bridgeObjectRelease();
  v27 = a1 + a2[9];
  v28 = sub_1004B804C((uint64_t *)&unk_1013F02F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  v29 = type metadata accessor for CRLBoardScenesCRDTData(0);
  v30 = v27 + *(int *)(v29 + 20);
  v31 = sub_1004B804C((uint64_t *)&unk_101405CB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
  v32 = v27 + *(int *)(v29 + 24);
  v33 = sub_1004B804C(&qword_101405CC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100DD26A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *inserted;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  v12 = *(int *)(v11 + 24);
  v13 = *(_QWORD *)(v10 + v12);
  *(_QWORD *)(v9 + v12) = v13;
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  swift_bridgeObjectRetain(v13);
  v17 = sub_1004B804C(&qword_1013E1980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v22(v19, v20, v21);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v22(v19 + inserted[5], v20 + inserted[5], v21);
  v22(v19 + inserted[6], v20 + inserted[6], v21);
  v24 = inserted[7];
  v25 = v19 + v24;
  v26 = v20 + v24;
  v27 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = inserted[8];
  v29 = v19 + v28;
  v30 = v20 + v28;
  v31 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = inserted[9];
  v33 = v19 + v32;
  v34 = v20 + v32;
  v35 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  v36 = inserted[10];
  v37 = *(_QWORD *)(v20 + v36);
  *(_QWORD *)(v19 + v36) = v37;
  v38 = a3[8];
  v39 = a1 + v38;
  v40 = a2 + v38;
  swift_bridgeObjectRetain(v37);
  v41 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
  v42 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v43 = v42[5];
  v44 = v39 + v43;
  v45 = v40 + v43;
  v46 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  v47 = v42[6];
  v48 = v39 + v47;
  v49 = v40 + v47;
  v50 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
  v51 = v42[7];
  v52 = *(_QWORD *)(v40 + v51);
  *(_QWORD *)(v39 + v51) = v52;
  v53 = a3[9];
  v54 = a1 + v53;
  v55 = a2 + v53;
  swift_bridgeObjectRetain(v52);
  v56 = sub_1004B804C((uint64_t *)&unk_1013F02F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
  v57 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
  v58 = v57[5];
  v59 = v54 + v58;
  v60 = v55 + v58;
  v61 = sub_1004B804C((uint64_t *)&unk_101405CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
  v62 = v57[6];
  v63 = v54 + v62;
  v64 = v55 + v62;
  v65 = sub_1004B804C(&qword_101405CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
  v66 = v57[7];
  v67 = *(_QWORD *)(v55 + v66);
  *(_QWORD *)(v54 + v66) = v67;
  v68 = a3[10];
  v69 = *(_QWORD *)(a2 + v68);
  *(_QWORD *)(a1 + v68) = v69;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v69);
  return a1;
}

uint64_t sub_100DD29F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *inserted;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  v12 = *(int *)(v11 + 24);
  v13 = *(_QWORD *)(v10 + v12);
  *(_QWORD *)(v9 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1004B804C(&qword_1013E1980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24);
  v22(v19, v20, v21);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v22(v19 + inserted[5], v20 + inserted[5], v21);
  v22(v19 + inserted[6], v20 + inserted[6], v21);
  v24 = inserted[7];
  v25 = v19 + v24;
  v26 = v20 + v24;
  v27 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = inserted[8];
  v29 = v19 + v28;
  v30 = v20 + v28;
  v31 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  v32 = inserted[9];
  v33 = v19 + v32;
  v34 = v20 + v32;
  v35 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  v36 = inserted[10];
  v37 = *(_QWORD *)(v20 + v36);
  *(_QWORD *)(v19 + v36) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease();
  v38 = a3[8];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  v42 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v43 = v42[5];
  v44 = v39 + v43;
  v45 = v40 + v43;
  v46 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = v42[6];
  v48 = v39 + v47;
  v49 = v40 + v47;
  v50 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  v51 = v42[7];
  v52 = *(_QWORD *)(v40 + v51);
  *(_QWORD *)(v39 + v51) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease();
  v53 = a3[9];
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = sub_1004B804C((uint64_t *)&unk_1013F02F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  v57 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
  v58 = v57[5];
  v59 = v54 + v58;
  v60 = v55 + v58;
  v61 = sub_1004B804C((uint64_t *)&unk_101405CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 24))(v59, v60, v61);
  v62 = v57[6];
  v63 = v54 + v62;
  v64 = v55 + v62;
  v65 = sub_1004B804C(&qword_101405CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 24))(v63, v64, v65);
  v66 = v57[7];
  v67 = *(_QWORD *)(v55 + v66);
  *(_QWORD *)(v54 + v66) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease();
  v68 = a3[10];
  v69 = *(_QWORD *)(a2 + v68);
  *(_QWORD *)(a1 + v68) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD2D88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  int *inserted;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  *(_QWORD *)(v9 + *(int *)(v11 + 24)) = *(_QWORD *)(v10 + *(int *)(v11 + 24));
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C(&qword_1013E1980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v20(v17 + inserted[5], v18 + inserted[5], v19);
  v20(v17 + inserted[6], v18 + inserted[6], v19);
  v22 = inserted[7];
  v23 = v17 + v22;
  v24 = v18 + v22;
  v25 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  v26 = inserted[8];
  v27 = v17 + v26;
  v28 = v18 + v26;
  v29 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  v30 = inserted[9];
  v31 = v17 + v30;
  v32 = v18 + v30;
  v33 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  *(_QWORD *)(v17 + inserted[10]) = *(_QWORD *)(v18 + inserted[10]);
  v34 = a3[8];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v39 = v38[5];
  v40 = v35 + v39;
  v41 = v36 + v39;
  v42 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  v43 = v38[6];
  v44 = v35 + v43;
  v45 = v36 + v43;
  v46 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  *(_QWORD *)(v35 + v38[7]) = *(_QWORD *)(v36 + v38[7]);
  v47 = a3[9];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_1004B804C((uint64_t *)&unk_1013F02F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
  v51 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
  v52 = v51[5];
  v53 = v48 + v52;
  v54 = v49 + v52;
  v55 = sub_1004B804C((uint64_t *)&unk_101405CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  v56 = v51[6];
  v57 = v48 + v56;
  v58 = v49 + v56;
  v59 = sub_1004B804C(&qword_101405CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
  *(_QWORD *)(v48 + v51[7]) = *(_QWORD *)(v49 + v51[7]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100DD30C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  int *inserted;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  *(_QWORD *)(v9 + *(int *)(v11 + 24)) = *(_QWORD *)(v10 + *(int *)(v11 + 24));
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C(&qword_1013E1980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40);
  v20(v17, v18, v19);
  inserted = (int *)type metadata accessor for CRLBoardInsertStyleData(0);
  v20(v17 + inserted[5], v18 + inserted[5], v19);
  v20(v17 + inserted[6], v18 + inserted[6], v19);
  v22 = inserted[7];
  v23 = v17 + v22;
  v24 = v18 + v22;
  v25 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = inserted[8];
  v27 = v17 + v26;
  v28 = v18 + v26;
  v29 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  v30 = inserted[9];
  v31 = v17 + v30;
  v32 = v18 + v30;
  v33 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v31, v32, v33);
  *(_QWORD *)(v17 + inserted[10]) = *(_QWORD *)(v18 + inserted[10]);
  swift_bridgeObjectRelease();
  v34 = a3[8];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  v38 = (int *)type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v39 = v38[5];
  v40 = v35 + v39;
  v41 = v36 + v39;
  v42 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  v43 = v38[6];
  v44 = v35 + v43;
  v45 = v36 + v43;
  v46 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  *(_QWORD *)(v35 + v38[7]) = *(_QWORD *)(v36 + v38[7]);
  swift_bridgeObjectRelease();
  v47 = a3[9];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = sub_1004B804C((uint64_t *)&unk_1013F02F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  v51 = (int *)type metadata accessor for CRLBoardScenesCRDTData(0);
  v52 = v51[5];
  v53 = v48 + v52;
  v54 = v49 + v52;
  v55 = sub_1004B804C((uint64_t *)&unk_101405CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 40))(v53, v54, v55);
  v56 = v51[6];
  v57 = v48 + v56;
  v58 = v49 + v56;
  v59 = sub_1004B804C(&qword_101405CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 40))(v57, v58, v59);
  *(_QWORD *)(v48 + v51[7]) = *(_QWORD *)(v49 + v51[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD3430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DD343C);
}

uint64_t sub_100DD343C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inserted;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_13:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_1004B804C(&qword_1013E1980);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_13;
  }
  inserted = type metadata accessor for CRLBoardInsertStyleData(0);
  v12 = *(_QWORD *)(inserted - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = inserted;
    v13 = a3[7];
    goto LABEL_13;
  }
  v16 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[8];
    goto LABEL_13;
  }
  v17 = type metadata accessor for CRLBoardScenesCRDTData(0);
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[9];
    goto LABEL_13;
  }
  v19 = *(_QWORD *)(a1 + a3[10]);
  if (v19 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  return (v19 + 1);
}

uint64_t sub_100DD357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DD3588);
}

uint64_t sub_100DD3588(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inserted;
  uint64_t v18;
  uint64_t result;

  v8 = sub_1004B804C(&qword_1013E1A80);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_13:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_1004B804C(&qword_1013E1980);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_13;
  }
  inserted = type metadata accessor for CRLBoardInsertStyleData(0);
  v14 = *(_QWORD *)(inserted - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = inserted;
    v15 = a4[7];
    goto LABEL_13;
  }
  v18 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[8];
    goto LABEL_13;
  }
  result = type metadata accessor for CRLBoardScenesCRDTData(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[9];
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
  return result;
}

void sub_100DD36C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inserted;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[7];

  sub_1005E32D0(319);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(319);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100560D4C(319, &qword_1013E6A18, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        inserted = type metadata accessor for CRLBoardInsertStyleData(319);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(inserted - 8) + 64;
          v10 = type metadata accessor for CRLSharedBoardMetadataCRDTData(319);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for CRLBoardScenesCRDTData(319);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              v14[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
              swift_initStructMetadata(a1, 256, 7, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t *sub_100DD37DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = sub_1004B804C(&qword_1013FE148);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1004B804C(&qword_1013F7918);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_1004B804C((uint64_t *)&unk_1013F5590);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = *(uint64_t *)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

double sub_100DD38D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100DD3974(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_100DD3A40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD3B18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100DD3BE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1004B804C(&qword_1013FE148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1004B804C(&qword_1013F7918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD3CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DD3CBC);
}

uint64_t sub_100DD3CBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_1004B804C(&qword_1013FE148);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1004B804C(&qword_1013F7918);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_100DD3D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DD3DA0);
}

uint64_t sub_100DD3DA0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_1004B804C(&qword_1013FE148);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_1004B804C(&qword_1013F7918);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
  return result;
}

void sub_100DD3E74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_100DD3F50();
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100560D4C(319, (unint64_t *)&unk_101414078, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100560D4C(319, (unint64_t *)&qword_1013E2870, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

void sub_100DD3F50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_101414070)
  {
    v0 = type metadata accessor for CRMaxRegister(0, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_101414070);
  }
}

uint64_t *sub_100DD3FB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = sub_1004B804C(&qword_1013E1A80);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v10;
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

double sub_100DD4064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  double result;

  v4 = sub_1004B804C(&qword_1013E1A80);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100DD40C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_100DD414C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD41DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100DD425C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD42E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DD42F0);
}

uint64_t sub_100DD42F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1004B804C(&qword_1013E1A80);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100DD4370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DD437C);
}

uint64_t sub_100DD437C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1004B804C(&qword_1013E1A80);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_100DD43F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1005E32D0(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t *sub_100DD4470(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    v7 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1004B804C(&qword_1013DFA68);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[8];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_1004B804C(&qword_1013DFA50);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[9];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = sub_1004B804C(&qword_1013DFA78);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[10];
    v22 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v22;
    swift_bridgeObjectRetain(v22);
  }
  return a1;
}

double sub_100DD45C4(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  v6 = a1 + a2[7];
  v7 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[8];
  v9 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = a1 + a2[9];
  v11 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100DD46B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[9];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = a3[10];
  v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_100DD47D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[9];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[10];
  v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD490C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[9];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100DD4A30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1004B804C(&qword_1013DFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C(&qword_1013DFA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[9];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1004B804C(&qword_1013DFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD4B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DD4B68);
}

uint64_t sub_100DD4B68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1004B804C(&qword_1013DFA68);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[7];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_1004B804C(&qword_1013DFA50);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[8];
    goto LABEL_9;
  }
  v15 = sub_1004B804C(&qword_1013DFA78);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[9];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[10]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t sub_100DD4C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DD4C74);
}

uint64_t sub_100DD4C74(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_1004B804C(&qword_1013DFA68);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[7];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_1004B804C(&qword_1013DFA50);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[8];
    goto LABEL_9;
  }
  result = sub_1004B804C(&qword_1013DFA78);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[9];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
  return result;
}

void sub_100DD4D70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  sub_100C0C50C(319, &qword_1014141B0, &qword_1013F1540, &qword_1014141B8, (void (*)(void))sub_10089D5FC);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = v10[0];
    v10[2] = v10[0];
    sub_100C0C50C(319, &qword_1014141C0, &qword_1013DFA60, &qword_1014141C8, (void (*)(void))sub_10089D27C);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_100C0C50C(319, &qword_1014141D0, &qword_1013DFA48, &qword_1014141D8, (void (*)(void))sub_10089D12C);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        sub_100C0C50C(319, &qword_1014141E0, &qword_1013DFA70, (unint64_t *)&unk_1014141E8, (void (*)(void))sub_100D51C0C);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          v10[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_initStructMetadata(a1, 256, 7, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t *sub_100DD4EBC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = sub_1004B804C((uint64_t *)&unk_1013F5590);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    v8((uint64_t *)((char *)a1 + a3[8]), (uint64_t *)((char *)a2 + a3[8]), v7);
    v9 = a3[9];
    v10 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v10;
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

double sub_100DD4FA8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  double result;

  v4 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  v5(a1 + a2[7], v4);
  v5(a1 + a2[8], v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100DD503C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v8 = a3[9];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_100DD50FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v8 = a3[9];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD51C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100DD5284(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100DD5348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100DD5354);
}

uint64_t sub_100DD5354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100DD53D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100DD53E0);
}

uint64_t sub_100DD53E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1004B804C((uint64_t *)&unk_1013F5590);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CRLUserBoardMetadataCRDTData(uint64_t a1)
{
  return sub_1004BD408(a1, qword_101414288, (uint64_t)&nominal type descriptor for CRLUserBoardMetadataCRDTData);
}

void sub_100DD5470(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_100560D4C(319, (unint64_t *)&qword_1013E2870, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = v4[0];
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_100DD5504(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE v16[24];

  v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v9 = &v15[-v8];
  v10 = *a1;
  v11 = *a2;
  v12 = v10 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v10 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v16, 0, 0);
  sub_1004B8460(v12, (uint64_t)v9, type metadata accessor for CRLBoardCRDTData);
  v13 = v11 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v11 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v15, 0, 0);
  sub_1004B8460(v13, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  LOBYTE(v13) = sub_100DDAE78((uint64_t)v9, (uint64_t)v6);
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardCRDTData);
  return v13 & 1;
}

uint64_t sub_100DD5624()
{
  return 0;
}

uint64_t sub_100DD5638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v8[24];

  v1 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v1);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = v0 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v4, v8, 0, 0);
  sub_1004B8460(v4, (uint64_t)v3, type metadata accessor for CRLBoardCRDTData);
  v5 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v5);
  return sub_1004B84A4((uint64_t)v3, type metadata accessor for CRLBoardCRDTData);
}

void sub_100DD56F4(uint64_t a1)
{
  sub_100DD19C4(a1);
}

uint64_t sub_100DD5708()
{
  uint64_t result;

  *(_QWORD *)&xmmword_1014816F8 = 97;
  *((_QWORD *)&xmmword_1014816F8 + 1) = 0xE100000000000000;
  qword_101481708 = swift_getKeyPath(&unk_100F3A4F8);
  unk_101481710 = 98;
  *(_QWORD *)&xmmword_101481718 = 0xE100000000000000;
  *((_QWORD *)&xmmword_101481718 + 1) = swift_getKeyPath(&unk_100F3A518);
  unk_101481728 = 99;
  qword_101481730 = 0xE100000000000000;
  *(_QWORD *)&xmmword_101481738 = swift_getKeyPath(&unk_100F3A538);
  *((_QWORD *)&xmmword_101481738 + 1) = 100;
  qword_101481748 = 0xE100000000000000;
  qword_101481750 = swift_getKeyPath(&unk_100F3A558);
  unk_101481758 = 101;
  qword_101481760 = 0xE100000000000000;
  qword_101481768 = swift_getKeyPath(&unk_100F3A578);
  unk_101481770 = 102;
  *(_QWORD *)&xmmword_101481778 = 0xE100000000000000;
  result = swift_getKeyPath(&unk_100F3A598);
  *((_QWORD *)&xmmword_101481778 + 1) = result;
  return result;
}

uint64_t sub_100DD57BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - v9;
  v12 = UUID.init()(v11);
  v13 = UUID.init()(v12);
  UUID.init()(v13);
  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v14, "localizedStringForKey:value:table:", v15, v16, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;
  v21 = v20;

  return sub_100DD10B4(v10, v7, v4, v19, v21, a1);
}

uint64_t sub_100DD5938@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v16 - v11;
  *(_QWORD *)(a3 + *(int *)(type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0) + 24)) = _swiftEmptyDictionarySingleton;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v12, a1, v6);
  v13(v9, (uint64_t)v12, v6);
  CRRegister.init(wrappedValue:)(v9, v6, &protocol witness table for UUID);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v12, v6);
  v13(v12, (uint64_t)a2, v6);
  v13(v9, (uint64_t)v12, v6);
  CRRegister.init(wrappedValue:)(v9, v6, &protocol witness table for UUID);
  v14(v12, v6);
  v14(a2, v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v14)(a1, v6);
}

__n128 sub_100DD5AA8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  _BYTE v17[32];
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;

  if (qword_1013DDF60 != -1)
    swift_once(&qword_1013DDF60, sub_100DD5708);
  *(_OWORD *)v19 = *(_OWORD *)&qword_101481758;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_101481768;
  v20 = xmmword_101481778;
  v16 = xmmword_101481718;
  *(_OWORD *)v17 = *(_OWORD *)&qword_101481728;
  *(_OWORD *)&v17[16] = xmmword_101481738;
  v18 = *(_OWORD *)&qword_101481748;
  *(_OWORD *)v15 = xmmword_1014816F8;
  *(_OWORD *)&v15[16] = *(_OWORD *)&qword_101481708;
  v2 = xmmword_1014816F8;
  v3 = unk_101481710;
  v4 = qword_101481728;
  v5 = *((_QWORD *)&xmmword_101481738 + 1);
  v6 = qword_101481758;
  v7 = unk_101481770;
  v9 = *(_OWORD *)&v15[8];
  v10 = xmmword_101481718;
  v11 = *(_OWORD *)&v17[8];
  v12 = *(_OWORD *)&qword_101481748;
  v13 = *(_OWORD *)&v19[8];
  v14 = xmmword_101481778;
  sub_100DDC420(v15);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 120) = v7;
  result = (__n128)v14;
  *(_OWORD *)(a1 + 128) = v14;
  return result;
}

uint64_t sub_100DD5BC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return static CRStruct_6.fieldKeys.getter(a1, v2);
}

uint64_t sub_100DD5C08(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 40)));
}

uint64_t sub_100DD5C14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 40);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + v4));
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion (__swiftcall *sub_100DD5C48())(CKRecordID recordID, Swift::String recordType)
{
  return SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:);
}

uint64_t sub_100DD5C60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878((unint64_t *)&unk_101405E48, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A270);
  return CRType.context.getter(a1, v2);
}

uint64_t sub_100DD5CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_100DD5CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.apply(_:)(a1, a2, v4);
}

uint64_t sub_100DD5D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.hasDelta(from:)(a1, a2, v4);
}

uint64_t sub_100DD5D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_100DD5E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD5E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.merge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD5EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_100DD5EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_100DD5F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_100DD5FB0()
{
  sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.needToFinalizeTimestamps()();
}

uint64_t sub_100DD5FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_100DD6040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.merge(_:)(a1, a2, v4);
}

uint64_t sub_100DD6090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_100DD60F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
  return CRDT.init(serializedData:)(a1, a2, a3, v6);
}

uint64_t sub_100DD6168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.init(from:)(a1, a2, v4);
}

uint64_t sub_100DD61CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.encode(to:)(a1, a2, v4);
}

uint64_t sub_100DD6228(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  return CRStruct_6.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_100DD6278()
{
  uint64_t result;

  qword_101481788 = 97;
  unk_101481790 = 0xE100000000000000;
  qword_101481798 = swift_getKeyPath(&unk_100F3A618);
  unk_1014817A0 = 98;
  qword_1014817A8 = 0xE100000000000000;
  result = swift_getKeyPath(&unk_100F3A638);
  qword_1014817B0 = result;
  return result;
}

double sub_100DD62D0@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  if (qword_1013DDF68 != -1)
    swift_once(&qword_1013DDF68, sub_100DD6278);
  v2 = unk_101481790;
  v4 = qword_101481798;
  v3 = unk_1014817A0;
  v5 = qword_1014817A8;
  v6 = qword_1014817B0;
  *a1 = qword_101481788;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

uint64_t sub_100DD6354(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return static CRStruct_2.fieldKeys.getter(a1, v2);
}

uint64_t sub_100DD6394@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - v6;
  v9 = UUID.init()(v8);
  UUID.init()(v9);
  return sub_100DD5938((uint64_t)v7, v4, a1);
}

uint64_t sub_100DD642C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_101414378, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39DA0);
  return CRType.context.getter(a1, v2);
}

uint64_t sub_100DD646C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_100DD64C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.apply(_:)(a1, a2, v4);
}

uint64_t sub_100DD6514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.hasDelta(from:)(a1, a2, v4);
}

uint64_t sub_100DD6564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_100DD65CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD661C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.merge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD666C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_100DD66C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_100DD672C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_100DD677C()
{
  sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t sub_100DD67BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_100DD680C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.merge(_:)(a1, a2, v4);
}

uint64_t sub_100DD685C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414390, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39E00);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_100DD68C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414390, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39E00);
  return CRDT.init(serializedData:)(a1, a2, a3, v6);
}

uint64_t sub_100DD6934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.init(from:)(a1, a2, v4);
}

uint64_t sub_100DD6998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.encode(to:)(a1, a2, v4);
}

uint64_t sub_100DD69F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_101414430, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39F58);
  return CRStruct_2.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_100DD6A44()
{
  uint64_t result;

  *(_QWORD *)&xmmword_1014817B8 = 97;
  *((_QWORD *)&xmmword_1014817B8 + 1) = 0xE100000000000000;
  qword_1014817C8 = swift_getKeyPath(&unk_100F3A658);
  unk_1014817D0 = 98;
  *(_QWORD *)&xmmword_1014817D8 = 0xE100000000000000;
  *((_QWORD *)&xmmword_1014817D8 + 1) = swift_getKeyPath(&unk_100F3A678);
  unk_1014817E8 = 99;
  qword_1014817F0 = 0xE100000000000000;
  *(_QWORD *)&xmmword_1014817F8 = swift_getKeyPath(&unk_100F3A698);
  *((_QWORD *)&xmmword_1014817F8 + 1) = 100;
  qword_101481808 = 0xE100000000000000;
  qword_101481810 = swift_getKeyPath(&unk_100F3A6B8);
  unk_101481818 = 101;
  qword_101481820 = 0xE100000000000000;
  qword_101481828 = swift_getKeyPath(&unk_100F3A6D8);
  unk_101481830 = 102;
  *(_QWORD *)&xmmword_101481838 = 0xE100000000000000;
  result = swift_getKeyPath(&unk_100F3A6F8);
  *((_QWORD *)&xmmword_101481838 + 1) = result;
  return result;
}

uint64_t sub_100DD6AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t inserted;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  _BYTE v34[888];
  _BYTE v35[880];
  _OWORD v36[24];
  _OWORD v37[24];
  _BYTE v38[896];

  sub_1007849E8(v35);
  sub_1004C4938((uint64_t)v35, (uint64_t)v38, &qword_1013F1540);
  v8 = sub_1004B804C(&qword_1013F1540);
  v9 = sub_100C0C58C(&qword_1014141B8, &qword_1013F1540, (void (*)(void))sub_10089D5FC);
  CRRegister.init(wrappedValue:)(v38, v8, v9);
  inserted = type metadata accessor for CRLBoardInsertStyleData(0);
  sub_1004C4938((uint64_t)v35, (uint64_t)v38, &qword_1013F1540);
  CRRegister.init(wrappedValue:)(v38, v8, v9);
  sub_1004C4938((uint64_t)v35, (uint64_t)v38, &qword_1013F1540);
  CRRegister.init(wrappedValue:)(v38, v8, v9);
  sub_100DDC39C(v36);
  sub_1004C4938((uint64_t)v36, (uint64_t)v38, &qword_1013DFA60);
  v11 = sub_1004B804C(&qword_1013DFA60);
  v12 = sub_100C0C58C(&qword_1014141C8, &qword_1013DFA60, (void (*)(void))sub_10089D27C);
  CRRegister.init(wrappedValue:)(v38, v11, v12);
  sub_100DDC39C(v37);
  sub_1004C4938((uint64_t)v37, (uint64_t)v38, &qword_1013DFA48);
  v13 = sub_1004B804C(&qword_1013DFA48);
  v14 = sub_100C0C58C(&qword_1014141D8, &qword_1013DFA48, (void (*)(void))sub_10089D12C);
  CRRegister.init(wrappedValue:)(v38, v13, v14);
  sub_100DDC3D4(v38);
  sub_1004C4938((uint64_t)v38, (uint64_t)v34, &qword_1013DFA70);
  v15 = sub_1004B804C(&qword_1013DFA70);
  v16 = sub_100C0C58C((unint64_t *)&unk_1014141E8, &qword_1013DFA70, (void (*)(void))sub_100D51C0C);
  CRRegister.init(wrappedValue:)(v34, v15, v16);
  *(_QWORD *)(a7 + *(int *)(inserted + 40)) = _swiftEmptyDictionarySingleton;
  sub_1004C4938(a1, (uint64_t)v34, &qword_1013F1540);
  v17 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  CRRegister.wrappedValue.setter(v34, v17, v18);
  sub_1004C4938(a2, (uint64_t)v34, &qword_1013F1540);
  CRRegister.wrappedValue.setter(v34, v17, v19);
  sub_1004C4938(a3, (uint64_t)v34, &qword_1013F1540);
  CRRegister.wrappedValue.setter(v34, v17, v20);
  sub_1004C4938(a4, (uint64_t)v34, &qword_1013DFA60);
  v21 = sub_1004B804C(&qword_1013DFA68);
  CRRegister.wrappedValue.setter(v34, v21, v22);
  sub_1004C4938(a5, (uint64_t)v34, &qword_1013DFA48);
  v23 = sub_1004B804C(&qword_1013DFA50);
  CRRegister.wrappedValue.setter(v34, v23, v24);
  sub_1004C4938(a6, (uint64_t)v34, &qword_1013DFA70);
  v25 = sub_1004B804C(&qword_1013DFA78);
  return CRRegister.wrappedValue.setter(v34, v25, v26);
}

__n128 sub_100DD6E34@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  __int128 v16;
  _BYTE v17[32];
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;

  if (qword_1013DDF70 != -1)
    swift_once(&qword_1013DDF70, sub_100DD6A44);
  *(_OWORD *)v19 = *(_OWORD *)&qword_101481818;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_101481828;
  v20 = xmmword_101481838;
  v16 = xmmword_1014817D8;
  *(_OWORD *)v17 = *(_OWORD *)&qword_1014817E8;
  *(_OWORD *)&v17[16] = xmmword_1014817F8;
  v18 = *(_OWORD *)&qword_101481808;
  *(_OWORD *)v15 = xmmword_1014817B8;
  *(_OWORD *)&v15[16] = *(_OWORD *)&qword_1014817C8;
  v2 = xmmword_1014817B8;
  v3 = unk_1014817D0;
  v4 = qword_1014817E8;
  v5 = *((_QWORD *)&xmmword_1014817F8 + 1);
  v6 = qword_101481818;
  v7 = unk_101481830;
  v9 = *(_OWORD *)&v15[8];
  v10 = xmmword_1014817D8;
  v11 = *(_OWORD *)&v17[8];
  v12 = *(_OWORD *)&qword_101481808;
  v13 = *(_OWORD *)&v19[8];
  v14 = xmmword_101481838;
  sub_100DDC420(v15);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 120) = v7;
  result = (__n128)v14;
  *(_OWORD *)(a1 + 128) = v14;
  return result;
}

uint64_t sub_100DD6F54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return static CRStruct_6.fieldKeys.getter(a1, v2);
}

uint64_t sub_100DD6F94@<X0>(uint64_t a1@<X8>)
{
  char v3;
  _BYTE v4[384];
  _BYTE v5[384];
  _BYTE v6[888];
  _BYTE v7[880];
  _OWORD v8[24];
  _OWORD v9[24];
  _BYTE v10[888];

  sub_1007849E8(v7);
  sub_1004C4938((uint64_t)v7, (uint64_t)&v3, &qword_1013F1540);
  sub_100DDC39C(v8);
  sub_1004C4938((uint64_t)v8, (uint64_t)v4, &qword_1013DFA60);
  sub_100DDC39C(v9);
  sub_1004C4938((uint64_t)v9, (uint64_t)v5, &qword_1013DFA48);
  sub_100DDC3D4(v10);
  sub_1004C4938((uint64_t)v10, (uint64_t)v6, &qword_1013DFA70);
  return sub_100DD6AF8((uint64_t)&v3, (uint64_t)&v3, (uint64_t)&v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, a1);
}

uint64_t sub_100DD7068(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_101414318, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39B00);
  return CRType.context.getter(a1, v2);
}

uint64_t sub_100DD70A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_100DD7100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.apply(_:)(a1, a2, v4);
}

uint64_t sub_100DD7150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.hasDelta(from:)(a1, a2, v4);
}

uint64_t sub_100DD71A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_100DD7208(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD7258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.merge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD72A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_100DD7300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_100DD7368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_100DD73B8()
{
  sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.needToFinalizeTimestamps()();
}

uint64_t sub_100DD73F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_100DD7448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.merge(_:)(a1, a2, v4);
}

uint64_t sub_100DD7498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414330, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39B60);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_100DD74FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414330, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39B60);
  return CRDT.init(serializedData:)(a1, a2, a3, v6);
}

uint64_t sub_100DD7570(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.init(from:)(a1, a2, v4);
}

uint64_t sub_100DD75D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.encode(to:)(a1, a2, v4);
}

uint64_t sub_100DD7630(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_101414438, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39CF8);
  return CRStruct_6.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_100DD7680()
{
  uint64_t result;

  qword_101481848 = 97;
  unk_101481850 = 0xE100000000000000;
  qword_101481858 = swift_getKeyPath(&unk_100F3A5B8);
  unk_101481860 = 98;
  qword_101481868 = 0xE100000000000000;
  qword_101481870 = swift_getKeyPath(&unk_100F3A5D8);
  qword_101481878 = 99;
  qword_101481880 = 0xE100000000000000;
  result = swift_getKeyPath(&unk_100F3A5F8);
  qword_101481888 = result;
  return result;
}

double sub_100DD76F0@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  if (qword_1013DDF78 != -1)
    swift_once(&qword_1013DDF78, sub_100DD7680);
  v2 = unk_101481850;
  v4 = qword_101481858;
  v3 = unk_101481860;
  v5 = qword_101481868;
  v6 = qword_101481870;
  v7 = qword_101481878;
  v8 = qword_101481880;
  v9 = qword_101481888;
  *a1 = qword_101481848;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v8);
  *(_QWORD *)&result = swift_retain(v9).n128_u64[0];
  return result;
}

uint64_t sub_100DD779C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return static CRStruct_3.fieldKeys.getter(a1, v2);
}

uint64_t sub_100DD77DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v6;

  v4 = static Date.timeIntervalSinceReferenceDate.getter();
  *(_QWORD *)(a2 + *(int *)(a1 + 28)) = &_swiftEmptyDictionarySingleton;
  v6 = v4;
  CRMaxRegister.init(wrappedValue:)(&v6, &type metadata for Double, &protocol witness table for Double, &protocol witness table for Double);
  v6 = v4;
  CRRegister.init(wrappedValue:)(&v6, &type metadata for Double, &protocol witness table for Double);
  LOBYTE(v6) = 1;
  return CRRegister.init(wrappedValue:)(&v6, &type metadata for Bool, &protocol witness table for Bool);
}

uint64_t sub_100DD78A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_1014143B8, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A000);
  return CRType.context.getter(a1, v2);
}

uint64_t sub_100DD78E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_100DD7938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.apply(_:)(a1, a2, v4);
}

uint64_t sub_100DD7988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.hasDelta(from:)(a1, a2, v4);
}

uint64_t sub_100DD79D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_100DD7A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD7A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.merge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD7AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_100DD7B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_100DD7BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_100DD7BF0()
{
  sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t sub_100DD7C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_100DD7C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.merge(_:)(a1, a2, v4);
}

uint64_t sub_100DD7CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_1014143D0, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A060);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_100DD7D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_1014143D0, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A060);
  return CRDT.init(serializedData:)(a1, a2, a3, v6);
}

uint64_t sub_100DD7DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.init(from:)(a1, a2, v4);
}

uint64_t sub_100DD7E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.encode(to:)(a1, a2, v4);
}

uint64_t sub_100DD7E68(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_101414428, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A1C8);
  return CRStruct_3.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_100DD7EB8()
{
  uint64_t result;

  qword_101481890 = 97;
  *(_QWORD *)algn_101481898 = 0xE100000000000000;
  qword_1014818A0 = swift_getKeyPath(&unk_100F3A718);
  unk_1014818A8 = 98;
  qword_1014818B0 = 0xE100000000000000;
  qword_1014818B8 = swift_getKeyPath(&unk_100F3A738);
  qword_1014818C0 = 99;
  qword_1014818C8 = 0xE100000000000000;
  qword_1014818D0 = swift_getKeyPath(&unk_100F3A758);
  unk_1014818D8 = 100;
  qword_1014818E0 = 0xE100000000000000;
  qword_1014818E8 = swift_getKeyPath(&unk_100F3A778);
  qword_1014818F0 = 101;
  qword_1014818F8 = 0xE100000000000000;
  result = swift_getKeyPath(&unk_100F3A798);
  qword_101481900 = result;
  return result;
}

uint64_t sub_100DD7F54@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  *(_QWORD *)(a6 + *(int *)(type metadata accessor for CRLUserBoardMetadataCRDTData(0) + 36)) = _swiftEmptyDictionarySingleton;
  v16 = a1;
  CRRegister.init(wrappedValue:)(&v16, &type metadata for Bool, &protocol witness table for Bool);
  v15 = a2;
  CRRegister.init(wrappedValue:)(&v15, &type metadata for Bool, &protocol witness table for Bool);
  v14 = a3;
  CRRegister.init(wrappedValue:)(&v14, &type metadata for Bool, &protocol witness table for Bool);
  v13 = a4;
  CRRegister.init(wrappedValue:)(&v13, &type metadata for Bool, &protocol witness table for Bool);
  v12 = a5;
  return CRRegister.init(wrappedValue:)(&v12, &type metadata for Bool, &protocol witness table for Bool);
}

double sub_100DD805C@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  if (qword_1013DDF80 != -1)
    swift_once(&qword_1013DDF80, sub_100DD7EB8);
  v2 = *(_QWORD *)algn_101481898;
  v4 = qword_1014818A0;
  v3 = unk_1014818A8;
  v5 = qword_1014818B0;
  v6 = qword_1014818B8;
  v7 = qword_1014818C0;
  v8 = qword_1014818C8;
  v10 = qword_1014818D0;
  v9 = unk_1014818D8;
  v11 = qword_1014818E0;
  v12 = qword_1014818E8;
  v13 = qword_1014818F0;
  v14 = qword_1014818F8;
  v15 = qword_101481900;
  *a1 = qword_101481890;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  a1[12] = v13;
  a1[13] = v14;
  a1[14] = v15;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v8);
  swift_retain(v10);
  swift_bridgeObjectRetain(v11);
  swift_retain(v12);
  swift_bridgeObjectRetain(v14);
  *(_QWORD *)&result = swift_retain(v15).n128_u64[0];
  return result;
}

uint64_t sub_100DD8150(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return static CRStruct_5.fieldKeys.getter(a1, v2);
}

uint64_t sub_100DD8190@<X0>(uint64_t a1@<X8>)
{
  return sub_100DD7F54(0, 1, 1, 0, 0, a1);
}

uint64_t sub_100DD81A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_1014142E0, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39870);
  return CRType.context.getter(a1, v2);
}

uint64_t sub_100DD81E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_100DD8240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.apply(_:)(a1, a2, v4);
}

uint64_t sub_100DD8290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.hasDelta(from:)(a1, a2, v4);
}

uint64_t sub_100DD82E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_100DD8348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD8398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.merge(delta:)(a1, a2, v4);
}

uint64_t sub_100DD83E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_100DD8440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_100DD84A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_100DD84F8()
{
  sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.needToFinalizeTimestamps()();
}

uint64_t sub_100DD8538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_100DD8588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.merge(_:)(a1, a2, v4);
}

uint64_t sub_100DD85D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_1013F00B8, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F398D0);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_100DD863C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_1013F00B8, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F398D0);
  return CRDT.init(serializedData:)(a1, a2, a3, v6);
}

uint64_t sub_100DD86B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.init(from:)(a1, a2, v4);
}

uint64_t sub_100DD8714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.encode(to:)(a1, a2, v4);
}

uint64_t sub_100DD8770(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
  return CRStruct_5.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_100DD87C0()
{
  return sub_1004B7878(&qword_1014142D0, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F397F0);
}

uint64_t sub_100DD87EC()
{
  return sub_1004B7878(&qword_1014142D8, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39838);
}

uint64_t sub_100DD8818()
{
  return sub_1004B7878(&qword_1014142E0, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39870);
}

uint64_t sub_100DD8844()
{
  return sub_1004CBA30(&qword_1014142E8, &qword_1014142F0, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_5<A>);
}

uint64_t sub_100DD8870()
{
  return sub_1004B7878(&qword_1013F00B8, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F398D0);
}

uint64_t sub_100DD889C()
{
  return sub_1004B7878(&qword_1014142F8, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39950);
}

uint64_t sub_100DD88C8()
{
  return sub_1004B7878(&qword_101414300, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F399B0);
}

uint64_t sub_100DD88F4()
{
  return sub_1004B7878(&qword_101414308, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39A80);
}

uint64_t sub_100DD8920()
{
  return sub_1004B7878(&qword_101414310, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39AC8);
}

uint64_t sub_100DD894C()
{
  return sub_1004B7878(&qword_101414318, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39B00);
}

uint64_t sub_100DD8978()
{
  return sub_1004CBA30(&qword_101414320, &qword_101414328, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_6<A>);
}

uint64_t sub_100DD89A4()
{
  return sub_1004B7878(&qword_101414330, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39B60);
}

uint64_t sub_100DD89D0()
{
  return sub_1004B7878(&qword_101414338, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39BE0);
}

uint64_t sub_100DD89FC()
{
  return sub_1004CBA30(&qword_101414340, (uint64_t *)&unk_1013DFA80, (uint64_t)&protocol conformance descriptor for CRRegister<A>);
}

uint64_t sub_100DD8A28()
{
  return sub_1004CBA30(&qword_101414348, &qword_1013DFA68, (uint64_t)&protocol conformance descriptor for CRRegister<A>);
}

uint64_t sub_100DD8A54()
{
  return sub_1004CBA30(&qword_101414350, &qword_1013DFA50, (uint64_t)&protocol conformance descriptor for CRRegister<A>);
}

uint64_t sub_100DD8A80()
{
  return sub_1004CBA30(&qword_101414358, &qword_1013DFA78, (uint64_t)&protocol conformance descriptor for CRRegister<A>);
}

uint64_t sub_100DD8AAC()
{
  return sub_1004B7878(&qword_101414360, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39C40);
}

uint64_t sub_100DD8AD8()
{
  return sub_1004B7878(&qword_101414368, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39D20);
}

uint64_t sub_100DD8B04()
{
  return sub_1004B7878(&qword_101414370, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39D68);
}

uint64_t sub_100DD8B30()
{
  return sub_1004B7878(&qword_101414378, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39DA0);
}

uint64_t sub_100DD8B5C()
{
  return sub_1004CBA30(&qword_101414380, &qword_101414388, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_2<A>);
}

uint64_t sub_100DD8B88()
{
  return sub_1004B7878(&qword_101414390, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39E00);
}

uint64_t sub_100DD8BB4()
{
  return sub_1004B7878(&qword_101414398, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39E80);
}

uint64_t sub_100DD8BE0()
{
  return sub_1004B7878(&qword_1014143A0, type metadata accessor for CRLBoardRootContainerAffinityCRDTData, (uint64_t)&unk_100F39EE0);
}

uint64_t sub_100DD8C0C()
{
  return sub_1004B7878(&qword_1014143A8, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F39F80);
}

uint64_t sub_100DD8C38()
{
  return sub_1004B7878(&qword_1014143B0, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F39FC8);
}

uint64_t sub_100DD8C64()
{
  return sub_1004B7878(&qword_1014143B8, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A000);
}

uint64_t sub_100DD8C90()
{
  return sub_1004CBA30(&qword_1014143C0, &qword_1014143C8, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_3<A>);
}

uint64_t sub_100DD8CBC()
{
  return sub_1004B7878(&qword_1014143D0, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A060);
}

uint64_t sub_100DD8CE8()
{
  return sub_1004B7878(&qword_1014143D8, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A0E0);
}

uint64_t sub_100DD8D14()
{
  return sub_1004CBA30(&qword_1014143E0, &qword_1013FE148, (uint64_t)&protocol conformance descriptor for CRMaxRegister<A>);
}

uint64_t sub_100DD8D40()
{
  return sub_1004CBA30(&qword_1014143E8, &qword_1013F7918, (uint64_t)&protocol conformance descriptor for CRRegister<A>);
}

uint64_t sub_100DD8D6C()
{
  return sub_1004B7878(&qword_1014143F0, type metadata accessor for CRLSharedBoardMetadataCRDTData, (uint64_t)&unk_100F3A140);
}

uint64_t sub_100DD8D98()
{
  return sub_1004B7878(&qword_1014143F8, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A1F0);
}

uint64_t sub_100DD8DC4()
{
  return sub_1004B7878(&qword_101414400, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A238);
}

uint64_t sub_100DD8DF0()
{
  return sub_1004B7878((unint64_t *)&unk_101405E48, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A270);
}

uint64_t sub_100DD8E1C()
{
  return sub_1004CBA30(&qword_101414408, &qword_101414410, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_6<A>);
}

uint64_t sub_100DD8E48()
{
  return sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
}

uint64_t sub_100DD8E74()
{
  return sub_1004B7878(&qword_101414418, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A350);
}

uint64_t sub_100DD8EA0()
{
  return sub_1004CBA30(&qword_1013E6A58, &qword_1013E1980, (uint64_t)&protocol conformance descriptor for CRRegister<A>);
}

uint64_t sub_100DD8ECC()
{
  return sub_1004B7878(&qword_101414330, type metadata accessor for CRLBoardInsertStyleData, (uint64_t)&unk_100F39B60);
}

uint64_t sub_100DD8EF8()
{
  return sub_1004B7878(&qword_1013E58A0, type metadata accessor for CRLBoardScenesCRDTData, (uint64_t)&unk_100EFC668);
}

uint64_t sub_100DD8F24()
{
  return sub_1004B7878(&qword_101414420, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A3B0);
}

uint64_t sub_100DD8F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  char v19;
  uint64_t v21;
  uint64_t v22;

  v22 = type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
  v4 = __chkstk_darwin(v22);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v21 - v14;
  v16 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v16);
  CRRegister.wrappedValue.getter(v16);
  v17 = static UUID.== infix(_:_:)(v15);
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  v18(v15, v9);
  sub_1004B8460(a1, (uint64_t)v8, type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
  sub_1004B8460(a2, (uint64_t)v6, type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
  if ((v17 & 1) != 0)
  {
    CRRegister.wrappedValue.getter(v16);
    CRRegister.wrappedValue.getter(v16);
    v19 = static UUID.== infix(_:_:)(v15);
    v18(v13, v9);
    v18(v15, v9);
  }
  else
  {
    v19 = 0;
  }
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
  sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardRootContainerAffinityCRDTData);
  return v19 & 1;
}

uint64_t sub_100DD9144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v26;
  double v27;

  v4 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v26 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v26 - v14;
  v16 = sub_1004B804C(&qword_1013FE148);
  CRMaxRegister.wrappedValue.getter(&v27, v16);
  v17 = v27;
  CRMaxRegister.wrappedValue.getter(&v27, v16);
  v18 = v27;
  sub_1004B8460(a1, (uint64_t)v15, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_1004B8460(a2, (uint64_t)v13, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  if (v17 != v18)
  {
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLSharedBoardMetadataCRDTData);
    sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLSharedBoardMetadataCRDTData);
    sub_1004B8460(a1, (uint64_t)v10, type metadata accessor for CRLSharedBoardMetadataCRDTData);
    sub_1004B8460(a2, (uint64_t)v7, type metadata accessor for CRLSharedBoardMetadataCRDTData);
    goto LABEL_5;
  }
  v19 = sub_1004B804C(&qword_1013F7918);
  CRRegister.wrappedValue.getter(v19);
  v20 = v27;
  CRRegister.wrappedValue.getter(v19);
  v21 = v27;
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_1004B8460(a1, (uint64_t)v10, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_1004B8460(a2, (uint64_t)v7, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  if (v20 != v21)
  {
LABEL_5:
    v24 = 0;
    goto LABEL_6;
  }
  v22 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.getter(v22);
  v23 = LOBYTE(v27);
  CRRegister.wrappedValue.getter(v22);
  v24 = v23 ^ LOBYTE(v27) ^ 1;
LABEL_6:
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  return v24 & 1;
}

uint64_t sub_100DD93B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  char v38;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  char v52;
  char v53;
  unsigned __int8 v54;
  unsigned __int8 v55;

  v41 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  __chkstk_darwin(v41);
  v45 = &v39[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v44 = &v39[-v6];
  __chkstk_darwin(v7);
  v42 = &v39[-v8];
  __chkstk_darwin(v9);
  v43 = &v39[-v10];
  __chkstk_darwin(v11);
  v13 = &v39[-v12];
  __chkstk_darwin(v14);
  v16 = &v39[-v15];
  __chkstk_darwin(v17);
  v19 = &v39[-v18];
  __chkstk_darwin(v20);
  v22 = &v39[-v21];
  v23 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.getter(v23);
  v24 = v55;
  CRRegister.wrappedValue.getter(v23);
  v25 = v54;
  sub_1004B8460(a1, (uint64_t)v22, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_1004B8460(a2, (uint64_t)v19, type metadata accessor for CRLUserBoardMetadataCRDTData);
  if (v24 != v25)
  {
    sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_1004B8460(a1, (uint64_t)v16, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_1004B8460(a2, (uint64_t)v13, type metadata accessor for CRLUserBoardMetadataCRDTData);
LABEL_4:
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLUserBoardMetadataCRDTData);
    v27 = v43;
    sub_1004B8460(a1, (uint64_t)v43, type metadata accessor for CRLUserBoardMetadataCRDTData);
    v28 = v42;
    sub_1004B8460(a2, (uint64_t)v42, type metadata accessor for CRLUserBoardMetadataCRDTData);
LABEL_5:
    sub_1004B84A4((uint64_t)v28, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLUserBoardMetadataCRDTData);
    v29 = a1;
    v30 = v44;
    sub_1004B8460(v29, (uint64_t)v44, type metadata accessor for CRLUserBoardMetadataCRDTData);
    sub_1004B8460(a2, (uint64_t)v45, type metadata accessor for CRLUserBoardMetadataCRDTData);
    goto LABEL_6;
  }
  CRRegister.wrappedValue.getter(v23);
  v40 = v47;
  CRRegister.wrappedValue.getter(v23);
  v26 = v46;
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_1004B8460(a1, (uint64_t)v16, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_1004B8460(a2, (uint64_t)v13, type metadata accessor for CRLUserBoardMetadataCRDTData);
  if (v40 != v26)
    goto LABEL_4;
  CRRegister.wrappedValue.getter(v23);
  v33 = v49;
  CRRegister.wrappedValue.getter(v23);
  v34 = v48;
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLUserBoardMetadataCRDTData);
  v27 = v43;
  sub_1004B8460(a1, (uint64_t)v43, type metadata accessor for CRLUserBoardMetadataCRDTData);
  v28 = v42;
  sub_1004B8460(a2, (uint64_t)v42, type metadata accessor for CRLUserBoardMetadataCRDTData);
  if (v33 != v34)
    goto LABEL_5;
  CRRegister.wrappedValue.getter(v23);
  v35 = v51;
  CRRegister.wrappedValue.getter(v23);
  v36 = v50;
  sub_1004B84A4((uint64_t)v28, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLUserBoardMetadataCRDTData);
  v37 = a1;
  v30 = v44;
  sub_1004B8460(v37, (uint64_t)v44, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_1004B8460(a2, (uint64_t)v45, type metadata accessor for CRLUserBoardMetadataCRDTData);
  if (v35 == v36)
  {
    CRRegister.wrappedValue.getter(v23);
    v38 = v53;
    CRRegister.wrappedValue.getter(v23);
    v31 = v38 ^ v52 ^ 1;
    goto LABEL_7;
  }
LABEL_6:
  v31 = 0;
LABEL_7:
  sub_1004B84A4((uint64_t)v45, type metadata accessor for CRLUserBoardMetadataCRDTData);
  sub_1004B84A4((uint64_t)v30, type metadata accessor for CRLUserBoardMetadataCRDTData);
  return v31 & 1;
}

uint64_t sub_100DD982C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v46;
  int v47;
  int v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t inserted;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[888];
  _BYTE v69[888];
  _BYTE v70[888];
  uint64_t v71[111];
  _BYTE v72[376];
  uint64_t v73;
  uint64_t v74[222];
  _BYTE v75[1776];
  _BYTE v76[888];
  _BYTE v77[888];
  _BYTE v78[888];
  uint64_t v79[111];
  _BYTE v80[376];
  _BYTE v81[376];
  _BYTE v82[376];
  _BYTE v83[376];
  char v84[880];
  _BYTE v85[880];
  char v86[880];
  _BYTE v87[880];
  char v88[880];
  _BYTE v89[880];
  _BYTE v90[880];
  _BYTE v91[880];
  _BYTE v92[888];

  inserted = type metadata accessor for CRLBoardInsertStyleData(0);
  v4 = __chkstk_darwin(inserted);
  v60 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v63 = (uint64_t)&v58 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v58 - v9;
  v11 = __chkstk_darwin(v8);
  v62 = (char *)&v58 - v12;
  v13 = __chkstk_darwin(v11);
  v67 = (uint64_t)&v58 - v14;
  v15 = __chkstk_darwin(v13);
  v66 = (uint64_t)&v58 - v16;
  v17 = __chkstk_darwin(v15);
  v65 = (uint64_t)&v58 - v18;
  v19 = __chkstk_darwin(v17);
  v64 = (uint64_t)&v58 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v58 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v58 - v24;
  v26 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  v27 = a1;
  CRRegister.wrappedValue.getter(v26);
  sub_1004C4938((uint64_t)v75, (uint64_t)v90, &qword_1013F1540);
  v28 = a2;
  CRRegister.wrappedValue.getter(v26);
  sub_1004C4938((uint64_t)v75, (uint64_t)v91, &qword_1013F1540);
  sub_1004C4938((uint64_t)v90, (uint64_t)v92, &qword_1013F1540);
  v29 = sub_100784BF4((uint64_t)v92) == 1;
  v61 = v10;
  if (v29)
  {
    sub_1004C4938((uint64_t)v91, (uint64_t)v75, &qword_1013F1540);
    if (sub_100784BF4((uint64_t)v75) != 1)
    {
LABEL_6:
      sub_1004C4938((uint64_t)v90, (uint64_t)v75, &qword_1013F1540);
      sub_1004C4938((uint64_t)v91, (uint64_t)&v75[880], &qword_1013F1540);
      sub_100DDB468((uint64_t)v75);
      v30 = a1;
      sub_1004B8460(a1, (uint64_t)v25, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B8460(v28, (uint64_t)v23, type metadata accessor for CRLBoardInsertStyleData);
LABEL_11:
      sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLBoardInsertStyleData);
      v36 = v28;
      v38 = v66;
      v34 = v67;
      v35 = v64;
LABEL_15:
      sub_1004B8460(v30, v35, type metadata accessor for CRLBoardInsertStyleData);
      v37 = v65;
      sub_1004B8460(v36, v65, type metadata accessor for CRLBoardInsertStyleData);
LABEL_16:
      sub_1004B84A4(v37, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B84A4(v35, type metadata accessor for CRLBoardInsertStyleData);
      v41 = (uint64_t)v61;
      v40 = (uint64_t)v62;
LABEL_17:
      sub_1004B8460(v30, v38, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B8460(v36, v34, type metadata accessor for CRLBoardInsertStyleData);
LABEL_18:
      sub_1004B84A4(v34, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B84A4(v38, type metadata accessor for CRLBoardInsertStyleData);
      v42 = v63;
LABEL_19:
      sub_1004B8460(v30, v40, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B8460(v36, v41, type metadata accessor for CRLBoardInsertStyleData);
LABEL_20:
      sub_1004B84A4(v41, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B84A4(v40, type metadata accessor for CRLBoardInsertStyleData);
      v43 = v60;
LABEL_21:
      sub_1004B8460(v30, v42, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B8460(v36, v43, type metadata accessor for CRLBoardInsertStyleData);
LABEL_22:
      sub_1004B84A4(v43, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B84A4(v42, type metadata accessor for CRLBoardInsertStyleData);
      goto LABEL_23;
    }
    v30 = a1;
    sub_1004B8460(a1, (uint64_t)v25, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B8460(v28, (uint64_t)v23, type metadata accessor for CRLBoardInsertStyleData);
  }
  else
  {
    sub_1004C4938((uint64_t)v91, (uint64_t)v75, &qword_1013F1540);
    v31 = sub_100784BF4((uint64_t)v75);
    if (v31 == 1)
      goto LABEL_6;
    sub_1004C4938((uint64_t)v90, (uint64_t)v78, &qword_1013F1540);
    memcpy(v88, v78, sizeof(v88));
    sub_1004C4938((uint64_t)v91, (uint64_t)v79, &qword_1013F1540);
    memcpy(v89, v79, sizeof(v89));
    sub_1004C4938((uint64_t)v90, (uint64_t)v74, &qword_1013F1540);
    sub_100C8F210((uint64_t)v74);
    v32 = sub_100C8DC24(v88, (uint64_t)v89);
    sub_100DDC1AC((uint64_t)v91);
    sub_100DDC1AC((uint64_t)v90);
    sub_100DDC1AC((uint64_t)v90);
    v30 = v27;
    sub_1004B8460(v27, (uint64_t)v25, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B8460(v28, (uint64_t)v23, type metadata accessor for CRLBoardInsertStyleData);
    if ((v32 & 1) == 0)
      goto LABEL_11;
  }
  CRRegister.wrappedValue.getter(v26);
  sub_1004C4938((uint64_t)v75, (uint64_t)v77, &qword_1013F1540);
  CRRegister.wrappedValue.getter(v26);
  sub_1004C4938((uint64_t)v75, (uint64_t)v78, &qword_1013F1540);
  sub_1004C4938((uint64_t)v77, (uint64_t)v75, &qword_1013F1540);
  sub_1004C4938((uint64_t)v78, (uint64_t)&v75[880], &qword_1013F1540);
  sub_1004C4938((uint64_t)v77, (uint64_t)v79, &qword_1013F1540);
  if (sub_100784BF4((uint64_t)v79) == 1)
  {
    sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004C4938((uint64_t)&v75[880], (uint64_t)v76, &qword_1013F1540);
    sub_1004C4938((uint64_t)v76, (uint64_t)v74, &qword_1013F1540);
    v33 = sub_100784BF4((uint64_t)v74);
    v34 = v67;
    if (v33 == 1)
    {
      sub_1004C4938((uint64_t)v75, (uint64_t)v72, &qword_1013F1540);
      sub_100DDC1AC((uint64_t)v72);
      v35 = v64;
      sub_1004B8460(v30, v64, type metadata accessor for CRLBoardInsertStyleData);
      v36 = v28;
      v37 = v65;
      sub_1004B8460(v28, v65, type metadata accessor for CRLBoardInsertStyleData);
      goto LABEL_26;
    }
LABEL_14:
    v36 = v28;
    v38 = v66;
    v35 = v64;
    memcpy(v74, v75, 0x6E0uLL);
    sub_100DDB468((uint64_t)v74);
    goto LABEL_15;
  }
  sub_1004C4938((uint64_t)v78, (uint64_t)v74, &qword_1013F1540);
  v39 = sub_100784BF4((uint64_t)v74);
  v34 = v67;
  if (v39 == 1)
  {
    sub_1004C4938((uint64_t)v77, (uint64_t)v76, &qword_1013F1540);
    sub_100C8F210((uint64_t)v76);
    sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLBoardInsertStyleData);
    sub_100DDC1AC((uint64_t)v77);
    goto LABEL_14;
  }
  sub_1004C4938((uint64_t)v77, (uint64_t)v70, &qword_1013F1540);
  memcpy(v86, v70, sizeof(v86));
  sub_1004C4938((uint64_t)v78, (uint64_t)v71, &qword_1013F1540);
  memcpy(v87, v71, sizeof(v87));
  sub_1004C4938((uint64_t)v77, (uint64_t)v72, &qword_1013F1540);
  sub_100C8F210((uint64_t)v72);
  v46 = sub_100C8DC24(v86, (uint64_t)v87);
  sub_100DDC1AC((uint64_t)v78);
  sub_100DDC1AC((uint64_t)v77);
  sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004C4938((uint64_t)v75, (uint64_t)v76, &qword_1013F1540);
  sub_100DDC1AC((uint64_t)v76);
  v35 = v64;
  sub_1004B8460(v30, v64, type metadata accessor for CRLBoardInsertStyleData);
  v36 = v28;
  v37 = v65;
  sub_1004B8460(v28, v65, type metadata accessor for CRLBoardInsertStyleData);
  v38 = v66;
  if ((v46 & 1) == 0)
    goto LABEL_16;
LABEL_26:
  CRRegister.wrappedValue.getter(v26);
  sub_1004C4938((uint64_t)v75, (uint64_t)v77, &qword_1013F1540);
  CRRegister.wrappedValue.getter(v26);
  sub_1004C4938((uint64_t)v75, (uint64_t)v78, &qword_1013F1540);
  sub_1004C4938((uint64_t)v77, (uint64_t)v75, &qword_1013F1540);
  sub_1004C4938((uint64_t)v78, (uint64_t)&v75[880], &qword_1013F1540);
  sub_1004C4938((uint64_t)v77, (uint64_t)v79, &qword_1013F1540);
  if (sub_100784BF4((uint64_t)v79) == 1)
  {
    sub_1004B84A4(v37, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4(v35, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004C4938((uint64_t)&v75[880], (uint64_t)v76, &qword_1013F1540);
    sub_1004C4938((uint64_t)v76, (uint64_t)v74, &qword_1013F1540);
    v47 = sub_100784BF4((uint64_t)v74);
    v40 = (uint64_t)v62;
    v38 = v66;
    v34 = v67;
    if (v47 == 1)
    {
      sub_1004C4938((uint64_t)v75, (uint64_t)v72, &qword_1013F1540);
      sub_100DDC1AC((uint64_t)v72);
      sub_1004B8460(v30, v38, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B8460(v36, v34, type metadata accessor for CRLBoardInsertStyleData);
      v41 = (uint64_t)v61;
      goto LABEL_34;
    }
    v41 = (uint64_t)v61;
LABEL_32:
    memcpy(v74, v75, 0x6E0uLL);
    sub_100DDB468((uint64_t)v74);
    goto LABEL_17;
  }
  sub_1004C4938((uint64_t)v78, (uint64_t)v74, &qword_1013F1540);
  v48 = sub_100784BF4((uint64_t)v74);
  v38 = v66;
  v34 = v67;
  v41 = (uint64_t)v61;
  if (v48 == 1)
  {
    sub_1004C4938((uint64_t)v77, (uint64_t)v76, &qword_1013F1540);
    sub_100C8F210((uint64_t)v76);
    sub_1004B84A4(v65, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4(v64, type metadata accessor for CRLBoardInsertStyleData);
    sub_100DDC1AC((uint64_t)v77);
    v40 = (uint64_t)v62;
    goto LABEL_32;
  }
  sub_1004C4938((uint64_t)v77, (uint64_t)v70, &qword_1013F1540);
  memcpy(v84, v70, sizeof(v84));
  sub_1004C4938((uint64_t)v78, (uint64_t)v71, &qword_1013F1540);
  memcpy(v85, v71, sizeof(v85));
  sub_1004C4938((uint64_t)v77, (uint64_t)v72, &qword_1013F1540);
  sub_100C8F210((uint64_t)v72);
  v49 = sub_100C8DC24(v84, (uint64_t)v85);
  sub_100DDC1AC((uint64_t)v78);
  sub_100DDC1AC((uint64_t)v77);
  sub_1004B84A4(v65, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004B84A4(v64, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004C4938((uint64_t)v75, (uint64_t)v76, &qword_1013F1540);
  sub_100DDC1AC((uint64_t)v76);
  sub_1004B8460(v30, v38, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004B8460(v36, v34, type metadata accessor for CRLBoardInsertStyleData);
  v40 = (uint64_t)v62;
  if ((v49 & 1) == 0)
    goto LABEL_18;
LABEL_34:
  v50 = sub_1004B804C(&qword_1013DFA68);
  CRRegister.wrappedValue.getter(v50);
  sub_1004C4938((uint64_t)v75, (uint64_t)v77, &qword_1013DFA60);
  CRRegister.wrappedValue.getter(v50);
  sub_1004C4938((uint64_t)v75, (uint64_t)v78, &qword_1013DFA60);
  sub_1004C4938((uint64_t)v77, (uint64_t)v75, &qword_1013DFA60);
  sub_1004C4938((uint64_t)v78, (uint64_t)&v75[384], &qword_1013DFA60);
  sub_1004C4938((uint64_t)v77, (uint64_t)v79, &qword_1013DFA60);
  if (sub_100CF9A94((uint64_t)v79) == 1)
  {
    sub_1004B84A4(v34, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4(v66, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004C4938((uint64_t)&v75[384], (uint64_t)v76, &qword_1013DFA60);
    sub_1004C4938((uint64_t)v76, (uint64_t)v74, &qword_1013DFA60);
    if (sub_100CF9A94((uint64_t)v74) == 1)
    {
      sub_1004C4938((uint64_t)v75, (uint64_t)v72, &qword_1013DFA60);
      sub_100CF9AAC((uint64_t)v72);
      sub_1004B8460(v30, v40, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B8460(v36, v41, type metadata accessor for CRLBoardInsertStyleData);
      goto LABEL_44;
    }
LABEL_39:
    v42 = v63;
    memcpy(v74, v75, 0x300uLL);
    sub_100DDBFA4((uint64_t)v74);
    goto LABEL_19;
  }
  sub_1004C4938((uint64_t)v78, (uint64_t)v74, &qword_1013DFA60);
  if (sub_100CF9A94((uint64_t)v74) == 1)
  {
    sub_1004C4938((uint64_t)v77, (uint64_t)v76, &qword_1013DFA60);
    sub_1009B0AA0((uint64_t)v76);
    sub_1004B84A4(v67, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4(v66, type metadata accessor for CRLBoardInsertStyleData);
    sub_100CF9AAC((uint64_t)v77);
    goto LABEL_39;
  }
  sub_1004C4938((uint64_t)v77, (uint64_t)v71, &qword_1013DFA60);
  sub_1004C4938((uint64_t)v78, (uint64_t)v72, &qword_1013DFA60);
  memcpy(v82, v71, sizeof(v82));
  memcpy(v83, v72, sizeof(v83));
  sub_1004C4938((uint64_t)v77, (uint64_t)v76, &qword_1013DFA60);
  sub_1009B0AA0((uint64_t)v76);
  if ((sub_100CEF3BC((uint64_t)v82, (uint64_t)v83) & 1) != 0)
    v51 = sub_100C9E04C(v71[47], v73);
  else
    v51 = 0;
  v52 = v66;
  v53 = v67;
  sub_100CF9AAC((uint64_t)v78);
  sub_100CF9AAC((uint64_t)v77);
  sub_1004B84A4(v53, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004B84A4(v52, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004C4938((uint64_t)v75, (uint64_t)v70, &qword_1013DFA60);
  sub_100CF9AAC((uint64_t)v70);
  sub_1004B8460(v30, v40, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004B8460(v36, v41, type metadata accessor for CRLBoardInsertStyleData);
  v42 = v63;
  if ((v51 & 1) == 0)
    goto LABEL_20;
LABEL_44:
  v54 = sub_1004B804C(&qword_1013DFA50);
  CRRegister.wrappedValue.getter(v54);
  sub_1004C4938((uint64_t)v75, (uint64_t)v77, &qword_1013DFA48);
  CRRegister.wrappedValue.getter(v54);
  sub_1004C4938((uint64_t)v75, (uint64_t)v78, &qword_1013DFA48);
  sub_1004C4938((uint64_t)v77, (uint64_t)v75, &qword_1013DFA48);
  sub_1004C4938((uint64_t)v78, (uint64_t)&v75[384], &qword_1013DFA48);
  sub_1004C4938((uint64_t)v77, (uint64_t)v79, &qword_1013DFA48);
  if (sub_100CF9A94((uint64_t)v79) == 1)
  {
    sub_1004B84A4(v41, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4(v40, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004C4938((uint64_t)&v75[384], (uint64_t)v76, &qword_1013DFA48);
    sub_1004C4938((uint64_t)v76, (uint64_t)v74, &qword_1013DFA48);
    if (sub_100CF9A94((uint64_t)v74) == 1)
    {
      sub_1004C4938((uint64_t)v75, (uint64_t)v72, &qword_1013DFA48);
      sub_100CF9AAC((uint64_t)v72);
      v42 = v63;
      sub_1004B8460(v30, v63, type metadata accessor for CRLBoardInsertStyleData);
      v43 = v60;
      sub_1004B8460(v36, v60, type metadata accessor for CRLBoardInsertStyleData);
      goto LABEL_54;
    }
LABEL_49:
    v42 = v63;
    v43 = v60;
    memcpy(v74, v75, 0x300uLL);
    sub_100DDBFA4((uint64_t)v74);
    goto LABEL_21;
  }
  sub_1004C4938((uint64_t)v78, (uint64_t)v74, &qword_1013DFA48);
  if (sub_100CF9A94((uint64_t)v74) == 1)
  {
    sub_1004C4938((uint64_t)v77, (uint64_t)v76, &qword_1013DFA48);
    sub_1009B0AA0((uint64_t)v76);
    sub_1004B84A4(v41, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4(v40, type metadata accessor for CRLBoardInsertStyleData);
    sub_100CF9AAC((uint64_t)v77);
    goto LABEL_49;
  }
  sub_1004C4938((uint64_t)v77, (uint64_t)v71, &qword_1013DFA48);
  sub_1004C4938((uint64_t)v78, (uint64_t)v72, &qword_1013DFA48);
  memcpy(v80, v71, sizeof(v80));
  memcpy(v81, v72, sizeof(v81));
  sub_1004C4938((uint64_t)v77, (uint64_t)v76, &qword_1013DFA48);
  sub_1009B0AA0((uint64_t)v76);
  v55 = sub_100CEF3BC((uint64_t)v80, (uint64_t)v81);
  v42 = v63;
  if ((v55 & 1) != 0)
    v56 = sub_100C9E04C(v71[47], v73);
  else
    v56 = 0;
  sub_100CF9AAC((uint64_t)v78);
  sub_100CF9AAC((uint64_t)v77);
  sub_1004B84A4(v41, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004B84A4(v40, type metadata accessor for CRLBoardInsertStyleData);
  sub_1004C4938((uint64_t)v75, (uint64_t)v70, &qword_1013DFA48);
  sub_100CF9AAC((uint64_t)v70);
  sub_1004B8460(v30, v42, type metadata accessor for CRLBoardInsertStyleData);
  v43 = v60;
  sub_1004B8460(v36, v60, type metadata accessor for CRLBoardInsertStyleData);
  if ((v56 & 1) == 0)
    goto LABEL_22;
LABEL_54:
  v57 = sub_1004B804C(&qword_1013DFA78);
  CRRegister.wrappedValue.getter(v57);
  sub_1004C4938((uint64_t)v75, (uint64_t)v76, &qword_1013DFA70);
  CRRegister.wrappedValue.getter(v57);
  sub_1004C4938((uint64_t)v75, (uint64_t)v77, &qword_1013DFA70);
  sub_1004C4938((uint64_t)v76, (uint64_t)v75, &qword_1013DFA70);
  sub_1004C4938((uint64_t)v77, (uint64_t)&v75[888], &qword_1013DFA70);
  sub_1004C4938((uint64_t)v76, (uint64_t)v78, &qword_1013DFA70);
  if (sub_100784BF4((uint64_t)v78) == 1)
  {
    sub_1004B84A4(v43, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4(v42, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004C4938((uint64_t)&v75[888], (uint64_t)v79, &qword_1013DFA70);
    sub_1004C4938((uint64_t)v79, (uint64_t)v74, &qword_1013DFA70);
    if (sub_100784BF4((uint64_t)v74) == 1)
    {
      sub_1004C4938((uint64_t)v75, (uint64_t)v72, &qword_1013DFA70);
      sub_100CF97F0((uint64_t)v72);
      v44 = 1;
      return v44 & 1;
    }
  }
  else
  {
    sub_1004C4938((uint64_t)v77, (uint64_t)v72, &qword_1013DFA70);
    if (sub_100784BF4((uint64_t)v72) != 1)
    {
      sub_1004C4938((uint64_t)v76, (uint64_t)v68, &qword_1013DFA70);
      memcpy(v79, v68, sizeof(v79));
      sub_1004C4938((uint64_t)v77, (uint64_t)v69, &qword_1013DFA70);
      memcpy(v74, v69, 0x378uLL);
      sub_1004C4938((uint64_t)v76, (uint64_t)v70, &qword_1013DFA70);
      sub_100D52514((uint64_t)v70);
      v44 = sub_100D51F70(v79, v74);
      sub_100CF97F0((uint64_t)v77);
      sub_100CF97F0((uint64_t)v76);
      sub_1004B84A4(v43, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004B84A4(v42, type metadata accessor for CRLBoardInsertStyleData);
      sub_1004C4938((uint64_t)v75, (uint64_t)v71, &qword_1013DFA70);
      sub_100CF97F0((uint64_t)v71);
      return v44 & 1;
    }
    sub_1004C4938((uint64_t)v76, (uint64_t)v74, &qword_1013DFA70);
    sub_100D52514((uint64_t)v74);
    sub_1004B84A4(v43, type metadata accessor for CRLBoardInsertStyleData);
    sub_1004B84A4(v42, type metadata accessor for CRLBoardInsertStyleData);
    sub_100CF97F0((uint64_t)v76);
  }
  memcpy(v74, v75, sizeof(v74));
  sub_100DDBA10((uint64_t)v74);
LABEL_23:
  v44 = 0;
  return v44 & 1;
}

uint64_t sub_100DDAE78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  int *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v56 = type metadata accessor for CRLBoardCRDTData(0);
  v4 = __chkstk_darwin(v56);
  v60 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v59 = (uint64_t)&v55 - v7;
  v8 = __chkstk_darwin(v6);
  v57 = (uint64_t)&v55 - v9;
  v10 = __chkstk_darwin(v8);
  v58 = (uint64_t)&v55 - v11;
  v12 = __chkstk_darwin(v10);
  v63 = (uint64_t)&v55 - v13;
  v14 = __chkstk_darwin(v12);
  v64 = (uint64_t)&v55 - v15;
  v16 = __chkstk_darwin(v14);
  v62 = (uint64_t)&v55 - v17;
  v18 = __chkstk_darwin(v16);
  v61 = (uint64_t)&v55 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v55 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v55 - v23;
  v25 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)&v55 - v30;
  v32 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v32);
  v33 = a2;
  CRRegister.wrappedValue.getter(v32);
  LOBYTE(a2) = static UUID.== infix(_:_:)(v31);
  v34 = *(void (**)(char *, uint64_t))(v26 + 8);
  v35 = v33;
  v34(v29, v25);
  v34(v31, v25);
  sub_1004B8460(a1, (uint64_t)v24, type metadata accessor for CRLBoardCRDTData);
  sub_1004B8460(v33, (uint64_t)v22, type metadata accessor for CRLBoardCRDTData);
  if ((a2 & 1) == 0)
  {
    sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLBoardCRDTData);
    sub_1004B84A4((uint64_t)v24, type metadata accessor for CRLBoardCRDTData);
    v38 = v61;
    sub_1004B8460(a1, v61, type metadata accessor for CRLBoardCRDTData);
    v39 = v62;
    sub_1004B8460(v33, v62, type metadata accessor for CRLBoardCRDTData);
    goto LABEL_7;
  }
  v36 = (int *)v56;
  v37 = sub_100DD8F50((uint64_t)&v24[*(int *)(v56 + 20)], (uint64_t)&v22[*(int *)(v56 + 20)]);
  sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4((uint64_t)v24, type metadata accessor for CRLBoardCRDTData);
  v38 = v61;
  sub_1004B8460(a1, v61, type metadata accessor for CRLBoardCRDTData);
  v39 = v62;
  sub_1004B8460(v35, v62, type metadata accessor for CRLBoardCRDTData);
  if ((v37 & 1) == 0)
  {
LABEL_7:
    sub_1004B84A4(v39, type metadata accessor for CRLBoardCRDTData);
    sub_1004B84A4(v38, type metadata accessor for CRLBoardCRDTData);
    v44 = v64;
    sub_1004B8460(a1, v64, type metadata accessor for CRLBoardCRDTData);
    v45 = v63;
    sub_1004B8460(v35, v63, type metadata accessor for CRLBoardCRDTData);
    goto LABEL_8;
  }
  v40 = sub_1004B804C(&qword_1013E1980);
  CRRegister.wrappedValue.getter(v40);
  v42 = v65;
  v41 = v66;
  CRRegister.wrappedValue.getter(v40);
  v43 = v66;
  v44 = v64;
  if (v42 == v65 && v41 == v66)
  {
    swift_bridgeObjectRelease_n(v41, 2);
    sub_1004B84A4(v39, type metadata accessor for CRLBoardCRDTData);
    sub_1004B84A4(v38, type metadata accessor for CRLBoardCRDTData);
    sub_1004B8460(a1, v44, type metadata accessor for CRLBoardCRDTData);
    v45 = v63;
    sub_1004B8460(v35, v63, type metadata accessor for CRLBoardCRDTData);
    goto LABEL_13;
  }
  v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v41, v65, v66, 0);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v43);
  sub_1004B84A4(v39, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4(v38, type metadata accessor for CRLBoardCRDTData);
  sub_1004B8460(a1, v44, type metadata accessor for CRLBoardCRDTData);
  v45 = v63;
  sub_1004B8460(v35, v63, type metadata accessor for CRLBoardCRDTData);
  if ((v52 & 1) == 0)
  {
LABEL_8:
    sub_1004B84A4(v45, type metadata accessor for CRLBoardCRDTData);
    sub_1004B84A4(v44, type metadata accessor for CRLBoardCRDTData);
    v46 = v58;
    sub_1004B8460(a1, v58, type metadata accessor for CRLBoardCRDTData);
    v47 = v57;
    sub_1004B8460(v35, v57, type metadata accessor for CRLBoardCRDTData);
LABEL_9:
    sub_1004B84A4(v47, type metadata accessor for CRLBoardCRDTData);
    sub_1004B84A4(v46, type metadata accessor for CRLBoardCRDTData);
    v48 = v59;
    sub_1004B8460(a1, v59, type metadata accessor for CRLBoardCRDTData);
    v49 = v60;
    sub_1004B8460(v35, v60, type metadata accessor for CRLBoardCRDTData);
    goto LABEL_10;
  }
LABEL_13:
  v53 = sub_100DD982C(v44 + v36[7], v45 + v36[7]);
  sub_1004B84A4(v45, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4(v44, type metadata accessor for CRLBoardCRDTData);
  v46 = v58;
  sub_1004B8460(a1, v58, type metadata accessor for CRLBoardCRDTData);
  v47 = v57;
  sub_1004B8460(v35, v57, type metadata accessor for CRLBoardCRDTData);
  if ((v53 & 1) == 0)
    goto LABEL_9;
  v54 = sub_100DD9144(v46 + v36[8], v47 + v36[8]);
  sub_1004B84A4(v47, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4(v46, type metadata accessor for CRLBoardCRDTData);
  v48 = v59;
  sub_1004B8460(a1, v59, type metadata accessor for CRLBoardCRDTData);
  v49 = v60;
  sub_1004B8460(v35, v60, type metadata accessor for CRLBoardCRDTData);
  if ((v54 & 1) != 0)
  {
    v50 = sub_1005C8ED0(v48 + v36[9], v49 + v36[9]);
    goto LABEL_11;
  }
LABEL_10:
  v50 = 0;
LABEL_11:
  sub_1004B84A4(v49, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4(v48, type metadata accessor for CRLBoardCRDTData);
  return v50 & 1;
}

uint64_t sub_100DDB468(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *(_QWORD *)(a1 + 880);
  v2 = *(_QWORD *)(a1 + 888);
  v3 = *(_QWORD *)(a1 + 896);
  v4 = *(_QWORD *)(a1 + 904);
  v5 = *(_QWORD *)(a1 + 912);
  v6 = *(_QWORD *)(a1 + 920);
  v7 = *(_QWORD *)(a1 + 928);
  v8 = *(_QWORD *)(a1 + 936);
  v53 = *(_OWORD *)(a1 + 944);
  v52 = *(_OWORD *)(a1 + 960);
  v51 = *(_OWORD *)(a1 + 976);
  v50 = *(_OWORD *)(a1 + 992);
  v49 = *(_OWORD *)(a1 + 1008);
  v48 = *(_OWORD *)(a1 + 1024);
  v47 = *(_OWORD *)(a1 + 1040);
  v46 = *(_OWORD *)(a1 + 1056);
  v45 = *(_OWORD *)(a1 + 1072);
  v44 = *(_OWORD *)(a1 + 1088);
  v43 = *(_OWORD *)(a1 + 1104);
  v42 = *(_OWORD *)(a1 + 1120);
  v41 = *(_OWORD *)(a1 + 1136);
  v40 = *(_OWORD *)(a1 + 1152);
  v39 = *(_OWORD *)(a1 + 1168);
  v38 = *(_OWORD *)(a1 + 1184);
  v37 = *(_OWORD *)(a1 + 1200);
  v36 = *(_OWORD *)(a1 + 1216);
  v35 = *(_OWORD *)(a1 + 1232);
  v34 = *(_OWORD *)(a1 + 1248);
  v33 = *(_OWORD *)(a1 + 1264);
  v32 = *(_OWORD *)(a1 + 1280);
  v31 = *(_OWORD *)(a1 + 1296);
  v30 = *(_OWORD *)(a1 + 1312);
  v29 = *(_OWORD *)(a1 + 1328);
  v28 = *(_OWORD *)(a1 + 1344);
  v27 = *(_OWORD *)(a1 + 1360);
  v26 = *(_OWORD *)(a1 + 1376);
  v25 = *(_OWORD *)(a1 + 480);
  v23 = *(_OWORD *)(a1 + 448);
  v24 = *(_OWORD *)(a1 + 464);
  v21 = *(_OWORD *)(a1 + 416);
  v22 = *(_OWORD *)(a1 + 432);
  v19 = *(_OWORD *)(a1 + 384);
  v20 = *(_OWORD *)(a1 + 400);
  v17 = *(_OWORD *)(a1 + 352);
  v18 = *(_OWORD *)(a1 + 368);
  v16 = *(_OWORD *)(a1 + 336);
  v15 = *(_OWORD *)(a1 + 320);
  v14 = *(_OWORD *)(a1 + 304);
  v13 = *(_OWORD *)(a1 + 288);
  v12 = *(_OWORD *)(a1 + 272);
  v11 = *(_OWORD *)(a1 + 256);
  v10 = *(_OWORD *)(a1 + 240);
  sub_1004C497C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    *(_QWORD *)(a1 + 496));
  sub_1004C497C(v54, v2, v3, v4, v5, v6, v7, v8, v53, *((uint64_t *)&v53 + 1), v52, *((uint64_t *)&v52 + 1), v51, *((uint64_t *)&v51 + 1), v50, *((uint64_t *)&v50 + 1), v49, *((uint64_t *)&v49 + 1), v48,
    *((uint64_t *)&v48 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v43,
    *((uint64_t *)&v43 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26);
  return a1;
}

uint64_t sub_100DDBA10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v2 = *(_QWORD *)(a1 + 888);
  v3 = *(_QWORD *)(a1 + 896);
  v4 = *(_QWORD *)(a1 + 904);
  v5 = *(_QWORD *)(a1 + 912);
  v6 = *(_QWORD *)(a1 + 920);
  v7 = *(_QWORD *)(a1 + 928);
  v8 = *(_QWORD *)(a1 + 936);
  v9 = *(_QWORD *)(a1 + 944);
  v53 = *(_OWORD *)(a1 + 968);
  v54 = *(_OWORD *)(a1 + 952);
  v51 = *(_OWORD *)(a1 + 1000);
  v52 = *(_OWORD *)(a1 + 984);
  v49 = *(_OWORD *)(a1 + 1032);
  v50 = *(_OWORD *)(a1 + 1016);
  v48 = *(_OWORD *)(a1 + 1048);
  v47 = *(_OWORD *)(a1 + 1064);
  v46 = *(_OWORD *)(a1 + 1080);
  v45 = *(_OWORD *)(a1 + 1096);
  v44 = *(_OWORD *)(a1 + 1112);
  v43 = *(_OWORD *)(a1 + 1128);
  v42 = *(_OWORD *)(a1 + 1144);
  v41 = *(_OWORD *)(a1 + 1160);
  v40 = *(_OWORD *)(a1 + 1176);
  v39 = *(_OWORD *)(a1 + 1192);
  v38 = *(_OWORD *)(a1 + 1208);
  v37 = *(_OWORD *)(a1 + 1224);
  v36 = *(_OWORD *)(a1 + 1240);
  v35 = *(_OWORD *)(a1 + 1256);
  v34 = *(_OWORD *)(a1 + 1272);
  v33 = *(_OWORD *)(a1 + 1288);
  v32 = *(_OWORD *)(a1 + 1304);
  v31 = *(_OWORD *)(a1 + 1320);
  v30 = *(_OWORD *)(a1 + 1336);
  v29 = *(_OWORD *)(a1 + 1352);
  v28 = *(_OWORD *)(a1 + 1368);
  v27 = *(_OWORD *)(a1 + 1384);
  v25 = *(_OWORD *)(a1 + 464);
  v26 = *(_OWORD *)(a1 + 480);
  v23 = *(_OWORD *)(a1 + 432);
  v24 = *(_OWORD *)(a1 + 448);
  v21 = *(_OWORD *)(a1 + 400);
  v22 = *(_OWORD *)(a1 + 416);
  v19 = *(_OWORD *)(a1 + 368);
  v20 = *(_OWORD *)(a1 + 384);
  v18 = *(_OWORD *)(a1 + 352);
  v17 = *(_OWORD *)(a1 + 336);
  v16 = *(_OWORD *)(a1 + 320);
  v15 = *(_OWORD *)(a1 + 304);
  v14 = *(_OWORD *)(a1 + 288);
  v13 = *(_OWORD *)(a1 + 272);
  v12 = *(_OWORD *)(a1 + 256);
  v11 = *(_OWORD *)(a1 + 240);
  sub_1004C3D60(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    *(_QWORD *)(a1 + 496));
  sub_1004C3D60(v2, v3, v4, v5, v6, v7, v8, v9, v54, *((uint64_t *)&v54 + 1), v53, *((uint64_t *)&v53 + 1), v52, *((uint64_t *)&v52 + 1), v51, *((uint64_t *)&v51 + 1), v50, *((uint64_t *)&v50 + 1), v49,
    *((uint64_t *)&v49 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v43,
    *((uint64_t *)&v43 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27);
  return a1;
}

uint64_t sub_100DDBFA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v2 = *(_QWORD *)(a1 + 392);
  v40 = *(_QWORD *)(a1 + 384);
  v3 = *(_QWORD *)(a1 + 400);
  v4 = *(_QWORD *)(a1 + 408);
  v5 = *(_QWORD *)(a1 + 416);
  v6 = *(_QWORD *)(a1 + 424);
  v7 = *(_QWORD *)(a1 + 432);
  v8 = *(_QWORD *)(a1 + 440);
  v38 = *(_OWORD *)(a1 + 464);
  v39 = *(_OWORD *)(a1 + 448);
  v36 = *(_OWORD *)(a1 + 496);
  v37 = *(_OWORD *)(a1 + 480);
  v34 = *(_OWORD *)(a1 + 528);
  v35 = *(_OWORD *)(a1 + 512);
  v32 = *(_OWORD *)(a1 + 560);
  v33 = *(_OWORD *)(a1 + 544);
  v30 = *(_OWORD *)(a1 + 592);
  v31 = *(_OWORD *)(a1 + 576);
  v28 = *(_OWORD *)(a1 + 624);
  v29 = *(_OWORD *)(a1 + 608);
  v9 = *(_QWORD *)(a1 + 752);
  v10 = *(_QWORD *)(a1 + 760);
  v26 = *(_OWORD *)(a1 + 656);
  v27 = *(_OWORD *)(a1 + 640);
  v24 = *(_OWORD *)(a1 + 688);
  v25 = *(_OWORD *)(a1 + 672);
  v22 = *(_OWORD *)(a1 + 720);
  v23 = *(_OWORD *)(a1 + 704);
  v21 = *(_OWORD *)(a1 + 736);
  v19 = *(_OWORD *)(a1 + 336);
  v20 = *(_OWORD *)(a1 + 352);
  v17 = *(_OWORD *)(a1 + 304);
  v18 = *(_OWORD *)(a1 + 320);
  v15 = *(_OWORD *)(a1 + 272);
  v16 = *(_OWORD *)(a1 + 288);
  v13 = *(_OWORD *)(a1 + 240);
  v14 = *(_OWORD *)(a1 + 256);
  v12 = *(_OWORD *)(a1 + 208);
  sub_1004C3A28(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v12,
    *((uint64_t *)&v12 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    *(_QWORD *)(a1 + 368),
    *(_QWORD *)(a1 + 376));
  sub_1004C3A28(v40, v2, v3, v4, v5, v6, v7, v8, v39, *((uint64_t *)&v39 + 1), v38, *((uint64_t *)&v38 + 1), v37, *((uint64_t *)&v37 + 1), v36, *((uint64_t *)&v36 + 1), v35, *((uint64_t *)&v35 + 1), v34,
    *((uint64_t *)&v34 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v9,
    v10);
  return a1;
}

uint64_t sub_100DDC1AC(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v18 = *(_OWORD *)(a1 + 480);
  v16 = *(_OWORD *)(a1 + 448);
  v17 = *(_OWORD *)(a1 + 464);
  v14 = *(_OWORD *)(a1 + 416);
  v15 = *(_OWORD *)(a1 + 432);
  v12 = *(_OWORD *)(a1 + 384);
  v13 = *(_OWORD *)(a1 + 400);
  v10 = *(_OWORD *)(a1 + 352);
  v11 = *(_OWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 336);
  v8 = *(_OWORD *)(a1 + 320);
  v7 = *(_OWORD *)(a1 + 304);
  v6 = *(_OWORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 240);
  sub_1004C497C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

double sub_100DDC39C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void sub_100DDC3D4(void *a1)
{
  bzero(a1, 0x378uLL);
}

uint64_t sub_100DDC3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRLBoardScenesCRDTData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100DDC420(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[13];
  v10 = a1[14];
  v12 = a1[16];
  v13 = a1[17];
  swift_bridgeObjectRetain(a1[1]);
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t sub_100DDC4E8(uint64_t a1)
{
  sub_1004BE310(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100DDC514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B804C((uint64_t *)&unk_101414440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100DDC55C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B804C((uint64_t *)&unk_101414440);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100DDC5A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100DDC5D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_100DDC5E8, v1, 0);
}

uint64_t sub_100DDC5E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0[2] + 24);
  if (*(_QWORD *)(v1 + 16))
    __asm { BR              X16 }
  v2 = v0[3] + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration;
  v3 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for CRLRealTimeMessengerConfiguration(0) + 20)) < 16;
  v4 = swift_task_alloc(dword_1014144D4);
  v0[4] = v4;
  *(_QWORD *)v4 = v0;
  *(_QWORD *)(v4 + 8) = sub_100DDC728;
  v6 = v0[2];
  v5 = v0[3];
  *(_BYTE *)(v4 + 144) = v3;
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(v4 + 32) = v5;
  return swift_task_switch(sub_100DDFCB0, v5, 0);
}

uint64_t sub_100DDC728()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100DDC770(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  return swift_task_switch(sub_100DDC78C, v2, 0);
}

uint64_t sub_100DDC78C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  id v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD **)(v0 + 360);
  v2 = v1[2];
  if (v2)
  {
    if (qword_1013DD888 != -1)
      swift_once(&qword_1013DD888, sub_100A05DE4);
    swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 312, 0, 0);
    v3 = (void *)static OS_os_log.realTimeSync;
    v4 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v4, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    *(_QWORD *)(inited + 56) = &type metadata for UInt64;
    *(_QWORD *)(inited + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(inited + 32) = v2;
    *(_QWORD *)(inited + 96) = &type metadata for UInt64;
    *(_QWORD *)(inited + 104) = &protocol witness table for UInt64;
    *(_QWORD *)(inited + 72) = 0;
    v6 = v3;
    v8 = static os_log_type_t.default.getter(v7);
    sub_100A06EBC((uint64_t)v6, &_mh_execute_header, v8, "Received an encrypted message with version (%d) that is greater than the last supported version (%d) by this device. Dropping the message", 137, 2, inited);
    swift_setDeallocating(inited);
    v9 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 2, v9);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = v1[3];
    v12 = v1[4];
    v13 = (_QWORD *)swift_task_alloc(dword_1013E88DC);
    *(_QWORD *)(v0 + 384) = v13;
    *v13 = v0;
    v13[1] = sub_100DDC908;
    return sub_1006342CC(v11, v12);
  }
}

uint64_t sub_100DDC908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 384);
  v4[49] = a1;
  v4[50] = a2;
  v4[51] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100DDCCA4;
  else
    v6 = sub_100DDC978;
  return swift_task_switch(v6, v4[47], 0);
}

uint64_t sub_100DDC978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t ObjectType;
  int *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 376) + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
  v2 = type metadata accessor for CRLRealTimeMessage();
  v4 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 392);
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    swift_retain(v1);
    sub_1004BE310(v5, v4);
    v6 = sub_1008B92A0(v5, v4);
    if (!v3)
    {
      v7 = v6;
      swift_release(v1);
      goto LABEL_10;
    }
LABEL_5:
    sub_1004BBBC8(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
    swift_release(v1);
    if (qword_1013DD888 != -1)
      swift_once(&qword_1013DD888, sub_100A05DE4);
    swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 240, 0, 0);
    v11 = (void *)static OS_os_log.realTimeSync;
    v12 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v12, v0 + 128);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    swift_getErrorValue(v3, v0 + 336, v0 + 264);
    v14 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 280);
    v16 = v11;
    v17 = Error.publicDescription.getter(v14, v15);
    v19 = v18;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v20 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v20;
    *(_QWORD *)(inited + 32) = v17;
    *(_QWORD *)(inited + 40) = v19;
    swift_getErrorValue(v3, v0 + 352, v0 + 288);
    v21 = Error.fullDescription.getter(*(_QWORD *)(v0 + 296));
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 104) = v20;
    *(_QWORD *)(inited + 72) = v21;
    *(_QWORD *)(inited + 80) = v22;
    v23 = static os_log_type_t.error.getter(v21);
    sub_100A06EBC((uint64_t)v16, &_mh_execute_header, v23, "Failed to decrypt a real-time message with error %{public}@ <%@>", 64, 2, inited);
    swift_setDeallocating(inited);
    v24 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 2, v24);

    swift_errorRelease(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = v2;
  v9 = sub_1004B7878((unint64_t *)&unk_1014147B0, (uint64_t (*)(uint64_t))type metadata accessor for CRLRealTimeMessage, (uint64_t)&unk_100F13784);
  v10 = swift_retain(v1);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v8, v5, v4, v8, v9, v10);
  if (v3)
    goto LABEL_5;
  swift_release(v1);
  v7 = *(_QWORD *)(v0 + 344);
LABEL_10:
  *(_QWORD *)(v0 + 416) = v7;
  v26 = *(_QWORD *)(v0 + 376) + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
  Strong = swift_unknownObjectWeakLoadStrong(v26);
  *(_QWORD *)(v0 + 424) = Strong;
  if (!Strong)
  {
    v33 = *(_QWORD *)(v0 + 392);
    v32 = *(_QWORD *)(v0 + 400);
    swift_release(v7);
    sub_1004BBBC8(v33, v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v28 = *(_QWORD *)(v26 + 8);
  ObjectType = swift_getObjectType(Strong);
  v30 = *(int **)(v28 + 32);
  v34 = (int *)((char *)v30 + *v30);
  v31 = (_QWORD *)swift_task_alloc(v30[1]);
  *(_QWORD *)(v0 + 432) = v31;
  *v31 = v0;
  v31[1] = sub_100DDCE4C;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v34)(v7, *(_QWORD *)(v0 + 368), ObjectType, v28);
}

uint64_t sub_100DDCCA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 408);
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 240, 0, 0);
  v2 = (void *)static OS_os_log.realTimeSync;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 128);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  swift_getErrorValue(v1, v0 + 336, v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v7 = v2;
  v8 = Error.publicDescription.getter(v5, v6);
  v10 = v9;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v11 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v10;
  swift_getErrorValue(v1, v0 + 352, v0 + 288);
  v12 = Error.fullDescription.getter(*(_QWORD *)(v0 + 296));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v11;
  *(_QWORD *)(inited + 72) = v12;
  *(_QWORD *)(inited + 80) = v13;
  v14 = static os_log_type_t.error.getter(v12);
  sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v14, "Failed to decrypt a real-time message with error %{public}@ <%@>", 64, 2, inited);
  swift_setDeallocating(inited);
  v15 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v15);

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDCE4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 376);
    v5 = sub_100DDCF00;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 376);
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 424));
    v5 = sub_100DDCEC0;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100DDCEC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 416));
  sub_1004BBBC8(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDCF00()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 416));
  sub_1004BBBC8(v3, v2);
  swift_unknownObjectRelease(v1);
  v4 = *(_QWORD *)(v0 + 440);
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 240, 0, 0);
  v5 = (void *)static OS_os_log.realTimeSync;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v6, v0 + 128);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  swift_getErrorValue(v4, v0 + 336, v0 + 264);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 280);
  v10 = v5;
  v11 = Error.publicDescription.getter(v8, v9);
  v13 = v12;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v14 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v14;
  *(_QWORD *)(inited + 32) = v11;
  *(_QWORD *)(inited + 40) = v13;
  swift_getErrorValue(v4, v0 + 352, v0 + 288);
  v15 = Error.fullDescription.getter(*(_QWORD *)(v0 + 296));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v14;
  *(_QWORD *)(inited + 72) = v15;
  *(_QWORD *)(inited + 80) = v16;
  v17 = static os_log_type_t.error.getter(v15);
  sub_100A06EBC((uint64_t)v10, &_mh_execute_header, v17, "Failed to decrypt a real-time message with error %{public}@ <%@>", 64, 2, inited);
  swift_setDeallocating(inited);
  v18 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v18);

  swift_errorRelease(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDD0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3[70] = v2;
  v3[69] = a2;
  v3[68] = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v3[71] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[72] = v5;
  v3[73] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v3[74] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[75] = v7;
  v3[76] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTimeInterval(0);
  v3[77] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[78] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[79] = swift_task_alloc(v10);
  v3[80] = swift_task_alloc(v10);
  v11 = type metadata accessor for DispatchTime(0);
  v3[81] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[82] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[83] = swift_task_alloc(v13);
  v3[84] = swift_task_alloc(v13);
  v14 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v3[85] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[86] = v15;
  v3[87] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for GroupSessionMessenger.DeliveryMode(0);
  v3[88] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[89] = v17;
  v3[90] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v3[91] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[92] = v19;
  v20 = *(_QWORD *)(v19 + 64);
  v3[93] = v20;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[94] = swift_task_alloc(v21);
  v3[95] = swift_task_alloc(v21);
  v3[96] = swift_task_alloc(v21);
  return swift_task_switch(sub_100DDD260, v2, 0);
}

uint64_t sub_100DDD260()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, __n128);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _UNKNOWN **v39;
  uint64_t ObjectType;
  unint64_t (__cdecl *v41)();
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD *, uint64_t);
  void (*v55)(uint64_t, _UNKNOWN **, __n128);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  __n128 v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  __n128 v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  char v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  void (*v97)(uint64_t, _UNKNOWN **, __n128);
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, __n128);
  uint64_t v110;
  _UNKNOWN **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v1 = v0[96];
  v2 = v0[92];
  v3 = v0[91];
  v4 = v0[70];
  v5 = v0[68];
  v6 = OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID;
  v0[97] = OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v7(v1, v5 + v6, v3);
  v8 = (_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_chunkedMessageBufferWrappers);
  swift_beginAccess(v8, v0 + 45, 0, 0);
  v10 = *v8;
  if (!*(_QWORD *)(*v8 + 16))
    goto LABEL_5;
  v11 = v0[96];
  swift_bridgeObjectRetain(*v8);
  v12 = sub_100842EFC(v11);
  if ((v13 & 1) == 0)
  {
    v9 = swift_bridgeObjectRelease(v10);
LABEL_5:
    v24 = v0[90];
    v25 = v0[89];
    v26 = v0[88];
    v27 = v0[70];
    v28 = *(void (**)(uint64_t, uint64_t, __n128))(v0[92] + 8);
    v28(v0[96], v0[91], v9);
    v29 = v27 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v27 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration, v26);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v24, v26);
    if (v30 == enum case for GroupSessionMessenger.DeliveryMode.reliable(_:))
    {
      v31 = v0[68];
      v32 = type metadata accessor for CRLContiguousChunkedRealTimeMessageBuffer(0);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      swift_retain(v31);
      v38 = sub_10070D4B0(v33);
      v39 = &off_101279CE0;
    }
    else
    {
      if (v30 != enum case for GroupSessionMessenger.DeliveryMode.unreliable(_:))
        return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000048, 0x8000000101012180, "Freeform/CRLRealTimeMessengerImplementation.swift", 49, 2, 229, 0);
      v34 = v0[68];
      v35 = type metadata accessor for CRLUnorderedChunkedRealTimeMessageBuffer(0);
      swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      swift_retain(v34);
      v38 = sub_100A25F54(v36);
      swift_release(v34);
      v39 = &off_1012917B0;
    }
    v0[102] = v38;
    ObjectType = swift_getObjectType(v38);
    v41 = (unint64_t (__cdecl *)())v39[2];
    swift_unknownObjectRetain(v38);
    v42 = v41();
    swift_unknownObjectRelease(v38);
    if ((v42 & 1) != 0)
    {
      v43 = (_QWORD *)swift_task_alloc(dword_1014144C4);
      v0[103] = v43;
      *v43 = v0;
      v43[1] = sub_100DDE18C;
      return sub_100DDF0B4(v38, (uint64_t)v39, v0[69]);
    }
    v112 = v0[95];
    v103 = v0[93];
    v101 = v0[94];
    v102 = v0[92];
    v113 = v0[91];
    v114 = ObjectType;
    v111 = v39;
    v44 = v0[87];
    v115 = v0[86];
    v45 = v0[85];
    v89 = v0[84];
    v109 = v28;
    v46 = v0[83];
    v90 = v0[82];
    v92 = v0[81];
    v95 = (_QWORD *)v0[80];
    v96 = (_QWORD *)v0[79];
    v93 = v0[78];
    v94 = v0[77];
    v107 = v0[75];
    v108 = v0[74];
    v104 = v0[73];
    v105 = v0[72];
    v106 = v0[71];
    v99 = v0[76];
    v100 = v0[70];
    sub_100DE0E8C();
    v0[66] = _swiftEmptyArrayStorage;
    v47 = sub_1004B7878(&qword_1014147C8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
    v98 = v7;
    v48 = sub_1004B804C(&qword_1014147D0);
    v49 = sub_1005FC154(&qword_1014147D8, &qword_1014147D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 66, v48, v49, v45, v47);
    v110 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v44, 0);
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v44, v45);
    v116 = swift_getObjectType(v110);
    static DispatchTime.now()(v50);
    v51 = v29 + *(int *)(type metadata accessor for CRLRealTimeMessengerConfiguration(0) + 28);
    DispatchTime.advanced(by:)(v51);
    v91 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v91(v46, v92);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v93 + 104))(v95, enum case for DispatchTimeInterval.never(_:), v94);
    *v96 = 0;
    v52 = enum case for DispatchTimeInterval.nanoseconds(_:);
    v53 = type metadata accessor for DispatchTimeInterval(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(v96, v52, v53);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v89, v95, v96, v116);
    v54 = *(void (**)(_QWORD *, uint64_t))(v93 + 8);
    v54(v96, v94);
    v54(v95, v94);
    v91(v89, v92);
    v55 = (void (*)(uint64_t, _UNKNOWN **, __n128))v111[1];
    v97 = v55;
    swift_unknownObjectRetain(v38);
    ((void (*)(uint64_t, _UNKNOWN **))v55)(v114, v111);
    v56 = swift_unknownObjectRelease(v38);
    static DispatchQoS.userInitiated.getter(v56);
    v57 = swift_allocObject(&unk_1012A6DD0, 24, 7);
    swift_weakInit(v57 + 16, v100);
    v98(v101, v112, v113);
    v58 = *(unsigned __int8 *)(v102 + 80);
    v59 = (v58 + 24) & ~v58;
    v60 = swift_allocObject(&unk_1012A6DF8, v59 + v103, v58 | 7);
    *(_QWORD *)(v60 + 16) = v57;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v60 + v59, v101, v113);
    v0[43] = sub_100DE0F60;
    v0[44] = v60;
    v0[39] = _NSConcreteStackBlock;
    v0[40] = *(_QWORD *)"";
    v0[41] = sub_1005D2FC0;
    v0[42] = &unk_1012A6E10;
    v61 = _Block_copy(v0 + 39);
    swift_retain(v57);
    sub_100DDF008();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v99, v104, v61, v116);
    _Block_release(v61);
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v99, v108);
    v62 = v0[44];
    swift_release(v57);
    swift_release(v62);
    v63 = type metadata accessor for CRLChunkedMessageBufferWrapper();
    v64 = (_QWORD *)swift_allocObject(v63, 40, 7);
    v64[2] = v38;
    v64[3] = v111;
    v64[4] = v110;
    swift_unknownObjectRetain(v38);
    swift_unknownObjectRetain(v110);
    v65 = swift_retain(v64);
    v97(v114, v111, v65);
    swift_beginAccess(v8, v0 + 57, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v118 = *v8;
    *v8 = 0x8000000000000000;
    sub_100826F54((uint64_t)v64, v101, isUniquelyReferenced_nonNull_native);
    v67 = *v8;
    *v8 = v118;
    v68 = swift_bridgeObjectRelease(v67);
    v109(v101, v113, v68);
    swift_endAccess(v0 + 57);
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease(v38);
    swift_unknownObjectRelease(v110);
    v69 = swift_release(v64);
    v109(v112, v113, v69);
    goto LABEL_17;
  }
  v14 = v0[96];
  v15 = v0[92];
  v16 = v0[91];
  v17 = v0[68];
  v18 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v12);
  v0[98] = v18;
  swift_retain(v18);
  v19 = swift_bridgeObjectRelease(v10);
  (*(void (**)(uint64_t, uint64_t, __n128))(v15 + 8))(v14, v16, v19);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = *(_QWORD *)(v18 + 24);
  v22 = swift_getObjectType(v20);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
  swift_retain(v18);
  swift_unknownObjectRetain(v20);
  v23(v17, v22, v21);
  swift_unknownObjectRelease(v20);
  v70 = *(_QWORD *)(v18 + 16);
  v71 = *(_QWORD *)(v18 + 24);
  v72 = swift_getObjectType(v70);
  v73 = *(uint64_t (**)(uint64_t, uint64_t))(v71 + 16);
  swift_unknownObjectRetain(v70);
  v74 = v73(v72, v71);
  swift_unknownObjectRelease(v70);
  if ((v74 & 1) == 0)
  {
    swift_release_n(v18, 2, v75);
LABEL_17:
    v80 = v0[95];
    v81 = v0[94];
    v82 = v0[90];
    v83 = v0[87];
    v84 = v0[84];
    v85 = v0[83];
    v86 = v0[80];
    v87 = v0[79];
    v88 = v0[76];
    v117 = v0[73];
    swift_task_dealloc(v0[96]);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v117);
    return ((uint64_t (*)(void))v0[1])();
  }
  v76 = *(_QWORD *)(v18 + 16);
  v0[99] = v76;
  v77 = *(_QWORD *)(v18 + 24);
  v78 = dword_1014144C4;
  swift_unknownObjectRetain(v76);
  v79 = (_QWORD *)swift_task_alloc(v78);
  v0[100] = v79;
  *v79 = v0;
  v79[1] = sub_100DDE044;
  return sub_100DDF0B4(v76, v77, v0[69]);
}

uint64_t sub_100DDE044()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(__n128);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 800);
  *(_QWORD *)(*v1 + 808) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 792);
  v5 = *(_QWORD *)(v2 + 560);
  swift_unknownObjectRelease(v4);
  if (v0)
    v6 = sub_100DDE2C4;
  else
    v6 = sub_100DDE0B4;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100DDE0B4(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  swift_release_n(*(_QWORD *)(v1 + 784), 2, a1);
  v2 = *(_QWORD *)(v1 + 760);
  v3 = *(_QWORD *)(v1 + 752);
  v4 = *(_QWORD *)(v1 + 720);
  v5 = *(_QWORD *)(v1 + 696);
  v6 = *(_QWORD *)(v1 + 672);
  v7 = *(_QWORD *)(v1 + 664);
  v8 = *(_QWORD *)(v1 + 640);
  v9 = *(_QWORD *)(v1 + 632);
  v10 = *(_QWORD *)(v1 + 608);
  v12 = *(_QWORD *)(v1 + 584);
  swift_task_dealloc(*(_QWORD *)(v1 + 768));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100DDE18C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 824);
  *(_QWORD *)(*v1 + 832) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100DDE86C;
  else
    v4 = sub_100DDE1F0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 560), 0);
}

uint64_t sub_100DDE1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 816));
  v1 = *(_QWORD *)(v0 + 760);
  v2 = *(_QWORD *)(v0 + 752);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 696);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 640);
  v8 = *(_QWORD *)(v0 + 632);
  v9 = *(_QWORD *)(v0 + 608);
  v11 = *(_QWORD *)(v0 + 584);
  swift_task_dealloc(*(_QWORD *)(v0 + 768));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDE2C4(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  swift_release_n(*(_QWORD *)(v1 + 784), 2, a1);
  v2 = *(_QWORD *)(v1 + 808);
  *(_QWORD *)(v1 + 536) = v2;
  swift_errorRetain(v2);
  v3 = sub_1004B804C(&qword_1013E0210);
  if ((swift_dynamicCast(v1 + 840, v1 + 536, v3, &type metadata for CRLChunkedRealTimeMessageBufferError, 0) & 1) != 0)
  {
    swift_errorRelease(v2);
    __asm { BR              X10 }
  }
  swift_errorRelease(*(_QWORD *)(v1 + 536));
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v1 + 408, 0, 0);
  v4 = (id)static OS_os_log.realTimeSync;
  v5 = static os_log_type_t.error.getter(v4);
  sub_100A06EBC((uint64_t)v4, &_mh_execute_header, v5, "Encountered an error while handling a real-time chunked message", 63, 2, (uint64_t)_swiftEmptyArrayStorage);

  swift_errorRelease(v2);
  v6 = *(_QWORD *)(v1 + 760);
  v7 = *(_QWORD *)(v1 + 752);
  v8 = *(_QWORD *)(v1 + 720);
  v9 = *(_QWORD *)(v1 + 696);
  v10 = *(_QWORD *)(v1 + 672);
  v11 = *(_QWORD *)(v1 + 664);
  v12 = *(_QWORD *)(v1 + 640);
  v13 = *(_QWORD *)(v1 + 632);
  v14 = *(_QWORD *)(v1 + 608);
  v16 = *(_QWORD *)(v1 + 584);
  swift_task_dealloc(*(_QWORD *)(v1 + 768));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100DDE86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 816));
  v1 = *(_QWORD *)(v0 + 832);
  *(_QWORD *)(v0 + 536) = v1;
  swift_errorRetain(v1);
  v2 = sub_1004B804C(&qword_1013E0210);
  if ((swift_dynamicCast(v0 + 840, v0 + 536, v2, &type metadata for CRLChunkedRealTimeMessageBufferError, 0) & 1) != 0)
  {
    swift_errorRelease(v1);
    __asm { BR              X10 }
  }
  swift_errorRelease(*(_QWORD *)(v0 + 536));
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 408, 0, 0);
  v3 = (id)static OS_os_log.realTimeSync;
  v4 = static os_log_type_t.error.getter(v3);
  sub_100A06EBC((uint64_t)v3, &_mh_execute_header, v4, "Encountered an error while handling a real-time chunked message", 63, 2, (uint64_t)_swiftEmptyArrayStorage);

  swift_errorRelease(v1);
  v5 = *(_QWORD *)(v0 + 760);
  v6 = *(_QWORD *)(v0 + 752);
  v7 = *(_QWORD *)(v0 + 720);
  v8 = *(_QWORD *)(v0 + 696);
  v9 = *(_QWORD *)(v0 + 672);
  v10 = *(_QWORD *)(v0 + 664);
  v11 = *(_QWORD *)(v0 + 640);
  v12 = *(_QWORD *)(v0 + 632);
  v13 = *(_QWORD *)(v0 + 608);
  v15 = *(_QWORD *)(v0 + 584);
  swift_task_dealloc(*(_QWORD *)(v0 + 768));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100DDEE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  double result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v19[24];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v7);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v19, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = Strong;
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a2, v4);
    v14 = *(unsigned __int8 *)(v5 + 80);
    v15 = (v14 + 40) & ~v14;
    v16 = (char *)swift_allocObject(&unk_1012A6E48, v15 + v6, v14 | 7);
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0;
    *((_QWORD *)v16 + 4) = v12;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v16[v15], &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v4);
    v17 = sub_100521B98((uint64_t)v9, (uint64_t)&unk_1014147E8, (uint64_t)v16);
    *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  }
  return result;
}

uint64_t sub_100DDEF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return swift_task_switch(sub_100DDEF90, a4, 0);
}

uint64_t sub_100DDEF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;

  v1 = *(_QWORD *)(v0 + 48);
  swift_beginAccess(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_chunkedMessageBufferWrappers, v0 + 16, 33, 0);
  v2 = sub_100847498(v1);
  swift_endAccess(v0 + 16);
  v3 = swift_release(v2);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

uint64_t sub_100DDF008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v3 = sub_1005FC154((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_100DDF0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  return swift_task_switch(sub_100DDF128, v3, 0);
}

uint64_t sub_100DDF128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __n128 v18;
  void (*v19)(uint64_t, uint64_t, __n128);
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t Strong;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  int *v54;

  v1 = *(_QWORD *)(v0 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 80));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1) & 1) == 0)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_processCompletedBuffer(_:sender:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/RealTime/CRLRealTimeMessengerImplementation.swift", 108, 2, 292, "Received an incomplete buffer", 29, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_processCompletedBuffer(_:sender:)", 34, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/RealTime/CRLRealTimeMessengerImplementation.swift", 108, 2u, 292, (uint64_t)"Received an incomplete buffer", 29, 2u);
  }
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(ObjectType, v4);
  v7 = v6;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  v51 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v51(ObjectType, v4);
  v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_chunkedMessageBufferWrappers);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_chunkedMessageBufferWrappers, v0 + 16, 0, 0);
  v9 = *v8;
  v10 = *(_QWORD *)(v0 + 136);
  v50 = v5;
  v53 = v0 + 40;
  if (*(_QWORD *)(*v8 + 16))
  {
    swift_bridgeObjectRetain(v9);
    v11 = sub_100842EFC(v10);
    v12 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 120);
    v15 = ObjectType;
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v11);
      swift_retain(v17);
      v18 = swift_bridgeObjectRelease(v9);
      v19 = *(void (**)(uint64_t, uint64_t, __n128))(v13 + 8);
      v19(v12, v14, v18);
      v20 = *(_QWORD *)(v17 + 32);
      swift_unknownObjectRetain(v20);
      swift_release(v17);
      swift_getObjectType(v20);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v20);
    }
    else
    {
      swift_bridgeObjectRelease(v9);
      v19 = *(void (**)(uint64_t, uint64_t, __n128))(v13 + 8);
      ((void (*)(uint64_t, uint64_t))v19)(v12, v14);
    }
  }
  else
  {
    v15 = ObjectType;
    v19 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v0 + 120) + 8);
    ((void (*)(uint64_t, _QWORD))v19)(v10, *(_QWORD *)(v0 + 112));
  }
  v21 = v51;
  v22 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 112);
  v52 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 88);
  v21(v15, v24);
  swift_beginAccess(v8, v53, 33, 0);
  v25 = sub_100847498(v22);
  ((void (*)(uint64_t, uint64_t))v19)(v22, v23);
  swift_endAccess(v53);
  v26 = swift_release(v25);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v24 + 24))(v15, v24, v26);
  v28 = *(_QWORD *)(v52 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
  if ((v27 & 1) != 0)
  {
    v29 = type metadata accessor for CRLEncryptedRealTimeMessage();
    if (*(_BYTE *)(v28 + 16) == 1)
    {
      swift_retain(v28);
      sub_1004BE310(v50, v7);
      v30 = sub_100DAF700(v50, v7);
      swift_release(v28);
    }
    else
    {
      v34 = v29;
      v35 = sub_1004B7878(&qword_1013EDB50, (uint64_t (*)(uint64_t))type metadata accessor for CRLEncryptedRealTimeMessage, (uint64_t)&unk_100F3915C);
      v36 = swift_retain(v28);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v34, v50, v7, v34, v35, v36);
      swift_release(v28);
      v30 = *(_QWORD **)(v0 + 72);
    }
    *(_QWORD *)(v0 + 160) = v30;
    v37 = (_QWORD *)swift_task_alloc(dword_1014144B4);
    *(_QWORD *)(v0 + 168) = v37;
    *v37 = v0;
    v37[1] = sub_100DDF690;
    v38 = *(_QWORD *)(v0 + 104);
    v37[46] = *(_QWORD *)(v0 + 96);
    v37[47] = v38;
    v37[45] = v30;
    return swift_task_switch(sub_100DDC78C, v38, 0);
  }
  else
  {
    v31 = type metadata accessor for CRLRealTimeMessage();
    if (*(_BYTE *)(v28 + 16) == 1)
    {
      v32 = v50;
      sub_1004BE310(v50, v7);
      swift_retain(v28);
      v33 = sub_1008B92A0(v50, v7);
      swift_release(v28);
    }
    else
    {
      v40 = v31;
      v41 = sub_1004B7878((unint64_t *)&unk_1014147B0, (uint64_t (*)(uint64_t))type metadata accessor for CRLRealTimeMessage, (uint64_t)&unk_100F13784);
      v42 = swift_retain(v28);
      v32 = v50;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v40, v50, v7, v40, v41, v42);
      swift_release(v28);
      v33 = *(_QWORD *)(v0 + 64);
    }
    *(_QWORD *)(v0 + 176) = v33;
    v43 = *(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
    Strong = swift_unknownObjectWeakLoadStrong(v43);
    *(_QWORD *)(v0 + 184) = Strong;
    if (Strong)
    {
      v45 = *(_QWORD *)(v43 + 8);
      v46 = swift_getObjectType(Strong);
      v47 = *(int **)(v45 + 32);
      v54 = (int *)((char *)v47 + *v47);
      v48 = (_QWORD *)swift_task_alloc(v47[1]);
      *(_QWORD *)(v0 + 192) = v48;
      *v48 = v0;
      v48[1] = sub_100DDF738;
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v54)(v33, *(_QWORD *)(v0 + 96), v46, v45);
    }
    else
    {
      swift_release(v33);
      sub_1004BBBC8(v32, v7);
      v49 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(*(_QWORD *)(v0 + 136));
      swift_task_dealloc(v49);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_100DDF690()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return swift_task_switch(sub_100DDF6E8, v1, 0);
}

uint64_t sub_100DDF6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 160);
  sub_1004BBBC8(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDF738()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 104);
    v5 = sub_100DDF800;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 104);
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 184));
    v5 = sub_100DDF7AC;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100DDF7AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 176));
  sub_1004BBBC8(v1, v2);
  v3 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDF800()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 176));
  sub_1004BBBC8(v3, v2);
  swift_unknownObjectRelease(v1);
  v4 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDF864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_100DDF87C, v1, 0);
}

uint64_t sub_100DDF87C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0[4] + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
  v0[2] = v0[3];
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    swift_retain(v1);
    v2 = sub_1008B8734();
  }
  else
  {
    v4 = type metadata accessor for CRLRealTimeMessage();
    v5 = sub_1004B7878(&qword_1013EDB60, (uint64_t (*)(uint64_t))type metadata accessor for CRLRealTimeMessage, (uint64_t)&unk_100F1375C);
    v6 = swift_retain(v1);
    v2 = (_QWORD *)dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5, v6);
  }
  v7 = (uint64_t)v2;
  v8 = v3;
  swift_release(v1);
  v0[5] = v8;
  v0[6] = v7;
  v9 = (_QWORD *)swift_task_alloc(dword_1013E88D4);
  v0[7] = v9;
  *v9 = v0;
  v9[1] = sub_100DDF9A4;
  return sub_100633EDC(v7, v8);
}

uint64_t sub_100DDF9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 56);
  v4[8] = a1;
  v4[9] = a2;
  v4[10] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100DDFB44;
  else
    v6 = sub_100DDFA14;
  return swift_task_switch(v6, v4[4], 0);
}

void sub_100DDFA14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[8];
  v1 = v0[9];
  v3 = type metadata accessor for CRLEncryptedRealTimeMessage();
  v4 = (_QWORD *)swift_allocObject(v3, 40, 7);
  v0[11] = v4;
  v4[2] = 0;
  v4[3] = v2;
  v4[4] = v1;
  __asm { BR              X10 }
}

uint64_t sub_100DDFA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v3 = BYTE6(v0);
  v4 = BYTE6(v0) + 24;
  if (__OFADD__(v3, 24))
  {
    __break(1u);
    JUMPOUT(0x100DDFB2CLL);
  }
  v5 = *(_QWORD *)(v2 + 32) + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration;
  v6 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CRLRealTimeMessengerConfiguration(0) + 20)) < v4;
  v7 = swift_task_alloc(dword_1014144DC);
  *(_QWORD *)(v2 + 96) = v7;
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = sub_100DDFB78;
  v8 = *(_QWORD *)(v2 + 32);
  *(_BYTE *)(v7 + 144) = v6;
  *(_QWORD *)(v7 + 24) = v1;
  *(_QWORD *)(v7 + 32) = v8;
  return swift_task_switch(sub_100DE032C, v8, 0);
}

uint64_t sub_100DDFB44()
{
  uint64_t v0;

  sub_1004BBBC8(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDFB78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100DDFC38;
  else
    v4 = sub_100DDFBDC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_100DDFBDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 88));
  sub_1004BBBC8(v1, v2);
  sub_1004BBBC8(v3, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDFC38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 88));
  sub_1004BBBC8(v1, v2);
  sub_1004BBBC8(v3, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DDFC94(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 144) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v2;
  return swift_task_switch(sub_100DDFCB0, v2, 0);
}

uint64_t sub_100DDFCB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t ObjectType;
  int *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;

  v1 = *(_QWORD *)(v0 + 32);
  if ((*(_BYTE *)(v0 + 144) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 24);
    if (*(_BYTE *)(v2 + 16) == 1)
    {
      swift_retain(v2);
      v3 = sub_1008B8734();
    }
    else
    {
      v12 = type metadata accessor for CRLRealTimeMessage();
      v13 = sub_1004B7878(&qword_1013EDB60, (uint64_t (*)(uint64_t))type metadata accessor for CRLRealTimeMessage, (uint64_t)&unk_100F1375C);
      v14 = swift_retain(v2);
      v3 = (_QWORD *)dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 16, v12, v13, v14);
    }
    v15 = v3;
    v16 = v4;
    swift_release(v2);
    *(_QWORD *)(v0 + 64) = v16;
    *(_QWORD *)(v0 + 72) = v15;
    type metadata accessor for CRLRealTimeMessengerConfiguration(0);
    __asm { BR              X12 }
  }
  v5 = v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper);
  *(_QWORD *)(v0 + 40) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v7 = *(_QWORD *)(v5 + 8);
  ObjectType = swift_getObjectType(Strong);
  v9 = *(int **)(v7 + 8);
  v17 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v0 + 48) = v10;
  *v10 = v0;
  v10[1] = sub_100DE0064;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v17)(*(_QWORD *)(v0 + 24), ObjectType, v7);
}

uint64_t sub_100DE0064()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100DE02DC, *(_QWORD *)(v3 + 32), 0);
  swift_unknownObjectRelease(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100DE00D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v3);
  v4 = v2[15];
  if (v0)
  {
    v5 = v2[4];
    swift_bridgeObjectRelease(v2[10]);
    swift_unknownObjectRelease(v4);
    v6 = sub_100DE02A0;
  }
  else
  {
    v5 = v2[4];
    swift_unknownObjectRelease(v2[15]);
    v6 = sub_100DE0168;
  }
  return swift_task_switch(v6, v5, 0);
}

void sub_100DE0168()
{
  uint64_t v0;
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  int *v10;
  _QWORD *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  for (i = *(_QWORD *)(v0 + 104); ; i = v4)
  {
    swift_release(i);
    v2 = *(_QWORD *)(v0 + 112);
    if (v2 == *(_QWORD *)(v0 + 88))
    {
      v6 = *(_QWORD *)(v0 + 72);
      v7 = *(_QWORD *)(v0 + 64);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
      sub_1004BBBC8(v6, v7);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v3 = *(_QWORD *)(v0 + 80);
    if ((v3 & 0xC000000000000001) != 0)
    {
      v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(*(_QWORD *)(v0 + 112), v3);
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 8 * v2 + 32);
      swift_retain(v4);
    }
    *(_QWORD *)(v0 + 104) = v4;
    *(_QWORD *)(v0 + 112) = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + *(_QWORD *)(v0 + 96));
    *(_QWORD *)(v0 + 120) = Strong;
    if (Strong)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + *(_QWORD *)(v0 + 96) + 8);
      ObjectType = swift_getObjectType(Strong);
      v10 = *(int **)(v8 + 24);
      v12 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
      v11 = (_QWORD *)swift_task_alloc(v10[1]);
      *(_QWORD *)(v0 + 128) = v11;
      *v11 = v0;
      v11[1] = sub_100DE00D8;
      v12(v4, ObjectType, v8);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100DE02A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  sub_1004BBBC8(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DE02DC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100DE0310(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 144) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v2;
  return swift_task_switch(sub_100DE032C, v2, 0);
}

uint64_t sub_100DE032C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t ObjectType;
  int *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;

  v1 = *(_QWORD *)(v0 + 32);
  if ((*(_BYTE *)(v0 + 144) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder);
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 24);
    if (*(_BYTE *)(v2 + 16) == 1)
    {
      swift_retain(v2);
      v3 = sub_100DAF018();
    }
    else
    {
      v12 = type metadata accessor for CRLEncryptedRealTimeMessage();
      v13 = sub_1004B7878(&qword_1013EDB58, (uint64_t (*)(uint64_t))type metadata accessor for CRLEncryptedRealTimeMessage, (uint64_t)&unk_100F39134);
      v14 = swift_retain(v2);
      v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 16, v12, v13, v14);
    }
    v15 = v3;
    v16 = v4;
    swift_release(v2);
    *(_QWORD *)(v0 + 64) = v16;
    *(_QWORD *)(v0 + 72) = v15;
    type metadata accessor for CRLRealTimeMessengerConfiguration(0);
    __asm { BR              X12 }
  }
  v5 = v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper);
  *(_QWORD *)(v0 + 40) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v7 = *(_QWORD *)(v5 + 8);
  ObjectType = swift_getObjectType(Strong);
  v9 = *(int **)(v7 + 16);
  v17 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v0 + 48) = v10;
  *v10 = v0;
  v10[1] = sub_100DE06E0;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v17)(*(_QWORD *)(v0 + 24), ObjectType, v7);
}

uint64_t sub_100DE06E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100DE1124, *(_QWORD *)(v3 + 32), 0);
  swift_unknownObjectRelease(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100DE0754()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 120);
  if (v0)
  {
    v5 = *(_QWORD *)(v2 + 32);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v4);
    v6 = sub_100DE1120;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 32);
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 120));
    v6 = sub_100DE07E4;
  }
  return swift_task_switch(v6, v5, 0);
}

void sub_100DE07E4()
{
  uint64_t v0;
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  int *v10;
  _QWORD *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  for (i = *(_QWORD *)(v0 + 104); ; i = v4)
  {
    swift_release(i);
    v2 = *(_QWORD *)(v0 + 112);
    if (v2 == *(_QWORD *)(v0 + 88))
    {
      v6 = *(_QWORD *)(v0 + 72);
      v7 = *(_QWORD *)(v0 + 64);
      swift_bridgeObjectRelease();
      sub_1004BBBC8(v6, v7);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v3 = *(_QWORD *)(v0 + 80);
    if ((v3 & 0xC000000000000001) != 0)
    {
      v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(*(_QWORD *)(v0 + 112), v3);
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 8 * v2 + 32);
      swift_retain(v4);
    }
    *(_QWORD *)(v0 + 104) = v4;
    *(_QWORD *)(v0 + 112) = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + *(_QWORD *)(v0 + 96));
    *(_QWORD *)(v0 + 120) = Strong;
    if (Strong)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + *(_QWORD *)(v0 + 96) + 8);
      ObjectType = swift_getObjectType(Strong);
      v10 = *(int **)(v8 + 24);
      v12 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
      v11 = (_QWORD *)swift_task_alloc(v10[1]);
      *(_QWORD *)(v0 + 128) = v11;
      *v11 = v0;
      v11[1] = sub_100DE0754;
      v12(v4, ObjectType, v8);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100DE091C()
{
  uint64_t v0;

  sub_100DE10A0(v0 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration);
  sub_1004CBB0C(v0 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_dataEncryptor));
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100DE0988()
{
  return type metadata accessor for CRLRealTimeMessengerImplementation(0);
}

uint64_t type metadata accessor for CRLRealTimeMessengerImplementation(uint64_t a1)
{
  uint64_t result;

  result = qword_101414498;
  if (!qword_101414498)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLRealTimeMessengerImplementation);
  return result;
}

uint64_t sub_100DE09CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for CRLRealTimeMessengerConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100F3A870;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_100F3A888;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CRLRealTimeMessengerImplementation.RealTimeMessageCoder()
{
  return objc_opt_self(_TtCC8Freeform34CRLRealTimeMessengerImplementationP33_9B853EB3F277C9AC9372E2508059344A20RealTimeMessageCoder);
}

uint64_t sub_100DE0A94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1014144AC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1004CF80C;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100DDC5E8, v4, 0);
}

uint64_t sub_100DE0AF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1014144CC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1004CFD00;
  v5[3] = a1;
  v5[4] = v4;
  return swift_task_switch(sub_100DDF87C, v4, 0);
}

uint64_t sub_100DE0B5C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CRLChunkedMessageBufferWrapper()
{
  return objc_opt_self(_TtC8Freeform30CRLChunkedMessageBufferWrapper);
}

uint64_t sub_100DE0BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;

  v17 = type metadata accessor for CRLRealTimeMessengerImplementation(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  return sub_100DE0C38(a1, a2, a3, a4, a5, v18, a7, a8, a9, a10);
}

uint64_t sub_100DE0C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __n128 v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;

  v32 = a4;
  v14 = type metadata accessor for GroupSessionMessenger.DeliveryMode(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(a6, v18);
  v19 = a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_helper;
  *(_QWORD *)(v19 + 8) = 0;
  swift_unknownObjectWeakInit(v19);
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_chunkedMessageBufferWrappers) = _swiftEmptyDictionarySingleton;
  sub_100DE10DC(a1, a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__configuration);
  v20 = (_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation_dataEncryptor);
  *v20 = a2;
  v20[1] = a9;
  *(_QWORD *)(v19 + 8) = a10;
  v21 = swift_unknownObjectWeakAssign(v19, a3);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v17, a1, v14, v21);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v17, v14);
  if (v22 == enum case for GroupSessionMessenger.DeliveryMode.reliable(_:))
  {
    v23 = 0;
LABEL_5:
    v24 = type metadata accessor for CRLRealTimeMessengerImplementation.RealTimeMessageCoder();
    v25 = swift_allocObject(v24, 40, 7);
    *(_BYTE *)(v25 + 16) = v23;
    v26 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v27 = swift_unknownObjectRetain(a2);
    v28 = PropertyListEncoder.init()(v27);
    *(_QWORD *)(v25 + 24) = v28;
    swift_retain(v28);
    dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
    swift_release(v28);
    v29 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    *(_QWORD *)(v25 + 32) = PropertyListDecoder.init()();
    swift_unknownObjectRelease(a2);
    swift_unknownObjectRelease(a3);
    swift_unknownObjectRelease(v32);
    sub_100DE10A0(a1);
    *(_QWORD *)(a6 + OBJC_IVAR____TtC8Freeform34CRLRealTimeMessengerImplementation__coder) = v25;
    return a6;
  }
  if (v22 == enum case for GroupSessionMessenger.DeliveryMode.unreliable(_:))
  {
    v23 = 1;
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000048, 0x8000000101012180, "Freeform/CRLRealTimeMessengerImplementation.swift", 49, 2, 157, 0);
  __break(1u);
  return result;
}

unint64_t sub_100DE0E8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1014147C0;
  if (!qword_1014147C0)
  {
    v1 = objc_opt_self(OS_dispatch_source);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1014147C0);
  }
  return result;
}

uint64_t sub_100DE0EC8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100DE0EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

double sub_100DE0F60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100DDEE10(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

double sub_100DE0F90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100DE0FA0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100DE0FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100DE1024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1014147E4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1004CF80C;
  v5[5] = v3;
  v5[6] = v4;
  return swift_task_switch(sub_100DDEF90, v3, 0);
}

uint64_t sub_100DE10A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CRLRealTimeMessengerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100DE10DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRLRealTimeMessengerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100DE1128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  char v48[24];
  double *v49;

  v3 = sub_1004B804C((uint64_t *)&unk_1014148B0);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  __chkstk_darwin(v3);
  v43 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1004B804C(&qword_101405EC0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v34[1] = v1;
    v49 = _swiftEmptyArrayStorage;
    sub_100600804(0, v7, 0);
    v8 = v49;
    v10 = sub_10051FA44(a1);
    v11 = 0;
    v12 = a1 + 64;
    v35 = a1 + 80;
    v36 = v7;
    v37 = v9;
    v38 = a1 + 64;
    v39 = a1;
    v13 = v43;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(a1 + 32))
    {
      v16 = (unint64_t)v10 >> 6;
      if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v9)
        goto LABEL_24;
      v46 = v11;
      v47 = v8;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
      v18 = v17 + *(_QWORD *)(*(_QWORD *)v17 + 120);
      v19 = swift_beginAccess(v18, v48, 0, 0);
      v20 = v40;
      v21 = v41;
      v22 = v42;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v41 + 16))(v40, v18, v42, v19);
      v23 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
      swift_retain(v17);
      Capsule<>.root.getter(v22, v23);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v22);
      v24 = v45;
      v25 = CRDictionary.count.getter(v45);
      v8 = v47;
      v26 = v25;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v24);
      swift_release(v17);
      v49 = v8;
      a1 = v39;
      v28 = *((_QWORD *)v8 + 2);
      v27 = *((_QWORD *)v8 + 3);
      if (v28 >= v27 >> 1)
      {
        sub_100600804(v27 > 1, v28 + 1, 1);
        v8 = v49;
      }
      *((_QWORD *)v8 + 2) = v28 + 1;
      *((float *)v8 + v28 + 8) = (float)v26;
      v14 = 1 << *(_BYTE *)(a1 + 32);
      if (v10 >= v14)
        goto LABEL_25;
      v12 = v38;
      v29 = *(_QWORD *)(v38 + 8 * v16);
      if ((v29 & (1 << v10)) == 0)
        goto LABEL_26;
      LODWORD(v9) = v37;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v37)
        goto LABEL_27;
      v30 = v29 & (-2 << (v10 & 0x3F));
      if (v30)
      {
        v14 = __clz(__rbit64(v30)) | v10 & 0xFFFFFFFFFFFFFFC0;
        v15 = v36;
      }
      else
      {
        v31 = v16 + 1;
        v32 = (unint64_t)(v14 + 63) >> 6;
        v15 = v36;
        if (v16 + 1 < v32)
        {
          v33 = *(_QWORD *)(v38 + 8 * v31);
          if (v33)
          {
LABEL_20:
            v14 = __clz(__rbit64(v33)) + (v31 << 6);
          }
          else
          {
            while (v32 - 2 != v16)
            {
              v33 = *(_QWORD *)(v35 + 8 * v16++);
              if (v33)
              {
                v31 = v16 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      v11 = v46 + 1;
      v10 = v14;
      if (v46 + 1 == v15)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

float sub_100DE1478(float32x4_t *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float *v20;
  float v21;

  v2 = a1[1].i64[0];
  if (!v2)
  {
    v5 = 0.0;
    return sqrtf(v5 / (float)(v2 - 1));
  }
  if (v2 == 1)
  {
    v3 = 0;
    v4 = 0.0;
LABEL_8:
    v8 = v2 - v3;
    v9 = &a1[2].f32[v3];
    do
    {
      v10 = *v9++;
      v4 = v4 + v10;
      --v8;
    }
    while (v8);
    goto LABEL_10;
  }
  v3 = v2 & 0x7FFFFFFFFFFFFFFELL;
  v6 = &a1[2].f32[1];
  v4 = 0.0;
  v7 = v2 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v4 = (float)(v4 + *(v6 - 1)) + *v6;
    v6 += 2;
    v7 -= 2;
  }
  while (v7);
  if (v2 != v3)
    goto LABEL_8;
LABEL_10:
  *(float *)&a2 = v4 / (float)v2;
  if ((unint64_t)v2 < 8)
  {
    v11 = 0;
    v5 = 0.0;
LABEL_15:
    v19 = v2 - v11;
    v20 = &a1[2].f32[v11];
    do
    {
      v21 = *v20++;
      v5 = v5 + (float)((float)(v21 - *(float *)&a2) * (float)(v21 - *(float *)&a2));
      --v19;
    }
    while (v19);
    return sqrtf(v5 / (float)(v2 - 1));
  }
  v11 = v2 & 0x7FFFFFFFFFFFFFF8;
  v12 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
  v13 = a1 + 3;
  v5 = 0.0;
  v14 = v2 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v15 = vsubq_f32(v13[-1], v12);
    v16 = vsubq_f32(*v13, v12);
    v17 = vmulq_f32(v15, v15);
    v18 = vmulq_f32(v16, v16);
    v5 = (float)((float)((float)((float)((float)((float)((float)(v5 + v17.f32[0]) + v17.f32[1]) + v17.f32[2])
                                       + v17.f32[3])
                               + v18.f32[0])
                       + v18.f32[1])
               + v18.f32[2])
       + v18.f32[3];
    v13 += 2;
    v14 -= 8;
  }
  while (v14);
  if (v2 != v11)
    goto LABEL_15;
  return sqrtf(v5 / (float)(v2 - 1));
}

uint64_t type metadata accessor for CRLAnalyticsFreehandDrawings()
{
  return objc_opt_self(_TtC8Freeform28CRLAnalyticsFreehandDrawings);
}

void sub_100DE15D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t (*v25)(__n128);
  __n128 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CGColorSpace *v47;
  _QWORD *v48;
  id v49;
  __n128 v50;
  uint64_t v51;
  uint64_t (*v52)(__n128);
  void *v53;
  void *v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  unint64_t v92;
  id v93;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v95;
  id v96;
  char v97;
  uint64_t v98;
  id v99;
  char v100;
  uint64_t v101;
  id v102;
  char v103;
  uint64_t v104;
  id v105;
  char v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  float32x4_t *v113;
  float32x4_t *v114;
  double v115;
  unint64_t v116;
  float v117;
  float v118;
  uint64_t v119;
  float *v120;
  uint64_t v121;
  unint64_t v122;
  float *v123;
  float v124;
  id v125;
  double v126;
  id v127;
  char v128;
  _QWORD *v129;
  id v130;
  double v131;
  id v132;
  char v133;
  _QWORD *v134;
  void *v135;
  uint64_t v136;
  uint64_t inited;
  id v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  NSString v143;
  Class isa;
  uint64_t v145;
  uint64_t v146;
  PKInkType v147;
  uint64_t v148;
  uint64_t v149;
  PKInkType v150;
  uint64_t v151;
  PKInkType v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  PKInkType v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[14];
  uint64_t v180;
  uint64_t v181[3];
  int v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;

  v149 = a2;
  v3 = type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  __chkstk_darwin(v3);
  v159 = (char *)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = a1;
  if ((unint64_t)a1 >> 62)
  {
LABEL_95:
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    swift_bridgeObjectRetain(v153);
    v145 = _CocoaArrayWrapper.endIndex.getter(a1);
    swift_bridgeObjectRelease();
    v148 = v145;
    if (v145 <= 0)
      return;
    swift_bridgeObjectRetain(v153);
    v146 = _CocoaArrayWrapper.endIndex.getter(a1);
    if (!v146)
      goto LABEL_101;
    a1 = v146;
    v5 = v153;
  }
  else
  {
    a1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!a1)
      return;
    swift_bridgeObjectRetain(v153);
    v5 = v153;
    v148 = a1;
  }
  v6 = 0;
  v155 = v5 & 0xC000000000000001;
  v151 = v5 + 32;
  v156 = PKInkTypeMonoline;
  v152 = PKInkTypePen;
  v150 = PKInkTypePencil;
  v147 = PKInkTypeCrayon;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v154 = a1;
  while (1)
  {
    if (v155)
      v12 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v153);
    else
      v12 = (char *)*(id *)(v151 + 8 * v6);
    v13 = __OFADD__(v6, 1);
    v14 = v6 + 1;
    if (v13)
    {
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    v157 = v14;
    v158 = v12;
    v15 = OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems;
    v16 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems];
    if (!v16)
    {
      sub_100740DA4();
      v16 = *(_QWORD *)&v158[v15];
    }
    if (v16)
      v17 = v16;
    else
      v17 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)v17 >> 62))
    {
      swift_bridgeObjectRetain(v16);
      v18 = swift_bridgeObjectRetain(v17);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v18);
      swift_bridgeObjectRelease();
      a1 = v17;
      goto LABEL_17;
    }
    v84 = v17 < 0 ? v17 : v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    v85 = sub_1004B804C(&qword_1013E0670);
    a1 = _bridgeCocoaArray<A>(_:)(v84, v85);
    swift_bridgeObjectRelease_n(v17, 2);
    v17 = a1;
    if ((unint64_t)a1 >> 62)
      break;
LABEL_17:
    v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v17);
    if (v19)
      goto LABEL_18;
LABEL_5:
    swift_bridgeObjectRelease_n(v17, 2);

    a1 = v154;
    v6 = v157;
    if (v157 == v154)
    {
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
  }
  if (a1 < 0)
    v86 = a1;
  else
    v86 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v19 = _CocoaArrayWrapper.endIndex.getter(v86);
  if (!v19)
    goto LABEL_5;
LABEL_18:
  if (v19 < 1)
    goto LABEL_94;
  v20 = 0;
  v173 = a1 & 0xC000000000000001;
  v160 = v19;
  v161 = v17;
  while (2)
  {
    if (v173)
    {
      v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v17);
    }
    else
    {
      v21 = *(_QWORD *)(v17 + 8 * v20 + 32);
      swift_unknownObjectRetain(v21);
    }
    v22 = type metadata accessor for CRLShapeItem(0);
    v23 = (_QWORD *)swift_dynamicCastClass(v21, v22);
    if (!v23)
    {
      swift_unknownObjectRelease(v21);
      goto LABEL_21;
    }
    v24 = v23;
    v25 = *(uint64_t (**)(__n128))((swift_isaMask & *v23) + 0x4C0);
    v177 = v21;
    v26 = swift_unknownObjectRetain(v21);
    if ((v25(v26) & 1) == 0)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 158, "Should only ask about being a fill for a freehand drawing on freehand drawing shapes.", 85, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2u, 158, (uint64_t)"Should only ask about being a fill for a freehand drawing on freehand drawing shapes.", 85, 2u);
    }
    v27 = *(_QWORD **)((char *)v24 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    v28 = *v27;
    v29 = swift_conformsToProtocol2(*v27, &protocol descriptor for CRLAbstractShapeItemDataProtocol);
    if (v29)
    {
      v30 = v29;
      v174 = v24;
      v175 = v20;
      v31 = *(void (**)(uint64_t, uint64_t, __n128))(v29 + 16);
      v32 = swift_retain(v27);
      v33 = (uint64_t)v159;
      v31(v28, v30, v32);
      swift_release(v27);
      v34 = sub_1004B804C((uint64_t *)&unk_1014148A0);
      CRRegister.wrappedValue.getter(v34);
      v35 = v179[2];
      v176 = v179[1];
      v36 = v179[3];
      v37 = v179[4];
      v38 = v179[7];
      v169 = v179[6];
      v170 = v179[5];
      v40 = v179[8];
      v39 = v179[9];
      v41 = v179[11];
      v168 = v179[10];
      v42 = (id)v179[12];
      v171 = v179[13];
      v172 = v179[0];
      v43 = sub_1008F0238(v33);
      if (v42)
      {
        sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
        v182 = v35;
        v165 = v35;
        v166 = v37;
        v183 = BYTE4(v35) & 1;
        v167 = v36;
        v184 = v36;
        v185 = v37;
        v44 = v169;
        v45 = v170;
        v186 = v170;
        v187 = v169;
        v163 = v40;
        v164 = v38;
        v188 = v38;
        v189 = v40;
        v46 = v168;
        v190 = v39;
        v191 = v168;
        v192 = v41;
        v193 = v42;
        swift_bridgeObjectRetain(v41);
        v162 = (uint64_t)v42;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v39);
        v47 = sub_1006C52C0((uint64_t)&v182);
        v48 = v174;
        v20 = v175;
        if ((v176 & 1) != 0)
        {
          if (qword_1013DD868 != -1)
            swift_once(&qword_1013DD868, sub_100A05844);
          swift_beginAccess(&static OS_os_log.persistence, &v178, 0, 0);
          v49 = (id)static OS_os_log.persistence;
          v51 = static os_log_type_t.info.getter(v50);
          sub_100A06EBC((uint64_t)v49, &_mh_execute_header, v51, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

        }
        v42 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v47);

        v43 = sub_1004C4174(v172, v176, v165, v167, v166, v45, v44, v164, v163, v39, v46, v41, v162, v171);
      }
      else
      {
        v48 = v174;
        v20 = v175;
      }
      v52 = *(uint64_t (**)(__n128))((swift_isaMask & *v48) + 0x420);
      v53 = (void *)((uint64_t (*)(uint64_t))v52)(v43);
      v54 = v53;
      v55 = v177;
      if (v42)
      {
        if (v53)
        {
          if ((objc_msgSend(v53, "isNullStroke") & 1) == 0)
          {
            sub_100757E04(&_mh_execute_header, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 165, "Should not have both fill and stroke.", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
            sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2u, 165, (uint64_t)"Should not have both fill and stroke.", 37, 2u);
          }
          swift_unknownObjectRelease_n(v55, 2);

        }
        else
        {
          swift_unknownObjectRelease_n(v177, 2);
        }
        v19 = v160;

        v10 = v10 + 1.0;
        v17 = v161;
LABEL_21:
        if (v19 == ++v20)
          goto LABEL_5;
        continue;
      }
      if (v53)
      {

      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 171, "Should have a fill or a stroke.", 31, 2u, (uint64_t)_swiftEmptyArrayStorage);
        v55 = v177;
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isTreatedAsFillForFreehandDrawing", 33, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2u, 171, (uint64_t)"Should have a fill or a stroke.", 31, 2u);
      }
      v56 = swift_unknownObjectRetain(v55);
      v57 = (void *)v52(v56);
      swift_unknownObjectRelease(v55);
      v17 = v161;
      if (!v57)
      {
        swift_unknownObjectRelease_n(v55, 2);
        v19 = v160;
        goto LABEL_21;
      }
      v58 = objc_opt_self(CRLPencilKitInkStroke);
      v59 = (void *)swift_dynamicCastObjCClass(v57, v58);
      if (!v59)
      {
        swift_unknownObjectRelease_n(v55, 2);

        v19 = v160;
        goto LABEL_21;
      }
      v11 = v11 + 1.0;
      v60 = objc_msgSend(v59, "inkType");
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
      v63 = v62;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      if (v61 == v65 && v63 == v64)
      {
LABEL_50:
        swift_bridgeObjectRelease_n(v63, 2);
        goto LABEL_54;
      }
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v63, v65, v64, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v66 & 1) != 0)
        goto LABEL_54;
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
      v63 = v68;
      v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      if (v67 == v70 && v63 == v69)
        goto LABEL_50;
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v63, v70, v69, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v71 & 1) != 0)
      {
LABEL_54:

        swift_unknownObjectRelease_n(v177, 2);
        v9 = v9 + 1.0;
        v19 = v160;
        goto LABEL_21;
      }
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
      v74 = v73;
      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      if (v72 == v76 && v74 == v75)
      {
        swift_bridgeObjectRelease_n(v74, 2);
LABEL_62:
        swift_unknownObjectRelease_n(v177, 2);

        v8 = v8 + 1.0;
        v19 = v160;
        goto LABEL_21;
      }
      v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v74, v76, v75, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v77 & 1) != 0)
        goto LABEL_62;
      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
      v80 = v79;
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      if (v78 == v82 && v80 == v81)
      {

        swift_unknownObjectRelease_n(v177, 2);
        swift_bridgeObjectRelease_n(v80, 2);
        goto LABEL_67;
      }
      v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v82, v81, 0);

      swift_unknownObjectRelease_n(v177, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v83 & 1) != 0)
LABEL_67:
        v7 = v7 + 1.0;
      v19 = v160;
      goto LABEL_21;
    }
    break;
  }
  __break(1u);
LABEL_101:
  swift_bridgeObjectRelease();
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
LABEL_79:
  v87 = v10 / (double)v148;
  v88 = v11 / (double)v148;
  v89 = v9 / (double)v148;
  v90 = v8 / (double)v148;
  v91 = v7 / (double)v148;
  v92 = sub_1008D5C30((uint64_t)_swiftEmptyArrayStorage);
  v93 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v88);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v92);
  v179[0] = v92;
  sub_100826868((uint64_t)v93, 0xD000000000000020, 0x8000000101012520, isUniquelyReferenced_nonNull_native);
  v95 = v179[0];
  swift_bridgeObjectRelease();
  v96 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v87);
  v97 = swift_isUniquelyReferenced_nonNull_native(v95);
  v179[0] = v95;
  sub_100826868((uint64_t)v96, 0xD00000000000001ELL, 0x8000000101012550, v97);
  v98 = v179[0];
  swift_bridgeObjectRelease();
  v99 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v89);
  v100 = swift_isUniquelyReferenced_nonNull_native(v98);
  v179[0] = v98;
  sub_100826868((uint64_t)v99, 0xD000000000000023, 0x8000000101012570, v100);
  v101 = v179[0];
  swift_bridgeObjectRelease();
  v102 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v90);
  v103 = swift_isUniquelyReferenced_nonNull_native(v101);
  v179[0] = v101;
  sub_100826868((uint64_t)v102, 0xD000000000000026, 0x80000001010125A0, v103);
  v104 = v179[0];
  swift_bridgeObjectRelease();
  v105 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v91);
  v106 = swift_isUniquelyReferenced_nonNull_native(v104);
  v179[0] = v104;
  sub_100826868((uint64_t)v105, 0xD000000000000026, 0x80000001010125D0, v106);
  v107 = (_QWORD *)v179[0];
  swift_bridgeObjectRelease();
  v108 = *(_QWORD *)(*(_QWORD *)(v149 + OBJC_IVAR____TtC8Freeform8CRLBoard_freehandDrawingBucketManager) + 16);
  v181[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  swift_beginAccess(v108 + 16, v179, 0, 0);
  v109 = *(_QWORD *)(v108 + 16);
  __chkstk_darwin(v110);
  swift_retain(v108);
  swift_bridgeObjectRetain(v109);
  sub_1005FABC4(v111, (void (*)(uint64_t, uint64_t))sub_100B2D674);
  swift_release(v108);
  swift_bridgeObjectRelease();
  v112 = sub_1005F9384(v181[0]);
  swift_bridgeObjectRelease();
  sub_100DE1128((uint64_t)v112);
  v114 = v113;
  *(_QWORD *)&v115 = swift_release(v112).n128_u64[0];
  v116 = v114[1].u64[0];
  if (v116 >= 2)
  {
    v117 = sub_100DE1478(v114, v115);
    goto LABEL_82;
  }
  v117 = 0.0;
  v118 = 0.0;
  if (v116)
  {
LABEL_82:
    if (v116 < 2)
    {
      v119 = 0;
      v118 = 0.0;
      goto LABEL_87;
    }
    v119 = v116 & 0x7FFFFFFFFFFFFFFELL;
    v120 = &v114[2].f32[1];
    v118 = 0.0;
    v121 = v116 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v118 = (float)(v118 + *(v120 - 1)) + *v120;
      v120 += 2;
      v121 -= 2;
    }
    while (v121);
    if (v116 != v119)
    {
LABEL_87:
      v122 = v116 - v119;
      v123 = &v114[2].f32[v119];
      do
      {
        v124 = *v123++;
        v118 = v118 + v124;
        --v122;
      }
      while (v122);
    }
  }
  swift_bridgeObjectRelease();
  v125 = objc_allocWithZone((Class)NSNumber);
  *(float *)&v126 = v117;
  v127 = objc_msgSend(v125, "initWithFloat:", v126);
  v128 = swift_isUniquelyReferenced_nonNull_native(v107);
  v181[0] = (uint64_t)v107;
  sub_100826868((uint64_t)v127, 0xD000000000000018, 0x8000000101012600, v128);
  v129 = (_QWORD *)v181[0];
  swift_bridgeObjectRelease();
  v130 = objc_allocWithZone((Class)NSNumber);
  *(float *)&v131 = v118 / (float)(uint64_t)v116;
  v132 = objc_msgSend(v130, "initWithFloat:", v131);
  v133 = swift_isUniquelyReferenced_nonNull_native(v129);
  v181[0] = (uint64_t)v129;
  sub_100826868((uint64_t)v132, 0xD000000000000013, 0x8000000101012620, v133);
  v134 = (_QWORD *)v181[0];
  swift_bridgeObjectRelease();
  if (qword_1013DD730 != -1)
    swift_once(&qword_1013DD730, sub_100A01F88);
  swift_beginAccess(&static OS_os_log.crlAnalytics, v181, 0, 0);
  v135 = (void *)static OS_os_log.crlAnalytics;
  v136 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v136, &v180);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(inited + 56) = sub_1004B804C((uint64_t *)&unk_101414890);
  *(_QWORD *)(inited + 64) = sub_1004CBA30((unint64_t *)&qword_1013F60A0, (uint64_t *)&unk_101414890, (uint64_t)&protocol conformance descriptor for [A : B]);
  *(_QWORD *)(inited + 32) = v134;
  v138 = v135;
  v139 = swift_bridgeObjectRetain(v134);
  v140 = static os_log_type_t.default.getter(v139);
  sub_100A06EBC((uint64_t)v138, &_mh_execute_header, v140, "sendFreehandDrawingOnBoardOpenedAnalytics: payload: %@", 54, 2, inited);
  swift_setDeallocating(inited);
  v141 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v141);

  v142 = (void *)objc_opt_self(CRLAnalyticsLogger);
  v143 = String._bridgeToObjectiveC()();
  sub_1004B8930(0, (unint64_t *)&qword_1013E0490, NSObject_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v142, "sendEventInDomain:lazily:eventPayload:", v143, 1, isa, swift_bridgeObjectRelease().n128_f64[0]);

}

void sub_100DE263C()
{
  NSString v0;
  id v1;
  char *v2;
  void *v3;
  char *v4;
  id v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  char *v12;
  NSString v13;
  char *v14;
  id v15;
  UIMenuElementSize v16;
  UIMenuElementSize preferredElementSize;
  Swift::String v18;
  Class isa;
  Swift::OpaquePointer v20;
  UIImage_optional v21;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v0);

  if (v1)
  {
    v2 = sub_1004C57EC(0, 0, v1, 0);

    v3 = (void *)objc_opt_self(NSBundle);
    v4 = v2;
    v5 = objc_msgSend(v3, "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, v7, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v10 = v9;

    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setAccessibilityLabel:", v11, swift_bridgeObjectRelease(v10).n128_f64[0]);

    v12 = v4;
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setAccessibilityIdentifier:", v13);

    v14 = v12;
    v15 = objc_msgSend(v14, "accessibilityLabel");
    objc_msgSend(v14, "setLargeContentTitle:", v15);

    sub_100DE2B64();
    if (v16)
    {
      preferredElementSize = v16;
      sub_1004B8930(0, &qword_1013E1090, UIMenu_ptr);
      v18._countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      v21.value.super.isa = 0;
      v21.is_nil = 0;
      isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v18, (Swift::String_optional)0, v21, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v20).super.super.isa;
      objc_msgSend(v14, "setMenu:", isa);
      objc_msgSend(v14, "setShowsMenuAsPrimaryAction:", 1);
      objc_msgSend(v14, "setPreferredMenuElementOrder:", 2);

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100DE28D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1004CB6E8(a2, (uint64_t)&v21);
  v4 = type metadata accessor for CRLBoardItem(0);
  if ((swift_dynamicCast(v20, &v21, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
  {
    v5 = (void *)v20[0];
    v6 = sub_100704150();
    if (v6)
    {
      v7 = sub_100622190(v5, v6);
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
      {
        if ((sub_1004C9944(a1, a2) & 1) != 0)
        {
LABEL_18:

          return 1;
        }
        v8 = *(char **)(a1 + OBJC_IVAR____TtC8Freeform15CRLChangeRecord_details);
        v9 = &v8[OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data];
        v10 = v8;
        swift_beginAccess(v9, v20, 0, 0);
        v11 = *(_QWORD *)v9;
        if (*(_QWORD *)(*(_QWORD *)v9 + 16))
        {
          v12 = sub_100843260(12);
          if ((v13 & 1) != 0)
            goto LABEL_17;
        }
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 1;
        sub_1004CB800((uint64_t)&v21, (uint64_t *)&unk_1013DFC00);
        v11 = *(_QWORD *)v9;
        if (*(_QWORD *)(*(_QWORD *)v9 + 16))
        {
          v12 = sub_100843260(16);
          if ((v14 & 1) != 0)
            goto LABEL_17;
        }
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 1;
        sub_1004CB800((uint64_t)&v21, (uint64_t *)&unk_1013DFC00);
        v11 = *(_QWORD *)v9;
        if (*(_QWORD *)(*(_QWORD *)v9 + 16))
        {
          v12 = sub_100843260(38);
          if ((v15 & 1) != 0)
            goto LABEL_17;
        }
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 1;
        sub_1004CB800((uint64_t)&v21, (uint64_t *)&unk_1013DFC00);
        v11 = *(_QWORD *)v9;
        if (*(_QWORD *)(*(_QWORD *)v9 + 16))
        {
          v12 = sub_100843260(45);
          if ((v16 & 1) != 0)
            goto LABEL_17;
        }
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 1;
        sub_1004CB800((uint64_t)&v21, (uint64_t *)&unk_1013DFC00);
        v11 = *(_QWORD *)v9;
        if (*(_QWORD *)(*(_QWORD *)v9 + 16))
        {
          v12 = sub_100843260(31);
          if ((v17 & 1) != 0)
            goto LABEL_17;
        }
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 1;
        sub_1004CB800((uint64_t)&v21, (uint64_t *)&unk_1013DFC00);
        v11 = *(_QWORD *)v9;
        if (*(_QWORD *)(*(_QWORD *)v9 + 16))
        {
          v12 = sub_100843260(52);
          if ((v18 & 1) != 0)
          {
LABEL_17:
            sub_1004F370C(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v21);
            sub_1004CB800((uint64_t)&v21, (uint64_t *)&unk_1013DFC00);

            goto LABEL_18;
          }
        }
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 1;
        sub_1004CB800((uint64_t)&v21, (uint64_t *)&unk_1013DFC00);

      }
    }

  }
  return 0;
}

void sub_100DE2B64()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  id v9;

  sub_1004B8930(0, (unint64_t *)&unk_1013E5710, NSMutableArray_ptr);
  v1 = (void *)NSArray.init(arrayLiteral:)(_swiftEmptyArrayStorage);
  v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_editorController), "currentEditors");
  v3 = sub_1004B804C((uint64_t *)&unk_1013EFDD0);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease(v4);
    sub_1004B8930(0, &qword_1013E7880, UIMenuElement_ptr);
    v9 = v1;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    return;
  }
  if (v4 < 0)
    v8 = v4;
  else
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v8);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_15;
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      }
      else
      {
        v7 = *(void **)(v4 + 8 * i + 32);
        swift_unknownObjectRetain(v7);
      }
      if ((objc_msgSend(v7, "respondsToSelector:", "addContextualMenuElementsToArray:atPoint:") & 1) != 0)
        objc_msgSend(v7, "addContextualMenuElementsToArray:atPoint:", v1, 0.0, 0.0);
      swift_unknownObjectRelease(v7);
    }
    goto LABEL_15;
  }
  __break(1u);
}

BOOL sub_100DE2D28()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _BOOL8 v12;
  uint64_t v13;

  sub_1004B8930(0, (unint64_t *)&unk_1013E5710, NSMutableArray_ptr);
  v1 = (void *)NSArray.init(arrayLiteral:)(_swiftEmptyArrayStorage);
  v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_editorController), "currentEditors");
  v3 = sub_1004B804C((uint64_t *)&unk_1013EFDD0);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
    goto LABEL_15;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v6 = 4;
    while (1)
    {
      v7 = v6 - 4;
      if ((v4 & 0xC000000000000001) == 0)
        break;
      v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4);
      v9 = v6 - 3;
      if (__OFADD__(v7, 1))
        goto LABEL_14;
LABEL_9:
      if ((objc_msgSend(v8, "respondsToSelector:", "addContextualMenuElementsToArray:atPoint:") & 1) != 0)
        objc_msgSend(v8, "addContextualMenuElementsToArray:atPoint:", v1, 0.0, 0.0);
      v10 = v1;
      v11 = objc_msgSend(v10, "count");

      swift_unknownObjectRelease(v8);
      v12 = (uint64_t)v11 > 0;
      if ((uint64_t)v11 <= 0)
      {
        ++v6;
        if (v9 != v5)
          continue;
      }
      goto LABEL_20;
    }
    v8 = *(void **)(v4 + 8 * v6);
    swift_unknownObjectRetain(v8);
    v9 = v6 - 3;
    if (!__OFADD__(v7, 1))
      goto LABEL_9;
LABEL_14:
    __break(1u);
LABEL_15:
    if (v4 < 0)
      v13 = v4;
    else
      v13 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(v4);
  }
  v12 = 0;
LABEL_20:

  swift_bridgeObjectRelease(v4);
  return v12;
}

id sub_100DE2EE4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterEllipsisBuilder();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLiOSMiniFormatterEllipsisBuilder()
{
  return objc_opt_self(_TtC8Freeform34CRLiOSMiniFormatterEllipsisBuilder);
}

void sub_100DE2F38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t Strong;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  objc_super v22;
  __int128 v23;
  __int128 v24;

  if ((static Selector.== infix(_:_:)(a1, "sendToBack:") & 1) != 0
    || (static Selector.== infix(_:_:)(a1, "bringToFront:") & 1) != 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC8Freeform34CRLiOSMiniFormatterBaseLayerButton_formatterBuilder]);
    if (Strong)
    {
      v8 = (void *)Strong;
      v9 = *(void **)(Strong + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController);
      v10 = v9;

      if (v9)
      {
        v11 = objc_msgSend(v10, "layerHost");

        if (v11)
        {
          if ((objc_msgSend(v11, "respondsToSelector:", "asiOSCVC") & 1) != 0)
          {
            v12 = objc_msgSend(v11, "asiOSCVC");
            swift_unknownObjectRelease(v11);
            *(_QWORD *)(a3 + 24) = sub_1004B8930(0, (unint64_t *)&unk_10140B920, off_101229A78);
            *(_QWORD *)a3 = v12;
            return;
          }
          swift_unknownObjectRelease(v11);
        }
      }
    }
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    sub_1004F370C(a2, (uint64_t)&v23);
    v13 = *((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v14 = sub_1004BB5A4(&v23, *((uint64_t *)&v24 + 1));
      v15 = *(_QWORD *)(v13 - 8);
      v16 = __chkstk_darwin(v14);
      v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v15 + 16))(v18, v16);
      v19 = _bridgeAnythingToObjectiveC<A>(_:)(v18, v13);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v23);
    }
    else
    {
      v19 = 0;
    }
    v20 = (objc_class *)type metadata accessor for CRLiOSMiniFormatterBaseLayerButton();
    v22.receiver = v3;
    v22.super_class = v20;
    v21 = objc_msgSendSuper2(&v22, "targetForAction:withSender:", a1, v19);
    swift_unknownObjectRelease(v19);
    if (v21)
    {
      _bridgeAnyObjectToAny(_:)(&v23, v21);
      swift_unknownObjectRelease(v21);
    }
    else
    {
      v23 = 0u;
      v24 = 0u;
    }
    sub_1004D28A4((uint64_t)&v23, a3);
  }
}

void sub_100DE32A8(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4, void (*a5)(unint64_t, unint64_t))
{
  char *v5;
  uint64_t Strong;
  void *v12;
  void *v13;
  id v14;
  char *v15;
  objc_super v16;

  v16.receiver = v5;
  v16.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterBaseLayerButton();
  objc_msgSendSuper2(&v16, *a4, a1, a2, a3);
  Strong = swift_unknownObjectWeakLoadStrong(&v5[OBJC_IVAR____TtC8Freeform34CRLiOSMiniFormatterBaseLayerButton_formatterBuilder]);
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = *(void **)(Strong + OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_interactiveCanvasController);
    v14 = v13;

    if (v13)
    {
      v15 = (char *)objc_msgSend(v14, "editingCoordinator");

      if (v15)
      {
        if (*(_QWORD *)&v15[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_suspendResumeCoordinator])
        {
          a5(0xD00000000000002CLL, 0x80000001010126E0);

        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

void sub_100DE33BC(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, SEL *a6, void (*a7)(unint64_t, unint64_t))
{
  id v12;
  id v13;
  id v14;

  v12 = a3;
  v13 = a4;
  swift_unknownObjectRetain(a5);
  v14 = a1;
  sub_100DE32A8((uint64_t)v12, (uint64_t)v13, a5, a6, a7);

  swift_unknownObjectRelease(a5);
}

uint64_t sub_100DE345C()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

void sub_100DE35F8(uint64_t a1)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  NSString v21;
  unsigned __int8 v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  unsigned int v37;
  id v38;
  NSString v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t inited;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  NSString v54;
  Class isa;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t, __n128);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[176];

  v64 = type metadata accessor for UTType(0);
  v60 = *(_QWORD *)(v64 - 8);
  v2 = __chkstk_darwin(v64);
  v63 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for PHPickerResult(0, v2);
  v4 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v59 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - v7;
  v65 = *(_QWORD *)(a1 + 16);
  if (v65)
  {
    v9 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v61 = *(_QWORD *)(v4 + 72);
    v62 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
    v58 = a1;
    v10 = swift_bridgeObjectRetain(a1);
    v11 = 1;
    v57 = v9;
    v12 = v66;
    v13 = v63;
    do
    {
      v14 = v62(v8, v9, v12, v10);
      v15 = v4;
      v16 = (void *)PHPickerResult.itemProvider.getter(v14);
      v17 = static UTType.movie.getter();
      UTType.identifier.getter(v17);
      v19 = v18;
      v20 = *(void (**)(char *, uint64_t))(v60 + 8);
      v20(v13, v64);
      v21 = String._bridgeToObjectiveC()();
      v22 = objc_msgSend(v16, "hasItemConformingToTypeIdentifier:", v21, swift_bridgeObjectRelease(v19).n128_f64[0]);

      v4 = v15;
      v23 = *(void (**)(char *, uint64_t))(v15 + 8);
      v23(v8, v12);
      if ((v22 & 1) != 0)
        break;
      v9 += v61;
    }
    while (v65 != v11++);
    v25 = v58;
    swift_bridgeObjectRelease(v58);
    v26 = swift_bridgeObjectRetain(v25);
    v27 = 0;
    v28 = v57;
    v29 = v59;
    do
    {
      if (__OFADD__(v27, 1))
      {
        __break(1u);
        return;
      }
      v60 = v27 + 1;
      v30 = v62(v29, v28, v66, v26);
      v31 = (void *)PHPickerResult.itemProvider.getter(v30);
      v32 = v63;
      v33 = static UTType.image.getter();
      UTType.identifier.getter(v33);
      v35 = v34;
      v20(v32, v64);
      v36 = String._bridgeToObjectiveC()();
      v37 = objc_msgSend(v31, "hasItemConformingToTypeIdentifier:", v36, swift_bridgeObjectRelease(v35).n128_f64[0]);

      v23(v29, v66);
      if (v37)
      {
        swift_bridgeObjectRelease(v58);
        goto LABEL_13;
      }
      ++v27;
      v28 += v61;
    }
    while (v60 != v65);
    swift_bridgeObjectRelease(v58);
    if ((v22 & 1) != 0)
      goto LABEL_13;
  }
  sub_100757E04(&_mh_execute_header, (uint64_t)"errorForFailedToInsert(results:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMediaBrowserStringProvider.swift", 96, 2, 32, "Invalid photo picker results", 28, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"errorForFailedToInsert(results:)", 32, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMediaBrowserStringProvider.swift", 96, 2u, 32, (uint64_t)"Invalid photo picker results", 28, 2u);
LABEL_13:
  v38 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v39 = String._bridgeToObjectiveC()();
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend(v38, "localizedStringForKey:value:table:", v39, v40, 0);

  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;

  v45 = sub_1004B804C(&qword_1013F7600);
  inited = swift_initStackObject(v45, v67);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v47;
  v48 = sub_100DE345C();
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v48;
  *(_QWORD *)(inited + 56) = v49;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
  *(_QWORD *)(inited + 88) = v50;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = v42;
  *(_QWORD *)(inited + 104) = v44;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedRecoverySuggestionErrorKey);
  *(_QWORD *)(inited + 136) = v51;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v42;
  *(_QWORD *)(inited + 152) = v44;
  swift_bridgeObjectRetain(v44);
  v52 = sub_1008D5E68(inited);
  v53 = objc_allocWithZone((Class)NSError);
  v54 = String._bridgeToObjectiveC()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v53, "initWithDomain:code:userInfo:", v54, 200, isa, swift_bridgeObjectRelease(v52).n128_f64[0]);

}

id sub_100DE3BC8(void *a1, void *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void (*v12)(char *, _QWORD, uint64_t);
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  char *v42;
  char *v43;
  char *v44;
  id v45;
  id v46;
  void *v47;
  Class isa;
  double v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSString v55;
  id v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  void *v61;
  NSString v62;
  void *v63;
  id v64;
  objc_class *v65;
  id v66;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  id v74;
  char *v75;
  char *v76;
  char *v77;
  void *v78;
  id v79;
  id v80;
  _QWORD aBlock[5];
  uint64_t v82;
  objc_super v83;

  v78 = a2;
  v4 = type metadata accessor for PKInkingTool.InkType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_toolkit] = a1;
  v8 = v2;
  v80 = a1;
  v9 = objc_msgSend(v80, "toolkitUIState");
  v10 = objc_msgSend(objc_allocWithZone((Class)PKToolPickerScribbleItem), "init");
  v11 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_scribble;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_scribble) = v10;
  v12 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v12(v7, enum case for PKInkingTool.InkType.pen(_:), v4);
  v13 = sub_100DE5FE4((uint64_t)v7, v9);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  v15 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pen;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pen) = v13;
  v12(v7, enum case for PKInkingTool.InkType.monoline(_:), v4);
  v16 = sub_100DE5FE4((uint64_t)v7, v9);
  v14(v7, v4);
  v77 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_monoline;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_monoline) = v16;
  v12(v7, enum case for PKInkingTool.InkType.marker(_:), v4);
  v17 = sub_100DE5FE4((uint64_t)v7, v9);
  v14(v7, v4);
  v76 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_marker;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_marker) = v17;
  v18 = sub_100DE6148(v9);
  v75 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_eraser;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_eraser) = v18;
  v74 = objc_msgSend(objc_allocWithZone((Class)PKToolPickerLassoItem), "init");
  v19 = objc_msgSend(objc_allocWithZone((Class)PKToolPickerRulerItem), "init");
  v73 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_ruler;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_ruler) = v19;
  v12(v7, enum case for PKInkingTool.InkType.pencil(_:), v4);
  v20 = sub_100DE5FE4((uint64_t)v7, v9);
  v14(v7, v4);
  v72 = (char *)OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pencil;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pencil) = v20;
  v21 = sub_100DE6298(v9);
  v71 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fill;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fill) = v21;
  v12(v7, enum case for PKInkingTool.InkType.crayon(_:), v4);
  v22 = sub_100DE5FE4((uint64_t)v7, v9);
  v14(v7, v4);
  v70 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_crayon;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_crayon) = v22;
  v12(v7, enum case for PKInkingTool.InkType.fountainPen(_:), v4);
  v23 = sub_100DE5FE4((uint64_t)v7, v9);
  v14(v7, v4);
  v24 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fountainPen;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fountainPen) = v23;
  v12(v7, enum case for PKInkingTool.InkType.watercolor(_:), v4);
  v79 = v9;
  v25 = (void *)sub_100DE5FE4((uint64_t)v7, v9);
  v14(v7, v4);
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_watercolor) = v25;
  v69 = v25;
  v26 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  v27 = swift_allocObject(v26, 128, 7);
  *(_OWORD *)(v27 + 16) = xmmword_100EFE460;
  v28 = *(void **)((char *)v8 + v11);
  *(_QWORD *)(v27 + 32) = v28;
  v29 = *(void **)((char *)v8 + v15);
  *(_QWORD *)(v27 + 40) = v29;
  v30 = *(void **)&v77[(_QWORD)v8];
  *(_QWORD *)(v27 + 48) = v30;
  v31 = *(void **)&v76[(_QWORD)v8];
  *(_QWORD *)(v27 + 56) = v31;
  v32 = v74;
  v33 = *(void **)&v75[(_QWORD)v8];
  *(_QWORD *)(v27 + 64) = v33;
  *(_QWORD *)(v27 + 72) = v32;
  v68 = *(id *)&v73[(_QWORD)v8];
  *(_QWORD *)(v27 + 80) = v68;
  v72 = *(char **)&v72[(_QWORD)v8];
  *(_QWORD *)(v27 + 88) = v72;
  v73 = *(char **)((char *)v8 + v71);
  *(_QWORD *)(v27 + 96) = v73;
  v75 = *(char **)((char *)v8 + v70);
  *(_QWORD *)(v27 + 104) = v75;
  v34 = *(void **)((char *)v8 + v24);
  *(_QWORD *)(v27 + 112) = v34;
  *(_QWORD *)(v27 + 120) = v25;
  aBlock[0] = v27;
  specialized Array._endMutation()(v27);
  v35 = aBlock[0];
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_items) = aBlock[0];
  v76 = (char *)objc_allocWithZone((Class)PKToolPicker);
  sub_1004B8930(0, &qword_101414988, PKToolPickerItem_ptr);
  v36 = v28;
  v37 = v29;
  v38 = v30;
  v39 = v31;
  v40 = v33;
  v77 = v32;
  v41 = v68;
  v42 = v72;
  v43 = v73;
  v44 = v75;
  v45 = v34;
  v46 = v69;
  swift_bridgeObjectRetain(v35);
  v47 = v78;
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v49 = swift_bridgeObjectRelease(v35).n128_u64[0];
  v50 = objc_msgSend(v76, "initWithToolItems:", isa, v49);

  v51 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_picker;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_picker) = v50;
  static String._unconditionallyBridgeFromObjectiveC(_:)(PKInkIdentifierLasso);
  v53 = v52;
  v54 = v50;
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v53);
  v56 = objc_msgSend((id)objc_opt_self(PKToolConfiguration), "defaultConfigurationForToolWithIdentifier:", v55);
  if (v47)
  {
    v57 = swift_allocObject(&unk_1012A6F98, 24, 7);
    *(_QWORD *)(v57 + 16) = v47;
    aBlock[4] = sub_100B5DB40;
    v82 = v57;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(_QWORD *)"";
    aBlock[2] = sub_100528418;
    aBlock[3] = &unk_1012A6FB0;
    v58 = _Block_copy(aBlock);
    v59 = v82;
    v60 = v47;
    objc_msgSend(v56, "setViewControllerProvider:", v58, swift_release(v59).n128_f64[0]);
    _Block_release(v58);

  }
  v61 = (void *)objc_opt_self(CRLiOSPencilTrayObjCHelper);
  v62 = String._bridgeToObjectiveC()();
  objc_msgSend(v61, "insertCustomizedLassoToolWithToolIdentifier:withToolConfiguration:inToolPicker:forcingIndexZero:", v62, v56, v54, 0);

  v63 = *(void **)((char *)v8 + v51);
  objc_msgSend(v63, "setStateAutosaveName:", 0);
  objc_msgSend(v63, "setColorUserInterfaceStyle:", 1);
  v64 = v63;
  objc_msgSend(v64, "setShowsDrawingPolicyControls:", 1);

  v65 = (objc_class *)type metadata accessor for CRLiOSPencilTrayPickerManager();
  v83.receiver = v8;
  v83.super_class = v65;
  v66 = objc_msgSendSuper2(&v83, "init");

  return v66;
}

uint64_t sub_100DE4244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[72];

  v1 = v0;
  v2 = type metadata accessor for PKInkingTool.InkType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  v8 = &v20[-v7 - 8];
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9(&v20[-v7 - 8], v1, v2);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v8, v2);
  if (v10 == enum case for PKInkingTool.InkType.pen(_:))
    return 1;
  if (v10 == enum case for PKInkingTool.InkType.pencil(_:))
    return 2;
  if (v10 == enum case for PKInkingTool.InkType.marker(_:))
    return 6;
  if (v10 == enum case for PKInkingTool.InkType.monoline(_:))
    return 0;
  if (v10 == enum case for PKInkingTool.InkType.fountainPen(_:))
    return 5;
  if (v10 == enum case for PKInkingTool.InkType.watercolor(_:))
    return 4;
  if (v10 == enum case for PKInkingTool.InkType.crayon(_:))
    return 3;
  v12 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v12, v20);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v9(v6, v1, v2);
  v14 = String.init<A>(describing:)(v6, v2);
  v16 = v15;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v14;
  *(_QWORD *)(inited + 40) = v16;
  sub_100757E04(&_mh_execute_header, (uint64_t)"freeformToolType", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 396, "Unknown PKInkingTool.InkType (%{public}@). Falling back to pen.", 63, 2u, inited);
  sub_1004F5394(inited, (uint64_t)"freeformToolType", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2u, 396, (uint64_t)"Unknown PKInkingTool.InkType (%{public}@). Falling back to pen.", 63, 2u);
  swift_setDeallocating(inited);
  v17 = sub_1004B804C(&qword_1013E0190);
  v11 = 1;
  swift_arrayDestroy(inited + 32, 1, v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v11;
}

id sub_100DE44F8(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = type metadata accessor for CRLiOSPencilTrayPickerFillImageProvider();
  swift_initStaticObject(v2, &unk_1013DE000);
  v3 = objc_msgSend(a1, "color");
  v4 = sub_100DE651C(v3);

  return v4;
}

uint64_t sub_100DE4558()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char v14;
  __n128 v15;
  _QWORD v18[5];

  v0 = sub_1004B804C(&qword_101406888);
  __chkstk_darwin(v0);
  v2 = (char *)&v18[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PKCustomTool(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  PKToolPicker.selectedTool.getter(v18);
  v7 = sub_1004B804C((uint64_t *)&unk_101406890);
  v8 = swift_dynamicCast(v2, v18, v7, v3, 6);
  v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  if ((v8 & 1) != 0)
  {
    v9(v2, 0, 1, v3);
    v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    v11 = PKCustomTool.customIdentifier.getter(v10);
    if (v11 == 0xD000000000000018 && v12 == 0x8000000100FFA0E0)
    {
      v13 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v13);
      return 1;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, 0xD000000000000018, 0x8000000100FFA0E0, 0);
    v15 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v15);
    if ((v14 & 1) != 0)
      return 1;
  }
  else
  {
    v9(v2, 1, 1, v3);
    sub_1004CB800((uint64_t)v2, &qword_101406888);
  }
  return 0;
}

void sub_100DE4720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  char v26;
  __n128 v27;
  void *v28;
  double v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  _QWORD v35[5];

  v1 = sub_1004B804C(&qword_101406888);
  __chkstk_darwin(v1);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PKCustomTool(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_toolkit), "currentTool"));
  v9 = objc_msgSend(v8, "type");

  v11 = sub_100DE4A74((uint64_t)v9);
  v12 = v10;
  if (v11 != 0xD000000000000018 || (v13 = 0x8000000100FFA0E0, v10 != 0x8000000100FFA0E0))
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, 0xD000000000000018, 0x8000000100FFA0E0, 0) & 1) == 0)
    {
      v28 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_picker);
      v34 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v29 = swift_bridgeObjectRelease(v12).n128_u64[0];
      objc_msgSend(v28, "setSelectedToolItemIdentifier:", v34, v29);

      return;
    }
    v13 = v12;
  }
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_picker);
  v16 = PKToolPicker._tools.getter(v15);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    swift_bridgeObjectRelease(v16);
    return;
  }
  v32 = v14;
  v33 = v16;
  v18 = v16 + 32;
  v34 = (id)0x8000000100FFA0E0;
  while (1)
  {
    sub_1004E90B0(v18, (uint64_t)v35);
    v19 = sub_1004B804C((uint64_t *)&unk_101406890);
    v20 = swift_dynamicCast(v3, v35, v19, v4, 6);
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    if ((v20 & 1) != 0)
      break;
    v21(v3, 1, 1, v4);
    sub_1004CB800((uint64_t)v3, &qword_101406888);
LABEL_8:
    v18 += 40;
    if (!--v17)
    {
      swift_bridgeObjectRelease(v33);
      return;
    }
  }
  v21(v3, 0, 1, v4);
  v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v23 = PKCustomTool.customIdentifier.getter(v22);
  v25 = v24;
  if (v23 == 0xD000000000000018 && v24 == v34)
  {
    swift_bridgeObjectRelease(v33);
    v30 = 0x8000000100FFA0E0;
    goto LABEL_19;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, 0xD000000000000018, 0x8000000100FFA0E0, 0);
  v27 = swift_bridgeObjectRelease(v25);
  if ((v26 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v27);
    goto LABEL_8;
  }
  v30 = v33;
LABEL_19:
  swift_bridgeObjectRelease(v30);
  v35[3] = v4;
  v35[4] = &protocol witness table for PKCustomTool;
  v31 = sub_10050D1B0(v35);
  (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v31, v7, v4);
  PKToolPicker.selectedTool.setter(v35);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100DE4A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  NSString v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = type metadata accessor for PKToolPickerCustomItem.Configuration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v23 - v8;
  switch(a1)
  {
    case 0:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_monoline;
      goto LABEL_12;
    case 1:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pen;
      goto LABEL_12;
    case 2:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_pencil;
      goto LABEL_12;
    case 3:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_crayon;
      goto LABEL_12;
    case 4:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_watercolor;
      goto LABEL_12;
    case 5:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fountainPen;
      goto LABEL_12;
    case 6:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_marker;
      goto LABEL_12;
    case 7:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_fill;
      goto LABEL_12;
    case 8:
      v10 = OBJC_IVAR____TtC8Freeform29CRLiOSPencilTrayPickerManager_eraser;
LABEL_12:
      v18 = *(id *)(v1 + v10);
      break;
    case 9:
      v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v12 = String._bridgeToObjectiveC()();
      v13 = String._bridgeToObjectiveC()();
      v14 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, v13, 0);

      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      PKToolPickerCustomItem.Configuration.init(identifier:name:)(0xD000000000000018, 0x8000000100FFA0E0, v15, v17);
      sub_1004B8930(0, &qword_101414980, PKToolPickerCustomItem_ptr);
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
      v18 = (id)PKToolPickerCustomItem.init(configuration:)(v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      break;
    default:
      type metadata accessor for CRLFreehandDrawingToolType(0);
      v24 = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v22, &v24, v22, &type metadata for UInt);
      __break(1u);
      JUMPOUT(0x100DE4D08);
  }
  v19 = objc_msgSend(v18, "identifier");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  return v20;
}

uint64_t sub_100DE4D30(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  id v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  sub_100DE4FF4(a1);
  v16 = v1;
  v3 = sub_1004B8930(0, &qword_101414988, PKToolPickerItem_ptr);
  v4 = v1;
  v5 = sub_1004B804C(&qword_101414990);
  if ((swift_dynamicCast(&v13, &v16, v3, v5, 6) & 1) != 0)
  {
    sub_1004DB728(&v13, (uint64_t)v17);
    v6 = v18;
    v7 = v19;
    sub_1004BB5A4(v17, v18);
    (*(void (**)(void *, uint64_t, uint64_t))(v7 + 24))(a1, v6, v7);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v17);
  }
  else
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    sub_1004CB800((uint64_t)&v13, &qword_101414998);
  }
  v16 = v4;
  v8 = v4;
  v9 = sub_1004B804C(&qword_1014149A0);
  if ((swift_dynamicCast(&v13, &v16, v3, v9, 6) & 1) != 0)
  {
    sub_1004DB728(&v13, (uint64_t)v17);
    v10 = v18;
    v11 = v19;
    sub_1004BB5A4(v17, v18);
    (*(void (**)(void *, uint64_t, uint64_t))(v11 + 24))(a1, v10, v11);
    return _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v17);
  }
  else
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    return sub_1004CB800((uint64_t)&v13, &qword_1014149A8);
  }
}

id sub_100DE4ECC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSPencilTrayPickerManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

double sub_100DE4FF4(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  double result;
  uint64_t v11;
  uint64_t inited;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[72];
  __int128 v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v3 = sub_1004B8930(0, &qword_101414988, PKToolPickerItem_ptr);
  v4 = v1;
  v5 = sub_1004B804C(&qword_1014149B0);
  if ((swift_dynamicCast(v19, &v21, v3, v5, 6) & 1) != 0)
  {
    sub_1004DB728(v19, (uint64_t)v22);
    v6 = v23;
    v7 = v24;
    sub_1004BB5A4(v22, v23);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    if ((v9 & 1) == 0)
    {
      objc_msgSend(a1, "setCurrentToolSelection:", v8);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v22);
      return result;
    }
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v22);
  }
  else
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    sub_1004CB800((uint64_t)v19, &qword_1014149B8);
  }
  v11 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v11, v18);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v13 = objc_msgSend(v4, "identifier");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v14;
  *(_QWORD *)(inited + 40) = v16;
  sub_100757E04(&_mh_execute_header, (uint64_t)"updateCurrentToolSelection(for:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 296, "Could not find freeformToolType for the selected tool item: %@", 62, 2u, inited);
  sub_1004F5394(inited, (uint64_t)"updateCurrentToolSelection(for:)", 32, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2u, 296, (uint64_t)"Could not find freeformToolType for the selected tool item: %@", 62, 2u);
  swift_setDeallocating(inited);
  v17 = sub_1004B804C(&qword_1013E0190);
  *(_QWORD *)&result = swift_arrayDestroy(inited + 32, 1, v17).n128_u64[0];
  return result;
}

uint64_t sub_100DE5210()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v1 = objc_msgSend(v0, "identifier");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  if (v2 == 0xD000000000000017 && v4 == 0x8000000100FFA3A0)
  {
    swift_bridgeObjectRelease(0x8000000100FFA3A0);
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, 0xD000000000000017, 0x8000000100FFA3A0, 0);
    swift_bridgeObjectRelease(v4);
    if ((v6 & 1) != 0)
      return 7;
    else
      return 0;
  }
}

uint64_t sub_100DE52D4()
{
  return sub_100DE5210();
}

uint64_t sub_100DE52F8()
{
  return 8;
}

uint64_t sub_100DE5304()
{
  return 9;
}

uint64_t sub_100DE5310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for PKInkingTool.InkType(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PKInkingTool(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = PKToolPickerInkingItem.inkingTool.getter(v8);
  PKInkingTool.inkType.getter(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = sub_100DE4244();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v10;
}

uint64_t sub_100DE5400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for PKInkingTool(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = PKToolPickerInkingItem.inkingTool.getter(v2);
  v6 = PKInkingTool.color.getter(v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

void sub_100DE548C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  double v8;
  double v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v3 = a3;
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v17 = objc_msgSend(objc_allocWithZone((Class)CRLColor), "initWithUIColor:", v6);

  v7 = objc_msgSend(v17, "colorWithAlphaComponent:", 1.0);
  objc_msgSend(a1, "setColorForCurrentTool:", v7);

  objc_msgSend(v17, "alphaComponent");
  v9 = v8;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(a2);
  LOBYTE(v3) = v11;
  v12 = objc_msgSend(a1, "currentTool");
  if ((v3 & 1) != 0 || v10 != 7)
  {
    v16 = objc_opt_self(CRLFreehandDrawingToolStroke);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v16);
    if (!v14)
    {
      v15 = 426;
      goto LABEL_7;
    }
  }
  else
  {
    v13 = objc_opt_self(CRLFreehandDrawingToolFillAndLegacyStroke);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (!v14)
    {
      v15 = 422;
LABEL_7:

      sub_100757E04(&_mh_execute_header, (uint64_t)"updateColor(for:)", 17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, v15, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateColor(for:)", 17, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2u, v15, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    }
  }
  objc_msgSend(v14, "setOpacity:", v9);

}

double sub_100DE5690(uint64_t a1, uint64_t a2)
{
  return sub_100DE5F08(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for PKInkingTool, (uint64_t (*)(uint64_t))&PKToolPickerInkingItem.inkingTool.getter, (double (*)(uint64_t))&PKInkingTool.width.getter);
}

void sub_100DE56B0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 8))(a2);
  if ((v7 & 1) != 0 || v6 != 7)
  {
    v11 = objc_msgSend(a1, "currentTool");
    v8 = objc_opt_self(CRLFreehandDrawingToolStroke);
    v9 = swift_dynamicCastObjCClass(v11, v8);
    if (v9)
    {
      v10 = (void *)v9;
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
      objc_msgSend(v10, "setUnscaledWidth:");

    }
    else
    {

      sub_100757E04(&_mh_execute_header, (uint64_t)"updateWidth(for:)", 17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 442, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateWidth(for:)", 17, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2u, 442, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    }
  }
}

id sub_100DE5810()
{
  id *v0;

  return objc_msgSend(*v0, "color");
}

id sub_100DE5834()
{
  id *v0;

  return objc_msgSend(*v0, "width");
}

uint64_t sub_100DE5844(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  void (*v16)(_BYTE *);
  char v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  char v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t (*v26)(_BYTE *, uint64_t);
  __n128 v27;
  uint64_t v28;
  double v29;
  id v30;
  double v31;
  double v32;
  _BYTE *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  _BYTE v49[4];
  unsigned int v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  uint64_t (*v53)(_BYTE *, uint64_t);
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  char v57[72];
  char v58[80];

  v3 = type metadata accessor for PKEraserTool(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v49[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for PKEraserTool.EraserType(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v49[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v11);
  v14 = &v49[-v13];
  v52 = v1;
  v15 = PKToolPickerEraserItem.eraserTool.getter(v12);
  PKEraserTool.eraserType.getter(v15);
  v51 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v51(v6, v3);
  v16 = *(void (**)(_BYTE *))(v8 + 104);
  v50 = enum case for PKEraserTool.EraserType.vector(_:);
  v16(v10);
  v17 = static PKEraserTool.EraserType.== infix(_:_:)(v14, v10);
  v18 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v18(v10, v7);
  v54 = v14;
  if ((v17 & 1) != 0)
  {
    v19 = objc_msgSend(a1, "toolkitUIState");
    objc_msgSend(v19, "setEraserToolErasesWholeObjects:", 1);
  }
  else
  {
    ((void (*)(_BYTE *, _QWORD, uint64_t))v16)(v10, enum case for PKEraserTool.EraserType.fixedWidthBitmap(_:), v7);
    v20 = static PKEraserTool.EraserType.== infix(_:_:)(v14, v10);
    v18(v10, v7);
    if ((v20 & 1) == 0)
      goto LABEL_6;
    v19 = objc_msgSend(a1, "toolkitUIState");
    objc_msgSend(v19, "setEraserToolErasesWholeObjects:", 0);
  }

LABEL_6:
  v53 = (uint64_t (*)(_BYTE *, uint64_t))v18;
  objc_msgSend(a1, "setCurrentToolSelection:", 8);
  v21 = objc_msgSend(a1, "currentTool");
  v22 = objc_opt_self(CRLFreehandDrawingToolPixelEraser);
  v23 = swift_dynamicCastObjCClass(v21, v22);
  if (v23)
  {
    v24 = (void *)v23;
    ((void (*)(_BYTE *, _QWORD, uint64_t))v16)(v10, enum case for PKEraserTool.EraserType.fixedWidthBitmap(_:), v7);
    v25 = static PKEraserTool.EraserType.== infix(_:_:)(v54, v10);
    v26 = v53;
    v53(v10, v7);
    if ((v25 & 1) == 0)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 369, "Should only use pixel eraser for fixed width bitmap erase", 57, 2u, (uint64_t)_swiftEmptyArrayStorage);
      v26 = v53;
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateEraser(for:)", 18, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2u, 369, (uint64_t)"Should only use pixel eraser for fixed width bitmap erase", 57, 2u);
    }
    v28 = PKToolPickerEraserItem.eraserTool.getter(v27);
    v29 = PKEraserTool.width.getter(v28);
    v51(v6, v3);
    v30 = objc_msgSend(a1, "toolkitUIState");
    sub_100B5D148(v30, v29);
    v32 = v31;

    objc_msgSend(v24, "setScaledWidthForSlicingEraser:", v32);
    v33 = v54;
  }
  else
  {

    v34 = objc_msgSend(a1, "currentTool");
    v35 = objc_opt_self(CRLFreehandDrawingToolEraser);
    v36 = swift_dynamicCastObjCClass(v34, v35);

    v37 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    if (v36)
    {
      inited = swift_initStackObject(v37, v57);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v55 = 0;
      v56 = 0xE000000000000000;
      v33 = v54;
      _print_unlocked<A, B>(_:_:)(v54, &v55, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v39 = v55;
      v40 = v56;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v41 = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v39;
      *(_QWORD *)(inited + 64) = v41;
      *(_QWORD *)(inited + 40) = v40;
      ((void (*)(_BYTE *, _QWORD, uint64_t))v16)(v10, v50, v7);
      v42 = static PKEraserTool.EraserType.== infix(_:_:)(v33, v10);
      v26 = v53;
      v53(v10, v7);
      if ((v42 & 1) == 0)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 374, "Unknown eraser tool selection: %@", 33, 2u, inited);
        v26 = v53;
        sub_1004F5394(inited, (uint64_t)"updateEraser(for:)", 18, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2u, 374, (uint64_t)"Unknown eraser tool selection: %@", 33, 2u);
      }
      swift_setDeallocating(inited);
      v43 = *(_QWORD *)(inited + 16);
      v44 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, v43, v44);
    }
    else
    {
      v45 = swift_initStackObject(v37, v58);
      *(_OWORD *)(v45 + 16) = xmmword_100EF5E40;
      v46 = objc_msgSend(a1, "currentTool");
      *(_QWORD *)(v45 + 56) = sub_1004B8930(0, &qword_1014068B8, off_1012298B8);
      *(_QWORD *)(v45 + 64) = sub_100DE6F18();
      *(_QWORD *)(v45 + 32) = v46;
      sub_100757E04(&_mh_execute_header, (uint64_t)"updateEraser(for:)", 18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2, 376, "Unexpected tool for erase! %@", 29, 2u, v45);
      sub_1004F5394(v45, (uint64_t)"updateEraser(for:)", 18, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerManager.swift", 99, 2u, 376, (uint64_t)"Unexpected tool for erase! %@", 29, 2u);
      swift_setDeallocating(v45);
      v47 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v45 + 32, 1, v47);
      v33 = v54;
      v26 = v53;
    }
  }
  return v26(v33, v7);
}

double sub_100DE5EEC(uint64_t a1, uint64_t a2)
{
  return sub_100DE5F08(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for PKEraserTool, (uint64_t (*)(uint64_t))&PKToolPickerEraserItem.eraserTool.getter, (double (*)(uint64_t))&PKEraserTool.width.getter);
}

double sub_100DE5F08(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t), double (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v15;

  v7 = a3(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v15 - v10;
  v12 = a4(v9);
  v13 = a5(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v13;
}

uint64_t sub_100DE5FA4(void *a1)
{
  return sub_100DE5844(a1);
}

uint64_t type metadata accessor for CRLiOSPencilTrayPickerManager()
{
  return objc_opt_self(_TtC8Freeform29CRLiOSPencilTrayPickerManager);
}

uint64_t sub_100DE5FE4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  double v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v4 = type metadata accessor for PKInkingTool.InkType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100DE4244();
  objc_msgSend(a2, "opacityForToolType:", v8);
  v10 = v9;
  v11 = objc_msgSend(a2, "colorForToolType:", v8);
  v12 = objc_msgSend(v11, "colorWithAlphaComponent:", v10);

  v13 = objc_msgSend(v12, "UIColor");
  objc_msgSend(a2, "strokeWidthForToolType:", v8);
  v15 = v14;
  sub_1004B8930(0, &qword_1014149C8, PKToolPickerInkingItem_ptr);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  return PKToolPickerInkingItem.init(type:color:width:identifier:)(v7, v13, v15, 0, 0, 0);
}

id sub_100DE6148(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned int *v10;
  id result;
  double v12;
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for PKEraserTool.EraserType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v14 - v7;
  v9 = objc_msgSend(a1, "eraserToolErasesWholeObjects");
  v10 = (unsigned int *)&enum case for PKEraserTool.EraserType.vector(_:);
  if (!v9)
    v10 = (unsigned int *)&enum case for PKEraserTool.EraserType.fixedWidthBitmap(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v8, *v10, v2);
  result = objc_msgSend(a1, "strokeWidthIndexForToolType:", 8);
  if ((unint64_t)result > 4)
  {
    __break(1u);
  }
  else
  {
    v12 = *((double *)&off_101263870 + (_QWORD)result + 4);
    sub_1004B8930(0, &qword_1014149C0, PKToolPickerEraserItem_ptr);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    v13 = PKToolPickerEraserItem.init(type:width:)(v6, v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return (id)v13;
  }
  return result;
}

uint64_t sub_100DE6298(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v23;

  v2 = type metadata accessor for PKToolPickerCustomItem.Configuration(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10 = String._bridgeToObjectiveC()();
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "localizedStringForKey:value:table:", v10, v11, 0);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  PKToolPickerCustomItem.Configuration.init(identifier:name:)(0xD000000000000017, 0x8000000100FFA3A0, v13, v15);
  PKToolPickerCustomItem.Configuration.imageProvider.setter(sub_100DE44F8, 0);
  objc_msgSend(a1, "opacityForToolType:", 7);
  v17 = v16;
  v18 = objc_msgSend(a1, "colorForToolType:", 7);
  v19 = objc_msgSend(v18, "colorWithAlphaComponent:", v17);

  v20 = objc_msgSend(v19, "UIColor");
  PKToolPickerCustomItem.Configuration.defaultColor.setter(v20);
  PKToolPickerCustomItem.Configuration.allowsColorSelection.setter(1);
  sub_1004B8930(0, &qword_101414980, PKToolPickerCustomItem_ptr);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v21 = PKToolPickerCustomItem.init(configuration:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v21;
}

uint64_t sub_100DE64E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

double sub_100DE6504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100DE6514(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

id sub_100DE651C(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4;
  Swift::String v5;
  NSString v6;
  void *v7;
  id v8;
  uint64_t v9;
  Swift::String v10;
  NSString v11;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v13;
  Swift::String v14;
  NSString v15;
  id v16;
  uint64_t v17;
  Swift::String v18;
  NSString v19;
  id v20;
  uint64_t v21;
  Swift::String v22;
  NSString v23;
  id v24;
  id v25;
  double v26;
  double v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t inited;
  uint64_t v38;
  Swift::String v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  id v45;
  id v46;
  id v47;
  void **aBlock;
  uint64_t v49;
  void (*v50)(uint64_t, void *);
  void *v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  _BYTE v54[80];

  v2 = (id)v1;
  v4 = *(_QWORD *)(v1 + 24);
  aBlock = *(void ***)(v1 + 16);
  v49 = v4;
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = 0x657361422FLL;
  v5._object = (void *)0xE500000000000000;
  String.append(_:)(v5);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v49);
  v7 = (void *)objc_opt_self(UIImage);
  v8 = objc_msgSend(v7, "imageNamed:", v6);

  v9 = *((_QWORD *)v2 + 3);
  aBlock = (void **)*((_QWORD *)v2 + 2);
  v49 = v9;
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = 0x6B73614D7069542FLL;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  v11 = String._bridgeToObjectiveC()();
  isEscapingClosureAtFileLocation = (uint64_t)objc_msgSend(v7, "imageNamed:", v11, swift_bridgeObjectRelease(v49).n128_f64[0]);

  v13 = *((_QWORD *)v2 + 3);
  aBlock = (void **)*((_QWORD *)v2 + 2);
  v49 = v13;
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = 0x746E6F437069542FLL;
  v14._object = (void *)0xEB0000000072756FLL;
  String.append(_:)(v14);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v7, "imageNamed:", v15, swift_bridgeObjectRelease(v49).n128_f64[0]);

  v17 = *((_QWORD *)v2 + 3);
  aBlock = (void **)*((_QWORD *)v2 + 2);
  v49 = v17;
  swift_bridgeObjectRetain(v17);
  v18._countAndFlagsBits = 0x73614D646E61422FLL;
  v18._object = (void *)0xE90000000000006BLL;
  String.append(_:)(v18);
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v7, "imageNamed:", v19, swift_bridgeObjectRelease(v49).n128_f64[0]);

  v21 = *((_QWORD *)v2 + 3);
  aBlock = (void **)*((_QWORD *)v2 + 2);
  v49 = v21;
  swift_bridgeObjectRetain(v21);
  v22._countAndFlagsBits = 0x6E6F43646E61422FLL;
  v22._object = (void *)0xEC00000072756F74;
  String.append(_:)(v22);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v7, "imageNamed:", v23, swift_bridgeObjectRelease(v49).n128_f64[0]);

  if (!v8)
    goto LABEL_4;
  v25 = v8;
  objc_msgSend(v25, "size");
  v46 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:", v26, v27);
  v28 = (_QWORD *)swift_allocObject(&unk_1012A6FE8, 72, 7);
  v28[2] = v25;
  v28[3] = a1;
  v28[4] = isEscapingClosureAtFileLocation;
  v28[5] = v16;
  v29 = v20;
  v28[6] = v20;
  v28[7] = v24;
  v28[8] = v2;
  v30 = swift_allocObject(&unk_1012A7010, 32, 7);
  *(_QWORD *)(v30 + 16) = sub_100DE6AB8;
  *(_QWORD *)(v30 + 24) = v28;
  v52 = sub_10078E48C;
  v53 = (void *)v30;
  aBlock = _NSConcreteStackBlock;
  v49 = *(_QWORD *)"";
  v50 = sub_100592EB8;
  v51 = &unk_1012A7028;
  v31 = v16;
  v44 = _Block_copy(&aBlock);
  v16 = v53;
  v32 = v25;
  swift_retain(v2);
  v33 = a1;
  v45 = (id)isEscapingClosureAtFileLocation;
  v20 = v31;
  v34 = v29;
  v35 = v24;
  swift_retain(v30);
  v24 = v44;
  v2 = objc_msgSend(v46, "imageWithActions:", v44, swift_release(v16).n128_f64[0]);

  _Block_release(v44);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v30, "", 106, 64, 31, 1);
  swift_release(v28);
  swift_release(v30);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_4:
    v36 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v36, v54);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v38 = *((_QWORD *)v2 + 3);
    aBlock = (void **)*((_QWORD *)v2 + 2);
    v49 = v38;
    swift_bridgeObjectRetain(v38);
    v39._countAndFlagsBits = 0x657361422FLL;
    v39._object = (void *)0xE500000000000000;
    String.append(_:)(v39);
    v47 = v24;
    v40 = aBlock;
    v41 = v49;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v40;
    *(_QWORD *)(inited + 40) = v41;
    sub_100757E04(&_mh_execute_header, (uint64_t)"makeImage(color:width:)", 23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerImageProviding.swift", 106, 2, 59, "Unable to load baseImage for tool %{public}@", 44, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"makeImage(color:width:)", 23, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPencilTrayPickerImageProviding.swift", 106, 2u, 59, (uint64_t)"Unable to load baseImage for tool %{public}@", 44, 2u);
    swift_setDeallocating(inited);
    v42 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v42);
    v2 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");

  }
  return v2;
}

uint64_t sub_100DE6A64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_100DE6AB8()
{
  uint64_t v0;

  sub_100DE6ADC(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100DE6ACC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100DE6ADC(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  id v31;
  id v32;
  double v33;
  int v34;
  NSString v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;

  objc_msgSend(a1, "size");
  v15 = v14;
  v17 = v16;
  objc_msgSend(a1, "drawInRect:", 0.0, 0.0, v14, v16);
  v18 = objc_msgSend(a2, "colorWithAlphaComponent:", 1.0);
  if (a3 && a4)
  {
    v19 = a3;
    v20 = a4;
    v21 = objc_msgSend(v19, "imageWithTintColor:", v18);
    objc_msgSend(v21, "drawInRect:", 0.0, 0.0, v15, v17);
    objc_msgSend(v20, "drawInRect:", 0.0, 0.0, v15, v17);

  }
  if (a5 && a6)
  {
    v22 = a5;
    v23 = a6;
    v24 = objc_msgSend(v22, "imageWithTintColor:", v18);
    objc_msgSend(v24, "size");
    v26 = v25;
    v27 = *(double *)(a7 + 32);
    objc_msgSend(v24, "size");
    v29 = v28;
    objc_msgSend(v24, "drawInRect:", 0.0, v27, v28, v26);
    objc_msgSend(v23, "drawInRect:", 0.0, v27, v29, v26);

  }
  v30 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v30, "setClipsToBounds:", 0);
  v31 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 8.0);
  objc_msgSend(v30, "setFont:", v31);

  v32 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  objc_msgSend(v30, "setTextColor:", v32);

  v48 = 0.0;
  objc_msgSend(a2, "getWhite:alpha:", 0, &v48);
  v33 = round(v48 * 100.0);
  if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v33 <= -1.0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  if (v33 >= 256.0)
    goto LABEL_16;
  v34 = (int)v33;
  if ((int)v33 < 0x64)
  {
    v37 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v38 = swift_allocObject(v37, 72, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100EF5E40;
    *(_QWORD *)(v38 + 56) = &type metadata for UInt8;
    *(_QWORD *)(v38 + 64) = &protocol witness table for UInt8;
    *(_BYTE *)(v38 + 32) = v34;
    static String.localizedStringWithFormat(_:_:)(6581285, 0xE300000000000000, v38);
    v40 = v39;
    swift_bridgeObjectRelease(v38);
    v35 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v36 = swift_bridgeObjectRelease(v40).n128_u64[0];
  }
  else
  {
    v35 = String._bridgeToObjectiveC()();
  }
  objc_msgSend(v30, "setText:", v35, v36);

  objc_msgSend(v30, "sizeToFit");
  objc_msgSend(v30, "frame");
  v42 = v41;
  v44 = v43;
  objc_msgSend(a1, "size");
  v46 = v45;
  objc_msgSend(v30, "frame");
  objc_msgSend(v30, "drawTextInRect:", (v46 - v47) * 0.5, *(double *)(a7 + 40), v42, v44);

}

unint64_t sub_100DE6F18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1014068C0;
  if (!qword_1014068C0)
  {
    v1 = sub_1004B8930(255, &qword_1014068B8, off_1012298B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1014068C0);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC8FreeformP33_719A53B42C790751310A3B1F79A2986719ResourceBundleClass);
}

uint64_t sub_100DE6F98()
{
  return sub_100DE7130(1);
}

uint64_t sub_100DE6FA0(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_10147E328 == -1)
  {
    if (qword_10147E330)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_10147E328, 0, (dispatch_function_t)sub_100DE7128);
    if (qword_10147E330)
      goto LABEL_3;
  }
  if (qword_10147E320 == -1)
  {
    v9 = dword_10147E310 < a2;
    if (dword_10147E310 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_10147E320, 0, (dispatch_function_t)sub_100DE6F98);
    v9 = dword_10147E310 < a2;
    if (dword_10147E310 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_10147E314 > a3)
    return 1;
  return dword_10147E314 >= a3 && dword_10147E318 >= a4;
}

uint64_t sub_100DE7128()
{
  return sub_100DE7130(0);
}

uint64_t sub_100DE7130(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_10147E330;
  if (qword_10147E330)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_10147E330 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_10147E310, &dword_10147E314, &dword_10147E318);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100DE7468(void *a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v2 = a1;
  v3 = objc_msgSend((id)sub_10000B2A8(), "packedBacktraceString");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10000B23C();
  sub_10000B228((void *)&_mh_execute_header, v5, v6, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v7, v8, v9, v10, v11);

  sub_10000B254();
}

void sub_100DE74F8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "desc";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DE7588()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Fonts/CRLWPFont.m";
  v3 = 1024;
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to acquire a localized family name for: %@", v1);
  sub_10000B264();
}

void sub_100DE7618()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Fonts/CRLWPFont.m";
  v3 = 1024;
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Masquerading font with no localized name found: %@", v1);
  sub_10000B264();
}

void sub_100DE76A8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "desiredPostScriptName";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DE7738()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "fontFamily";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DE77C8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "desc";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DE7858()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need a file URL", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE78D8(void *a1)
{
  void *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10000DE74(a1);
  v2 = sub_10000DEB8();
  sub_10000DEA4(v2);
  sub_10000DEC0();
  sub_10000DE34((void *)&_mh_execute_header, v3, v4, "Failed to update zip archive with no cache flag, error: %{public}s", v5, v6, v7, v8, v9);

  sub_10000DE48();
}

void sub_100DE794C(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  void *v10;
  void *v11;
  os_log_t v12;
  os_log_type_t v13;
  const char *v14;
  uint8_t *v15;

  v5 = a2;
  v7 = (objc_class *)sub_10000DEAC((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "domain"));
  objc_msgSend(a3, "code");
  sub_10000DE8C();
  sub_10000DE7C();
  _os_log_error_impl(v11, v12, v13, v14, v15, 0x34u);

}

void sub_100DE7A30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't open the archive if it's already open.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE7AB0(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  id v9;
  void *v10;
  void *v11;
  os_log_t v12;
  os_log_type_t v13;
  const char *v14;
  uint8_t *v15;

  v5 = a1;
  v7 = (objc_class *)sub_10000DEAC((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  objc_claimAutoreleasedReturnValue(v8);
  v9 = objc_msgSend((id)sub_10000B2A8(), "domain");
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(a2, "code");
  sub_10000DE8C();
  sub_10000DE7C();
  _os_log_error_impl(v11, v12, v13, v14, v15, 0x2Au);

}

void sub_100DE7B7C(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v3 = sub_10000DE74(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "path"));
  sub_10000DEC0();
  sub_10000DE34((void *)&_mh_execute_header, v5, v6, "Failed to write to temporary zip file: %@", v7, v8, v9, v10, v11);

  sub_10000DE48();
}

void sub_100DE7C08(void *a1)
{
  id v1;
  void *v2;
  os_log_t v3;
  os_log_type_t v4;
  const char *v5;
  uint8_t *v6;
  void *v7;

  v1 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10000DE7C();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x12u);

  sub_10000B254();
}

void sub_100DE7CB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d File should be opened.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE7D38(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "File isn't open", v1, 2u);
}

void sub_100DE7D78(void *a1)
{
  void *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10000DE74(a1);
  v2 = sub_10000DEB8();
  sub_10000DEA4(v2);
  sub_10000DEC0();
  sub_10000DE34((void *)&_mh_execute_header, v3, v4, "Failed to update zip read channel with no cache flag, error: %{public}s", v5, v6, v7, v8, v9);

  sub_10000DE48();
}

void sub_100DE7DEC(void *a1)
{
  void *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10000DE74(a1);
  v2 = sub_10000DEB8();
  sub_10000DEA4(v2);
  sub_10000DEC0();
  sub_10000DE34((void *)&_mh_execute_header, v3, v4, "Failed to create read channel with error: %{public}s", v5, v6, v7, v8, v9);

  sub_10000DE48();
}

void sub_100DE7E60()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint8_t *v4;
  NSObject *v5;

  sub_10000FF14();
  sub_10000FEEC(v1, v2, v3, 1.5047e-36);
  sub_10000FF04((void *)&_mh_execute_header, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4, v5);

  sub_10000FF24();
}

void sub_100DE7E9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot initialize with a nil storage.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE7F1C()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLWPLayoutManager initWithStorage:owner:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutManager.mm";
  v6 = 1024;
  v7 = 110;
  v8 = v0;
  v9 = "_topicNumbers";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DE7FC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Autogrow with multiple columns is not supported", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE8048()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout manager mismatch", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE80C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for 'columnsArray'", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE8148(void *a1, uint64_t a2, int a3, NSObject *a4)
{
  id v6;

  *(_DWORD *)a2 = 67110146;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2082;
  *(_QWORD *)(a2 + 10) = "+[CRLWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeigh"
                         "t:height:alreadyHasMargins:styleProvider:]";
  *(_WORD *)(a2 + 18) = 2082;
  *(_QWORD *)(a2 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPLayoutManager.mm";
  *(_WORD *)(a2 + 28) = 1024;
  *(_DWORD *)(a2 + 30) = 562;
  *(_WORD *)(a2 + 34) = 2114;
  *(_QWORD *)(a2 + 36) = a1;
  v6 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d newColumnCount shouldn't be 0. %{public}@", (uint8_t *)a2, 0x2Cu);

}

void sub_100DE81F0(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v5[0] = 67109378;
  v5[1] = a2;
  v6 = 2114;
  v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);

}

void sub_100DE82B0(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLSwappableAxesGeometry knobTagForStandardKnobTag:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLSwappableAxesGeometry.m";
  v7 = 1024;
  v8 = 88;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected knob tag", (uint8_t *)v2, 0x22u);
}

void sub_100DE8358(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10000B23C();
  sub_10000B228((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B264();
}

void sub_100DE83F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE8490()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE852C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;

  v2[0] = 67110402;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLBoardItemFactoryObjCHelper p_bezierAndStrokePathDataSubpathsByClippingBezier:andStrokePathData:toPath:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactoryObjCHelper.m";
  v7 = 1024;
  v8 = 125;
  v9 = 2082;
  v10 = "BOOLeanPathMap.elementCount";
  v11 = 2082;
  v12 = "clippedPath.elementCount";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v2, 0x36u);
}

void sub_100DE85F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't create an image pattern without an image", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE8674()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to get lightness of a nil color", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE86F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to get lightness of a nil color", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE8774(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100013B20((void *)&_mh_execute_header, a1, a3, "inflateInit2 failed", a5, a6, a7, a8, 0);
  sub_100013B30();
}

void sub_100DE87A4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10000B23C();
  sub_10000B228((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100DE8838()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_10000B278();
  sub_100013B38();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x2Cu);
}

void sub_100DE88E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100013B20((void *)&_mh_execute_header, a1, a3, "Stream is incomplete.", a5, a6, a7, a8, 0);
  sub_100013B30();
}

void sub_100DE8910(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100013B20((void *)&_mh_execute_header, a1, a3, "CRC does not match.", a5, a6, a7, a8, 0);
  sub_100013B30();
}

void sub_100DE8940()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_100013B38();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0xCu);
}

void sub_100DE89B0()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_10000B278();
  sub_100013B38();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x22u);
}

void sub_100DE8A48()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_100013B38();
  _os_log_error_impl(v0, v1, v2, v3, v4, 8u);
  sub_100013B30();
}

void sub_100DE8ABC(int a1, NSObject *a2)
{
  _DWORD v3[2];
  __int16 v4;
  id v5;

  v3[0] = 67109378;
  v3[1] = a1;
  v4 = 2114;
  v5 = +[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v3, 0x12u);
}

void sub_100DE8B5C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to remove out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8BDC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set title for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8C5C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get title for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8CDC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set image for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8D5C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get image for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8DDC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set width of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8E5C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get width for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8EDC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set edge insets for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8F5C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get edge insets for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE8FDC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to set enabled state for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE905C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to get enabled state for out of bounds segment index: %lu");
  sub_10000B264();
}

void sub_100DE90DC()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[20];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Controls/CRLiOSMultipaneSegmentedControl.m";
  v4 = 1024;
  v5 = 876;
  v6 = v0;
  v7 = "segment";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
  sub_10000B264();
}

void sub_100DE9180(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;

  v3 = *a1;
  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLBezierHitTester addPath:filled:pathID:crawlingDistance:clippedToRect:]";
  v7 = 2082;
  v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierHitTester.mm";
  v9 = 1024;
  v10 = 178;
  v11 = 2048;
  v12 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to add a path with pathID that already exists (%lu)", (uint8_t *)v4, 0x2Cu);
}

void sub_100DE923C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Passing a crawlingDistance greater than the default may cause unexpected problems hit testing with some methods.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE92BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to remove a path that is not in the hit tester.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE933C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method was not designed for use with filled paths.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE93BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -pathsCrossingPath:withSearchThreshold: does not support large crawling distances.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE943C()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLImageRepSizingState initWithDesiredSize:provider:maskPath:wideGamutCanvas:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRepSizingState.m";
  v6 = 1024;
  v7 = 32;
  v8 = v0;
  v9 = "provider";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DE94E8()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLImageRepSizingState generateSizedImage]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRepSizingState.m";
  v6 = 1024;
  v7 = 59;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong thread", v2, 0x22u);
}

void sub_100DE9584()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d storage is nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE9604()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d storage is nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE9684()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to clip with null update rect", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE9704()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid line fragment range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE9784()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected color fill", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE9804()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invisibles mismatch", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE9884()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d mismatched adornment counts", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DE9904(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  _BYTE v4[36];

  LODWORD(v3) = 67110146;
  HIDWORD(v3) = a2;
  *(_WORD *)v4 = 2082;
  *(_QWORD *)&v4[2] = "+[CRLPasteboard pasteboardWithUniqueName]_block_invoke";
  *(_WORD *)&v4[10] = 2082;
  *(_QWORD *)&v4[12] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboard.m";
  *(_WORD *)&v4[20] = 1024;
  *(_DWORD *)&v4[22] = 185;
  *(_WORD *)&v4[26] = 2114;
  *(_QWORD *)&v4[28] = a1;
  sub_100019580((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Pasteboard already exists with unique name %{public}@", v3, *(_QWORD *)v4, *(_QWORD *)&v4[8], *(_QWORD *)&v4[16], *(_QWORD *)&v4[24], *(_DWORD *)&v4[32]);
  sub_10000B264();
}

void sub_100DE99A8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to create pasteboard with name %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100DE9A1C(_QWORD *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  _BYTE v4[36];

  LODWORD(v3) = 67110146;
  HIDWORD(v3) = a2;
  *(_WORD *)v4 = 2082;
  *(_QWORD *)&v4[2] = "-[CRLPasteboardUIPasteboard reloadPasteboardItemIndexCacheIfNeeded]";
  *(_WORD *)&v4[10] = 2082;
  *(_QWORD *)&v4[12] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboard.m";
  *(_WORD *)&v4[20] = 1024;
  *(_DWORD *)&v4[22] = 849;
  *(_WORD *)&v4[26] = 2048;
  *(_QWORD *)&v4[28] = *a1;
  sub_100019580((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected pasteboard item count should be zero, was %tu.", v3, *(_QWORD *)v4, *(_QWORD *)&v4[8], *(_QWORD *)&v4[16], *(_QWORD *)&v4[24], *(_DWORD *)&v4[32]);
  sub_10000B264();
}

void sub_100DE9AC4(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLDragAndDropInfo initWithPlatformDraggingInfo:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragAndDropInfo.m";
  v7 = 1024;
  v8 = 63;
  v9 = 2082;
  v10 = "_itemSource";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100DE9B7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE9C08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE9C94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE9D20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE9DAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE9E38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE9EC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE9F50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DE9FDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEA070()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEA104()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLFreehandDrawingPKSelectionManager that has already been torn down.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA184()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLFreehandDrawingPKSelectionManager.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA204()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not begin suppressing smart selection when it is already suppressed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA284()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not end suppressing smart selection when it is not suppressed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA304()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Drawing attachment has no drawing.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA384()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEA418()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA498()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLCanvasCommandSelectionBehavior initWithCanvasEditor:type:selectionPath:selectionFlags:commitSelectionFlags:f"
       "orwardSelectionFlags:reverseSelectionFlags:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCanvasCommandSelectionBehavior.m";
  v6 = 1024;
  v7 = 26;
  v8 = v0;
  v9 = "editor";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DEA544()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLCanvasCommandSelectionBehavior initWithCanvasEditor:type:constructedInfos:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCanvasCommandSelectionBehavior.m";
  v6 = 1024;
  v7 = 95;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Constructed infos should not be provided for this selection type", v2, 0x22u);
}

void sub_100DEA5E0(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;

  v3 = *a1;
  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLPlatformControlState hash]";
  v7 = 2082;
  v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLPlatformControlState.m";
  v9 = 1024;
  v10 = 65;
  v11 = 2048;
  v12 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad value: %zd", (uint8_t *)v4, 0x2Cu);
}

void sub_100DEA69C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only vector images are supported", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA71C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil image is set", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA79C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only vector images are supported", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA81C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE48();
}

void sub_100DEA89C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't have an image to use", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEA91C(void *a1, int a2)
{
  NSObject *v2;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  _DWORD v8[6];

  v4 = a1;
  v5 = objc_msgSend((id)sub_10000B2A8(), "packedBacktraceString");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v8[0] = 67109378;
  v8[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v2, v7, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v8);

  sub_10000B254();
}

void sub_100DEA9BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called i_common init twice on same object!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEAA3C(uint64_t a1, int a2)
{
  __int16 v2;
  int v3;
  os_log_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;

  v5[0] = 67110146;
  v5[1] = a2;
  v6 = 2082;
  v7 = "-[CRLBitmapImageProvider isValid]_block_invoke_2";
  v8 = 2082;
  sub_10000B28C();
  v9 = 174;
  v10 = v2;
  v11 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Didn't update validation failure type during validation! isValid? %i", (uint8_t *)v5, 0x28u);
  sub_10000DE48();
}

void sub_100DEAAF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be drawing an invalid image provider", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEAB74(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEAC1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100DEACB4(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEAD5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image provider trying to render an image at natural size", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEADDC(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEAE84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to get an image out of an invalid image provider.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEAF04(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEAFAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image provider trying to render an image at natural size", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEB02C(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEB0D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d using context to determine requested image size. contents scale provider should be nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEB154(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEB1FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image provider trying to render an image at natural size", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEB27C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never load full-sized image if we have been asked to load the largest safe image!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEB2FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never load largestSafeImage if we can load the full-sized image!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEB37C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100DEB414(void *a1, uint64_t a2, int a3)
{
  uint8_t *v4;
  NSObject *v5;

  sub_10000FEEC((uint64_t)a1, a2, a3, 1.5047e-36);
  sub_10000FF04((void *)&_mh_execute_header, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4, v5);

}

void sub_100DEB45C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "void nextPivotAndBlackVectors(CGPoint, CGPoint, CGPoint &, CGPoint &)";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageTracer.mm";
  v7 = 1024;
  v8 = 106;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected pivot and black points while tracing", (uint8_t *)v2, 0x22u);
}

void sub_100DEB504()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d iOS and QL do not support setting the guide color", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEB584()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "icc";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DEB614()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "rep";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DEB6A4(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEB74C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning alignment with no reps", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEB7CC(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEB874()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;

  sub_10004CE88();
  v3 = "-[CRLCanvasGuideController beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingGuides:]";
  v4 = v0;
  sub_10000B28C();
  sub_10004CE74();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Guide state unexpected when begin alignment operation! %lu", v2);
  sub_10000B264();
}

void sub_100DEB904(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEB9AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEBA2C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "_alignmentFrameInRootByLayout";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DEBABC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Did not end previous alignment operation before beginning new one", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEBB3C()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;

  sub_10004CE88();
  v3 = "-[CRLCanvasGuideController beginAlignmentOperationForReps:preventCenterGuides:preventSpacingGuides:preventSizingG"
       "uides:]_block_invoke";
  v4 = v0;
  sub_10000B28C();
  sub_10004CE74();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Guide state unexpected when do second pass on begin generation! %lu", v2);
  sub_10000B264();
}

void sub_100DEBBD0(void *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  NSObject *v11;
  NSString *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  CGRect v23;

  v11 = a1;
  v23.origin.x = a3;
  v23.origin.y = a4;
  v23.size.width = a5;
  v23.size.height = a6;
  v12 = NSStringFromCGRect(v23);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v16[0] = 67110146;
  v16[1] = a2;
  v17 = 2082;
  sub_10000B29C();
  v18 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m";
  v19 = 1024;
  v20 = 800;
  v21 = 2112;
  v22 = v14;
  sub_10000B26C((void *)&_mh_execute_header, v11, v15, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad rect for snap rect! %@", (uint8_t *)v16);

}

void sub_100DEBCDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEBD5C(int a1, NSObject *a2)
{
  id v4;
  uint64_t v5;
  _DWORD v6[6];

  v4 = (id)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a1;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, a2, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEBE00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to do guide operation for an unsupported knob type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEBE80(int a1, NSObject *a2)
{
  id v4;
  uint64_t v5;
  _DWORD v6[6];

  v4 = (id)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a1;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, a2, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DEBF24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEBFA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEC024()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEC0A4()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;

  sub_10004CE88();
  v3 = "-[CRLCanvasGuideController endAlignmentOperation]_block_invoke";
  v4 = v0;
  sub_10000B28C();
  sub_10004CE74();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Working on cancellation/cleanup when state doesn't expect it! %lu", v2);
  sub_10000B264();
}

void sub_100DEC138()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[20];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  uint64_t v7;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasGuideController.m";
  v4 = 1024;
  v5 = 1677;
  v6 = 2048;
  v7 = v0;
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected knob tag %zu", v2);
  sub_10000B264();
}

void sub_100DEC1D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected edge type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEC254()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "value";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DEC2E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEC364()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEC3E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEC464()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Guide must have an associated spacing.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEC4E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEC580()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEC61C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called i_common init twice on same object!", v2, v3, v4, v5, v6);
}

void sub_100DEC6A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be drawing an invalid image provider", v2, v3, v4, v5, v6);
}

void sub_100DEC724(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  void *v17;

  v5 = a1;
  v6 = objc_msgSend((id)sub_10000B2A8(), "error");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9[0] = 67110146;
  v9[1] = a3;
  v10 = 2082;
  v11 = "-[CRLMoviePosterImageGenerator p_copyCGImageUsingAssetReaderForTime:]";
  v12 = 2082;
  v13 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePosterImageGenerator.m";
  v14 = 1024;
  v15 = 111;
  v16 = 2112;
  v17 = v7;
  sub_10000B26C((void *)&_mh_execute_header, v3, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to copy buffer when generating poster frame using AVAssetReader (error: %@). Falling back to AVAssetImageGenerator.", (uint8_t *)v9);

}

void sub_100DEC808()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLMoviePosterImageGenerator p_copyCGImageUsingAssetImageGeneratorForTime:error:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePosterImageGenerator.m";
  v7 = 1024;
  v8 = 165;
  v9 = v0;
  v10 = "_assetImageGenerator";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100DEC8AC()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLMoviePosterImageGenerator generateCGImageAsynchronouslyForTime:completionHandler:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePosterImageGenerator.m";
  v7 = 1024;
  v8 = 214;
  v9 = v0;
  v10 = "handler";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100DEC950()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have two swatches!", v2, v3, v4, v5, v6);
}

void sub_100DEC9D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Subclasses must override", v2, v3, v4, v5, v6);
}

void sub_100DECA58()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 89;
  v5 = v0;
  v6 = "_categorySort != nil";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v3);
  sub_10000B264();
}

void sub_100DECAEC()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 86;
  v5 = v0;
  v6 = "_libraryURL != nil";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v3);
  sub_10000B264();
}

void sub_100DECB80()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibrary.m";
  sub_100057230();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shape library shape from result is nil: %@", v1);
  sub_10000B264();
}

void sub_100DECC0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DECC8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DECD0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DECD8C(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;

  v5 = a1;
  v6 = objc_msgSend((id)sub_10000B2A8(), "p_libraryURL");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9[0] = 67110146;
  v9[1] = a3;
  v10 = 2082;
  sub_10000B29C();
  v11 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibrary.m";
  sub_100057230();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v3, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No data found at search library URL: %@", (uint8_t *)v9);

}

void sub_100DECE5C(uint64_t a1, NSObject *a2)
{
  int v2;
  const __CFString *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 138412546;
  v3 = CFSTR("shape_library");
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error: Could not parse %@ with error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_100DECEE4()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[20];
  const char *v3;
  int v4;
  __int16 v5;
  const __CFString *v6;
  __int16 v7;
  uint64_t v8;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibrary.m";
  sub_100057230();
  v4 = 311;
  v5 = 2112;
  v6 = CFSTR("shape_library");
  v7 = 2112;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error: Could not parse %@ with error: %@", v2, 0x36u);
  sub_10000B264();
}

void sub_100DECF94()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibrary.m";
  sub_100057230();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Found no categories in the shape librarian data: %@", v1);
  sub_10000B264();
}

void sub_100DED020()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shape Librarian data file did not have a keywordDelimiter.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED0A0()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 391;
  v5 = v0;
  v6 = "library";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DED134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Did not properly clean up drag and drop!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED1B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DED248()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DED2DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DED370(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to get object from drop of native objects", v1, 2u);
}

void sub_100DED3B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never transition to state None. That's only for starting!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED430()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only receive promises from state Waiting.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED4B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only begin waiting for promises from state None.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED530()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only receive promises from state Waiting.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED5B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not transition to a new state after we have completed a drag.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED630(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLTextInputResponder(ObjCExtension) forwardInvocation:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLTextInputResponder.m";
  v7 = 1024;
  v8 = 62;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The OS undo gestures should not be sending us selectors we can't respond to!", (uint8_t *)v2, 0x22u);
}

void sub_100DED6D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED758()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED7D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED858()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED8D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED958()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DED9D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEDA58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Abstract method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEDAD8(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000B29C();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMetalShaderManager.m";
  v7 = 1024;
  v8 = 57;
  v9 = 2112;
  v10 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create library, error %@", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100DEDB80()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 70;
  v5 = v0;
  v6 = "namedShader";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DEDC14()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 83;
  v5 = v0;
  v6 = "namedShader";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DEDCA8()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 97;
  v5 = v0;
  v6 = "namedSampler";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DEDD3C(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;

  v1 = a1;
  v3 = (objc_class *)objc_opt_class(0, v2);
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "domain"));
  v7 = 138544130;
  v8 = v5;
  v9 = 2114;
  v10 = v6;
  v11 = 2048;
  v12 = objc_msgSend(0, "code");
  v13 = 2112;
  v14 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to register native object to item providererrorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v7, 0x2Au);

}

void sub_100DEDE2C(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100DEDECC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Somehow didn't end up with the same number of board items", v2, v3, v4, v5, v6);
}

void sub_100DEDF50(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100DEDFF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEE07C(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  v3 = objc_msgSend((id)sub_10000B2A8(), "packedBacktraceString");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10000B23C();
  sub_1000437A4((void *)&_mh_execute_header, v1, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v6);

  sub_10000B254();
}

void sub_100DEE114()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEE1A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEE22C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requestedViewScale should never be negative.", v2, v3, v4, v5, v6);
}

void sub_100DEE2B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEE33C(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a2 = 67109378;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2114;
  *(_QWORD *)(a2 + 10) = a1;
  sub_1000437A4((void *)&_mh_execute_header, a4, a3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)a2);

}

void sub_100DEE398()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Angle out of range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEE418()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Angle out of range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEE498()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLSizeExpandedToMatchAspectRatio() actually shrank the size", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEE518()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot give scale = 0 for CRLRoundedRectForScale!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEE598()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot give scale = 0 for CRLRoundedRectForScale!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEE618(uint8_t *a1, void *a2, void *a3, _QWORD *a4)
{
  NSObject *v7;
  void *v8;

  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "registeredTypeIdentifiers"));
  *(_DWORD *)a1 = 138412290;
  *a4 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Content Identifiers: %@", a1, 0xCu);

}

void sub_100DEE698(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  int v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeRAWImage, "identifier"));
  v4 = 138543362;
  v5 = v2;
  sub_100065B74((void *)&_mh_execute_header, v1, v3, "Unable to load shared content of type %{public}@. Provided item is nil", (uint8_t *)&v4);

}

void sub_100DEE73C(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  v5 = a1;
  v7 = (objc_class *)sub_10000DEAC((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v10, v11, "Error copying shared item: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, v16);

  sub_100065B94();
}

void sub_100DEE7D8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_100065B74((void *)&_mh_execute_header, a2, a3, "Unable to resolve extension item to a supported type: %@", (uint8_t *)&v3);
}

void sub_100DEE844(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "localizedDescription"));
  v8 = 138543618;
  v9 = v6;
  v10 = 2114;
  v11 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to load shared content of type %{public}@ with error %{public}@", (uint8_t *)&v8, 0x16u);

}

void sub_100DEE914()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment failed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEE994(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  void *v17;

  v5 = a1;
  v6 = objc_msgSend((id)sub_10000B2A8(), "description");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9[0] = 67110146;
  v9[1] = a3;
  v10 = 2082;
  v11 = "+[CRLBrushStrokeLoader p_clearOnDiskCache]";
  v12 = 2082;
  v13 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStrokeLoader.m";
  v14 = 1024;
  v15 = 231;
  v16 = 2114;
  v17 = v7;
  sub_10000B26C((void *)&_mh_execute_header, v3, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %{public}@", (uint8_t *)v9);

}

void sub_100DEEA78()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "+[CRLBrushStrokeLoader p_loadImageForBrush:intoStorage:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStrokeLoader.m";
  v7 = 1024;
  v8 = 346;
  v9 = v0;
  v10 = "bounds";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100DEEB1C()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "+[CRLBrushStrokeLoader p_loadImageForBrush:intoStorage:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBrushStrokeLoader.m";
  v7 = 1024;
  v8 = 340;
  v9 = v0;
  v10 = "paths";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100DEEBC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No sections", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEEC40(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLFreehandDrawingToolAbstractPathInsertion p_preexistingFreehandDrawingLayoutForInsertingShapeWithFrameInRoot:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolAbstractPathInsertion.m";
  v7 = 1024;
  v8 = 209;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should be able to get z-order index path for freehand drawing. Bailing early to avoid accidental overlaps.", (uint8_t *)v2, 0x22u);
}

void sub_100DEECE8(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;

  v2[0] = 67110402;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLFreehandDrawingToolAbstractPathInsertion p_updateOrCreateParentDrawingToBestMatch]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolAbstractPathInsertion.m";
  v7 = 1024;
  v8 = 422;
  v9 = 2082;
  v10 = "closestDrawingLayout";
  v11 = 2082;
  v12 = "initialDrawingLayout";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", (uint8_t *)v2, 0x36u);
}

void sub_100DEEDB0(void *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  NSObject *v11;
  NSString *v12;
  void *v13;
  uint64_t v14;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  void *v23;
  CGRect v24;

  v11 = a1;
  v24.origin.x = a3;
  v24.origin.y = a4;
  v24.size.width = a5;
  v24.size.height = a6;
  v12 = NSStringFromCGRect(v24);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v15[0] = 67110146;
  v15[1] = a2;
  v16 = 2082;
  v17 = "-[CRLMultiselectResizeLayout computeLayoutGeometry]";
  v18 = 2082;
  v19 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMultiselectResizeLayout.m";
  v20 = 1024;
  v21 = 97;
  v22 = 2114;
  v23 = v13;
  sub_10000B26C((void *)&_mh_execute_header, v11, v14, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to determine proper layout geometry! Got %{public}@", (uint8_t *)v15);

}

void sub_100DEEEC0(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  v3[0] = 67110146;
  v3[1] = a1;
  v4 = 2082;
  v5 = "-[CRLMultiselectResizeLayout reliedOnLayouts]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLMultiselectResizeLayout.m";
  v8 = 1024;
  v9 = 105;
  v10 = 2082;
  v11 = "self.layoutController";
  sub_10000B26C((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v3);
}

void sub_100DEEF70(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPShapeRep initWithLayout:canvas:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeRep.m";
  v7 = 1024;
  v8 = 56;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad layout class", (uint8_t *)v2, 0x22u);
}

void sub_100DEF018(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;

  v2[0] = 67110402;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPShapeRep updateChildrenFromLayout]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeRep.m";
  v7 = 1024;
  v8 = 180;
  v9 = 2082;
  v10 = "self.containedRep.layout";
  v11 = 2082;
  v12 = "self.layout.textLayout";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v2, 0x36u);
}

void sub_100DEF0E0(void *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  objc_class *v5;
  NSString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  void *v16;

  v3 = a1;
  v5 = (objc_class *)objc_opt_class(a2, v4);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  v9 = 138544130;
  v10 = v7;
  v11 = 2114;
  v12 = v8;
  v13 = 2048;
  v14 = objc_msgSend(a2, "code");
  v15 = 2112;
  v16 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error creating NSString from data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v9, 0x2Au);

}

void sub_100DEF1D0(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLTextBoxingBoardItemProvider newBoardItemWithFactory:bakedSize:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLTextBoxingBoardItemProvider.m";
  v7 = 1024;
  v8 = 95;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Either the plain text string or the rich text string should be non-nil", (uint8_t *)v2, 0x22u);
}

void sub_100DEF278(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPLongPressGestureRecognizer touchesMoved:withEvent:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPLongPressGestureRecognizer.m";
  v7 = 1024;
  v8 = 56;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Time travel should have had a non-zero value here", (uint8_t *)v2, 0x22u);
}

void sub_100DEF320()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "+[CRLShapeLibraryShape p_stringForKey:inBaseStringsTableWithName:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibraryShape.m";
  v6 = 1024;
  v7 = 93;
  v8 = v0;
  v9 = "englishString";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DEF3CC()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLShapeLibraryShape positionInCategoryWithID:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibraryShape.m";
  v6 = 1024;
  v7 = 150;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must pass a categoryID when fetching a shape library shape's position.", v2, 0x22u);
}

void sub_100DEF468(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLSandboxedURL initWithURL:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLSandboxedURL.m";
  v8 = 1024;
  v9 = 39;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Sandboxed URL should not be initialized with a non-file URL. URL=%@", (uint8_t *)v3, 0x2Cu);
}

void sub_100DEF520()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Copy should never be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEF5A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Sanboxing access didn't transfer as expected to sandboxed URL copy.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEF620()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Copy should never be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEF6A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Sanboxing access didn't transfer as expected to sandboxed URL copy.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEF720()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEF7BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DEF858(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLStyledEditor copyStyle:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLStyledEditor.m";
  v7 = 1024;
  v8 = 160;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only copy style with a single object selected", (uint8_t *)v2, 0x22u);
}

void sub_100DEF900()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100DEF9A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not reuse an imager unless it has been explicitly marked as safe to reuse", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFA20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot call viewScale if scaledImageSize has been set.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFAA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d viewScale must be > 0.0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFB20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot call contentsScale if scaledImageSize has been set.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFBA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d contentsScale must be > 0.0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFC20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot call scaledImageSize if viewScale or contentsScale has been set.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFCA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d given a non-integral scaled image size", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFD20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't make an image with 0 width or height", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFDA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d given a non-integral maximum image size", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFE20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100DEFEC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong canvas", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFF40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong canvas", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DEFFC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong canvas", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF0040()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d both ratios in imager are zero!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF00C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Using a specific scaled image size and max image size at the same time is unsupported.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF0140()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be reusing context", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF01C0(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  v3[0] = 67110146;
  v3[1] = a1;
  v4 = 2082;
  v5 = "+[NSException(CRLAdditions) crl_raiseWithError:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSException_CRLAdditions.m";
  v8 = 1024;
  v9 = 14;
  v10 = 2082;
  v11 = "error != nil";
  sub_10000B26C((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100DF026C(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[NSException(CRLAdditions) crl_error]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSException_CRLAdditions.m";
  v8 = 1024;
  v9 = 28;
  v10 = 2112;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected NSException value for CRLErrorExceptionUserInfoKey: %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100DF0318()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF03A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF0430()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d PencilKit should handle dismissing other presented view controllers before we get here.", v2, v3, v4, v5, v6);
}

void sub_100DF04B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF0540()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF05CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000B29C();
  sub_10000B28C();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100DF0678()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color picker should not tell us it finished before telling us about the final color.", v2, v3, v4, v5, v6);
}

void sub_100DF06FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000B29C();
  sub_10000B28C();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100DF07A8(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLiOSPencilDownGestureRecognizer touchesBegan:withEvent:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSPencilDownGestureRecognizer.m";
  v7 = 1024;
  v8 = 25;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only see pencil input to this gesture.", (uint8_t *)v2, 0x22u);
}

void sub_100DF0850(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Data causing exception: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100DF08C4(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  void *v4;
  id v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17;

  v6 = a2;
  v8 = (objc_class *)sub_10000DEAC((uint64_t)v6, v7);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "domain"));
  sub_10007ECEC();
  sub_10007EC8C();
  sub_10007ECC4((void *)&_mh_execute_header, v11, v12, "Unable to decode data %p: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v13, v14, v15, v16, v17);

  sub_10007ECD8();
}

void sub_100DF0968(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  void *v4;
  id v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17;

  v6 = a2;
  v8 = (objc_class *)sub_10000DEAC((uint64_t)v6, v7);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "domain"));
  sub_10007ECEC();
  sub_10007EC8C();
  sub_10007ECC4((void *)&_mh_execute_header, v11, v12, "Error reading data from path %@, errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v13, v14, v15, v16, v17);

  sub_10007ECD8();
}

void sub_100DF0A0C(void *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  NSObject *v11;
  NSString *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  CGRect v23;

  v11 = a1;
  v23.origin.x = a3;
  v23.origin.y = a4;
  v23.size.width = a5;
  v23.size.height = a6;
  v12 = NSStringFromCGRect(v23);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v16[0] = 67110146;
  v16[1] = a2;
  v17 = 2082;
  sub_10000B29C();
  v18 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingTransformLayout.m";
  v19 = 1024;
  v20 = 96;
  v21 = 2114;
  v22 = v14;
  sub_10000B26C((void *)&_mh_execute_header, v11, v15, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to determine proper layout geometry! Got %{public}@", (uint8_t *)v16);

}

void sub_100DF0B18()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 104;
  v5 = v0;
  v6 = "self.layoutController";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DF0BAC()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 115;
  v5 = v0;
  v6 = "parentDrawing";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DF0C40()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 123;
  v5 = v0;
  v6 = "parentDrawing";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DF0CD4(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLImageCompatibilityConverter initWithImageData:desiredCompatibilityLevel:assetOwner:]";
  v7 = 2082;
  sub_10000B28C();
  v8 = 63;
  v9 = 2048;
  v10 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image converter created without need for conversion (level %zd)", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100DF0D7C()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 56;
  v5 = v0;
  v6 = "imageData != nil";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v3);
  sub_10000B264();
}

void sub_100DF0E10()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 73;
  v5 = v0;
  v6 = "mImageData";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DF0EA4()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 112;
  v5 = v0;
  v6 = "convertedImageDataWrapper";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DF0F38(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  v5 = sub_100081780(a1, __stack_chk_guard);
  v7 = (objc_class *)sub_100081774((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  sub_100081768();
  sub_100081754();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000816F8();
  sub_10008172C((void *)&_mh_execute_header, v10, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, v16);

  sub_100081740();
}

void sub_100DF0FF8(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  v5 = sub_100081780(a1, __stack_chk_guard);
  v7 = (objc_class *)sub_100081774((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  sub_100081768();
  sub_100081754();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000816F8();
  sub_10008172C((void *)&_mh_execute_header, v10, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, v16);

  sub_100081740();
}

void sub_100DF10B8(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  v5 = sub_100081780(a1, __stack_chk_guard);
  v7 = (objc_class *)sub_100081774((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  sub_100081768();
  sub_100081754();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000816F8();
  sub_10008172C((void *)&_mh_execute_header, v10, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error saving image data! errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, v16);

  sub_100081740();
}

void sub_100DF1178()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Directory has already been removed", v2, v3, v4, v5, v6);
}

void sub_100DF11FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Directory has already been removed", v2, v3, v4, v5, v6);
}

void sub_100DF1280(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *a2;
  v4 = 138412546;
  v5 = a1;
  v6 = 2112;
  v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to remove CRLTemporaryDirectory. Error: %@, path: %@", (uint8_t *)&v4, 0x16u);
}

void sub_100DF1308()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLTemporaryDirectory _createDirectoryWithSignature:subdirectory:error:]_block_invoke";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLTemporaryDirectory.m";
  v6 = 1024;
  v7 = 114;
  v8 = v0;
  v9 = "secretSubdirectoryNameBase";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DF13B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected editor controller!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF1434()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Callers to -[CRLCanvasEditor maskWithShape:] must have a -[tag] method to specify the shape type to use for the image mask.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF14B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas editor expects canvas selection!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF1534()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas editor expects canvas selection!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF15B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected a command group to be open.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF1634()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be given file promises in normal paste logic! App being copied from is misbehaving.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF16B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d couldn't find selected info in all drawables!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF1734()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLFreehandDrawingsAttachment that has already been torn down.", v2, v3, v4, v5, v6);
}

void sub_100DF17B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLFreehandDrawingsAttachment.", v2, v3, v4, v5, v6);
}

void sub_100DF183C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLCanvasLayer setController:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayer.m";
  v7 = 1024;
  v8 = 193;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't try to set canvasLayer's controller more than once", (uint8_t *)v2, 0x22u);
}

void sub_100DF18E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We should flip around which constraints are enabled by default.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF1964()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF19F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF1A84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF1B14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF1B94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to unhide Quick Select HUD but the HUD is not hidden.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF1C14(int a1)
{
  __int16 v1;
  os_log_t v2;
  _DWORD v3[2];
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;

  v3[0] = 67110402;
  v3[1] = a1;
  v4 = 2082;
  sub_10000B29C();
  sub_10000B28C();
  v5 = 752;
  v6 = v1;
  v7 = "_hudHidingCount";
  v8 = v1;
  v9 = "0";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
  sub_10000B264();
}

void sub_100DF1CCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF1D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  +[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString");
  sub_100098814();
  sub_100098800((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v2, v3, v4, v5, v6);
  sub_10009882C();
}

uint64_t sub_100DF1DC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v7;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't remove the first object of an empty array!", v2, v3, v4, v5, v7);
  if (qword_10147E370 == -1)
    return 1;
  dispatch_once(&qword_10147E370, &stru_1012329D8);
  return 0;
}

uint64_t sub_100DF1E7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v7;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d As this method returns the only object in the array, it only makes sense if the array has at most one object.", v2, v3, v4, v5, v7);
  if (qword_10147E370 == -1)
    return 1;
  dispatch_once(&qword_10147E370, &stru_101232AD0);
  return 0;
}

void sub_100DF1F34(uint64_t a1, uint8_t *buf, uint64_t a3, os_log_t log)
{
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)(buf + 4) = a3;
  *((_WORD *)buf + 6) = 2082;
  *(_QWORD *)(buf + 14) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error opening file at path %s: %{public}s", buf, 0x16u);
}

void sub_100DF1F88(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1;
  sub_10009A82C();
  sub_10009A818((void *)&_mh_execute_header, v3, v4, "Error cleaning up dispatch channel: %{public}s", v5, v6, v7, v8, 2u);

  sub_10000DE48();
}

void sub_100DF2004()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF2084()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF2104()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLFileIOChannel close]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLFileIOChannel.m";
  v6 = 1024;
  v7 = 259;
  v8 = v0;
  v9 = "_channel";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DF21B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel file descriptor is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF2230(void *a1, void *a2)
{
  void *v2;
  NSObject *v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  void *v17;

  v4 = a1;
  v6 = (objc_class *)objc_opt_class(a2, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = 138544130;
  v11 = v2;
  v12 = 2114;
  v13 = v9;
  v14 = 2048;
  v15 = objc_msgSend(a2, "code");
  v16 = 2112;
  v17 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "F_FULLFSYNC failed, errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v10, 0x2Au);

}

void sub_100DF231C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF239C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF241C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF249C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel file descriptor is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF251C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF259C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF261C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect to have a UUIDString for other object.", v2, v3, v4, v5, v6);
}

void sub_100DF26A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect to have a UUIDString.", v2, v3, v4, v5, v6);
}

void sub_100DF2724()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF27B0(uint64_t a1, int a2)
{
  uint64_t v2;
  os_log_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000B29C();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPDragAndDropHelper.m";
  v7 = 1024;
  v8 = 298;
  v9 = 2112;
  v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d source selection %@ is not a range", (uint8_t *)v4, 0x2Cu);
  sub_10000B264();
}

void sub_100DF2860()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF28EC()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLWPDragAndDropHelper handleDragOperation:withDragInfo:atUnscaledPoint:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPDragAndDropHelper.m";
  v6 = 1024;
  v7 = 235;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid drag selection", v2, 0x22u);
}

void sub_100DF2988()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF2A14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF2AA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF2B2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF2BB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only begin a transform dynamic operation when not in one already.", v2, v3, v4, v5, v6);
}

void sub_100DF2C3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only end a transform dynamic operation when in one already.", v2, v3, v4, v5, v6);
}

void sub_100DF2CC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF2D4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF2DD8(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLGroupRep recursivelyDrawInContext:keepingChildrenPassingTest:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupRep.m";
  v7 = 1024;
  v8 = 93;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid group transform; bailing out on group",
    (uint8_t *)v2,
    0x22u);
}

void sub_100DF2E80(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[UIResponder(CRLAdditions) crl_textInputSource]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/UIResponder_CRLAdditions.m";
  v7 = 1024;
  v8 = 19;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Responder does not respond to _textInputSource.", (uint8_t *)v2, 0x22u);
}

void sub_100DF2F28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF2FB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF3040()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF30CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF3158()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "mCachedImage";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DF31E8()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageFill.m";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image fill technique: %zu Defaulting to natural size.", v1);
  sub_10000B264();
}

void sub_100DF3274()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageFill.m";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image fill technique: %zu Defaulting to natural size.", v1);
  sub_10000B264();
}

void sub_100DF3300()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "smallContext";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DF3390()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "path";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DF3420()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-error provider has zero size.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF34A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d using context to determine requested image size. contentsScaleProvider should be nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3520()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bogus fill technique to apply to renderable", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF35A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Applying image fill with unsupported properties to CRLCanvasRenderable", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3620()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "ctx";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DF36B0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "ctx";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DF3740()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "path";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DF37D0(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  int v13;
  __int16 v14;
  uint64_t v15;

  v5 = a1;
  v6 = objc_msgSend((id)sub_10000B2A8(), "imageData");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v10[0] = 67110146;
  v10[1] = a3;
  v11 = 2082;
  sub_10000B29C();
  v12 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageFill.m";
  sub_100057230();
  v13 = 734;
  v14 = 2112;
  v15 = v8;
  sub_10000B26C((void *)&_mh_execute_header, v3, v9, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't draw CRLAsset with unknown image type: %@", (uint8_t *)v10);

}

void sub_100DF38AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d rectForFill must equal or contain the path bounds", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF392C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "clippingPath";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DF39BC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "path";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100DF3A4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image provider has error for image fill.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3ACC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image provider for image fill could not be validated and is nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3B4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image fill has a null tint color.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3BCC()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageFill.m";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid image fill technique: %zu Defaulting to natural size.", v1);
  sub_10000B264();
}

void sub_100DF3C58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Scale math changed the scale", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3CD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't set shouldTouchesOutsideCancel after loading the view", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3D58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't have more than one cancel button", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3DD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't add a cancel button after loading the view", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF3E58(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v4;
  id v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;

  v4 = a2;
  v5 = objc_msgSend((id)sub_10000B2A8(), "packedBacktraceString");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = 134218242;
  v8 = a1;
  v9 = 2114;
  v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Dismiss view controller %p backtrace: >>%{public}@<<", (uint8_t *)&v7, 0x16u);

  sub_10000B254();
}

void sub_100DF3F08(void *a1, uint64_t a2, NSObject *a3)
{
  void *v3;
  char v5;
  __CFString *v7;
  objc_class *v8;
  NSString *v9;
  int v10;
  void *v11;
  __CFString *v12;
  uint64_t v13;
  objc_class *v14;
  NSString *v15;
  void *v16;
  int v17;
  __CFString *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  __CFString *v24;
  __int16 v25;
  void *v26;

  v5 = a2;
  if (a1)
  {
    v8 = (objc_class *)objc_opt_class(a1, a2);
    v9 = NSStringFromClass(v8);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(v9);
  }
  else
  {
    v7 = CFSTR("Nil");
  }
  v10 = v5 & 1;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "presentedViewController"));
  if (v11)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "presentedViewController"));
    v14 = (objc_class *)objc_opt_class(v3, v13);
    v15 = NSStringFromClass(v14);
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue(v15);
  }
  else
  {
    v12 = CFSTR("Nil");
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "presentedViewController"));
  v17 = 138544386;
  v18 = v7;
  v19 = 2050;
  v20 = a1;
  v21 = 1024;
  v22 = v10;
  v23 = 2114;
  v24 = v12;
  v25 = 2050;
  v26 = v16;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Dismiss view controller: <%{public}@: %{public}p>, animated=%d, presentedViewController=<%{public}@: %{public}p>", (uint8_t *)&v17, 0x30u);

  if (v11)
  {

  }
  if (a1)

}

void sub_100DF406C()
{
  __int16 v0;
  __int16 v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[10];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v5 = "-[CRLiOSRepNudgeGestureRecognizer initWithInteractiveCanvasController:]";
  v6 = v0;
  sub_10000B28C();
  v7 = 69;
  v8 = v1;
  v9 = "icc";
  sub_10000B26C((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v4);
  sub_10000B264();
}

void sub_100DF4104(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  sub_1000AFCEC((void *)&_mh_execute_header, a1, a3, "nudge reset", v3);
  sub_100013B30();
}

void sub_100DF4138(void *a1, unint64_t a2)
{
  NSObject *v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;

  v3 = sub_10000DE74(a1);
  v4 = sub_10034792C(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v7 = 138412290;
  v8 = v5;
  sub_1000AFCF8((void *)&_mh_execute_header, v3, v6, "set state to %@", (uint8_t *)&v7);

  sub_10000DE48();
}

void sub_100DF41CC(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  sub_1000AFCEC((void *)&_mh_execute_header, a1, a3, "nudge failing during a scroll", v3);
  sub_100013B30();
}

void sub_100DF4200(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1000AFCEC((void *)&_mh_execute_header, a3, (uint64_t)a3, "setting first swipe touch", a1);
}

void sub_100DF4234(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1000AFCEC((void *)&_mh_execute_header, a3, (uint64_t)a3, "swipe touch is hitting the rep to be nudged. failing.", a1);
}

void sub_100DF4268(uint8_t *a1, uint64_t a2, uint64_t *a3, NSObject *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 80) + 1;
  *(_DWORD *)a1 = 134217984;
  *a3 = v4;
  sub_1000AFCF8((void *)&_mh_execute_header, a4, (uint64_t)a3, "adding another swipe touch (%tu)", a1);
}

void sub_100DF42B8(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLiOSRepNudgeGestureRecognizer touchesBegan:withEvent:]";
  v7 = 2082;
  sub_10000B28C();
  v8 = 124;
  v9 = 2048;
  v10 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d non-zero (%lu) swipe touches when there should be zero", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100DF4360(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  sub_1000AFCEC((void *)&_mh_execute_header, a1, a3, "changing anchor touch from swipe touch", v3);
  sub_100013B30();
}

void sub_100DF4394()
{
  __int16 v0;
  __int16 v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[10];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v5 = "-[CRLiOSRepNudgeGestureRecognizer touchesBegan:withEvent:]";
  v6 = v0;
  sub_10000B28C();
  v7 = 119;
  v8 = v1;
  v9 = "_anchorTouch";
  sub_10000B26C((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v4);
  sub_10000B264();
}

void sub_100DF442C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d anchor touch not null when first touch comes down", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF44AC(void *a1, CGFloat a2, CGFloat a3)
{
  NSObject *v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  CGPoint v11;

  v5 = sub_10000DE74(a1);
  v11.x = a2;
  v11.y = a3;
  v6 = NSStringFromCGPoint(v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9 = 138412290;
  v10 = v7;
  sub_1000AFCF8((void *)&_mh_execute_header, v5, v8, "nudging by %@", (uint8_t *)&v9);

  sub_10000B264();
}

void sub_100DF4550()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d not in dynamic operation for nudge", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF45D0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = 134217984;
  v5 = v3;
  sub_1000AFCF8((void *)&_mh_execute_header, a2, a3, "touches ended with num swipe touches: %lu", (uint8_t *)&v4);
}

void sub_100DF4648(void *a1, void *a2)
{
  NSObject *v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;

  v3 = sub_10000DE74(a1);
  v4 = sub_10034792C((unint64_t)objc_msgSend(a2, "state"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v7 = 138412290;
  v8 = v5;
  sub_1000AFCF8((void *)&_mh_execute_header, v3, v6, "operation ended with nudge in state %@", (uint8_t *)&v7);

  sub_10000DE48();
}

void sub_100DF46E0(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLiOSScribbleInteractionSetupHelper setupScribbleEditingProvider:scribbleObserver:scribbleActive:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSScribbleInteractionSetupHelper.m";
  v7 = 1024;
  v8 = 24;
  v9 = 2082;
  v10 = "editingProvider.scribbleInteraction";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100DF4798(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLImageDataHelper generateThumbnailImageDataWithCompletionHandler:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLImageDataHelper.m";
  v7 = 1024;
  v8 = 52;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Needs to implement download-handling thumbnail creation!", (uint8_t *)v2, 0x22u);
}

void sub_100DF4840()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to acquire CRLRulerUnits singleton from a secondary thread - this class is not thread safe.", v2, v3, v4, v5, v6);
}

void sub_100DF48C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Pica formatting not currently supported", v2, v3, v4, v5, v6);
}

void sub_100DF4948(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[PKStroke(CRLAdditions) crl_strokeForTracingWithOutset:shouldIgnoreMask:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/PKStroke_CRLAdditions.m";
  v7 = 1024;
  v8 = 153;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d the scale on a PKStroke should not be 0", (uint8_t *)v2, 0x22u);
}

void sub_100DF49F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown CRLGLDataBufferDataType!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4A70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4AF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4B70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4BF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4C70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4CF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4D70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4DF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown data type!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4E70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to generate buffer(s)!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4EF0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "We're GL_STATIC_DRAW but trying (and FAILING) to update the array after initial setup!", v1, 2u);
}

void sub_100DF4F30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bufferCount==0!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF4FB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d vertexCount==0!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5030()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d no attributes!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF50B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Element array count Sanity check", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5130()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to generate buffer!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF51B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Too many vertices!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5230()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mesh size is not at least 2x2!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF52B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100DF5350()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100DF53F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't initialize metal buffers without a device!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5470()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mesh size is not at least 2x2!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF54F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can only be called on a buffer that conforms to metal protocol!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5570()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown attribute size!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF55F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can only be called from within update block!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5670(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v4;
  __CFString *v6;
  objc_class *v7;
  NSString *v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  int v12;
  __int16 v13;
  __CFString *v14;
  __int16 v15;
  uint64_t v16;

  v4 = a2;
  if (a1)
  {
    v7 = (objc_class *)objc_opt_class(a1, a2);
    v8 = NSStringFromClass(v7);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue(v8);
  }
  else
  {
    v6 = CFSTR("Nil");
  }
  v9[0] = 67110402;
  v9[1] = v4;
  v10 = 2082;
  v11 = "+[CRLiOSWindowWrapper windowWrapperForView:assert:]";
  sub_10000DE60();
  v12 = 53;
  v13 = 2114;
  v14 = v6;
  v15 = 2050;
  v16 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find scene wrapper for view <%{public}@: %{public}p>", (uint8_t *)v9, 0x36u);
  if (a1)

}

void sub_100DF5770()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF57F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d userInteraction should be enabled when _userInteractionEnabledCount = 0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5870()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF58F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Called endIgnoringUserInteractionWithToken without matching beginIgnoringUserInteraction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5970()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF59F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF5A7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF5B08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF5B94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting up player controller for data that needs to be downloaded!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5C14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting up player controller when movie isn't playable!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5C94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5D14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5D94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to tear down the player controller with inconsistent flag/dynamic time state", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5E14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5E94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF5F20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Dynamic poster time changes can only be made on the main thread", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF5FA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d A dynamic poster time change must be in progress", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6020()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Dynamic poster time changes can only be made on the main thread", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF60A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mismatch between starting and ending dynamic visible poster time changes", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6120()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Dynamic poster time changes can only be made on the main thread", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF61A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Buffer size too small: %zu", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF622C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF62B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF6344(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  v5 = a1;
  v7 = (objc_class *)sub_100081774((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  sub_100081768();
  sub_100081754();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000816F8();
  sub_10008172C((void *)&_mh_execute_header, v10, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error reading from filter CRLStreamReadChannel: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, v16);

  sub_100081740();
}

void sub_100DF6408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF6494(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  v5 = a1;
  v7 = (objc_class *)sub_100081774((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  sub_100081768();
  sub_100081754();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000816F8();
  sub_10008172C((void *)&_mh_execute_header, v10, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error reading from source CRLReadChannel: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, v16);

  sub_100081740();
}

void sub_100DF6558()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLBufferedReadChannel _readFromOffset:length:handler:]_block_invoke";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLBufferedReadChannel.m";
  v6 = 1024;
  v7 = 281;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The source handler for the stream read channel should not be nil", v2, 0x22u);
}

void sub_100DF65F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF6680()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can not calculate the stroked bounds of an empty path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6700()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d lineWidth should not be negative.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6780()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Couldn't get a gradient for this join, but this should have been caught upstream by skipping no-op segments.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6800(int a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;

  v3[0] = 67110146;
  v3[1] = a1;
  v4 = 2082;
  v5 = "void CRLGrowPathBoundsAtTFromTypeAndPoints(CRLPathBoundsApplierState *, CGFloat, CGPathElementType, CGPoint *)";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CGPath_CRLAdditions.m";
  v8 = 1024;
  v9 = 365;
  v10 = 1024;
  v11 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid element type %d", (uint8_t *)v3, 0x28u);
  sub_10000DE48();
}

void sub_100DF68B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d path gradient can't handle moveTo element", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6930(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[NSNotificationCenter(CRLAdditions) crl_addObserverForName:object:queue:usingBlock:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSNotificationCenter_CRLAdditions.m";
  v7 = 1024;
  v8 = 17;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d You should not add an observer for all notifications on the main thread because it's deadlock prone.", (uint8_t *)v2, 0x22u);
}

void sub_100DF69D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Clip rects should never be null.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6A58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF6AE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d didn't clean up", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6B64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We expect the stroke to be a CRLBrushStroke if drawing into a Metal layer or image.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6BE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only need to clear out images.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6C64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to drop nil color", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6CE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6D64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF6DF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLFreehandDrawingShapeItem has invalid geometry size.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6E70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't create CRLCommandSetInfoGeometry without a persistable object.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF6EF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF6F7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should be checking the uncommitted point range if we are freehand drawing; it is the freehand drawing cache mechanism.",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000DE48();
}

void sub_100DF6FFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF7088()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF7114(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "second"));
  objc_opt_class(v4, v5);
  sub_1000D72E0();
  v7 = sub_1000D72B8(v6);
  sub_1000D72CC((void *)&_mh_execute_header, v8, v9, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unable to perform comparison on %{public}@", v10, v11, v12, v13, v14);

  sub_100065B94();
}

void sub_100DF71DC(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "first"));
  objc_opt_class(v4, v5);
  sub_1000D72E0();
  v7 = sub_1000D72B8(v6);
  sub_1000D72CC((void *)&_mh_execute_header, v8, v9, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unable to perform comparison on %{public}@", v10, v11, v12, v13, v14);

  sub_100065B94();
}

void sub_100DF72A4(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[UIGestureRecognizer(CRLGestureDispatcher) setGestureDelegate:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/UIGestureRecognizer+Text.m";
  v7 = 1024;
  v8 = 84;
  v9 = 2082;
  v10 = "grDelegate";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100DF735C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000DF6A0();
  +[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString");
  sub_100098814();
  sub_100098800((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v2, v3, v4, v5, v6);
  sub_10009882C();
}

void sub_100DF73D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d lineWidth (%f) should be greater than zero.", v2, v3, v4, v5, 2u);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235D20);
  sub_10000B264();
}

void sub_100DF748C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235D60);
  sub_10000B264();
}

void sub_100DF754C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235E60);
  sub_10000B264();
}

void sub_100DF760C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235E20);
  sub_10000B264();
}

void sub_100DF76CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235DE0);
  sub_10000B264();
}

void sub_100DF778C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235DA0);
  sub_10000B264();
}

void sub_100DF784C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to add a line when there is no current point.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235EA0);
  sub_10000DE48();
}

void sub_100DF7900()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to add a curve when there is no current point.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235EE0);
  sub_10000DE48();
}

void sub_100DF79B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to add a curve when there is no current point.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235F20);
  sub_10000DE48();
}

void sub_100DF7A68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLBezierPath received a NaN or inf value. Please investigate", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235F60);
  sub_10000DE48();
}

void sub_100DF7B1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can not get the current point of an empty path.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101235FC8);
  sub_10000DE48();
}

void sub_100DF7BD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can not determine control point bounds for an empty path.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236008);
  sub_10000DE48();
}

void sub_100DF7C84()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[20];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPath.m";
  sub_100057230();
  v4 = 1785;
  v5 = 2048;
  v6 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Given index (%zd) must not be negative.", v2, 0x2Cu);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236108);
  sub_10000B264();
}

void sub_100DF7D58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Missing extra segments.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236208);
  sub_10000DE48();
}

void sub_100DF7E0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to add a curve when there is no current point.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236308);
  sub_10000DE48();
}

void sub_100DF7EC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Point append range is out of range of available points.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_1012362C8);
  sub_10000DE48();
}

void sub_100DF7F74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d angle2 should not be infinte or NaN (%f)", v2, v3, v4, v5, 2u);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236388);
  sub_10000B264();
}

void sub_100DF8030()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d angle1 should not be infinte or NaN (%f)", v2, v3, v4, v5, 2u);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236348);
  sub_10000B264();
}

void sub_100DF80EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d buffer too small for path element string", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236408);
  sub_10000DE48();
}

void sub_100DF81A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unhandled path element type", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_1012363C8);
  sub_10000DE48();
}

void sub_100DF8254()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Something is wrong with this bezier path!", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236488);
  sub_10000DE48();
}

void sub_100DF8308()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bezier path string contained unknown elmt.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236448);
  sub_10000DE48();
}

void sub_100DF83BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d sfr_head could not NSZoneRealloc. No memory (when reallocing sfr_head)", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_1012364C8);
  sub_10000DE48();
}

void sub_100DF8470()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d sfr_head could not NSZoneRealloc. No memory (when reallocing sfr_elementLength)", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236508);
  sub_10000DE48();
}

void sub_100DF8524()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d sfr_extraSegments could not NSZoneRealloc. No memory", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236548);
  sub_10000DE48();
}

void sub_100DF85D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101236588);
  sub_10000B264();
}

void sub_100DF8698(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[UIDevice(CRLAdditions) crl_platformString]_block_invoke";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/UIDevice_CRLAdditions.m";
  v7 = 1024;
  v8 = 46;
  v9 = 2082;
  v10 = "s_platformString";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100DF8750()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to create cache directory: %@");
  sub_10000B264();
}

void sub_100DF87D0()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to create cache directory: %@");
  sub_10000B264();
}

void sub_100DF8850()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to get contents of copy cache directory: %@");
  sub_10000B264();
}

void sub_100DF88D0()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to create cache directory: %@");
  sub_10000B264();
}

void sub_100DF8950()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 225;
  v5 = v0;
  v6 = "inWPStorage";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DF89E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to min", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF8A6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to duplicate items for fixing up.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF8AF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should not ask for async providers for preferred type file promise!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF8B7C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a temporary file for oversize string: %@");
  sub_10000B264();
}

void sub_100DF8BFC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a temporary file for oversize string: %@");
  sub_10000B264();
}

void sub_100DF8C7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should be only one rich or plain text board item provider when there is text on the pasteboard", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF8D04()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 991;
  v5 = v0;
  v6 = "writeAssistant";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DF8D98()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 970;
  v5 = v0;
  v6 = "inPasteboard";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DF8E2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asPDF is ignored when nativeOnly is specified", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF8EB4()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Request for property list for unsupported pasteboard type %@");
  sub_10000B264();
}

void sub_100DF8F34()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error creating rich text string: %@");
  sub_10000B264();
}

void sub_100DF8FB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requestedViewScale should never be negative.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF903C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected scanner to be at end from pasteboard state type \"%@\".");
  sub_10000B264();
}

void sub_100DF90BC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected scanner to read integer from pasteboard state type \"%@\".");
  sub_10000B264();
}

void sub_100DF913C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to recover from CoreGraphics and CRLBrushStroke failing to stroke.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF91BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot offset path that is already smaller than the offset amount!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF923C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If delta X is 0, we would divide by zero.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF92BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The wrap path cannot be empty when calculating the convex hull.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF933C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we have a path after, the first element after should be a curve or line.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF93BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -pathByCreatingHoleInPathAtPoint doesn't know how to handle close elements.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF943C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we have a path before, the last element before +1 should be a curve or line.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF94BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -pathByCreatingHoleInPathAtPoint doesn't know how to handle close elements.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF953C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d firstElementAfter should be at least 1.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF95BC(uint64_t a1, int a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a1 = 67110146;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2082;
  *(_QWORD *)(a1 + 10) = "-[CRLBezierPath(CRLAdditions) pathSplitAtSubpathBoundariesWithSoftElementLimit:hardElementLimit:]";
  *(_WORD *)(a1 + 18) = 2082;
  *(_QWORD *)(a1 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPath_CRLAdditions.mm";
  *(_WORD *)(a1 + 28) = 1024;
  *(_DWORD *)(a1 + 30) = 1147;
  *(_WORD *)(a1 + 34) = 2048;
  *(_QWORD *)(a1 + 36) = a3;
  sub_10000B26C((void *)&_mh_execute_header, a4, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d elementCount (%zd) should be positive.", (uint8_t *)a1);
}

void sub_100DF963C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to split a path with subpaths less than 2 elements at a time.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF96BC(int a1, NSObject *a2, uint64_t a3, double a4)
{
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  double v12;

  v4[0] = 67110146;
  v4[1] = a1;
  v5 = 2082;
  v6 = "-[CRLBezierPath(CRLAdditions) pointAlongPathAtPercentage:withFlattenedPath:andLength:atStartIndex:]";
  v7 = 2082;
  v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPath_CRLAdditions.mm";
  v9 = 1024;
  v10 = 1374;
  v11 = 2048;
  v12 = a4;
  sub_10000B26C((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to find point at percentage: %f", (uint8_t *)v4);
}

void sub_100DF9768()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d It is impossible to find pointAlongPathAtPercentage at any percentage of an empty path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF97E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can not calculate the stroked bounds of an empty path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF9868()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d lineWidth should not be negative.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF98E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should provide a threshold if not looking for the closest match.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF9968()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d isnan!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF99E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No valid roots!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF9A68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected angle sign", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF9AE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must provide a group info or nil as parent of a counter rotate info!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF9B68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't expect this to be called", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF9BE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't expect this to be called", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DF9C68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF9CF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF9D80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF9E0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF9E98(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  void *v8;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  v7 = 2114;
  v8 = v4;
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100DF9F48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DF9FD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFA060(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLiOSConcreteScribbleCapableElement initWithEditingFrame:identifier:scribbleEditingBlock:scribbleElementIsFocu"
       "sedBlock:shouldDelayFocus:hitToleranceInsetsWithDefaultInsetsBlock:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSConcreteScribbleCapableElement.m";
  v7 = 1024;
  v8 = 37;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Got empty editing frame", (uint8_t *)v2, 0x22u);
}

void sub_100DFA108(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLShapeLibraryCollection shapeWithIdentifier:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeLibraryCollection.m";
  v7 = 1024;
  v8 = 62;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -[CRLShapeLibraryCollection shapeWithIdentifier:] should not be called because CRLShapeLibraryCollection has no editable shapes", (uint8_t *)v2, 0x22u);
}

void sub_100DFA1B0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLFreehandDrawingToolPixelEraser p_endErasingAndFinalize:]_block_invoke";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolPixelEraser.m";
  v6 = 1024;
  v7 = 178;
  v8 = v0;
  v9 = "shapeStrokes";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DFA25C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Begin point from erasing stroke path should not be null.", v2, v3, v4, v5, v6);
}

void sub_100DFA2E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subpathsFromSubtractedPath should never empty.", v2, v3, v4, v5, v6);
}

void sub_100DFA364()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFA400()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFA49C()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLMaskResizeTracker initWithImageRep:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMaskResizeTracker.m";
  v7 = 1024;
  v8 = 30;
  v9 = v0;
  v10 = "imageRep != nil";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v3);
}

void sub_100DFA540(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLMaskResizeTracker willBeginDynamicOperationForReps:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMaskResizeTracker.m";
  v8 = 1024;
  v9 = 68;
  v10 = 2112;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected rep(s) for transformation %@", (uint8_t *)v3);
}

void sub_100DFA5F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d image mask editor not given correct reps for resize", v2, v3, v4, v5, v6);
}

void sub_100DFA674()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Image rep was moved to floating to manipulate it. This will probably do something bad for template objects.", v2, v3, v4, v5, v6);
}

void sub_100DFA6F8(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLBezierPathSource initWithBezierPath:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBezierPathSource.m";
  v8 = 1024;
  v9 = 31;
  v10 = 2112;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Ignoring invalid bezier path %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100DFA7A4(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  v3[0] = 67110146;
  v3[1] = a1;
  v4 = 2082;
  v5 = "-[CRLBezierPathSource p_setBezierPath:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBezierPathSource.m";
  v8 = 1024;
  v9 = 178;
  v10 = 2082;
  v11 = "path";
  sub_10000B26C((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100DFA850()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out of bounds error when appending a strokePointData object.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFA8D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out of bounds error when appending a strokePointData object.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFA950()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds endAtIndex parameter.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFA9D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds startingAtIndex parameter.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFAA50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly failed to generate B-Spline control points.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFAAD0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "+[CRLPKStrokePathConverter strokePathsFromBezierPath:baseWidth:strokePathCompactData:inkType:isFountainPenInkV2:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPKStrokePathConverter.m";
  v6 = 1024;
  v7 = 647;
  v8 = v0;
  v9 = "newStrokePath";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DFAB7C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not instantiate UTType for %@");
}

void sub_100DFAC0C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create UTType for %@");
}

void sub_100DFAC9C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[NSArray(CRLUTIUtilities) crl_UTTypes]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLUTIUtilities.m";
  v7 = 1024;
  v8 = 139;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expecting an array of strings.", (uint8_t *)v2, 0x22u);
}

void sub_100DFAD44(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLPencilKitInkStroke paintPath:wantsInteriorStroke:inContext:useFastDrawing:parameterized:shouldReverseDrawOrd"
       "er:]_block_invoke";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPencilKitInkStroke.m";
  v7 = 1024;
  v8 = 272;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to draw a CRLPencilKitInkStroke without its strokePathCompactData and maskPath.", (uint8_t *)v2, 0x22u);
}

void sub_100DFADEC(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLFakeProgress initWithMaxValue:numberOfStages:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLProgress.m";
  v7 = 1024;
  v8 = 617;
  v9 = 2082;
  v10 = "numberOfStages > 0";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", (uint8_t *)v2, 0x2Cu);
}

void sub_100DFAEA4()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLInstantAlphaBinaryBitmap initWithWidth:height:rowBytes:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.m";
  v6 = 1024;
  v7 = 23;
  v8 = v0;
  v9 = "width > 0 && height > 0 && rowBytes >= width / 8";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_100DFAF50()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLInstantAlphaBinaryBitmap unionWithBitmap:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaBinaryBitmap.m";
  v6 = 1024;
  v7 = 53;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unionWithBitmap: sizes do not match", v2, 0x22u);
}

void sub_100DFAFEC(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLBasicShapeLibrary shapeFromSearchResult:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibrary.m";
  v8 = 1024;
  v9 = 83;
  v10 = 2112;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Basic shape from result is nil: %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100DFB098()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLBasicShapeLibrary p_baseName]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibrary.m";
  v7 = 1024;
  v8 = 95;
  v9 = v0;
  v10 = "englishString";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DFB138()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  sub_10000B278();
  v4 = "-[CRLBasicShapeLibrary p_shapeTypeAtIndex:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibrary.m";
  v7 = 1024;
  v8 = 101;
  v9 = 2048;
  v10 = v1;
  v11 = 2048;
  v12 = 21;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Index for shape type is %lu, but must be less than kCRLShapeTypeCustom (%ld)", v3, 0x36u);
  sub_10000B264();
}

void sub_100DFB1EC(double a1, double a2, double a3, double a4)
{
  NSString *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  v4 = NSStringFromCGRect(*(CGRect *)&a1);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v6, v7, "initial finalBounds %@", v8, v9, v10, v11, v12);

  sub_10009882C();
}

void sub_100DFB26C(double a1, double a2)
{
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "finalCenterScaled %@", v6, v7, v8, v9, v10);

  sub_10009882C();
}

void sub_100DFB2EC(char a1, char a2, NSObject *a3)
{
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  int v9;
  __CFString *v10;
  __int16 v11;
  __CFString *v12;

  if ((a1 & 1) != 0)
    v5 = CFSTR("YES");
  else
    v5 = CFSTR("NO");
  v6 = v5;
  if ((a2 & 1) != 0)
    v7 = CFSTR("YES");
  else
    v7 = CFSTR("NO");
  v8 = v7;
  v9 = 138412546;
  v10 = v6;
  v11 = 2112;
  v12 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "shouldPinHorizontally %@ shouldPinVertically %@", (uint8_t *)&v9, 0x16u);

}

void sub_100DFB3D8(__n128 *a1)
{
  CGAffineTransform *v1;
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_1001105D0(a1, __stack_chk_guard);
  v2 = NSStringFromCGAffineTransform(v1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "transform from center to anchor %@", v6, v7, v8, v9, v10);

  sub_1001105EC();
}

void sub_100DFB458(__n128 *a1)
{
  CGAffineTransform *v1;
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_1001105D0(a1, __stack_chk_guard);
  v2 = NSStringFromCGAffineTransform(v1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "dynamic transform %@", v6, v7, v8, v9, v10);

  sub_1001105EC();
}

void sub_100DFB4D8(__n128 *a1)
{
  CGAffineTransform *v1;
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_1001105D0(a1, __stack_chk_guard);
  v2 = NSStringFromCGAffineTransform(v1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "transform with zoomOriginRelativeToViewAnchor subtracted %@", v6, v7, v8, v9, v10);

  sub_1001105EC();
}

void sub_100DFB558(__n128 *a1)
{
  CGAffineTransform *v1;
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_1001105D0(a1, __stack_chk_guard);
  v2 = NSStringFromCGAffineTransform(v1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "transform with relativeScaleFactor %@", v6, v7, v8, v9, v10);

  sub_1001105EC();
}

void sub_100DFB5D8(__n128 *a1)
{
  CGAffineTransform *v1;
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_1001105D0(a1, __stack_chk_guard);
  v2 = NSStringFromCGAffineTransform(v1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "transform with zoomOriginRelativeToViewAnchor %@", v6, v7, v8, v9, v10);

  sub_1001105EC();
}

void sub_100DFB658(__n128 *a1)
{
  CGAffineTransform *v1;
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_1001105D0(a1, __stack_chk_guard);
  v2 = NSStringFromCGAffineTransform(v1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "transform with gesture offset %@", v6, v7, v8, v9, v10);

  sub_1001105EC();
}

void sub_100DFB6D8(__n128 *a1)
{
  CGAffineTransform *v1;
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_1001105D0(a1, __stack_chk_guard);
  v2 = NSStringFromCGAffineTransform(v1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "transform from anchor to center %@", v6, v7, v8, v9, v10);

  sub_1001105EC();
}

void sub_100DFB758(double a1, double a2)
{
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "viewCenterFromAnchorOffset %@", v6, v7, v8, v9, v10);

  sub_10009882C();
}

void sub_100DFB7D8(double a1, double a2)
{
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "viewAnchorPointInSuperlayer %@", v6, v7, v8, v9, v10);

  sub_10009882C();
}

void sub_100DFB858(double a1, double a2)
{
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "viewCenterInSuperlayer %@", v6, v7, v8, v9, v10);

  sub_10009882C();
}

void sub_100DFB8D8(double a1, double a2, double a3, double a4)
{
  NSString *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  v4 = NSStringFromCGRect(*(CGRect *)&a1);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v6, v7, "canvasLayerBounds %@", v8, v9, v10, v11, v12);

  sub_10009882C();
}

void sub_100DFB958(double a1, double a2)
{
  NSString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = NSStringFromCGSize(*(CGSize *)&a1);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10000DEC0();
  sub_1001105BC((void *)&_mh_execute_header, v4, v5, "delegate provided canvasCenterOffset %@", v6, v7, v8, v9, v10);

  sub_10009882C();
}

void sub_100DFB9D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1001105F8((void *)&_mh_execute_header, a1, a3, "Cancelling zoom.", a5, a6, a7, a8, 0);
}

void sub_100DFBA0C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1001105F8((void *)&_mh_execute_header, a1, a3, "Zoom is ending!", a5, a6, a7, a8, 0);
}

void sub_100DFBA40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil read channels", v2, v3, v4, v5, v6);
}

void sub_100DFBAC4(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  void *v8;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  v7 = 2114;
  v8 = v4;
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

}

void sub_100DFBB7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Not a seekable stream", v2, v3, v4, v5, v6);
}

void sub_100DFBC00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected Bezier element type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFBC80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d At least 2 points expected", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFBD00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Undefined cubic control points", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFBD80(int a1, uint8_t *buf, int a3, os_log_t log)
{
  *(_DWORD *)buf = 67110146;
  *((_DWORD *)buf + 1) = a3;
  *((_WORD *)buf + 4) = 2082;
  *(_QWORD *)(buf + 10) = "-[CRLBezierPathSimplifier outputCurrentSolution]";
  *((_WORD *)buf + 9) = 2082;
  *(_QWORD *)(buf + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLBezierPathSimplifier.mm";
  *((_WORD *)buf + 14) = 1024;
  *(_DWORD *)(buf + 30) = 374;
  *((_WORD *)buf + 17) = 1024;
  *((_DWORD *)buf + 9) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected solution element type: %d", buf, 0x28u);
}

void sub_100DFBE04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d At least 2 points expected before the tail", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFBE84(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100065B74((void *)&_mh_execute_header, a2, a3, "Failed first attempt to read ZIP archive, but we will attempt to recover. %{public}@", (uint8_t *)&v3);
  sub_100118BF8();
}

void sub_100DFBEEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected buffer position while reading extra fields.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFBF6C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 134217984;
  v4 = a1;
  sub_100065B74((void *)&_mh_execute_header, a2, a3, "Attempted to adjust the offset for %llu times. Will assume the ZIP is complete.", (uint8_t *)&v3);
  sub_100118BF8();
}

void sub_100DFBFD4(uint64_t a1, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  char *v5;

  sub_100118BE8(a1, a2);
  v4 = 134217984;
  v5 = (char *)sub_100118C00() + 1;
  sub_100065B74((void *)&_mh_execute_header, v2, v3, "Failed to parse ZIP entry %tu. Will attempt to adjust offset forward.", (uint8_t *)&v4);

  sub_10000DE48();
}

void sub_100DFC054(uint64_t a1, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  char *v5;

  sub_100118BE8(a1, a2);
  v4 = 134217984;
  v5 = (char *)sub_100118C00() + 1;
  sub_100065B74((void *)&_mh_execute_header, v2, v3, "Failed to parse ZIP entry %tu. Will attempt to adjust offset backward.", (uint8_t *)&v4);

  sub_10000DE48();
}

void sub_100DFC0D4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_100065B74((void *)&_mh_execute_header, a2, a3, "Duplicate entry for name: %@", (uint8_t *)&v3);
  sub_100118BF8();
}

void sub_100DFC13C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Entry isn't part of this archive", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFC1BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Entry isn't part of this archive", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFC23C(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_100065B74((void *)&_mh_execute_header, a2, a3, "Failed to create read channel for entry %@", (uint8_t *)&v4);
  sub_100118BF8();
}

void sub_100DFC2A8(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_10011C7D4(a1);
  sub_10011C7BC((uint64_t)v1, 1.5047e-36);
  sub_10011C7A8((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<");

  sub_10011C7E4();
}

void sub_100DFC2F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFC37C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFC408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFC494()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFC520()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFC5AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFC638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFC6C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d isAssociatedContentVisibleInUnscaledRect isn't expecting a null rect ", v2, v3, v4, v5, v6);
}

void sub_100DFC748()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot render a guide where start == end", v2, v3, v4, v5, v6);
}

void sub_100DFC7CC(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;

  v3 = *a1;
  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLiOSCanvasPointerInteractionDelegate pointerInteraction:regionForRequest:defaultRegion:]";
  v7 = 2082;
  v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSCanvasPointerInteractionDelegate.m";
  v9 = 1024;
  v10 = 126;
  v11 = 2112;
  v12 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected lastCursorUpdatingSource type! %@", (uint8_t *)v4, 0x2Cu);
}

void sub_100DFC888(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLiOSCanvasPointerInteractionDelegate pointerInteraction:styleForRegion:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSCanvasPointerInteractionDelegate.m";
  v7 = 1024;
  v8 = 152;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid cursor without any data!", (uint8_t *)v2, 0x22u);
}

void sub_100DFC930()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLiOSFreehandDrawingHighlightManager that has already been torn down.", v2, v3, v4, v5, v6);
}

void sub_100DFC9B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLiOSFreehandDrawingHighlightManager.", v2, v3, v4, v5, v6);
}

void sub_100DFCA38()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLiOSFreehandDrawingHighlightManager pulseAnimationDidStop:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLiOSFreehandDrawingHighlightManager.m";
  v6 = 1024;
  v7 = 283;
  v8 = v0;
  v9 = "_pulseArrayController";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DFCAE4()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tool type %lu does not support color");
  sub_10000B264();
}

void sub_100DFCB64()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown tool type %lu when generating stroke widths.");
  sub_10000B264();
}

void sub_100DFCBE4()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown tool type %lu when generating stroke widths.");
  sub_10000B264();
}

void sub_100DFCC64()
{
  uint64_t v0;
  os_log_t v1;

  sub_100124C50(__stack_chk_guard);
  sub_10004CE88();
  sub_100124C5C();
  sub_10000B28C();
  sub_10004CE74();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get color for current tool (%zd)");
  sub_10000B264();
}

void sub_100DFCCE4()
{
  uint64_t v0;
  os_log_t v1;

  sub_100124C50(__stack_chk_guard);
  sub_10004CE88();
  sub_100124C5C();
  sub_10000B28C();
  sub_10004CE74();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get opacity for current tool (%zd)");
  sub_10000B264();
}

void sub_100DFCD64()
{
  uint64_t v0;
  os_log_t v1;

  sub_100124C50(__stack_chk_guard);
  sub_10004CE88();
  sub_100124C5C();
  sub_10000B28C();
  sub_10004CE74();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get width for current tool (%zd)");
  sub_10000B264();
}

void sub_100DFCDE4()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot set color for given tool (%zd)");
  sub_10000B264();
}

void sub_100DFCE64()
{
  uint64_t v0;
  os_log_t v1;

  sub_100124C50(__stack_chk_guard);
  sub_10004CE88();
  sub_100124C5C();
  sub_10000B28C();
  sub_10004CE74();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot set opacity for tool (%zd)");
  sub_10000B264();
}

void sub_100DFCEE4()
{
  uint64_t v0;
  os_log_t v1;

  sub_100124C50(__stack_chk_guard);
  sub_10004CE88();
  sub_100124C5C();
  sub_10000B28C();
  sub_10004CE74();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot set width for tool (%zd)");
  sub_10000B264();
}

void sub_100DFCF64()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLFreehandDrawingToolkitUIState strokeWidthIndexForToolType:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolkitUIState.m";
  v6 = 1024;
  v7 = 676;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have at least one stroke width option.", v2, 0x22u);
}

void sub_100DFD000()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_100DFD084()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLWPiOSStorageSpellChecker initWithStorage:selectionPath:orSearchCanvasDelegate:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Spelling/CRLWPiOSStorageSpellChecker.m";
  v6 = 1024;
  v7 = 149;
  v8 = v0;
  v9 = "storage";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100DFD130()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempt to spellcheck past end of string", v2, v3, v4, v5, v6);
}

void sub_100DFD1B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No columns to lay out into", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD234()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFD2C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Column index mismatch", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD348()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Too many layoutStates pushed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD3C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d stack size is invalid", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD448()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _state.paragraphRange.length", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD4C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad paragraphEnumerator", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD548()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _typesetterCharIndex", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD5C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We should not restore from our own object.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD648()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _pushedStates stack is empty", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD6C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFD75C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d discrepancy computing anchored range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD7DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d anchoredCharIndex shouldn't go backwards", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD85C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout failure, No old lines.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD8DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad lineHeightGuess", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD95C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _state.column() in layoutColumn", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFD9DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFDA70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d failed to create a line fragment", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFDAF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad glyphCount", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFDB70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad line end", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFDBF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad _state.charIndex", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFDC70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d pIsLastColumn doesn't work on the body or TOC", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFDCF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad minHeight/maxHeight", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFDD70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFDE04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFDE98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFDF2C(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLSixChannelTilingLayer drawLayer:inContext:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLSixChannelTilingLayer.m";
  v8 = 1024;
  v9 = 223;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected delegate call for layer %@", (uint8_t *)v3, 0x2Cu);
}

void sub_100DFDFE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad state on _shouldIgnoreCancelBecauseOfWriting", v2, v3, v4, v5, v6);
}

void sub_100DFE068()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad state on _shouldIgnoreCancelBecauseOfWriting", v2, v3, v4, v5, v6);
}

void sub_100DFE0EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFE178()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Line ref is already set", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFE1F8(void *a1)
{
  NSObject *v1;
  uint8_t *v2;
  id v3;

  v3 = sub_10011C7D4(a1);
  sub_10011C7BC((uint64_t)v3, 1.5047e-36);
  sub_10014BEAC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v2);

  sub_10011C7E4();
}

void sub_100DFE24C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFE2CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Missing hyphen line ref", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFE34C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFE3D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFE464()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFE4F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFE57C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d textSource failed to advance", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFE5FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d countOfComposedCharacters failed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFE67C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFE708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFE794()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFE814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No label font but we need to render something", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFE894()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Text position only applies to text and numbers.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFE914(uint64_t a1, int a2)
{
  int v2;
  os_log_t v3;
  _DWORD v4[2];
  __int16 v5;
  int v6;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2C8();
  v6 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad character index: %d", (uint8_t *)v4, 0x28u);
  sub_10000DE48();
}

void sub_100DFE9B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFEA40()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad glyph count: %ld", v1);
  sub_10000B264();
}

void sub_100DFEAC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected nil _textSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFEB48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No line refs", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFEBC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid charIndex for line fragment", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFEC48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLWPLineFragment::charIndexForWPOffset: out-of-bounds result", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFECC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

uint64_t sub_100DFED54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v7;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This routine supports left and right only.", v2, v3, v4, v5, v7);
  if (qword_10147E370 == -1)
    return 1;
  dispatch_once(&qword_10147E370, &stru_10123B5E8);
  return 0;
}

uint64_t sub_100DFEE0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v7;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_10147E370 == -1)
    return 1;
  dispatch_once(&qword_10147E370, &stru_10123B5A8);
  return 0;
}

void sub_100DFEED0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find the CTRun for the tate chu yoko run.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFEF50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFEFDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFF068()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100DFF0F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: _textHighlights positions", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF174()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: _textBackgrounds positions", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF1F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: _strikesthrough positions", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: _underlines positions", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF2F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: adornments", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF374()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: line vector", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF3F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad starting line fragment state: hyphenated", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF474()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint8_t *v4;
  NSObject *v5;

  sub_10000FF14();
  sub_10000FEEC(v1, v2, v3, 1.5047e-36);
  sub_10000FF04((void *)&_mh_execute_header, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4, v5);

  sub_10000FF24();
}

void sub_100DFF4B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Character index out of range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF530()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Specified range is out of range of string", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF5B0()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[20];
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;

  sub_10000B278();
  sub_10000B29C();
  v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm";
  v5 = 1024;
  v6 = 1060;
  v7 = v0;
  v8 = "replaceString";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100DFF64C()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Label format (%lu) not recognized.", v1);
  sub_10000B264();
}

void sub_100DFF6D8(int a1)
{
  __int16 v1;
  int v2;
  os_log_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  int v7;
  __int16 v8;
  int v9;

  v4[0] = 67110146;
  v4[1] = a1;
  v5 = 2082;
  sub_10000B29C();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm";
  sub_100057230();
  v7 = 1220;
  v8 = v1;
  v9 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Number format (%d) not recognized.", (uint8_t *)v4, 0x28u);
  sub_10000DE48();
}

void sub_100DFF780()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Label format (%lu) invalid for numeric list.", v1);
  sub_10000B264();
}

void sub_100DFF80C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal value for arabic numeral topic label <= 0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF88C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal value for roman numeral topic label <= 0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF90C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal value for circled number numeral topic label <= 0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFF98C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal value for arabic numeral topic label <= 0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFA0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d string out of bounds", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFA8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d number out of bounds for algorithm", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFB0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d string out of bounds", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFB8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Hebrew number out of bounds for algorithm", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFC0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index inside surrogate pair", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFC8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid surrogate pair", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFD0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index out of bounds", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFD8C()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[20];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;

  sub_10000B278();
  sub_10000B29C();
  v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/NSString+CRLWPAdditions.mm";
  sub_100057230();
  v5 = 1693;
  v6 = v0;
  v7 = v1;
  v8 = 2048;
  v9 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid surrogate pair (single code point=0x%x, index=%lu)", v3, 0x32u);
  sub_10000B264();
}

void sub_100DFFE34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index is out of bounds", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFEB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d inDigit is larger than single digit", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFF34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d inValue too large for ideographicNumberStringForSmallValue", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100DFFFB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d string out of range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00034()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d number out of range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E000B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d string out of range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d number out of range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E001B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00250()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00304(int a1, NSObject *a2, double a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  double v11;

  v3[0] = 67110146;
  v3[1] = a1;
  v4 = 2082;
  v5 = "void CRLPKPointReductionFilter::setPointReductionFilterThresholdMultiplier(CGFloat)";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKPointReductionFilter.h";
  v8 = 1024;
  v9 = 46;
  v10 = 2048;
  v11 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected multiplier value < 0 (%f).", (uint8_t *)v3, 0x2Cu);
}

void sub_100E003B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d pt velocity is nan", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00438()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E004B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00538()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E005B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reference timestamp is needed to decompress points.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E006B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The observed editor controller does not match the editor controller owned by self.interactiveCanvasController. You probably forgot to update observation in -setInteractiveCanvasController:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00738()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E007C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00850()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E008DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00968()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E009F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00A80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _lassoSelectionMenuInteraction should not be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00B00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _lassoSelectionMenuInteraction should not be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00B80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00C0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00C98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00D24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unlockedItems should not have more items than selectedItems.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00DA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E00E30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Freehand drawing mode should only accept CRLFreehandDrawingModeLassoSelectionEditMenuIdentifier now for lasso selection feature.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00EB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot add line to subpath without move first", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00F30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot add line to subpath without move first", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E00FB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot close subpath without a line or curve segment", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E01030(void *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  Class v5;
  NSString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  void *v16;

  v3 = a1;
  objc_opt_class(a2, v4);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  v9 = 138544130;
  v10 = v7;
  v11 = 2114;
  v12 = v8;
  v13 = 2048;
  v14 = objc_msgSend(a2, "code");
  v15 = 2112;
  v16 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error coordinating reading URL for board item: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v9, 0x2Au);

}

void sub_100E01120()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E011B4(void *a1, NSObject *a2)
{
  __CFString *v4;
  Class v5;
  NSString *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  __CFString *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;

  if (a1)
  {
    objc_opt_class(a1, a2);
    v6 = NSStringFromClass(v5);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue(v6);
  }
  else
  {
    v4 = CFSTR("Nil");
  }
  v7 = a1 == 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "filename"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "assetUUID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "UUIDString"));
  v11 = 138543874;
  v12 = v4;
  v13 = 2112;
  v14 = v8;
  v15 = 2114;
  v16 = v10;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to determine valid provider class for <%{public}@: filename=%@, assetUUID=%{public}@> ", (uint8_t *)&v11, 0x20u);

  if (!v7)
}

void sub_100E012D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E01368(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v5[0] = 67109378;
  v5[1] = a2;
  v6 = 2114;
  v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);

  sub_10000B254();
}

void sub_100E01420()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E014B4(void *a1, int a2)
{
  NSObject *v3;
  __int16 v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  v3 = a1;
  __error();
  v6[0] = 67110146;
  v6[1] = a2;
  v7 = 2082;
  v8 = "-[CRLImageProviderPool p_updateFileDescriptorLimit]";
  v9 = 2082;
  sub_10000B28C();
  v10 = 522;
  v11 = v4;
  v12 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to get fd limit: getrlimit set errno to %d. Assuming limit of 256.", (uint8_t *)v6, 0x28u);

  sub_10000B264();
}

void sub_100E0157C(os_log_t log, double a2)
{
  int v2;
  double v3;

  v2 = 134217984;
  v3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "createStageWithSteps: taking steps not a positive number: %g", (uint8_t *)&v2, 0xCu);
}

void sub_100E015F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E01690()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0172C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to free transform with no reps", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E017AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLCanvasRepFreeTransformTracker: could not find a selected rep for the given layout", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0182C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mismatched rep count", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E018AC()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLCanvasRepFreeTransformTracker applyNewBoundsToRep:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRepFreeTransformTracker.m";
  v6 = 1024;
  v7 = 534;
  v8 = v0;
  v9 = "cmd";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E01958()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E019E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E01A70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E01AFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asking a torn-down editor controller for its current selection.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E01B7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E01BFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot set the selection while the canvas is doing background layout!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E01C7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never set a nil selection path on the editor controller!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E01CFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never set a selection on an editor controller that has already been torn down! It won't work.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E01D7C()
{
  NSObject *v0;
  int v1;
  id v2;
  uint64_t v3;
  int v4;
  int v5;

  sub_1000DF6A0();
  v2 = (id)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v4 = 67109378;
  v5 = v1;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v0, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)&v4);

  sub_10000B254();
}

void sub_100E01E18()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLEditorController.m";
  v3 = 1024;
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Least specific selection MUST be a board selection. Selection path is malformed. %@", v1);
  sub_10000B264();
}

void sub_100E01EA8(_QWORD *a1, void *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  _QWORD *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void *v19;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "editingCoordinator"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mainBoard"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "id"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
  v10 = a1[2];
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "UUIDDescription"));
  v12 = 138544130;
  v13 = v9;
  v14 = 2048;
  v15 = a1;
  v16 = 2112;
  v17 = v10;
  v18 = 2112;
  v19 = v11;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%{public}@ %p %@ setSelectionPath: %@", (uint8_t *)&v12, 0x2Au);

}

void sub_100E01FC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Intentionally crashing for reentrant setSelectionPath: call to avoid mangled state", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E02044()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d re-entrant call to CRLEditorController", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E020C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E02144()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should send in a non-nil block to this method.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E021C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E02244()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E022D0()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLEditorController.m";
  v3 = 1024;
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Editor %@ must be on the stack to retrieve its associated selection", v1);
  sub_10000B264();
}

void sub_100E02360()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E023E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0246C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't push the same editor twice", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E024EC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10017FDF4((void *)&_mh_execute_header, a2, a3, "Pushing editor %@", a5, a6, a7, a8, 2u);
  sub_100118BF8();
}

void sub_100E02550()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't pop an editor that isn't on the stack", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E025D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0265C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10017FDF4((void *)&_mh_execute_header, a2, a3, "Popping editor %@", a5, a6, a7, a8, 2u);
  sub_100118BF8();
}

void sub_100E026C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unbalanced endTransaction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E02740(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10017FDF4((void *)&_mh_execute_header, a2, a3, "Editor %@ changed selection and wants keyboard", a5, a6, a7, a8, 2u);
  sub_100118BF8();
}

void sub_100E027A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02830(void *a1, uint8_t *buf, int a3, os_log_t log)
{
  *(_DWORD *)buf = 67109378;
  *((_DWORD *)buf + 1) = a3;
  *((_WORD *)buf + 4) = 2114;
  *(_QWORD *)(buf + 10) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", buf, 0x12u);

}

void sub_100E02894(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLWPTab tabAlignmentFromString:isRTL:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPTabs.mm";
  v7 = 1024;
  v8 = 154;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unrecognized tab alignment string. Returning kTabAlignmentLeft by default.", (uint8_t *)v2, 0x22u);
}

void sub_100E0293C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E029C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02A54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02AE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02B6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02BF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02C84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02D10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02D9C(uint64_t a1, int a2)
{
  uint64_t v2;
  os_log_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000B29C();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingRep.m";
  v7 = 1024;
  v8 = 282;
  v9 = 2112;
  v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask to draw unknown layer (%@).", (uint8_t *)v4, 0x2Cu);
  sub_10000B264();
}

void sub_100E02E4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02ED8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should be drawing at least two shape reps here.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E02F58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E02FE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected nil freehandDrawingIDToPKStrokesMap returned from pkDrawingsForFreehandItemsDidChange", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03064()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E030E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not locate freehand drawing shapeItem for _strokeDataUUID given by trigger stroke", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03164()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d setupDrawingShapeItemUUIDToStrokeDataUUIDBidirectionalMap has already been called for this rep", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E031E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should be drawing at least two shape reps here.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03264()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to get the concurrent queue when it isn't safe to do so.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E032E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E03370()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E033FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E03488()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E03514()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask to begin trifurcated render for a child rep for which it has already begun.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100192BC4();
  sub_10000B29C();
  sub_10000B28C();
  sub_100192BB4();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E03630()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask to end trifurcated render for a child rep that did not begin it.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E036B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100192BC4();
  sub_10000B29C();
  sub_10000B28C();
  sub_100192BB4();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0374C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask for the trifurcation container when rendering is not trifurcated.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E037CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100192BC4();
  sub_10000B29C();
  sub_10000B28C();
  sub_100192BB4();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E03868()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not report to add a six channel enabled child rep that is already added.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E038E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -didAddSixChannelEnabledChildRep: on a non-interactive canvas.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03968()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not report to remove a six channel enabled child rep that was not added.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E039E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -didRemoveSixChannelEnabledChildRep: on a non-interactive canvas.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03A68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100192BC4();
  sub_10000B29C();
  sub_10000B28C();
  sub_100192BB4();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E03B04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not report to add a six channel suppressing child rep that is already added.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03B84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -didAddSixChannelSuppressingChildRep: on a non-interactive canvas.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03C04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not report to remove a six channel suppressing child rep that was not added.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03C84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -didRemoveSixChannelSuppressingChildRep: on a non-interactive canvas.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03D04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E03D90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E03E1C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "void CRLNotifyCGAssertionAvoided()";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLSafeCGWrappers.m";
  v7 = 1024;
  v8 = 94;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d A CG call was elided because of an invalid parameter.", (uint8_t *)v2, 0x22u);
}

void sub_100E03EC4(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLFreehandDrawingTransformInfo editorClass]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingTransformInfo.m";
  v7 = 1024;
  v8 = 74;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't expect this to be called", (uint8_t *)v2, 0x22u);
}

void sub_100E03F6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to convert a PKStroke with no points. Using fallback values.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E03FEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds endingAtPointIndex parameter.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0406C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds startingAtPointIndex parameter.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E040EC(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "void _CRLPKControlPointsFromFlattenedPathApplier(std::vector<CGPoint> *, const CGPathElement *)";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCGPathUtility.mm";
  v7 = 1024;
  v8 = 206;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If path includes kCGPathElementAddQuadCurveToPoint or kCGPathElementAddCurveToPoint it was not properly flattened.", (uint8_t *)v2, 0x22u);
}

void sub_100E04194(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPCTTypesetterCache addTypesetterForParagraphIdentifier:typesetter:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCTTypesetterCache.mm";
  v7 = 1024;
  v8 = 43;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d too many entries in our typesetter cache", (uint8_t *)v2, 0x22u);
}

void sub_100E0423C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be adding animations after we've started showing them", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E042BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected animation started", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0433C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d animation stopped before starting", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E043BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected animation stopped", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0443C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E044D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E04564()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E045F8()
{
  __int16 v0;
  os_log_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  v2 = 67109890;
  sub_1000DF690();
  v3 = "-[CRLCurvedShadowRenderHelper drawCurvedShadow:forImage:inContext:forUnscaledSize:withScaleFactor:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCurvedShadowRenderHelper.m";
  v6 = 1024;
  v7 = 152;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot render curved shadow, the size is too large for the CIContext to convert back to a CGImage. Skipping render.", (uint8_t *)&v2, 0x22u);
}

void sub_100E04698()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d scaleFactor (%f) should not be greater than 1.", v2, v3, v4, v5, 2u);
}

void sub_100E0472C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d scaleFactor (%f) should be greater than 0.", v2, v3, v4, v5, 2u);
}

void sub_100E047C0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLCADisplayLinkPlatformAdapter dealloc]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDisplayLinkPlatformAdapter.m";
  v6 = 1024;
  v7 = 40;
  v8 = v0;
  v9 = "_displayLink";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E0486C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to manipulate an invalid display link", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E048EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to manipulate an invalid display link", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0496C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to manipulate an invalid display link", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E049EC(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLCanvasAutoscroll p_startAutoscroll:unscaledPoint:unscaledDistancePastVisibleRect:unscaledInset:directions:repeatInterval:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasAutoscroll.m";
  v7 = 1024;
  v8 = 170;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", (uint8_t *)v2, 0x22u);
}

void sub_100E04A94(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[NSURL(CRLAdditions) crl_urlFromUserProvidedTelephoneString:withDataDetector:]_block_invoke";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSURL_CRLAdditions.m";
  v7 = 1024;
  v8 = 275;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected phone number match from NSDataDetector", (uint8_t *)v2, 0x22u);
}

void sub_100E04B3C(void *a1, void *a2, int a3)
{
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  id v14;

  v5 = a1;
  v6[0] = 67110146;
  v6[1] = a3;
  v7 = 2082;
  v8 = "+[NSURL(CRLAdditions) crl_URLWithStringDataOnPasteboard:itemSet:pasteboardType:]";
  v9 = 2082;
  v10 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSURL_CRLAdditions.m";
  v11 = 1024;
  v12 = 306;
  v13 = 2048;
  v14 = objc_msgSend(a2, "count");
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only pasting first item of %lu on pasteboard", (uint8_t *)v6, 0x2Cu);

}

void sub_100E04C20(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLiOSMultiSelectGestureRecognizer initWithInteractiveCanvasController:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSMultiSelectGestureRecognizer.m";
  v7 = 1024;
  v8 = 57;
  v9 = 2082;
  v10 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E04CD8(void *a1, unint64_t a2)
{
  id v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_10000DE74(a1);
  v4 = sub_10034792C(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10019E534((void *)&_mh_execute_header, v6, v7, "enter state %@", v8, v9, v10, v11, 2u);

  sub_10009882C();
}

void sub_100E04D60()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "multi-select ending possible dynamic operation", v2);
  sub_100013B30();
}

void sub_100E04D90(void *a1)
{
  void *v1;
  id v2;
  __CFString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10000DE74(a1);
  v2 = sub_10019E564();
  v3 = sub_10034792C((unint64_t)v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10019E534((void *)&_mh_execute_header, v5, v6, "multi-select reset from state %@", v7, v8, v9, v10, 2u);

  sub_10009882C();
}

void sub_100E04E14()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "multi-select failing during a scroll", v2);
  sub_100013B30();
}

void sub_100E04E44(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "failing due to not hitting selectable rep", v3);
}

void sub_100E04E70(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "failing due to existing dynop", v3);
}

void sub_100E04E9C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "beginning possible dynamic operation", v3);
}

void sub_100E04EC8(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "failing due to multiple taps in touch", v3);
}

void sub_100E04EF4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "failing due to two touches on the same rep", v2);
  sub_100013B30();
}

void sub_100E04F24(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "restoring original selection after touches cancelled", v3);
}

void sub_100E04F50(void *a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  uint64_t v6;
  Class v7;
  NSString *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;

  v5 = sub_10000DE74(a1);
  objc_opt_class(a2, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = sub_10034792C((unint64_t)objc_msgSend(a3, "state"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = 138412546;
  v13 = v9;
  v14 = 2112;
  v15 = v11;
  _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "multi-select informed that %@ has taken control. now in state: %@", (uint8_t *)&v12, 0x16u);

  sub_10000B254();
}

void sub_100E05018(void *a1)
{
  void *v1;
  id v2;
  __CFString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10000DE74(a1);
  v2 = sub_10019E564();
  v3 = sub_10034792C((unint64_t)v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10019E534((void *)&_mh_execute_header, v5, v6, "operation did end in state %@", v7, v8, v9, v10, 2u);

  sub_10009882C();
}

void sub_100E0509C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "recognizing multi-select due the repForSelecting changing in response to our selection change", v2);
  sub_100013B30();
}

void sub_100E050CC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "recognizing multi-select due to extending the selection", v2);
  sub_100013B30();
}

void sub_100E050FC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "p_beginMultiSelect", v2);
  sub_100013B30();
}

void sub_100E0512C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E051C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E05264()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be trying to customize the touch types for this gesture!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E052E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only expect a touch to begin when we are possible.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05364()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only expect a single touch in this logic.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E053E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have made a decision before touchesEnded", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05464()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLiOSImageHUDViewController still ignoring keyboard on dealloc", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E054E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05564()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E055F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05678()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E056F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05778()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0580C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E058A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05920()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can only reset editing state if we have a single info selected", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E059A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Listening to command notifications when we don't care!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05A20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Listening to command notifications when we don't care!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05AA0()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  sub_10000B278();
  v4 = "-[CRLPathEditor toggleSelectedNodeToType:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLPathEditor.m";
  v7 = 1024;
  v8 = 1343;
  v9 = 2048;
  v10 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected node type %li", v3, 0x2Cu);
}

void sub_100E05B4C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLBasicShapeLibraryCollection shapeWithIdentifier:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibraryCollection.m";
  v7 = 1024;
  v8 = 50;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -[CRLBasicShapeLibraryCollection shapeWithIdentifier:] should not be called because CRLBasicShapeLibraryCollection has no editable shapes", (uint8_t *)v2, 0x22u);
}

void sub_100E05BF4()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePlaybackRegistry.m";
  v3 = 1024;
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to set audio session category before starting playback (%@)", v1);
  sub_10000B264();
}

void sub_100E05C84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The object shouldn't already be playing a movie when -objectWillBeginMoviePlayback is called.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05D04()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[20];
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;

  sub_10000B278();
  sub_10000B29C();
  v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePlaybackRegistry.m";
  v5 = 1024;
  v6 = 58;
  v7 = v0;
  v8 = "object";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E05DA0()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePlaybackRegistry.m";
  v3 = 1024;
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to set audio session category after ending playback (%@)", v1);
  sub_10000B264();
}

void sub_100E05E30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have a mode to use to reset the audio session.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05EB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have a category to use to reset the audio session.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05F30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The object should be playing a movie when -objectDidEndMoviePlayback is called.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E05FB0()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[20];
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;

  sub_10000B278();
  sub_10000B29C();
  v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMoviePlaybackRegistry.m";
  v5 = 1024;
  v6 = 88;
  v7 = v0;
  v8 = "object";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E0604C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E060D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should be <= end of storage", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06158()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should not be at the start of the text source", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E061D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should be < NSNotFound", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06258()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E062E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should be <= end of storage", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06364()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d charIndex should be < NSNotFound", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E063E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E06470()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index inside surrogate pair", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E064F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index out of bounds", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06570()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E065FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index inside surrogate pair", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0667C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index out of bounds", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E066FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E06788()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E06814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad charIndex", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06894()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E06920()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d paragraphStyle is not allowed to be nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E069A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to resolve font name", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06A20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E06AAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected input language code returned by the OS", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06B2C()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPUtilities.mm";
  v3 = 1024;
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad text alignment (%lu).", v1);
  sub_10000B264();
}

void sub_100E06BBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be creating _layer again", v2, v3, v4, v5, v6);
}

void sub_100E06C40()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLHighlightController p_buildLayersWithBackgroundForPath:withImage:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLHighlightController.m";
  v6 = 1024;
  v7 = 218;
  v8 = v0;
  v9 = "_backgroundColor";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E06CEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d viewScale must be set before calling this method!", v2, v3, v4, v5, v6);
}

void sub_100E06D70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Fill tool can't have a width.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06DF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Path insertion tool only knows how to be a monoline, pen, pencil, crayon, watercolor, fountainPen, marker, or fill tool.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06E70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Fill tool can't have a width", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06EF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _dynamicFillPath should not be nil by the time -shapeGestureDetectedOnShapeDrawingTimerHelper: is called", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06F70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Colors from the toolkit should not have reduced alpha.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E06FF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Colors from the toolkit should not have reduced alpha.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E07070()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Colors from the toolkit should not have reduced alpha.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E070F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0717C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E07208()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E07294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Clipping produced a zero-sized path", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E07314(uint64_t a1, NSObject *a2)
{
  id v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (id)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_100098814();
  sub_1000437A4((void *)&_mh_execute_header, a2, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5);

  sub_10000B254();
}

void sub_100E073AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E07438()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to find correct drawing to fill. Falling back to the bottom drawing.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E074B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be trying to get the stroke on this tool type.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E07538(uint8_t *buf, int a2, uint64_t a3, os_log_t log)
{
  *(_DWORD *)buf = 67110146;
  *((_DWORD *)buf + 1) = a2;
  *((_WORD *)buf + 4) = 2082;
  *(_QWORD *)(buf + 10) = "+[CRLFreehandDrawingShapeTracingHelper unscaledOutlinePathFromFreehandDrawingShapeLayouts:unsc"
                          "aledOutset:viewScale:]";
  *((_WORD *)buf + 9) = 2082;
  *(_QWORD *)(buf + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingShapeTracingHelper.m";
  *((_WORD *)buf + 14) = 1024;
  *(_DWORD *)(buf + 30) = 139;
  *((_WORD *)buf + 17) = 2048;
  *(_QWORD *)(buf + 36) = a3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to trace freehand drawing shape layouts (count: %zu).", buf, 0x2Cu);
}

void sub_100E075C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Not expecting a shiftedDepth larger than 32", v2, v3, v4, v5, v6);
}

void sub_100E07644()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d TSUSparseArray - getting too deep", v2, v3, v4, v5, v6);
}

void sub_100E076C8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Ignored previous assertion failure ***", v1, 2u);
}

void sub_100E07708(void *a1)
{
  NSObject *v1;
  void *v2;
  int v3;
  void *v4;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v3 = 138543362;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert Assertion backtrace: >>%{public}@<<", (uint8_t *)&v3, 0xCu);

  sub_10009882C();
}

void sub_100E077A8(void *a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  intptr_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = a1;
  v4 = 134218242;
  v5 = sub_1001BB6C0();
  v6 = 2114;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert Assertion backtrace. Load address 0x%0llx, Backtrace:\n%{public}@", (uint8_t *)&v4, 0x16u);

  sub_10009882C();
}

void sub_100E07840()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E078CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E07958()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E079E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E07A70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mapping data providers to types is not allowed after pasteboard writing has started", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E07AF0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  NSObject *v9;

  sub_10000FF14();
  sub_1001BF948(1.5049e-36, v1, v2, v3);
  *(_QWORD *)(v4 + 10) = "-[CRLPasteboardWriteAssistant pasteboardObject]";
  *(_WORD *)(v4 + 18) = v5;
  *(_QWORD *)(v4 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardWriteAssistant.mm";
  *(_WORD *)(v4 + 28) = 1024;
  sub_1001BF95C(v6, v4);
  sub_10000B26C((void *)&_mh_execute_header, v9, v7, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Pasteboard object has already been serialized. Call %{public}@ instead.", v8);

  sub_10000FF24();
}

void sub_100E07B5C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  NSObject *v9;

  sub_10000FF14();
  sub_1001BF948(1.5049e-36, v1, v2, v3);
  *(_QWORD *)(v4 + 10) = "-[CRLPasteboardWriteAssistant serializeNativeDataForPasteboard:]";
  *(_WORD *)(v4 + 18) = v5;
  *(_QWORD *)(v4 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardWriteAssistant.mm";
  *(_WORD *)(v4 + 28) = 1024;
  sub_1001BF95C(v6, v4);
  sub_10000B26C((void *)&_mh_execute_header, v9, v7, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %{public}@ needs to be invoked on the main thread for its implicit read lock", v8);

  sub_10000FF24();
}

void sub_100E07BC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No attempt was made to serialize native data", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E07C48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No attempt was made to serialize native data", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E07CC8(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "void CRLPasteboardAssertNSData(CRLPasteboard *__strong, NSData *__strong, NSString *__strong)";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboard_Internal.h";
  v8 = 1024;
  v9 = 13;
  v10 = 2114;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Data for %{public}@ is too large for the pasteboard. It may be silently dropped.", (uint8_t *)v3);
}

void sub_100E07D78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to create an adornment with a non-finite rect", v2, v3, v4, v5, v6);
}

void sub_100E07DFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to create an adornment with a non-finite rect", v2, v3, v4, v5, v6);
}

void sub_100E07E80(void *a1, int a2, CGFloat a3, CGFloat a4)
{
  NSObject *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  CGSize v18;

  v7 = a1;
  v18.width = a3;
  v18.height = a4;
  v8 = NSStringFromCGSize(v18);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v12[0] = 67110146;
  v12[1] = a2;
  v13 = 2082;
  sub_10000B29C();
  v14 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageResamplingOperation.m";
  sub_100057230();
  v15 = 47;
  v16 = 2114;
  v17 = v10;
  sub_10000B26C((void *)&_mh_execute_header, v7, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be resampling an image to this size %{public}@ on a platform with memory limits!", (uint8_t *)v12);

}

void sub_100E07F70()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "imageProvider != nil";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2);
  sub_10000B264();
}

void sub_100E08000()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not provide a size that is larger than our default size!", v2, v3, v4, v5, v6);
}

void sub_100E0808C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "resampledImage";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0811C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "destination";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E081AC(int a1, NSObject *a2)
{
  id v4;
  uint64_t v5;
  _DWORD v6[6];

  v4 = (id)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a1;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, a2, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E0824C(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  int v7;
  __int16 v8;
  uint64_t v9;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000B29C();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageResamplingOperation.m";
  sub_100057230();
  v7 = 282;
  v8 = 2112;
  v9 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error %@ creating pre-insertion asset wrapper for data.", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100E082F0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "utTypeForOriginalFile";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E08380()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not specify an alternate size if a precise size is required!", v2, v3, v4, v5, v6);
}

void sub_100E0840C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't initialize shader library with nil device.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0848C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't initialize shader library with nil bundle.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0850C()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create library, error %@", v1);
  sub_10000B264();
}

void sub_100E08594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E08614()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E086A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E08720()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E087AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0882C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E088B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E08938()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E089C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d MTLDevice mismatch!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E08A44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E08AD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E08B5C()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create pipeline reflection object, error %@", v1);
  sub_10000B264();
}

void sub_100E08BE4()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create pipeline state, error %@", v1);
  sub_10000B264();
}

void sub_100E08C6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E08CF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E08D84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E08E10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't load shaders from nil library", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E08E90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Sampler state given but not used.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E08F10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E08F9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E09028()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need to call teardown on the editor helper", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E090A8()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't build an editor from the canvas editor with something that isn't a CRLBoardItemSelection (received %@)", v1);
  sub_10000B264();
}

void sub_100E09130()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown editor class", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E091B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0923C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d the default selection should be pointing at the boardItems we're trying to insert", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E092BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E09348()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E093D4(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  v5 = a1;
  v6 = sub_10000B2A8();
  objc_opt_class(v6, v7);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v13[0] = 67110146;
  v13[1] = a3;
  v14 = 2082;
  sub_10000B29C();
  sub_1000195A8();
  v15 = 1029;
  v16 = 2114;
  v17 = v11;
  sub_10000B26C((void *)&_mh_execute_header, v3, v12, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Starting container had a parent info of an unexpected class %{public}@", (uint8_t *)v13);

}

void sub_100E094B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't delete without a command controller", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E09530()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E095BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't ungroup without a command controller", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0963C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E096C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E09754()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E097E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0986C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Offset for index was too large.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E098EC()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't vend an empty command group: %@", v1);
  sub_10000B264();
}

void sub_100E09974()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E09A08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E09A9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E09B30()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "+[CRLWPStorageSanitizer filterText:removingAttachments:removingControlCharacters:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorageSanitizer.m";
  v6 = 1024;
  v7 = 208;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Internal inconsistency in attributed string", v2, 0x22u);
}

void sub_100E09BCC()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "+[CRLWPStorageSanitizer filterText:removingAttachments:removingControlCharacters:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorageSanitizer.m";
  v6 = 1024;
  v7 = 103;
  v8 = v0;
  v9 = "theStr";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E09C78()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "string != nil";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2);
  sub_10000B264();
}

void sub_100E09D08()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "collaboratorPresence != nil";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2);
  sub_10000B264();
}

void sub_100E09D98()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "collaboratorPresence != nil";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2);
  sub_10000B264();
}

void sub_100E09E28()
{
  NSObject *v0;
  id v1;
  NSString *v2;
  void *v3;
  uint64_t v4;
  uint8_t v5[56];
  CGPoint v6;

  sub_1001E0934();
  sub_1001E0944(v1);
  v6.x = sub_1001E0924();
  v2 = NSStringFromCGPoint(v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1001E0910();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, v4, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid target point for collaborator HUD! %@", v5);

  sub_1001E08FC();
}

void sub_100E09ED8()
{
  NSObject *v0;
  id v1;
  NSString *v2;
  void *v3;
  uint64_t v4;
  uint8_t v5[56];
  CGPoint v6;

  sub_1001E0934();
  sub_1001E0944(v1);
  v6.x = sub_1001E0924();
  v2 = NSStringFromCGPoint(v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1001E0910();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, v4, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid target point for collaborator HUD! %@", v5);

  sub_1001E08FC();
}

void sub_100E09F88()
{
  NSObject *v0;
  id v1;
  NSString *v2;
  void *v3;
  uint64_t v4;
  uint8_t v5[56];
  CGPoint v6;

  sub_1001E0934();
  sub_1001E0944(v1);
  v6.x = sub_1001E0924();
  v2 = NSStringFromCGPoint(v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1001E0910();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, v4, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid target point for collaborator HUD! %@", v5);

  sub_1001E08FC();
}

void sub_100E0A038()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-finite followButtonFrameInRenderable.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A0B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-finite sizeOverlayFrameInRenderable.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A138()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-finite avatarFrameInRenderable.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A1B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non-finite standardHUDFrame.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A238()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Retrieving cached path which is empty! Ignoring.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A2B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d p_cachedAnchorPointIfAvailableForDirection should only be called when p_cachedPathIfAvailableForDirection is not nil for the same direction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A338()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "mAutoHideTimer";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0A3C8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "mAutoShrinkTimer";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0A458()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The gesture session should have been started before logging", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A4D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E0A578()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The gesture session should have been started before logging", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A5F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E0A698()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The gesture session should have been started before logging", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A718()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A798()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A818()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A898()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0A998()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AA18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AA98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AB18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AB98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AC18(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100E0ACB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AD38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0ADB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AE38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AEB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AF38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delegate callback called for unexpected insert page view controller.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0AFB8(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100E0B058()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0B0EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method only knows how to count pages of shapes.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B16C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0B200()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0B294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob for control knob tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B314()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLShapeControlLayout only valid for control knob tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B394()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLShapeControlRep only valid for control knob tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Ending knob when we didn't begin!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B494()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to add a nil observer with addObserver:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B514()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to add a nil observer with addConsolidatedPKDrawingObserver:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLPKDrawingProvider that has already been torn down", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B614()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLPKDrawingProvider", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0B694(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "+[CRLSmartStroke classForName:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLSmartStroke.mm";
  v8 = 1024;
  v9 = 64;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to find Smart Stroke class for name: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_100E0B74C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLPasteboardObjectReadAssistantHelper contentDescriptionFromPasteboard:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardObjectReadAssistantHelper.m";
  v7 = 1024;
  v8 = 18;
  v9 = 2082;
  v10 = "data";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E0B804(void *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  Class v5;
  NSString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  void *v16;

  v3 = a1;
  objc_opt_class(a2, v4);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  v9 = 138544130;
  v10 = v7;
  v11 = 2114;
  v12 = v8;
  v13 = 2048;
  v14 = objc_msgSend(a2, "code");
  v15 = 2112;
  v16 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to deserialize content description - Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v9, 0x2Au);

}

void sub_100E0B8F4(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 134217984;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to deserialize content description - property list format was unexpectedly %lu", (uint8_t *)&v3, 0xCu);
}

void sub_100E0B96C(uint64_t a1, void *a2, int a3)
{
  NSObject *v3;
  id v5;
  id *v6;
  id WeakRetained;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  id v17;

  v5 = a2;
  v6 = (id *)sub_10000B2A8();
  WeakRetained = objc_loadWeakRetained(v6);
  v9[0] = 67110146;
  v9[1] = a3;
  v10 = 2082;
  v11 = "-[CRLCountedObserver decrementCount]";
  v12 = 2082;
  v13 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m";
  v14 = 1024;
  v15 = 59;
  v16 = 2112;
  v17 = WeakRetained;
  sub_10000B26C((void *)&_mh_execute_header, v3, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLCountedObserver - attempted to decrement past 0 for observer %@!", (uint8_t *)v9);

}

void sub_100E0BA4C(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a2 = 67110146;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2082;
  *(_QWORD *)(a2 + 10) = "-[CRLChangeNotifier p_processChanges:preprocessing:]";
  *(_WORD *)(a2 + 18) = 2082;
  *(_QWORD *)(a2 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLChangeNotifier.m";
  *(_WORD *)(a2 + 28) = 1024;
  *(_DWORD *)(a2 + 30) = 310;
  *(_WORD *)(a2 + 34) = 2112;
  *(_QWORD *)(a2 + 36) = a1;
  sub_10000B26C((void *)&_mh_execute_header, a4, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Exception thrown during %@; some observers may not have been notified.",
    (uint8_t *)a2);

}

void sub_100E0BADC()
{
  __int16 v0;
  __int16 v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[10];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v5 = "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke";
  v6 = v0;
  sub_10000B28C();
  v7 = 243;
  v8 = v1;
  v9 = "_objectObserversToCheckForRemovalAfterNotifications";
  sub_10000B26C((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v4);
  sub_10000B264();
}

void sub_100E0BB74()
{
  __int16 v0;
  __int16 v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[10];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v5 = "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke";
  v6 = v0;
  sub_10000B28C();
  v7 = 242;
  v8 = v1;
  v9 = "_classObserversToCheckForRemovalAfterNotifications";
  sub_10000B26C((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v4);
  sub_10000B264();
}

void sub_100E0BC0C()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;

  sub_10004CE88();
  v3 = "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke";
  v4 = v0;
  sub_10000B28C();
  sub_10004CE74();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _currentlyNotifyingCount managed to get negative! %zi", v2);
  sub_10000B264();
}

void sub_100E0BCA0()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;

  sub_10004CE88();
  v3 = "-[CRLChangeNotifier p_processChanges:preprocessing:]_block_invoke";
  v4 = v0;
  sub_10000B28C();
  sub_10004CE74();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _currentlyNotifyingCount should be > 0! %zi", v2);
  sub_10000B264();
}

void sub_100E0BD34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The source storage and/or the specified sub range are invalid.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0BDB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d zero-length character", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0BE34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to advance curCharIndex", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0BEB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d zero-length character", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0BF34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d request for characters past end of string", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0BFB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d request for characters past end of string (extendedString)", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C034()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Callers to -[CRLShapeEditor intersectPaths:] must have a -[tag] method to specify what kind of intersection to perform.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C0B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Changing shapes is only supported from within an open command group.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot change shape to a shape whose width and height are both nonzero.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C1B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot change shape from a shape whose width or height is zero", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C234(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[NSObject(CRLAdditions) crl_removeObserverForToken:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSObject_CRLAdditions.m";
  v8 = 1024;
  v9 = 203;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to stop key-value observing on %@ using a token that it was not associated with", (uint8_t *)v3, 0x2Cu);
}

void sub_100E0C2EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1001FD740();
  sub_1001FD72C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d App group identifier (%@) has unexpected prefix.", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0C380()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Importer compatibility check is being handled for an importer not in the list.", v2, v3, v4, v5, v6);
}

void sub_100E0C404()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not attempt to complete compatibility logic if not all importers have provided a compatibility response!", v2, v3, v4, v5, v6);
}

void sub_100E0C488()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d selection is past the end of storage", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C508()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal nil parameter", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C588()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal nil parameter", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C608()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0C694()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call when layout has not been validated", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C714()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal anchored range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C794()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d column transform hasn't been set yet.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid charIndex for line fragment", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0C894()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0C920()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0C9AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0CA38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d column has unexpected start", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0CAB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ruby glyph range is meaningless without limitSelection", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0CB38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0CBB8()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;

  sub_10000B2D4();
  v3 = "-[CRLInteractiveCanvasRepContentSubviewUpdater p_mainThreadUpdateSubviewsFromRepContentPiles:]_block_invoke";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasRepContentSubviewUpdater.m";
  v6 = 1024;
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Rep content pile did not implement either CRLInteractiveCanvasRepLayerPile or CRLInteractiveCanvasRepContentPlatformViewPile: %@", v2);
  sub_10000B264();
}

void sub_100E0CC4C()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLInteractiveCanvasRepContentSubviewUpdater p_mainThreadUpdateSubviewsFromRepContentPiles:]_block_invoke";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasRepContentSubviewUpdater.m";
  v7 = 1024;
  v8 = 138;
  v9 = v0;
  v10 = "contentLayers";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E0CCEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The topmost rep content subview should always contain layers", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0CD6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should always be a rep content subview with layers on top.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0CDEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout should have run at least once on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0CE6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0CEEC()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;

  sub_10000B2D4();
  v3 = "-[CRLInteractiveCanvasRepContentSubviewReuser initWithSubview:originalRepContentPile:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasRepContentSubviewUpdater.m";
  v6 = 1024;
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Rep content pile did not implement either CRLInteractiveCanvasRepLayerPile or CRLInteractiveCanvasRepContentPlatformViewPile: %@", v2);
  sub_10000B264();
}

void sub_100E0CF80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reusing the subview for rep content layers must be allowed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0D000()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0D080()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLFreehandDrawingSnapToShapeHelper p_snapToShapeWithPKStrokes:isBezierPathFromOutlineFill:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingSnapToShapeHelper.m";
  v6 = 1024;
  v7 = 80;
  v8 = v0;
  v9 = "_icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E0D12C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected a valid bezierPath", v2, v3, v4, v5, v6);
}

void sub_100E0D1B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown pk shape type", v2, v3, v4, v5, v6);
}

void sub_100E0D234(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  void *v8;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  v7 = 2114;
  v8 = v4;
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E0D2E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected menuAppearance!", v2, v3, v4, v5, v6);
}

void sub_100E0D368(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  void *v8;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  v7 = 2114;
  v8 = v4;
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E0D414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told will display when already displayed", v2, v3, v4, v5, v6);
}

void sub_100E0D498(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLBezierPath(CRLCanvasAdditions) boundsIncludingCRLStroke:]_block_invoke";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBezierPath_CRLCanvasAdditions.m";
  v7 = 1024;
  v8 = 45;
}

void sub_100E0D540(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLDocumentModelEnumerator initWithEnumerator:flags:filter:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDocumentModelEnumerator.m";
  v7 = 1024;
  v8 = 67;
  v9 = 2082;
  v10 = "enumerator";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E0D5F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of 0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0D678()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of 0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0D6F8(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10021458C(a2, __stack_chk_guard);
  sub_100214580();
  sub_100214574();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100214560((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of %f", v5, v6, v7, v8, 2u);

  sub_100065B94();
}

void sub_100E0D798(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10021458C(a2, __stack_chk_guard);
  sub_100214580();
  sub_100214574();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100214560((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of %f", v5, v6, v7, v8, 2u);

  sub_100065B94();
}

void sub_100E0D838()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of 0", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0D8B8(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10021458C(a2, __stack_chk_guard);
  sub_100214580();
  sub_100214574();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100214560((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d requesting a delay of %f", v5, v6, v7, v8, 2u);

  sub_100065B94();
}

void sub_100E0D958()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[20];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSKnobDragGestureRecognizer.m";
  v4 = 1024;
  v5 = 197;
  v6 = v0;
  v7 = "_tracker";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E0DA00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Our knob validator block expects to stop knob recognition before we have begun", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0DA80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Delayed knob tracking timer fired when we have no tracker!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0DB00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't have delayed knob tracking!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0DB80(void *a1)
{
  void *v1;
  id v2;
  id v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1;
  v3 = objc_msgSend((id)sub_10000B2A8(), "state");
  v4 = sub_10034792C((unint64_t)v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100214574();
  sub_10000B29C();
  sub_100057230();
  sub_100214560((void *)&_mh_execute_header, v6, v7, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d delay fired when knob GR in state %@", v8, v9, v10, v11, 2u);

  sub_100065B94();
}

void sub_100E0DC48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to toggle fill color picker presentation while its color well is hidden.", v2, v3, v4, v5, v6);
}

void sub_100E0DCCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to toggle stroke color picker presentation while its color well is hidden.", v2, v3, v4, v5, v6);
}

void sub_100E0DD50()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "+[NSUUID(NSUUID_CRLAdditions) crl_uuidByCryptographicHashOfString:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSUUID_CRLAdditions.m";
  v6 = 1024;
  v7 = 84;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d SHA256 hash should return 32(CC_SHA256_DIGEST_LENGTH) bytes.", v2, 0x22u);
}

void sub_100E0DDEC()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "+[NSUUID(NSUUID_CRLAdditions) crl_uuidByCryptographicHashOfString:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSUUID_CRLAdditions.m";
  v6 = 1024;
  v7 = 67;
  v8 = v0;
  v9 = "string";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E0DE98()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad metrics for font %{public}@");
  sub_10000B264();
}

void sub_100E0DF18(int a1)
{
  __int16 v1;
  os_log_t v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  v3[0] = 67110146;
  v3[1] = a1;
  v4 = 2082;
  sub_10000B29C();
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Fonts/CRLWPFontMetricsCache.mm";
  v6 = 1024;
  v7 = 54;
  v8 = v1;
  v9 = "font";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v3, 0x2Cu);
  sub_10000B264();
}

void sub_100E0DFC8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad underlinePosition info for %{public}@");
  sub_10000B264();
}

void sub_100E0E048()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad underlineThickness info for %{public}@");
  sub_10000B264();
}

void sub_100E0E0C8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad xHeight info for %{public}@");
  sub_10000B264();
}

void sub_100E0E148()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad verticalHeight info for %{public}@");
  sub_10000B264();
}

void sub_100E0E1C8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad spaceAfter for %{public}@");
  sub_10000B264();
}

void sub_100E0E248()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad leadingBelow for %{public}@");
  sub_10000B264();
}

void sub_100E0E2C8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad leadingAbove for %{public}@");
  sub_10000B264();
}

void sub_100E0E348()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad descent for %{public}@");
  sub_10000B264();
}

void sub_100E0E3C8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad ascent for %{public}@");
  sub_10000B264();
}

void sub_100E0E448()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad attachmentHeight for %{public}@");
  sub_10000B264();
}

void sub_100E0E4C8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad spaceBefore for %{public}@");
  sub_10000B264();
}

void sub_100E0E548(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLNonInteractiveInsertionContext preferredCenter]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInsertionContext.m";
  v7 = 1024;
  v8 = 197;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The preferred center is not applicable for a noninteractive insertion context.", (uint8_t *)v2, 0x22u);
}

void sub_100E0E5F0(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLiOSDocumentMode initWithBoardViewController:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLiOSDocumentMode.m";
  v7 = 1024;
  v8 = 27;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be initializing an abstract instance of CRLiOSDocumentMode.", (uint8_t *)v2, 0x22u);
}

void sub_100E0E698(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[NSError(CRLAdditions) crl_errorWithCode:userInfo:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSError_CRLAdditions.m";
  v7 = 1024;
  v8 = 39;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad error code", (uint8_t *)v2, 0x22u);
}

void sub_100E0E740()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should create item source with at least one item provider!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0E7C0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "itemProviderError";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0E850(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error loading image data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0E8E4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "imageFillError";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0E974(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error loading rich text file. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0EA08(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a1;
  v7 = (objc_class *)sub_100081774((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  sub_100081768();
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000816F8();
  sub_10008172C((void *)&_mh_execute_header, v10, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error creating attributed string. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, 2u);

  sub_100081740();
}

void sub_100E0EAD4(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error loading rich text data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0EB68(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a1;
  v7 = (objc_class *)sub_100081774((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  sub_100081768();
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000816F8();
  sub_10008172C((void *)&_mh_execute_header, v10, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error creating attributed string. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, 2u);

  sub_100081740();
}

void sub_100E0EC34(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error creating NSString from data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0ECC8(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLiOSItemProviderItemSource loadImportedTextStringWithHandler:]_block_invoke_2";
  v7 = 2082;
  sub_10000B28C();
  v8 = 374;
  v9 = 2112;
  v10 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to make a string out of data with UTI %@", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100E0ED70(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error loading plain string data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0EE04(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Failed to deserialize the item provider team data with error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0EE98()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "progress";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0EF28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected number of item providers!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0EFA8(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v5;
  uint64_t v6;
  Class v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v12[18];
  uint64_t v13;

  sub_100221D04(a1, __stack_chk_guard);
  v5 = sub_10000B2A8();
  objc_opt_class(v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  *(_DWORD *)v12 = 67110146;
  *(_DWORD *)&v12[2] = a3;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  *(_DWORD *)&v12[15] = 541;
  v12[17] = 2114;
  v13 = v10;
  sub_10000B26C((void *)&_mh_execute_header, v3, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Native object provided was not a pasteboard object! Got %{public}@", (uint8_t *)v12);

  sub_100065B94();
}

void sub_100E0F070(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Failed to deserialize native data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0F104(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[14];

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No progress provided for UTI %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E0F194(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error loading plain text data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0F228(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[14];

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a temporary file for oversize string: %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E0F2B8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "stringError";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0F348(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[14];

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No progress provided for UTI %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E0F3D8(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error loading URL data. Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E0F46C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "url";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0F4FC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "stringError";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0F58C(uint64_t a1, void *a2, void *a3)
{
  NSObject *v3;
  id v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;

  v6 = a2;
  v8 = (objc_class *)sub_10000DEAC((uint64_t)v6, v7);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "domain"));
  v12 = 138413314;
  v13 = a1;
  v14 = 2114;
  v15 = v10;
  v16 = 2114;
  v17 = v11;
  v18 = 2048;
  v19 = objc_msgSend(a3, "code");
  v20 = 2112;
  v21 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error loading importable data from url (%@). Error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v12, 0x34u);

}

void sub_100E0F688()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected number of item providers!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0F708(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  NSString *v9;
  void *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  void *v19;

  v5 = a1;
  v6 = sub_10000B2A8();
  v8 = (objc_class *)objc_opt_class(v6, v7);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11[0] = 67110146;
  v11[1] = a3;
  v12 = 2082;
  v13 = "id CRLCheckedProtocolCast(__strong id<NSObject>, NSUInteger, ...)";
  v14 = 2082;
  v15 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLCast.m";
  v16 = 1024;
  v17 = 65;
  v18 = 2114;
  v19 = v10;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected object type %{public}@ in checked cast to multiple protocols", (uint8_t *)v11, 0x2Cu);

}

void sub_100E0F7F8(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLConnectionLineRep newTrackerForKnob:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLConnectionLineRep.m";
  v7 = 1024;
  v8 = 250;
  v9 = 2082;
  v10 = "knob";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E0F8B0(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "+[CRLWPHyperlinkField newURLFromURLReference:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPHyperlinkField.mm";
  v8 = 1024;
  v9 = 171;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create an NSURL from \"%@\"", (uint8_t *)v3, 0x2Cu);
}

void sub_100E0F968()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0FA04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E0FAA0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error detecting faces: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100E0FB14(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLFreehandDrawingTool performActionWithInputPoint:isInitialPoint:isFinalPoint:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingTool.m";
  v7 = 1024;
  v8 = 55;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be already tracking or performing actions when receiving the initial point.", (uint8_t *)v2, 0x22u);
}

void sub_100E0FBBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E0FC5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E0FCFC(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "routePath should never search more than 300 nodes. Searched %i.", (uint8_t *)v2, 8u);
}

void sub_100E0FD70()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "layout";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E0FE00(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[14];

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d no ICC for this rep (%@); consider asking self.canvas instead",
    (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E0FE90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclass should override this method", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0FF10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d i_layerFrameInScaledCanvasIgnoringDragging is invalid in this state", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E0FF90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Connection line item should not be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10010()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method should not be called if current rep is not connected to connection line.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10090(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v4;
  __CFString *v6;
  Class v7;
  NSString *v8;
  _DWORD v9[2];
  const char *v10;
  int v11;
  __int16 v12;
  __CFString *v13;
  __int16 v14;
  uint64_t v15;

  v4 = a2;
  if (a1)
  {
    objc_opt_class(a1, a2);
    v8 = NSStringFromClass(v7);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue(v8);
  }
  else
  {
    v6 = CFSTR("Nil");
  }
  v9[0] = 67110402;
  v9[1] = v4;
  sub_100214574();
  v10 = "-[CRLCanvasRep repForPreviewing]";
  sub_10000DE60();
  v11 = 1139;
  v12 = 2114;
  v13 = v6;
  v14 = 2050;
  v15 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should have been a rep suitable for previewing <%{public}@: %{public}p>", (uint8_t *)v9, 0x36u);
  if (a1)

  sub_100065B94();
}

void sub_100E10180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to find topmost rotated ancestor for counteracting the layer transform.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10200()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This rep's clipRect should not be null.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10280()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "interactiveCanvasController";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E10310()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If something in a group has been selected, there should  be a group selection.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10390()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect four collaborator sublayers", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10410()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -positionOfStandardKnob:forBounds: works for standard knobs only", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10490()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "knob";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E10520()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning dynamic operation on rep already being manipulated", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E105A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't have shadow renderable if shadow is not enabled", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10620()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "shadow";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E106B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d dynamic drag beginning outside of dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10730()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "cmd";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E107C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d dynamic rotate began outside of dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10840(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  _DWORD v12[14];

  v5 = a1;
  v6 = sub_10000B2A8();
  objc_opt_class(v6, v7);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v12[0] = 67110146;
  v12[1] = a3;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v3, v11, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't know how to rotate a %@", (uint8_t *)v12);

  sub_100065B94();
}

void sub_100E10900()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "cmd";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E10990()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d resize begins without being in dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10A10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't create CRLCommandSetInfoGeometry without a boardItem.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10A90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d free transform begins without being in dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E10B10()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "itemProvider";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E10BA0(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[14];

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to make a preview drag image for infos %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E10C30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid charIndex.", v2, v3, v4, v5, v6);
}

void sub_100E10CB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Locale string is too short.", v2, v3, v4, v5, v6);
}

void sub_100E10D38()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLPasteboardCopyAssistant initWithPasteboard:sourceContext:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardCopyAssistant.mm";
  v6 = 1024;
  v7 = 19;
  v8 = v0;
  v9 = "pasteboard";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E10DE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Didn't attempt to copy before trying to load native data.", v2, v3, v4, v5, v6);
}

void sub_100E10E68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_100E10EEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If %s found model objects, one should be a storage.", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E10F84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E11020()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLDisplayLink setPaused:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDisplayLink.m";
  v6 = 1024;
  v7 = 71;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't pause an invalid display link.", v2, 0x22u);
}

void sub_100E110BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E1115C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E111FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E11290()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E11324()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E113B8()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLGroupLayout childInfosForChildLayouts]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupLayout.m";
  v6 = 1024;
  v7 = 133;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should have same number of children!", v2, 0x22u);
}

void sub_100E11454()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E114F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E11594(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLCanvasHUDController p_showHUDAtPoint:inCanvasView:withNudge:size:anchorPoint:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasHUDController.m";
  v7 = 1024;
  v8 = 211;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d trying to move the CanvasHUD from one canvas to another while it is visible!", (uint8_t *)v2, 0x22u);
}

void sub_100E1163C(void *a1, int a2, CGFloat a3, CGFloat a4)
{
  NSObject *v7;
  NSString *v8;
  void *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  void *v18;
  CGPoint v19;

  v7 = a1;
  v19.x = a3;
  v19.y = a4;
  v8 = NSStringFromCGPoint(v19);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10[0] = 67110146;
  v10[1] = a2;
  v11 = 2082;
  v12 = "-[CRLCanvasHUDController p_showHUDAtPoint:inCanvasView:withNudge:size:anchorPoint:]";
  v13 = 2082;
  v14 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasHUDController.m";
  v15 = 1024;
  v16 = 204;
  v17 = 2112;
  v18 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Anchor point should be [0, 1]! Got %@", (uint8_t *)v10, 0x2Cu);

}

void sub_100E1173C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E117D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E11864()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint8_t *v5;
  NSObject *v6;

  sub_10000FF14();
  sub_10000FEEC(v1, v2, v3, 1.5047e-36);
  sub_1000437A4((void *)&_mh_execute_header, v6, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5);

  sub_10000FF24();
}

void sub_100E118A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E11938()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Movie validation cancelled itself without the checker knowing about it.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E119B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Movie validation cancelled itself without the checker knowing about it.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11A38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Movie validation cancelled itself without the checker knowing about it.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11AB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Movie validation cancelled itself without the checker knowing about it.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11B38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid preset", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11BB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asset tracks must be loaded", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11C38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asset tracks must be loaded", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11CB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asset tracks must be loaded", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11D38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E11DC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E11E50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for mask mode center of rotation when not in mask edit mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11ED0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11F50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Mask should never be reset in mask edit mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E11FD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d maskWasApplied should not be called in mask edit mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E12050()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[20];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  uint64_t v7;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageLayout.m";
  v4 = 1024;
  v5 = 893;
  v6 = 2048;
  v7 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d already editing mask in mode %ld", v2, 0x2Cu);
  sub_10000B264();
}

void sub_100E120F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E12180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d not in mask edit mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E12200()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If image has masking path it must specify a path to stroke", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E12280()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1230C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000B29C();
  sub_10000B28C();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E123B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000B29C();
  sub_10000B28C();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E12464()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E124F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1257C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E12608(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000B29C();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLConnectionLinePathSource.m";
  v7 = 1024;
  v8 = 46;
  v9 = 2112;
  v10 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Ignoring invalid bezier path %@", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100E126B0()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 60;
  v5 = v0;
  v6 = "self.headMagnet";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E12744()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 63;
  v5 = v0;
  v6 = "self.tailMagnet";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E127D8()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 222;
  v5 = v0;
  v6 = "path";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E1286C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[AVAssetExportSession(CRLAdditions) crl_exportSessionWithAsset:presetName:preserveFrameDuration:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/AVAssetExportSession_CRLAdditions.m";
  v7 = 1024;
  v8 = 32;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have been able to request conversion to HEVC on hardware without encoding support!", (uint8_t *)v2, 0x22u);
}

void sub_100E12914(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLMutableDropShadow setColor:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShadowMutableMethods.h";
  v7 = 1024;
  v8 = 34;
  v9 = 2082;
  v10 = "color";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E129CC(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLiOSDocumentModeFreehandDrawingTransform modeWillBeginFromMode:forced:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLiOSDocumentModeFreehandDrawingTransform.m";
  v7 = 1024;
  v8 = 23;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Transform mode is a submode of freehand drawing mode and can only transition from a freehand drawing mode", (uint8_t *)v2, 0x22u);
}

void sub_100E12A74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E12B10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E12BAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot show media replace UI with cross-container selection!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E12C2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Showing replace media UI when more than one image is selected!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E12CAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The URL array must only contain one object.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E12D2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The data array must only contain one object.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E12DAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't replace media interactively without running completion blocks on the main queue.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E12E2C(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v5[0] = 67109378;
  v5[1] = a2;
  v6 = 2114;
  v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);

  sub_10000B254();
}

void sub_100E12EE4(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLMediaReplacingHelper p_replaceCanvasElementInfo:withInfoFromInfoImporter:interactively:allowedTypes:actionSt"
       "ring:queue:completion:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMediaReplacingHelper.m";
  v8 = 1024;
  v9 = 254;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid single info to replace: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_100E12F9C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;

  v2[0] = 67110402;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLMediaReplacingHelper p_replaceCanvasElementInfo:withInfoFromInfoImporter:interactively:allowedTypes:actionSt"
       "ring:queue:completion:]_block_invoke_8";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLMediaReplacingHelper.m";
  v7 = 1024;
  v8 = 445;
  v9 = 2082;
  v10 = "dispatch_get_main_queue()";
  v11 = 2082;
  v12 = "queue";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v2, 0x36u);
}

void sub_100E13064()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected knob tag", v2, v3, v4, v5, v6);
}

void sub_100E130E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected knob tag", v2, v3, v4, v5, v6);
}

void sub_100E1316C()
{
  __int16 v0;
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  sub_10000B278();
  v4 = "CRLCanvasKnobTag CRLCanvasKnobTagWithFlip(CRLCanvasKnobTag)";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnob.m";
  v7 = 1024;
  v8 = 238;
  v9 = 2048;
  v10 = v1;
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d don't know how to flip knob tag %tu", v3);
}

void sub_100E13210()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLCanvasKnob initWithType:position:radius:tag:onRep:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasKnob.m";
  v7 = 1024;
  v8 = 313;
  v9 = v0;
  v10 = "rep";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100E132B4()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLiOSRepDragGestureRecognizer initWithInteractiveCanvasController:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSRepDragGestureRecognizer.m";
  v6 = 1024;
  v7 = 108;
  v8 = v0;
  v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E13360()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should close group before resetting", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E133E0(void *a1)
{
  void *v1;
  id v2;
  __CFString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10000DE74(a1);
  v2 = sub_10019E564();
  v3 = sub_10034792C((unint64_t)v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10000DEC0();
  sub_10019E534((void *)&_mh_execute_header, v5, v6, "reset drag from state %@", v7, v8, v9, v10, v11);

  sub_10009882C();
}

void sub_100E13460()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d drag failed to take control!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E134E0(unint64_t a1, void *a2)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;

  if (a1 > 5)
    v2 = 0;
  else
    v2 = (uint64_t)*(&off_101249008 + a1);
  v4 = 138412290;
  v5 = v2;
  v3 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "set drag state to %@", (uint8_t *)&v4, 0xCu);

  sub_10009882C();
}

void sub_100E13580()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019E558();
  sub_1001105F8((void *)&_mh_execute_header, v0, v1, "failing during a scroll", v2, v3, v4, v5, v6);
  sub_100013B30();
}

void sub_100E135AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019E558();
  sub_1001105F8((void *)&_mh_execute_header, v0, v1, "dragForDragging is not the repForSelecting, no dragging allowed", v2, v3, v4, v5, v6);
  sub_100013B30();
}

void sub_100E135D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019E558();
  sub_1001105F8((void *)&_mh_execute_header, v0, v1, "freehand drawing toolkit preventing drag", v2, v3, v4, v5, v6);
  sub_100013B30();
}

void sub_100E13604(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10000DE74(a1);
  sub_100118C00();
  sub_10000DEC0();
  sub_10019E534((void *)&_mh_execute_header, v2, v3, "%zi touches began", v4, v5, v6, v7, v8);

  sub_10009882C();
}

void sub_100E13674()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019E558();
  sub_1001105F8((void *)&_mh_execute_header, v0, v1, "ignoring touch movement to defer to system drag gesture", v2, v3, v4, v5, v6);
  sub_100013B30();
}

void sub_100E136A0(void *a1)
{
  void *v1;
  id v2;
  __CFString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10000DE74(a1);
  v2 = sub_10019E564();
  v3 = sub_10034792C((unint64_t)v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10000DEC0();
  sub_10019E534((void *)&_mh_execute_header, v5, v6, "ending gesture with state: %@", v7, v8, v9, v10, v11);

  sub_10009882C();
}

void sub_100E13720(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10000DE74(a1);
  sub_100118C00();
  sub_10000DEC0();
  sub_10019E534((void *)&_mh_execute_header, v2, v3, "%zi touches ended", v4, v5, v6, v7, v8);

  sub_10009882C();
}

void sub_100E13790()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019E558();
  sub_1001105F8((void *)&_mh_execute_header, v0, v1, "dragged too far during delay. failing.", v2, v3, v4, v5, v6);
  sub_100013B30();
}

void sub_100E137BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019E558();
  sub_1001105F8((void *)&_mh_execute_header, v0, v1, "delay elapsed", v2, v3, v4, v5, v6);
  sub_100013B30();
}

void sub_100E137E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019E558();
  sub_1001105F8((void *)&_mh_execute_header, v0, v1, "beginning drag gesture", v2, v3, v4, v5, v6);
  sub_100013B30();
}

void sub_100E13814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10019E558();
  sub_1001105F8((void *)&_mh_execute_header, v0, v1, "begin tracking drag", v2, v3, v4, v5, v6);
  sub_100013B30();
}

void sub_100E13840()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d setting tracker points when there is no tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E138C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Search reference selection path must contain the text selection if selection path is provided", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13940()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New selection is not the same class as the old selection.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E139C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Selection path must be provided on initialization for any search reference that is asked for one.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13A40(void *a1, void *a2, int a3)
{
  NSObject *v5;
  id v6;
  void *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  id v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  v5 = a1;
  v6 = objc_msgSend(a2, "code");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  v8[0] = 67110658;
  v8[1] = a3;
  v9 = 2082;
  v10 = "+[CRLManagedAccountUtilities loggedInUserHasManagedAppleID]";
  v11 = 2082;
  v12 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLManagedAccountUtilities.m";
  v13 = 1024;
  v14 = 26;
  v15 = 2048;
  v16 = v6;
  v17 = 2114;
  v18 = v7;
  v19 = 2112;
  v20 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not determine if iCloud account is Managed Apple ID, error: %zd %{public}@ %@", (uint8_t *)v8, 0x40u);

}

void sub_100E13B5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Didn't end paragraph layout", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13BDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d paragraph must be set up before requesting typesetter", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13C5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil state in paragraph layout", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13CDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E13D68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cached paragraph typesetter has wrong char count", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13DE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E13E74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have at least one style run", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13EF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Incorrect initial range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13F74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d localRange.length must be >= 1", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E13FF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E14080()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid local range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14100()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create temporary string for _textBuffer", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1420C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid local range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1428C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E14318()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E143A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E14430()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid localRange parameter", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E144B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Last line should reach the end of the paragraph", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14530()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad endCharIndex", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E145B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad lineRef count", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14630()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad leading", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E146B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad start char index", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14730()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't skip glyph vectors with ruby", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E147B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d layoutLine called without paragraph being set up correctly", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14830()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLWPResolvePropertyForStyles should not return NSNull.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E148B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1493C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect label color, or paragraph color as the default.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E149BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad localMaxCharIndex", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14A3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CTTypesetterCreateLine returned nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14ABC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad line width", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14B3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad hyphenation result", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14BBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil lineRef", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14C3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d nil typesetter", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14CBC()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[20];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  uint64_t v7;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPCoreTextTypesetter.mm";
  v4 = 1024;
  v5 = 2878;
  v6 = 2048;
  v7 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad range length %ld.", v2, 0x2Cu);
  sub_10000B264();
}

void sub_100E14D60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d line fragment isn't from the current paragraph", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14DE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal list level", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14E60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad run index", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14EE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Negative lineRef start position", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14F60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Emphasis marks, no font.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E14FE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad runCount", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15060()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d break line has no thickness", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E150E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d line fragment isn't from the current paragraph", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15160()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10027DD5C();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E151D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10027DD5C();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to min", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15250()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad strikethru value", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E152D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad underline value", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15350()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad font", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E153D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad writing direction map.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15450()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Channel is closed", v2, v3, v4, v5, v6);
}

void sub_100E154D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Flushing ZIP write channel only adds a barrier.", v2, v3, v4, v5, v6);
}

void sub_100E15558(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPPadding initWithTopInset:leftInset:bottomInset:rightInset:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPPadding.mm";
  v7 = 1024;
  v8 = 53;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal huge padding value", (uint8_t *)v2, 0x22u);
}

void sub_100E15600(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLCanvasLayoutController p_recreateLayoutsIfNeededToValidateLayouts:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayoutController.m";
  v7 = 1024;
  v8 = 637;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be validating layouts that need recreating", (uint8_t *)v2, 0x22u);
}

void sub_100E156A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15734()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E157C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1584C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E158D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15964()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E159F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15A7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15B08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15B94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot insert newline with cross-container selection!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15C14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot check that all images are supported types with cross-container selection!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15C94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15D20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot toggle mask edit mode with cross-container selection!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15DA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15E2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15EB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E15F44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should save default style with a single object selected!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E15FC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shape is not a line segment, but using line segment knob tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E16044()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob for line segment knob tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E160C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong rep class for line segment knob tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E16144()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob type for line segment resize", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E161C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16250()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layouts must either override computeLayoutGeometry, or have a non-nil info to query for geometry", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E162D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1635C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E163E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not begin a dynamic operation while already in one.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E16468()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E164F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16580()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1660C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not transfer layout geometry to info that's in the document!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1668C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16718()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E16798()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only be called when we have a dynamic info geometry to reset!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E16818()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should be called only when dragging in mask mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E16898()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16924()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E169B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16A3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16AC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16B64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16C00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CVC should have been torn down before dealloc", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E16C80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16D0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16D98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16E24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16EB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Something has gone wrong.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E16F30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E16FBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told twice about indirect touches!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1703C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told twice about touches!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E170BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E17148()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told twice about indirect touches!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E171C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be told twice about touches!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E17248()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E172D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected context menu controller closing!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E17354()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected context menu controller updating!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E173D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E17454()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to enter Quick Select mode at an inappropriate time.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E174D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E17560()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E175EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000B29C();
  sub_10000B28C();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E17698()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E17724()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000B29C();
  sub_10000B28C();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E177D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1785C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E178E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Modal operations must be started on the main thread,", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E17968()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E179F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Modal operations must be started on the main thread,", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E17A74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E17B00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Modal operations must be ended on the main thread,", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E17B80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E17C0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Uneven calls to begin/endPreventingDefaultPencilBehaviors!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E17C8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E17D18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E17DA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have at least one tracker to ask for its center of rotation", v2, v3, v4, v5, v6);
}

void sub_100E17E28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have at least one tracker to ask for its total angle of rotation", v2, v3, v4, v5, v6);
}

void sub_100E17EAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E17F40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot render curved shadow, the size is too large for the CGContext to render. Returning an empty image instead.", v2, v3, v4, v5, v6);
}

void sub_100E17FC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot render curved shadow, the size is too large for the CGContext to render. Returning empty image instead", v2, v3, v4, v5, v6);
}

void sub_100E18048()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E180DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E18170(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLCommandControllerObjCHelper fatalAssertOnNilCommand:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandControllerObjCHelper.m";
  v7 = 1024;
  v8 = 17;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to enqueue nil command.", (uint8_t *)v2, 0x22u);
}

void sub_100E18220()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index vector size is wrong", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E182A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected an even number of indexes", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18320()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d index vector size is wrong", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E183A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be trying to map NSNotFound", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18420()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad affinity", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E184A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't be trying to map NSNotFound", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18520()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asked to paste when we said we did not want to!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E185A0(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100E18640(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100E186E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask for subselection freehand drawings if we cannot copy subselection!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18760()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected a layout so that we can calculate the geometries correctly", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E187E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1886C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only call this if we have freehand drawings to insert!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E188EC(uint64_t a1, int a2)
{
  uint64_t v2;
  os_log_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000B29C();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingEditor.m";
  v7 = 1024;
  v8 = 619;
  v9 = 2112;
  v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a temporary directory for sharing drawings as images: %@", (uint8_t *)v4, 0x2Cu);
  sub_10000B264();
}

void sub_100E1899C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E18A28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E18AB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E18B40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for starPoints on wrong type of pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18BC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for starRadius on wrong type of pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18C40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for arrowIndent on wrong type of pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18CC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for arrowIndent on wrong type of pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18D40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for arrowIndent on wrong type of pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18DC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d asking for arrowIndent on wrong type of pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E18E40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d UITouch force is invalid; using a default in its place.",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000DE48();
}

void sub_100E18EC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d UITouch azimuth is invalid; using a default in its place.",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000DE48();
}

void sub_100E18F40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d UITouch altitudeAngle is invalid; using a default in its place.",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000DE48();
}

void sub_100E18FC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1904C(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error creating CRLAsset: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E190E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1916C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method must not be called if the importer has been canceled.", v2, v3, v4, v5, v6);
}

void sub_100E191F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1927C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid duration received from avAsset on load, preventing us from setting up start and end time properly based on it.", v2, v3, v4, v5, v6);
}

void sub_100E19300(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error creating asset wrapper: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E19394(id *a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;

  v5 = sub_1002B9F20(a2, __stack_chk_guard);
  v7 = (objc_class *)sub_1002B9F38((uint64_t)v5, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "domain"));
  sub_1002B9F2C();
  sub_1002B9EF0();
  sub_100065B80((void *)&_mh_execute_header, v10, v11, "Error creating CRLAsset: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v12, v13, v14, v15, v16);

  sub_100065B94();
}

void sub_100E19430()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E194BC(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[NSProgress(NSProgress_CRLAdditions) crl_progressWithCRLProgress:totalUnitCount:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSProgress_CRLAdditions.m";
  v7 = 1024;
  v8 = 70;
  v9 = 2082;
  v10 = "progressObserver";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E19574()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Had to force keyboard animating to NO, OS never finished telling us the keyboard came in or cancelled.", v2, v3, v4, v5, v6);
}

void sub_100E195F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d addModalKeyboardObserver attempt to add the same model observer.", v2, v3, v4, v5, v6);
}

void sub_100E1967C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E19708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E19794()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E19820()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E198AC(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  NSObject *v17;
  NSString *v18;
  void *v19;
  NSString *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  CGRect v26;
  CGRect v27;

  v17 = a1;
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  v18 = NSStringFromCGRect(v26);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v27.origin.x = a6;
  v27.origin.y = a7;
  v27.size.width = a8;
  v27.size.height = a9;
  v20 = NSStringFromCGRect(v27);
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v22 = 138543618;
  v23 = v19;
  v24 = 2114;
  v25 = v21;
  _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "The OS lied about the keyboard frame for a null input view %{public}@. We ignored it and replaced it with %{public}@.", (uint8_t *)&v22, 0x16u);

}

void sub_100E199CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called -applyToRenderable:withScale: on a CRLFill that can't", v2, v3, v4, v5, v6);
}

void sub_100E19A50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclasses must override", v2, v3, v4, v5, v6);
}

void sub_100E19AD4(void *a1, uint64_t a2, int a3)
{
  NSObject *v5;
  uint64_t v6;
  objc_class *v7;
  NSString *v8;
  void *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  void *v18;

  v5 = a1;
  v7 = (objc_class *)objc_opt_class(a2, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10[0] = 67110146;
  v10[1] = a3;
  v11 = 2082;
  v12 = "-[CRLKeyboardMovementManipulator duplicateSelectionMovingByDelta:]";
  v13 = 2082;
  v14 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLKeyboardMovementManipulator.m";
  v15 = 1024;
  v16 = 143;
  v17 = 2114;
  v18 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Editor (%{public}@) responds to copy: but not copyForKeyboardMovementDuplicationToPasteboard:. Falling back to canvas editor.", (uint8_t *)v10, 0x2Cu);

}

void sub_100E19BC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for color", v2, v3, v4, v5, v6);
}

void sub_100E19C4C()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLColorFill initWithUIColor:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLColorFill.m";
  v6 = 1024;
  v7 = 170;
  v8 = v0;
  v9 = "uiColor";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E19CF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Applying color fill with unsupported properties to CRLCanvasRenderable", v2, v3, v4, v5, v6);
}

void sub_100E19D7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E19E08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E19E94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E19F20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asking for invalid cursor type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E19FA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asking for invalid cursor type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A020()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asking for invalid cursor type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A0A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1A12C()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[NSSet(CRLAdditions) crl_setByMappingObjectsUsingBlock:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSSet_CRLAdditions.m";
  v6 = 1024;
  v7 = 95;
  v8 = v0;
  v9 = "block != nil";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, 0x2Cu);
}

void sub_100E1A1D8()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[NSSet(CRLAdditions) crl_onlyObject]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSSet_CRLAdditions.m";
  v6 = 1024;
  v7 = 126;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d As this method returns the only object in the set, it only makes sense if the set has at most one object.", v2, 0x22u);
}

void sub_100E1A274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to set the position of a CRLCanvasInfoGeometry with a non-finite position", v2, v3, v4, v5, v6);
}

void sub_100E1A2F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to set the size of a CRLCanvasInfoGeometry with NaNs", v2, v3, v4, v5, v6);
}

void sub_100E1A37C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLiOSPreventScrollGestureRecognizer initWithInteractiveCanvasController:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSPreventScrollGestureRecognizer.m";
  v7 = 1024;
  v8 = 29;
  v9 = 2082;
  v10 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E1A434()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected to get a toolkit UI state from the document!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A4B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not add a freehand drawing toolkit observer that's already added.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A534()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A5B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not remove a freehand drawing toolkit observer that has not been added.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A634()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A6B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only try to begin drawing mode when it's allowed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A734()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Transform mode can only begin when drawing mode is already active.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A7B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A834()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A8B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1A934(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "+[CRLModelSearchController assertSearchTargetImplementsProperMethods:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLModelSearchController.m";
  v8 = 1024;
  v9 = 229;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Search target %@ does not respond to one of the necessary protocol methods.", (uint8_t *)v3, 0x2Cu);
}

void sub_100E1A9EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1AA6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find next root search target. Defaulting to 0.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1AAEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d must have a valid search target at this point", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1AB6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find searchReference in current root search target range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1ABEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d mSegments must be NULL when initializing", v2, v3, v4, v5, v6);
}

void sub_100E1AC70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot enumerate flattened segments for a non-flat path", v2, v3, v4, v5, v6);
}

void sub_100E1ACF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Couldn't find left edge char index", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1AD74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid index for right edge of selection", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1ADF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad selection -- extends past end of storage", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1AE74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Character index should be inside allowable selection range.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1AEF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Precondition: caretIndex is either equal to the given charIndex or one past", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1AF74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have received NSNotFound.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1AFF4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "self.textSource";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E1B084()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect no runs for a partitioned attachment line fragment", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B104()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal direction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B184()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have received NSNotFound.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B204()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not have received NSNotFound.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B284()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Result beyond selection range min.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B304()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Result beyond selection range max.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B384()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported direction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B404()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "layout";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E1B494()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Empty column in p_withLineIndexForCharIndex", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B514()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported vertical character direction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported vertical character direction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B614()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported granularity", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B694()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported horizontal line direction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B714(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1001105F8((void *)&_mh_execute_header, a1, a3, "failed to find an appropriate line fragment", a5, a6, a7, a8, 0);
}

void sub_100E1B748()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d sentence movement in layout direction is not supported", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B7C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported vertical character direction", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B848()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d composed character extends past storage boundary", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B8C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be on last paragraph yet.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1B948()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "result";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E1B9D8()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditorHelper.mm";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported direction: %lu", v1);
  sub_10000B264();
}

void sub_100E1BA64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d unexpected granularity", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BAE4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "lineFragment";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E1BB74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Column should not be nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BBF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid selection type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BC74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d backwards should never be NULL!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BCF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to delete past end of storage", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BD74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't delete without a command controller", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BDF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d overlapping transposition ranges", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BE74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad range lengths", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BEF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad ranges", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BF74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't delete without a command controller", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1BFF4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "aStr";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E1C084()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid selection type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1C104()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditorHelper.mm";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal text direction: %ld", v1);
  sub_10000B264();
}

void sub_100E1C190()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditorHelper.mm";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal text direction: %ld", v1);
  sub_10000B264();
}

void sub_100E1C21C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "selection";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E1C2AC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "selection";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E1C33C()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditorHelper.mm";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal text direction: %ld", v1);
  sub_10000B264();
}

void sub_100E1C3C8()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditorHelper.mm";
  sub_100057230();
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal text direction: %ld", v1);
  sub_10000B264();
}

void sub_100E1C454()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid selection anchor", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1C4D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid selection anchor", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1C554()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only symbol images are supported", v2, v3, v4, v5, v6);
}

void sub_100E1C5D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only symbol images are supported", v2, v3, v4, v5, v6);
}

void sub_100E1C65C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error extracting attachment: %@");
  sub_10000B264();
}

void sub_100E1C6E8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error extracting attachment: %@");
  sub_10000B264();
}

void sub_100E1C774()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLiOSFreehandDrawingGestureRecognizer initWithInteractiveCanvasController:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLiOSFreehandDrawingGestureRecognizer.m";
  v6 = 1024;
  v7 = 94;
  v8 = v0;
  v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E1C820(void *a1, unint64_t a2)
{
  id v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = sub_10034792C(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10019E534((void *)&_mh_execute_header, v6, v7, "transitioning to state %{public}@", v8, v9, v10, v11, 2u);

  sub_10000DE48();
}

void sub_100E1C8B0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "failing during a scroll", v2);
  sub_100013B30();
}

void sub_100E1C8E0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "failing during an existing dynamic operation", v2);
  sub_100013B30();
}

void sub_100E1C910(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "failing from not being allowed to begin", v3);
}

void sub_100E1C93C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "hit a stylus-supporting knob. no drawing for us!", v3);
}

void sub_100E1C968(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "ending for keyboard probably visible", v3);
}

void sub_100E1C994(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "beginning delay timer for freehand drawing (using pencil while not already in the mode)", v3);
}

void sub_100E1C9C0(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "begin drawing immediately for pencil", v3);
}

void sub_100E1C9EC(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "starting non-pencil drawing immediately. beginning delay timer for committing to the gesture.", v3);
}

void sub_100E1CA18(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "drawing toolkit preventing freehand for drag", v3);
}

void sub_100E1CA44(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10019E548(a1, a2);
  sub_1000AFCEC((void *)&_mh_execute_header, v2, (uint64_t)v2, "received additional touch", v3);
}

void sub_100E1CA70()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "deferring for context menu", v2);
  sub_100013B30();
}

void sub_100E1CAA0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1002EE9BC(a1, a2);
  v3 = sub_10019E564();
  v4 = sub_10034792C((unint64_t)v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_10019E534((void *)&_mh_execute_header, v6, v7, "delay timer fired. GR in state %{public}@", v8, v9, v10, v11, 2u);

  sub_10000DE48();
}

void sub_100E1CB24()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "reset", v2);
  sub_100013B30();
}

void sub_100E1CB54()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "Pencil touch ending while still pending enough time/distance to actually begin drawing. Being recognized as a non-drawing tap.", v2);
  sub_100013B30();
}

void sub_100E1CB84()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "Finger touch ending while still in the possible state. This must have been a tap, so recognize.", v2);
  sub_100013B30();
}

void sub_100E1CBB4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "ending successfully", v2);
  sub_100013B30();
}

void sub_100E1CBE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot cancel/fail a GR that has already ended.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1CC64()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "ending with failure", v2);
  sub_100013B30();
}

void sub_100E1CC94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Freehand drawing GR did not successfully take control", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1CD14()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "beginning dynamic drawing", v2);
  sub_100013B30();
}

void sub_100E1CD44()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "beginning drawing mode without drawing", v2);
  sub_100013B30();
}

void sub_100E1CD74()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_10019E558();
  sub_1000AFCEC((void *)&_mh_execute_header, v0, v1, "failing for scroll or zoom", v2);
  sub_100013B30();
}

void sub_100E1CDA4(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10000B23C();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B264();
}

void sub_100E1CE48()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to take control with an unregistered TM %@", v1);
  sub_10000B264();
}

void sub_100E1CED0(uint64_t *a1, void *a2, int a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  Class v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  _DWORD v11[2];
  __int16 v12;

  v4 = *a1;
  v5 = a2;
  objc_opt_class(v4, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v11[0] = 67110146;
  v11[1] = a3;
  v12 = 2082;
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v5, v10, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Controlling TM %@ would not give up control at the end of an operation", (uint8_t *)v11);

}

void sub_100E1CFA4()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d trying to subclass something that is already subclassed %@", v1);
  sub_10000B264();
}

void sub_100E1D02C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t *v4;
  NSObject *v5;

  sub_10000FF14();
  *(_DWORD *)v1 = 67110146;
  *(_DWORD *)(v1 + 4) = v2;
  *(_WORD *)(v1 + 8) = 2082;
  *(_QWORD *)(v1 + 10) = "+[CRLTrackerManipulatorCoordinator p_dynamicallySubclassGRForNotification:]";
  *(_WORD *)(v1 + 18) = 2082;
  *(_QWORD *)(v1 + 20) = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLTrackerManipulatorCoordinator.m";
  *(_WORD *)(v1 + 28) = 1024;
  *(_DWORD *)(v1 + 30) = 198;
  *(_WORD *)(v1 + 34) = 2112;
  *(_QWORD *)(v1 + 36) = v3;
  sub_10000B26C((void *)&_mh_execute_header, v5, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No dynamic subclass for %@!", v4);

  sub_10000FF24();
}

void sub_100E1D0B0()
{
  NSObject *v0;
  uint8_t v1[56];

  sub_10000B2D4();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d removing dynamic subclass from GR %@ that doesn't have one!", v1);
  sub_10000B264();
}

void sub_100E1D138(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  NSObject *v9;
  NSString *v10;
  void *v11;
  int v12;
  void *v13;
  CGRect v14;

  v9 = a1;
  v14.origin.x = a2;
  v14.origin.y = a3;
  v14.size.width = a4;
  v14.size.height = a5;
  v10 = NSStringFromCGRect(v14);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = 138412290;
  v13 = v11;
  _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Attempting to overlay an image with a bad frame: %@", (uint8_t *)&v12, 0xCu);

}

void sub_100E1D204(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLInstantAlphaImage initWithWidth:height:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaImage.m";
  v7 = 1024;
  v8 = 15;
  v9 = 2082;
  v10 = "width > 0 && height > 0";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", (uint8_t *)v2, 0x2Cu);
}

void sub_100E1D2BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -teardown must be called before dealloc", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1D33C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d player controller should not be playing when it is told to teardown", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1D3BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1D43C(uint64_t a1, id *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  Class v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v4 = *a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "error"));
  objc_opt_class(v6, v7);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "error"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "domain"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "error"));
  objc_msgSend(v13, "code");
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "error"));
  sub_10007ECC4((void *)&_mh_execute_header, v14, v15, "CRLAVPlayerController %p: Player looper failed with error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v16, v17, v18, v19, 2u);

}

void sub_100E1D58C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d scrubbed to time when not in a scrubbing operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1D60C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Uneven begin/end scrubbing calls!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1D68C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1D70C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1D798()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1D824()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1D8B0(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  Class v6;
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v4 = a2;
  objc_opt_class(a3, v5);
  v7 = NSStringFromClass(v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "domain"));
  objc_msgSend(a3, "code");
  sub_10007ECC4((void *)&_mh_execute_header, v8, v9, "CRLAVPlayerController %p: Playback did fail with error: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v10, v11, v12, v13, 2u);

}

void sub_100E1D9A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1DA30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1DABC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The player must be stopped in order to wait for all video frames to be output.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1DB3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Timed out while waiting for all video frames to display.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1DBBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to determine item time because the item's timebase is NULL.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1DC3C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLAnimatedGIFLayer dealloc]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLAnimatedGIFLayer.m";
  v7 = 1024;
  v8 = 23;
  v9 = 2082;
  v10 = "mController";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E1DCF4()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLGestureDispatcher initWithInteractiveCanvasController:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLGestureDispatcher.m";
  v6 = 1024;
  v7 = 161;
  v8 = v0;
  v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E1DDA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d gestureTarget should not be nil, shouldReceiveTouch should have failed this gesture", v2, v3, v4, v5, v6);
}

void sub_100E1DE24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d handleGesture:withTarget: can only be called from a target's handleGesture: method", v2, v3, v4, v5, v6);
}

void sub_100E1DEA8()
{
  __int16 v0;
  os_log_t v1;
  int v2[5];
  const char *v3;
  int v4;
  __int16 v5;
  int v6;

  v2[0] = 67110146;
  sub_1000DF690();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLStroke.m";
  sub_100057230();
  v4 = 46;
  v5 = v0;
  v6 = 6;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Pattern should have no more than CRL_MAX_STROKE_PATTERN (%d) elements", (uint8_t *)v2, 0x28u);
  sub_10000DE48();
}

void sub_100E1DF48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E1DFE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Stroke width (%f) should not be negative.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E1E06C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Stroke width (%f) should not be negative.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E1E0F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot change cap style on a round-dash stroke.", v2, v3, v4, v5, 2u);
  sub_10000DE48();
}

void sub_100E1E180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_100057230();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Actual stroke width (%f) should not be negative.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E1E208()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Applying stroke with unsupported properties to renderable", v2, v3, v4, v5, 2u);
  sub_10000DE48();
}

void sub_100E1E294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_100057230();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d don't try to apply this stroke to a shape renderable", v2, v3, v4, v5, 2u);
  sub_10000DE48();
}

void sub_100E1E320()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1E3AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong thread", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E42C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E4AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mask mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E52C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mask mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E5AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mask mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E62C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong mask mode", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E6AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to edit an image already in mask edit mode, or without a mask", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E72C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not try to read outside the context's memory.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E7AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1E838()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d layout is in a not possible state, editing mask but not editing mask", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E8B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should have a new mask geometry if changing only the mask", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1E938()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1E9C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1EA50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1EADC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1EB68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1EBF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't draw sized image on the main thread while we are doing threaded layout and rendering if image has a shadow!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1EC74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1ED00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d maskPath is nil when it should not be", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1ED80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1EE0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Updating mask layer for a non-directly managed layer!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1EE8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1EF0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d directly manages layer content changed when generated sized image", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1EF8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d directly manages layer content changed when generated sized image", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1F00C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Background has already been removed from this image", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1F08C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Didn't receive an image or an error from CRLInstantAlphaHelper.removeBackgroundFromCGImage which should not happen", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1F10C(int a1)
{
  __int16 v1;
  os_log_t v2;
  _DWORD v3[2];
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;

  v3[0] = 67110402;
  v3[1] = a1;
  v4 = 2082;
  sub_10000B29C();
  sub_10000B28C();
  v5 = 2883;
  v6 = v1;
  v7 = "newRBImage";
  v8 = v1;
  v9 = "NULL";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
  sub_10000B264();
}

void sub_100E1F1C4(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v5[0] = 67109378;
  v5[1] = a2;
  v6 = 2114;
  v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);

  sub_10000B254();
}

void sub_100E1F27C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1F308(void *a1, void *a2)
{
  void *v2;
  NSObject *v4;
  uint64_t v5;
  Class v6;
  NSString *v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  void *v17;

  v4 = a1;
  objc_opt_class(a2, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = 138544130;
  v11 = v2;
  v12 = 2114;
  v13 = v9;
  v14 = 2048;
  v15 = objc_msgSend(a2, "code");
  v16 = 2112;
  v17 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error creating CRLAsset: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v10, 0x2Au);

}

void sub_100E1F3F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d image provider for current image is invalid", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1F474()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d image provider for current image is invalid", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1F4F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

uint64_t sub_100E1F574()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLImageProvider initWithImageData:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImageProvider.m";
  v7 = 1024;
  v8 = 35;
  v9 = v0;
  v10 = "imageData";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3, 0x2Cu);
  if (qword_10147E370 == -1)
    return 1;
  dispatch_once(&qword_10147E370, &stru_101250E30);
  return 0;
}

void sub_100E1F654()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclasses of CRLImageProvider must implement -naturalSize", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101250E70);
  sub_10000DE48();
}

void sub_100E1F708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclasses of CRLImageProvider must implement -isValid", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101250EB0);
  sub_10000DE48();
}

void sub_100E1F7BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d subclasses of CRLImageProvider must implement -drawImageInContext:rect:", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101250EF0);
  sub_10000DE48();
}

void sub_100E1F870(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLShapeCollectionDataSource p_shapeCollectionAtIndex:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeCollectionDataSource.m";
  v7 = 1024;
  v8 = 122;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to find a shape collection at an invalid index (NSNotFound).", (uint8_t *)v2, 0x22u);
}

void sub_100E1F918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot select a parent and child simultaneously!", v2, v3, v4, v5, v6);
}

void sub_100E1F99C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1FA28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1FAB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1FB40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E1FBCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We expect this selection to be a plain board item selection, not one for editing in a group.", v2, v3, v4, v5, v6);
}

void sub_100E1FC50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't calculate a percentage of a path with no length or elements.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1FCD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't calculate a percentage of a path with a NaN length.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1FD50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't get a point on an empty path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1FDD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -rawGradientAt:fromElement: can't handle move to.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1FE50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d -curvatureAt:fromElement: can't handle move to.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1FED0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLPathNearestAngleOnPathToLineApplier doesn't handle quad curves or some other element type", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1FF50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Degenerate curve! Cannot do intersection logic correctly", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E1FFD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Did not clean up properly at end of drag operation!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20050()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Called dragging entered when we were already in state entered!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E200D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20150(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E201F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d draggingUpdated called without draggingEntered called first!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20278()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d draggingExited called without draggingEntered called first!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E202F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d OS shouldn't tell us to perform drag operation when -shouldAllowDragOperationForDragInfo returns NO", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d draggingUpdated called without draggingEntered called first!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E203F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Indirect drops should never reject the resulting insert", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20478()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Called performIndirectDragOperationWithDragInfo when we were already in a drag!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E204F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Indirect drops should never reject the resulting insert", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20578()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Called performIndirectDragOperationWithDragInfo when we were already in a drag!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E205F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2068C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpectedly being asked to cleanup DnD when in state Idle", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2070C(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E207B4(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E2085C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we have a drag destination, our drag operation should not be None", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E208DC(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E20984()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E20A18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Showing canvas highlight when a rep is highlighted", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20A98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E20B2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10032DF34();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d inputBezierPathT (%f) should be greater than or equal to zero.", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E20BAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to replace last point in empty path map.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20C2C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10032DF34();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d inputBezierPathT (%f) should be greater than or equal to zero.", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E20CAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E20D38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E20DC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to generate an accurate input path map when performing multiple BOOLean operations. Skipping populating it.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20E44()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[30];
  int v3;
  __int16 v4;
  uint64_t v5;

  sub_10000B278();
  sub_10000B29C();
  sub_1000195A8();
  v3 = 883;
  v4 = 2048;
  v5 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported BOOLean operation type: %zu", v2, 0x2Cu);
  sub_10000B264();
}

void sub_100E20EE0(void *a1, uint64_t a2, int a3, NSObject *a4)
{
  id v7;

  v7 = a1;
  *(_DWORD *)a2 = 67109378;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2114;
  *(_QWORD *)(a2 + 10) = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)a2, 0x12u);

}

void sub_100E20F5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d All input paths must use the same winding rule.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E20FDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E21068()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

uint64_t sub_100E210F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v7;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_10147E370 == -1)
    return 1;
  dispatch_once(&qword_10147E370, &stru_101252150);
  return 0;
}

uint64_t sub_100E211B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v7;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v7);
  if (qword_10147E370 == -1)
    return 1;
  dispatch_once(&qword_10147E370, &stru_101252110);
  return 0;
}

void sub_100E2127C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E21308()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We asked to stop after finding 2 paths.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E21388()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d closedStopCount should not be greater than stopAfterFoundCount.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E21408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E21490()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2151C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to fill path at null point.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2159C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should never get more than one path back with a non-null fill point.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2161C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to stroke path for intersection test.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2169C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to stroke path for flood fill.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2171C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Node should not contain targetFillPoint if it is empty.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2179C()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 268;
  v5 = v0;
  v6 = "directoryPath";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E21830()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 342;
  v5 = v0;
  v6 = "charSet";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E218C4()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 440;
  v5 = v0;
  v6 = "icuRegexCharSet";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E21958(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000B29C();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSString_CRLAdditions.m";
  v7 = 1024;
  v8 = 1331;
  v9 = 2112;
  v10 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to make a string out of data with UTI %@", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100E21A00(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to use AddressBook API. Localization format may be incorrect.", v1, 2u);
}

void sub_100E21A40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expect root indexes to be migrated to the new searchReference.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E21AC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E21B4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E21BD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E21C64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Every searchable should respond to atleast a string search or an annotation search", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E21CE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d the hit reference should have a valid point", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E21D64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not find next root search target. Defaulting to 0.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E21DE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E21E70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E21EFC(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "CRLInputType CRLInputTypeForUITouchType(UITouchType)";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInputType.m";
  v7 = 1024;
  v8 = 20;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected touch type UITouchTypeIndirect", (uint8_t *)v2, 0x22u);
}

void sub_100E21FA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E22030()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E220BC(os_log_t log)
{
  int v1;
  uint64_t v2;

  v1 = 134217984;
  v2 = 1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Invalid preset (%zd). Should not show progress for this case.", (uint8_t *)&v1, 0xCu);
  sub_100118BF8();
}

void sub_100E22134()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLMovieCompatibilityConverter convertMediaWithCompletionHandler:]_block_invoke";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMovieCompatibilityConverter.m";
  v6 = 1024;
  v7 = 186;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Optimizing movie past what is requested!", v2, 0x22u);
}

void sub_100E221D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2225C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E222E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000DEC0();
  sub_10017FDF4((void *)&_mh_execute_header, v0, v1, "%p converting movie from playable on this device to all devices", v2, v3, v4, v5, v6);
  sub_100118BF8();
}

void sub_100E22348(_QWORD *a1, uint64_t a2, NSObject *a3)
{
  __int128 v3;

  LODWORD(v3) = 134218240;
  *(_QWORD *)((char *)&v3 + 4) = *a1;
  WORD6(v3) = 2048;
  HIWORD(v3) = a2;
  sub_10033B31C((void *)&_mh_execute_header, a2, a3, "%p export session finished with status %li", (const void *)v3, *((_QWORD *)&v3 + 1));
  sub_100118BF8();
}

void sub_100E223BC(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint8_t v5[24];

  v3 = objc_retainAutorelease(*a1);
  v4 = a2;
  objc_msgSend(v3, "UTF8String");
  sub_10000DEC0();
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Preset (%s) is more compatible than input. Using output.", v5, 0xCu);

}

void sub_100E2245C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Output doesn't appear to be more compatible. Using input.", v1, 2u);
}

void sub_100E2249C()
{
  uint64_t v0;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10000DEC0();
  WORD2(v3) = 2048;
  HIWORD(v3) = v0;
  sub_10033B31C((void *)&_mh_execute_header, v0, v1, "Export session produced output larger than input (%llu vs. %llu). Checking compatibility.", v2, v3);
  sub_100118BF8();
}

void sub_100E22508(char a1, NSObject *a2)
{
  const char *v2;
  const char *v3;
  int v4;
  const char *v5;
  __int16 v6;
  const char *v7;

  v2 = "less";
  if ((a1 & 1) != 0)
    v2 = "more";
  v3 = "input";
  if ((a1 & 1) != 0)
    v3 = "output";
  v4 = 136315394;
  v5 = v2;
  v6 = 2080;
  v7 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Output was %s compatible. Using %s.", (uint8_t *)&v4, 0x16u);
  sub_100118BF8();
}

void sub_100E225B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000DEC0();
  sub_10017FDF4((void *)&_mh_execute_header, v0, v1, "%p finishing conversion creating generic error", v2, v3, v4, v5, v6);
  sub_100118BF8();
}

void sub_100E22610()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000DEC0();
  sub_10017FDF4((void *)&_mh_execute_header, v0, v1, "%p finishing conversion with passed-in error", v2, v3, v4, v5, v6);
  sub_100118BF8();
}

void sub_100E22670()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000DEC0();
  sub_10017FDF4((void *)&_mh_execute_header, v0, v1, "%p finishing conversion with non-nil movie data", v2, v3, v4, v5, v6);
  sub_100118BF8();
}

void sub_100E226D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000DEC0();
  sub_10017FDF4((void *)&_mh_execute_header, v0, v1, "%p cancelling", v2, v3, v4, v5, v6);
  sub_100118BF8();
}

void sub_100E22730(uint64_t a1, int a2)
{
  uint64_t v2;
  os_log_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLMovieCompatibilityConverter p_checkInitialCompatibilityLevelWithCompletionHandler:]";
  v7 = 2082;
  sub_10000B28C();
  v8 = 403;
  v9 = 2048;
  v10 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d mInitialCompatibilityLevel is %zd, not CRLMediaCompatibilityLevelUnknown", (uint8_t *)v4, 0x2Cu);
  sub_10000B264();
}

void sub_100E227E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2286C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000DEC0();
  sub_10017FDF4((void *)&_mh_execute_header, v0, v1, "%p checking initial compatibility level", v2, v3, v4, v5, v6);
  sub_100118BF8();
}

void sub_100E228CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E22958()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E229E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E22A64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot make image data to provide a fill!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E22AE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If no conversion error was provided, the converted image data should not be nil!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E22B64(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E22C0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E22C98(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E22D40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E22DCC(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E22E74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E22F00(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E22FA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E23034(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E230DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2315C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E231E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E23274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E23300()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2338C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Connection line already has something connected to its to-end.", v2, v3, v4, v5, v6);
}

void sub_100E23410()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2349C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E23528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E235B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should save default style with a single object selected!", v2, v3, v4, v5, v6);
}

void sub_100E23638(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLImageMaskResizer initWithInteractiveCanvasController:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageMaskResizer.m";
  v7 = 1024;
  v8 = 28;
  v9 = 2082;
  v10 = "interactiveCanvasController";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E236F0(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[5];
  const char *v4;

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_100057230();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Catalog color (named %@) is missing.", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E23784()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color specified as P3 isn't P3, sRGB or Device RGB", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E23804()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color specified as P3 isn't even RGB!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E23884()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color specified as sRGB isn't sRGB or Device RGB", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E23904()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color specified as sRGB isn't even RGB!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E23984()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If the color has a pattern, its color space should be Unspecified", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E23A04()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "CGColor";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E23A94()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "patternImage";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E23B24(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[5];
  const char *v4;

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_100057230();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid hex string: %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E23BB8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "uiColor";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E23C48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d rgbaComponents is NULL!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E23CC8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "grayscale";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E23D58(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  CGColor *v5;
  uint64_t v6;
  _DWORD v7[5];
  const char *v8;

  sub_100221D04(a1, __stack_chk_guard);
  v5 = (CGColor *)sub_100344498();
  CGColorGetNumberOfComponents(v5);
  v7[0] = 67110146;
  v7[1] = a3;
  sub_100214574();
  sub_10000B29C();
  v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_100057230();
  sub_100344484();
  sub_10000B26C((void *)&_mh_execute_header, v3, v6, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Wrong number of components while inverting color. %zi instead of 4", (uint8_t *)v7);

  sub_100065B94();
}

void sub_100E23E08(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  CGColor *v5;
  uint64_t v6;
  _DWORD v7[5];
  const char *v8;

  sub_100221D04(a1, __stack_chk_guard);
  v5 = (CGColor *)sub_100344498();
  CGColorGetNumberOfComponents(v5);
  v7[0] = 67110146;
  v7[1] = a3;
  sub_100214574();
  sub_10000B29C();
  v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_100057230();
  sub_100344484();
  sub_10000B26C((void *)&_mh_execute_header, v3, v6, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Wrong number of components to calculate luminance. Got %zi instead of 4.", (uint8_t *)v7);

  sub_100065B94();
}

void sub_100E23EB8(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  CGColor *v5;
  uint64_t v6;
  _DWORD v7[5];
  const char *v8;

  sub_100221D04(a1, __stack_chk_guard);
  v5 = (CGColor *)sub_100344498();
  CGColorGetNumberOfComponents(v5);
  v7[0] = 67110146;
  v7[1] = a3;
  sub_100214574();
  sub_10000B29C();
  v8 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_100057230();
  sub_100344484();
  sub_10000B26C((void *)&_mh_execute_header, v3, v6, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Wrong number of components to calculate relative luminance. Got %zi instead of 4.", (uint8_t *)v7);

  sub_100065B94();
}

void sub_100E23F68()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[20];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColor.m";
  sub_100057230();
  v4 = 708;
  v5 = 2048;
  v6 = v0;
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unhandled contrast scenario (%zu).", v2);
  sub_10000B264();
}

void sub_100E24000()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLColors should always be RGB! Comparing two with different color models.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24080()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Color space dimension mismatch", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24100(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPGrammarResults grammarResultForCharIndex:outRange:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSpellingResults.m";
  v7 = 1024;
  v8 = 185;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No grammar error found for range", (uint8_t *)v2, 0x22u);
}

void sub_100E241A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to make a non-rounded-rectangle path continuously curve", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24228()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called cornerRadius on wrong type pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E242A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called cornerRadius on wrong type pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24328()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d called numberOfSides on wrong type pathSource", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E243A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need to provide feedback string for chevron!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24428()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need to provide axLabel component string for chevron!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E244A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need to provide axValue string for chevron!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E245B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E24640()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E246CC()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLBoardItemImporter p_placeholderInit]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemImporter.m";
  v6 = 1024;
  v7 = 295;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Do not call method", v2, 0x22u);
}

void sub_100E24768()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E247F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layer host must be cleared out of ICC before it is deallocated, to avoid a zombie crash.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24874()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must call -teardown on CVC before ICC is deallocated", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E248F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must call -teardown on ICC before it is deallocated", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24974()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ObjCTypes string overflowed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E249F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The OS undo gestures should not be sending us selectors we can't respond to!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24A74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E24B00(void *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint8_t *v5;
  NSObject *v6;

  sub_10000FEEC((uint64_t)a1, a2, a3, 1.5047e-36);
  sub_1000437A4((void *)&_mh_execute_header, v6, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5);

}

void sub_100E24B4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d removeBackgroundRenderingObject called on an object that is not in the array", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24BCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected re-use of ICC with a different delegate", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24C4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E24CD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E24D64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24DE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E24E70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E24EFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not suppress layer updates unless collab is suspended!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24F7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E24FFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ICC delegate must provide the editor controller! (You probably need to give it a document selection through canvas selection, too.)", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2507C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Negative reentrancy counter", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E250FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d editor controller mismatch", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2517C(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  NSObject *v9;
  NSString *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14[30];
  int v15;
  __int16 v16;
  uint64_t v17;
  CGRect v18;

  v9 = a1;
  v18.origin.x = a2;
  v18.origin.y = a3;
  v18.size.width = a4;
  v18.size.height = a5;
  v10 = NSStringFromCGRect(v18);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  sub_1001E0910();
  sub_10000B29C();
  sub_1000195A8();
  v15 = 1583;
  v16 = 2114;
  v17 = v12;
  sub_10000B26C((void *)&_mh_execute_header, v9, v13, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't know how to handle desired zoom rect %{public}@!", v14);

}

void sub_100E25274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E25300(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[56];

  v2 = a1;
  v3 = objc_msgSend((id)sub_10000B2A8(), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1001E0910();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v1, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ICC delegate %@ must respond to selectionModelTranslatorForInteractiveCanvasController", v6);

}

void sub_100E253C0(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Caller set a selection path that does not want to set selection or scroll: %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E25454()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Scroll options CRLCanvasScrollOptionWaitForViewLayoutIfNeeded and CRLCanvasScrollOptionScrollForcingLayoutIfNeeded are mutually exclusive", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E254D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Scrolling automatically in an unsupported configuration!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25554()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E255D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot calculate unobscured frame without view", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25654()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We expect a superview for bounds calculation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E256D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot tell scrollRectToVisible to zoom!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25754()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot tell scrollRectToVisible to zoom!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E257D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d You shouldn't ask to grow the canvas if the canvas doesn't grow in general", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25854()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E258D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If we're given any info without a parent, we should have been given at least one info with a parent, too.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25954()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E259E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E25A6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d couldn't remove rep from parent", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25AEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E25B78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E25C04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E25C90(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLInteractiveCanvasController collaboratorCursorSelectionPathChangedFromSelectionPath:toSelectionPath:collabor"
       "atorPresence:]_block_invoke_2";
  v7 = 2082;
  sub_10000B28C();
  v8 = 4996;
  v9 = 2112;
  v10 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Could not determine HUD position for selection path %@", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100E25D38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25DB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25E38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25EB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E25F44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E25FC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26044()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only update HUD on the layout thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E260C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Showing two huds for the same lobby session", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26144()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E261C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only update HUD on the layout thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26244()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only update HUD on the layout thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E262C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only update HUD on the layout thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26344()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Inspector-driven dynamic operation in process when beginning separate dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E263C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d didn't end previous dynamic operation before starting a new one", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26444()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d didn't begin or already ending dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E264C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot begin inspector dynamic operation while in non-inspector dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26544()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ending dynamic operation without starting a new one or calling willEnd", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E265C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Ended more dynamic operations than you began!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26644()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E266D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2675C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E267E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E26874()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E26900()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26980()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Temporary additional board items should not already be in our model!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26A00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d change notifications should only come in on the main thread", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26A80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d failed to perform locked action", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26B00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't expect to have changed text on background thread", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26B80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't expect to have changed selection on background thread", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26C00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d animation nesting not yet supported", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26C80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't commit if we don't have an animation open", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26D00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d i_layout should only be called by our CV, from the main thread", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26D80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E26E0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E26E98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E26F24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Content offset was outside the expected range! Clamping to a possibly sane value.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E26FA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27040()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E270DC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E27174()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27200(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E27298()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27324(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E273BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27448(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E274E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2756C(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v5[0] = 67109378;
  v5[1] = a2;
  v6 = 2114;
  v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);

  sub_10000B254();
}

void sub_100E27620()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "+[CRLIOUtils newCGDataProviderForReadChannel:length:outInfo:outCallbacks:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/IO/CRLIOUtils.m";
  v6 = 1024;
  v7 = 156;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need a seekable input stream for CGDataProvider", v2, 0x22u);
}

void sub_100E276BC(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  uint64_t v6;
  Class v7;
  NSString *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void *v20;

  v5 = a2;
  objc_opt_class(a3, v6);
  v8 = NSStringFromClass(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "domain"));
  v11 = 138413314;
  v12 = a1;
  v13 = 2114;
  v14 = v9;
  v15 = 2114;
  v16 = v10;
  v17 = 2048;
  v18 = objc_msgSend(a3, "code");
  v19 = 2112;
  v20 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error importing drawable from URL (%@): errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v11, 0x34u);

}

void sub_100E277C0(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLInfoImporterBoardItemProvider provideBoardItemWithFactory:completionHandler:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInfoImporterBoardItemProvider.m";
  v7 = 1024;
  v8 = 191;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No data or URL available. Unable to import.", (uint8_t *)v2, 0x22u);
}

void sub_100E27868()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error %@ creating pre-insertion asset wrapper for data.");
  sub_10000B264();
}

void sub_100E278F4()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10000B2B4();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Error %@ creating pre-insertion asset wrapper for data.");
  sub_10000B264();
}

void sub_100E27980(_QWORD *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  _BYTE v4[36];

  LODWORD(v3) = 67110146;
  HIDWORD(v3) = a2;
  *(_WORD *)v4 = 2082;
  *(_QWORD *)&v4[2] = "-[CRLInfoImporterBoardItemProvider provideBoardItemWithFactory:completionHandler:]";
  *(_WORD *)&v4[10] = 2082;
  *(_QWORD *)&v4[12] = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInfoImporterBoardItemProvider.m";
  *(_WORD *)&v4[20] = 1024;
  *(_DWORD *)&v4[22] = 132;
  *(_WORD *)&v4[26] = 2114;
  *(_QWORD *)&v4[28] = *a1;
  sub_100019580((void *)&_mh_execute_header, a2, a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to create a UTType for %{public}@", v3, *(_QWORD *)v4, *(_QWORD *)&v4[8], *(_QWORD *)&v4[16], *(_QWORD *)&v4[24], *(_DWORD *)&v4[32]);
  sub_10000B264();
}

void sub_100E27A28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27AB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid text selection", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E27B34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Something is wrong with our math", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E27BB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27C40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d this method should never be called, and WP reps should never get a bitmap allocated", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E27CC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27D4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27DD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Nil context", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E27E58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27EE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E27F70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If there is a invisible char, we should have found it going backwards.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E27FF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be creating _textLayer again", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28070()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E280FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be creating _selectionHighlightLayer again", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2817C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be creating _selectionParagraphBorderLayer again", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E281FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Asked to create the spell checker when we don't need one.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2827C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E28308()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Building a imageSearchReference for a layout that has no layout controller", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28388()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E28414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E284A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Expected the tapped rep to match our storage.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28520()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Archive is closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E285A0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10038764C(a1, a2);
  v3 = objc_msgSend((id)sub_10000B2A8(), "name");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100387634();
  sub_10000B228((void *)&_mh_execute_header, v5, v6, "Local file header doesn't match compression method from central directory file header for entry %@. compressionMethod=%d", v7, v8, v9, v10, v11);

  sub_10000B254();
}

void sub_100E28628(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10038764C(a1, a2);
  v3 = objc_msgSend((id)sub_10000B2A8(), "name");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100387634();
  sub_10000B228((void *)&_mh_execute_header, v5, v6, "Local file header has bad signature for entry %@. signature=%d", v7, v8, v9, v10, v11);

  sub_10000B254();
}

void sub_100E286B0(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v3;
  id v5;
  id v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  v5 = a2;
  v6 = objc_msgSend((id)sub_10000B2A8(), "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = 138412802;
  v9 = v7;
  v10 = 2048;
  v11 = a3;
  v12 = 2048;
  v13 = 30;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Read was less than record size for entry %@. readDataLength=%zu, recordLength=%zu, ", (uint8_t *)&v8, 0x20u);

}

void sub_100E28774(void **a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v2 = *a1;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "name"));
  v5 = 138412290;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CRC does not match for entry %@", (uint8_t *)&v5, 0xCu);

  sub_10000DE48();
}

void sub_100E28814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28894()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Low water is too small", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28914()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28994()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28A14()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolStroke.m";
  v3 = 1024;
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Stroke tool should only be initialized with a stroke tool type (got %zu).", v1);
  sub_10000B264();
}

void sub_100E28AA4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "currentPKStroke";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E28B34()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "cc";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E28BC4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "shapeLayout";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E28C54()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B278();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolStroke.m";
  v3 = 1024;
  sub_100019594();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLPKStrokeConverter returned an empty path ending at pointIndex: %lu.", v1);
  sub_10000B264();
}

void sub_100E28CE4(int a1)
{
  __int16 v1;
  os_log_t v2;
  _DWORD v3[2];
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;

  v3[0] = 67110402;
  v3[1] = a1;
  v4 = 2082;
  sub_10000B29C();
  sub_10000B28C();
  v5 = 274;
  v6 = v1;
  v7 = "currentStrokePathDataCount";
  v8 = v1;
  v9 = "immutablePKPointCount";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
  sub_10000B264();
}

void sub_100E28D9C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "parentFreehandItem";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E28E2C(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  v6 = "-[CRLFreehandDrawingToolStroke p_currentPKInkType]";
  v7 = 2082;
  sub_10000B28C();
  v8 = 499;
  v9 = 2048;
  v10 = v2;
  sub_10000B26C((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected tool type for rendering with PencilKit (%zu). Defaulting to pen ink.", (uint8_t *)v4);
  sub_10000B264();
}

void sub_100E28ED4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning possible operation without ending previous operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28F54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d begin possible op with ICC in dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E28FD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No controlling TM when beginning operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29054()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning operation without ending previous operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E290D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d begin op with ICC in dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29154()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d ending op with ICC still in dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E291D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d tracker controller should not commit dynamic changes", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29254()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cancelling when not in operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E292D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d cannot begin transforming reps until we are in a transform", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29354()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10038D030();
  sub_100221D04(v1, __stack_chk_guard);
  v2 = objc_msgSend((id)sub_10000B2A8(), "tracker");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100214574();
  sub_10000B29C();
  sub_100057230();
  sub_10000B2B4();
  sub_100214560((void *)&_mh_execute_header, v4, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Controlling TM has different dynamic operation expectations than current operation (%@)", v6, v7, v8, v9, 2u);

  sub_100065B94();
}

void sub_100E29404()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10038D030();
  v2 = sub_100221D04(v1, __stack_chk_guard);
  v4 = (objc_class *)sub_10038D024((uint64_t)v2, v3);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100214574();
  sub_10000B29C();
  sub_100057230();
  sub_10000B2B4();
  sub_100214560((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d tracker is handling GR %@ when not in a transform", v9, v10, v11, v12, 2u);

  sub_100065B94();
}

void sub_100E294B4(uint64_t a1, int a2)
{
  os_log_t v2;
  _DWORD v3[5];
  const char *v4;

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  v4 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLDynamicOperationController.m";
  sub_100057230();
  sub_10000B2B4();
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d controlling GR reset in an operation, but we aren't in an operation! %@", (uint8_t *)v3, 0x2Cu);
}

void sub_100E29554()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10038D030();
  v2 = sub_100221D04(v1, __stack_chk_guard);
  v4 = (objc_class *)sub_10038D024((uint64_t)v2, v3);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100214574();
  sub_10000B29C();
  sub_100057230();
  sub_10000B2B4();
  sub_100214560((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Controlling TM %@ has different dynamic operation expectations than current operation", v9, v10, v11, v12, 2u);

  sub_100065B94();
}

void sub_100E29604()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10038D030();
  v2 = sub_100221D04(v1, __stack_chk_guard);
  v4 = (objc_class *)sub_10038D024((uint64_t)v2, v3);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100214574();
  sub_10000B29C();
  sub_100057230();
  sub_10000B2B4();
  sub_100214560((void *)&_mh_execute_header, v7, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d tracker is handling TM %@ when not in a transform", v9, v10, v11, v12, 2u);

  sub_100065B94();
}

void sub_100E296B4()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = (id)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_100098814();
  sub_100098800((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v3, v4, v5, v6, v7);

  sub_10000B254();
}

void sub_100E29744()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLShapeRepHelperDefault drawInContext:withContent:strokeDrawOptions:withOpacity:usingPathOverride:patternOffse"
       "tsBySubpathOverride:transparencyLayersBySubpath:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeRepHelperDefault.m";
  v6 = 1024;
  v7 = 339;
  v8 = v0;
  v9 = "transparencyLayersBySubpath";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E297F0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLShapeRepHelperDefault drawInContext:withContent:strokeDrawOptions:withOpacity:usingPathOverride:patternOffse"
       "tsBySubpathOverride:transparencyLayersBySubpath:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeRepHelperDefault.m";
  v6 = 1024;
  v7 = 109;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas and CGContext disagree about whether we are suppressing backgrounds", v2, 0x22u);
}

void sub_100E2988C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUILarge.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E29910()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUIRegular.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E29994()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUIRegularPlus.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E29A18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUIRegularZoom.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E29A9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000B29C();
  sub_1000195A8();
  sub_1000DF6AC();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d New device size not handled (%f). Defaulting to CRLUIScreenClassPhoneUISmall.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E29B20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No one should look at the screen scale before the application has finished launching, because the value isn't ready yet and may change! To debug, break in UIScreen.crl_screenScale and re-launch the app.", v2, v3, v4, v5, 2u);
}

void sub_100E29BA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000DF690();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unsupported screen scale.", v2, v3, v4, v5, 2u);
}

void sub_100E29C30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The shape library and basic shape library must be in the same locale.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29CB0()
{
  __int16 v0;
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  sub_10000B278();
  v4 = "-[CRLShapeSearchResultsCollection numberOfShapesInSection:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeSearchResultsCollection.m";
  v7 = 1024;
  v8 = 118;
  v9 = 2048;
  v10 = v1;
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Tried to retrieve the number of shapes in a section (%lu) beyond the size of the number of sections in the search results", v3);
}

void sub_100E29D54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d allShapes cannot be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29DD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d separatedShapeLibraryResults must only contain 4 elements.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29E54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d separatedBasicResults must only contain 4 elements.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29ED4()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLShapeSearchResultsCollection p_sequentialShapePosition:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeSearchResultsCollection.m";
  v7 = 1024;
  v8 = 316;
  v9 = v0;
  v10 = "self.p_shapeLibrary";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100E29F78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Comparison of shape position must return either ascending or descending.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E29FF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2A084()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2A110()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2A19C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2A228()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2A2B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2A340(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLConnectionLineKnobTracker moveKnobToRepPosition:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLConnectionLineKnobTracker.m";
  v7 = 1024;
  v8 = 783;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob type for line segment resize", (uint8_t *)v2, 0x22u);
}

void sub_100E2A3E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d teardown not called for CRLCanvasView.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2A468()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d shouldn't try to set canvasView's controller more than once", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2A4E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to call teardown on an instance of CRLCanvasView that has already been torn down.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2A568()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLCanvasView additionalTransformIntoCoordinateSpace:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSCanvasView.m";
  v7 = 1024;
  v8 = 178;
  v9 = v0;
  v10 = "icc";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100E2A60C(void *a1, uint64_t a2, int a3)
{
  NSObject *v3;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  void *v17;

  v5 = a1;
  v6 = objc_msgSend((id)sub_10000B2A8(), "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9[0] = 67110146;
  v9[1] = a3;
  v10 = 2082;
  v11 = "-[CRLCanvasView additionalTransformIntoCoordinateSpace:]";
  v12 = 2082;
  v13 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSCanvasView.m";
  v14 = 1024;
  v15 = 173;
  v16 = 2114;
  v17 = v7;
  sub_10000B26C((void *)&_mh_execute_header, v3, v8, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unhandled coordinate space: %{public}@", (uint8_t *)v9);

}

void sub_100E2A6F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d knob tracker should never have a null knob", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2A770()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d wrong knob for path node knob tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2A7F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d reps conforming to CRLPathEditableRep protocol only valid for path node knob tracker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2A870()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d should have created a knob, but got nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2A8F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't close command group. This is bad news.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2A970(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLInstantAlphaSeedFill newSeedFillWithImage:seedPoint:context:oldFill:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInstantAlphaSeedFill.m";
  v7 = 1024;
  v8 = 178;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't allocate span stack", (uint8_t *)v2, 0x22u);
}

void sub_100E2AA18(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLiOSPresetCollectionViewController p_setupUIInLabeledCell:atIndexPath:context:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Views/CRLiOSPresetCollectionViewController.m";
  v7 = 1024;
  v8 = 455;
  v9 = 2082;
  v10 = "localizedName";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E2AAD0(int a1, NSObject *a2, double a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  double v11;

  v3[0] = 67110146;
  v3[1] = a1;
  v4 = 2082;
  v5 = "void CRLPKInputSmoother::setSmoothingThresholdMultiplier(CGFloat)";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKInputSmoother.mm";
  v8 = 1024;
  v9 = 27;
  v10 = 2048;
  v11 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected multiplier value < 0 (%f).", (uint8_t *)v3, 0x2Cu);
}

void sub_100E2AB84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't provide an image renderer for a non-finite size", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2AC04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should be able to lock new renderer.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2AC84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CGContext has an invalid associated screen scale.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2AD04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d renderedCGImage shouldn't be NULL", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2AD84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d completionAddImage shouldn't be NULL", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2AE04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d completionMultiplyImage shouldn't be NULL", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2AE84(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLiOSDeterminateProgressViewController animateTransition:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLiOSDeterminateProgressViewController.m";
  v8 = 1024;
  v9 = 470;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown transition: %@", (uint8_t *)v3, 0x2Cu);
}

void sub_100E2AF3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2AFD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2B074()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Table View Cell style Value2 is not supported in CRLiOSInspectorTableViewCell.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B0F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Table View Cell style Value2 is not supported in CRLiOSInspectorTableViewCell.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B174()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE48();
}

void sub_100E2B1F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE48();
}

void sub_100E2B274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil delegate if table view was also nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B2F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil table view if index path was also nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B374(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLCanvasButtonKnobTracker initWithRep:knob:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasButtonKnobTracker.m";
  v7 = 1024;
  v8 = 27;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d button knob tracker made without a button knob", (uint8_t *)v2, 0x22u);
}

void sub_100E2B41C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: beginUndoGrouping", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B49C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: endUndoGrouping", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B51C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Disable count underflow", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B59C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: groupsByEvent", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B61C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: setGroupsByEvent:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B69C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: setLevelsOfUndo:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B71C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: setRunLoopModes:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B79C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B81C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B89C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: removeAllActionsWithTarget:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B91C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: registerUndoWithTarget", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2B99C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: prepareWithInvocationTarget", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2BA1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLUndoManager: undo manager has been overridden. This call is unexpected: setActionName:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2BA9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not call -tearDown twice.", v2, v3, v4, v5, v6);
}

void sub_100E2BB20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d You must call -tearDown before deallocation.", v2, v3, v4, v5, v6);
}

void sub_100E2BBA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2BC30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reentrant geometry changing okay logic", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2BCB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d You should not be setting the geometry on a shape except via its own validation logic, or via -offsetGeometryBy: Please talk to drawables if you think you want to do this.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2BD30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2BDBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2BE48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2BED4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2BF60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2BFEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C078()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C104()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C190()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C21C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C2A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C334()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C3C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C44C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C4D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C564()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C5F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C67C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C794()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C820()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C8AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2C938(uint64_t a1, void *a2, int a3)
{
  NSObject *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;

  v5 = a2;
  v6 = sub_10000B2A8();
  objc_opt_class(v6, v7);
  v9 = NSStringFromClass(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v12[0] = 67110146;
  v12[1] = a3;
  v13 = 2082;
  sub_10000B29C();
  v14 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeLayout.m";
  v15 = 1024;
  v16 = 1073;
  v17 = 2114;
  v18 = v11;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected path source class! (%{public}@) We don't know how to build a path source for it.", (uint8_t *)v12, 0x2Cu);

}

void sub_100E2CA24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2CAB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2CB3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d A shape taking a size should not be in a generic dynamic state, or static state", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2CBBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2CC48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2CCD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2CD60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2CDEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2CE78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad adornments type (expected kAdornmentsTypeInvisibles or kAdornmentsTypeInvisiblesBreak", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2CEF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad adornments type (expected kAdornmentsTypeEmphasisMarks or kAdornmentTypeHiddenDeletions", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2CF78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad adornments type (expected kAdornmentsTypeAttachments", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2CFF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E2D098()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E2D138()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d popParentLayer called without matching pushParentLayer:", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2D1B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d A cloned parent layer hierarchy should contain only one top level layer.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2D238()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not attempt to access content layers when some parent layers are still pushed, since the returned layers may not represent a complete layer hierarchy.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2D2B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2D338(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "CGFloat CRLNormalize(CGFloat, CGFloat, CGFloat)";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLMath.m";
  v7 = 1024;
  v8 = 88;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d max >= min!", (uint8_t *)v2, 0x22u);
}

void sub_100E2D3E0(void *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  Class v5;
  NSString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  void *v16;

  v3 = a1;
  objc_opt_class(a2, v4);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  v9 = 138544130;
  v10 = v7;
  v11 = 2114;
  v12 = v8;
  v13 = 2048;
  v14 = objc_msgSend(a2, "code");
  v15 = 2112;
  v16 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error creating CRLAsset: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v9, 0x2Au);

}

void sub_100E2D4D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Passing in nil is invalid.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_1012595F0);
  sub_10000DE48();
}

void sub_100E2D584()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Creating retain cycle between gradient and its shading ref", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101259388);
  sub_10000DE48();
}

void sub_100E2D638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shading color space should not be unspecified.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_1012593C8);
  sub_10000DE48();
}

uint64_t sub_100E2D6EC(int a1, NSObject *a2)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;

  v3[0] = 67110402;
  v3[1] = a1;
  v4 = 2082;
  v5 = "-[CRLGradientFill p_newColorInShadingColorSpaceFromColor:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLGradientFill.m";
  v8 = 1024;
  v9 = 299;
  v10 = 2082;
  v11 = "originalColorSpace";
  v12 = 2082;
  v13 = "CRLColorRGBSpaceSRGB";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
  if (qword_10147E370 == -1)
    return 1;
  dispatch_once(&qword_10147E370, &stru_101259408);
  return 0;
}

void sub_100E2D7E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Subclasses should override.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101259548);
  sub_10000DE48();
}

void sub_100E2D89C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Subclasses should override.", v2, v3, v4, v5, v6);
  if (qword_10147E370 != -1)
    dispatch_once(&qword_10147E370, &stru_101259588);
  sub_10000DE48();
}

void sub_100E2D950()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token cannot be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2D9D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token cannot be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2DA50(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100E2DAF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token cannot be nil.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2DB70(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100E2DC10()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempted to temporarily relinquish token that has already been relinquished: %{public}@");
  sub_10000B264();
}

void sub_100E2DC94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Completion handler was already called.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2DD14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Removing all tokens should also cancel all timeout blocks.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2DD94(id *a1, void *a2, id *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;

  v5 = *a1;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "logContext"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "publicString"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "logContext"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "privateString"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "name"));
  v12 = objc_msgSend(*a3, "timeout");
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a3, "intent"));
  v14 = 138544386;
  v15 = v8;
  v16 = 2112;
  v17 = v10;
  v18 = 2114;
  v19 = v11;
  v20 = 2048;
  v21 = v12;
  v22 = 2114;
  v23 = v13;
  _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@ %@ %{public}@ is taking more than %lu seconds to relinquish resource with '%{public}@' intent.", (uint8_t *)&v14, 0x34u);

}

void sub_100E2DEEC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  uint64_t v14;

  v5 = *(void **)(a1 + 48);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicString"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "privateString"));
  v9 = 138543874;
  v10 = v7;
  v11 = 2112;
  v12 = v8;
  v13 = 2048;
  v14 = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%{public}@ %@ ┗ %llx", (uint8_t *)&v9, 0x20u);

}

void sub_100E2DFCC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;

  v5 = *(void **)(a1 + 48);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicString"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "privateString"));
  v9 = *(_QWORD *)(a1 + 40);
  v10 = objc_msgSend(*(id *)(a1 + 8), "count");
  v11 = 138544386;
  v12 = v7;
  v13 = 2112;
  v14 = v8;
  v15 = 2048;
  v16 = a3;
  v17 = 2112;
  v18 = v9;
  v19 = 2048;
  v20 = v10;
  _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%{public}@ %@ ┏ %llx '%@' pending resource requests (%tu total)", (uint8_t *)&v11, 0x34u);

}

void sub_100E2E0D0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1003DE6F4((void *)&_mh_execute_header, a2, a3, "┗ End all traceable resources (%tu total)", a5, a6, a7, a8, 0);
}

void sub_100E2E138(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1003DE6F4((void *)&_mh_execute_header, a2, a3, "┏ Begin all traceable resources (%tu total)", a5, a6, a7, a8, 0);
}

void sub_100E2E1A0()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token was deallocated with paused timeout: %{public}@");
  sub_10000B264();
}

void sub_100E2E224()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_1000195A8();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Token was deallocated without getting relinquished: %{public}@");
  sub_10000B264();
}

void sub_100E2E2A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unbalanced -pauseTimeout and -resumeTimeout calls.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2E328()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected state.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2E3A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected state.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2E428()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Operation completion handler is getting deallocated before it was invoked.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2E4A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2E53C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2E5D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E2E664()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLDragToInsertController dealloc]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLDragToInsertController.m";
  v6 = 1024;
  v7 = 131;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d must finish dragging before deallocating drag to insert controller", v2, 0x22u);
}

void sub_100E2E700(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[UIImage(CRLAdditions) crl_systemImageNamed:withFallbackCustomImageNamed:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/UIImage_CRLAdditions.m";
  v7 = 1024;
  v8 = 103;
  v9 = 2082;
  v10 = "result";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E2E7B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be trying to set the width of a whole object eraser.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2E838()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Path creator should always provide some kind of path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2E8B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method should only be called for slicing erasers.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2E938()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d strokePatternOffsetArray must have the same count as the number of provided subpaths (if it's provided)", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2E9B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected editor controller!", v2, v3, v4, v5, v6);
}

void sub_100E2EA3C(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLBoardItemEditor nextEditorForSelection:withNewEditorStack:selectionPath:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBoardItemEditor.m";
  v8 = 1024;
  v9 = 192;
  v10 = 2112;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There is a more specific selection on top of a plain board item editor! %@", (uint8_t *)v3);
}

void sub_100E2EAEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Board item editor expects a board item selection!", v2, v3, v4, v5, v6);
}

void sub_100E2EB70()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLBoardItemEditor selectionDidChangeFromSelection:toSelection:withFlags:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBoardItemEditor.m";
  v7 = 1024;
  v8 = 204;
  v9 = v0;
  v10 = "boardItemSelection";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100E2EC14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be torn down twice!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2EC94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must be torn down!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2ED14(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLInteractiveCanvasLayerHelper updateLayers]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasLayerHelper.m";
  v8 = 1024;
  v9 = 146;
  v10 = 2112;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas layer tree mismatch detected! The fully and incrementally updated layer trees do not match.\n%@", (uint8_t *)v3);
}

void sub_100E2EDC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout with bottommost layers should have run at least once on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2EE44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Layout with overlay layers should have run at least once on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2EEC4()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLInteractiveCanvasLayerHelper endSuppressingLayerUpdates]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLInteractiveCanvasLayerHelper.m";
  v7 = 1024;
  v8 = 529;
  v9 = v0;
  v10 = "_repsWhoseLayersAreAllowedToUpdate";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100E2EF68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2EFE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This method should never be called on a layout which returns NO for providesGuidesForChildLayouts.", v2, v3, v4, v5, v6);
}

void sub_100E2F06C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bad index", v2, v3, v4, v5, v6);
}

void sub_100E2F0F0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLCanvasAbstractLayout exchangeChildAtIndex:withChildAtIndex:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasAbstractLayout.m";
  v6 = 1024;
  v7 = 276;
  v8 = v0;
  v9 = "_children";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E2F19C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  NSObject *v11;

  sub_10000FF14();
  sub_1001BF948(1.5049e-36, v1, v2, v3);
  *(_QWORD *)(v4 + 10) = "-[CRLPKStroke _strokePointAtIndex:]";
  *(_WORD *)(v4 + 18) = v5;
  sub_1003F4CF4(v6, v4);
  sub_1003F4CE0(v7, v8);
  sub_10000B26C((void *)&_mh_execute_header, v11, v9, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid index in %@", v10);

  sub_10000FF24();
}

void sub_100E2F200()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  NSObject *v11;

  sub_10000FF14();
  sub_1001BF948(1.5049e-36, v1, v2, v3);
  *(_QWORD *)(v4 + 10) = "-[CRLPKStroke _insertStrokePoint:atIndex:]";
  *(_WORD *)(v4 + 18) = v5;
  sub_1003F4CF4(v6, v4);
  sub_1003F4CE0(v7, v8);
  sub_10000B26C((void *)&_mh_execute_header, v11, v9, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid index in %@", v10);

  sub_10000FF24();
}

void sub_100E2F264()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  NSObject *v11;

  sub_10000FF14();
  sub_1001BF948(1.5049e-36, v1, v2, v3);
  *(_QWORD *)(v4 + 10) = "-[CRLPKStroke _removeStrokePointAtIndex:]";
  *(_WORD *)(v4 + 18) = v5;
  sub_1003F4CF4(v6, v4);
  sub_1003F4CE0(v7, v8);
  sub_10000B26C((void *)&_mh_execute_header, v11, v9, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid index in %@", v10);

  sub_10000FF24();
}

void sub_100E2F2C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2F348()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_100057230();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %ld is out of bounds");
  sub_10000B264();
}

void sub_100E2F3CC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_100057230();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Segment index %ld is out of bounds");
  sub_10000B264();
}

void sub_100E2F450()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_100057230();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Segment index %ld is out of bounds");
  sub_10000B264();
}

void sub_100E2F4D4()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B278();
  sub_10000B29C();
  sub_100057230();
  sub_100019594();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Segment index %ld is out of bounds");
  sub_10000B264();
}

void sub_100E2F558()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only CRLPKStrokePoint instances can be added to a stroke's point array", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2F5D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only CRLPKStrokePoint instances can be added to a stroke's point array", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2F658()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only CRLPKStrokePoint instances can be added to a stroke's point array", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2F6D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown platform!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2F758()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown platform!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2F7D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be asking for the maximum Metal texture size on a device that doesn't support Metal.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E2F858()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLCapabilities metalCapabilitiesForDevice:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLCapabilities.m";
  v6 = 1024;
  v7 = 438;
  v8 = v0;
  v9 = "device";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E2F904(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLImage crl_quickInspectorImageNamed:isPrivateImage:isBundledImage:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLImage.m";
  v7 = 1024;
  v8 = 710;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", (uint8_t *)v2, 0x22u);
}

void sub_100E2F9AC(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLImage(RenderingAdditions) CGImageForSize:inContext:orContentsScaleProvider:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLImage_RenderingAdditions.m";
  v7 = 1024;
  v8 = 21;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d using context to determine requested image size. contents scale provider should be nil", (uint8_t *)v2, 0x22u);
}

void sub_100E2FA54()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLMetalDeviceCapabilities initWithDevice:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMetalDeviceCapabilities.m";
  v6 = 1024;
  v7 = 20;
  v8 = v0;
  v9 = "device";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E2FB00()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLMetalDeviceCapabilities supportsGPUFamily:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMetalDeviceCapabilities.m";
  v6 = 1024;
  v7 = 62;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't compare iOS to macOS GPUs.", v2, 0x22u);
}

void sub_100E2FB9C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPAdornmentLine initWithStart:length:color:thickness:lineCount:underline:adornmentLocation:underLineAdjustme"
       "nt:isWhitespace:renderingDelegate:allowAntialiasing:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPAdornmentLine.m";
  v7 = 1024;
  v8 = 34;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Illegal line count", (uint8_t *)v2, 0x22u);
}

void sub_100E2FC44()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLBasicShapeLibraryShape initWithShapeType:position:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibraryShape.m";
  v6 = 1024;
  v7 = 32;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Basic shapes do not know about the custom shape type.", v2, 0x22u);
}

void sub_100E2FCE0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "+[CRLBasicShapeLibraryShape p_baseStringForKey:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLBasicShapeLibraryShape.m";
  v6 = 1024;
  v7 = 174;
  v8 = v0;
  v9 = "englishString";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E2FD8C()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLiOSRepRotateGestureRecognizer initWithInteractiveCanvasController:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSRepRotateGestureRecognizer.m";
  v6 = 1024;
  v7 = 56;
  v8 = v0;
  v9 = "icc";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E2FE38()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLiOSRepRotateGestureRecognizer p_beginTracking]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSRepRotateGestureRecognizer.m";
  v6 = 1024;
  v7 = 542;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d rotate GR did not successfully take control", v2, 0x22u);
}

void sub_100E2FED4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
}

void sub_100E2FF58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Queue limit should be at least one.", v2, v3, v4, v5, v6);
}

void sub_100E2FFDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We need to set the poster time and the poster image together. The poster image is a board item asset so it is async so we'll have to wait until we have both, then use CRLCommandSetMoviePosterTime.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3005C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E300FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3017C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E3021C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d didEndChangingTimePropertyForMovieItem called without matching willBeginChangingTimePropertyForMovieItem", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3029C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3031C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should save default style with a single object selected!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3039C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "CGFloat _CRLPKVectorSafeGet(std::vector<CGFloat>, int)";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/PencilKit/CRLPKCalculusUtility.mm";
  v7 = 1024;
  v8 = 16;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", (uint8_t *)v2, 0x22u);
}

void sub_100E30444()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This tiling layer is not responsible for the layer asking to be drawn", v2, v3, v4, v5, v6);
}

void sub_100E304C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This tiling layer is not responsible for the layer asking to be drawn", v2, v3, v4, v5, v6);
}

void sub_100E3054C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10040B05C();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment failed", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E305C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_100E30664()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid parameter not satisfying: %{public}s", v2, v3, v4, v5, v6);
}

void sub_100E30704()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLPasteboardMultipleImportableBoardItemProvider p_boardItemProviderDidRequestMediaCompatibilityRequirement:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLPasteboardMultipleImportableBoardItemProvider.m";
  v6 = 1024;
  v7 = 248;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No media types were specified! Falling back to Mixed to have understandable strings.", v2, 0x22u);
}

void sub_100E307A0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLiOSDocumentModeController initWithDelegate:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLiOSDocumentModeController.m";
  v6 = 1024;
  v7 = 37;
  v8 = v0;
  v9 = "_mode";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E3084C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E308CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to add a document mode observer that's already added", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3094C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E309CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to remove a document mode observer that has not been added", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30A4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30ACC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30B4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not change mode while we are already changing the mode.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30BCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30C4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30CCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30D4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d bogus size to resample", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30DCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E30E58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLBitmapContextCreate: Input context size of CGSizeZero illegal.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30ED8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot create a context matching a nil image.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30F58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLBitmapContextCreate: Input context size of CGSizeZero illegal.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E30FD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must include a color or alpha channel.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E31058()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E310E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31170()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E311FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31288(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1003DE6F4((void *)&_mh_execute_header, a2, a3, "Error while writing image file %@", a5, a6, a7, a8, 2u);
}

void sub_100E312F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3137C(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100E3141C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E314A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31534()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E315C0(void *a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_1000437A4((void *)&_mh_execute_header, v1, v3, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v4);

  sub_10000B254();
}

void sub_100E31660()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E316EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31778()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31804()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31890()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3191C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E319A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31A34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31AC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31B4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31BD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31C64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E31CF0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLImageRepDrawingHelper invalidateSizedImageIfNeededForBakedMaskPathFromBlock:]_block_invoke";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLImageRepDrawingHelper.m";
  v6 = 1024;
  v7 = 717;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need some mask path if comparing masks", v2, 0x22u);
}

void sub_100E31D8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E31E0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E31E8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E31F0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E31F8C(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E32034(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E320DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3215C(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E32204()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Desired size is an impossible multiple of current size.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E32284()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000B29C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d strokeEnd (%f) should be between 0 and 1 inclusive.", v2, v3, v4, v5, 2u);
  sub_10000B264();
}

void sub_100E32324()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLBrushStroke should only ever have a round cap.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E323A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32430()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E324BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32548()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E325D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32660()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d All brush strokes should draw with Metal!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E326E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3276C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E327F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d If there is a patternOffsetsBySubpath array, this should be a freehand drawing stroke.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E32878()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Parameterized strokes must draw rasterized.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E328F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32984()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We only know how to adjust the pattern of constant width layout brush strokes.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E32A04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d resultPath and resultVector are both nil!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E32A84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32B10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32B9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32C28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32CB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have either a direct context or a CGContext.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E32D34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32DC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32E4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32ED8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32F64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E32FF0(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLInspectorTextFieldClampNumberFormatter p_textShouldBeginEditingWithContent:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInspectorFieldFormatters.m";
  v8 = 1024;
  v9 = 221;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid initial string %@", (uint8_t *)v3, 0x2Cu);
}

void sub_100E330A8(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLInspectorTextFieldLengthFormatter crlaxLocalizedDescriptionFromValue:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLInspectorFieldFormatters.m";
  v7 = 1024;
  v8 = 586;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Did not find a valid number formatter for accessible description.", (uint8_t *)v2, 0x22u);
}

void sub_100E33150()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not start monitoring a control for animations that is already being monitored.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E331D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not stop monitoring a control for animations that is not already being monitored.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E33250()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Button animation received out-of-order touch events. This may be due to calling [self refresh] or [tableView reloadData] directly instead of calling [self.refreshingDelegate refreshableInspectorPaneWantsToRefresh:self].", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E332D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E33350()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E333D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E33450()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E334D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to apply animations to a control that's not being monitored.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E33550()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d if you are creating a center spacing guide, use CRLCanvasCenterAlignmentGuide", v2, v3, v4, v5, v6);
}

void sub_100E335D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d if you are creating a center spacing guide, use CRLCanvasCenterAlignmentGuide", v2, v3, v4, v5, v6);
}

void sub_100E33658()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected offset", v2, v3, v4, v5, v6);
}

void sub_100E336DC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E33774()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Closed writer must be closed.", v2, v3, v4, v5, v6);
}

void sub_100E337F8(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E3389C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E33928()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E339B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E33A40(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E33AD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E33B64(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E33BFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E33C88(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E33D20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E33DAC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_10005FD38();
  sub_100098800((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_10000B254();
}

void sub_100E33E44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E33ED0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v2, 0xCu);
}

void sub_100E33F44(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLPdfTagger beginDrawable:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLPdfTagger.mm";
  v8 = 1024;
  v9 = 1488;
  v10 = 2112;
  v11 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Drawable of class %@ not handled", (uint8_t *)v3, 0x2Cu);
}

void sub_100E33FFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100192BC4();
  sub_100433F50();
  sub_10000B28C();
  sub_100192BB4();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E34094()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100192BC4();
  sub_100433F50();
  sub_10000B28C();
  sub_100192BB4();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3412C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100192BC4();
  sub_100433F50();
  sub_10000B28C();
  sub_100192BB4();
  sub_10007C1F0((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected inequality between %{public}s and %{public}s", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E341C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E34264(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "scribbleElement: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100E342D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E34378(void *a1)
{
  void *v1;
  const char *v2;
  NSString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10000DE74(a1);
  v2 = (const char *)sub_10000B2A8();
  v3 = NSStringFromSelector(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100437444();
  sub_100437430((void *)&_mh_execute_header, v5, v6, "%{public}@\n %{public}@", v7, v8, v9, v10, v11);

  sub_10000B254();
}

void sub_100E34400()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLiOSScribbleInteractionDelegate p_isElementFocused:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLiOSScribbleInteractionDelegate.m";
  v6 = 1024;
  v7 = 125;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Element says it is focused but we have no editing TIR", v2, 0x22u);
}

void sub_100E3449C(void *a1, const char *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  NSObject *v11;
  NSString *v12;
  void *v13;
  NSString *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  CGRect v20;

  v11 = sub_10000DE74(a1);
  v12 = NSStringFromSelector(a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v20.origin.x = a3;
  v20.origin.y = a4;
  v20.size.width = a5;
  v20.size.height = a6;
  v14 = NSStringFromCGRect(v20);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v16 = 138543618;
  v17 = v13;
  v18 = 2114;
  v19 = v15;
  _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%{public}@\n Expanding rect, previous rect was %{public}@", (uint8_t *)&v16, 0x16u);

}

void sub_100E34590(void *a1, uint64_t a2, void *a3)
{
  void *v3;
  const char *v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  sub_10000DE74(a1);
  v5 = (const char *)sub_10000B2A8();
  v6 = NSStringFromSelector(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "rootIdentifier"));
  sub_100437430((void *)&_mh_execute_header, v8, v9, "%{public}@\n providing root UUID for inserting textbox %{public}@", v10, v11, v12, v13, 2u);

  sub_10000B254();
}

void sub_100E3463C()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLShapeRepHelperFreehandDrawing drawInContext:withContent:strokeDrawOptions:withOpacity:usingPathOverride:patt"
       "ernOffsetsBySubpathOverride:transparencyLayersBySubpath:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeRepHelperFreehandDrawing.m";
  v6 = 1024;
  v7 = 105;
  v8 = v0;
  v9 = "pencilKitStrokes";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E346E8()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLShapeRepHelperFreehandDrawing drawInContext:withContent:strokeDrawOptions:withOpacity:usingPathOverride:patt"
       "ernOffsetsBySubpathOverride:transparencyLayersBySubpath:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeRepHelperFreehandDrawing.m";
  v6 = 1024;
  v7 = 77;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas and CGContext disagree about whether we are suppressing backgrounds", v2, 0x22u);
}

void sub_100E34784(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLMultipleItemImporter p_importerDidRequestMediaCompatibilityRequirement:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMultipleItemImporter.m";
  v7 = 1024;
  v8 = 318;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No media types were specified! Falling back to Mixed to have understandable strings.", (uint8_t *)v2, 0x22u);
}

void sub_100E3482C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPMutableRangeArray addRange:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPRangeArray.mm";
  v7 = 1024;
  v8 = 438;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d addRange failure", (uint8_t *)v2, 0x22u);
}

void sub_100E348D4()
{
  __int16 v0;
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  sub_10000B278();
  v4 = "NSString *NSStringFromCRLWPSelectionType(CRLWPSelectionType)";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSelection.mm";
  v7 = 1024;
  v8 = 92;
  v9 = 2048;
  v10 = v1;
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown selection type: %lu", v3);
}

void sub_100E34978()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal range location", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E349F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal range length", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34A78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Non smartfield selection has smartField range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34AF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Selection has a leading edge but no storage to get the leading char", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34B78()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "+[CRLWPSelection selectionFromWPSelection:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPSelection.mm";
  v7 = 1024;
  v8 = 227;
  v9 = v0;
  v10 = "wpSelection";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
}

void sub_100E34C1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Selection type must be visual", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34C9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal visual range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34D1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Visual ranges have not been calculated", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34D9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to re-outset the path to return. Returning the slightly inset version.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34E1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to flood fill paths with Clipper. Falling back to a smoothed bitmap path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34E9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d iaImage should not be nil", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E34F1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E34FB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E35044()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E350D8(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPImmediatePressGestureRecognizer touchesMoved:withEvent:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPImmediatePressGestureRecognizer.m";
  v7 = 1024;
  v8 = 75;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Time travel should have had a non-zero value here", (uint8_t *)v2, 0x22u);
}

void sub_100E35180(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CALayer(CRLAdditions) crl_setIfDifferentFrame:orTransform:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CALayer_CRLAdditions.m";
  v7 = 1024;
  v8 = 34;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Attempting to set frame or transform on layer with NaN values.", (uint8_t *)v2, 0x22u);
}

void sub_100E35228()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100214574();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to Parse SVG File", v2, v3, v4, v5, 2u);
  sub_10000DE48();
}

void sub_100E352B0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  sub_1000DF6A0();
  v0 = (id)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_100098814();
  sub_100098800((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v3, v4, v5, v6, v7);

  sub_10000B254();
}

void sub_100E3533C(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[14];

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected Line Join Style: %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E353CC(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[14];

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected Line Cap Style: %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E3545C(void *a1, int a2, NSObject *a3)
{
  uint64_t v5;
  _DWORD v6[14];

  objc_msgSend(a1, "count");
  v6[0] = 67110146;
  v6[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_100344484();
  sub_10000B26C((void *)&_mh_execute_header, a3, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected number of viewBox components! (%zu)", (uint8_t *)v6);
  sub_1001105EC();
}

void sub_100E354FC(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[14];

  v3[0] = 67110146;
  v3[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown component %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E3558C(void *a1, int a2, NSObject *a3)
{
  uint64_t v5;
  _DWORD v6[14];

  objc_msgSend(a1, "count");
  v6[0] = 67110146;
  v6[1] = a2;
  sub_100214574();
  sub_10000B29C();
  sub_1000195A8();
  sub_100344484();
  sub_10000B26C((void *)&_mh_execute_header, a3, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected number of preserveAspectRatio components! (%zu)", (uint8_t *)v6);
  sub_1001105EC();
}

void sub_100E3562C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100214574();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected 'defer' component", v2, v3, v4, v5, 2u);
  sub_10000DE48();
}

void sub_100E356B4(int a1)
{
  __int16 v1;
  int v2;
  os_log_t v3;
  _DWORD v4[2];
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;

  v4[0] = 67110146;
  v4[1] = a1;
  v5 = 2082;
  sub_10000B29C();
  sub_1000195A8();
  v6 = 590;
  v7 = v1;
  v8 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bailing on operation %c", (uint8_t *)v4, 0x28u);
  sub_10000DE48();
}

void sub_100E35758()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100214574();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No value for initial polyline point!", v2, v3, v4, v5, 2u);
  sub_10000DE48();
}

void sub_100E357E0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLWPShapeLayout initWithInfo:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeLayout.m";
  v6 = 1024;
  v7 = 27;
  v8 = v0;
  v9 = "self.wpShapeInfo.text";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E3588C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Info is wrong class for layout.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3590C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should already be a command group open if we are enqueueing in real time.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3598C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Resize tracker should be able to say if it is enqueueing commands in real time.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E35A0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d There should already be a command group open if we are enqueueing in real time.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E35A8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Resize tracker should be able to say if it is enqueueing commands in real time.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E35B0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_100E35B90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Failed to resolve font name", v2, v3, v4, v5, v6);
}

void sub_100E35C14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E35CB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E35D54(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPShapeEditor saveDefaultInsertionPreset:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLWPShapeEditor.m";
  v7 = 1024;
  v8 = 166;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Only should save default style with a single object selected!", (uint8_t *)v2, 0x22u);
}

void sub_100E35DFC()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLCanvasLayoutGeometry initWithInfoGeometry:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayoutGeometry.m";
  v6 = 1024;
  v7 = 48;
  v8 = v0;
  v9 = "infoGeometry";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E35EA8()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLCanvasLayoutGeometry initWithInfoGeometry:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasLayoutGeometry.m";
  v6 = 1024;
  v7 = 53;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d can't create layout geometry from info geometry if width and height are not valid", v2, 0x22u);
}

void sub_100E35F44()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCIKernelLoader.m";
  v3 = 1024;
  sub_10021924C();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to load Metal CIKernel with name: %{public}@", v1);
  sub_10000B264();
}

void sub_100E35FD4()
{
  NSObject *v0;
  uint8_t v1[20];
  const char *v2;
  __int16 v3;

  sub_10000B2D4();
  sub_10000B29C();
  v2 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCIKernelLoader.m";
  v3 = 1024;
  sub_10021924C();
  sub_10000B26C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to load legacy CIKernel with name: %{public}@", v1);
  sub_10000B264();
}

void sub_100E36064()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E360F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3617C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E36208()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E36294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E36320()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E363AC(int a1)
{
  __int16 v1;
  os_log_t v2;
  _DWORD v3[2];
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;

  v3[0] = 67110402;
  v3[1] = a1;
  v4 = 2082;
  sub_10000B29C();
  sub_10000B28C();
  v5 = 74;
  v6 = v1;
  v7 = "kernelsFromString.count";
  v8 = v1;
  v9 = "1U";
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected equality between %{public}s and %{public}s", (uint8_t *)v3, 0x36u);
  sub_10000B264();
}

void sub_100E36464()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E364F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3657C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLLineEnd lineEndWithType:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLLineEnd.m";
  v7 = 1024;
  v8 = 194;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not ask for line end with this type (count)", (uint8_t *)v2, 0x22u);
}

void sub_100E36624(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLFreehandDrawingToolMarquee p_updateDottedMarqueeDecoratorRenderable:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLFreehandDrawingToolMarquee.m";
  v7 = 1024;
  v8 = 368;
  v9 = 2082;
  v10 = "_pathCreator";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E366DC(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLBadgeView_i setFinalImageWithName:legacyName:accessibilityName:scalesImageToFit:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/StatusHUDs/CRLBadgeView_i.m";
  v7 = 1024;
  v8 = 45;
}

void sub_100E36784()
{
  __int16 v0;
  __int16 v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[10];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v5 = "-[CRLFreehandDrawingPathCreator setSmoothingThresholdMultiplier:]";
  v6 = v0;
  sub_10000B28C();
  v7 = 130;
  v8 = v1;
  v9 = "_strokeGenerator";
  sub_10000B26C((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v4);
  sub_10000B264();
}

void sub_100E3681C()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;

  sub_10004CE88();
  v3 = "-[CRLFreehandDrawingPathCreator setSmoothingThresholdMultiplier:]";
  v4 = v0;
  sub_10000B28C();
  sub_10004CE74();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected creator state, %lu", v2);
  sub_10000B264();
}

void sub_100E368AC()
{
  __int16 v0;
  __int16 v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[10];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v5 = "-[CRLFreehandDrawingPathCreator setPointReductionFilterThresholdMultiplier:]";
  v6 = v0;
  sub_10000B28C();
  v7 = 137;
  v8 = v1;
  v9 = "_strokeGenerator";
  sub_10000B26C((void *)&_mh_execute_header, v2, v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v4);
  sub_10000B264();
}

void sub_100E36944()
{
  __int16 v0;
  NSObject *v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;

  sub_10004CE88();
  v3 = "-[CRLFreehandDrawingPathCreator setPointReductionFilterThresholdMultiplier:]";
  v4 = v0;
  sub_10000B28C();
  sub_10004CE74();
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unexpected creator state, %lu", v2);
  sub_10000B264();
}

void sub_100E369D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginDrawing should be called from the waiting state.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E36A54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d endDrawing should be called from the started state.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E36AD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Need at least two points to do a handoff.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E36B54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't handoff to a new path creator when using PencilKit.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E36BD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to min", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E36C54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d continueDrawing should be called from the started state.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E36CD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The immutable point count should only ever increase.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E36D54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E36DF4()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLCounterRotateRep p_possibleChildRep]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCounterRotateRep.m";
  v6 = 1024;
  v7 = 31;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should have either one or zero child reps.", v2, 0x22u);
}

void sub_100E36E90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E36F30(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  _DWORD v5[2];
  __int16 v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v5[0] = 67109378;
  v5[1] = a2;
  v6 = 2114;
  v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v5, 0x12u);

  sub_10000B254();
}

void sub_100E36FE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Write channel semaphore should not be initialized.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37068(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLZipWriter beginEntryWithNameImpl:force32BitSize:lastModificationDate:size:CRC:forceCalculatingSizeAndCRCForP"
       "reservingLastModificationDate:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m";
  v8 = 1024;
  v9 = 165;
  v10 = 2112;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already have an entry with name: %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E37114()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37194()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37214()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to flush while closed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37314(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100013B20((void *)&_mh_execute_header, a1, a3, "Entry size is 64-bit, even though the size was written as 32-bit.", a5, a6, a7, a8, 0);
  sub_100013B30();
}

void sub_100E37344()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLZipWriter writeEntryWithName:force32BitSize:lastModificationDate:size:CRC:fromReadChannel:writeHandler:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m";
  v7 = 1024;
  v8 = 364;
  v9 = v0;
  v10 = "readChannel";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E373E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Already closed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37464()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't have closed twice.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E374E4()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLZipWriter closeWithQueue:completion:]_block_invoke_4";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/Zip/CRLZipWriter.m";
  v7 = 1024;
  v8 = 491;
  v9 = v0;
  v10 = "strongWriteChannel";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E37584(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100013B20((void *)&_mh_execute_header, a1, a3, "Zip entry name is too long", a5, a6, a7, a8, 0);
  sub_100013B30();
}

void sub_100E375B4(void *a1, void *a2)
{
  void *v2;
  NSObject *v4;
  uint64_t v5;
  Class v6;
  NSString *v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  void *v17;

  v4 = a1;
  objc_opt_class(a2, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = 138544130;
  v11 = v2;
  v12 = 2114;
  v13 = v9;
  v14 = 2048;
  v15 = objc_msgSend(a2, "code");
  v16 = 2112;
  v17 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Couldn't write Zip: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v10, 0x2Au);

}

void sub_100E376A0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "targetRep";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E37730()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to calculate charIndex with nil rep", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E377B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to calculate charIndex with nil rep", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37830()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid charIndex for visual selection", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E378B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No valid rep for given char index; No editing reps.",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000DE48();
}

void sub_100E37930()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d self.tapInfo should be set", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E379B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d self.tapInfo should be set", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37A30()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "wpKnobTracker";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E37AC0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "self.knobTracker";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E37B50()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "self.magnifier";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E37BE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d we should have gotten a valid textRep by now", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37C60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d we should have gotten a valid textRep by now", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37CE0(uint64_t a1, int a2)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  sub_10000B29C();
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPEditor+Gestures.m";
  v6 = 1024;
  sub_10021924C();
  sub_10000B26C((void *)&_mh_execute_header, v2, (uint64_t)v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CRLWPEditor can't handle a gesture of kind %{public}@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E37D7C(void *a1, void *a2, int a3)
{
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  Class v9;
  NSString *v10;
  void *v11;
  uint64_t v12;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "tmCoordinator"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "controllingTM"));
  objc_opt_class(v7, v8);
  v10 = NSStringFromClass(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v13[0] = 67110146;
  v13[1] = a3;
  v14 = 2082;
  sub_10000B29C();
  v15 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPEditor+Gestures.m";
  v16 = 1024;
  sub_10021924C();
  sub_10000B26C((void *)&_mh_execute_header, v5, v12, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d could not take control with WP Editing Controller. Controlling TM is %{public}@", (uint8_t *)v13);

}

void sub_100E37E80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d beginning WP operation in DOC when already in an operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E37F00()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "self.knobTracker";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E37F90(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  v2[0] = 67110146;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLRotorSearchController locateSearchReference:]_block_invoke";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLAccessibility/Canvas/Accessibility/iOS/CRLRotorSearchController.m";
  v7 = 1024;
  v8 = 82;
  v9 = 2082;
  v10 = "layout";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", (uint8_t *)v2, 0x2Cu);
}

void sub_100E38048(void *a1, void *a2, int a3)
{
  NSObject *v5;
  void *v6;
  __CFString *v7;
  void *v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;

  v5 = a1;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "gestureKind"));
  v7 = sub_1002FCE08(objc_msgSend(a2, "gestureState"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9[0] = 67110402;
  v9[1] = a3;
  v10 = 2082;
  v11 = "-[CRLBaseGesture gestureBeganAtLocation:]";
  v12 = 2082;
  v13 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBaseGesture.m";
  v14 = 1024;
  v15 = 85;
  v16 = 2112;
  v17 = v6;
  v18 = 2112;
  v19 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Gesture %@ in invalid state %@", (uint8_t *)v9, 0x36u);

}

void sub_100E38158()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E381EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E38280()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d trying to connect a c-line to itself", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E38300()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d trying to connect a c-line to itself", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E38380()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have connected-to when setting head magnet position", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E38400()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must have connected-from when setting tail magnet position", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E38480()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E38514()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Out-of-bounds type assignment was clamped to max", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E38594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Head and tail should no longer be equal.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E38614()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLCanvasRepRotateTracker initWithRep:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRepRotateTracker.m";
  v6 = 1024;
  v7 = 87;
  v8 = v0;
  v9 = "rep";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E386C0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLCanvasRepRotateTracker changeDynamicLayoutsForReps:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRepRotateTracker.m";
  v6 = 1024;
  v7 = 186;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d attempting to rotate more than one rep, or the wrong rep", v2, 0x22u);
}

void sub_100E3875C(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[CRLPathSource pathSourceForShapeType:naturalSize:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLPathSource.m";
  v7 = 1024;
  v8 = 309;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be trying to get the path of a custom shape from here!", (uint8_t *)v2, 0x22u);
}

void sub_100E38804()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_100E38888()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_100E3890C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Local URL should be a file URL.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3898C(void *a1, void *a2)
{
  void *v2;
  NSObject *v4;
  uint64_t v5;
  Class v6;
  NSString *v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  void *v17;

  v4 = a1;
  objc_opt_class(a2, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = 138544130;
  v11 = v2;
  v12 = 2114;
  v13 = v9;
  v14 = 2048;
  v15 = objc_msgSend(a2, "code");
  v16 = 2112;
  v17 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Could not create property list from data. errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", (uint8_t *)&v10, 0x2Au);

}

void sub_100E38A78(void **a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v2 = *a1;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "path"));
  v5 = 138412290;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to write property list to path: %@", (uint8_t *)&v5, 0xCu);

  sub_10000DE48();
}

void sub_100E38B18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Don't have local defaults plist", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E38B98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't parse local defaults plist", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E38C18(uint64_t a1, int a2, NSObject *a3)
{
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v3[0] = 67110146;
  v3[1] = a2;
  v4 = 2082;
  v5 = "-[CRLGroupEditor nextEditorForSelection:withNewEditorStack:selectionPath:]";
  v6 = 2082;
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
  v8 = 1024;
  v9 = 46;
  v10 = 2112;
  v11 = a1;
  sub_10000B26C((void *)&_mh_execute_header, a3, (uint64_t)a3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown editor class for selection %@", (uint8_t *)v3);
  sub_10000B264();
}

void sub_100E38CC4()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLGroupEditor pasteWithPasteboard:atIndex:forceMatchStyle:bakeFormulas:completionHandler:]_block_invoke";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
  v7 = 1024;
  v8 = 229;
  v9 = v0;
  v10 = "groupToInsertInto";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E38D64()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[10];
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;

  sub_10000B278();
  v4 = "-[CRLGroupEditor pasteNativeInfosFromPasteboard:]";
  v5 = v0;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
  v7 = 1024;
  v8 = 355;
  v9 = v0;
  v10 = "groupToInsertInto";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E38E04()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_10000B278();
  v3 = "-[CRLGroupEditor duplicate:]_block_invoke";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLGroupEditor.m";
  v6 = 1024;
  v7 = 488;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d We don't expect to see cross-container selections in Freeform that have objects that aren't in a container (aka freehand drawings!", v2, 0x22u);
}

void sub_100E38EA0(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "-[CRLWPTextKnobTracker dealloc]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Gestures/CRLWPTextKnobTracker.mm";
  v7 = 1024;
  v8 = 156;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _textMagnifierTimer retains us, so it should be gone by our -dealloc", (uint8_t *)v2, 0x22u);
}

void sub_100E38F48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E38FD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E39060()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Canvas must be torn down before being deallocated", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E390E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3916C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E391F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Interactive canvases should not be laid out directly!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E39278()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting enableInstructionalText on an interactive canvas is not allowed.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E392F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Caller is trying to suppress shadows and reflections on an interactive canvas; this is not supported",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_10000DE48();
}

void sub_100E39378()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[20];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  uint64_t v7;

  sub_10000B278();
  sub_10000B29C();
  v3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLSelectionPath.m";
  v4 = 1024;
  v5 = 68;
  v6 = 2048;
  v7 = v0;
  sub_10000B26C((void *)&_mh_execute_header, v1, (uint64_t)v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Requested selection index %tu is out of range!", v2);
  sub_10000B264();
}

void sub_100E39414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Must send in some selection to append", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E39494()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 92;
  v5 = v0;
  v6 = "selections";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E39528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot pop to selection that is not in a selection path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E395A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot pop to selection that is not in a selection path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E39628()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 121;
  v5 = v0;
  v6 = "newSelection";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E396BC()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  v4 = 120;
  v5 = v0;
  v6 = "oldSelection";
  sub_10000B26C((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_10000B264();
}

void sub_100E39750()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot replace a selection that is not in the selection path.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E397D0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLCanvasRepDragTracker initWithRep:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLCanvasRepDragTracker.m";
  v6 = 1024;
  v7 = 135;
  v8 = v0;
  v9 = "rep";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E3987C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d showing UI for drag without being in some kind of dynamic operation", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E398FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to find index!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3997C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should only call insertInfosAndUpdateDragForDuplicatingDragIfAppropriate once!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E399FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d non-zero snap level when we aren't constraining the drag. that doesn't make sense.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E39A7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d prioritizing X offset with a unit direction that doesn't have an X value!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E39AFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d prioritizing Y offset with a unit direction that doesn't have an Y value!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E39B7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E39C08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E39C94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to add more points after calling finishWithSuccess.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E39D14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Trying to update properties on more points after calling finishWithSuccess.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E39D94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E39E20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E39EAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E39F38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E39FC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3A050()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d The tool can add a failure, but not stop a failure from this tracker.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3A0D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d _trackingTool shouldn't have changed while we were in the dynamic operation.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3A150(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Freehand tracker is committing before finish was called. Calling finish to clean up.", v1, 2u);
}

void sub_100E3A190()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3A224()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3A2B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Rep should not already be being resized when calling -p_beginDynamicResize", v2, v3, v4, v5, v6);
}

void sub_100E3A33C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to get resizing layout for beginning dynamic drag.", v2, v3, v4, v5, v6);
}

void sub_100E3A3C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3A454(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  Class v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v3 = sub_100221D04(a1, __stack_chk_guard);
  objc_opt_class(a2, v4);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "domain"));
  objc_msgSend(a2, "code");
  sub_100065B80((void *)&_mh_execute_header, v8, v9, "Error creating temporary directory: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v10, v11, v12, v13, 2u);

  sub_100065B94();
}

void sub_100E3A528(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error getting item from photo picker: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E3A5BC(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  NSString *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  v4 = sub_100221D04(a1, __stack_chk_guard);
  v6 = (objc_class *)sub_10000DEAC((uint64_t)v4, v5);
  v7 = NSStringFromClass(v6);
  objc_claimAutoreleasedReturnValue(v7);
  v8 = objc_msgSend((id)sub_10000B2A8(), "domain");
  objc_claimAutoreleasedReturnValue(v8);
  sub_100065BA4();
  sub_100065B44();
  sub_100065B80((void *)&_mh_execute_header, v9, v10, "Error copying photo picker item: errorClass=%{public}@, domain=%{public}@, code=%zd (%@) ", v11, v12, v13, v14, v15);

  sub_100065B94();
}

void sub_100E3A650(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Completion handler called multiple times", v1, 2u);
}

void sub_100E3A690()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No file extension for file URL with registered type identifier: %{public}@");
}

void sub_100E3A720(int a1, NSObject *a2)
{
  _DWORD v2[2];
  __int16 v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  v2[0] = 67109890;
  v2[1] = a1;
  v3 = 2082;
  v4 = "+[PHPickerResult(CRLAdditions) crl_safeLastPathComponentForItemURL:registeredTypeIdentifier:]";
  v5 = 2082;
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/PHPickerResult_CRLAdditions.m";
  v7 = 1024;
  v8 = 127;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to create image source to check file type for photo picker file URL with no file extension.", (uint8_t *)v2, 0x22u);
}

void sub_100E3A7C8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000B2D4();
  sub_10021924C();
  sub_100019580((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d No file extension for CG-provided type identifier: %{public}@");
}

void sub_100E3A858()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E3A8F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d More than one item detected on the pasteboard for image fill. Currently only single items are supported.", v2, v3, v4, v5, v6);
}

void sub_100E3A97C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
}

void sub_100E3AA00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
}

void sub_100E3AAA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bad extended range", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3AB20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d illegal instantiation of abstract class CRLWPStorageSpellChecker", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3ABA0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_10000B278();
  v3 = "-[CRLWPStorageSpellChecker dealloc]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Spelling/CRLWPStorageSpellChecker.mm";
  v6 = 1024;
  v7 = 143;
  v8 = v0;
  v9 = "_storage";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d expected nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_100E3AC4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d checked ranges exceed storage", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3ACCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Bogus char index", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3AD4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Invalid charIndex.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3ADCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Locale string is too short.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3AE4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3AEE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3AF74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting up player controller for data that needs to be downloaded!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3AFF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Setting up player controller when audio isn't playable!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3B074()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3B0F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3B174()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000B28C();
  sub_100010CD8((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, v3, v4, v5, v6);
  sub_10000B264();
}

void sub_100E3B208()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "imageSource";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E3B298()
{
  uint64_t v0;
  os_log_t v1;

  sub_100192BC4();
  sub_100433F50();
  sub_100057230();
  sub_1004AAAB0();
  sub_1004AAA9C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseAddTimerDispatchSource failed (%d)");
  sub_10000DE48();
}

void sub_100E3B31C(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E3B3C4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "_timebase";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E3B454(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E3B4FC()
{
  uint64_t v0;
  os_log_t v1;

  sub_100192BC4();
  sub_100433F50();
  sub_100057230();
  sub_1004AAAB0();
  sub_1004AAA9C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseCreateWithMasterClock failed (%d)");
  sub_10000DE48();
}

void sub_100E3B580(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E3B628(void *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[20];
  const char *v7;

  v3 = a1;
  objc_opt_class(a2, v4);
  sub_1000D72E0();
  sub_10000B29C();
  v7 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLAnimatedGIFController.m";
  sub_100057230();
  sub_10000B2B4();
  sub_10000B26C((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %@ can only play GIFs, HEIFs or PNGs with multiple frames.", v6);

  sub_100065B94();
}

void sub_100E3B6DC(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E3B784(void *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint8_t v8[20];
  const char *v9;

  v3 = a1;
  objc_opt_class(a2, v4);
  sub_1000D72E0();
  sub_10000B29C();
  v9 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLAnimatedGIFController.m";
  sub_100057230();
  sub_10000B2B4();
  v6 = v5;
  sub_10000B26C((void *)&_mh_execute_header, v3, v7, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d %@ can only play GIFs, PNGs or HEIC/Fs.", v8);

  sub_100065B94();
}

void sub_100E3B844(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E3B8EC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "imageSource";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E3B97C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reached -dealloc with associated animated GIF layers.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3B9FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Reached -dealloc without teardown being hit.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3BA7C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100192BC4();
  sub_100433F50();
  sub_100057230();
  sub_1004AAAB0();
  sub_1004AAA9C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseRemoveTimerDispatchSource failed (%d)");
  sub_10000DE48();
}

void sub_100E3BB00()
{
  uint64_t v0;
  os_log_t v1;

  sub_100192BC4();
  sub_100433F50();
  sub_100057230();
  sub_1004AAAB0();
  sub_1004AAA9C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseSetRate failed (%d)");
  sub_10000DE48();
}

void sub_100E3BB84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Scrubbing to time when not known to be scrubbing!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3BC04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Uneven begin/end scrubbing calls!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3BC84()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  const char *v3;

  sub_10000B278();
  sub_10000B29C();
  sub_10000B28C();
  sub_10000B2C8();
  v3 = "masterClockOrTimebase";
  sub_10000B26C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2);
  sub_10000B264();
}

void sub_100E3BD14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Should not be requesting an updated rate without also requesting an updated anchor time.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3BD94()
{
  uint64_t v0;
  os_log_t v1;

  sub_100192BC4();
  sub_100433F50();
  sub_100057230();
  sub_1004AAAB0();
  sub_1004AAA9C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseSetTimerDispatchSourceNextFireTime failed (%d)");
  sub_10000DE48();
}

void sub_100E3BE18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3BE98()
{
  uint64_t v0;
  os_log_t v1;

  sub_100192BC4();
  sub_100433F50();
  sub_100057230();
  sub_1004AAAB0();
  sub_1004AAA9C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseSetRateAndAnchorTime failed (%d)");
  sub_10000DE48();
}

void sub_100E3BF1C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100192BC4();
  sub_100433F50();
  sub_100057230();
  sub_1004AAAB0();
  sub_1004AAA9C((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d CMTimebaseSetTimerDispatchSourceNextFireTime failed (%d)");
  sub_10000DE48();
}

void sub_100E3BFA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3C020(void *a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _DWORD v6[6];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v6[0] = 67109378;
  v6[1] = a2;
  sub_1000437B0();
  sub_1000437A4((void *)&_mh_execute_header, v3, v5, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", (uint8_t *)v6);

  sub_10000B254();
}

void sub_100E3C0C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Double-enabling display link", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3C148()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Disabling display link unexpectedly!", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3C1C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3C248()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d This operation must only be performed on the main thread.", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3C2C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get the current min z-value for a cross-container selection", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

void sub_100E3C348()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000B278();
  sub_10000DE60();
  sub_10000DE50((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Cannot get the current max z-value for a cross-container selection", v2, v3, v4, v5, v6);
  sub_10000DE48();
}

