void sub_100004B64(id a1)
{
  void *v1;
  id v2;
  void *v3;
  size_t size;

  size = 0;
  sysctlbyname("kern.osversion", 0, &size, 0, 0);
  v1 = malloc_type_malloc(size, 0xACBDD60AuLL);
  sysctlbyname("kern.osversion", v1, &size, 0, 0);
  v2 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v1);
  v3 = (void *)qword_100085A10;
  qword_100085A10 = (uint64_t)v2;

  free(v1);
}

void sub_100004C40(id a1)
{
  void *v1;
  id v2;
  void *v3;
  size_t size;

  size = 0;
  sysctlbyname("hw.model", 0, &size, 0, 0);
  v1 = malloc_type_malloc(size, 0x3B240CF6uLL);
  sysctlbyname("hw.model", v1, &size, 0, 0);
  v2 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v1);
  v3 = (void *)qword_100085A20;
  qword_100085A20 = (uint64_t)v2;

  free(v1);
}

void sub_100005070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000508C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  void *v9;
  void *v10;
  unint64_t v11;

  v9 = (void *)a1[4];
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "substringToIndex:", 1));
  objc_msgSend(v9, "appendString:", v10);

  ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v11 = a1[6];
  if (v11)
    LOBYTE(v11) = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) >= v11;
  *a7 = v11;
}

void sub_1000051DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  if ((unint64_t)objc_msgSend(v14, "length") >= 2)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("%@.%@"), 0, 0));

    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "substringToIndex:", 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "substringFromIndex:", objc_msgSend(v14, "length")));
    objc_msgSend(v11, "appendFormat:", v10, v12, v13);

  }
  *a7 = 1;

}

void sub_100005D94(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_100005DC4(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_1000062C8(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_1000062F8(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_100006784(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("*?+[(){}^$|\\./")));
  objc_storeStrong((id *)&qword_100085A30, v1);
  if (!qword_100085A30)
  {
    +[CRLAssertionHandler _atomicIncrementAssertCount](CRLAssertionHandler, "_atomicIncrementAssertCount");
    if (CRLAssertCat_init_token != -1)
      dispatch_once(&CRLAssertCat_init_token, &stru_100071798);
    if (os_log_type_enabled((os_log_t)CRLAssertCat_log_t, OS_LOG_TYPE_ERROR))
      sub_10004E0A0();
    if (CRLAssertCat_init_token != -1)
      dispatch_once(&CRLAssertCat_init_token, &stru_1000717B8);
    v2 = CRLAssertCat_log_t;
    if (os_log_type_enabled((os_log_t)CRLAssertCat_log_t, OS_LOG_TYPE_ERROR))
      sub_10004DEE8(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[NSString(CRLAdditions) crl_escapeForIcuRegex]_block_invoke"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSString_CRLAdditions.m"));
    +[CRLAssertionHandler handleFailureInFunction:file:lineNumber:isFatal:description:](CRLAssertionHandler, "handleFailureInFunction:file:lineNumber:isFatal:description:", v3, v4, 440, 0, "invalid nil value for '%{public}s'", "icuRegexCharSet");

  }
}

void sub_10000690C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000693C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

CFStringTokenizerTokenType sub_100007F80(uint64_t a1, CFStringTokenizerRef tokenizer)
{
  CFStringTokenizerTokenType Token;
  CFStringTokenizerTokenType v5;
  BOOL v6;

  do
  {
    while (1)
    {
      Token = CFStringTokenizerAdvanceToNextToken(tokenizer);
      v5 = Token;
      if (Token)
        break;
      if (CFStringTokenizerGetCurrentTokenRange(tokenizer).location == -1)
        return v5;
    }
    if (*(_BYTE *)(a1 + 32))
      v6 = 1;
    else
      v6 = (Token & 0x10) == 0;
  }
  while (!v6);
  return v5;
}

void sub_10000803C(id a1)
{
  id v1;
  void *v2;
  __int16 v3;

  v3 = -4;
  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithCharacters:length:", &v3, 1);
  v2 = (void *)qword_100085A40;
  qword_100085A40 = (uint64_t)v1;

}

void sub_1000081B0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("ـ‑-‐–—")));
  v2 = (void *)qword_100085A58;
  qword_100085A58 = v1;

}

void sub_10000823C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("'\"’‘‚“”„«»‹›」「』『")));
  v2 = (void *)qword_100085A68;
  qword_100085A68 = v1;

}

void sub_100008938(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_100008968(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_100008D98(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  v5 = objc_msgSend(*(id *)(a1 + 32), "rangeOfString:", a2);
  if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = *(void **)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](NSValue, "valueWithRange:", v5, v6));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v9, v8);

  }
}

int64_t sub_100008E18(id a1, NSValue *a2, NSValue *a3)
{
  NSValue *v4;
  id v5;
  id v6;

  v4 = a3;
  v5 = -[NSValue rangeValue](a2, "rangeValue");
  v6 = -[NSValue rangeValue](v4, "rangeValue");

  if (v5 > v6)
    return -1;
  else
    return v5 < v6;
}

void sub_100009140(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  int v4;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMutableCharacterSet characterSetWithRange:](NSMutableCharacterSet, "characterSetWithRange:", 0, 32));
  v2 = (void *)qword_100085A70;
  qword_100085A70 = v1;

  objc_msgSend((id)qword_100085A70, "addCharactersInString:", CFSTR("\"\\"));
  v4 = 539566120;
  v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithCharacters:length:", &v4, 2);
  objc_msgSend((id)qword_100085A70, "addCharactersInString:", v3);

}

void sub_100009358(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_100009388(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_100009960(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLDefaultCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLDefaultCat_log_t;
  CRLDefaultCat_log_t = v2;

}

void sub_100009DCC(id a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;

  v4 = 0;
  v1 = objc_msgSend(objc_alloc((Class)NSRegularExpression), "initWithPattern:options:error:", CFSTR("<REDACT .*? REDACT>"), 8, &v4);
  v2 = v4;
  v3 = (void *)qword_100085A80;
  qword_100085A80 = (uint64_t)v1;

}

void sub_100009FA4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_100009FE8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x2Cu);
}

uint64_t sub_10000A018()
{
  uint64_t v0;

  return v0;
}

void sub_10000A1F0(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000A220(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000A48C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000A4BC(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000A600(id a1)
{
  CRLLogHelper *v1;
  void *v2;

  v1 = objc_alloc_init(CRLLogHelper);
  v2 = (void *)qword_100085A90;
  qword_100085A90 = (uint64_t)v1;

}

void sub_10000A7F0(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLPerformanceCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLPerformanceCat_log_t;
  CRLPerformanceCat_log_t = v2;

}

void sub_10000A81C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLPerformanceCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLPerformanceCat_log_t;
  CRLPerformanceCat_log_t = v2;

}

uint64_t CRLCapabilitiesDeviceTypeFromHWModelString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "componentsSeparatedByCharactersInSet:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  if (objc_msgSend(v4, "length"))
  {
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("iPad")) & 1) != 0)
    {
      v5 = 1;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("iPhone")) & 1) != 0)
    {
      v5 = 2;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("iPod")) & 1) != 0)
    {
      v5 = 3;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("iMac")) & 1) != 0)
    {
      v5 = 4;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("MacBook")) & 1) != 0)
    {
      v5 = 5;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("MacBookAir")) & 1) != 0)
    {
      v5 = 6;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("MacBookPro")) & 1) != 0)
    {
      v5 = 7;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("Macmini")) & 1) != 0)
    {
      v5 = 8;
    }
    else if (objc_msgSend(v4, "isEqualToString:", CFSTR("MacPro")))
    {
      v5 = 9;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_10000B1E4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "p_isMetalCapable");
  byte_100085AA8 = (char)result;
  return result;
}

void sub_10000B244(id a1)
{
  CRLCapabilities *v1;
  void *v2;

  v1 = objc_alloc_init(CRLCapabilities);
  v2 = (void *)qword_100085AB8;
  qword_100085AB8 = (uint64_t)v1;

}

void sub_10000B46C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000B49C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000B66C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000B69C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000B828(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000B858(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000BA54(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000BA84(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000BAB4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_100085AC0;
  qword_100085AC0 = (uint64_t)v1;

}

uint64_t sub_10000BBC4(uint64_t result)
{
  byte_100085AD0 = (*(_QWORD *)(*(_QWORD *)(result + 32) + 24) > 0x1AuLL) | (0xFFF9FFu >> *(_QWORD *)(*(_QWORD *)(result + 32) + 24)) & 1;
  return result;
}

void sub_10000BC14(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

os_log_t CRLLogCreateCategory(char *category)
{
  return os_log_create("com.apple.freeform", category);
}

id sub_10000BE0C(_QWORD *a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "containsObject:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_10000BED0(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10000BFB8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10000BFC8(uint64_t a1)
{

}

void sub_10000BFD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "allObjects"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10000C0C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithSet:](NSSet, "setWithSet:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_10000C180(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_10000C208(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObject:", *(_QWORD *)(a1 + 40));
}

void sub_10000C2C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "description"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id CRLLogGetNameDictionary()
{
  if (qword_100085AE8 != -1)
    dispatch_once(&qword_100085AE8, &stru_100071C60);
  return (id)qword_100085AE0;
}

void sub_10000C374(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](NSMapTable, "strongToStrongObjectsMapTable"));
  v2 = (void *)qword_100085AE0;
  qword_100085AE0 = v1;

}

id CRLLogEnsureCreated(void *a1, id *a2, dispatch_once_t *a3)
{
  dispatch_once_t v5;
  id v6;
  id NameDictionary;
  void *v8;
  id v9;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  void *v15;
  id *v16;

  v11 = _NSConcreteStackBlock;
  v12 = 3221225472;
  v13 = sub_10000C454;
  v14 = &unk_100071C88;
  v15 = a1;
  v16 = a2;
  v5 = *a3;
  v6 = a1;
  if (v5 != -1)
    dispatch_once(a3, &v11);
  NameDictionary = CRLLogGetNameDictionary();
  v8 = (void *)objc_claimAutoreleasedReturnValue(NameDictionary);
  objc_msgSend(v8, "setObject:forKey:", v6, *a2, v11, v12, v13, v14, v15, v16);

  v9 = *a2;
  return v9;
}

void sub_10000C454(uint64_t a1)
{
  os_log_t v2;

  v2 = os_log_create("com.apple.freeform", (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));

  **(_QWORD **)(a1 + 40) = v2;
}

intptr_t CRLDynamicBaseAddress()
{
  const section_64 *v0;
  uint64_t addr;
  uint64_t offset;
  intptr_t image_vmaddr_slide;
  uint32_t v4;
  const char *image_name;
  uint32_t bufsize;
  char buf[1024];

  v0 = getsectbyname("__TEXT", "__text");
  addr = v0->addr;
  offset = v0->offset;
  bufsize = 1024;
  if (_NSGetExecutablePath(buf, &bufsize))
  {
    image_vmaddr_slide = -1;
  }
  else if (_dyld_image_count())
  {
    v4 = 0;
    while (1)
    {
      image_name = _dyld_get_image_name(v4);
      if (!strcmp(image_name, buf))
        break;
      if (++v4 >= _dyld_image_count())
        goto LABEL_7;
    }
    image_vmaddr_slide = _dyld_get_image_vmaddr_slide(v4);
  }
  else
  {
LABEL_7:
    image_vmaddr_slide = 0;
  }
  return addr - offset + image_vmaddr_slide;
}

void sub_10000C814(uint64_t a1, void *a2, char a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;

  v5 = a2;
  if (CRLAssertCat_init_token != -1)
    dispatch_once(&CRLAssertCat_init_token, &stru_100071CA8);
  v6 = CRLAssertCat_log_t;
  if (os_log_type_enabled((os_log_t)CRLAssertCat_log_t, OS_LOG_TYPE_ERROR))
  {
    sub_10004E624(v6);
    if ((a3 & 1) != 0)
      goto LABEL_5;
  }
  else if ((a3 & 1) != 0)
  {
LABEL_5:
    v7 = *(void **)(a1 + 32);
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Terminating application due to %@"), v5));
LABEL_9:
    v9 = v8;
    objc_msgSend(v7, "addObject:", v8);

    goto LABEL_10;
  }
  if (!*(_BYTE *)(a1 + 40))
  {
    v7 = *(void **)(a1 + 32);
    v8 = objc_msgSend(v5, "copy");
    goto LABEL_9;
  }
LABEL_10:

}

void sub_10000C8F4(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000C9A4(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000CA6C(id a1)
{
  os_log_t Category;
  void *v2;
  void *v3;

  Category = CRLLogCreateCategory("CRLAssertCat");
  v2 = (void *)objc_claimAutoreleasedReturnValue(Category);
  v3 = CRLAssertCat_log_t;
  CRLAssertCat_log_t = v2;

}

void sub_10000D174(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;

  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary sharedKeySetForKeys:](NSDictionary, "sharedKeySetForKeys:", &off_100076A20));
  v2 = (void *)qword_100085B00;
  qword_100085B00 = v1;

  v3 = objc_alloc_init((Class)NSMutableDictionary);
  v4 = (void *)qword_100085B08;
  qword_100085B08 = (uint64_t)v3;

  dword_100085B10 = 0;
}

void sub_10000D248(id a1)
{
  void *v1;

  v1 = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 2);
  if (v1)
    v1 = dlsym(v1, "SimulateCrash");
  off_100085B18 = v1;
}

void CRLSetCrashReporterInfov(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  const char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
  v3 = objc_retainAutorelease(objc_msgSend(objc_alloc((Class)NSString), "crl_initRedactedWithFormat:arguments:", v2, v7));
  v4 = (const char *)objc_msgSend(v3, "UTF8String");
  v6 = 0;
  if (v4)
  {
    asprintf(&v6, "%s", v4);
    v5 = v6;
  }
  else
  {
    v5 = 0;
  }
  if (!v5)
    v5 = "CRLSetCrashReporterInfo: unknown reason";
  __crashreporter_info__ = (uint64_t)v5;

}

uint64_t sub_10000D600(uint64_t a1)
{
  return sub_10000D638(a1, (uint64_t (*)(_QWORD))&type metadata accessor for JSONEncoder, (uint64_t (*)(void))&JSONEncoder.init(), &qword_10008D450);
}

uint64_t sub_10000D61C(uint64_t a1)
{
  return sub_10000D638(a1, (uint64_t (*)(_QWORD))&type metadata accessor for JSONDecoder, (uint64_t (*)(void))&JSONDecoder.init(), &qword_10008D458);
}

uint64_t sub_10000D638(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;

  v6 = a2(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  result = a3();
  *a4 = result;
  return result;
}

id sub_10000D680(uint64_t a1)
{
  return sub_10000D6A8(a1, &protocolRef__CRLUSDAsyncRenderingDelegateXPC, &qword_10008D460);
}

id sub_10000D694(uint64_t a1)
{
  return sub_10000D6A8(a1, &protocolRef__CRLUSDAsyncRenderingXPC, &qword_10008D468);
}

id sub_10000D6A8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", *a2);
  *a3 = result;
  return result;
}

id sub_10000D6F0()
{
  id v0;
  id result;

  v0 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___CRLUSDRenderingExtensionAPIEndpointProtocol);
  if (qword_100082ED0 != -1)
    swift_once(&qword_100082ED0, sub_10000D680);
  objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", qword_10008D460, "makeCoreRERendererProxyForUUID:delegateProxy:flags:response:", 1, 0);
  if (qword_100082ED8 != -1)
    swift_once(&qword_100082ED8, sub_10000D694);
  result = objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", qword_10008D468, "makeCoreRERendererProxyForUUID:delegateProxy:flags:response:", 0, 1);
  qword_10008D470 = (uint64_t)v0;
  return result;
}

BOOL sub_10000D7E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000D7F8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000D83C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000D864(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_10000D8A4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x656E6E6F63736964;
  if (*v0 != 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_10000D90C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100013584(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000D930()
{
  return 0;
}

void sub_10000D93C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10000D948(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015C10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000D970(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015C10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000D998(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;

  v34 = a3;
  v31 = a2;
  v4 = sub_1000131C0(&qword_100083848);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  __chkstk_darwin();
  v30 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000131C0(&qword_100083850);
  v28 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  __chkstk_darwin();
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000131C0(&qword_100083858);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000131C0(&qword_100083860);
  v35 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  sub_100015BEC(a1, v17);
  v18 = sub_100015C10();
  v19 = v16;
  v20 = v34;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys, v18, v17, v19);
  if (!v20)
  {
    v36 = 0;
    v22 = sub_100015CFC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys, &v36, v13, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys, v22);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v15, v13);
  }
  if (v20 == 1)
  {
    v37 = 1;
    v21 = sub_100015CB8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys, &v37, v13, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys, v21);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v15, v13);
  }
  v38 = 2;
  v24 = sub_100015C74();
  v25 = v30;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys, &v38, v13, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys, v24);
  v26 = v33;
  KeyedEncodingContainer.encode(_:forKey:)(v31, v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v15, v13);
}

uint64_t sub_10000DC40()
{
  return 0;
}

uint64_t sub_10000DC4C@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

void sub_10000DC78(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10000DC84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015CB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000DCAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015CB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t variable initialization expression of CRLDeviceManagementRestrictionsManager.isKeyboardMathSolvingAllowed()
{
  return 1;
}

Swift::Int sub_10000DCDC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10000DD1C()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10000DD40(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10000DD7C()
{
  return 12383;
}

uint64_t sub_10000DD88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10000DE04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015C74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000DE2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015C74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000DE54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015CFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000DE7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015CFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10000DEB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1000136E8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10000DEDC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10000D998(a1, *v1, v1[1]);
}

Swift::Int sub_10000DEF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5, 0);
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)(v5, v1, v2);
      return Hasher._finalize()();
    }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10000DF70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;

  v3 = v1[1];
  if (!v3)
  {
    v4 = 0;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    v4 = 1;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  v5 = *v1;
  Hasher._combine(_:)(2uLL);
  String.hash(into:)(a1, v5, v3);
}

Swift::Int sub_10000DFE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)(v6, v2, v3);
      return Hasher._finalize()();
    }
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_10000E05C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return !v4;
  if (v3 == 1)
    return v4 == 1;
  if (v4 < 2)
    return 0;
  v6 = *a1;
  if (v6 != *a2 || v3 != v4)
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v3, *a2, v4, 0);
  return 1;
}

uint64_t sub_10000E0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[6] = a3;
  v5[7] = a4;
  v5[4] = a1;
  v5[5] = a2;
  v5[3] = v4;
  v6 = type metadata accessor for MainActor(0);
  v5[8] = v6;
  v5[9] = static MainActor.shared.getter();
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[10] = v7;
  v5[11] = v8;
  return swift_task_switch(sub_10000E134, v7, v8);
}

uint64_t sub_10000E134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 48);
  v1 = static MainActor.shared.getter();
  *(_QWORD *)(v0 + 96) = v1;
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 104) = v2;
  *(_QWORD *)(v2 + 16) = v0 + 24;
  *(_OWORD *)(v2 + 24) = v6;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 112) = v3;
  v4 = sub_1000131C0(&qword_100083660);
  *v3 = v0;
  v3[1] = sub_10000E1FC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v1, &protocol witness table for MainActor, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), sub_100013180, v2, v4);
}

uint64_t sub_10000E1FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[10];
    v5 = v2[11];
    v6 = sub_10000E2A4;
  }
  else
  {
    v7 = v2[13];
    swift_release(v2[12]);
    swift_task_dealloc(v7);
    v4 = v2[10];
    v5 = v2[11];
    v6 = sub_10000E270;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10000E270()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10000E2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000E2EC(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t), uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  id v24;
  uint64_t v26;
  void (*v27)(_QWORD *, uint64_t);
  id v28;
  _QWORD v29[4];
  _QWORD aBlock[5];
  uint64_t v31;

  v26 = a4;
  v27 = a3;
  v13 = sub_1000131C0(a5);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(a6, v18 + v15, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v19 + v18, (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  aBlock[4] = a7;
  v31 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E530;
  aBlock[3] = a8;
  v20 = _Block_copy(aBlock);
  v21 = v31;
  swift_unknownObjectRetain(v16);
  swift_release(v21);
  v22 = objc_msgSend(v16, "remoteObjectProxyWithErrorHandler:", v20, v26);
  swift_unknownObjectRelease(v16);
  _Block_release(v20);
  _bridgeAnyObjectToAny(_:)(aBlock, v22);
  swift_unknownObjectRelease(v22);
  sub_100013230((uint64_t)aBlock, (uint64_t)v29);
  v23 = sub_10001326C();
  swift_dynamicCast(&v28, v29, (char *)&type metadata for Any + 8, v23, 7);
  v29[0] = v28;
  v24 = v28;
  v27(v29, a1);

  return sub_100015C54(aBlock);
}

uint64_t sub_10000E4EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  swift_errorRetain(a1);
  v4 = sub_1000131C0(a3);
  return CheckedContinuation.resume(throwing:)(&v6, v4);
}

void sub_10000E530(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10000E580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a3;
  v5[6] = a4;
  v5[3] = a1;
  v5[4] = a2;
  v6 = type metadata accessor for MainActor(0);
  v5[7] = v6;
  v5[8] = static MainActor.shared.getter();
  v5[2] = v4;
  v5[9] = static MainActor.shared.getter();
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[10] = v7;
  v5[11] = v8;
  return swift_task_switch(sub_10000E610, v7, v8);
}

uint64_t sub_10000E610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 40);
  v1 = static MainActor.shared.getter();
  *(_QWORD *)(v0 + 96) = v1;
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 104) = v2;
  *(_QWORD *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v5;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 112) = v3;
  *v3 = v0;
  v3[1] = sub_10000E6C0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, v1, &protocol witness table for MainActor, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), sub_100013404, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10000E6C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[10];
    v5 = v2[11];
    v6 = sub_10000E78C;
  }
  else
  {
    v7 = v2[13];
    swift_release(v2[12]);
    swift_task_dealloc(v7);
    v4 = v2[10];
    v5 = v2[11];
    v6 = sub_10000E734;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10000E734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100016330, v2, v3);
}

uint64_t sub_10000E78C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[13];
  v2 = v0[9];
  v3 = v0[7];
  swift_release(v0[12]);
  swift_release(v2);
  swift_task_dealloc(v1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_100016334, v4, v5);
}

uint64_t sub_10000E800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[5] = a3;
  v5[6] = a4;
  v5[3] = a1;
  v5[4] = a2;
  v6 = type metadata accessor for MainActor(0);
  v5[7] = v6;
  v7 = static MainActor.shared.getter(v6);
  v5[8] = v7;
  v5[2] = v4;
  v5[9] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[10] = v8;
  v5[11] = v9;
  return swift_task_switch(sub_10000E890, v8, v9);
}

uint64_t sub_10000E890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v6 = *(_OWORD *)(v1 + 40);
  v2 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 96) = v2;
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v1 + 104) = v3;
  *(_QWORD *)(v3 + 16) = v1 + 16;
  *(_OWORD *)(v3 + 24) = v6;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 112) = v4;
  *v4 = v1;
  v4[1] = sub_10000E940;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, v2, &protocol witness table for MainActor, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), sub_100013CA0, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10000E940()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[10];
    v5 = v2[11];
    v6 = sub_10000EA40;
  }
  else
  {
    v7 = v2[13];
    swift_release(v2[12]);
    swift_task_dealloc(v7);
    v4 = v2[10];
    v5 = v2[11];
    v6 = sub_10000E9B4;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10000E9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10000EA0C, v2, v3);
}

uint64_t sub_10000EA0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000EA40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[13];
  v2 = v0[9];
  v3 = v0[7];
  swift_release(v0[12]);
  swift_release(v2);
  swift_task_dealloc(v1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_10000EAB4, v4, v5);
}

uint64_t sub_10000EAB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000EAE8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    swift_errorRetain(a1);
    v2 = (void *)_convertErrorToNSError(_:)(a1);
    v3 = sub_100025F74(v2);
    if (v5 == -1)
    {
      v15 = a1;
      v14 = sub_1000131C0(&qword_100083688);
      CheckedContinuation.resume(throwing:)(&v15, v14);
    }
    else
    {
      v6 = v3;
      v7 = v4;
      v8 = v5;
      v9 = sub_1000133A8();
      v10 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v9, 0, 0);
      *(_QWORD *)v11 = v6;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 + 16) = v8;
      v15 = v10;
      v12 = sub_1000131C0(&qword_100083688);
      CheckedContinuation.resume(throwing:)(&v15, v12);
      swift_errorRelease(a1);
    }

  }
  else
  {
    v13 = sub_1000131C0(&qword_100083688);
    CheckedContinuation.resume(returning:)(v13, v13);
  }
}

uint64_t sub_10000EBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = sub_1000131C0(&qword_100083780);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v7[7] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_10000EC68, v10, v11);
}

uint64_t sub_10000EC68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);
  uint64_t ObjectType;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(void (**)(uint64_t, _QWORD))(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 56));
  ObjectType = swift_getObjectType(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 0, 1, v6);
  v4(v1, 0);
  sub_100015598(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000ED64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  uint64_t v13;

  v6 = sub_1000131C0(&qword_100083780);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015550(a1, (uint64_t)v8);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  if (a2)
    v12 = (void *)_convertErrorToNSError(_:)(a2);
  else
    v12 = 0;
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v12);

}

uint64_t sub_10000EE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v8[6] = v14;
  v8[7] = v15;
  v8[4] = a7;
  v8[5] = a8;
  v8[2] = a4;
  v8[3] = a5;
  v9 = type metadata accessor for CRLUSDRendering.SceneRequest(0);
  v8[8] = v9;
  v8[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  v8[10] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v8[11] = v11;
  v8[12] = v12;
  return swift_task_switch(sub_10000EEFC, v11, v12);
}

uint64_t sub_10000EEFC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  int *v8;
  _QWORD *v9;
  int *v11;

  if (qword_100082EC8 != -1)
    swift_once(&qword_100082EC8, sub_10000D61C);
  v1 = v0[8];
  v2 = (_QWORD *)v0[9];
  v4 = v0[4];
  v3 = v0[5];
  v5 = sub_1000154CC(&qword_100083778, type metadata accessor for CRLUSDRendering.SceneRequest, (uint64_t)&unk_10006230C);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v2, v1, v4, v3, v1, v5);
  v6 = v0[3];
  ObjectType = swift_getObjectType(v0[2]);
  v8 = *(int **)(v6 + 16);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[13] = v9;
  *v9 = v0;
  v9[1] = sub_10000F044;
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v11)(v0[9], ObjectType, v0[3]);
}

uint64_t sub_10000F044()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  sub_10001550C(v4);
  if (v0)
    v5 = sub_10000F0FC;
  else
    v5 = sub_10000F0B8;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_10000F0B8()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  v1(0);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F0FC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  swift_release(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(void (**)(uint64_t))(v0 + 48);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000F170(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_10000F1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v8[24] = v13;
  v8[25] = v14;
  v8[22] = a7;
  v8[23] = a8;
  v8[21] = a5;
  v8[11] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[26] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[27] = v10;
  v8[28] = v11;
  return swift_task_switch(sub_10000F23C, v10, v11);
}

uint64_t sub_10000F23C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  __int128 v6;
  __int128 v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  if (qword_100082EC8 != -1)
    swift_once(&qword_100082EC8, sub_10000D61C);
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = sub_100015398();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)((_QWORD *)(v0 + 96), &type metadata for CRLUSDRendering.SceneConfiguration, v1, v2, &type metadata for CRLUSDRendering.SceneConfiguration, v3);
  v4 = *(_QWORD *)(v0 + 168);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 88));
  v6 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 64) = v6;
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 160);
  v7 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 32) = v7;
  v8 = *(int **)(v4 + 24);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  *(_QWORD *)(v0 + 232) = v9;
  *v9 = v0;
  v9[1] = sub_10000F388;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v11)(v0 + 16, ObjectType, *(_QWORD *)(v0 + 168));
}

uint64_t sub_10000F388()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10000F428;
  else
    v4 = sub_10000F3EC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 224));
}

uint64_t sub_10000F3EC()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 208));
  v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F428()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  swift_release(*(_QWORD *)(v0 + 208));
  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(void (**)(uint64_t))(v0 + 192);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v8[7] = v13;
  v8[8] = v14;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a4;
  v8[4] = a5;
  v9 = type metadata accessor for MainActor(0);
  v8[9] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[10] = v10;
  v8[11] = v11;
  return swift_task_switch(sub_10000F510, v10, v11);
}

uint64_t sub_10000F510()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  if (qword_100082EC8 != -1)
    swift_once(&qword_100082EC8, sub_10000D61C);
  v2 = v0[5];
  v1 = v0[6];
  v3 = sub_1000131C0(&qword_100083690);
  v4 = sub_1000151F8(&qword_100083740, (void (*)(void))sub_100015260, (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v0 + 2, v3, v2, v1, v3, v4);
  v5 = v0[4];
  ObjectType = swift_getObjectType(v0[3]);
  v7 = v0[2];
  v0[12] = v7;
  v8 = *(int **)(v5 + 40);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[13] = v9;
  *v9 = v0;
  v9[1] = sub_10000F664;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v11)(v7, ObjectType, v0[4]);
}

uint64_t sub_10000F664()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[10];
    v5 = v2[11];
    v6 = sub_10000F70C;
  }
  else
  {
    swift_bridgeObjectRelease(v2[12]);
    v4 = v2[10];
    v5 = v2[11];
    v6 = sub_10000F6D0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10000F6D0()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(void (**)(uint64_t))(v0 + 56);
  swift_errorRetain(v2);
  v3(v2);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000F784(void *a1, int a2, void *a3, void *aBlock, void (*a5)(uint64_t, unint64_t, id, void *))
{
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;

  v8 = _Block_copy(aBlock);
  v9 = a3;
  v13 = a1;
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v12 = v11;

  _Block_copy(v8);
  a5(v10, v12, v13, v8);
  _Block_release(v8);
  _Block_release(v8);
  sub_100013320(v10, v12);

}

uint64_t sub_10000F82C(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  int *v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, float);

  v8[2] = a7;
  v8[3] = a8;
  v12 = type metadata accessor for UTType(0);
  v8[4] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[5] = v13;
  v8[6] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MainActor(0);
  v8[7] = v14;
  v8[8] = static MainActor.shared.getter(v14);
  ObjectType = swift_getObjectType(a5);
  v16 = *(int **)(a6 + 48);
  v19 = (uint64_t (*)(uint64_t, uint64_t, float))((char *)v16 + *v16);
  v17 = (_QWORD *)swift_task_alloc(v16[1]);
  v8[9] = v17;
  *v17 = v8;
  v17[1] = sub_10000F8F8;
  return v19(ObjectType, a6, a1);
}

uint64_t sub_10000F8F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 72);
  v5 = *(_QWORD *)(*v2 + 56);
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = v1;
  swift_task_dealloc(v4);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  if (v1)
    v8 = sub_10000FB7C;
  else
    v8 = sub_10000F988;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_10000F988()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  CFMutableDataRef Mutable;
  __CFData *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  CGImageDestinationRef v12;
  void (*v13)(uint64_t, unint64_t, _QWORD);
  __CFData *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 64));
  if (!v1)
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 16))(0, 0xF000000000000000, 0);
    goto LABEL_11;
  }
  v2 = *(void **)(v0 + 80);
  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {
LABEL_10:
    v18 = sub_1000133A8();
    v19 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v18, 0, 0);
    *(_QWORD *)v20 = 0xD000000000000019;
    *(_QWORD *)(v20 + 8) = 0x800000010005E2E0;
    *(_BYTE *)(v20 + 16) = 0;
    swift_willThrow(v19);

    v21 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 16);
    swift_errorRetain(v19);
    v21(0, 0xF000000000000000, v19);
    swift_errorRelease(v19);
    swift_errorRelease(v19);
    goto LABEL_11;
  }
  v4 = Mutable;
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = static UTType.png.getter();
  UTType.identifier.getter(v8);
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v11 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v12 = CGImageDestinationCreateWithData(v4, v11, 1uLL, 0);

  if (!v12)
  {
    v12 = v4;
LABEL_9:

    goto LABEL_10;
  }
  CGImageDestinationAddImage(v12, (CGImageRef)v2, 0);
  if (!CGImageDestinationFinalize(v12))
  {

    goto LABEL_9;
  }
  v13 = *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 16);
  v14 = v4;
  v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v17 = v16;

  sub_100013364(v15, v17);
  v13(v15, v17, 0);
  sub_100013320(v15, v17);
  sub_100013320(v15, v17);

LABEL_11:
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000FB7C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD, unint64_t, uint64_t);

  swift_release(*(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(void (**)(_QWORD, unint64_t, uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000FC54(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v7;
  id v8;

  if (a2 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  isa = 0;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);

}

void sub_10000FD14(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD aBlock[5];
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v7 = sub_1000131C0(&qword_100083688);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = *a1;
  if (qword_100082EC0 != -1)
    swift_once(&qword_100082EC0, sub_10000D600);
  v11 = type metadata accessor for CRLUSDRendering.SceneRequest(0);
  v12 = sub_1000154CC(&qword_1000836B0, type metadata accessor for CRLUSDRendering.SceneRequest, (uint64_t)&unk_1000622E4);
  v13 = dispatch thunk of JSONEncoder.encode<A>(_:)(a4, v11, v12);
  if (!v4)
  {
    v15 = v13;
    v16 = v14;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100013320(v15, v16);
    v18 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v7);
    v19 = *(unsigned __int8 *)(v8 + 80);
    v20 = (v19 + 16) & ~v19;
    v21 = swift_allocObject(&unk_1000722B8, v20 + v9, v19 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
    aBlock[4] = sub_100013540;
    v24 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000FEF8;
    aBlock[3] = &unk_1000722D0;
    v22 = _Block_copy(aBlock);
    swift_release(v24);
    objc_msgSend(v10, "loadScene:response:", isa, v22);
    _Block_release(v22);

  }
}

void sub_10000FEF8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_10000FF4C(void **a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __int128 aBlock;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v7 = sub_1000131C0(&qword_100083688);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = *a1;
  v11 = a4[3];
  v26 = a4[2];
  v27 = v11;
  v28 = *((_QWORD *)a4 + 8);
  v12 = a4[1];
  aBlock = *a4;
  v25 = v12;
  if (qword_100082EC0 != -1)
    swift_once(&qword_100082EC0, sub_10000D600);
  v13 = sub_100013B90();
  v14 = dispatch thunk of JSONEncoder.encode<A>(_:)(&aBlock, &type metadata for CRLUSDRendering.SceneConfiguration, v13);
  if (!v4)
  {
    v16 = v14;
    v17 = v15;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100013320(v16, v17);
    v19 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v7);
    v20 = *(unsigned __int8 *)(v8 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = swift_allocObject(&unk_100072268, v21 + v9, v20 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v22 + v21, (char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
    *(_QWORD *)&v26 = sub_100013540;
    *((_QWORD *)&v26 + 1) = v22;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v25 = sub_10000FEF8;
    *((_QWORD *)&v25 + 1) = &unk_100072280;
    v23 = _Block_copy(&aBlock);
    swift_release(*((_QWORD *)&v26 + 1));
    objc_msgSend(v10, "updateScene:response:", isa, v23);
    _Block_release(v23);

  }
}

void sub_100010128(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD aBlock[5];
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v7 = sub_1000131C0(&qword_100083688);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = *a1;
  aBlock[0] = a4;
  if (qword_100082EC0 != -1)
    swift_once(&qword_100082EC0, sub_10000D600);
  v11 = sub_1000131C0(&qword_100083690);
  v12 = sub_1000151F8(&qword_100083698, (void (*)(void))sub_1000134F0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v13 = dispatch thunk of JSONEncoder.encode<A>(_:)(aBlock, v11, v12);
  if (!v4)
  {
    v15 = v13;
    v16 = v14;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100013320(v15, v16);
    v18 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v7);
    v19 = *(unsigned __int8 *)(v8 + 80);
    v20 = (v19 + 16) & ~v19;
    v21 = swift_allocObject(&unk_100072218, v20 + v9, v19 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
    aBlock[4] = sub_100013540;
    v24 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000FEF8;
    aBlock[3] = &unk_100072230;
    v22 = _Block_copy(aBlock);
    swift_release(v24);
    objc_msgSend(v10, "performActions:response:", isa, v22);
    _Block_release(v22);

  }
}

void sub_100010314(void **a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v6 = sub_1000131C0(&qword_100083668);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100072178, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1000132B4;
  v16 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000105D4;
  aBlock[3] = &unk_100072190;
  v13 = _Block_copy(aBlock);
  swift_release(v16);
  *(float *)&v14 = a3;
  objc_msgSend(v9, "takeSnapshotAt:response:", v13, v14);
  _Block_release(v13);
}

void sub_100010460(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const __CFData *isa;
  CGImageSource *v7;
  CGImageRef ImageAtIndex;
  CGImage *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      v16 = a3;
      swift_errorRetain(a3);
      v3 = sub_1000131C0(&qword_100083668);
      CheckedContinuation.resume(throwing:)(&v16, v3);
    }
    else
    {
      v16 = 0;
      v11 = sub_1000131C0(&qword_100083668);
      CheckedContinuation.resume(returning:)(&v16, v11);
    }
  }
  else
  {
    sub_100013364(a1, a2);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v7 = CGImageSourceCreateWithData(isa, 0);

    if (v7)
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (ImageAtIndex)
      {
        v16 = (uint64_t)ImageAtIndex;
        v9 = ImageAtIndex;
        v10 = sub_1000131C0(&qword_100083668);
        CheckedContinuation.resume(returning:)(&v16, v10);
        sub_10001330C(a1, a2);

        return;
      }

    }
    v12 = sub_1000133A8();
    v13 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v12, 0, 0);
    *(_QWORD *)v14 = 0xD000000000000019;
    *(_QWORD *)(v14 + 8) = 0x800000010005E130;
    *(_BYTE *)(v14 + 16) = 0;
    v16 = v13;
    v15 = sub_1000131C0(&qword_100083668);
    CheckedContinuation.resume(throwing:)(&v16, v15);
    sub_10001330C(a1, a2);
  }
}

uint64_t sub_1000105D4(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void (*v6)(void *, unint64_t, void *);
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v4 = a2;
  v6 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain(v5);
    v7 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;

  }
  else
  {
    swift_retain(v5);
    v9 = 0xF000000000000000;
  }
  v10 = a3;
  v6(v4, v9, a3);

  sub_10001330C((uint64_t)v4, v9);
  return swift_release(v5);
}

uint64_t sub_100010668()
{
  return sub_1000129E8(&OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared24AsyncRendererSenderProxy_uuid);
}

uint64_t sub_100010674@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared24AsyncRendererSenderProxy_uuid;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000106B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100010724, v4, v5);
}

uint64_t sub_100010724()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;
  uint64_t (*v4)(uint64_t, unint64_t, void (*)(void **, uint64_t), int8x16_t *);

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[3].i64[1] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v4 = (uint64_t (*)(uint64_t, unint64_t, void (*)(void **, uint64_t), int8x16_t *))((char *)&dword_100083680 + dword_100083680);
  v2 = (int8x16_t **)swift_task_alloc(unk_100083684);
  v0[4].i64[0] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000107CC;
  return v4(0x6E65635364616F6CLL, 0xED0000293A5F2865, sub_100013BE0, v1);
}

uint64_t sub_1000107CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 56);
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_1000163AC;
  else
    v5 = sub_10001633C;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_10001083C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_1000108A8, v4, v5);
}

uint64_t sub_1000108A8()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;
  uint64_t (*v4)(uint64_t, unint64_t, void (*)(void **, uint64_t), int8x16_t *);

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[3].i64[1] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v4 = (uint64_t (*)(uint64_t, unint64_t, void (*)(void **, uint64_t), int8x16_t *))((char *)&dword_100083680 + dword_100083680);
  v2 = (int8x16_t **)swift_task_alloc(unk_100083684);
  v0[4].i64[0] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_100010950;
  return v4(0x6353657461647075, 0xEF293A5F28656E65, sub_100013B78, v1);
}

uint64_t sub_100010950()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 56);
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_1000109F4;
  else
    v5 = sub_1000109C0;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1000109C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000109F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010A28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100010A94, v4, v5);
}

uint64_t sub_100010A94()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;
  uint64_t (*v4)(unint64_t, unint64_t, void (*)(void **, uint64_t), int8x16_t *);

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[3].i64[1] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v4 = (uint64_t (*)(unint64_t, unint64_t, void (*)(void **, uint64_t), int8x16_t *))((char *)&dword_100083680 + dword_100083680);
  v2 = (int8x16_t **)swift_task_alloc(unk_100083684);
  v0[4].i64[0] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_1000107CC;
  return v4(0xD000000000000012, 0x800000010005E150, sub_1000133EC, v1);
}

uint64_t sub_100010B34(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v1;
  *(float *)(v2 + 80) = a1;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 24) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = v5;
  return swift_task_switch(sub_100010BA4, v4, v5);
}

uint64_t sub_100010BA4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(unint64_t, unint64_t, void (*)(void **, uint64_t), uint64_t);

  v1 = *(_DWORD *)(v0 + 80);
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 48) = v2;
  *(_DWORD *)(v2 + 16) = v1;
  v5 = (uint64_t (*)(unint64_t, unint64_t, void (*)(void **, uint64_t), uint64_t))((char *)&dword_100083658 + dword_100083658);
  v3 = (_QWORD *)swift_task_alloc(unk_10008365C);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_100010C40;
  return v5(0xD000000000000011, 0x800000010005E0D0, sub_100012BB8, v2);
}

uint64_t sub_100010C40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 56);
  *(_QWORD *)(*(_QWORD *)v2 + 64) = v1;
  swift_task_dealloc(v5);
  v6 = v4[6];
  if (v1)
  {
    swift_task_dealloc(v6);
    v7 = v4[4];
    v8 = v4[5];
    v9 = sub_100010CF8;
  }
  else
  {
    v4[9] = a1;
    swift_task_dealloc(v6);
    v7 = v4[4];
    v8 = v4[5];
    v9 = sub_100010CC0;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_100010CC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72));
}

uint64_t sub_100010CF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010D2C(char *a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;

  v32 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v3[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared29RendererDelegateReceiverProxy_delegate];
  result = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared29RendererDelegateReceiverProxy_delegate]);
  if (result)
  {
    v14 = result;
    v31 = *((_QWORD *)v12 + 1);
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
    v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v30 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v16(v30, v32, v6);
    type metadata accessor for MainActor(0);
    swift_unknownObjectRetain(v14);
    v32 = v3;
    v17 = sub_100013364(a2, a3);
    v18 = static MainActor.shared.getter(v17);
    v19 = *(unsigned __int8 *)(v7 + 80);
    v20 = (v19 + 48) & ~v19;
    v29 = a3;
    v21 = (v8 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v23 = (char *)swift_allocObject(&unk_100072498, v22 + 16, v19 | 7);
    *((_QWORD *)v23 + 2) = v18;
    *((_QWORD *)v23 + 3) = &protocol witness table for MainActor;
    v24 = v30;
    v25 = v31;
    *((_QWORD *)v23 + 4) = v14;
    *((_QWORD *)v23 + 5) = v25;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v23[v20], v24, v6);
    *(_QWORD *)&v23[v21] = v32;
    v26 = (uint64_t *)&v23[v22];
    v27 = v29;
    *v26 = a2;
    v26[1] = v27;
    v28 = sub_10002E594((uint64_t)v11, (uint64_t)&unk_100083708, (uint64_t)v23);
    swift_release(v28);
    return swift_unknownObjectRelease(v14);
  }
  return result;
}

uint64_t sub_100010F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v8[22] = a8;
  v8[23] = v17;
  v8[20] = a4;
  v8[21] = a6;
  v9 = type metadata accessor for UUID(0);
  v8[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[25] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v8[26] = v11;
  v8[27] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000131C0(&qword_1000836D0);
  v8[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MainActor(0);
  v8[29] = v13;
  v8[30] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  return swift_task_switch(sub_100010FE0, v14, v15);
}

uint64_t sub_100010FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  swift_release(*(_QWORD *)(v0 + 240));
  if (qword_100082EC8 != -1)
    swift_once(&qword_100082EC8, sub_10000D61C);
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = sub_100014B8C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)((_QWORD *)(v0 + 96), &type metadata for CRLUSDRendering.RendererState, v1, v2, &type metadata for CRLUSDRendering.RendererState, v3);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 216);
  v19 = v5;
  v20 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 168);
  sub_100013C20(v0 + 96, v0 + 16);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v9, v6);
  swift_unknownObjectRetain(v8);
  v11 = sub_100014DFC((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100014E34);
  v12 = static MainActor.shared.getter(v11);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 40) & ~v13;
  v15 = (v20 + v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (char *)swift_allocObject(&unk_1000724C0, v15 + 56, v13 | 0xF);
  *((_QWORD *)v16 + 2) = v12;
  *((_QWORD *)v16 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v16 + 4) = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(&v16[v14], v19, v6);
  sub_100013C20(v0 + 16, (uint64_t)&v16[v15]);
  v17 = sub_10002E594(v4, (uint64_t)&unk_100083710, (uint64_t)v16);
  swift_release(v17);
  sub_100014DFC((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100014BEC);
  swift_task_dealloc(v4);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011300(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v44 = a3;
  v45 = a4;
  v43 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v5[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared29RendererDelegateReceiverProxy_delegate];
  result = swift_unknownObjectWeakLoadStrong(&v5[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared29RendererDelegateReceiverProxy_delegate]);
  if (result)
  {
    v16 = result;
    v41 = *((_QWORD *)v14 + 1);
    v17 = type metadata accessor for TaskPriority(0);
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
    v42 = v13;
    v18(v13, 1, 1, v17);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v39 = v8;
    v40 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19(v40, a1, v8);
    type metadata accessor for MainActor(0);
    swift_unknownObjectRetain(v16);
    v38 = v5;
    v21 = v43;
    v20 = v44;
    sub_100013364(v43, v44);
    v22 = swift_retain(a5);
    v23 = static MainActor.shared.getter(v22);
    v24 = *(unsigned __int8 *)(v9 + 80);
    v37 = a5;
    v25 = (v24 + 48) & ~v24;
    v26 = (v10 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
    v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
    v29 = (char *)swift_allocObject(&unk_100072470, v28 + 16, v24 | 7);
    *((_QWORD *)v29 + 2) = v23;
    *((_QWORD *)v29 + 3) = &protocol witness table for MainActor;
    v30 = v40;
    v31 = v41;
    *((_QWORD *)v29 + 4) = v16;
    *((_QWORD *)v29 + 5) = v31;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v29[v25], v30, v39);
    *(_QWORD *)&v29[v26] = v38;
    v32 = (uint64_t *)&v29[v27];
    *v32 = v21;
    v32[1] = v20;
    v33 = &v29[v28];
    v34 = v37;
    *(_QWORD *)v33 = v45;
    *((_QWORD *)v33 + 1) = v34;
    v35 = sub_10002E594((uint64_t)v42, (uint64_t)&unk_1000836F0, (uint64_t)v29);
    swift_release(v35);
    return swift_unknownObjectRelease(v16);
  }
  return result;
}

uint64_t sub_100011514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 168) = v14;
  *(_OWORD *)(v8 + 152) = v13;
  *(_QWORD *)(v8 + 136) = a6;
  *(_QWORD *)(v8 + 144) = a8;
  *(_QWORD *)(v8 + 72) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 176) = v9;
  *(_QWORD *)(v8 + 184) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 192) = v10;
  *(_QWORD *)(v8 + 200) = v11;
  return swift_task_switch(sub_10001159C, v10, v11);
}

uint64_t sub_10001159C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_100082EC8 != -1)
    swift_once(&qword_100082EC8, sub_10000D61C);
  v1 = v0[18];
  v2 = v0[19];
  v3 = sub_100014B8C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v0 + 10, &type metadata for CRLUSDRendering.RendererState, v1, v2, &type metadata for CRLUSDRendering.RendererState, v3);
  v4 = v0[22];
  v5 = sub_100013C20((uint64_t)(v0 + 10), (uint64_t)(v0 + 2));
  v0[26] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v0[27] = v6;
  v0[28] = v7;
  return swift_task_switch(sub_1000116C4, v6, v7);
}

uint64_t sub_1000116C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v6;

  v1 = v0[17];
  v2 = v0[9];
  v3 = (_QWORD *)swift_task_alloc(48);
  v0[29] = v3;
  v3[2] = v1;
  v3[3] = v2;
  v3[4] = v0 + 2;
  v6 = (char *)&dword_1000836C0 + dword_1000836C0;
  v4 = (_QWORD *)swift_task_alloc(unk_1000836C4);
  v0[30] = v4;
  *v4 = v0;
  v4[1] = sub_100011774;
  return ((uint64_t (*)(unint64_t, unint64_t, void (*)(id *, uint64_t), _QWORD *))v6)(0xD00000000000002DLL, 0x800000010005E230, sub_100014BD0, v3);
}

uint64_t sub_100011774()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v2[29]);
  if (v0)
    v4 = sub_100011864;
  else
    v4 = sub_1000117DC;
  return swift_task_switch(v4, v2[27], v2[28]);
}

uint64_t sub_1000117DC()
{
  _QWORD *v0;

  swift_release(v0[26]);
  sub_100014DFC(v0 + 2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100014BEC);
  return swift_task_switch(sub_100011828, v0[24], v0[25]);
}

uint64_t sub_100011828()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 184));
  v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011864()
{
  _QWORD *v0;

  swift_release(v0[26]);
  return swift_task_switch(sub_10001189C, v0[24], v0[25]);
}

uint64_t sub_10001189C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  swift_release(*(_QWORD *)(v0 + 184));
  sub_100014DFC((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100014BEC);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(void (**)(uint64_t))(v0 + 160);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011A2C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  id v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a6;
  v40 = a7;
  v36 = a4;
  v37 = a5;
  v38 = a2;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v7
      + OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared29RendererDelegateReceiverProxy_delegate;
  result = swift_unknownObjectWeakLoadStrong(v7+ OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared29RendererDelegateReceiverProxy_delegate);
  if (result)
  {
    v19 = result;
    v35 = *(_QWORD *)(v17 + 8);
    v20 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v16, 1, 1, v20);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
    type metadata accessor for MainActor(0);
    v34 = a3;
    v36 = v36;
    v37 = v37;
    swift_unknownObjectRetain(v19);
    v21 = v40;
    v22 = swift_retain(v40);
    v23 = static MainActor.shared.getter(v22);
    v24 = *(unsigned __int8 *)(v11 + 80);
    v25 = (v24 + 80) & ~v24;
    v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = (char *)swift_allocObject(&unk_100072420, v26 + 16, v24 | 7);
    *((_QWORD *)v27 + 2) = v23;
    *((_QWORD *)v27 + 3) = &protocol witness table for MainActor;
    v28 = v34;
    *((_QWORD *)v27 + 4) = v38;
    *((_QWORD *)v27 + 5) = v28;
    v29 = v37;
    *((_QWORD *)v27 + 6) = v36;
    *((_QWORD *)v27 + 7) = v29;
    v30 = v35;
    *((_QWORD *)v27 + 8) = v19;
    *((_QWORD *)v27 + 9) = v30;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v27[v25], v13, v10);
    v31 = &v27[v26];
    *(_QWORD *)v31 = v39;
    *((_QWORD *)v31 + 1) = v21;
    v32 = sub_10002E594((uint64_t)v16, (uint64_t)&unk_1000836E0, (uint64_t)v27);
    swift_release(v32);
    return swift_unknownObjectRelease(v19);
  }
  return result;
}

uint64_t sub_100011C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 72) = v14;
  *(_OWORD *)(v8 + 56) = v13;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 80) = v9;
  *(_QWORD *)(v8 + 88) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 96) = v10;
  *(_QWORD *)(v8 + 104) = v11;
  return swift_task_switch(sub_100011CBC, v10, v11);
}

uint64_t sub_100011CBC()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = MTLCreateSystemDefaultDevice();
  *(_QWORD *)(v0 + 112) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = *(id *)(v0 + 16);
    if (objc_msgSend(v1, "registryID") == v3)
    {
      v4 = *(void **)(v0 + 32);
      v5 = *(void **)(v0 + 40);
      v6 = *(void **)(v0 + 24);
      swift_unknownObjectRetain(v2);
      *(_QWORD *)(v0 + 120) = sub_10004D7C8(v2, (char *)v6, (uint64_t)v4, (uint64_t)v5);
      *(_QWORD *)(v0 + 128) = v7;
      *(_QWORD *)(v0 + 136) = v8;
      *(_QWORD *)(v0 + 144) = v9;
      v10 = *(void **)(v0 + 32);
      v15 = *(_QWORD *)(v0 + 80);

      v16 = swift_unknownObjectRelease(v2);
      *(_QWORD *)(v0 + 152) = static MainActor.shared.getter(v16);
      v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
      *(_QWORD *)(v0 + 160) = v17;
      *(_QWORD *)(v0 + 168) = v18;
      return swift_task_switch(sub_100011E74, v17, v18);
    }
    swift_unknownObjectRelease(v2);
  }
  swift_release(*(_QWORD *)(v0 + 88));
  v11 = sub_1000133A8();
  v12 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v11, 0, 0);
  *(_QWORD *)v13 = 0xD00000000000002FLL;
  *(_QWORD *)(v13 + 8) = 0x800000010005E1D0;
  *(_BYTE *)(v13 + 16) = 5;
  swift_willThrow(v12);
  v14 = *(void (**)(uint64_t))(v0 + 64);
  swift_errorRetain(v12);
  v14(v12);
  swift_errorRelease(v12);
  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011E74()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  int8x16_t v3;
  _QWORD *v4;
  uint64_t (*v6)(unint64_t, unint64_t, void (*)(id *, uint64_t), uint64_t);

  v1 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 176) = v1;
  v2 = *(_OWORD *)(v0 + 136);
  v3 = *(int8x16_t *)(v0 + 48);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 120);
  *(_OWORD *)(v1 + 32) = v2;
  *(int8x16_t *)(v1 + 48) = vextq_s8(v3, v3, 8uLL);
  v6 = (uint64_t (*)(unint64_t, unint64_t, void (*)(id *, uint64_t), uint64_t))((char *)&dword_1000836C0 + dword_1000836C0);
  v4 = (_QWORD *)swift_task_alloc(unk_1000836C4);
  *(_QWORD *)(v0 + 184) = v4;
  *v4 = v0;
  v4[1] = sub_100011F20;
  return v6(0xD00000000000002CLL, 0x800000010005E200, sub_1000149B4, v1);
}

uint64_t sub_100011F20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 176);
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_10001204C;
  else
    v5 = sub_100011F90;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 168));
}

uint64_t sub_100011F90()
{
  _QWORD *v0;

  swift_release(v0[19]);
  return swift_task_switch(sub_100011FC8, v0[12], v0[13]);
}

uint64_t sub_100011FC8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(void (**)(_QWORD))(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 88));
  v6(0);
  swift_unknownObjectRelease(v4);
  swift_unknownObjectRelease(v3);
  swift_unknownObjectRelease(v1);

  swift_unknownObjectRelease(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001204C()
{
  _QWORD *v0;

  swift_release(v0[19]);
  return swift_task_switch(sub_100012084, v0[12], v0[13]);
}

uint64_t sub_100012084()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_unknownObjectRelease(v4);
  swift_unknownObjectRelease(v3);
  swift_unknownObjectRelease(v1);

  swift_unknownObjectRelease(v5);
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(void (**)(uint64_t))(v0 + 64);
  swift_errorRetain(v6);
  v7(v6);
  swift_errorRelease(v6);
  swift_errorRelease(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10001227C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000122C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[5] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[6] = v8;
  v6[7] = v9;
  return swift_task_switch(sub_100012330, v8, v9);
}

uint64_t sub_100012330()
{
  int8x16_t *v0;
  uint64_t v1;
  int8x16_t *v2;
  int8x16_t **v3;
  uint64_t (*v5)(unint64_t, unint64_t, uint64_t (*)(void **, uint64_t), int8x16_t *);

  v1 = v0[2].i64[0];
  v2 = (int8x16_t *)swift_task_alloc(48);
  v0[4].i64[0] = (uint64_t)v2;
  v2[1] = vextq_s8(v0[1], v0[1], 8uLL);
  v2[2].i64[0] = v1;
  v5 = (uint64_t (*)(unint64_t, unint64_t, uint64_t (*)(void **, uint64_t), int8x16_t *))((char *)&dword_1000836C0 + dword_1000836C0);
  v3 = (int8x16_t **)swift_task_alloc(unk_1000836C4);
  v0[4].i64[1] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (int8x16_t *)sub_1000123D8;
  return v5(0xD00000000000001ELL, 0x800000010005E170, sub_100013C04, v2);
}

uint64_t sub_1000123D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 64);
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_100012478;
  else
    v5 = sub_100012448;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100012448()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100012478()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000124B4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v7;
  NSUUID v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  Class isa;
  uint64_t v17;
  _QWORD v18[8];

  v7 = *a1;
  v8.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100013C20(a5, (uint64_t)v18);
  if (qword_100082EC0 != -1)
    swift_once(&qword_100082EC0, sub_10000D600);
  v9 = sub_100013C5C();
  v10 = dispatch thunk of JSONEncoder.encode<A>(_:)(v18, &type metadata for CRLUSDRendering.RendererState, v9);
  if (v5)
  {

    v18[0] = v5;
    v12 = sub_1000131C0(&qword_100083688);
    return CheckedContinuation.resume(throwing:)(v18, v12);
  }
  else
  {
    v14 = v10;
    v15 = v11;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100013320(v14, v15);
    objc_msgSend(v7, "rendererStateChanged:state:", v8.super.isa, isa);

    v17 = sub_1000131C0(&qword_100083688);
    return CheckedContinuation.resume(returning:)(v17, v17);
  }
}

void sub_1000125EC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSUUID v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;
  id v26;

  v23 = a2;
  v8 = sub_1000131C0(&qword_100083688);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v26 = *a1;
  v11.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_100013C20(a5, (uint64_t)aBlock);
  if (qword_100082EC0 != -1)
    swift_once(&qword_100082EC0, sub_10000D600);
  v12 = sub_100013C5C();
  v13 = dispatch thunk of JSONEncoder.encode<A>(_:)(aBlock, &type metadata for CRLUSDRendering.RendererState, v12);
  if (v5)
  {

  }
  else
  {
    v15 = v13;
    v16 = v14;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100013320(v15, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v8);
    v18 = *(unsigned __int8 *)(v9 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_100072358, v19 + v10, v18 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v20 + v19, (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    aBlock[4] = sub_100013540;
    v25 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000FEF8;
    aBlock[3] = &unk_100072370;
    v21 = _Block_copy(aBlock);
    swift_release(v25);
    objc_msgSend(v26, "rendererStateChangedWithAcknowledge:state:response:", v11.super.isa, isa, v21);
    _Block_release(v21);

  }
}

void sub_1000127D8(id *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Class isa;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v25 = a6;
  v20 = a5;
  v21 = a2;
  v9 = sub_1000131C0(&qword_100083688);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a1;
  v23 = objc_msgSend((id)swift_unknownObjectRetain(a3), "device");
  v22 = objc_msgSend(v23, "registryID");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(a4, "newSharedEventHandle");
  v15 = objc_msgSend(v20, "newSharedEventHandle");
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_1000723A8, v17 + v11, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + v17, v12, v9);
  aBlock[4] = sub_100013540;
  v27 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000FEF8;
  aBlock[3] = &unk_1000723C0;
  v19 = _Block_copy(aBlock);
  swift_release(v27);
  objc_msgSend(v24, "rendererSharedTextureChangedXPC:deviceID:textureHandle:rendererFrameCountHandle:displayerFrameCountHandle:response:", isa, v22, v25, v14, v15, v19);
  _Block_release(v19);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(v23);

}

uint64_t sub_1000129B8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1000129DC()
{
  return sub_1000129E8(&OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared31AsyncRealitySnapshotSenderProxy_uuid);
}

uint64_t sub_1000129E8(_QWORD *a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  swift_unknownObjectRelease(v1[2]);
  v3 = (char *)v1 + *a1;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48), *(unsigned __int16 *)(*v1 + 52));
}

uint64_t variable initialization expression of CRLWeakWrapper.value()
{
  return 0;
}

uint64_t type metadata accessor for CRLUSDRendererExtensionShared.AsyncRendererReceiverProxy()
{
  return objc_opt_self(_TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy);
}

uint64_t sub_100012A68()
{
  return type metadata accessor for CRLUSDRendererExtensionShared.AsyncRendererSenderProxy(0);
}

uint64_t type metadata accessor for CRLUSDRendererExtensionShared.AsyncRendererSenderProxy(uint64_t a1)
{
  return sub_100012AE4(a1, qword_100083188, (uint64_t)&nominal type descriptor for CRLUSDRendererExtensionShared.AsyncRendererSenderProxy);
}

uint64_t type metadata accessor for CRLUSDRendererExtensionShared.RendererDelegateReceiverProxy()
{
  return objc_opt_self(_TtCO20USDRendererExtension29CRLUSDRendererExtensionShared29RendererDelegateReceiverProxy);
}

uint64_t type metadata accessor for CRLUSDRendererExtensionShared.RendererDelegateSenderProxy()
{
  return objc_opt_self(_TtCO20USDRendererExtension29CRLUSDRendererExtensionShared27RendererDelegateSenderProxy);
}

uint64_t sub_100012AC8()
{
  return type metadata accessor for CRLUSDRendererExtensionShared.AsyncRealitySnapshotSenderProxy(0);
}

uint64_t type metadata accessor for CRLUSDRendererExtensionShared.AsyncRealitySnapshotSenderProxy(uint64_t a1)
{
  return sub_100012AE4(a1, qword_100083370, (uint64_t)&nominal type descriptor for CRLUSDRendererExtensionShared.AsyncRealitySnapshotSenderProxy);
}

uint64_t sub_100012AE4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100012B18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_10001601C(a1, &qword_100083520, (uint64_t)&unk_100072050);
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
  sub_10001601C(a1, &qword_100083528, (uint64_t)&unk_100072080);
}

void sub_100012BB8(void **a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010314(a1, a2, *(float *)(v2 + 16));
}

_DWORD *sub_100012BD0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100012BDC(uint64_t a1, uint64_t a2)
{
  return sub_100012D24(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100012BE8(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100012C5C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100012CD8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100012D18(uint64_t a1, uint64_t a2)
{
  return sub_100012D24(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100012D24(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100012D60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100012DA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

BOOL sub_100012E10(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

_DWORD *sub_100012E24@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_100012E34(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

void sub_100012E40(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_100012E48@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_100012E5C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_100012E70@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100012E84(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_100012EB4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_100012EE0@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_100012F04(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_100012F18(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_100012F2C(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_100012F40@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100012F54(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100012F68(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100012F7C()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100012F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_DWORD *sub_100012FA4(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_100012FB8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

BOOL sub_100013040(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100013054@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;
  uint64_t result;

  v4 = sub_100015D40(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100013090@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000130D4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000130FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000154CC(&qword_100083868, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&unk_10006128C);
  v3 = sub_1000154CC(&qword_100083870, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&unk_1000611A0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100013180(uint64_t a1)
{
  uint64_t v1;

  return sub_10000E2EC(a1, **(_QWORD **)(v1 + 16), *(void (**)(_QWORD *, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), &qword_100083668, (uint64_t)&unk_100072128, (uint64_t)sub_10001320C, (uint64_t)&unk_100072140);
}

uint64_t sub_1000131C0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100013200()
{
  return sub_100013D04(&qword_100083668);
}

uint64_t sub_10001320C(uint64_t a1)
{
  return sub_10001345C(a1, &qword_100083668);
}

uint64_t sub_100013218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100013228(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013230(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10001326C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083670;
  if (!qword_100083670)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100083670);
  }
  return result;
}

uint64_t sub_1000132A8()
{
  return sub_100013D04(&qword_100083668);
}

void sub_1000132B4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1000131C0(&qword_100083668);
  sub_100010460(a1, a2, a3);
}

uint64_t sub_10001330C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100013320(result, a2);
  return result;
}

uint64_t sub_100013320(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100013364(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000133A8()
{
  unint64_t result;

  result = qword_100085380;
  if (!qword_100085380)
  {
    result = swift_getWitnessTable(&unk_100061D24, &type metadata for CRLUSDRendering.RendererError);
    atomic_store(result, (unint64_t *)&qword_100085380);
  }
  return result;
}

void sub_1000133EC(void **a1, uint64_t a2)
{
  uint64_t v2;

  sub_100010128(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100013404(uint64_t a1)
{
  uint64_t v1;

  return sub_10000E2EC(a1, **(_QWORD **)(v1 + 16), *(void (**)(_QWORD *, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), &qword_100083688, (uint64_t)&unk_1000721C8, (uint64_t)sub_100013450, (uint64_t)&unk_1000721E0);
}

uint64_t sub_100013444()
{
  return sub_100013D04(&qword_100083688);
}

uint64_t sub_100013450(uint64_t a1)
{
  return sub_10001345C(a1, &qword_100083688);
}

uint64_t sub_10001345C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000131C0(a2) - 8) + 80);
  return sub_10000E4EC(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1000134AC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000134F0()
{
  unint64_t result;

  result = qword_1000836A0;
  if (!qword_1000836A0)
  {
    result = swift_getWitnessTable(&unk_100062254, &type metadata for CRLUSDRendering.SceneAction);
    atomic_store(result, (unint64_t *)&qword_1000836A0);
  }
  return result;
}

uint64_t sub_100013534()
{
  return sub_100013D04(&qword_100083688);
}

void sub_100013544(uint64_t a1)
{
  sub_1000131C0(&qword_100083688);
  sub_10000EAE8(a1);
}

uint64_t sub_100013584(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x800000010005E330;
    if (a2 == 0x800000010005E330)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010005E330, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x656E6E6F63736964 && a2 == 0xEC00000064657463)
  {
    v6 = 0xEC00000064657463;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E6E6F63736964, 0xEC00000064657463, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000010005E350)
  {
    swift_bridgeObjectRelease(0x800000010005E350);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010005E350, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_1000136E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;

  v40 = sub_1000131C0(&qword_100083800);
  v42 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin();
  v44 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1000131C0(&qword_100083808);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin();
  v43 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000131C0(&qword_100083810);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000131C0(&qword_100083818);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v45 = a1;
  v14 = sub_100015BEC(a1, v12);
  v15 = sub_100015C10();
  v16 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys, v15, v12, v13);
  if (!v16)
  {
    v17 = v5;
    v38 = v4;
    v19 = v43;
    v18 = v44;
    v46 = v9;
    v20 = KeyedDecodingContainer.allKeys.getter(v8);
    v21 = v20;
    if (*(_QWORD *)(v20 + 16) == 1)
    {
      if (*(_BYTE *)(v20 + 32))
      {
        if (*(_BYTE *)(v20 + 32) == 1)
        {
          v48 = 1;
          v22 = sub_100015CB8();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys, &v48, v8, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys, v22);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v41);
          swift_bridgeObjectRelease(v21);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v8);
          v14 = 0;
        }
        else
        {
          v49 = 2;
          v31 = sub_100015C74();
          v32 = v8;
          v33 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys, &v49, v8, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys, v31);
          v35 = v40;
          v14 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v33, v40);
          v36 = v46;
          (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v35);
          swift_bridgeObjectRelease(v21);
          (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v32);
        }
      }
      else
      {
        v47 = 0;
        v30 = sub_100015CFC();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys, &v47, v8, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys, v30);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v38);
        swift_bridgeObjectRelease(v21);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v8);
        v14 = 0;
      }
    }
    else
    {
      v14 = v11;
      v23 = type metadata accessor for DecodingError(0);
      swift_allocError(v23, &protocol witness table for DecodingError, 0, 0);
      v24 = v8;
      v25 = v21;
      v27 = v26;
      sub_1000131C0(&qword_100083828);
      *v27 = &type metadata for CRLUSDRendererExtensionShared.ExtensionError;
      v28 = KeyedDecodingContainer.codingPath.getter(v24);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v28, 0xD00000000000002BLL, 0x800000010005E300, 0);
      v29 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v23);
      swift_willThrow(v29);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v24);
    }
  }
  sub_100015C54(v45);
  return v14;
}

void sub_100013B78(void **a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000FF4C(a1, a2, *(_QWORD *)(v2 + 16), *(__int128 **)(v2 + 24));
}

unint64_t sub_100013B90()
{
  unint64_t result;

  result = qword_1000836A8;
  if (!qword_1000836A8)
  {
    result = swift_getWitnessTable(&unk_100061EE4, &type metadata for CRLUSDRendering.SceneConfiguration);
    atomic_store(result, (unint64_t *)&qword_1000836A8);
  }
  return result;
}

uint64_t sub_100013BD4()
{
  return sub_100013D04(&qword_100083688);
}

void sub_100013BE0(void **a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000FD14(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100013BF8()
{
  return sub_100013D04(&qword_100083688);
}

uint64_t sub_100013C04(void **a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1000124B4(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100013C20(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CRLUSDRendering.SceneDescription(a2, a1);
  return a2;
}

unint64_t sub_100013C5C()
{
  unint64_t result;

  result = qword_1000836C8;
  if (!qword_1000836C8)
  {
    result = swift_getWitnessTable(&unk_10006202C, &type metadata for CRLUSDRendering.RendererState);
    atomic_store(result, (unint64_t *)&qword_1000836C8);
  }
  return result;
}

uint64_t sub_100013CA0(uint64_t a1)
{
  uint64_t v1;

  return sub_10000E2EC(a1, **(_QWORD **)(v1 + 16), *(void (**)(_QWORD *, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), &qword_100083688, (uint64_t)&unk_100072308, (uint64_t)sub_100013450, (uint64_t)&unk_100072320);
}

uint64_t sub_100013CE0()
{
  return sub_100013D04(&qword_100083688);
}

uint64_t sub_100013CEC()
{
  return sub_100013D04(&qword_100083688);
}

uint64_t sub_100013CF8()
{
  return sub_100013D04(&qword_100083688);
}

uint64_t sub_100013D04(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_1000131C0(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

void sub_100013D60(uint64_t a1)
{
  uint64_t v1;

  sub_10000F170(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100013D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100013E1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for UUID(0);
  v3 = v1[4];
  v10 = v1[3];
  v11 = v1[2];
  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = (_QWORD *)swift_task_alloc(dword_1000836DC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001634C;
  return sub_100011C30(a1, v11, v10, v3, v4, v5, v6, v7);
}

uint64_t sub_100013EF8(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  int v29;
  Class isa;
  void *v31;
  uint64_t v32;

  v4 = sub_1000131C0(&qword_100083780);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - v8;
  v10 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_100072628, 24, 7);
  *(_QWORD *)(v13 + 16) = a2;
  v14 = a1 + OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer;
  Strong = swift_unknownObjectWeakLoadStrong(a1+ OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer);
  if (Strong)
  {
    v16 = Strong;
    v17 = *(_QWORD *)(v14 + 8);
    v18 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 1, 1, v18);
    type metadata accessor for MainActor(0);
    _Block_copy(a2);
    swift_retain(v13);
    v19 = swift_unknownObjectRetain(v16);
    v20 = static MainActor.shared.getter(v19);
    v21 = (_QWORD *)swift_allocObject(&unk_100072650, 64, 7);
    v21[2] = v20;
    v21[3] = &protocol witness table for MainActor;
    v21[4] = sub_100015548;
    v21[5] = v13;
    v21[6] = v16;
    v21[7] = v17;
    v22 = sub_10002E594((uint64_t)v12, (uint64_t)&unk_100083790, (uint64_t)v21);
    swift_release(v13);
    swift_release(v22);
    return swift_unknownObjectRelease(v16);
  }
  else
  {
    v24 = type metadata accessor for UUID(0);
    v25 = *(_QWORD *)(v24 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v9, 1, 1, v24);
    v26 = sub_10001501C();
    v27 = swift_allocError(&type metadata for CRLUSDRendererExtensionShared.ExtensionError, v26, 0, 0);
    *v28 = xmmword_100060C10;
    sub_100015550((uint64_t)v9, (uint64_t)v7);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1, v24);
    _Block_copy(a2);
    isa = 0;
    if (v29 != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v24);
    }
    v31 = (void *)_convertErrorToNSError(_:)(v27);
    ((void (**)(_QWORD, Class, void *))a2)[2](a2, isa, v31);

    swift_errorRelease(v27);
    sub_100015598((uint64_t)v9);
    return swift_release(v13);
  }
}

uint64_t sub_100014198(uint64_t a1, unint64_t a2, char *a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  void *v26;
  uint64_t v27;

  v8 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_1000725D8, 24, 7);
  *(_QWORD *)(v11 + 16) = a4;
  v12 = &a3[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer];
  Strong = swift_unknownObjectWeakLoadStrong(&a3[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer]);
  if (Strong)
  {
    v14 = Strong;
    v15 = *((_QWORD *)v12 + 1);
    v16 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
    type metadata accessor for MainActor(0);
    _Block_copy(a4);
    swift_unknownObjectRetain(v14);
    v17 = a3;
    sub_100013364(a1, a2);
    v18 = swift_retain(v11);
    v19 = static MainActor.shared.getter(v18);
    v20 = (_QWORD *)swift_allocObject(&unk_100072600, 88, 7);
    v20[2] = v19;
    v20[3] = &protocol witness table for MainActor;
    v20[4] = v14;
    v20[5] = v15;
    v20[6] = v17;
    v20[7] = a1;
    v20[8] = a2;
    v20[9] = sub_100016348;
    v20[10] = v11;
    v21 = sub_10002E594((uint64_t)v10, (uint64_t)&unk_100083770, (uint64_t)v20);
    swift_release(v11);
    swift_release(v21);
    return swift_unknownObjectRelease(v14);
  }
  else
  {
    v23 = sub_10001501C();
    v24 = swift_allocError(&type metadata for CRLUSDRendererExtensionShared.ExtensionError, v23, 0, 0);
    *v25 = xmmword_100060C10;
    _Block_copy(a4);
    v26 = (void *)_convertErrorToNSError(_:)(v24);
    ((void (**)(_QWORD, void *))a4)[2](a4, v26);

    swift_errorRelease(v24);
    return swift_release(v11);
  }
}

uint64_t sub_1000143A8(uint64_t a1, unint64_t a2, char *a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  void *v26;
  uint64_t v27;

  v8 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_100072588, 24, 7);
  *(_QWORD *)(v11 + 16) = a4;
  v12 = &a3[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer];
  Strong = swift_unknownObjectWeakLoadStrong(&a3[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer]);
  if (Strong)
  {
    v14 = Strong;
    v15 = *((_QWORD *)v12 + 1);
    v16 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
    type metadata accessor for MainActor(0);
    _Block_copy(a4);
    swift_unknownObjectRetain(v14);
    v17 = a3;
    sub_100013364(a1, a2);
    v18 = swift_retain(v11);
    v19 = static MainActor.shared.getter(v18);
    v20 = (_QWORD *)swift_allocObject(&unk_1000725B0, 88, 7);
    v20[2] = v19;
    v20[3] = &protocol witness table for MainActor;
    v20[4] = v14;
    v20[5] = v15;
    v20[6] = v17;
    v20[7] = a1;
    v20[8] = a2;
    v20[9] = sub_100016348;
    v20[10] = v11;
    v21 = sub_10002E594((uint64_t)v10, (uint64_t)&unk_100083758, (uint64_t)v20);
    swift_release(v11);
    swift_release(v21);
    return swift_unknownObjectRelease(v14);
  }
  else
  {
    v23 = sub_10001501C();
    v24 = swift_allocError(&type metadata for CRLUSDRendererExtensionShared.ExtensionError, v23, 0, 0);
    *v25 = xmmword_100060C10;
    _Block_copy(a4);
    v26 = (void *)_convertErrorToNSError(_:)(v24);
    ((void (**)(_QWORD, void *))a4)[2](a4, v26);

    swift_errorRelease(v24);
    return swift_release(v11);
  }
}

uint64_t sub_1000145B8(uint64_t a1, unint64_t a2, char *a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  void *v26;
  uint64_t v27;

  v8 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_100072538, 24, 7);
  *(_QWORD *)(v11 + 16) = a4;
  v12 = &a3[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer];
  Strong = swift_unknownObjectWeakLoadStrong(&a3[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer]);
  if (Strong)
  {
    v14 = Strong;
    v15 = *((_QWORD *)v12 + 1);
    v16 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
    type metadata accessor for MainActor(0);
    _Block_copy(a4);
    swift_unknownObjectRetain(v14);
    v17 = a3;
    sub_100013364(a1, a2);
    v18 = swift_retain(v11);
    v19 = static MainActor.shared.getter(v18);
    v20 = (_QWORD *)swift_allocObject(&unk_100072560, 88, 7);
    v20[2] = v19;
    v20[3] = &protocol witness table for MainActor;
    v20[4] = v14;
    v20[5] = v15;
    v20[6] = v17;
    v20[7] = a1;
    v20[8] = a2;
    v20[9] = sub_100016348;
    v20[10] = v11;
    v21 = sub_10002E594((uint64_t)v10, (uint64_t)&unk_100083738, (uint64_t)v20);
    swift_release(v11);
    swift_release(v21);
    return swift_unknownObjectRelease(v14);
  }
  else
  {
    v23 = sub_10001501C();
    v24 = swift_allocError(&type metadata for CRLUSDRendererExtensionShared.ExtensionError, v23, 0, 0);
    *v25 = xmmword_100060C10;
    _Block_copy(a4);
    v26 = (void *)_convertErrorToNSError(_:)(v24);
    ((void (**)(_QWORD, void *))a4)[2](a4, v26);

    swift_errorRelease(v24);
    return swift_release(v11);
  }
}

uint64_t sub_1000147C8(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD), float a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  void *v23;
  uint64_t v24;

  v6 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_1000724E8, 24, 7);
  *(_QWORD *)(v9 + 16) = a2;
  v10 = a1 + OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer;
  Strong = swift_unknownObjectWeakLoadStrong(a1+ OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer);
  if (Strong)
  {
    v12 = Strong;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
    type metadata accessor for MainActor(0);
    _Block_copy(a2);
    swift_unknownObjectRetain(v12);
    v15 = swift_retain(v9);
    v16 = static MainActor.shared.getter(v15);
    v17 = swift_allocObject(&unk_100072510, 72, 7);
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = &protocol witness table for MainActor;
    *(_QWORD *)(v17 + 32) = v12;
    *(_QWORD *)(v17 + 40) = v13;
    *(float *)(v17 + 48) = a3;
    *(_QWORD *)(v17 + 56) = sub_100015014;
    *(_QWORD *)(v17 + 64) = v9;
    v18 = sub_10002E594((uint64_t)v8, (uint64_t)&unk_100083728, v17);
    swift_release(v9);
    swift_release(v18);
    return swift_unknownObjectRelease(v12);
  }
  else
  {
    v20 = sub_10001501C();
    v21 = swift_allocError(&type metadata for CRLUSDRendererExtensionShared.ExtensionError, v20, 0, 0);
    *v22 = xmmword_100060C10;
    _Block_copy(a2);
    v23 = (void *)_convertErrorToNSError(_:)(v21);
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v23);

    swift_errorRelease(v21);
    return swift_release(v9);
  }
}

void sub_1000149B4(id *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000127D8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1000149D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  sub_100013320(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_100014A9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v1[3];
  v14 = v1[2];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + v4;
  v10 = *(_QWORD *)((char *)v1 + v5);
  v11 = *(_QWORD *)((char *)v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_1000836EC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10001634C;
  return sub_100011514(a1, v14, v6, v7, v8, v9, v10, v11);
}

unint64_t sub_100014B8C()
{
  unint64_t result;

  result = qword_1000836F8;
  if (!qword_1000836F8)
  {
    result = swift_getWitnessTable(&unk_100062054, &type metadata for CRLUSDRendering.RendererState);
    atomic_store(result, &qword_1000836F8);
  }
  return result;
}

void sub_100014BD0(id *a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000125EC(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100014BEC(uint64_t result, unint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (a6 >> 62 == 1)
    return sub_100014C2C(result, a2, a3);
  if (!(a6 >> 62))
  {
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_100014C2C(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      result = swift_bridgeObjectRelease(a2);
      break;
    case 4:
      result = sub_100014C64(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100014C64(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100014C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  sub_100013320(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100014D24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v11 = *(_QWORD *)((char *)v1 + v6);
  v12 = (uint64_t)v1 + v5;
  v13 = *(_QWORD *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_100083704);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_10001634C;
  return sub_100010F14(a1, v7, v8, v9, v10, v12, v11, v13);
}

_QWORD *sub_100014DFC(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t sub_100014E34(uint64_t result, unint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (a6 >> 62 == 1)
    return sub_100014E74(result, a2, a3);
  if (!(a6 >> 62))
  {
    swift_bridgeObjectRetain(a5);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t sub_100014E74(uint64_t result, unint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      result = swift_bridgeObjectRetain(a2);
      break;
    case 4:
      result = sub_100014EAC(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100014EAC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_100014EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 0xF;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100014BEC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_QWORD *)(v0 + v6 + 16), *(_QWORD *)(v0 + v6 + 24), *(_QWORD *)(v0 + v6 + 32), *(_QWORD *)(v0 + v6 + 40), *(_QWORD *)(v0 + v6 + 48));
  return swift_deallocObject(v0, v6 + 56, v5);
}

uint64_t sub_100014F68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (uint64_t)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_1000836BC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10001634C;
  return sub_1000122C0(a1, v6, v7, v8, v9, v10);
}

void sub_100015014(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_10000FC54(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

unint64_t sub_10001501C()
{
  unint64_t result;

  result = qword_100083718;
  if (!qword_100083718)
  {
    result = swift_getWitnessTable(&unk_10006124C, &type metadata for CRLUSDRendererExtensionShared.ExtensionError);
    atomic_store(result, &qword_100083718);
  }
  return result;
}

uint64_t sub_100015060()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100015094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(float *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_100083724);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10001634C;
  return sub_10000F82C(v8, a1, v4, v5, v6, v7, v10, v9);
}

uint64_t sub_100015128()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100015150(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc(dword_100083734);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001634C;
  return sub_10000F494(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000151F8(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000134AC(&qword_100083690);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100015260()
{
  unint64_t result;

  result = qword_100083748;
  if (!qword_100083748)
  {
    result = swift_getWitnessTable(&unk_10006227C, &type metadata for CRLUSDRendering.SceneAction);
    atomic_store(result, &qword_100083748);
  }
  return result;
}

uint64_t sub_1000152A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc(dword_100083754);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100015350;
  return sub_10000F1BC(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100015350()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_100015398()
{
  unint64_t result;

  result = qword_100083760;
  if (!qword_100083760)
  {
    result = swift_getWitnessTable(&unk_100061F0C, &type metadata for CRLUSDRendering.SceneConfiguration);
    atomic_store(result, &qword_100083760);
  }
  return result;
}

uint64_t sub_1000153E0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  sub_100013320(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100015424(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc(dword_10008376C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001634C;
  return sub_10000EE5C(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000154CC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001550C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CRLUSDRendering.SceneRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100015548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000ED64(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100015550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000131C0(&qword_100083780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015598(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000131C0(&qword_100083780);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000155D8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_unknownObjectRelease(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10001560C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10008378C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001634C;
  return sub_10000EBD4(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100015698(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
  sub_10001601C(a1, &qword_100083798, (uint64_t)&unk_100072678);
}

void type metadata accessor for CIContextOption(uint64_t a1)
{
  sub_10001601C(a1, &qword_1000837A0, (uint64_t)&unk_1000726A8);
}

void type metadata accessor for REEngineServiceMask(uint64_t a1)
{
  sub_10001601C(a1, &qword_1000837A8, (uint64_t)&unk_1000726D0);
}

unint64_t destroy for CRLUSDRendererExtensionShared.ExtensionError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s20USDRendererExtension29CRLUSDRendererExtensionSharedO14ExtensionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for CRLUSDRendererExtensionShared.ExtensionError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for CRLUSDRendererExtensionShared.ExtensionError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for CRLUSDRendererExtensionShared.ExtensionError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendererExtensionShared.ExtensionError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendererExtensionShared.ExtensionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_100015918(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100015934(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendererExtensionShared.ExtensionError()
{
  return &type metadata for CRLUSDRendererExtensionShared.ExtensionError;
}

uint64_t initializeBufferWithCopyOfBuffer for CRLUSDRendering.RendererState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 _s11TextureDataVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000159A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000159C4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_10001601C(a1, &qword_1000837B0, (uint64_t)&unk_1000727E0);
}

ValueMetadata *type metadata accessor for CRLUSDRendererExtensionShared()
{
  return &type metadata for CRLUSDRendererExtensionShared;
}

uint64_t sub_100015A14(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100015A34(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_10001601C(a1, &qword_1000837B8, (uint64_t)&unk_100072880);
}

unint64_t sub_100015A74()
{
  unint64_t result;

  result = qword_1000837C0;
  if (!qword_1000837C0)
  {
    result = swift_getWitnessTable(&unk_100060F34, &type metadata for CRLUSDRendererExtensionShared.ExtensionError);
    atomic_store(result, (unint64_t *)&qword_1000837C0);
  }
  return result;
}

uint64_t sub_100015AB8()
{
  return sub_1000154CC(&qword_1000837C8, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&unk_100060FCC);
}

uint64_t sub_100015AE4()
{
  return sub_1000154CC(&qword_1000837D0, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&unk_100060F9C);
}

uint64_t sub_100015B10()
{
  return sub_1000154CC(&qword_1000837D8, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&unk_100060FF4);
}

uint64_t sub_100015B3C()
{
  return sub_1000154CC(&qword_1000837E0, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&unk_10006102C);
}

uint64_t sub_100015B68()
{
  return sub_1000154CC(&qword_1000837E8, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&unk_100061164);
}

uint64_t sub_100015B94()
{
  return sub_1000154CC(&qword_1000837F0, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&unk_100061138);
}

uint64_t sub_100015BC0()
{
  return sub_1000154CC(&qword_1000837F8, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&unk_1000611D4);
}

_QWORD *sub_100015BEC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100015C10()
{
  unint64_t result;

  result = qword_100083820;
  if (!qword_100083820)
  {
    result = swift_getWitnessTable(&unk_100061698, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083820);
  }
  return result;
}

uint64_t sub_100015C54(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_100015C74()
{
  unint64_t result;

  result = qword_100083830;
  if (!qword_100083830)
  {
    result = swift_getWitnessTable(&unk_100061648, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083830);
  }
  return result;
}

unint64_t sub_100015CB8()
{
  unint64_t result;

  result = qword_100083838;
  if (!qword_100083838)
  {
    result = swift_getWitnessTable(&unk_1000615F8, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083838);
  }
  return result;
}

unint64_t sub_100015CFC()
{
  unint64_t result;

  result = qword_100083840;
  if (!qword_100083840)
  {
    result = swift_getWitnessTable(&unk_1000615A8, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083840);
  }
  return result;
}

uint64_t sub_100015D40(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100015E60 + 4 * byte_100060C31[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100015E94 + 4 * byte_100060C2C[v4]))();
}

uint64_t sub_100015E94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015E9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100015EA4);
  return result;
}

uint64_t sub_100015EB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100015EB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100015EBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015EC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100015ED0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100015ED8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys()
{
  return &type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys()
{
  return &type metadata for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys()
{
  return &type metadata for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100015FA4 + 4 * byte_100060C36[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100015FC4 + 4 * byte_100060C3B[v4]))();
}

_BYTE *sub_100015FA4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100015FC4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100015FCC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100015FD4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100015FDC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100015FE4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100015FF0()
{
  return 0;
}

ValueMetadata *type metadata accessor for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys()
{
  return &type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_10001601C(a1, &qword_100083878, (uint64_t)&unk_100072A60);
}

void sub_10001601C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_100016064()
{
  unint64_t result;

  result = qword_100083880;
  if (!qword_100083880)
  {
    result = swift_getWitnessTable(&unk_100061428, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083880);
  }
  return result;
}

unint64_t sub_1000160AC()
{
  unint64_t result;

  result = qword_100083888;
  if (!qword_100083888)
  {
    result = swift_getWitnessTable(&unk_100061580, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083888);
  }
  return result;
}

unint64_t sub_1000160F4()
{
  unint64_t result;

  result = qword_100083890;
  if (!qword_100083890)
  {
    result = swift_getWitnessTable(&unk_1000614A0, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083890);
  }
  return result;
}

unint64_t sub_10001613C()
{
  unint64_t result;

  result = qword_100083898;
  if (!qword_100083898)
  {
    result = swift_getWitnessTable(&unk_1000614C8, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.InterfaceMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083898);
  }
  return result;
}

unint64_t sub_100016184()
{
  unint64_t result;

  result = qword_1000838A0;
  if (!qword_1000838A0)
  {
    result = swift_getWitnessTable(&unk_100061450, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000838A0);
  }
  return result;
}

unint64_t sub_1000161CC()
{
  unint64_t result;

  result = qword_1000838A8;
  if (!qword_1000838A8)
  {
    result = swift_getWitnessTable(&unk_100061478, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.DisconnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000838A8);
  }
  return result;
}

unint64_t sub_100016214()
{
  unint64_t result;

  result = qword_1000838B0;
  if (!qword_1000838B0)
  {
    result = swift_getWitnessTable(&unk_100061398, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000838B0);
  }
  return result;
}

unint64_t sub_10001625C()
{
  unint64_t result;

  result = qword_1000838B8;
  if (!qword_1000838B8)
  {
    result = swift_getWitnessTable(&unk_1000613C0, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.ForegroundAssertionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000838B8);
  }
  return result;
}

unint64_t sub_1000162A4()
{
  unint64_t result;

  result = qword_1000838C0;
  if (!qword_1000838C0)
  {
    result = swift_getWitnessTable(&unk_1000614F0, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000838C0);
  }
  return result;
}

unint64_t sub_1000162EC()
{
  unint64_t result;

  result = qword_1000838C8;
  if (!qword_1000838C8)
  {
    result = swift_getWitnessTable(&unk_100061518, &type metadata for CRLUSDRendererExtensionShared.ExtensionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000838C8);
  }
  return result;
}

void *sub_1000163B0()
{
  void *result;

  result = (void *)sub_100026BC8((uint64_t)_swiftEmptyArrayStorage);
  off_100083A50 = result;
  return result;
}

char *sub_1000163D4(void *a1, void *a2, id a3)
{
  uint64_t v3;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD v41[3];

  v6 = objc_msgSend(a3, "computeCommandEncoder");
  if (!v6)
  {
    v8 = sub_100016928();
    v9 = swift_allocError(&_s14descr100072D59C16TextureResamplerC14ResamplerErrorON, v8, 0, 0);
    *(_OWORD *)v10 = xmmword_1000616F0;
    *(_BYTE *)(v10 + 16) = 2;
    return (char *)swift_willThrow(v9);
  }
  v7 = v6;
  if (*(_BYTE *)(v3 + 32) == 1)
  {
    swift_unknownObjectRetain(a1);
    swift_unknownObjectRetain(a2);
  }
  else
  {
    v12 = objc_msgSend(a1, "newTextureViewWithPixelFormat:", 80);
    if (!v12)
    {
      v26 = objc_msgSend(a1, "description");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      v30 = sub_100016928();
      v31 = swift_allocError(&_s14descr100072D59C16TextureResamplerC14ResamplerErrorON, v30, 0, 0);
      *(_QWORD *)v32 = v27;
      *(_QWORD *)(v32 + 8) = v29;
      *(_BYTE *)(v32 + 16) = 1;
      swift_willThrow(v31);
      v25 = v7;
      return (char *)swift_unknownObjectRelease(v25);
    }
    v13 = v12;
    v14 = objc_msgSend(a2, "newTextureViewWithPixelFormat:", 80);
    if (!v14)
    {
      v33 = objc_msgSend(a2, "description");
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

      v37 = sub_100016928();
      v38 = swift_allocError(&_s14descr100072D59C16TextureResamplerC14ResamplerErrorON, v37, 0, 0);
      *(_QWORD *)v39 = v34;
      *(_QWORD *)(v39 + 8) = v36;
      *(_BYTE *)(v39 + 16) = 1;
      swift_willThrow(v38);
      swift_unknownObjectRelease(v7);
      v25 = v13;
      return (char *)swift_unknownObjectRelease(v25);
    }
    a2 = v14;
    a1 = v13;
  }
  v15 = *(void **)(v3 + 24);
  objc_msgSend(v7, "setComputePipelineState:", v15);
  objc_msgSend(v7, "setTexture:atIndex:", a1, 0);
  objc_msgSend(v7, "setTexture:atIndex:", a2, 1);
  v16 = (uint64_t)objc_msgSend(v15, "threadExecutionWidth");
  result = (char *)objc_msgSend(v15, "maxTotalThreadsPerThreadgroup");
  if (!v16)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = (uint64_t)result;
  if (result == (char *)0x8000000000000000 && v16 == -1)
    goto LABEL_30;
  v18 = (char *)objc_msgSend(a2, "width");
  result = (char *)objc_msgSend(a2, "height");
  v19 = &v18[v16];
  if (__OFADD__(v18, v16))
    goto LABEL_25;
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v21 == (char *)0x8000000000000000 && v16 == -1)
    goto LABEL_31;
  v22 = v17 / v16;
  v23 = &result[v17 / v16];
  if (__OFADD__(result, v17 / v16))
    goto LABEL_27;
  v20 = __OFSUB__(v23, 1);
  v24 = v23 - 1;
  if (v20)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (!v22)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v24 != (char *)0x8000000000000000 || v22 != -1)
  {
    v41[0] = (uint64_t)v21 / v16;
    v41[1] = (uint64_t)v24 / v22;
    v41[2] = 1;
    v40[0] = v16;
    v40[1] = v17 / v16;
    v40[2] = 1;
    objc_msgSend(v7, "dispatchThreadgroups:threadsPerThreadgroup:", v41, v40);
    objc_msgSend(v7, "endEncoding");
    swift_unknownObjectRelease(v7);
    swift_unknownObjectRelease(a1);
    v25 = a2;
    return (char *)swift_unknownObjectRelease(v25);
  }
LABEL_32:
  __break(1u);
  return result;
}

unint64_t sub_100016724(uint64_t a1, uint64_t a2, char a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  unint64_t v11;
  _QWORD v12[3];
  _BYTE v13[8];
  unint64_t v14;
  unint64_t v15;

  if (!a3)
  {
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(0xE000000000000000);
    v14 = 0xD000000000000028;
    v15 = 0x800000010005E7C0;
    swift_getErrorValue(a1, v13, v12);
    v7._countAndFlagsBits = Error.localizedDescription.getter(v12[1], v12[2]);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    v9._countAndFlagsBits = 46;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    sub_100016D10(a1, a2, 0);
    return v14;
  }
  if (a3 == 1)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease(0xE000000000000000);
    v14 = 0xD00000000000002BLL;
    v15 = 0x800000010005E790;
    v5._countAndFlagsBits = a1;
    v5._object = (void *)a2;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    return v14;
  }
  if (a1 ^ 1 | a2)
    v11 = 0xD00000000000002CLL;
  else
    v11 = 0xD000000000000029;
  if (a1 | a2)
    return v11;
  else
    return 0xD00000000000001DLL;
}

unint64_t sub_1000168C4()
{
  uint64_t v0;

  return sub_100016724(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1000168DC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 33, 7);
}

uint64_t _s14descr100072D59C16TextureResamplerCMa()
{
  return objc_opt_self(_TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE16TextureResampler);
}

unint64_t sub_100016928()
{
  unint64_t result;

  result = qword_100083B08;
  if (!qword_100083B08)
  {
    result = swift_getWitnessTable(&unk_1000617B0, &_s14descr100072D59C16TextureResamplerC14ResamplerErrorON);
    atomic_store(result, (unint64_t *)&qword_100083B08);
  }
  return result;
}

uint64_t sub_10001696C(void *a1)
{
  id v2;
  void *v3;
  char v4;
  NSString v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  int v28;

  v2 = objc_msgSend(a1, "newDefaultLibrary");
  if (v2)
  {
    v3 = v2;
    MTLPixelFormatGetInfoForDevice(&v27, a1, 81);
    v4 = v28;
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v3, "newFunctionWithName:", v5);

    if (v6)
    {
      v27 = 0;
      v7 = objc_msgSend(a1, "newComputePipelineStateWithFunction:error:", v6, &v27);
      v8 = v27;
      if (v7)
      {
        v9 = v7;
        v10 = v27;
        swift_unknownObjectRelease(v3);
        swift_unknownObjectRelease(v6);
        v11 = _s14descr100072D59C16TextureResamplerCMa();
        v12 = swift_allocObject(v11, 33, 7);
        *(_QWORD *)(v12 + 16) = a1;
        *(_QWORD *)(v12 + 24) = v9;
        *(_BYTE *)(v12 + 32) = (v4 & 2) != 0;
        swift_unknownObjectRetain(a1);
      }
      else
      {
        v19 = v27;
        v20 = _convertNSErrorToError(_:)(v8);

        swift_willThrow(v21);
        v22 = sub_100016928();
        v23 = swift_allocError(&_s14descr100072D59C16TextureResamplerC14ResamplerErrorON, v22, 0, 0);
        *(_QWORD *)v24 = v20;
        *(_QWORD *)(v24 + 8) = 0;
        *(_BYTE *)(v24 + 16) = 0;
        v25 = swift_errorRetain(v20);
        v12 = v23;
        swift_willThrow(v25);
        swift_unknownObjectRelease(v3);
        swift_unknownObjectRelease(v6);
        swift_errorRelease(v20);
      }
    }
    else
    {
      v16 = sub_100016928();
      v17 = swift_allocError(&_s14descr100072D59C16TextureResamplerC14ResamplerErrorON, v16, 0, 0);
      *(_OWORD *)v18 = xmmword_100061700;
      *(_BYTE *)(v18 + 16) = 2;
      v12 = v17;
      swift_willThrow(v17);
      swift_unknownObjectRelease(v3);
    }
  }
  else
  {
    v13 = sub_100016928();
    v14 = swift_allocError(&_s14descr100072D59C16TextureResamplerC14ResamplerErrorON, v13, 0, 0);
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 16) = 2;
    v12 = v14;
    swift_willThrow(v14);
  }
  return v12;
}

uint64_t sub_100016BA0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  void *v9;
  _BYTE v11[24];
  void *v12;

  if (qword_100082EE8 != -1)
    swift_once(&qword_100082EE8, sub_1000163B0);
  swift_beginAccess(&off_100083A50, v11, 32, 0);
  v4 = off_100083A50;
  if (*((_QWORD *)off_100083A50 + 2) && (v5 = sub_100024FEC((uint64_t)a1), (v6 & 1) != 0))
  {
    v2 = *(_QWORD *)(v4[7] + 8 * v5);
    swift_endAccess(v11);
    swift_retain(v2);
  }
  else
  {
    swift_endAccess(v11);
    v7 = sub_10001696C(a1);
    if (!v1)
    {
      v2 = v7;
      swift_beginAccess(&off_100083A50, v11, 33, 0);
      swift_retain(v2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_100083A50);
      v12 = off_100083A50;
      off_100083A50 = (_UNKNOWN *)0x8000000000000000;
      sub_100044F50(v2, (uint64_t)a1, isUniquelyReferenced_nonNull_native);
      v9 = off_100083A50;
      off_100083A50 = v12;
      swift_bridgeObjectRelease(v9);
      swift_endAccess(v11);
    }
  }
  return v2;
}

uint64_t sub_100016CE0(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_bridgeObjectRetain(a2);
  if (!a3)
    return swift_errorRetain(result);
  return result;
}

uint64_t _s14descr100072D59C16TextureResamplerC14ResamplerErrorOwxx(uint64_t a1)
{
  return sub_100016D10(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100016D10(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_bridgeObjectRelease(a2);
  if (!a3)
    return swift_errorRelease(result);
  return result;
}

uint64_t _s14descr100072D59C16TextureResamplerC14ResamplerErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100016CE0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14descr100072D59C16TextureResamplerC14ResamplerErrorOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100016CE0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100016D10(v6, v7, v8);
  return a1;
}

__n128 _s14descr100072D59C16TextureResamplerC14ResamplerErrorOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s14descr100072D59C16TextureResamplerC14ResamplerErrorOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100016D10(v4, v5, v6);
  return a1;
}

uint64_t _s14descr100072D59C16TextureResamplerC14ResamplerErrorOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s14descr100072D59C16TextureResamplerC14ResamplerErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100016EB0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100016EC8(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *_s14descr100072D59C16TextureResamplerC14ResamplerErrorOMa()
{
  return &_s14descr100072D59C16TextureResamplerC14ResamplerErrorON;
}

uint64_t *OS_os_log.crlThreeDimensionalObjects.unsafeMutableAddressor()
{
  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  return &static OS_os_log.crlThreeDimensionalObjects;
}

void sub_100016F34()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLDefaultCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLDefaultCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLDefaultCat_log_t, &CRLDefaultCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlDefault = (uint64_t)v1;
}

uint64_t *OS_os_log.crlDefault.unsafeMutableAddressor()
{
  if (qword_100082EF0 != -1)
    swift_once(&qword_100082EF0, sub_100016F34);
  return &static OS_os_log.crlDefault;
}

id static OS_os_log.crlDefault.getter()
{
  return sub_10001D6A0(&qword_100082EF0, (id *)&static OS_os_log.crlDefault);
}

void static OS_os_log.crlDefault.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082EF0, (void **)&static OS_os_log.crlDefault, (uint64_t)sub_100016F34);
}

uint64_t (*static OS_os_log.crlDefault.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082EF0 != -1)
    swift_once(&qword_100082EF0, sub_100016F34);
  swift_beginAccess(&static OS_os_log.crlDefault, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000170D4()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLAssertCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLAssertCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLAssertCat_log_t, &CRLAssertCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlAssert = (uint64_t)v1;
}

uint64_t *OS_os_log.crlAssert.unsafeMutableAddressor()
{
  if (qword_100082EF8 != -1)
    swift_once(&qword_100082EF8, sub_1000170D4);
  return &static OS_os_log.crlAssert;
}

id static OS_os_log.crlAssert.getter()
{
  return sub_10001D6A0(&qword_100082EF8, (id *)&static OS_os_log.crlAssert);
}

void static OS_os_log.crlAssert.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082EF8, (void **)&static OS_os_log.crlAssert, (uint64_t)sub_1000170D4);
}

uint64_t (*static OS_os_log.crlAssert.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082EF8 != -1)
    swift_once(&qword_100082EF8, sub_1000170D4);
  swift_beginAccess(&static OS_os_log.crlAssert, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100017270()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLErrorCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLErrorCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLErrorCat_log_t, &CRLErrorCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlError = (uint64_t)v1;
}

uint64_t *OS_os_log.crlError.unsafeMutableAddressor()
{
  if (qword_100082F00 != -1)
    swift_once(&qword_100082F00, sub_100017270);
  return &static OS_os_log.crlError;
}

id static OS_os_log.crlError.getter()
{
  return sub_10001D6A0(&qword_100082F00, (id *)&static OS_os_log.crlError);
}

void static OS_os_log.crlError.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F00, (void **)&static OS_os_log.crlError, (uint64_t)sub_100017270);
}

uint64_t (*static OS_os_log.crlError.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F00 != -1)
    swift_once(&qword_100082F00, sub_100017270);
  swift_beginAccess(&static OS_os_log.crlError, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001740C()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLWarningCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLWarningCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLWarningCat_log_t, &CRLWarningCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlWarning = (uint64_t)v1;
}

uint64_t *OS_os_log.crlWarning.unsafeMutableAddressor()
{
  if (qword_100082F08 != -1)
    swift_once(&qword_100082F08, sub_10001740C);
  return &static OS_os_log.crlWarning;
}

id static OS_os_log.crlWarning.getter()
{
  return sub_10001D6A0(&qword_100082F08, (id *)&static OS_os_log.crlWarning);
}

void static OS_os_log.crlWarning.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F08, (void **)&static OS_os_log.crlWarning, (uint64_t)sub_10001740C);
}

uint64_t (*static OS_os_log.crlWarning.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F08 != -1)
    swift_once(&qword_100082F08, sub_10001740C);
  swift_beginAccess(&static OS_os_log.crlWarning, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000175AC()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLAlertCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLAlertCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLAlertCat_log_t, &CRLAlertCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlAlert = (uint64_t)v1;
}

uint64_t *OS_os_log.crlAlert.unsafeMutableAddressor()
{
  if (qword_100082F10 != -1)
    swift_once(&qword_100082F10, sub_1000175AC);
  return &static OS_os_log.crlAlert;
}

id static OS_os_log.crlAlert.getter()
{
  return sub_10001D6A0(&qword_100082F10, (id *)&static OS_os_log.crlAlert);
}

void static OS_os_log.crlAlert.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F10, (void **)&static OS_os_log.crlAlert, (uint64_t)sub_1000175AC);
}

uint64_t (*static OS_os_log.crlAlert.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F10 != -1)
    swift_once(&qword_100082F10, sub_1000175AC);
  swift_beginAccess(&static OS_os_log.crlAlert, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100017748()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLPerformanceCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLPerformanceCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLPerformanceCat_log_t, &CRLPerformanceCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlPerformance = (uint64_t)v1;
}

uint64_t *OS_os_log.crlPerformance.unsafeMutableAddressor()
{
  if (qword_100082F18 != -1)
    swift_once(&qword_100082F18, sub_100017748);
  return &static OS_os_log.crlPerformance;
}

id static OS_os_log.crlPerformance.getter()
{
  return sub_10001D6A0(&qword_100082F18, (id *)&static OS_os_log.crlPerformance);
}

void static OS_os_log.crlPerformance.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F18, (void **)&static OS_os_log.crlPerformance, (uint64_t)sub_100017748);
}

uint64_t (*static OS_os_log.crlPerformance.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F18 != -1)
    swift_once(&qword_100082F18, sub_100017748);
  swift_beginAccess(&static OS_os_log.crlPerformance, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000178E0()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLStatusHUDCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLStatusHUDCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLStatusHUDCat_log_t, &CRLStatusHUDCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlStatusHUD = (uint64_t)v1;
}

uint64_t *OS_os_log.crlStatusHUD.unsafeMutableAddressor()
{
  if (qword_100082F20 != -1)
    swift_once(&qword_100082F20, sub_1000178E0);
  return &static OS_os_log.crlStatusHUD;
}

id static OS_os_log.crlStatusHUD.getter()
{
  return sub_10001D6A0(&qword_100082F20, (id *)&static OS_os_log.crlStatusHUD);
}

void static OS_os_log.crlStatusHUD.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F20, (void **)&static OS_os_log.crlStatusHUD, (uint64_t)sub_1000178E0);
}

uint64_t (*static OS_os_log.crlStatusHUD.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F20 != -1)
    swift_once(&qword_100082F20, sub_1000178E0);
  swift_beginAccess(&static OS_os_log.crlStatusHUD, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100017A80()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLTextInputCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLTextInputCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLTextInputCat_log_t, &CRLTextInputCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlTextInput = (uint64_t)v1;
}

uint64_t *OS_os_log.crlTextInput.unsafeMutableAddressor()
{
  if (qword_100082F28 != -1)
    swift_once(&qword_100082F28, sub_100017A80);
  return &static OS_os_log.crlTextInput;
}

id static OS_os_log.crlTextInput.getter()
{
  return sub_10001D6A0(&qword_100082F28, (id *)&static OS_os_log.crlTextInput);
}

void static OS_os_log.crlTextInput.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F28, (void **)&static OS_os_log.crlTextInput, (uint64_t)sub_100017A80);
}

uint64_t (*static OS_os_log.crlTextInput.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F28 != -1)
    swift_once(&qword_100082F28, sub_100017A80);
  swift_beginAccess(&static OS_os_log.crlTextInput, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100017C20()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLTraceableResourceCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLTraceableResourceCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLTraceableResourceCat_log_t, &CRLTraceableResourceCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlTraceableResource = (uint64_t)v1;
}

uint64_t *OS_os_log.crlTraceableResource.unsafeMutableAddressor()
{
  if (qword_100082F30 != -1)
    swift_once(&qword_100082F30, sub_100017C20);
  return &static OS_os_log.crlTraceableResource;
}

id static OS_os_log.crlTraceableResource.getter()
{
  return sub_10001D6A0(&qword_100082F30, (id *)&static OS_os_log.crlTraceableResource);
}

void static OS_os_log.crlTraceableResource.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F30, (void **)&static OS_os_log.crlTraceableResource, (uint64_t)sub_100017C20);
}

uint64_t (*static OS_os_log.crlTraceableResource.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F30 != -1)
    swift_once(&qword_100082F30, sub_100017C20);
  swift_beginAccess(&static OS_os_log.crlTraceableResource, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100017DB8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLStorageHierachyCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLStorageHierachyCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLStorageHierachyCat_log_t, &CRLStorageHierachyCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlStorageHierachy = (uint64_t)v1;
}

uint64_t *OS_os_log.crlStorageHierachy.unsafeMutableAddressor()
{
  if (qword_100082F38 != -1)
    swift_once(&qword_100082F38, sub_100017DB8);
  return &static OS_os_log.crlStorageHierachy;
}

id static OS_os_log.crlStorageHierachy.getter()
{
  return sub_10001D6A0(&qword_100082F38, (id *)&static OS_os_log.crlStorageHierachy);
}

void static OS_os_log.crlStorageHierachy.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F38, (void **)&static OS_os_log.crlStorageHierachy, (uint64_t)sub_100017DB8);
}

uint64_t (*static OS_os_log.crlStorageHierachy.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F38 != -1)
    swift_once(&qword_100082F38, sub_100017DB8);
  swift_beginAccess(&static OS_os_log.crlStorageHierachy, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100017F50()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLSerializableObjectCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLSerializableObjectCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLSerializableObjectCat_log_t, &CRLSerializableObjectCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlSerializableObject = (uint64_t)v1;
}

uint64_t *OS_os_log.crlSerializableObject.unsafeMutableAddressor()
{
  if (qword_100082F40 != -1)
    swift_once(&qword_100082F40, sub_100017F50);
  return &static OS_os_log.crlSerializableObject;
}

id static OS_os_log.crlSerializableObject.getter()
{
  return sub_10001D6A0(&qword_100082F40, (id *)&static OS_os_log.crlSerializableObject);
}

void static OS_os_log.crlSerializableObject.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F40, (void **)&static OS_os_log.crlSerializableObject, (uint64_t)sub_100017F50);
}

uint64_t (*static OS_os_log.crlSerializableObject.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F40 != -1)
    swift_once(&qword_100082F40, sub_100017F50);
  swift_beginAccess(&static OS_os_log.crlSerializableObject, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000180E8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLCollaborationParticipantCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLCollaborationParticipantCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLCollaborationParticipantCat_log_t, &CRLCollaborationParticipantCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlCollaborationParticipant = (uint64_t)v1;
}

uint64_t *OS_os_log.crlCollaborationParticipant.unsafeMutableAddressor()
{
  if (qword_100082F48 != -1)
    swift_once(&qword_100082F48, sub_1000180E8);
  return &static OS_os_log.crlCollaborationParticipant;
}

id static OS_os_log.crlCollaborationParticipant.getter()
{
  return sub_10001D6A0(&qword_100082F48, (id *)&static OS_os_log.crlCollaborationParticipant);
}

void static OS_os_log.crlCollaborationParticipant.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F48, (void **)&static OS_os_log.crlCollaborationParticipant, (uint64_t)sub_1000180E8);
}

uint64_t (*static OS_os_log.crlCollaborationParticipant.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F48 != -1)
    swift_once(&qword_100082F48, sub_1000180E8);
  swift_beginAccess(&static OS_os_log.crlCollaborationParticipant, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100018280()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLSpotlightCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLSpotlightCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLSpotlightCat_log_t, &CRLSpotlightCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlSpotlight = (uint64_t)v1;
}

uint64_t *OS_os_log.crlSpotlight.unsafeMutableAddressor()
{
  if (qword_100082F50 != -1)
    swift_once(&qword_100082F50, sub_100018280);
  return &static OS_os_log.crlSpotlight;
}

id static OS_os_log.crlSpotlight.getter()
{
  return sub_10001D6A0(&qword_100082F50, (id *)&static OS_os_log.crlSpotlight);
}

void static OS_os_log.crlSpotlight.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F50, (void **)&static OS_os_log.crlSpotlight, (uint64_t)sub_100018280);
}

uint64_t (*static OS_os_log.crlSpotlight.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F50 != -1)
    swift_once(&qword_100082F50, sub_100018280);
  swift_beginAccess(&static OS_os_log.crlSpotlight, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100018420()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLNetworkReachabilityCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLNetworkReachabilityCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLNetworkReachabilityCat_log_t, &CRLNetworkReachabilityCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlNetworkReachability = (uint64_t)v1;
}

uint64_t *OS_os_log.crlNetworkReachability.unsafeMutableAddressor()
{
  if (qword_100082F58 != -1)
    swift_once(&qword_100082F58, sub_100018420);
  return &static OS_os_log.crlNetworkReachability;
}

id static OS_os_log.crlNetworkReachability.getter()
{
  return sub_10001D6A0(&qword_100082F58, (id *)&static OS_os_log.crlNetworkReachability);
}

void static OS_os_log.crlNetworkReachability.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F58, (void **)&static OS_os_log.crlNetworkReachability, (uint64_t)sub_100018420);
}

uint64_t (*static OS_os_log.crlNetworkReachability.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F58 != -1)
    swift_once(&qword_100082F58, sub_100018420);
  swift_beginAccess(&static OS_os_log.crlNetworkReachability, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000185B8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLAssetDownloadManagerCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLAssetDownloadManagerCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLAssetDownloadManagerCat_log_t, &CRLAssetDownloadManagerCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlAssetDownloadManager = (uint64_t)v1;
}

uint64_t *OS_os_log.crlAssetDownloadManager.unsafeMutableAddressor()
{
  if (qword_100082F60 != -1)
    swift_once(&qword_100082F60, sub_1000185B8);
  return &static OS_os_log.crlAssetDownloadManager;
}

id static OS_os_log.crlAssetDownloadManager.getter()
{
  return sub_10001D6A0(&qword_100082F60, (id *)&static OS_os_log.crlAssetDownloadManager);
}

void static OS_os_log.crlAssetDownloadManager.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F60, (void **)&static OS_os_log.crlAssetDownloadManager, (uint64_t)sub_1000185B8);
}

uint64_t (*static OS_os_log.crlAssetDownloadManager.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F60 != -1)
    swift_once(&qword_100082F60, sub_1000185B8);
  swift_beginAccess(&static OS_os_log.crlAssetDownloadManager, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100018750()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLAnalyticsCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLAnalyticsCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLAnalyticsCat_log_t, &CRLAnalyticsCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlAnalytics = (uint64_t)v1;
}

uint64_t *OS_os_log.crlAnalytics.unsafeMutableAddressor()
{
  if (qword_100082F68 != -1)
    swift_once(&qword_100082F68, sub_100018750);
  return &static OS_os_log.crlAnalytics;
}

id static OS_os_log.crlAnalytics.getter()
{
  return sub_10001D6A0(&qword_100082F68, (id *)&static OS_os_log.crlAnalytics);
}

void static OS_os_log.crlAnalytics.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F68, (void **)&static OS_os_log.crlAnalytics, (uint64_t)sub_100018750);
}

uint64_t (*static OS_os_log.crlAnalytics.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F68 != -1)
    swift_once(&qword_100082F68, sub_100018750);
  swift_beginAccess(&static OS_os_log.crlAnalytics, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000188F0()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLKeyboardCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLKeyboardCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLKeyboardCat_log_t, &CRLKeyboardCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlKeyboard = (uint64_t)v1;
}

uint64_t *OS_os_log.crlKeyboard.unsafeMutableAddressor()
{
  if (qword_100082F70 != -1)
    swift_once(&qword_100082F70, sub_1000188F0);
  return &static OS_os_log.crlKeyboard;
}

id static OS_os_log.crlKeyboard.getter()
{
  return sub_10001D6A0(&qword_100082F70, (id *)&static OS_os_log.crlKeyboard);
}

void static OS_os_log.crlKeyboard.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F70, (void **)&static OS_os_log.crlKeyboard, (uint64_t)sub_1000188F0);
}

uint64_t (*static OS_os_log.crlKeyboard.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F70 != -1)
    swift_once(&qword_100082F70, sub_1000188F0);
  swift_beginAccess(&static OS_os_log.crlKeyboard, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100018A90()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLFolderUICat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLFolderUICat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLFolderUICat_log_t, &CRLFolderUICat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlFolderUI = (uint64_t)v1;
}

uint64_t *OS_os_log.crlFolderUI.unsafeMutableAddressor()
{
  if (qword_100082F78 != -1)
    swift_once(&qword_100082F78, sub_100018A90);
  return &static OS_os_log.crlFolderUI;
}

id static OS_os_log.crlFolderUI.getter()
{
  return sub_10001D6A0(&qword_100082F78, (id *)&static OS_os_log.crlFolderUI);
}

void static OS_os_log.crlFolderUI.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F78, (void **)&static OS_os_log.crlFolderUI, (uint64_t)sub_100018A90);
}

uint64_t (*static OS_os_log.crlFolderUI.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F78 != -1)
    swift_once(&qword_100082F78, sub_100018A90);
  swift_beginAccess(&static OS_os_log.crlFolderUI, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100018C30()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLBoardLibraryCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLBoardLibraryCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLBoardLibraryCat_log_t, &CRLBoardLibraryCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlBoardLibrary = (uint64_t)v1;
}

uint64_t *OS_os_log.crlBoardLibrary.unsafeMutableAddressor()
{
  if (qword_100082F80 != -1)
    swift_once(&qword_100082F80, sub_100018C30);
  return &static OS_os_log.crlBoardLibrary;
}

id static OS_os_log.crlBoardLibrary.getter()
{
  return sub_10001D6A0(&qword_100082F80, (id *)&static OS_os_log.crlBoardLibrary);
}

void static OS_os_log.crlBoardLibrary.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F80, (void **)&static OS_os_log.crlBoardLibrary, (uint64_t)sub_100018C30);
}

uint64_t (*static OS_os_log.crlBoardLibrary.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F80 != -1)
    swift_once(&qword_100082F80, sub_100018C30);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100018DC8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLBoardPreviewImageCacheCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLBoardPreviewImageCacheCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLBoardPreviewImageCacheCat_log_t, &CRLBoardPreviewImageCacheCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlBoardPreviewImageCache = (uint64_t)v1;
}

uint64_t *OS_os_log.crlBoardPreviewImageCache.unsafeMutableAddressor()
{
  if (qword_100082F88 != -1)
    swift_once(&qword_100082F88, sub_100018DC8);
  return &static OS_os_log.crlBoardPreviewImageCache;
}

id static OS_os_log.crlBoardPreviewImageCache.getter()
{
  return sub_10001D6A0(&qword_100082F88, (id *)&static OS_os_log.crlBoardPreviewImageCache);
}

void static OS_os_log.crlBoardPreviewImageCache.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F88, (void **)&static OS_os_log.crlBoardPreviewImageCache, (uint64_t)sub_100018DC8);
}

uint64_t (*static OS_os_log.crlBoardPreviewImageCache.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F88 != -1)
    swift_once(&qword_100082F88, sub_100018DC8);
  swift_beginAccess(&static OS_os_log.crlBoardPreviewImageCache, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100018F60()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLSharingExtensionCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLSharingExtensionCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLSharingExtensionCat_log_t, &CRLSharingExtensionCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlSharingExtension = (uint64_t)v1;
}

uint64_t *OS_os_log.crlSharingExtension.unsafeMutableAddressor()
{
  if (qword_100082F90 != -1)
    swift_once(&qword_100082F90, sub_100018F60);
  return &static OS_os_log.crlSharingExtension;
}

id static OS_os_log.crlSharingExtension.getter()
{
  return sub_10001D6A0(&qword_100082F90, (id *)&static OS_os_log.crlSharingExtension);
}

void static OS_os_log.crlSharingExtension.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F90, (void **)&static OS_os_log.crlSharingExtension, (uint64_t)sub_100018F60);
}

uint64_t (*static OS_os_log.crlSharingExtension.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F90 != -1)
    swift_once(&qword_100082F90, sub_100018F60);
  swift_beginAccess(&static OS_os_log.crlSharingExtension, a1, 33, 0);
  return j__swift_endAccess;
}

void sub_1000190FC()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLStencilLibraryCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLStencilLibraryCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLStencilLibraryCat_log_t, &CRLStencilLibraryCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlStencilLibrary = (uint64_t)v1;
}

uint64_t *OS_os_log.crlStencilLibrary.unsafeMutableAddressor()
{
  if (qword_100082F98 != -1)
    swift_once(&qword_100082F98, sub_1000190FC);
  return &static OS_os_log.crlStencilLibrary;
}

id static OS_os_log.crlStencilLibrary.getter()
{
  return sub_10001D6A0(&qword_100082F98, (id *)&static OS_os_log.crlStencilLibrary);
}

void static OS_os_log.crlStencilLibrary.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082F98, (void **)&static OS_os_log.crlStencilLibrary, (uint64_t)sub_1000190FC);
}

uint64_t (*static OS_os_log.crlStencilLibrary.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082F98 != -1)
    swift_once(&qword_100082F98, sub_1000190FC);
  swift_beginAccess(&static OS_os_log.crlStencilLibrary, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100019294()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLCarmelRealTimeMessageTransferCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLCarmelRealTimeMessageTransferCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLCarmelRealTimeMessageTransferCat_log_t, &CRLCarmelRealTimeMessageTransferCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlRealTimeMessageTransfer = (uint64_t)v1;
}

uint64_t *OS_os_log.crlRealTimeMessageTransfer.unsafeMutableAddressor()
{
  if (qword_100082FA0 != -1)
    swift_once(&qword_100082FA0, sub_100019294);
  return &static OS_os_log.crlRealTimeMessageTransfer;
}

id static OS_os_log.crlRealTimeMessageTransfer.getter()
{
  return sub_10001D6A0(&qword_100082FA0, (id *)&static OS_os_log.crlRealTimeMessageTransfer);
}

void static OS_os_log.crlRealTimeMessageTransfer.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FA0, (void **)&static OS_os_log.crlRealTimeMessageTransfer, (uint64_t)sub_100019294);
}

uint64_t (*static OS_os_log.crlRealTimeMessageTransfer.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FA0 != -1)
    swift_once(&qword_100082FA0, sub_100019294);
  swift_beginAccess(&static OS_os_log.crlRealTimeMessageTransfer, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001942C()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLZoneRefetchCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLZoneRefetchCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLZoneRefetchCat_log_t, &CRLZoneRefetchCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlZoneRefetch = (uint64_t)v1;
}

uint64_t *OS_os_log.crlZoneRefetch.unsafeMutableAddressor()
{
  if (qword_100082FA8 != -1)
    swift_once(&qword_100082FA8, sub_10001942C);
  return &static OS_os_log.crlZoneRefetch;
}

id static OS_os_log.crlZoneRefetch.getter()
{
  return sub_10001D6A0(&qword_100082FA8, (id *)&static OS_os_log.crlZoneRefetch);
}

void static OS_os_log.crlZoneRefetch.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FA8, (void **)&static OS_os_log.crlZoneRefetch, (uint64_t)sub_10001942C);
}

uint64_t (*static OS_os_log.crlZoneRefetch.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FA8 != -1)
    swift_once(&qword_100082FA8, sub_10001942C);
  swift_beginAccess(&static OS_os_log.crlZoneRefetch, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000195C4()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLSendACopyCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLSendACopyCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLSendACopyCat_log_t, &CRLSendACopyCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlSendACopy = (uint64_t)v1;
}

uint64_t *OS_os_log.crlSendACopy.unsafeMutableAddressor()
{
  if (qword_100082FB0 != -1)
    swift_once(&qword_100082FB0, sub_1000195C4);
  return &static OS_os_log.crlSendACopy;
}

id static OS_os_log.crlSendACopy.getter()
{
  return sub_10001D6A0(&qword_100082FB0, (id *)&static OS_os_log.crlSendACopy);
}

void static OS_os_log.crlSendACopy.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FB0, (void **)&static OS_os_log.crlSendACopy, (uint64_t)sub_1000195C4);
}

uint64_t (*static OS_os_log.crlSendACopy.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FB0 != -1)
    swift_once(&qword_100082FB0, sub_1000195C4);
  swift_beginAccess(&static OS_os_log.crlSendACopy, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100019764()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLCloudKitEnvironmentCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLCloudKitEnvironmentCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLCloudKitEnvironmentCat_log_t, &CRLCloudKitEnvironmentCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlCloudKitEnvironment = (uint64_t)v1;
}

uint64_t *OS_os_log.crlCloudKitEnvironment.unsafeMutableAddressor()
{
  if (qword_100082FB8 != -1)
    swift_once(&qword_100082FB8, sub_100019764);
  return &static OS_os_log.crlCloudKitEnvironment;
}

id static OS_os_log.crlCloudKitEnvironment.getter()
{
  return sub_10001D6A0(&qword_100082FB8, (id *)&static OS_os_log.crlCloudKitEnvironment);
}

void static OS_os_log.crlCloudKitEnvironment.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FB8, (void **)&static OS_os_log.crlCloudKitEnvironment, (uint64_t)sub_100019764);
}

uint64_t (*static OS_os_log.crlCloudKitEnvironment.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FB8 != -1)
    swift_once(&qword_100082FB8, sub_100019764);
  swift_beginAccess(&static OS_os_log.crlCloudKitEnvironment, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000198FC()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLSidebarCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLSidebarCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLSidebarCat_log_t, &CRLSidebarCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlSidebar = (uint64_t)v1;
}

uint64_t *OS_os_log.crlSidebar.unsafeMutableAddressor()
{
  if (qword_100082FC0 != -1)
    swift_once(&qword_100082FC0, sub_1000198FC);
  return &static OS_os_log.crlSidebar;
}

id static OS_os_log.crlSidebar.getter()
{
  return sub_10001D6A0(&qword_100082FC0, (id *)&static OS_os_log.crlSidebar);
}

void static OS_os_log.crlSidebar.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FC0, (void **)&static OS_os_log.crlSidebar, (uint64_t)sub_1000198FC);
}

uint64_t (*static OS_os_log.crlSidebar.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FC0 != -1)
    swift_once(&qword_100082FC0, sub_1000198FC);
  swift_beginAccess(&static OS_os_log.crlSidebar, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100019A9C()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLInsertMediaCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLInsertMediaCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLInsertMediaCat_log_t, &CRLInsertMediaCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlInsertMedia = (uint64_t)v1;
}

uint64_t *OS_os_log.crlInsertMedia.unsafeMutableAddressor()
{
  if (qword_100082FC8 != -1)
    swift_once(&qword_100082FC8, sub_100019A9C);
  return &static OS_os_log.crlInsertMedia;
}

id static OS_os_log.crlInsertMedia.getter()
{
  return sub_10001D6A0(&qword_100082FC8, (id *)&static OS_os_log.crlInsertMedia);
}

void static OS_os_log.crlInsertMedia.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FC8, (void **)&static OS_os_log.crlInsertMedia, (uint64_t)sub_100019A9C);
}

uint64_t (*static OS_os_log.crlInsertMedia.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FC8 != -1)
    swift_once(&qword_100082FC8, sub_100019A9C);
  swift_beginAccess(&static OS_os_log.crlInsertMedia, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100019C34()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLCollaboratorCursorCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLCollaboratorCursorCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLCollaboratorCursorCat_log_t, &CRLCollaboratorCursorCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlCollaboratorCursor = (uint64_t)v1;
}

uint64_t *OS_os_log.crlCollaboratorCursor.unsafeMutableAddressor()
{
  if (qword_100082FD0 != -1)
    swift_once(&qword_100082FD0, sub_100019C34);
  return &static OS_os_log.crlCollaboratorCursor;
}

id static OS_os_log.crlCollaboratorCursor.getter()
{
  return sub_10001D6A0(&qword_100082FD0, (id *)&static OS_os_log.crlCollaboratorCursor);
}

void static OS_os_log.crlCollaboratorCursor.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FD0, (void **)&static OS_os_log.crlCollaboratorCursor, (uint64_t)sub_100019C34);
}

uint64_t (*static OS_os_log.crlCollaboratorCursor.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FD0 != -1)
    swift_once(&qword_100082FD0, sub_100019C34);
  swift_beginAccess(&static OS_os_log.crlCollaboratorCursor, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100019DCC()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLStateRestorationCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLStateRestorationCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLStateRestorationCat_log_t, &CRLStateRestorationCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlStateRestoration = (uint64_t)v1;
}

uint64_t *OS_os_log.crlStateRestoration.unsafeMutableAddressor()
{
  if (qword_100082FD8 != -1)
    swift_once(&qword_100082FD8, sub_100019DCC);
  return &static OS_os_log.crlStateRestoration;
}

id static OS_os_log.crlStateRestoration.getter()
{
  return sub_10001D6A0(&qword_100082FD8, (id *)&static OS_os_log.crlStateRestoration);
}

void static OS_os_log.crlStateRestoration.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FD8, (void **)&static OS_os_log.crlStateRestoration, (uint64_t)sub_100019DCC);
}

uint64_t (*static OS_os_log.crlStateRestoration.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FD8 != -1)
    swift_once(&qword_100082FD8, sub_100019DCC);
  swift_beginAccess(&static OS_os_log.crlStateRestoration, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_100019F64()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLFollowCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLFollowCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLFollowCat_log_t, &CRLFollowCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlFollow = (uint64_t)v1;
}

uint64_t *OS_os_log.crlFollow.unsafeMutableAddressor()
{
  if (qword_100082FE0 != -1)
    swift_once(&qword_100082FE0, sub_100019F64);
  return &static OS_os_log.crlFollow;
}

id static OS_os_log.crlFollow.getter()
{
  return sub_10001D6A0(&qword_100082FE0, (id *)&static OS_os_log.crlFollow);
}

void static OS_os_log.crlFollow.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FE0, (void **)&static OS_os_log.crlFollow, (uint64_t)sub_100019F64);
}

uint64_t (*static OS_os_log.crlFollow.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FE0 != -1)
    swift_once(&qword_100082FE0, sub_100019F64);
  swift_beginAccess(&static OS_os_log.crlFollow, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001A100()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLJoinLeaveCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLJoinLeaveCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLJoinLeaveCat_log_t, &CRLJoinLeaveCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlJoinLeave = (uint64_t)v1;
}

uint64_t *OS_os_log.crlJoinLeave.unsafeMutableAddressor()
{
  if (qword_100082FE8 != -1)
    swift_once(&qword_100082FE8, sub_10001A100);
  return &static OS_os_log.crlJoinLeave;
}

id static OS_os_log.crlJoinLeave.getter()
{
  return sub_10001D6A0(&qword_100082FE8, (id *)&static OS_os_log.crlJoinLeave);
}

void static OS_os_log.crlJoinLeave.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FE8, (void **)&static OS_os_log.crlJoinLeave, (uint64_t)sub_10001A100);
}

uint64_t (*static OS_os_log.crlJoinLeave.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FE8 != -1)
    swift_once(&qword_100082FE8, sub_10001A100);
  swift_beginAccess(&static OS_os_log.crlJoinLeave, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001A2A0()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLPencilHoverCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLPencilHoverCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLPencilHoverCat_log_t, &CRLPencilHoverCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlPencilHover = (uint64_t)v1;
}

uint64_t *OS_os_log.crlPencilHover.unsafeMutableAddressor()
{
  if (qword_100082FF0 != -1)
    swift_once(&qword_100082FF0, sub_10001A2A0);
  return &static OS_os_log.crlPencilHover;
}

id static OS_os_log.crlPencilHover.getter()
{
  return sub_10001D6A0(&qword_100082FF0, (id *)&static OS_os_log.crlPencilHover);
}

void static OS_os_log.crlPencilHover.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FF0, (void **)&static OS_os_log.crlPencilHover, (uint64_t)sub_10001A2A0);
}

uint64_t (*static OS_os_log.crlPencilHover.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FF0 != -1)
    swift_once(&qword_100082FF0, sub_10001A2A0);
  swift_beginAccess(&static OS_os_log.crlPencilHover, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001A438()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLScenesCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLScenesCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLScenesCat_log_t, &CRLScenesCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlScenes = (uint64_t)v1;
}

uint64_t *OS_os_log.crlScenes.unsafeMutableAddressor()
{
  if (qword_100082FF8 != -1)
    swift_once(&qword_100082FF8, sub_10001A438);
  return &static OS_os_log.crlScenes;
}

id static OS_os_log.crlScenes.getter()
{
  return sub_10001D6A0(&qword_100082FF8, (id *)&static OS_os_log.crlScenes);
}

void static OS_os_log.crlScenes.setter(void *a1)
{
  sub_10001D710(a1, &qword_100082FF8, (void **)&static OS_os_log.crlScenes, (uint64_t)sub_10001A438);
}

uint64_t (*static OS_os_log.crlScenes.modify(uint64_t a1))(_QWORD)
{
  if (qword_100082FF8 != -1)
    swift_once(&qword_100082FF8, sub_10001A438);
  swift_beginAccess(&static OS_os_log.crlScenes, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001A5D8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLThreeDimensionalObjectsCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLThreeDimensionalObjectsCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLThreeDimensionalObjectsCat_log_t, &CRLThreeDimensionalObjectsCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlThreeDimensionalObjects = (uint64_t)v1;
}

id static OS_os_log.crlThreeDimensionalObjects.getter()
{
  return sub_10001D6A0(&qword_100083000, (id *)&static OS_os_log.crlThreeDimensionalObjects);
}

void static OS_os_log.crlThreeDimensionalObjects.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083000, (void **)&static OS_os_log.crlThreeDimensionalObjects, (uint64_t)sub_10001A5D8);
}

uint64_t (*static OS_os_log.crlThreeDimensionalObjects.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001A730()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLChangeShapeCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLChangeShapeCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLChangeShapeCat_log_t, &CRLChangeShapeCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlChangeShape = (uint64_t)v1;
}

uint64_t *OS_os_log.crlChangeShape.unsafeMutableAddressor()
{
  if (qword_100083008 != -1)
    swift_once(&qword_100083008, sub_10001A730);
  return &static OS_os_log.crlChangeShape;
}

id static OS_os_log.crlChangeShape.getter()
{
  return sub_10001D6A0(&qword_100083008, (id *)&static OS_os_log.crlChangeShape);
}

void static OS_os_log.crlChangeShape.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083008, (void **)&static OS_os_log.crlChangeShape, (uint64_t)sub_10001A730);
}

uint64_t (*static OS_os_log.crlChangeShape.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083008 != -1)
    swift_once(&qword_100083008, sub_10001A730);
  swift_beginAccess(&static OS_os_log.crlChangeShape, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001A8C8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLCloudQuotaMessagingCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLCloudQuotaMessagingCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLCloudQuotaMessagingCat_log_t, &CRLCloudQuotaMessagingCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlCloudQuotaMessaging = (uint64_t)v1;
}

uint64_t *OS_os_log.crlCloudQuotaMessaging.unsafeMutableAddressor()
{
  if (qword_100083010 != -1)
    swift_once(&qword_100083010, sub_10001A8C8);
  return &static OS_os_log.crlCloudQuotaMessaging;
}

id static OS_os_log.crlCloudQuotaMessaging.getter()
{
  return sub_10001D6A0(&qword_100083010, (id *)&static OS_os_log.crlCloudQuotaMessaging);
}

void static OS_os_log.crlCloudQuotaMessaging.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083010, (void **)&static OS_os_log.crlCloudQuotaMessaging, (uint64_t)sub_10001A8C8);
}

uint64_t (*static OS_os_log.crlCloudQuotaMessaging.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083010 != -1)
    swift_once(&qword_100083010, sub_10001A8C8);
  swift_beginAccess(&static OS_os_log.crlCloudQuotaMessaging, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001AA60()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRL3DBreakthroughCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRL3DBreakthroughCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRL3DBreakthroughCat_log_t, &CRL3DBreakthroughCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crl3DBreakthrough = (uint64_t)v1;
}

uint64_t *OS_os_log.crl3DBreakthrough.unsafeMutableAddressor()
{
  if (qword_100083018 != -1)
    swift_once(&qword_100083018, sub_10001AA60);
  return &static OS_os_log.crl3DBreakthrough;
}

id static OS_os_log.crl3DBreakthrough.getter()
{
  return sub_10001D6A0(&qword_100083018, (id *)&static OS_os_log.crl3DBreakthrough);
}

void static OS_os_log.crl3DBreakthrough.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083018, (void **)&static OS_os_log.crl3DBreakthrough, (uint64_t)sub_10001AA60);
}

uint64_t (*static OS_os_log.crl3DBreakthrough.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083018 != -1)
    swift_once(&qword_100083018, sub_10001AA60);
  swift_beginAccess(&static OS_os_log.crl3DBreakthrough, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001ABF8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLLayerAnimationCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLLayerAnimationCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLLayerAnimationCat_log_t, &CRLLayerAnimationCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlLayerAnimation = (uint64_t)v1;
}

uint64_t *OS_os_log.crlLayerAnimation.unsafeMutableAddressor()
{
  if (qword_100083020 != -1)
    swift_once(&qword_100083020, sub_10001ABF8);
  return &static OS_os_log.crlLayerAnimation;
}

id static OS_os_log.crlLayerAnimation.getter()
{
  return sub_10001D6A0(&qword_100083020, (id *)&static OS_os_log.crlLayerAnimation);
}

void static OS_os_log.crlLayerAnimation.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083020, (void **)&static OS_os_log.crlLayerAnimation, (uint64_t)sub_10001ABF8);
}

uint64_t (*static OS_os_log.crlLayerAnimation.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083020 != -1)
    swift_once(&qword_100083020, sub_10001ABF8);
  swift_beginAccess(&static OS_os_log.crlLayerAnimation, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001AD90()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLAnimationImplCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLAnimationImplCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLAnimationImplCat_log_t, &CRLAnimationImplCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlAnimationImpl = (uint64_t)v1;
}

uint64_t *OS_os_log.crlAnimationImpl.unsafeMutableAddressor()
{
  if (qword_100083028 != -1)
    swift_once(&qword_100083028, sub_10001AD90);
  return &static OS_os_log.crlAnimationImpl;
}

id static OS_os_log.crlAnimationImpl.getter()
{
  return sub_10001D6A0(&qword_100083028, (id *)&static OS_os_log.crlAnimationImpl);
}

void static OS_os_log.crlAnimationImpl.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083028, (void **)&static OS_os_log.crlAnimationImpl, (uint64_t)sub_10001AD90);
}

uint64_t (*static OS_os_log.crlAnimationImpl.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083028 != -1)
    swift_once(&qword_100083028, sub_10001AD90);
  swift_beginAccess(&static OS_os_log.crlAnimationImpl, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001AF28()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLMiniFormatterCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLMiniFormatterCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLMiniFormatterCat_log_t, &CRLMiniFormatterCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.crlMiniFormatter = (uint64_t)v1;
}

uint64_t *OS_os_log.crlMiniFormatter.unsafeMutableAddressor()
{
  if (qword_100083030 != -1)
    swift_once(&qword_100083030, sub_10001AF28);
  return &static OS_os_log.crlMiniFormatter;
}

id static OS_os_log.crlMiniFormatter.getter()
{
  return sub_10001D6A0(&qword_100083030, (id *)&static OS_os_log.crlMiniFormatter);
}

void static OS_os_log.crlMiniFormatter.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083030, (void **)&static OS_os_log.crlMiniFormatter, (uint64_t)sub_10001AF28);
}

uint64_t (*static OS_os_log.crlMiniFormatter.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083030 != -1)
    swift_once(&qword_100083030, sub_10001AF28);
  swift_beginAccess(&static OS_os_log.crlMiniFormatter, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001B0C0()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLSceneManagementCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLSceneManagementCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLSceneManagementCat_log_t, &CRLSceneManagementCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.sceneManagement = (uint64_t)v1;
}

uint64_t *OS_os_log.sceneManagement.unsafeMutableAddressor()
{
  if (qword_100083038 != -1)
    swift_once(&qword_100083038, sub_10001B0C0);
  return &static OS_os_log.sceneManagement;
}

id static OS_os_log.sceneManagement.getter()
{
  return sub_10001D6A0(&qword_100083038, (id *)&static OS_os_log.sceneManagement);
}

void static OS_os_log.sceneManagement.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083038, (void **)&static OS_os_log.sceneManagement, (uint64_t)sub_10001B0C0);
}

uint64_t (*static OS_os_log.sceneManagement.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083038 != -1)
    swift_once(&qword_100083038, sub_10001B0C0);
  swift_beginAccess(&static OS_os_log.sceneManagement, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001B260()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLCompositionCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLCompositionCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLCompositionCat_log_t, &CRLCompositionCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.composition = (uint64_t)v1;
}

uint64_t *OS_os_log.composition.unsafeMutableAddressor()
{
  if (qword_100083040 != -1)
    swift_once(&qword_100083040, sub_10001B260);
  return &static OS_os_log.composition;
}

id static OS_os_log.composition.getter()
{
  return sub_10001D6A0(&qword_100083040, (id *)&static OS_os_log.composition);
}

void static OS_os_log.composition.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083040, (void **)&static OS_os_log.composition, (uint64_t)sub_10001B260);
}

uint64_t (*static OS_os_log.composition.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083040 != -1)
    swift_once(&qword_100083040, sub_10001B260);
  swift_beginAccess(&static OS_os_log.composition, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001B3FC()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLViewControllerCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLViewControllerCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLViewControllerCat_log_t, &CRLViewControllerCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.CRLViewController = (uint64_t)v1;
}

uint64_t *OS_os_log.CRLViewController.unsafeMutableAddressor()
{
  if (qword_100083048 != -1)
    swift_once(&qword_100083048, sub_10001B3FC);
  return &static OS_os_log.CRLViewController;
}

id static OS_os_log.CRLViewController.getter()
{
  return sub_10001D6A0(&qword_100083048, (id *)&static OS_os_log.CRLViewController);
}

void static OS_os_log.CRLViewController.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083048, (void **)&static OS_os_log.CRLViewController, (uint64_t)sub_10001B3FC);
}

uint64_t (*static OS_os_log.CRLViewController.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083048 != -1)
    swift_once(&qword_100083048, sub_10001B3FC);
  swift_beginAccess(&static OS_os_log.CRLViewController, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001B594()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLAppIntentsCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLAppIntentsCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLAppIntentsCat_log_t, &CRLAppIntentsCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.appIntents = (uint64_t)v1;
}

uint64_t *OS_os_log.appIntents.unsafeMutableAddressor()
{
  if (qword_100083050 != -1)
    swift_once(&qword_100083050, sub_10001B594);
  return &static OS_os_log.appIntents;
}

id static OS_os_log.appIntents.getter()
{
  return sub_10001D6A0(&qword_100083050, (id *)&static OS_os_log.appIntents);
}

void static OS_os_log.appIntents.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083050, (void **)&static OS_os_log.appIntents, (uint64_t)sub_10001B594);
}

uint64_t (*static OS_os_log.appIntents.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083050 != -1)
    swift_once(&qword_100083050, sub_10001B594);
  swift_beginAccess(&static OS_os_log.appIntents, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001B72C()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLAppStateCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLAppStateCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLAppStateCat_log_t, &CRLAppStateCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.appState = (uint64_t)v1;
}

uint64_t *OS_os_log.appState.unsafeMutableAddressor()
{
  if (qword_100083058 != -1)
    swift_once(&qword_100083058, sub_10001B72C);
  return &static OS_os_log.appState;
}

id static OS_os_log.appState.getter()
{
  return sub_10001D6A0(&qword_100083058, (id *)&static OS_os_log.appState);
}

void static OS_os_log.appState.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083058, (void **)&static OS_os_log.appState, (uint64_t)sub_10001B72C);
}

uint64_t (*static OS_os_log.appState.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083058 != -1)
    swift_once(&qword_100083058, sub_10001B72C);
  swift_beginAccess(&static OS_os_log.appState, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001B8C0()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLInteractionCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLInteractionCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLInteractionCat_log_t, &CRLInteractionCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.interaction = (uint64_t)v1;
}

uint64_t *OS_os_log.interaction.unsafeMutableAddressor()
{
  if (qword_100083060 != -1)
    swift_once(&qword_100083060, sub_10001B8C0);
  return &static OS_os_log.interaction;
}

id static OS_os_log.interaction.getter()
{
  return sub_10001D6A0(&qword_100083060, (id *)&static OS_os_log.interaction);
}

void static OS_os_log.interaction.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083060, (void **)&static OS_os_log.interaction, (uint64_t)sub_10001B8C0);
}

uint64_t (*static OS_os_log.interaction.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083060 != -1)
    swift_once(&qword_100083060, sub_10001B8C0);
  swift_beginAccess(&static OS_os_log.interaction, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001BA5C()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLContentStateCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLContentStateCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLContentStateCat_log_t, &CRLContentStateCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.contentState = (uint64_t)v1;
}

uint64_t *OS_os_log.contentState.unsafeMutableAddressor()
{
  if (qword_100083068 != -1)
    swift_once(&qword_100083068, sub_10001BA5C);
  return &static OS_os_log.contentState;
}

id static OS_os_log.contentState.getter()
{
  return sub_10001D6A0(&qword_100083068, (id *)&static OS_os_log.contentState);
}

void static OS_os_log.contentState.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083068, (void **)&static OS_os_log.contentState, (uint64_t)sub_10001BA5C);
}

uint64_t (*static OS_os_log.contentState.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083068 != -1)
    swift_once(&qword_100083068, sub_10001BA5C);
  swift_beginAccess(&static OS_os_log.contentState, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001BBF8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLBoardDataStoreCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLBoardDataStoreCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLBoardDataStoreCat_log_t, &CRLBoardDataStoreCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.boardStore = (uint64_t)v1;
}

uint64_t *OS_os_log.boardStore.unsafeMutableAddressor()
{
  if (qword_100083070 != -1)
    swift_once(&qword_100083070, sub_10001BBF8);
  return &static OS_os_log.boardStore;
}

id static OS_os_log.boardStore.getter()
{
  return sub_10001D6A0(&qword_100083070, (id *)&static OS_os_log.boardStore);
}

void static OS_os_log.boardStore.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083070, (void **)&static OS_os_log.boardStore, (uint64_t)sub_10001BBF8);
}

uint64_t (*static OS_os_log.boardStore.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083070 != -1)
    swift_once(&qword_100083070, sub_10001BBF8);
  swift_beginAccess(&static OS_os_log.boardStore, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001BD90()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLFileProviderStoreCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLFileProviderStoreCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLFileProviderStoreCat_log_t, &CRLFileProviderStoreCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.fileProviderStore = (uint64_t)v1;
}

uint64_t *OS_os_log.fileProviderStore.unsafeMutableAddressor()
{
  if (qword_100083078 != -1)
    swift_once(&qword_100083078, sub_10001BD90);
  return &static OS_os_log.fileProviderStore;
}

id static OS_os_log.fileProviderStore.getter()
{
  return sub_10001D6A0(&qword_100083078, (id *)&static OS_os_log.fileProviderStore);
}

void static OS_os_log.fileProviderStore.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083078, (void **)&static OS_os_log.fileProviderStore, (uint64_t)sub_10001BD90);
}

uint64_t (*static OS_os_log.fileProviderStore.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083078 != -1)
    swift_once(&qword_100083078, sub_10001BD90);
  swift_beginAccess(&static OS_os_log.fileProviderStore, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001BF28()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLPersistenceCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLPersistenceCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLPersistenceCat_log_t, &CRLPersistenceCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.persistence = (uint64_t)v1;
}

uint64_t *OS_os_log.persistence.unsafeMutableAddressor()
{
  if (qword_100083080 != -1)
    swift_once(&qword_100083080, sub_10001BF28);
  return &static OS_os_log.persistence;
}

id static OS_os_log.persistence.getter()
{
  return sub_10001D6A0(&qword_100083080, (id *)&static OS_os_log.persistence);
}

void static OS_os_log.persistence.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083080, (void **)&static OS_os_log.persistence, (uint64_t)sub_10001BF28);
}

uint64_t (*static OS_os_log.persistence.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083080 != -1)
    swift_once(&qword_100083080, sub_10001BF28);
  swift_beginAccess(&static OS_os_log.persistence, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001C0C4()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLDataSyncCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLDataSyncCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLDataSyncCat_log_t, &CRLDataSyncCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.dataSync = (uint64_t)v1;
}

uint64_t *OS_os_log.dataSync.unsafeMutableAddressor()
{
  if (qword_100083088 != -1)
    swift_once(&qword_100083088, sub_10001C0C4);
  return &static OS_os_log.dataSync;
}

id static OS_os_log.dataSync.getter()
{
  return sub_10001D6A0(&qword_100083088, (id *)&static OS_os_log.dataSync);
}

void static OS_os_log.dataSync.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083088, (void **)&static OS_os_log.dataSync, (uint64_t)sub_10001C0C4);
}

uint64_t (*static OS_os_log.dataSync.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083088 != -1)
    swift_once(&qword_100083088, sub_10001C0C4);
  swift_beginAccess(&static OS_os_log.dataSync, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001C258()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLCommandControllerCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLCommandControllerCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLCommandControllerCat_log_t, &CRLCommandControllerCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.commandController = (uint64_t)v1;
}

uint64_t *OS_os_log.commandController.unsafeMutableAddressor()
{
  if (qword_100083090 != -1)
    swift_once(&qword_100083090, sub_10001C258);
  return &static OS_os_log.commandController;
}

id static OS_os_log.commandController.getter()
{
  return sub_10001D6A0(&qword_100083090, (id *)&static OS_os_log.commandController);
}

void static OS_os_log.commandController.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083090, (void **)&static OS_os_log.commandController, (uint64_t)sub_10001C258);
}

uint64_t (*static OS_os_log.commandController.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083090 != -1)
    swift_once(&qword_100083090, sub_10001C258);
  swift_beginAccess(&static OS_os_log.commandController, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001C3F0()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLSuspendResumeCollaborationCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLSuspendResumeCollaborationCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLSuspendResumeCollaborationCat_log_t, &CRLSuspendResumeCollaborationCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.suspendResumeCollaboration = (uint64_t)v1;
}

uint64_t *OS_os_log.suspendResumeCollaboration.unsafeMutableAddressor()
{
  if (qword_100083098 != -1)
    swift_once(&qword_100083098, sub_10001C3F0);
  return &static OS_os_log.suspendResumeCollaboration;
}

id static OS_os_log.suspendResumeCollaboration.getter()
{
  return sub_10001D6A0(&qword_100083098, (id *)&static OS_os_log.suspendResumeCollaboration);
}

void static OS_os_log.suspendResumeCollaboration.setter(void *a1)
{
  sub_10001D710(a1, &qword_100083098, (void **)&static OS_os_log.suspendResumeCollaboration, (uint64_t)sub_10001C3F0);
}

uint64_t (*static OS_os_log.suspendResumeCollaboration.modify(uint64_t a1))(_QWORD)
{
  if (qword_100083098 != -1)
    swift_once(&qword_100083098, sub_10001C3F0);
  swift_beginAccess(&static OS_os_log.suspendResumeCollaboration, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001C588()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLCarmelRealTimeSyncCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLCarmelRealTimeSyncCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLCarmelRealTimeSyncCat_log_t, &CRLCarmelRealTimeSyncCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.realTimeSync = (uint64_t)v1;
}

uint64_t *OS_os_log.realTimeSync.unsafeMutableAddressor()
{
  if (qword_1000830A0 != -1)
    swift_once(&qword_1000830A0, sub_10001C588);
  return &static OS_os_log.realTimeSync;
}

id static OS_os_log.realTimeSync.getter()
{
  return sub_10001D6A0(&qword_1000830A0, (id *)&static OS_os_log.realTimeSync);
}

void static OS_os_log.realTimeSync.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830A0, (void **)&static OS_os_log.realTimeSync, (uint64_t)sub_10001C588);
}

uint64_t (*static OS_os_log.realTimeSync.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830A0 != -1)
    swift_once(&qword_1000830A0, sub_10001C588);
  swift_beginAccess(&static OS_os_log.realTimeSync, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001C720()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLKeyboardInputCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLKeyboardInputCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLKeyboardInputCat_log_t, &CRLKeyboardInputCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.keyboardInput = (uint64_t)v1;
}

uint64_t *OS_os_log.keyboardInput.unsafeMutableAddressor()
{
  if (qword_1000830A8 != -1)
    swift_once(&qword_1000830A8, sub_10001C720);
  return &static OS_os_log.keyboardInput;
}

id static OS_os_log.keyboardInput.getter()
{
  return sub_10001D6A0(&qword_1000830A8, (id *)&static OS_os_log.keyboardInput);
}

void static OS_os_log.keyboardInput.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830A8, (void **)&static OS_os_log.keyboardInput, (uint64_t)sub_10001C720);
}

uint64_t (*static OS_os_log.keyboardInput.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830A8 != -1)
    swift_once(&qword_1000830A8, sub_10001C720);
  swift_beginAccess(&static OS_os_log.keyboardInput, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001C8C0()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLTargetGestureCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLTargetGestureCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLTargetGestureCat_log_t, &CRLTargetGestureCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.target_gesture = (uint64_t)v1;
}

uint64_t *OS_os_log.target_gesture.unsafeMutableAddressor()
{
  if (qword_1000830B0 != -1)
    swift_once(&qword_1000830B0, sub_10001C8C0);
  return &static OS_os_log.target_gesture;
}

id static OS_os_log.target_gesture.getter()
{
  return sub_10001D6A0(&qword_1000830B0, (id *)&static OS_os_log.target_gesture);
}

void static OS_os_log.target_gesture.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830B0, (void **)&static OS_os_log.target_gesture, (uint64_t)sub_10001C8C0);
}

uint64_t (*static OS_os_log.target_gesture.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830B0 != -1)
    swift_once(&qword_1000830B0, sub_10001C8C0);
  swift_beginAccess(&static OS_os_log.target_gesture, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001CA60()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLDataStoreUpgradeCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLDataStoreUpgradeCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLDataStoreUpgradeCat_log_t, &CRLDataStoreUpgradeCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.upgrade = (uint64_t)v1;
}

uint64_t *OS_os_log.upgrade.unsafeMutableAddressor()
{
  if (qword_1000830B8 != -1)
    swift_once(&qword_1000830B8, sub_10001CA60);
  return &static OS_os_log.upgrade;
}

id static OS_os_log.upgrade.getter()
{
  return sub_10001D6A0(&qword_1000830B8, (id *)&static OS_os_log.upgrade);
}

void static OS_os_log.upgrade.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830B8, (void **)&static OS_os_log.upgrade, (uint64_t)sub_10001CA60);
}

uint64_t (*static OS_os_log.upgrade.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830B8 != -1)
    swift_once(&qword_1000830B8, sub_10001CA60);
  swift_beginAccess(&static OS_os_log.upgrade, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001CBF8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLPasteboardCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLPasteboardCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLPasteboardCat_log_t, &CRLPasteboardCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.pasteboard = (uint64_t)v1;
}

uint64_t *OS_os_log.pasteboard.unsafeMutableAddressor()
{
  if (qword_1000830C0 != -1)
    swift_once(&qword_1000830C0, sub_10001CBF8);
  return &static OS_os_log.pasteboard;
}

id static OS_os_log.pasteboard.getter()
{
  return sub_10001D6A0(&qword_1000830C0, (id *)&static OS_os_log.pasteboard);
}

void static OS_os_log.pasteboard.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830C0, (void **)&static OS_os_log.pasteboard, (uint64_t)sub_10001CBF8);
}

uint64_t (*static OS_os_log.pasteboard.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830C0 != -1)
    swift_once(&qword_1000830C0, sub_10001CBF8);
  swift_beginAccess(&static OS_os_log.pasteboard, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001CD90()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLBoardItemDataSizeCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLBoardItemDataSizeCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLBoardItemDataSizeCat_log_t, &CRLBoardItemDataSizeCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.boardItemDataSize = (uint64_t)v1;
}

uint64_t *OS_os_log.boardItemDataSize.unsafeMutableAddressor()
{
  if (qword_1000830C8 != -1)
    swift_once(&qword_1000830C8, sub_10001CD90);
  return &static OS_os_log.boardItemDataSize;
}

id static OS_os_log.boardItemDataSize.getter()
{
  return sub_10001D6A0(&qword_1000830C8, (id *)&static OS_os_log.boardItemDataSize);
}

void static OS_os_log.boardItemDataSize.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830C8, (void **)&static OS_os_log.boardItemDataSize, (uint64_t)sub_10001CD90);
}

uint64_t (*static OS_os_log.boardItemDataSize.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830C8 != -1)
    swift_once(&qword_1000830C8, sub_10001CD90);
  swift_beginAccess(&static OS_os_log.boardItemDataSize, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001CF28()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLBoardItemLifecycleCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLBoardItemLifecycleCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLBoardItemLifecycleCat_log_t, &CRLBoardItemLifecycleCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.boardItemLifecycle = (uint64_t)v1;
}

uint64_t *OS_os_log.boardItemLifecycle.unsafeMutableAddressor()
{
  if (qword_1000830D0 != -1)
    swift_once(&qword_1000830D0, sub_10001CF28);
  return &static OS_os_log.boardItemLifecycle;
}

id static OS_os_log.boardItemLifecycle.getter()
{
  return sub_10001D6A0(&qword_1000830D0, (id *)&static OS_os_log.boardItemLifecycle);
}

void static OS_os_log.boardItemLifecycle.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830D0, (void **)&static OS_os_log.boardItemLifecycle, (uint64_t)sub_10001CF28);
}

uint64_t (*static OS_os_log.boardItemLifecycle.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830D0 != -1)
    swift_once(&qword_1000830D0, sub_10001CF28);
  swift_beginAccess(&static OS_os_log.boardItemLifecycle, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001D0C0()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLAssetManagementCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLAssetManagementCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLAssetManagementCat_log_t, &CRLAssetManagementCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.assetManagement = (uint64_t)v1;
}

uint64_t *OS_os_log.assetManagement.unsafeMutableAddressor()
{
  if (qword_1000830D8 != -1)
    swift_once(&qword_1000830D8, sub_10001D0C0);
  return &static OS_os_log.assetManagement;
}

id static OS_os_log.assetManagement.getter()
{
  return sub_10001D6A0(&qword_1000830D8, (id *)&static OS_os_log.assetManagement);
}

void static OS_os_log.assetManagement.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830D8, (void **)&static OS_os_log.assetManagement, (uint64_t)sub_10001D0C0);
}

uint64_t (*static OS_os_log.assetManagement.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830D8 != -1)
    swift_once(&qword_1000830D8, sub_10001D0C0);
  swift_beginAccess(&static OS_os_log.assetManagement, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001D260()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLShareStateCat_log_t, v3, 33, 0);
  swift_beginAccess(&CRLShareStateCat_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLShareStateCat_log_t, &CRLShareStateCat_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.shareState = (uint64_t)v1;
}

uint64_t *OS_os_log.shareState.unsafeMutableAddressor()
{
  if (qword_1000830E0 != -1)
    swift_once(&qword_1000830E0, sub_10001D260);
  return &static OS_os_log.shareState;
}

id static OS_os_log.shareState.getter()
{
  return sub_10001D6A0(&qword_1000830E0, (id *)&static OS_os_log.shareState);
}

void static OS_os_log.shareState.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830E0, (void **)&static OS_os_log.shareState, (uint64_t)sub_10001D260);
}

uint64_t (*static OS_os_log.shareState.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830E0 != -1)
    swift_once(&qword_1000830E0, sub_10001D260);
  swift_beginAccess(&static OS_os_log.shareState, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001D3F8()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLDrawingDataDetectors_log_t, v3, 33, 0);
  swift_beginAccess(&CRLDrawingDataDetectors_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLDrawingDataDetectors_log_t, &CRLDrawingDataDetectors_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.DrawingDataDetectors = (uint64_t)v1;
}

uint64_t *OS_os_log.DrawingDataDetectors.unsafeMutableAddressor()
{
  if (qword_1000830E8 != -1)
    swift_once(&qword_1000830E8, sub_10001D3F8);
  return &static OS_os_log.DrawingDataDetectors;
}

id static OS_os_log.DrawingDataDetectors.getter()
{
  return sub_10001D6A0(&qword_1000830E8, (id *)&static OS_os_log.DrawingDataDetectors);
}

void static OS_os_log.DrawingDataDetectors.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830E8, (void **)&static OS_os_log.DrawingDataDetectors, (uint64_t)sub_10001D3F8);
}

uint64_t (*static OS_os_log.DrawingDataDetectors.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830E8 != -1)
    swift_once(&qword_1000830E8, sub_10001D3F8);
  swift_beginAccess(&static OS_os_log.DrawingDataDetectors, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10001D590()
{
  NSString v0;
  id v1;
  _BYTE v2[24];
  _BYTE v3[24];

  swift_beginAccess(&CRLSideStore_log_t, v3, 33, 0);
  swift_beginAccess(&CRLSideStore_init_token, v2, 33, 0);
  v0 = String._bridgeToObjectiveC()();
  v1 = CRLLogEnsureCreated(v0, (id *)&CRLSideStore_log_t, &CRLSideStore_init_token);
  swift_endAccess(v2);
  swift_endAccess(v3);

  static OS_os_log.sideStore = (uint64_t)v1;
}

uint64_t *OS_os_log.sideStore.unsafeMutableAddressor()
{
  if (qword_1000830F0 != -1)
    swift_once(&qword_1000830F0, sub_10001D590);
  return &static OS_os_log.sideStore;
}

id static OS_os_log.sideStore.getter()
{
  return sub_10001D6A0(&qword_1000830F0, (id *)&static OS_os_log.sideStore);
}

id sub_10001D6A0(_QWORD *a1, id *a2)
{
  _BYTE v4[24];

  if (*a1 != -1)
    swift_once();
  swift_beginAccess(a2, v4, 0, 0);
  return *a2;
}

void static OS_os_log.sideStore.setter(void *a1)
{
  sub_10001D710(a1, &qword_1000830F0, (void **)&static OS_os_log.sideStore, (uint64_t)sub_10001D590);
}

void sub_10001D710(void *a1, _QWORD *a2, void **a3, uint64_t a4)
{
  void *v6;
  _BYTE v7[24];

  if (*a2 != -1)
    swift_once(a2, a4);
  swift_beginAccess(a3, v7, 1, 0);
  v6 = *a3;
  *a3 = a1;

}

uint64_t (*static OS_os_log.sideStore.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000830F0 != -1)
    swift_once(&qword_1000830F0, sub_10001D590);
  swift_beginAccess(&static OS_os_log.sideStore, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10001D7E0(uint64_t a1, const mach_header_64 *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const mach_header_64 *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  switch(*(_QWORD *)(a7 + 16))
  {
    case 0:
      v14 = a4;
      v15 = a5;
      v16 = a6;
      v17 = a2;
      goto LABEL_4;
    case 1:
      v19 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061930;
      v21 = v20 + 32;
      v22 = a7 + 32;
      goto LABEL_25;
    case 2:
      v23 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v23, 112, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061920;
      sub_10001E5C8(a7 + 32, v20 + 32);
      v21 = v20 + 72;
      v22 = a7 + 72;
      goto LABEL_25;
    case 3:
      v24 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v24, 152, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061910;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      v21 = v20 + 112;
      v22 = a7 + 112;
      goto LABEL_25;
    case 4:
      v25 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v25, 192, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061900;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      v21 = v20 + 152;
      v22 = a7 + 152;
      goto LABEL_25;
    case 5:
      v26 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v26, 232, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1000618F0;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      v21 = v20 + 192;
      v22 = a7 + 192;
      goto LABEL_25;
    case 6:
      v27 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v27, 272, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1000618E0;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      v21 = v20 + 232;
      v22 = a7 + 232;
      goto LABEL_25;
    case 7:
      v28 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v28, 312, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1000618D0;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      v21 = v20 + 272;
      v22 = a7 + 272;
      goto LABEL_25;
    case 8:
      v29 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v29, 352, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1000618C0;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      v21 = v20 + 312;
      v22 = a7 + 312;
      goto LABEL_25;
    case 9:
      v30 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v30, 392, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1000618B0;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      v21 = v20 + 352;
      v22 = a7 + 352;
      goto LABEL_25;
    case 0xALL:
      v31 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v31, 432, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1000618A0;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      v21 = v20 + 392;
      v22 = a7 + 392;
      goto LABEL_25;
    case 0xBLL:
      v32 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v32, 472, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061890;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      v21 = v20 + 432;
      v22 = a7 + 432;
      goto LABEL_25;
    case 0xCLL:
      v33 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v33, 512, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061880;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      v21 = v20 + 472;
      v22 = a7 + 472;
      goto LABEL_25;
    case 0xDLL:
      v34 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v34, 552, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061870;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      sub_10001E5C8(a7 + 472, v20 + 472);
      v21 = v20 + 512;
      v22 = a7 + 512;
      goto LABEL_25;
    case 0xELL:
      v35 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v35, 592, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061860;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      sub_10001E5C8(a7 + 472, v20 + 472);
      sub_10001E5C8(a7 + 512, v20 + 512);
      v21 = v20 + 552;
      v22 = a7 + 552;
      goto LABEL_25;
    case 0xFLL:
      v36 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v36, 632, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061850;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      sub_10001E5C8(a7 + 472, v20 + 472);
      sub_10001E5C8(a7 + 512, v20 + 512);
      sub_10001E5C8(a7 + 552, v20 + 552);
      v21 = v20 + 592;
      v22 = a7 + 592;
      goto LABEL_25;
    case 0x10:
      v37 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v37, 672, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061840;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      sub_10001E5C8(a7 + 472, v20 + 472);
      sub_10001E5C8(a7 + 512, v20 + 512);
      sub_10001E5C8(a7 + 552, v20 + 552);
      sub_10001E5C8(a7 + 592, v20 + 592);
      v21 = v20 + 632;
      v22 = a7 + 632;
      goto LABEL_25;
    case 0x11:
      v38 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v38, 712, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061830;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      sub_10001E5C8(a7 + 472, v20 + 472);
      sub_10001E5C8(a7 + 512, v20 + 512);
      sub_10001E5C8(a7 + 552, v20 + 552);
      sub_10001E5C8(a7 + 592, v20 + 592);
      sub_10001E5C8(a7 + 632, v20 + 632);
      v21 = v20 + 672;
      v22 = a7 + 672;
      goto LABEL_25;
    case 0x12:
      v39 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v39, 752, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061820;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      sub_10001E5C8(a7 + 472, v20 + 472);
      sub_10001E5C8(a7 + 512, v20 + 512);
      sub_10001E5C8(a7 + 552, v20 + 552);
      sub_10001E5C8(a7 + 592, v20 + 592);
      sub_10001E5C8(a7 + 632, v20 + 632);
      sub_10001E5C8(a7 + 672, v20 + 672);
      v21 = v20 + 712;
      v22 = a7 + 712;
      goto LABEL_25;
    case 0x13:
      v40 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v40, 792, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061810;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      sub_10001E5C8(a7 + 472, v20 + 472);
      sub_10001E5C8(a7 + 512, v20 + 512);
      sub_10001E5C8(a7 + 552, v20 + 552);
      sub_10001E5C8(a7 + 592, v20 + 592);
      sub_10001E5C8(a7 + 632, v20 + 632);
      sub_10001E5C8(a7 + 672, v20 + 672);
      sub_10001E5C8(a7 + 712, v20 + 712);
      v21 = v20 + 752;
      v22 = a7 + 752;
      goto LABEL_25;
    case 0x14:
      v41 = sub_1000131C0((uint64_t *)&unk_1000852D0);
      v20 = swift_allocObject(v41, 832, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100061800;
      sub_10001E5C8(a7 + 32, v20 + 32);
      sub_10001E5C8(a7 + 72, v20 + 72);
      sub_10001E5C8(a7 + 112, v20 + 112);
      sub_10001E5C8(a7 + 152, v20 + 152);
      sub_10001E5C8(a7 + 192, v20 + 192);
      sub_10001E5C8(a7 + 232, v20 + 232);
      sub_10001E5C8(a7 + 272, v20 + 272);
      sub_10001E5C8(a7 + 312, v20 + 312);
      sub_10001E5C8(a7 + 352, v20 + 352);
      sub_10001E5C8(a7 + 392, v20 + 392);
      sub_10001E5C8(a7 + 432, v20 + 432);
      sub_10001E5C8(a7 + 472, v20 + 472);
      sub_10001E5C8(a7 + 512, v20 + 512);
      sub_10001E5C8(a7 + 552, v20 + 552);
      sub_10001E5C8(a7 + 592, v20 + 592);
      sub_10001E5C8(a7 + 632, v20 + 632);
      sub_10001E5C8(a7 + 672, v20 + 672);
      sub_10001E5C8(a7 + 712, v20 + 712);
      sub_10001E5C8(a7 + 752, v20 + 752);
      v21 = v20 + 792;
      v22 = a7 + 792;
LABEL_25:
      sub_10001E5C8(v22, v21);
      os_log(_:dso:log:type:_:)(a4, a5, a6, a2, a1, a3, v20);
      result = swift_bridgeObjectRelease(v20);
      break;
    default:
      v14 = ">>ERROR: TOO MANY os_log() ARGUMENTS. MAXIMUM IS 20. See CRLLogHelper.swift<<";
      v17 = &_mh_execute_header;
      v15 = 77;
      v16 = 2;
LABEL_4:
      result = os_log(_:dso:log:type:_:)(v14, v15, v16, v17, a1, a3, &_swiftEmptyArrayStorage);
      break;
  }
  return result;
}

uint64_t sub_10001E5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10001E610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000131C0((uint64_t *)&unk_100085390);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100024F88(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001E730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000131C0((uint64_t *)&unk_100084D70);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100024F88(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001E840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000131C0(&qword_100084140);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002E530(v7, (uint64_t)&v16, &qword_100084148);
    v8 = v16;
    v9 = v17;
    result = sub_100024F88(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10002BD90(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001E974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000131C0((uint64_t *)&unk_100085340);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    swift_bridgeObjectRetain(*v6);
    result = sub_1000270B0();
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (_QWORD *)(v4[7] + 16 * result);
    *v11 = v8;
    v11[1] = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v6 += 2;
    v4[2] = v14;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001EA68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_1000131C0(&qword_100084160);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_1000131C0(&qword_100084168);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10002E530(v13, (uint64_t)v5, &qword_100084160);
    result = sub_10002501C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
    result = sub_10002BDA4(v10, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001EC18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000131C0(&qword_100084180);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002E530(v7, (uint64_t)&v14, &qword_100084188);
    v8 = v14;
    result = sub_10002508C(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10002BD90(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001ED44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_1000131C0(&qword_1000844A0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_1000131C0((uint64_t *)&unk_100085350);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10002E530(v13, (uint64_t)v5, &qword_1000844A0);
    result = sub_10002501C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = (_OWORD *)(v8[7] + 32 * v17);
    v21 = *((_OWORD *)v10 + 1);
    *v20 = *(_OWORD *)v10;
    v20[1] = v21;
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10001EEE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001EF10 + 4 * byte_100061970[*v0]))(7107189, 0xE300000000000000);
}

uint64_t sub_10001EF10()
{
  return 0x6D6B6F6F426C7275;
}

uint64_t sub_10001EF34()
{
  return 0x72756769666E6F63;
}

uint64_t sub_10001EF58()
{
  return 0x46746C7561666564;
}

uint64_t sub_10001EF78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100027108(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001EF9C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10001EFA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B084();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001EFD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B084();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001EFF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001F02C + 4 * byte_100061974[*v0]))(0x4F466172656D6163, 0xE900000000000056);
}

uint64_t sub_10001F02C()
{
  return 0x7461746E6569726FLL;
}

uint64_t sub_10001F04C()
{
  return 0x724664656C616373;
}

unint64_t sub_10001F070()
{
  return 0xD000000000000011;
}

uint64_t sub_10001F08C()
{
  return 0x73746E65746E6F63;
}

uint64_t sub_10001F0B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100027310(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001F0D4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10001F0E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002BA58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002BA58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F130()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001F16C + 4 * byte_100061979[*v0]))(0x6D696E4179616C70, 0xEE00736E6F697461);
}

uint64_t sub_10001F16C()
{
  return 0x696E416573756170;
}

uint64_t sub_10001F1BC()
{
  return 0x6D696E41706F7473;
}

uint64_t sub_10001F1D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100027590(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001F1F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B194();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F21C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B194();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F244(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B2A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F26C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B2A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10001F294(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10001F2AC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6150737472617473;
  else
    return 0xD000000000000012;
}

uint64_t sub_10001F2F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002781C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001F318(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10001F324(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B2E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F34C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B2E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F374(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B21C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F39C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B21C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F3C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B260();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F3EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B260();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F414(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B1D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F43C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B1D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F464()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001F494 + 4 * byte_10006197E[*v0]))(0x6465737561507369, 0xE800000000000000);
}

uint64_t sub_10001F494()
{
  return 0x656C706D6F437369;
}

uint64_t sub_10001F4B0()
{
  return 0x6E6979616C507369;
}

uint64_t sub_10001F4D0()
{
  return 0x6570706F74537369;
}

uint64_t sub_10001F4EC()
{
  return 0x6465657073;
}

uint64_t sub_10001F500@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100027920(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001F524(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B480();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F54C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B480();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F580(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B370();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F5A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B370();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F5D0()
{
  _BYTE *v0;

  if (*v0)
    return 0x657669746361;
  else
    return 0x6576697463616E69;
}

uint64_t sub_10001F608@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100027B54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001F62C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B32C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F654(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B32C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F67C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B3F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F6A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B3F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F6CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001F704 + 4 * byte_100061983[*v0]))(0x756F426C65646F6DLL, 0xEB0000000073646ELL);
}

uint64_t sub_10001F704()
{
  return 0x6F6974616D696E61;
}

uint64_t sub_10001F720()
{
  return 0x6956734977656976;
}

uint64_t sub_10001F744()
{
  return 0x617461646174656DLL;
}

uint64_t sub_10001F75C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100027C3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001F780(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002BB24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F7A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002BB24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F7D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001F800 + 4 * byte_100061987[*v0]))(0x64656C6261736964, 0xE800000000000000);
}

uint64_t sub_10001F800()
{
  return 0x6574736575716572;
}

uint64_t sub_10001F81C()
{
  return 0x676E6964616F6CLL;
}

uint64_t sub_10001F834()
{
  return 0x6E697265646E6572;
}

uint64_t sub_10001F854()
{
  return 0x726F727265;
}

uint64_t sub_10001F868@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100027E3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001F88C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B54C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F8B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B54C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F8DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B6E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F904(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B6E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F92C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B590();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F954(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B590();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F97C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B65C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F9A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B65C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001F9CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B5D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F9F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B5D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FA1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B6A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FA44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B6A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FA6C(uint64_t a1, uint64_t a2)
{
  _BYTE v4[64];
  _BYTE v5[64];

  sub_100013C20(a1, (uint64_t)v4);
  sub_100013C20(a2, (uint64_t)v5);
  return sub_1000268B0((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_10001FAB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B9D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FADC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B9D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FB04()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001FB3C + 4 * byte_10006198C[*v0]))(0x7245676E69646F63, 0xEB00000000726F72);
}

uint64_t sub_10001FB3C()
{
  return 0x726F7272456C7275;
}

uint64_t sub_10001FB54()
{
  return 0x45676E6964616F6CLL;
}

uint64_t sub_10001FBDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100028060(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001FC00(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10001FC0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B7B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FC34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B7B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FC5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B838();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FC84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B838();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FCAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B7F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FCD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B7F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FCFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B948();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FD24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B948();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FD4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B904();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FD74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B904();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FD9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B8C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FDC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B8C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FDEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B98C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001FE14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B98C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001FE3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002BD4C();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001FE64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002BD4C();
  return Error<>._code.getter(a1, v2);
}

void sub_10001FE8C(uint64_t a1)
{
  sub_100026790(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10001FEA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  v3 = v1;
  v5 = sub_1000131C0(&qword_100083DD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100015BEC(a1, v9);
  v11 = sub_10002B084();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneRequest.CodingKeys, &type metadata for CRLUSDRendering.SceneRequest.CodingKeys, v11, v9, v10);
  LOBYTE(v26) = 0;
  v12 = type metadata accessor for URL(0);
  v13 = sub_10002BDE8(&qword_100083DE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v26, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for CRLUSDRendering.SceneRequest(0);
    v26 = *(_OWORD *)(v3 + v14[5]);
    v31 = 1;
    v15 = sub_10002B150();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v31, v5, &type metadata for Data, v15);
    v16 = v3 + v14[6];
    v17 = *(_QWORD *)(v16 + 64);
    LODWORD(v26) = *(_DWORD *)v16;
    v18 = *(_OWORD *)(v16 + 32);
    v27 = *(_OWORD *)(v16 + 16);
    v28 = v18;
    v29 = *(_OWORD *)(v16 + 48);
    v30 = v17;
    v31 = 2;
    v19 = sub_100013B90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v31, v5, &type metadata for CRLUSDRendering.SceneConfiguration, v19);
    v20 = (__int128 *)(v3 + v14[7]);
    v21 = v20[1];
    v26 = *v20;
    v27 = v21;
    v31 = 3;
    type metadata accessor for CGRect(0);
    v23 = v22;
    v24 = sub_10002BDE8(&qword_100083DF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v31, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000200E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;

  v30 = a2;
  v31 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1000131C0(&qword_100083DB0);
  v5 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for CRLUSDRendering.SceneRequest(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_100015BEC(a1, v12);
  v13 = sub_10002B084();
  v33 = v7;
  v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneRequest.CodingKeys, &type metadata for CRLUSDRendering.SceneRequest.CodingKeys, v13, v12, v11);
  if (v14)
    return sub_100015C54(a1);
  v15 = v5;
  v35 = a1;
  LOBYTE(v36) = 0;
  v16 = sub_10002BDE8(&qword_100083DC0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v17 = v31;
  v18 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, &v36, v32, v31, v16);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v34, v17);
  v41 = 1;
  v19 = sub_10002B0C8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v41, v18, &type metadata for Data, v19);
  *(_OWORD *)&v10[v8[5]] = v36;
  v41 = 2;
  v20 = sub_100015398();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CRLUSDRendering.SceneConfiguration, &v41, v18, &type metadata for CRLUSDRendering.SceneConfiguration, v20);
  v21 = v40;
  v22 = &v10[v8[6]];
  *(_DWORD *)v22 = v36;
  v23 = v38;
  *((_OWORD *)v22 + 1) = v37;
  *((_OWORD *)v22 + 2) = v23;
  *((_OWORD *)v22 + 3) = v39;
  *((_QWORD *)v22 + 8) = v21;
  type metadata accessor for CGRect(0);
  v25 = v24;
  v41 = 3;
  v26 = sub_10002BDE8(&qword_100083DD0, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v25, &v41, v18, v25, v26);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v33, v18);
  v27 = (_OWORD *)v8[7];
  v28 = v37;
  *v27 = v36;
  v27[1] = v28;
  sub_10002B10C(0, v30);
  sub_100015C54(v35);
  return sub_10001550C(0);
}

void sub_10002045C(uint64_t a1, Swift::UInt64 a2, char a3)
{
  Swift::UInt v3;
  Swift::UInt8 v5;
  Swift::UInt64 v6;

  switch(a3)
  {
    case 2:
      v3 = 1;
      goto LABEL_10;
    case 3:
      v3 = 2;
      goto LABEL_10;
    case 4:
      v3 = 3;
      goto LABEL_10;
    case 5:
      v3 = 4;
LABEL_10:
      Hasher._combine(_:)(v3);
      break;
    default:
      v5 = a3 & 1;
      Hasher._combine(_:)(0);
      if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v6 = a2;
      else
        v6 = 0;
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v5);
      break;
  }
}

uint64_t sub_1000204F0(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;

  v46 = *(double *)&a2;
  v53 = a3;
  v4 = sub_1000131C0(&qword_100083E58);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  __chkstk_darwin(v4);
  v47 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000131C0(&qword_100083E60);
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  __chkstk_darwin(v6);
  v43 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000131C0(&qword_100083E68);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_1000131C0(&qword_100083E70);
  v11 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1000131C0(&qword_100083E78);
  v14 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000131C0(&qword_100083E80);
  v50 = *(_QWORD *)(v17 - 8);
  v51 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v21 = a1[4];
  sub_100015BEC(a1, v20);
  v22 = sub_10002B194();
  v23 = v21;
  v24 = v53;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneAction.CodingKeys, &type metadata for CRLUSDRendering.SceneAction.CodingKeys, v22, v20, v23);
  switch(v24)
  {
    case 2:
      v57 = 1;
      v25 = sub_10002B2A4();
      v26 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneAction.PauseAnimationsCodingKeys, &v57, v51, &type metadata for CRLUSDRendering.SceneAction.PauseAnimationsCodingKeys, v25);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v39);
      goto LABEL_10;
    case 3:
      v58 = 2;
      v33 = sub_10002B260();
      v26 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneAction.ResumeAnimationsCodingKeys, &v58, v51, &type metadata for CRLUSDRendering.SceneAction.ResumeAnimationsCodingKeys, v33);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v42);
      goto LABEL_10;
    case 4:
      v59 = 3;
      v34 = sub_10002B21C();
      v35 = v43;
      v26 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneAction.ResetAnimationsCodingKeys, &v59, v51, &type metadata for CRLUSDRendering.SceneAction.ResetAnimationsCodingKeys, v34);
      v37 = v44;
      v36 = v45;
      goto LABEL_9;
    case 5:
      v60 = 4;
      v38 = sub_10002B1D8();
      v35 = v47;
      v26 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys, &v60, v51, &type metadata for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys, v38);
      v37 = v48;
      v36 = v49;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v36);
LABEL_10:
      result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v19, v26);
      break;
    default:
      v27 = v46;
      v56 = 0;
      v28 = sub_10002B2E8();
      v29 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneAction.PlayAnimationsCodingKeys, &v56, v51, &type metadata for CRLUSDRendering.SceneAction.PlayAnimationsCodingKeys, v28);
      v55 = 0;
      v30 = v40;
      v31 = v52;
      KeyedEncodingContainer.encode(_:forKey:)(&v55, v40, v27);
      if (!v31)
      {
        v54 = 1;
        KeyedEncodingContainer.encode(_:forKey:)(v24 & 1, &v54, v30);
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v30);
      result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v19, v29);
      break;
  }
  return result;
}

uint64_t sub_1000208F0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  char v27;
  char v28;
  int v29;
  char v30;
  char v31;

  v4 = sub_1000131C0(&qword_100083EC0);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000131C0(&qword_100083EC8);
  v7 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000131C0(&qword_100083ED0);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_100015BEC(a1, v13);
  v15 = sub_10002B32C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys, v15, v13, v14);
  if (a2 == 2)
  {
    v30 = 0;
    v16 = sub_10002B3F8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys, &v30, v10, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys, v16);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  }
  else
  {
    v31 = 1;
    v18 = sub_10002B370();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys, &v31, v10, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys, v18);
    v26 = a2 & 0x101;
    v27 = BYTE2(a2) & 1;
    v28 = BYTE3(a2) & 1;
    v29 = HIDWORD(a2);
    v19 = sub_10002B43C();
    v20 = v24;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, v21, v24, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState, v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v10);
}

Swift::Int sub_100020B40(uint64_t a1)
{
  Swift::UInt32 v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1 & 1);
    Hasher._combine(_:)(BYTE1(a1) & 1);
    Hasher._combine(_:)(BYTE2(a1) & 1);
    Hasher._combine(_:)(BYTE3(a1) & 1);
    if ((a1 & 0x7FFFFF00000000) == 0 && (a1 & 0x7F80000000000000) == 0)
      v3 = 0;
    else
      v3 = HIDWORD(a1);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

void sub_100020BF4(float a1, uint64_t a2, int a3)
{
  Swift::UInt32 v5;

  Hasher._combine(_:)(a3 & 1);
  Hasher._combine(_:)(BYTE1(a3) & 1);
  Hasher._combine(_:)(BYTE2(a3) & 1);
  Hasher._combine(_:)(HIBYTE(a3) & 1);
  if ((LODWORD(a1) & 0x7FFFFFFF) != 0)
    v5 = LODWORD(a1);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

uint64_t sub_100020C50(_QWORD *a1, unsigned int a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v7 = a2 & 1;
  v8 = sub_1000131C0(&qword_100083EF0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100015BEC(a1, v12);
  v14 = sub_10002B480();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, &v21, v8);
  if (!v3)
  {
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 8) & 1, &v20, v8);
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(a2) & 1, &v19, v8);
    v18 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(HIBYTE(a2) & 1, &v18, v8);
    v17 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v17, v8, a3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_100020DF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v2 = v1;
  sub_100013C20(v2, (uint64_t)&v10);
  v5 = v13;
  v4 = v14;
  if (v13 >> 62)
  {
    if (v13 >> 62 == 1)
    {
      v13 &= 0x3FFFFFFFFFFFFFFFuLL;
      sub_10002B4C4((__int128 *)&v10, (uint64_t)&v15);
      Hasher._combine(_:)(4uLL);
      sub_10002B4C4(&v15, (uint64_t)&v16);
      __asm { BR              X10 }
    }
    if (v13 == 0x8000000000000000
      && (v14 | v10.n128_u64[0] | v12 | v11.n128_u64[1] | v11.n128_u64[0] | v10.n128_u64[1]) == 0)
    {
      Hasher._combine(_:)(0);
    }
    else if (v13 == 0x8000000000000000
           && v10.n128_u64[0] == 1
           && !(v11.n128_u64[1] | v12 | v11.n128_u64[0] | v10.n128_u64[1] | v14))
    {
      Hasher._combine(_:)(1uLL);
    }
    else
    {
      Hasher._combine(_:)(2uLL);
    }
  }
  else
  {
    v13 &= 0x3FFFFFFFFFFFFFFFuLL;
    v8 = v10;
    v9 = v11;
    v6 = v12;
    Hasher._combine(_:)(3uLL);
    sub_100025F14(v8);
    sub_100025F14(v9);
    swift_bridgeObjectRetain(v6);
    sub_100025D0C(a1, v6);
    swift_bridgeObjectRelease(v6);
    Hasher._combine(_:)(v5 & 1);
    swift_bridgeObjectRetain(v4);
    sub_100025B48(a1, v4);
    swift_bridgeObjectRelease(v4);
  }
}

void sub_100021004()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 88);
  v4 = *(_QWORD *)(v2 - 80);
  Hasher._combine(_:)(6uLL);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v0, v3, v4);
    sub_10002B4DC(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  JUMPOUT(0x100020FF0);
}

uint64_t sub_100021058(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[3];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;

  v45 = sub_1000131C0(&qword_100083F60);
  v44 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_1000131C0(&qword_100083F68);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1000131C0(&qword_100083F70);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v39 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000131C0(&qword_100083F78);
  v37 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000131C0(&qword_100083F80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1000131C0(&qword_100083F88);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_100015BEC(a1, v14);
  v16 = sub_10002B54C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.RendererState.CodingKeys, &type metadata for CRLUSDRendering.RendererState.CodingKeys, v16, v14, v15);
  sub_100013C20(v46, (uint64_t)&v51);
  if (!(*((_QWORD *)&v53 + 1) >> 62))
  {
    *((_QWORD *)&v53 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
    v55 = v51;
    v56 = v52;
    v58 = v54;
    v57 = v53;
    LOBYTE(v49[0]) = 3;
    v24 = sub_10002B5D4();
    v18 = v48;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.RendererState.RenderingCodingKeys, v49, v48, &type metadata for CRLUSDRendering.RendererState.RenderingCodingKeys, v24);
    v49[0] = v55;
    v49[1] = v56;
    v49[2] = v57;
    v50 = v58;
    v25 = sub_10002B76C();
    v20 = v43;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v49, v26, v43, &type metadata for CRLUSDRendering.SceneDescription, v25);
    v22 = *(void (**)(char *, uint64_t))(v42 + 8);
    v23 = v5;
    goto LABEL_5;
  }
  if (*((_QWORD *)&v53 + 1) >> 62 == 1)
  {
    *((_QWORD *)&v53 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
    sub_10002B4C4(&v51, (uint64_t)&v59);
    LOBYTE(v49[0]) = 4;
    v17 = sub_10002B590();
    v18 = v48;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.RendererState.ErrorCodingKeys, v49, v48, &type metadata for CRLUSDRendering.RendererState.ErrorCodingKeys, v17);
    sub_10002B4C4(&v59, (uint64_t)v49);
    v19 = sub_10002B728();
    v20 = v45;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v49, v21, v45, &type metadata for CRLUSDRendering.RendererError, v19);
    v22 = *(void (**)(char *, uint64_t))(v44 + 8);
    v23 = v3;
LABEL_5:
    v22(v23, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v13, v18);
  }
  v28 = v52 | *((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v53 + 1) == 0x8000000000000000
    && !(v54 | (unint64_t)v51 | (unint64_t)v53 | *((_QWORD *)&v52 + 1) | v28))
  {
    LOBYTE(v49[0]) = 0;
    v29 = sub_10002B6E4();
    v30 = v48;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.RendererState.DisabledCodingKeys, v49, v48, &type metadata for CRLUSDRendering.RendererState.DisabledCodingKeys, v29);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v13, v30);
  }
  if (*((_QWORD *)&v53 + 1) == 0x8000000000000000
    && (_QWORD)v51 == 1
    && !(*((_QWORD *)&v52 + 1) | (unint64_t)v53 | v28 | v54))
  {
    LOBYTE(v49[0]) = 1;
    v31 = sub_10002B6A0();
    v32 = v36;
    v18 = v48;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.RendererState.RequestedCodingKeys, v49, v48, &type metadata for CRLUSDRendering.RendererState.RequestedCodingKeys, v31);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v38);
  }
  else
  {
    LOBYTE(v49[0]) = 2;
    v33 = sub_10002B65C();
    v34 = v39;
    v18 = v48;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.RendererState.LoadingCodingKeys, v49, v48, &type metadata for CRLUSDRendering.RendererState.LoadingCodingKeys, v33);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v41);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v13, v18);
}

void sub_1000215B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1000215F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  Hasher._combine(_:)(0);
  return String.hash(into:)(v1, v2, v0);
}

uint64_t sub_100021648()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  Hasher._combine(_:)(6uLL);
  if (!v0)
  {
    Hasher._combine(_:)(0);
    JUMPOUT(0x1000216A0);
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v0);
  String.hash(into:)(v1, v2, v0);
  return sub_100014C2C(v2, v0, 5);
}

void sub_100021690()
{
  JUMPOUT(0x10002169CLL);
}

void sub_1000216BC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a4;
  v34 = a2;
  v35 = a3;
  v5 = sub_1000131C0(&qword_100084028);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  __chkstk_darwin(v5);
  v31 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000131C0(&qword_100084030);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  __chkstk_darwin(v7);
  v28 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000131C0(&qword_100084038);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  __chkstk_darwin(v9);
  v24 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000131C0(&qword_100084040);
  v23 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v22 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000131C0(&qword_100084048);
  v20 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v19 = sub_1000131C0(&qword_100084050);
  v18[1] = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v12 = sub_1000131C0(&qword_100084058);
  __chkstk_darwin(v12);
  v38 = sub_1000131C0(&qword_100084060);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  sub_100015BEC(a1, v15);
  v17 = sub_10002B7B0();
  v37 = v14;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.RendererError.CodingKeys, &type metadata for CRLUSDRendering.RendererError.CodingKeys, v17, v15, v16);
  __asm { BR              X10 }
}

uint64_t sub_100021954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 104) = 0;
  v4 = sub_10002B9D0();
  v6 = *(_QWORD *)(v3 - 128);
  v5 = *(_QWORD *)(v3 - 120);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.RendererError.CodingErrorCodingKeys, v3 - 104, v5, &type metadata for CRLUSDRendering.RendererError.CodingErrorCodingKeys, v4);
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)(v3 - 152), *(_QWORD *)(v3 - 144));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 136) + 8))(v6, v5);
}

void sub_100021C08()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v0 - 104) = 4;
  v1 = sub_10002B8C0();
  v2 = *(_QWORD *)(v0 - 232);
  v4 = *(_QWORD *)(v0 - 128);
  v3 = *(_QWORD *)(v0 - 120);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.RendererError.TimeoutErrorCodingKeys, v0 - 104, v3, &type metadata for CRLUSDRendering.RendererError.TimeoutErrorCodingKeys, v1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 - 216) + 8))(v2, *(_QWORD *)(v0 - 208));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 136) + 8))(v4, v3);
  JUMPOUT(0x100021BE4);
}

void sub_100021C68(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  __asm { BR              X10 }
}

Swift::Int sub_100021CB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  Hasher._combine(_:)(0);
  String.hash(into:)(&v3, v1, v0);
  return Hasher._finalize()();
}

uint64_t sub_100021DA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000200E4(a1, a2);
}

uint64_t sub_100021DB8(_QWORD *a1)
{
  return sub_10001FEA8(a1);
}

Swift::Int sub_100021DCC()
{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0);
  sub_10002045C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_100021E18(uint64_t a1)
{
  uint64_t v1;

  sub_10002045C(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int sub_100021E24(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  char v3;
  _QWORD v5[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_10002045C((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100021E6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_1000283C4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100021E98(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000204F0(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_100021EB4(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  uint64_t result;
  char v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  switch(*(_BYTE *)(a1 + 8))
  {
    case 2:
      v3 = v2 == 2;
      goto LABEL_9;
    case 3:
      v3 = v2 == 3;
      goto LABEL_9;
    case 4:
      v3 = v2 == 4;
      goto LABEL_9;
    case 5:
      v3 = v2 == 5;
LABEL_9:
      v5 = v3;
      result = v5 & 1;
      break;
    default:
      if ((v2 - 2) >= 4 && *(double *)a1 == *(double *)a2)
        result = (((*(_BYTE *)(a1 + 8) & 1) == 0) ^ v2) & 1;
      else
        result = 0;
      break;
  }
  return result;
}

Swift::Int sub_100021F40()
{
  uint64_t *v0;

  return sub_100020B40(*v0);
}

void sub_100021F48()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt32 v3;

  v1 = *v0;
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
    Hasher._combine(_:)(BYTE1(v1) & 1);
    Hasher._combine(_:)(BYTE2(v1) & 1);
    Hasher._combine(_:)(BYTE3(v1) & 1);
    if ((v1 & 0x7FFFFF00000000) == 0 && (v1 & 0x7F80000000000000) == 0)
      v3 = 0;
    else
      v3 = HIDWORD(v1);
    Hasher._combine(_:)(v3);
  }
}

Swift::Int sub_100021FCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  Swift::UInt32 v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2 & 1);
    Hasher._combine(_:)(BYTE1(v2) & 1);
    Hasher._combine(_:)(BYTE2(v2) & 1);
    Hasher._combine(_:)(BYTE3(v2) & 1);
    if ((v2 & 0x7FFFFF00000000) == 0 && (v2 & 0x7F80000000000000) == 0)
      v4 = 0;
    else
      v4 = HIDWORD(v2);
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

unint64_t sub_10002207C@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1000289E8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1000220A4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000208F0(a1, *v1);
}

uint64_t sub_1000220BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a1;
  result = *a2 == 2 && v3 == 2;
  if (v3 != 2 && *a2 != 2)
  {
    if (*((float *)&v2 + 1) == COERCE_FLOAT(HIDWORD(*a2)))
      return (((v2 & 1) == 0) ^ *a2) & (((v2 & 0x100) == 0) ^ ((*(_DWORD *)a2 & 0x100u) >> 8)) & (((v2 & 0x10000) == 0) ^ WORD1(*a2)) & (((v2 & 0x1000000) == 0) ^ BYTE3(*a2));
    else
      return 0;
  }
  return result;
}

Swift::Int sub_100022144()
{
  float *v0;
  int v1;
  int v2;
  int v3;
  int v4;
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _QWORD v11[9];

  v1 = *(unsigned __int8 *)v0;
  v2 = *((unsigned __int8 *)v0 + 1);
  v3 = *((unsigned __int8 *)v0 + 2);
  v4 = *((unsigned __int8 *)v0 + 3);
  v5 = v0[1];
  Hasher.init(_seed:)(v11, 0);
  if (v2)
    v6 = 256;
  else
    v6 = 0;
  v7 = v6 | v1;
  if (v3)
    v8 = 0x10000;
  else
    v8 = 0;
  if (v4)
    v9 = 0x1000000;
  else
    v9 = 0;
  sub_100020BF4(v5, (uint64_t)v11, v7 | v8 | v9);
  return Hasher._finalize()();
}

void sub_1000221E0(uint64_t a1)
{
  float *v1;
  int v2;
  int v3;
  int v4;
  int v5;

  if (*((_BYTE *)v1 + 1))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)v1;
  if (*((_BYTE *)v1 + 2))
    v4 = 0x10000;
  else
    v4 = 0;
  if (*((_BYTE *)v1 + 3))
    v5 = 0x1000000;
  else
    v5 = 0;
  sub_100020BF4(v1[1], a1, v3 | v4 | v5);
}

Swift::Int sub_100022228(uint64_t a1)
{
  float *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  float v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD v12[9];

  v2 = *(unsigned __int8 *)v1;
  v3 = *((unsigned __int8 *)v1 + 1);
  v4 = *((unsigned __int8 *)v1 + 2);
  v5 = *((unsigned __int8 *)v1 + 3);
  v6 = v1[1];
  Hasher.init(_seed:)(v12, a1);
  if (v3)
    v7 = 256;
  else
    v7 = 0;
  v8 = v7 | v2;
  if (v4)
    v9 = 0x10000;
  else
    v9 = 0;
  if (v5)
    v10 = 0x1000000;
  else
    v10 = 0;
  sub_100020BF4(v6, (uint64_t)v12, v8 | v9 | v10);
  return Hasher._finalize()();
}

void sub_1000222C0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  float v5;

  v5 = sub_100028DA8(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = v4 & 1;
    *(_BYTE *)(a2 + 1) = BYTE1(v4) & 1;
    *(_BYTE *)(a2 + 2) = BYTE2(v4) & 1;
    *(_BYTE *)(a2 + 3) = HIBYTE(v4) & 1;
    *(float *)(a2 + 4) = v5;
  }
}

uint64_t sub_100022308(_QWORD *a1)
{
  float *v1;
  int v2;
  int v3;
  int v4;
  int v5;

  if (*((_BYTE *)v1 + 1))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)v1;
  if (*((_BYTE *)v1 + 2))
    v4 = 0x10000;
  else
    v4 = 0;
  if (*((_BYTE *)v1 + 3))
    v5 = 0x1000000;
  else
    v5 = 0;
  return sub_100020C50(a1, v3 | v4 | v5, v1[1]);
}

BOOL sub_100022360(float *a1, float *a2)
{
  _BOOL8 result;

  result = 0;
  if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
    && ((*((unsigned __int8 *)a1 + 1) ^ *((unsigned __int8 *)a2 + 1)) & 1) == 0
    && ((*((unsigned __int8 *)a1 + 2) ^ *((unsigned __int8 *)a2 + 2)) & 1) == 0
    && ((*((unsigned __int8 *)a1 + 3) ^ *((unsigned __int8 *)a2 + 3)) & 1) == 0)
  {
    return a1[1] == a2[1];
  }
  return result;
}

Swift::Int sub_1000223BC()
{
  uint64_t v0;
  _QWORD v2[9];
  _BYTE v3[64];

  sub_100013C20(v0, (uint64_t)v3);
  Hasher.init(_seed:)(v2, 0);
  sub_100020DF4((uint64_t)v2);
  return Hasher._finalize()();
}

void sub_100022408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_100013C20(v1, (uint64_t)&v3);
  sub_100020DF4(a1);
}

Swift::Int sub_100022444(uint64_t a1)
{
  uint64_t v1;
  _QWORD v4[9];
  _BYTE v5[64];

  sub_100013C20(v1, (uint64_t)v5);
  Hasher.init(_seed:)(v4, a1);
  sub_100020DF4((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t sub_100022494@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[64];

  result = sub_100028FAC(a1, (uint64_t)v5);
  if (!v2)
    return sub_100013C20((uint64_t)v5, a2);
  return result;
}

uint64_t sub_1000224D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  sub_100013C20(v1, (uint64_t)&v4);
  return sub_100021058(a1);
}

void sub_100022524()
{
  uint64_t v0;

  sub_100021C68(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void sub_100022530(uint64_t a1)
{
  uint64_t v1;

  sub_1000215B8(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

void sub_10002253C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *(unsigned __int8 *)(v1 + 16);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_100022578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  Hasher._combine(_:)(0);
  String.hash(into:)(&v3, v1, v0);
  return Hasher._finalize()();
}

_QWORD *sub_100022668@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;

  result = sub_1000296CC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

void sub_100022694(_QWORD *a1)
{
  uint64_t v1;

  sub_1000216BC(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

void sub_1000226B0(uint64_t a1)
{
  __n128 *v1;
  __n128 *v2;
  Swift::UInt32 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;

  v2 = v1;
  if ((v2->n128_u32[0] & 0x7FFFFFFF) != 0)
    v4 = v2->n128_u32[0];
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  simd_quatf.hash(into:)(a1, v2[1]);
  v5 = v2[2].n128_u64[1];
  if ((v2[2].n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2[2].n128_u64[0];
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v5;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  v8 = v2[3].n128_u64[1];
  if ((v2[3].n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v2[3].n128_u64[0];
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v8;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if ((v2[4].n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v2[4].n128_u64[0];
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
}

uint64_t sub_10002273C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  __int128 v23;

  v3 = v1;
  v5 = sub_1000131C0(&qword_100084098);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100015BEC(a1, v9);
  v11 = sub_10002BA58();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys, &type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys, v11, v9, v10);
  v12 = *(float *)v3;
  LOBYTE(v23) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    v23 = *(_OWORD *)(v3 + 16);
    v22 = 1;
    type metadata accessor for simd_quatf(0);
    v14 = v13;
    v15 = sub_10002BDE8(&qword_1000840A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for simd_quatf, (uint64_t)&protocol conformance descriptor for simd_quatf);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v14, v15);
    v23 = *(_OWORD *)(v3 + 32);
    v22 = 2;
    type metadata accessor for CGSize(0);
    v17 = v16;
    v18 = sub_10002BDE8(&qword_1000840A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v17, v18);
    v23 = *(_OWORD *)(v3 + 48);
    v22 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v17, v18);
    *(_QWORD *)&v23 = *(_QWORD *)(v3 + 64);
    v22 = 4;
    v19 = sub_10002BAE0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for CGFloat, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_10002296C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000226B0((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000229AC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000226B0((uint64_t)v2);
  return Hasher._finalize()();
}

__n128 sub_1000229E4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_10002A074(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100022A2C(_QWORD *a1)
{
  return sub_10002273C(a1);
}

BOOL sub_100022A40(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100026EC8((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_100022A98(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_23:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v19 = sub_100024F88(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0)
      return 0;
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19);
    if (v22 == 2)
    {
      if (v18 != 2)
        return 0;
    }
    else
    {
      if (v18 == 2)
        return 0;
      v23 = (v18 & 1) == ((v22 & 1) == 0) || ((v18 >> 8) & 1) == ((v22 & 0x100) == 0);
      v24 = v23 || ((v18 >> 16) & 1) == ((v22 & 0x10000) == 0);
      v25 = v24 || ((v18 >> 24) & 1) == ((v22 & 0x1000000) == 0);
      if (v25 || *((float *)&v22 + 1) != *((float *)&v18 + 1))
        return 0;
    }
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v12 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_22;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_22;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_22:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_23;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100022CAC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  int64_t v28;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v28)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v28)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    v21 = sub_100024F88(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease(v17);
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease(v19);
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    v25 = v24[1];
    if (*v24 == v20 && v25 == v19)
    {
      result = swift_bridgeObjectRelease(v19);
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v20, v19, 0);
      result = swift_bridgeObjectRelease(v19);
      if ((v27 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v28)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_100022EB0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  char v23;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    swift_bridgeObjectRetain(v16);
    v18 = sub_1000270B0();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease(v16);
      return 0;
    }
    v20 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18);
    v21 = v20[1];
    if (*v20 == v17 && v21 == v16)
    {
      result = swift_bridgeObjectRelease(v16);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v17, v16, 0);
      result = swift_bridgeObjectRelease(v16);
      if ((v23 & 1) == 0)
        return 0;
    }
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100023074(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  _OWORD v22[2];

  v3 = v1;
  v5 = sub_1000131C0(&qword_1000840F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100015BEC(a1, v9);
  v11 = sub_10002BB24();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneDescription.CodingKeys, &type metadata for CRLUSDRendering.SceneDescription.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v22[0] = *(_OWORD *)v3;
  v22[1] = v12;
  v21 = 0;
  v13 = sub_10002BBF0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, &type metadata for BoundingBox, v13);
  if (!v2)
  {
    *(_QWORD *)&v22[0] = *(_QWORD *)(v3 + 32);
    v21 = 1;
    v14 = sub_1000131C0(&qword_1000840D0);
    v15 = sub_10002BC34(&qword_100084108, (void (*)(void))sub_10002BCA8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, v14, v15);
    v16 = *(unsigned __int8 *)(v3 + 40);
    LOBYTE(v22[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v22, v5);
    *(_QWORD *)&v22[0] = *(_QWORD *)(v3 + 48);
    v21 = 3;
    v17 = sub_1000131C0(&qword_1000840E8);
    v18 = sub_10002BCEC(&qword_100084118, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100023270()
{
  __n128 *v0;
  uint64_t v1;
  Swift::UInt8 v2;
  uint64_t v3;
  __n128 v5;
  __n128 v6;
  _QWORD v7[9];

  v5 = *v0;
  v6 = v0[1];
  v1 = v0[2].n128_i64[0];
  v2 = v0[2].n128_u8[8];
  v3 = v0[3].n128_i64[0];
  Hasher.init(_seed:)(v7, 0);
  sub_100025F14(v5);
  sub_100025F14(v6);
  swift_bridgeObjectRetain(v1);
  sub_100025D0C((uint64_t)v7, v1);
  swift_bridgeObjectRelease(v1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v3);
  sub_100025B48((uint64_t)v7, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100023320(uint64_t a1)
{
  __n128 *v1;
  uint64_t v3;
  Swift::UInt8 v4;
  uint64_t v5;
  __n128 v7;

  v7 = v1[1];
  v3 = v1[2].n128_i64[0];
  v4 = v1[2].n128_u8[8];
  v5 = v1[3].n128_i64[0];
  sub_100025F14(*v1);
  sub_100025F14(v7);
  swift_bridgeObjectRetain(v3);
  sub_100025D0C(a1, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain(v5);
  sub_100025B48(a1, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000233B8(uint64_t a1)
{
  __n128 *v1;
  uint64_t v2;
  Swift::UInt8 v3;
  uint64_t v4;
  __n128 v6;
  __n128 v7;
  _QWORD v8[9];

  v6 = *v1;
  v7 = v1[1];
  v2 = v1[2].n128_i64[0];
  v3 = v1[2].n128_u8[8];
  v4 = v1[3].n128_i64[0];
  Hasher.init(_seed:)(v8, a1);
  sub_100025F14(v6);
  sub_100025F14(v7);
  swift_bridgeObjectRetain(v2);
  sub_100025D0C((uint64_t)v8, v2);
  swift_bridgeObjectRelease(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain(v4);
  sub_100025B48((uint64_t)v8, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_100023464@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_10002A314(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1000234AC(_QWORD *a1)
{
  return sub_100023074(a1);
}

uint64_t sub_1000234C0(__n128 *a1, __n128 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = a1[2].n128_i64[0];
  v3 = a1[2].n128_u8[8];
  v4 = a1[3].n128_i64[0];
  v5 = a2[2].n128_i64[0];
  v6 = a2[2].n128_u8[8];
  v7 = a2[3].n128_i64[0];
  if (sub_1000266BC(*a1, a1[1], *a2, a2[1]) && (sub_100022A98(v2, v5) & 1) != 0 && ((v3 ^ v6) & 1) == 0)
    return sub_100022CAC(v4, v7);
  else
    return 0;
}

unint64_t sub_100023548()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = type metadata accessor for URL(0);
  v1 = sub_10002BDE8(&qword_100084120, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x69666E6F63202C3ELL;
  v4._object = (void *)0xEB00000000203A67;
  String.append(_:)(v4);
  type metadata accessor for CRLUSDRendering.SceneRequest(0);
  v5._countAndFlagsBits = sub_10002367C();
  v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD000000000000013;
}

uint64_t sub_10002367C()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  __int128 v14;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v1._object = (void *)0x800000010005EDF0;
  v1._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v1);
  Float.write<A>(to:)(v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(float *)v0);
  v2._countAndFlagsBits = 0x746E6569726F202CLL;
  v2._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v2);
  v14 = *(_OWORD *)(v0 + 16);
  v3 = sub_1000131C0(&qword_100083B48);
  v4 = sub_10002BF38(&qword_100084128, &qword_100083B48, (uint64_t)&protocol conformance descriptor for SIMD4<A>);
  v5._countAndFlagsBits = SIMD.description.getter(v3, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x203A657A6973202CLL;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  v14 = *(_OWORD *)(v0 + 32);
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)(&v14, v15, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9._object = (void *)0x800000010005EE10;
  v9._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v9);
  v10._countAndFlagsBits = Double.description.getter(*(double *)(v0 + 64));
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v15[0];
}

void sub_100023828()
{
  uint64_t v0;

  sub_1000260F8(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_100023838(char *a1, char *a2)
{
  return sub_100023844(*a1, *a2);
}

uint64_t sub_100023844(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 7889261;
  else
    v2 = 7235949;
  if ((a2 & 1) != 0)
    v3 = 7889261;
  else
    v3 = 7235949;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE300000000000000, v3, 0xE300000000000000, 0);
  swift_bridgeObjectRelease_n(0xE300000000000000, 2);
  return v4 & 1;
}

Swift::Int sub_1000238B0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 7889261;
  else
    v2 = 7235949;
  String.hash(into:)(v4, v2, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100023914(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 7889261;
  else
    v2 = 7235949;
  String.hash(into:)(a1, v2, 0xE300000000000000);
  return swift_bridgeObjectRelease(0xE300000000000000);
}

Swift::Int sub_10002394C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 7889261;
  else
    v3 = 7235949;
  String.hash(into:)(v5, v3, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000239AC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100071DF0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100023A08(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 7235949;
  if (*v1)
    v2 = 7889261;
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_100023A30()
{
  _BYTE *v0;

  if (*v0)
    return 7889261;
  else
    return 7235949;
}

uint64_t sub_100023A54@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100071DF0, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100023AB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100023CAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100023ADC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100023CAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BoundingBox.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  __int128 v14;
  __int128 v16;
  __n128 v17;
  char v18;
  __n128 v19[2];

  v3 = sub_1000131C0(&qword_100083B18);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100015BEC(a1, v7);
  v9 = sub_100023CAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s10CodingKeysON, &_s10CodingKeysON, v9, v7, v8);
  if (!v1)
  {
    v10 = sub_1000131C0(&qword_100083B28);
    v19[0].n128_u8[0] = 0;
    v11 = sub_10002BF38(&qword_100083B30, &qword_100083B28, (uint64_t)&protocol conformance descriptor for SIMD3<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, v19, v3, v10, v11);
    v17 = v19[1];
    v18 = 1;
    v12 = KeyedDecodingContainer.decode<A>(_:forKey:)(v10, &v18, v3, v10, v11);
    v13.n128_f64[0] = BoundingBox.init(min:max:)(v12, v17, v19[0]);
    v16 = v14;
    v17 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return sub_100015C54(a1);
}

unint64_t sub_100023CAC()
{
  unint64_t result;

  result = qword_100083B20;
  if (!qword_100083B20)
  {
    result = swift_getWitnessTable(&unk_10006235C, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100083B20);
  }
  return result;
}

uint64_t BoundingBox.encode(to:)(_QWORD *a1, __n128 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  char v18;

  v15 = a3;
  v16 = a2;
  v5 = sub_1000131C0(&qword_100083B38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100015BEC(a1, v9);
  v11 = sub_100023CAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10CodingKeysON, &_s10CodingKeysON, v11, v9, v10);
  v17 = v16;
  v18 = 0;
  v12 = sub_1000131C0(&qword_100083B28);
  v13 = sub_10002BF38(&qword_100083B40, &qword_100083B28, (uint64_t)&protocol conformance descriptor for SIMD3<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v18, v5, v12, v13);
  if (!v3)
  {
    v17 = v15;
    v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v18, v5, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100023E54@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  result = BoundingBox.init(from:)(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_100023E7C(_QWORD *a1)
{
  __n128 *v1;

  return BoundingBox.encode(to:)(a1, *v1, v1[1]);
}

uint64_t simd_quatf.init(from:)(_QWORD *a1)
{
  return sub_10002A5E4(a1);
}

uint64_t simd_quatf.encode(to:)(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = a1[3];
  v3 = a1[4];
  sub_100015BEC(a1, v2);
  dispatch thunk of Encoder.singleValueContainer()(v11, v2, v3);
  v10 = a2;
  v4 = v12;
  v5 = v13;
  sub_10002A6EC((uint64_t)v11, v12);
  v6 = sub_1000131C0(&qword_100083B48);
  v7 = sub_10002BF38(&qword_100083B50, &qword_100083B48, (uint64_t)&protocol conformance descriptor for SIMD4<A>);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v10, v6, v7, v4, v5);
  return sub_100015C54(v11);
}

uint64_t sub_100023F74@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_10002A5E4(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_100023F9C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v9 = *v1;
  v2 = a1[3];
  v3 = a1[4];
  sub_100015BEC(a1, v2);
  dispatch thunk of Encoder.singleValueContainer()(v11, v2, v3);
  v10 = v9;
  v4 = v12;
  v5 = v13;
  sub_10002A6EC((uint64_t)v11, v12);
  v6 = sub_1000131C0(&qword_100083B48);
  v7 = sub_10002BF38(&qword_100083B50, &qword_100083B48, (uint64_t)&protocol conformance descriptor for SIMD4<A>);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&v10, v6, v7, v4, v5);
  return sub_100015C54(v11);
}

double sub_10002406C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = type metadata accessor for CRLUSDRendering.TaskQueue();
  v1 = swift_allocObject(v0, 136, 15);
  swift_defaultActor_initialize();
  *(_QWORD *)(v1 + 128) = _swiftEmptyArrayStorage;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v1 + 112) = xmmword_100061700;
  qword_100083B10 = v1;
  return result;
}

uint64_t sub_1000240BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_1000240D4, 0, 0);
}

uint64_t sub_1000240D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_1000830F8 != -1)
    swift_once(&qword_1000830F8, sub_10002406C);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = qword_100083B10;
  *(_QWORD *)(v0 + 32) = qword_100083B10;
  swift_retain(v1);
  return swift_task_switch(sub_100024144, v2, 0);
}

uint64_t sub_100024144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  static Task<>.checkCancellation()();
  v1 = *(_QWORD *)(v0 + 32);
  v3 = sub_10002BDE8(&qword_100084198, v2, (uint64_t (*)(uint64_t))type metadata accessor for CRLUSDRendering.TaskQueue, (uint64_t)&unk_100061D64);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 40) = v4;
  *v4 = v0;
  v4[1] = sub_100024224;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, v1, v3, 0xD000000000000013, 0x800000010005EE70, sub_10002BE28, *(_QWORD *)(v0 + 32), (char *)&type metadata for () + 8);
}

uint64_t sub_100024224()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100024334;
  else
    v4 = sub_100024288;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_100024288()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t **v7;

  v1 = v0[6];
  result = static Task<>.checkCancellation()();
  if (v1)
  {
    v3 = v0[4];
    v4 = *(_QWORD *)(v3 + 120);
    v5 = __OFSUB__(v4, 1);
    v6 = v4 - 1;
    if (v5)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v3 + 120) = v6;
      sub_100024D90();
      v0[9] = v1;
      return swift_task_switch(sub_100024460, 0, 0);
    }
  }
  else
  {
    v7 = (uint64_t **)swift_task_alloc(dword_1000841A4);
    v0[7] = (uint64_t)v7;
    *v7 = v0;
    v7[1] = (uint64_t *)sub_100024350;
    return sub_100024494((uint64_t)(v0 + 2), v0[3]);
  }
  return result;
}

uint64_t sub_100024334()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 48);
  return swift_task_switch(sub_100024460, 0, 0);
}

uint64_t sub_100024350()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100024408;
  else
    v4 = sub_1000243B4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_1000243B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 120);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v1 + 120) = v4;
    sub_100024D90();
    swift_release(v5);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
  }
  return result;
}

uint64_t sub_100024408()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v1 = v0[4];
  v2 = *(_QWORD *)(v1 + 120);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 120) = v4;
    sub_100024D90();
    v0[9] = v0[8];
    return swift_task_switch(sub_100024460, 0, 0);
  }
  return result;
}

uint64_t sub_100024460()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024494(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = v3;
  v2[5] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[6] = v4;
  v2[7] = v5;
  return swift_task_switch(sub_100024504, v4, v5);
}

uint64_t sub_100024504()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v1 = v0[3];
  v2 = type metadata accessor for Entity(0);
  v3 = static Entity.loadAsync(contentsOf:withName:)(v1 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_url, 0, 0);
  v0[8] = v3;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest) = v3;
  swift_retain(v3);
  swift_release(v4);
  v5 = swift_allocObject(&unk_100073020, 17, 7);
  v0[9] = v5;
  *(_BYTE *)(v5 + 16) = 0;
  v6 = static MainActor.shared.getter(v5);
  v0[10] = v6;
  v7 = (_QWORD *)swift_task_alloc(48);
  v0[11] = v7;
  v7[2] = v1;
  v7[3] = v3;
  v7[4] = v5;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v8;
  *v8 = v0;
  v8[1] = sub_100024638;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[2], v6, &protocol witness table for MainActor, 0x746E45636E797361, 0xED00002928797469, sub_10002BE40, v7, v2);
}

uint64_t sub_100024638()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_1000246F4;
  }
  else
  {
    v7 = v2[11];
    swift_release(v2[10]);
    swift_task_dealloc(v7);
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_1000246AC;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000246AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000246F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v24[0] = a2;
  v7 = sub_1000131C0(&qword_1000841A8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = a3;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, v7);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = v13 + v9;
  v15 = v12 | 7;
  v16 = swift_allocObject(&unk_100073048, v14, v12 | 7);
  *(_QWORD *)(v16 + 16) = a4;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v17(v16 + v13, v10, v7);
  v11(v10, a1, v7);
  v18 = swift_allocObject(&unk_100073070, v14, v15);
  *(_QWORD *)(v18 + 16) = a4;
  v17(v18 + v13, v10, v7);
  swift_retain_n(a4, 2);
  v19 = sub_1000131C0(&qword_1000841B0);
  v20 = sub_10002BF38(&qword_1000841B8, &qword_1000841B0, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  v21 = Publisher.sink(receiveCompletion:receiveValue:)(sub_10002BE50, v16, sub_10002BED8, v18, v19, v20);
  swift_release(v16);
  swift_release(v18);
  v22 = *(_QWORD *)(v24[0] + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable);
  *(_QWORD *)(v24[0] + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable) = v21;
  return swift_release(v22);
}

uint64_t sub_100024908(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11[24];
  char v12[24];

  v3 = *a1;
  v4 = (_BYTE *)(a2 + 16);
  result = swift_beginAccess(a2 + 16, v12, 0, 0);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess(v4, v11, 1, 0);
    *v4 = 1;
    if (v3)
    {
      v10 = v3;
      swift_errorRetain(v3);
    }
    else
    {
      v6 = sub_1000133A8();
      v7 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v6, 0, 0);
      *(_QWORD *)v8 = 0xD00000000000001CLL;
      *(_QWORD *)(v8 + 8) = 0x800000010005EE90;
      *(_BYTE *)(v8 + 16) = 2;
      v10 = v7;
    }
    v9 = sub_1000131C0(&qword_1000841A8);
    return CheckedContinuation.resume(throwing:)(&v10, v9);
  }
  return result;
}

uint64_t sub_100024A04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[24];

  v3 = *a1;
  v4 = (_BYTE *)(a2 + 16);
  result = swift_beginAccess(a2 + 16, v9, 0, 0);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess(v4, v8, 1, 0);
    *v4 = 1;
    v7 = v3;
    swift_retain(v3);
    v6 = sub_1000131C0(&qword_1000841A8);
    return CheckedContinuation.resume(returning:)(&v7, v6);
  }
  return result;
}

uint64_t sub_100024A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_url;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100024B08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = sub_1000131C0(&qword_100083688);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + 128);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v16 = *(_QWORD *)(v1 + 128);
    v17 = v1;
    v8 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain(v6);
    do
    {
      v10(v5, v8, v2);
      v11 = type metadata accessor for CancellationError(0);
      v12 = sub_10002BDE8(&qword_100084190, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
      v13 = swift_allocError(v11, v12, 0, 0);
      CancellationError.init()();
      v18 = v13;
      CheckedContinuation.resume(throwing:)(&v18, v2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v8 += v9;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v16);
    v1 = v17;
    v6 = *(_QWORD *)(v17 + 128);
  }
  swift_bridgeObjectRelease(v6);
  swift_defaultActor_destroy(v1);
  return swift_defaultActor_deallocate(v1);
}

uint64_t sub_100024C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v4 = sub_1000131C0(&qword_100083688);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *(_QWORD **)(a2 + 128);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *(_QWORD *)(a2 + 128) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = (_QWORD *)sub_1000259CC(0, v8[2] + 1, 1, v8);
    *(_QWORD *)(a2 + 128) = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = (_QWORD *)sub_1000259CC(v10 > 1, v11 + 1, 1, v8);
    *(_QWORD *)(a2 + 128) = v8;
  }
  v8[2] = v11 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v11, v7, v4);
  return sub_100024D90();
}

uint64_t sub_100024D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1000131C0(&qword_100083688);
  v2 = *(_QWORD *)(v1 - 8);
  result = __chkstk_darwin(v1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 128);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = *(_QWORD *)(v0 + 120);
    if (v7 <= 0)
    {
      *(_QWORD *)(v0 + 120) = v7 + 1;
      if (*(_QWORD *)(v6 + 16))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, v6 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)), v1);
        v8 = sub_100026564(0, 1);
        CheckedContinuation.resume(returning:)(v8, v1);
        return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_100024E70()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_100024E7C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v13;
  _QWORD v14[2];
  char v15;

  if (qword_100082EC0 != -1)
    swift_once(&qword_100082EC0, sub_10000D600);
  v14[0] = a1;
  v14[1] = a2;
  v15 = a3;
  v6 = sub_10002B728();
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(v14, &type metadata for CRLUSDRendering.RendererError, v6);
  v9 = v8;
  v10 = sub_1000131C0(&qword_100084138);
  inited = swift_initStackObject(v10, &v13);
  *(_OWORD *)(inited + 16) = xmmword_100061930;
  *(_QWORD *)(inited + 32) = 0xD000000000000026;
  *(_QWORD *)(inited + 40) = 0x800000010005EDA0;
  *(_QWORD *)(inited + 72) = &type metadata for Data;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v9;
  return sub_10001E840(inited);
}

unint64_t sub_100024F7C()
{
  uint64_t v0;

  return sub_100024E7C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

unint64_t sub_100024F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10002510C(a1, a2, v5);
}

unint64_t sub_100024FEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000251EC(a1, v3);
}

unint64_t sub_10002501C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_10002BDE8(&qword_100084170, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100025288(a1, v7);
}

unint64_t sub_10002508C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_1000253CC(a1, v7);
}

unint64_t sub_10002510C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000251EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_100025288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_10002BDE8(&qword_100084178, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1000253CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void sub_100025540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1000255A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100025784);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_1000257A8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100025804()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_100025540((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_100013320(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

size_t sub_1000259CC(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000131C0(&qword_100084150);
  v11 = *(_QWORD *)(sub_1000131C0(&qword_100083688) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = sub_1000131C0(&qword_100083688);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20, v21, v8, v17);
  }
  swift_bridgeObjectRelease(a4);
  return (size_t)v15;
}

void sub_100025B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;

  v25 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v22 >= v7)
      goto LABEL_19;
    v23 = *(_QWORD *)(v25 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v7)
        goto LABEL_19;
      v23 = *(_QWORD *)(v25 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_18:
    v6 = (v23 - 1) & v23;
    v11 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_5:
    v12 = 16 * v11;
    v13 = (uint64_t *)(*(_QWORD *)(a2 + 48) + v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 56) + v12);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(a1 + 64);
    v20 = *(_OWORD *)(a1 + 16);
    v26[0] = *(_OWORD *)a1;
    v26[1] = v20;
    v21 = *(_OWORD *)(a1 + 48);
    v26[2] = *(_OWORD *)(a1 + 32);
    v26[3] = v21;
    v27 = v19;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v26, v14, v15);
    swift_bridgeObjectRelease(v15);
    String.hash(into:)(v26, v17, v18);
    swift_bridgeObjectRelease(v18);
    v8 ^= Hasher._finalize()();
  }
  v24 = v22 + 2;
  if (v24 >= v7)
  {
LABEL_19:
    swift_release(a2);
    Hasher._combine(_:)(v8);
    return;
  }
  v23 = *(_QWORD *)(v25 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v7)
      goto LABEL_19;
    v23 = *(_QWORD *)(v25 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

void sub_100025D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  Swift::UInt v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  Swift::UInt32 v24;
  _OWORD v25[4];
  uint64_t v26;

  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_20;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v13 >= v8)
      goto LABEL_28;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_28;
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
        break;
    }
LABEL_19:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_20:
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v12);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v12);
    v20 = *(_QWORD *)(a1 + 64);
    v21 = *(_OWORD *)(a1 + 16);
    v25[0] = *(_OWORD *)a1;
    v25[1] = v21;
    v22 = *(_OWORD *)(a1 + 48);
    v25[2] = *(_OWORD *)(a1 + 32);
    v25[3] = v22;
    v26 = v20;
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v25, v17, v18);
    swift_bridgeObjectRelease(v18);
    if (v19 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v19 & 1);
      Hasher._combine(_:)(BYTE1(v19) & 1);
      Hasher._combine(_:)(BYTE2(v19) & 1);
      Hasher._combine(_:)(BYTE3(v19) & 1);
      if ((v19 & 0x7FFFFF00000000) == 0 && (v19 & 0x7F80000000000000) == 0)
        v24 = 0;
      else
        v24 = HIDWORD(v19);
      Hasher._combine(_:)(v24);
    }
    v9 ^= Hasher._finalize()();
  }
  v15 = v13 + 2;
  if (v15 >= v8)
  {
LABEL_28:
    swift_release(a2);
    Hasher._combine(_:)(v9);
    return;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_28;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_30:
  __break(1u);
}

void sub_100025F14(__n128 a1)
{
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0)
    v1 = a1.n128_u32[0];
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0)
    v2 = a1.n128_u32[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0)
    v3 = a1.n128_u32[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

uint64_t sub_100025F74(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;

  v1 = objc_msgSend(a1, "userInfo");
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_100024F88(0xD000000000000026, 0x800000010005EDA0), (v4 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v2);
    goto LABEL_9;
  }
  sub_100013230(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v10);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_9:
    sub_10002AFEC((uint64_t)&v10);
    return 0;
  }
  if ((swift_dynamicCast(v9, &v10, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
    return 0;
  v5 = v9[0];
  v6 = v9[1];
  if (qword_100082EC8 != -1)
    swift_once(&qword_100082EC8, sub_10000D61C);
  v7 = sub_10002B02C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v10, &type metadata for CRLUSDRendering.RendererError, v5, v6, &type metadata for CRLUSDRendering.RendererError, v7);
  sub_100013320(v5, v6);
  return v10;
}

void sub_1000260F8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  Swift::String v46;
  __int128 v47;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  do
  {
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v5 << 6);
      }
      else
      {
        v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return;
        }
        if (v14 >= v10)
          goto LABEL_25;
        v15 = *(_QWORD *)(v6 + 8 * v14);
        ++v5;
        if (!v15)
        {
          v5 = v14 + 1;
          if (v14 + 1 >= v10)
            goto LABEL_25;
          v15 = *(_QWORD *)(v6 + 8 * v5);
          if (!v15)
          {
            v5 = v14 + 2;
            if (v14 + 2 >= v10)
              goto LABEL_25;
            v15 = *(_QWORD *)(v6 + 8 * v5);
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v10)
                goto LABEL_25;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v5 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_34;
                  if (v5 >= v10)
                    goto LABEL_25;
                  v15 = *(_QWORD *)(v6 + 8 * v5);
                  ++v16;
                  if (v15)
                    goto LABEL_20;
                }
              }
              v5 = v16;
            }
          }
        }
LABEL_20:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v5 << 6);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 8 * v13) != 2)
        break;
      v11 = __OFADD__(v3++, 1);
      if (v11)
        goto LABEL_35;
    }
    v11 = __OFADD__(v4++, 1);
  }
  while (!v11);
  __break(1u);
LABEL_25:
  *(double *)&v17 = BoundingBox.extents.getter();
  v47 = v17;
  v18 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100061930;
  *(_QWORD *)(v19 + 56) = &type metadata for Float;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Float;
  *(_DWORD *)(v19 + 32) = v47;
  v20._countAndFlagsBits = String.init(format:_:)(1714499109, 0xE400000000000000, v19);
  object = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  v22._countAndFlagsBits = 2127904;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  v23 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100061930;
  *(_QWORD *)(v23 + 56) = &type metadata for Float;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Float;
  *(_DWORD *)(v23 + 32) = DWORD1(v47);
  v24._countAndFlagsBits = String.init(format:_:)(1714499109, 0xE400000000000000, v23);
  v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._countAndFlagsBits = 2127904;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  v27 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v27 + 16) = xmmword_100061930;
  *(_QWORD *)(v27 + 56) = &type metadata for Float;
  *(_QWORD *)(v27 + 64) = &protocol witness table for Float;
  *(_DWORD *)(v27 + 32) = DWORD2(v47);
  v28._countAndFlagsBits = String.init(format:_:)(1714499109, 0xE400000000000000, v27);
  v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  v30._countAndFlagsBits = 41;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  _StringGuts.grow(_:)(69);
  v31._object = (void *)0x800000010005EE30;
  v31._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 40;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(0xE100000000000000);
  v33._countAndFlagsBits = 8236;
  v33._object = (void *)0xE200000000000000;
  String.append(_:)(v33);
  if (__OFADD__(v4, v3))
    goto LABEL_36;
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
  v36._countAndFlagsBits = 0x2820736D696E6120;
  v36._object = (void *)0xE800000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  v39._countAndFlagsBits = 0x2C65766974636120;
  v39._object = (void *)0xE900000000000020;
  String.append(_:)(v39);
  v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v41 = v40._object;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v41);
  v42._countAndFlagsBits = 0xD000000000000015;
  v42._object = (void *)0x800000010005EE50;
  String.append(_:)(v42);
  if ((a2 & 1) != 0)
    v43 = 1702195828;
  else
    v43 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v44 = 0xE400000000000000;
  else
    v44 = 0xE500000000000000;
  v45 = v44;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease(v44);
  v46._countAndFlagsBits = 41;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
}

uint64_t sub_100026564(uint64_t result, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  size_t isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = (_QWORD *)sub_1000259CC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = sub_1000131C0(&qword_100083688);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (char *)v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * v6;
  v17 = &v14[v15 * v6];
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_24;
  v18 = v4[2];
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_30;
  v20 = &v14[v15 * a2];
  if (v16 < v15 * a2 || v17 >= &v20[v19 * v15])
  {
    result = swift_arrayInitWithTakeFrontToBack(v17, v20, v19, v12);
  }
  else if (v16 != v15 * a2)
  {
    result = swift_arrayInitWithTakeBackToFront(v17);
  }
  v22 = v4[2];
  v23 = __OFADD__(v22, v8);
  v24 = v22 - v7;
  if (!v23)
  {
    v4[2] = v24;
LABEL_24:
    *v2 = v4;
    return result;
  }
LABEL_31:
  __break(1u);
  return result;
}

BOOL sub_1000266BC(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  BOOL v5;
  _BOOL8 result;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  BOOL v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;

  v4 = 0;
  v5 = 1;
  while (!v5)
  {
    v5 = 0;
    result = 0;
    if (v4 == 2)
      return result;
LABEL_3:
    ++v4;
  }
  v14 = a1;
  v7 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
  v15 = a3;
  v8 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
  v5 = v7 == v8;
  if (v4 != 2)
    goto LABEL_3;
  if (v7 != v8)
    return 0;
  v9 = 0;
  while (1)
  {
    v12 = a2;
    v10 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v13 = a4;
    v11 = v10 == *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    result = v11;
    if (v9 == 2)
      break;
    while (1)
    {
      ++v9;
      if (v11)
        break;
      v11 = 0;
      result = 0;
      if (v9 == 2)
        return result;
    }
  }
  return result;
}

void sub_100026790(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1000267B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
    return 0;
  if (a1 == a4 && a2 == a5)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
}

uint64_t sub_1000268B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  float v14;
  float v15;
  int8x16_t v17;
  uint64_t v18;
  BOOL v19;
  float v20;
  float v21;
  int8x16_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[40];
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  sub_100013C20(a1, (uint64_t)&v33);
  v4 = v36;
  v3 = v37;
  if (!(v36 >> 62))
  {
    v36 &= 0x3FFFFFFFFFFFFFFFuLL;
    v24 = v33;
    v25 = v34;
    v9 = v35;
    sub_100013C20(a2, (uint64_t)v30);
    v10 = v31;
    v11 = v31 >> 62;
    if (v31 >> 62)
      goto LABEL_45;
    v12 = 1;
    v13 = v32;
    while (1)
    {
      while (!v12)
      {
        if (v11 == 2)
          goto LABEL_45;
        v12 = 0;
        ++v11;
      }
      v28 = v24;
      v14 = *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
      v29 = *(_OWORD *)v30;
      v15 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
      v12 = v14 == v15;
      if (v11 == 2)
        break;
      ++v11;
    }
    if (v14 != v15)
      goto LABEL_45;
    v18 = 0;
    v19 = 1;
    while (1)
    {
      while (!v19)
      {
        if (v18 == 2)
          goto LABEL_45;
        v19 = 0;
        ++v18;
      }
      v26 = v25;
      v20 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
      v27 = *(_OWORD *)&v30[16];
      v21 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
      v19 = v20 == v21;
      if (v18 == 2)
        break;
      ++v18;
    }
    if (v20 != v21
      || (sub_100022A98(v9, *(uint64_t *)&v30[32]) & 1) == 0
      || ((v4 ^ v10) & 1) != 0
      || (sub_100022CAC(v3, v13) & 1) == 0)
    {
      goto LABEL_45;
    }
    goto LABEL_40;
  }
  v5 = v33;
  if (v36 >> 62 != 1)
  {
    if (v36 == 0x8000000000000000
      && (v37 | (unint64_t)v33 | v35 | *((_QWORD *)&v34 + 1) | (unint64_t)v34 | *((_QWORD *)&v33 + 1)) == 0)
    {
      sub_100013C20(a2, (uint64_t)v30);
      if (v31 >> 62 != 2)
        goto LABEL_45;
      if (v31 != 0x8000000000000000)
        goto LABEL_45;
      v17 = vorrq_s8(*(int8x16_t *)&v30[8], *(int8x16_t *)&v30[24]);
      if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)) | v32 | *(_QWORD *)v30)
        goto LABEL_45;
    }
    else
    {
      if (v36 == 0x8000000000000000
        && (_QWORD)v33 == 1
        && !(*((_QWORD *)&v34 + 1) | v35 | (unint64_t)v34 | *((_QWORD *)&v33 + 1) | v37))
      {
        sub_100013C20(a2, (uint64_t)v30);
        if (v31 >> 62 != 2 || v32 || v31 != 0x8000000000000000 || *(_QWORD *)v30 != 1)
          goto LABEL_45;
      }
      else
      {
        sub_100013C20(a2, (uint64_t)v30);
        if (v31 >> 62 != 2 || v32 || v31 != 0x8000000000000000 || *(_QWORD *)v30 != 2)
          goto LABEL_45;
      }
      v22 = vorrq_s8(*(int8x16_t *)&v30[8], *(int8x16_t *)&v30[24]);
      if (vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)))
      {
LABEL_45:
        v8 = 0;
        return v8 & 1;
      }
    }
LABEL_40:
    v8 = 1;
    return v8 & 1;
  }
  v36 &= 0x3FFFFFFFFFFFFFFFuLL;
  v6 = *((_QWORD *)&v33 + 1);
  v7 = v34;
  sub_100013C20(a2, (uint64_t)v30);
  if (v31 >> 62 != 1)
    goto LABEL_45;
  v31 &= 0x3FFFFFFFFFFFFFFFuLL;
  sub_100026790(v5, v6, v7);
  return v8 & 1;
}

unint64_t sub_100026BC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t result;
  char v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  __int128 v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_1000131C0(&qword_100084158);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v14 = *(_OWORD *)(a1 + 32);
  result = sub_100024FEC(*(_QWORD *)(a1 + 32));
  if ((v5 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain(result);
    return (unint64_t)v3;
  }
  v6 = (__int128 *)(a1 + 48);
  v7 = v1 - 1;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v8 = *((_QWORD *)&v14 + 1);
    *(_QWORD *)(v3[6] + 8 * result) = v14;
    *(_QWORD *)(v3[7] + 8 * result) = *((_QWORD *)&v14 + 1);
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    result = *((_QWORD *)&v14 + 1);
    v3[2] = v11;
    if (!v7)
      goto LABEL_8;
    v12 = *v6++;
    v14 = v12;
    swift_retain(v8);
    result = sub_100024FEC(v12);
    --v7;
    if ((v13 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_100026CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_100025540(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_100026D80(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100026DC4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_100026DF8 + *((int *)qword_100026EB8 + (v0 >> 62))))();
}

uint64_t sub_100026E08@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      sub_100013364(v2, v1);
      sub_1000257A8(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

BOOL sub_100026EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  BOOL v5;
  float v6;
  float v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;

  if (*(float *)a1 != *(float *)a2)
    return 0;
  v2 = 0;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a2 + 16);
  v5 = 1;
  while (!v5)
  {
    v5 = 0;
    v8 = 0;
    if (v2 == 3)
      return v8;
LABEL_4:
    ++v2;
  }
  v10 = v3;
  v6 = *(float *)((unint64_t)&v10 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  v11 = v4;
  v7 = *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  v5 = v6 == v7;
  if (v2 != 3)
    goto LABEL_4;
  if (v6 != v7
    || *(double *)(a1 + 32) != *(double *)(a2 + 32)
    || *(double *)(a1 + 40) != *(double *)(a2 + 40)
    || *(double *)(a1 + 48) != *(double *)(a2 + 48)
    || *(double *)(a1 + 56) != *(double *)(a2 + 56))
  {
    return 0;
  }
  return *(double *)(a1 + 64) == *(double *)(a2 + 64);
}

BOOL sub_100026FAC(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[4];
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;

  if ((static URL.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for CRLUSDRendering.SceneRequest(0);
  sub_100026D80(*(_QWORD *)(a1 + v4[5]), *(_QWORD *)(a1 + v4[5] + 8));
  if ((v5 & 1) == 0)
    return 0;
  v6 = a1 + v4[6];
  v7 = *(_OWORD *)(v6 + 48);
  v13[2] = *(_OWORD *)(v6 + 32);
  v13[3] = v7;
  v14 = *(_QWORD *)(v6 + 64);
  v8 = *(_OWORD *)(v6 + 16);
  v13[0] = *(_OWORD *)v6;
  v13[1] = v8;
  v9 = a2 + v4[6];
  v16 = *(_QWORD *)(v9 + 64);
  v10 = *(_OWORD *)(v9 + 48);
  v15[2] = *(_OWORD *)(v9 + 32);
  v15[3] = v10;
  v11 = *(_OWORD *)(v9 + 16);
  v15[0] = *(_OWORD *)v9;
  v15[1] = v11;
  return sub_100026EC8((uint64_t)v13, (uint64_t)v15)
      && CGRectEqualToRect(*(CGRect *)(a1 + v4[7]), *(CGRect *)(a2 + v4[7]));
}

uint64_t sub_100027084(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t sub_1000270B0()
{
  uint64_t v0;
  Swift::Int v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v0 + 40));
  String.hash(into:)(v3, 0x617453656B617761, 0xEA00000000006574);
  v1 = Hasher._finalize()();
  return sub_100027084(v1);
}

uint64_t sub_100027108(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D6B6F6F426C7275 && a2 == 0xEF617461446B7261)
  {
    v7 = 0xEF617461446B7261;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6B6F6F426C7275, 0xEF617461446B7261, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    v8 = 0xED00006E6F697461;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x46746C7561666564 && a2 == 0xEC000000656D6172)
  {
    swift_bridgeObjectRelease(0xEC000000656D6172);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x46746C7561666564, 0xEC000000656D6172, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100027310(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x4F466172656D6163 && a2 == 0xE900000000000056)
  {
    v5 = 0xE900000000000056;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4F466172656D6163, 0xE900000000000056, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7461746E6569726FLL && a2 == 0xEB000000006E6F69)
  {
    v7 = 0xEB000000006E6F69;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461746E6569726FLL, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x724664656C616373 && a2 == 0xEF657A6953656D61)
  {
    v8 = 0xEF657A6953656D61;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x724664656C616373, 0xEF657A6953656D61, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x800000010005EEF0;
    if (a2 == 0x800000010005EEF0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010005EEF0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x73746E65746E6F63 && a2 == 0xED0000656C616353)
  {
    swift_bridgeObjectRelease(0xED0000656C616353);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746E65746E6F63, 0xED0000656C616353, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100027590(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6D696E4179616C70 && a2 == 0xEE00736E6F697461)
  {
    v5 = 0xEE00736E6F697461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D696E4179616C70, 0xEE00736E6F697461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696E416573756170 && a2 == 0xEF736E6F6974616DLL)
  {
    v7 = 0xEF736E6F6974616DLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696E416573756170, 0xEF736E6F6974616DLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x800000010005EEB0;
    if (a2 == 0x800000010005EEB0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010005EEB0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x696E417465736572 && a2 == 0xEF736E6F6974616DLL)
  {
    v9 = 0xEF736E6F6974616DLL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696E417465736572, 0xEF736E6F6974616DLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6D696E41706F7473 && a2 == 0xEE00736E6F697461)
  {
    swift_bridgeObjectRelease(0xEE00736E6F697461);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D696E41706F7473, 0xEE00736E6F697461, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10002781C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000010005EED0;
    if (a2 == 0x800000010005EED0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010005EED0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6150737472617473 && a2 == 0xEC00000064657375)
  {
    swift_bridgeObjectRelease(0xEC00000064657375);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6150737472617473, 0xEC00000064657375, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100027920(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6465737561507369 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465737561507369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C706D6F437369 && a2 == 0xEA00000000006574)
  {
    v7 = 0xEA00000000006574;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C706D6F437369, 0xEA00000000006574, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6979616C507369 && a2 == 0xE900000000000067)
  {
    v8 = 0xE900000000000067;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6979616C507369, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6570706F74537369 && a2 == 0xE900000000000064)
  {
    v9 = 0xE900000000000064;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570706F74537369, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6465657073 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465657073, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100027B54(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6576697463616E69 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6576697463616E69, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657669746361 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657669746361, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100027C3C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x756F426C65646F6DLL && a2 == 0xEB0000000073646ELL)
  {
    v5 = 0xEB0000000073646ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F426C65646F6DLL, 0xEB0000000073646ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F6974616D696E61 && a2 == 0xEA0000000000736ELL)
  {
    v7 = 0xEA0000000000736ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6974616D696E61, 0xEA0000000000736ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6956734977656976 && a2 == 0xED0000656C626973)
  {
    v8 = 0xED0000656C626973;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6956734977656976, 0xED0000656C626973, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x617461646174656DLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100027E3C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x64656C6261736964 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C6261736964, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6574736575716572 && a2 == 0xE900000000000064)
  {
    v7 = 0xE900000000000064;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574736575716572, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x676E6964616F6CLL && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6964616F6CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E697265646E6572 && a2 == 0xE900000000000067)
  {
    v9 = 0xE900000000000067;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E697265646E6572, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F727265, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100028060(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x7245676E69646F63 && a2 == 0xEB00000000726F72)
  {
    v5 = 0xEB00000000726F72;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7245676E69646F63, 0xEB00000000726F72, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726F7272456C7275 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F7272456C7275, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x45676E6964616F6CLL && a2 == 0xEC000000726F7272)
  {
    v8 = 0xEC000000726F7272;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45676E6964616F6CLL, 0xEC000000726F7272, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7272456574617473 && a2 == 0xEA0000000000726FLL)
  {
    v9 = 0xEA0000000000726FLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7272456574617473, 0xEA0000000000726FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x4574756F656D6974 && a2 == 0xEC000000726F7272)
  {
    v10 = 0xEC000000726F7272;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4574756F656D6974, 0xEC000000726F7272, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6F69736E65747865 && a2 == 0xEE00726F7272456ELL)
  {
    v11 = 0xEE00726F7272456ELL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69736E65747865, 0xEE00726F7272456ELL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x45636972656E6567 && a2 == 0xEC000000726F7272)
  {
    swift_bridgeObjectRelease(0xEC000000726F7272);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x45636972656E6567, 0xEC000000726F7272, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1000283C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[8];
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;

  v30 = sub_1000131C0(&qword_100083DF8);
  v35 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v34 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000131C0(&qword_100083E00);
  v28[5] = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v33 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000131C0(&qword_100083E08);
  v28[6] = *(_QWORD *)(v4 - 8);
  v28[7] = v4;
  __chkstk_darwin(v4);
  v32 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000131C0(&qword_100083E10);
  v28[3] = *(_QWORD *)(v6 - 8);
  v28[4] = v6;
  __chkstk_darwin(v6);
  v31 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000131C0(&qword_100083E18);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000131C0(&qword_100083E20);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  v36 = a1;
  sub_100015BEC(a1, v17);
  v18 = sub_10002B194();
  v19 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneAction.CodingKeys, &type metadata for CRLUSDRendering.SceneAction.CodingKeys, v18, v17, v16);
  if (!v19)
  {
    v37 = v11;
    v28[1] = v9;
    v28[2] = v8;
    v20 = KeyedDecodingContainer.allKeys.getter(v12);
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X10 }
    v21 = v20;
    v9 = type metadata accessor for DecodingError(0);
    swift_allocError(v9, &protocol witness table for DecodingError, 0, 0);
    v22 = v15;
    v24 = v23;
    sub_1000131C0(&qword_100083828);
    *v24 = &type metadata for CRLUSDRendering.SceneAction;
    v25 = KeyedDecodingContainer.codingPath.getter(v12);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x800000010005E300, 0);
    v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v9);
    swift_willThrow(v26);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
  }
  sub_100015C54(v36);
  return v9;
}

void sub_100028880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v7 - 96) = a1;
  *(_BYTE *)(v7 - 81) = 4;
  v8 = sub_10002B1D8();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys, v7 - 81, v6, &type metadata for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys, v8);
  if (v4)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v7 - 96));
    JUMPOUT(0x10002883CLL);
  }
  (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v3, *(_QWORD *)(v7 - 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 - 96));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v6);
  JUMPOUT(0x100028970);
}

unint64_t sub_1000289E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned __int8 v42;
  char v43;
  char v44;
  char v45;
  unsigned int v46;
  char v47;
  char v48;

  v2 = sub_1000131C0(&qword_100083E88);
  v3 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  v38 = v3;
  __chkstk_darwin(v2);
  v39 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000131C0(&qword_100083E90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000131C0(&qword_100083E98);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v40 = a1;
  v15 = (unint64_t)sub_100015BEC(a1, v13);
  v16 = sub_10002B32C();
  v17 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys, v16, v13, v14);
  if (!v17)
  {
    v18 = v5;
    v19 = v39;
    v41 = v10;
    v20 = KeyedDecodingContainer.allKeys.getter(v9);
    v21 = v20;
    if (*(_QWORD *)(v20 + 16) == 1)
    {
      if ((*(_BYTE *)(v20 + 32) & 1) != 0)
      {
        v48 = 1;
        v22 = sub_10002B370();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys, &v48, v9, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys, v22);
        v23 = sub_10002B3B4();
        v24 = v37;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState, v25, v37, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState, v23);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v24);
        swift_bridgeObjectRelease(v21);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v9);
        v26 = 256;
        if (!v43)
          v26 = 0;
        v27 = v26 | v42;
        v28 = 0x10000;
        if (!v44)
          v28 = 0;
        v29 = 0x1000000;
        if (!v45)
          v29 = 0;
        v15 = v27 | v28 | v29 | ((unint64_t)v46 << 32);
      }
      else
      {
        v47 = 0;
        v35 = sub_10002B3F8();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys, &v47, v9, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys, v35);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
        swift_bridgeObjectRelease(v21);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v9);
        v15 = 2;
      }
    }
    else
    {
      v30 = type metadata accessor for DecodingError(0);
      swift_allocError(v30, &protocol witness table for DecodingError, 0, 0);
      v32 = v31;
      sub_1000131C0(&qword_100083828);
      v15 = (unint64_t)v12;
      *v32 = &type metadata for CRLUSDRendering.SceneDescription.AnimationState;
      v33 = KeyedDecodingContainer.codingPath.getter(v9);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v33, 0xD00000000000002BLL, 0x800000010005E300, 0);
      v34 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, enum case for DecodingError.typeMismatch(_:), v30);
      swift_willThrow(v34);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v9);
    }
  }
  sub_100015C54(v40);
  return v15;
}

float sub_100028DA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v10;
  _DWORD v11[2];
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v2 = sub_1000131C0(&qword_100083EE0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_100015BEC(a1, v6);
  v8 = sub_10002B480();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys, v8, v6, v7);
  v16 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v16, v2);
  v15 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v15, v2);
  v14 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v14, v2);
  v13 = 3;
  v11[1] = KeyedDecodingContainer.decode(_:forKey:)(&v13, v2);
  v12 = 4;
  v10 = KeyedDecodingContainer.decode(_:forKey:)(&v12, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100015C54(a1);
  return v10;
}

uint64_t sub_100028FAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[7];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v37 = a2;
  v32 = sub_1000131C0(&qword_100083EF8);
  v41 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v40 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000131C0(&qword_100083F00);
  v5 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  v35 = v5;
  __chkstk_darwin(v4);
  v39 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000131C0(&qword_100083F08);
  v31[6] = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v38 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000131C0(&qword_100083F10);
  v31[4] = *(_QWORD *)(v8 - 8);
  v31[5] = v8;
  __chkstk_darwin(v8);
  v36 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000131C0(&qword_100083F18);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000131C0(&qword_100083F20);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v18 = a1[4];
  v42 = a1;
  sub_100015BEC(a1, v19);
  v20 = sub_10002B54C();
  v21 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.RendererState.CodingKeys, &type metadata for CRLUSDRendering.RendererState.CodingKeys, v20, v19, v18);
  if (!v21)
  {
    v31[3] = v13;
    v31[1] = v11;
    v31[2] = v10;
    v43 = v15;
    v22 = KeyedDecodingContainer.allKeys.getter(v14);
    v23 = v14;
    if (*(_QWORD *)(v22 + 16) == 1)
      __asm { BR              X10 }
    v24 = v22;
    v25 = type metadata accessor for DecodingError(0);
    swift_allocError(v25, &protocol witness table for DecodingError, 0, 0);
    v27 = v26;
    sub_1000131C0(&qword_100083828);
    *v27 = &type metadata for CRLUSDRendering.RendererState;
    v28 = KeyedDecodingContainer.codingPath.getter(v23);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v28, 0xD00000000000002BLL, 0x800000010005E300, 0);
    v29 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
    swift_willThrow(v29);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v23);
  }
  return sub_100015C54(v42);
}

_QWORD *sub_1000296CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[9];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  v36 = sub_1000131C0(&qword_100083FA0);
  v48 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v47 = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000131C0(&qword_100083FA8);
  v4 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v41 = v4;
  __chkstk_darwin(v3);
  v46 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000131C0(&qword_100083FB0);
  v35[8] = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v43 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_1000131C0(&qword_100083FB8);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v44 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000131C0(&qword_100083FC0);
  v9 = *(_QWORD *)(v8 - 8);
  v35[6] = v8;
  v35[7] = v9;
  __chkstk_darwin(v8);
  v42 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000131C0(&qword_100083FC8);
  v12 = *(_QWORD *)(v11 - 8);
  v35[4] = v11;
  v35[5] = v12;
  __chkstk_darwin(v11);
  v45 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000131C0(&qword_100083FD0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000131C0(&qword_100083FD8);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v23 = a1[4];
  v49 = a1;
  v24 = sub_100015BEC(a1, v22);
  v25 = sub_10002B7B0();
  v26 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.RendererError.CodingKeys, &type metadata for CRLUSDRendering.RendererError.CodingKeys, v25, v22, v23);
  if (!v26)
  {
    v35[3] = v17;
    v35[1] = v15;
    v35[0] = v14;
    v50 = v19;
    v27 = KeyedDecodingContainer.allKeys.getter(v18);
    v28 = v27;
    if (*(_QWORD *)(v27 + 16) == 1)
    {
      v35[2] = v18;
      __asm { BR              X10 }
    }
    v29 = type metadata accessor for DecodingError(0);
    swift_allocError(v29, &protocol witness table for DecodingError, 0, 0);
    v31 = v30;
    v24 = v21;
    sub_1000131C0(&qword_100083828);
    *v31 = &type metadata for CRLUSDRendering.RendererError;
    v32 = KeyedDecodingContainer.codingPath.getter(v18);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v32, 0xD00000000000002BLL, 0x800000010005E300, 0);
    v33 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for DecodingError.typeMismatch(_:), v29);
    swift_willThrow(v33);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v21, v18);
  }
  sub_100015C54(v49);
  return v24;
}

uint64_t sub_10002A074@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  char v26;

  v5 = sub_1000131C0(&qword_100084070);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100015BEC(a1, v9);
  v11 = sub_10002BA58();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys, &type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100015C54(a1);
  LOBYTE(v25) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  type metadata accessor for simd_quatf(0);
  v14 = v13;
  v26 = 1;
  v15 = sub_10002BDE8(&qword_100084080, 255, (uint64_t (*)(uint64_t))type metadata accessor for simd_quatf, (uint64_t)&protocol conformance descriptor for simd_quatf);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v14, &v26, v5, v14, v15);
  v24 = v25;
  type metadata accessor for CGSize(0);
  v17 = v16;
  v26 = 2;
  v18 = sub_10002BDE8(&qword_100084088, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &v26, v5, v17, v18);
  v19 = v25;
  v26 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &v26, v5, v17, v18);
  v20 = v25;
  v26 = 4;
  v21 = sub_10002BA9C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CGFloat, &v26, v5, &type metadata for CGFloat, v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v25;
  result = sub_100015C54(a1);
  *(float *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v24;
  *(_OWORD *)(a2 + 32) = v19;
  *(_OWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 64) = v22;
  return result;
}

uint64_t sub_10002A314@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  _OWORD v26[2];
  char v27;

  v5 = sub_1000131C0(&qword_1000840B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001E610((uint64_t)&_swiftEmptyArrayStorage);
  v9 = a1[3];
  v10 = a1[4];
  sub_100015BEC(a1, v9);
  v11 = sub_10002BB24();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLUSDRendering.SceneDescription.CodingKeys, &type metadata for CRLUSDRendering.SceneDescription.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v15 = v25;
    sub_100015C54(a1);
    return swift_bridgeObjectRelease(v15);
  }
  else
  {
    v27 = 0;
    v12 = sub_10002BB68();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for BoundingBox, &v27, v5, &type metadata for BoundingBox, v12);
    v23 = v26[1];
    v24 = v26[0];
    v13 = sub_1000131C0(&qword_1000840D0);
    v27 = 1;
    v14 = sub_10002BC34(&qword_1000840D8, (void (*)(void))sub_10002BBAC, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, &v27, v5, v13, v14);
    v16 = *(_QWORD *)&v26[0];
    LOBYTE(v26[0]) = 2;
    swift_bridgeObjectRetain(v16);
    v17 = KeyedDecodingContainer.decode(_:forKey:)(v26, v5);
    v18 = sub_1000131C0(&qword_1000840E8);
    v27 = 3;
    v19 = sub_10002BCEC(&qword_1000840F0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &v27, v5, v18, v19);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = *(_QWORD *)&v26[0];
    swift_bridgeObjectRetain(*(_QWORD *)&v26[0]);
    swift_bridgeObjectRelease(v25);
    sub_100015C54(a1);
    swift_bridgeObjectRelease(v20);
    result = swift_bridgeObjectRelease(v16);
    v22 = v23;
    *(_OWORD *)a2 = v24;
    *(_OWORD *)(a2 + 16) = v22;
    *(_QWORD *)(a2 + 32) = v16;
    *(_BYTE *)(a2 + 40) = v17 & 1;
    *(_QWORD *)(a2 + 48) = v20;
  }
  return result;
}

uint64_t sub_10002A5E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v3 = a1[3];
  v4 = a1[4];
  sub_100015BEC(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v11, v3, v4);
  if (v1)
    return sub_100015C54(a1);
  v5 = v12;
  v6 = v13;
  sub_100015BEC(v11, v12);
  v7 = sub_1000131C0(&qword_100083B48);
  v8 = sub_10002BF38(&qword_1000841C0, &qword_100083B48, (uint64_t)&protocol conformance descriptor for SIMD4<A>);
  dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v10, v7, v7, v8, v5, v6);
  sub_100015C54(v11);
  return sub_100015C54(a1);
}

uint64_t sub_10002A6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10002A714()
{
  return type metadata accessor for CRLUSDRendering.LoadReceipt(0);
}

uint64_t type metadata accessor for CRLUSDRendering.LoadReceipt(uint64_t a1)
{
  return sub_100012AE4(a1, (uint64_t *)&unk_100083B80, (uint64_t)&nominal type descriptor for CRLUSDRendering.LoadReceipt);
}

uint64_t sub_10002A730(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CRLUSDRendering.TaskQueue()
{
  return objc_opt_self(_TtCO20USDRendererExtension15CRLUSDRendering9TaskQueue);
}

uint64_t destroy for CRLUSDRendering.SceneDescription(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for CRLUSDRendering.SceneDescription(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for CRLUSDRendering.SceneDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for CRLUSDRendering.SceneDescription(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CRLUSDRendering.SceneDescription(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendering.SceneDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendering.SceneDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneDescription()
{
  return &type metadata for CRLUSDRendering.SceneDescription;
}

__n128 initializeWithCopy for CRLUSDRendering.SceneConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendering.SceneConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendering.SceneConfiguration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneConfiguration()
{
  return &type metadata for CRLUSDRendering.SceneConfiguration;
}

uint64_t destroy for CRLUSDRendering.RendererState(uint64_t *a1)
{
  return sub_100014BEC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
}

uint64_t *initializeWithCopy for CRLUSDRendering.RendererState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  sub_100014E34(*a2, v4, v5, v6, v7, v8, v9);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *assignWithCopy for CRLUSDRendering.RendererState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  sub_100014E34(*a2, v4, v5, v6, v7, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1[5];
  v16 = a1[6];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  sub_100014BEC(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t *assignWithTake for CRLUSDRendering.RendererState(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = v3;
  sub_100014BEC(v4, v6, v5, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendering.RendererState(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for CRLUSDRendering.RendererState(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 2 * -a2;
      *(_QWORD *)(a1 + 48) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10002AC6C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10002AC88(uint64_t result)
{
  *(_QWORD *)(result + 40) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10002AC98(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    *(_QWORD *)(result + 40) = *(_QWORD *)(result + 40) & 1 | (a2 << 62);
  }
  else
  {
    *(_QWORD *)result = (a2 - 2);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = xmmword_100063EC0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererState()
{
  return &type metadata for CRLUSDRendering.RendererState;
}

ValueMetadata *type metadata accessor for CRLUSDRendering()
{
  return &type metadata for CRLUSDRendering;
}

_BYTE *sub_10002ACFC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

unint64_t sub_10002AD1C()
{
  unint64_t result;

  result = qword_100083D50;
  if (!qword_100083D50)
  {
    result = swift_getWitnessTable(&unk_100061C94, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100083D50);
  }
  return result;
}

unint64_t sub_10002AD68()
{
  unint64_t result;

  result = qword_100083D58;
  if (!qword_100083D58)
  {
    result = swift_getWitnessTable(&unk_100061E04, &type metadata for CRLUSDRendering.SceneDescription);
    atomic_store(result, (unint64_t *)&qword_100083D58);
  }
  return result;
}

unint64_t sub_10002ADB0()
{
  unint64_t result;

  result = qword_100083D60;
  if (!qword_100083D60)
  {
    result = swift_getWitnessTable(&unk_100061EBC, &type metadata for CRLUSDRendering.SceneConfiguration);
    atomic_store(result, (unint64_t *)&qword_100083D60);
  }
  return result;
}

unint64_t sub_10002ADF8()
{
  unint64_t result;

  result = qword_100083D68;
  if (!qword_100083D68)
  {
    result = swift_getWitnessTable(&unk_100062004, &type metadata for CRLUSDRendering.RendererError);
    atomic_store(result, (unint64_t *)&qword_100083D68);
  }
  return result;
}

unint64_t sub_10002AE40()
{
  unint64_t result;

  result = qword_100083D70;
  if (!qword_100083D70)
  {
    result = swift_getWitnessTable(&unk_100061CBC, &type metadata for CRLUSDRendering.RendererState);
    atomic_store(result, (unint64_t *)&qword_100083D70);
  }
  return result;
}

unint64_t sub_10002AE88()
{
  unint64_t result;

  result = qword_100083D78;
  if (!qword_100083D78)
  {
    result = swift_getWitnessTable(&unk_1000620BC, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState);
    atomic_store(result, (unint64_t *)&qword_100083D78);
  }
  return result;
}

unint64_t sub_10002AED0()
{
  unint64_t result;

  result = qword_100083D80;
  if (!qword_100083D80)
  {
    result = swift_getWitnessTable(&unk_100062174, &type metadata for CRLUSDRendering.SceneDescription.AnimationState);
    atomic_store(result, (unint64_t *)&qword_100083D80);
  }
  return result;
}

unint64_t sub_10002AF18()
{
  unint64_t result;

  result = qword_100083D88;
  if (!qword_100083D88)
  {
    result = swift_getWitnessTable(&unk_10006222C, &type metadata for CRLUSDRendering.SceneAction);
    atomic_store(result, (unint64_t *)&qword_100083D88);
  }
  return result;
}

unint64_t sub_10002AF60()
{
  unint64_t result;

  result = qword_100083D90;
  if (!qword_100083D90)
  {
    result = swift_getWitnessTable(&unk_100061BCC, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100083D90);
  }
  return result;
}

unint64_t sub_10002AFA8()
{
  unint64_t result;

  result = qword_100083D98;
  if (!qword_100083D98)
  {
    result = swift_getWitnessTable(&unk_100061BF4, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100083D98);
  }
  return result;
}

uint64_t sub_10002AFEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000131C0(&qword_100083DA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10002B02C()
{
  unint64_t result;

  result = qword_100083DA8;
  if (!qword_100083DA8)
  {
    result = swift_getWitnessTable(&unk_100061F9C, &type metadata for CRLUSDRendering.RendererError);
    atomic_store(result, (unint64_t *)&qword_100083DA8);
  }
  return result;
}

uint64_t type metadata accessor for CRLUSDRendering.SceneRequest(uint64_t a1)
{
  return sub_100012AE4(a1, qword_100084220, (uint64_t)&nominal type descriptor for CRLUSDRendering.SceneRequest);
}

unint64_t sub_10002B084()
{
  unint64_t result;

  result = qword_100083DB8;
  if (!qword_100083DB8)
  {
    result = swift_getWitnessTable(&unk_100063E68, &type metadata for CRLUSDRendering.SceneRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083DB8);
  }
  return result;
}

unint64_t sub_10002B0C8()
{
  unint64_t result;

  result = qword_100083DC8;
  if (!qword_100083DC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100083DC8);
  }
  return result;
}

uint64_t sub_10002B10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRLUSDRendering.SceneRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002B150()
{
  unint64_t result;

  result = qword_100083DE8;
  if (!qword_100083DE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100083DE8);
  }
  return result;
}

unint64_t sub_10002B194()
{
  unint64_t result;

  result = qword_100083E28;
  if (!qword_100083E28)
  {
    result = swift_getWitnessTable(&unk_100063E18, &type metadata for CRLUSDRendering.SceneAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083E28);
  }
  return result;
}

unint64_t sub_10002B1D8()
{
  unint64_t result;

  result = qword_100083E30;
  if (!qword_100083E30)
  {
    result = swift_getWitnessTable(&unk_100063DC8, &type metadata for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083E30);
  }
  return result;
}

unint64_t sub_10002B21C()
{
  unint64_t result;

  result = qword_100083E38;
  if (!qword_100083E38)
  {
    result = swift_getWitnessTable(&unk_100063D78, &type metadata for CRLUSDRendering.SceneAction.ResetAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083E38);
  }
  return result;
}

unint64_t sub_10002B260()
{
  unint64_t result;

  result = qword_100083E40;
  if (!qword_100083E40)
  {
    result = swift_getWitnessTable(&unk_100063D28, &type metadata for CRLUSDRendering.SceneAction.ResumeAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083E40);
  }
  return result;
}

unint64_t sub_10002B2A4()
{
  unint64_t result;

  result = qword_100083E48;
  if (!qword_100083E48)
  {
    result = swift_getWitnessTable(&unk_100063CD8, &type metadata for CRLUSDRendering.SceneAction.PauseAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083E48);
  }
  return result;
}

unint64_t sub_10002B2E8()
{
  unint64_t result;

  result = qword_100083E50;
  if (!qword_100083E50)
  {
    result = swift_getWitnessTable(&unk_100063C88, &type metadata for CRLUSDRendering.SceneAction.PlayAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083E50);
  }
  return result;
}

unint64_t sub_10002B32C()
{
  unint64_t result;

  result = qword_100083EA0;
  if (!qword_100083EA0)
  {
    result = swift_getWitnessTable(&unk_100063C38, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083EA0);
  }
  return result;
}

unint64_t sub_10002B370()
{
  unint64_t result;

  result = qword_100083EA8;
  if (!qword_100083EA8)
  {
    result = swift_getWitnessTable(&unk_100063BE8, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083EA8);
  }
  return result;
}

unint64_t sub_10002B3B4()
{
  unint64_t result;

  result = qword_100083EB0;
  if (!qword_100083EB0)
  {
    result = swift_getWitnessTable(&unk_10006210C, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState);
    atomic_store(result, (unint64_t *)&qword_100083EB0);
  }
  return result;
}

unint64_t sub_10002B3F8()
{
  unint64_t result;

  result = qword_100083EB8;
  if (!qword_100083EB8)
  {
    result = swift_getWitnessTable(&unk_100063B98, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083EB8);
  }
  return result;
}

unint64_t sub_10002B43C()
{
  unint64_t result;

  result = qword_100083ED8;
  if (!qword_100083ED8)
  {
    result = swift_getWitnessTable(&unk_1000620E4, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState);
    atomic_store(result, (unint64_t *)&qword_100083ED8);
  }
  return result;
}

unint64_t sub_10002B480()
{
  unint64_t result;

  result = qword_100083EE8;
  if (!qword_100083EE8)
  {
    result = swift_getWitnessTable(&unk_100063B48, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083EE8);
  }
  return result;
}

uint64_t sub_10002B4C4(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t *sub_10002B4DC(uint64_t *a1)
{
  sub_100014BEC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

__n128 *sub_10002B510(__n128 *a1, __n128 *a2)
{
  initializeWithTake for CRLUSDRendererExtensionShared.ExtensionError(a2, a1);
  return a2;
}

unint64_t sub_10002B54C()
{
  unint64_t result;

  result = qword_100083F28;
  if (!qword_100083F28)
  {
    result = swift_getWitnessTable(&unk_100063AF8, &type metadata for CRLUSDRendering.RendererState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083F28);
  }
  return result;
}

unint64_t sub_10002B590()
{
  unint64_t result;

  result = qword_100083F30;
  if (!qword_100083F30)
  {
    result = swift_getWitnessTable(&unk_100063AA8, &type metadata for CRLUSDRendering.RendererState.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083F30);
  }
  return result;
}

unint64_t sub_10002B5D4()
{
  unint64_t result;

  result = qword_100083F38;
  if (!qword_100083F38)
  {
    result = swift_getWitnessTable(&unk_100063A58, &type metadata for CRLUSDRendering.RendererState.RenderingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083F38);
  }
  return result;
}

unint64_t sub_10002B618()
{
  unint64_t result;

  result = qword_100083F40;
  if (!qword_100083F40)
  {
    result = swift_getWitnessTable(&unk_100061E54, &type metadata for CRLUSDRendering.SceneDescription);
    atomic_store(result, (unint64_t *)&qword_100083F40);
  }
  return result;
}

unint64_t sub_10002B65C()
{
  unint64_t result;

  result = qword_100083F48;
  if (!qword_100083F48)
  {
    result = swift_getWitnessTable(&unk_100063A08, &type metadata for CRLUSDRendering.RendererState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083F48);
  }
  return result;
}

unint64_t sub_10002B6A0()
{
  unint64_t result;

  result = qword_100083F50;
  if (!qword_100083F50)
  {
    result = swift_getWitnessTable(&unk_1000639B8, &type metadata for CRLUSDRendering.RendererState.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083F50);
  }
  return result;
}

unint64_t sub_10002B6E4()
{
  unint64_t result;

  result = qword_100083F58;
  if (!qword_100083F58)
  {
    result = swift_getWitnessTable(&unk_100063968, &type metadata for CRLUSDRendering.RendererState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083F58);
  }
  return result;
}

unint64_t sub_10002B728()
{
  unint64_t result;

  result = qword_100083F90;
  if (!qword_100083F90)
  {
    result = swift_getWitnessTable(&unk_100061F74, &type metadata for CRLUSDRendering.RendererError);
    atomic_store(result, (unint64_t *)&qword_100083F90);
  }
  return result;
}

unint64_t sub_10002B76C()
{
  unint64_t result;

  result = qword_100083F98;
  if (!qword_100083F98)
  {
    result = swift_getWitnessTable(&unk_100061E2C, &type metadata for CRLUSDRendering.SceneDescription);
    atomic_store(result, (unint64_t *)&qword_100083F98);
  }
  return result;
}

unint64_t sub_10002B7B0()
{
  unint64_t result;

  result = qword_100083FE0;
  if (!qword_100083FE0)
  {
    result = swift_getWitnessTable(&unk_100063918, &type metadata for CRLUSDRendering.RendererError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083FE0);
  }
  return result;
}

unint64_t sub_10002B7F4()
{
  unint64_t result;

  result = qword_100083FE8;
  if (!qword_100083FE8)
  {
    result = swift_getWitnessTable(&unk_1000638C8, &type metadata for CRLUSDRendering.RendererError.GenericErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083FE8);
  }
  return result;
}

unint64_t sub_10002B838()
{
  unint64_t result;

  result = qword_100083FF0;
  if (!qword_100083FF0)
  {
    result = swift_getWitnessTable(&unk_100063878, &type metadata for CRLUSDRendering.RendererError.ExtensionErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083FF0);
  }
  return result;
}

unint64_t sub_10002B87C()
{
  unint64_t result;

  result = qword_100083FF8;
  if (!qword_100083FF8)
  {
    result = swift_getWitnessTable(&unk_1000612F8, &type metadata for CRLUSDRendererExtensionShared.ExtensionError);
    atomic_store(result, (unint64_t *)&qword_100083FF8);
  }
  return result;
}

unint64_t sub_10002B8C0()
{
  unint64_t result;

  result = qword_100084000;
  if (!qword_100084000)
  {
    result = swift_getWitnessTable(&unk_100063828, &type metadata for CRLUSDRendering.RendererError.TimeoutErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084000);
  }
  return result;
}

unint64_t sub_10002B904()
{
  unint64_t result;

  result = qword_100084008;
  if (!qword_100084008)
  {
    result = swift_getWitnessTable(&unk_1000637D8, &type metadata for CRLUSDRendering.RendererError.StateErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084008);
  }
  return result;
}

unint64_t sub_10002B948()
{
  unint64_t result;

  result = qword_100084010;
  if (!qword_100084010)
  {
    result = swift_getWitnessTable(&unk_100063788, &type metadata for CRLUSDRendering.RendererError.LoadingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084010);
  }
  return result;
}

unint64_t sub_10002B98C()
{
  unint64_t result;

  result = qword_100084018;
  if (!qword_100084018)
  {
    result = swift_getWitnessTable(&unk_100063738, &type metadata for CRLUSDRendering.RendererError.UrlErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084018);
  }
  return result;
}

unint64_t sub_10002B9D0()
{
  unint64_t result;

  result = qword_100084020;
  if (!qword_100084020)
  {
    result = swift_getWitnessTable(&unk_1000636E8, &type metadata for CRLUSDRendering.RendererError.CodingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084020);
  }
  return result;
}

unint64_t sub_10002BA14()
{
  unint64_t result;

  result = qword_100084068;
  if (!qword_100084068)
  {
    result = swift_getWitnessTable(&unk_1000612D0, &type metadata for CRLUSDRendererExtensionShared.ExtensionError);
    atomic_store(result, (unint64_t *)&qword_100084068);
  }
  return result;
}

unint64_t sub_10002BA58()
{
  unint64_t result;

  result = qword_100084078;
  if (!qword_100084078)
  {
    result = swift_getWitnessTable(&unk_100063698, &type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084078);
  }
  return result;
}

unint64_t sub_10002BA9C()
{
  unint64_t result;

  result = qword_100084090;
  if (!qword_100084090)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100084090);
  }
  return result;
}

unint64_t sub_10002BAE0()
{
  unint64_t result;

  result = qword_1000840B0;
  if (!qword_1000840B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1000840B0);
  }
  return result;
}

unint64_t sub_10002BB24()
{
  unint64_t result;

  result = qword_1000840C0;
  if (!qword_1000840C0)
  {
    result = swift_getWitnessTable(&unk_100063648, &type metadata for CRLUSDRendering.SceneDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000840C0);
  }
  return result;
}

unint64_t sub_10002BB68()
{
  unint64_t result;

  result = qword_1000840C8;
  if (!qword_1000840C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BoundingBox, &type metadata for BoundingBox);
    atomic_store(result, (unint64_t *)&qword_1000840C8);
  }
  return result;
}

unint64_t sub_10002BBAC()
{
  unint64_t result;

  result = qword_1000840E0;
  if (!qword_1000840E0)
  {
    result = swift_getWitnessTable(&unk_1000621C4, &type metadata for CRLUSDRendering.SceneDescription.AnimationState);
    atomic_store(result, (unint64_t *)&qword_1000840E0);
  }
  return result;
}

unint64_t sub_10002BBF0()
{
  unint64_t result;

  result = qword_100084100;
  if (!qword_100084100)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BoundingBox, &type metadata for BoundingBox);
    atomic_store(result, (unint64_t *)&qword_100084100);
  }
  return result;
}

uint64_t sub_10002BC34(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000134AC(&qword_1000840D0);
    a2();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002BCA8()
{
  unint64_t result;

  result = qword_100084110;
  if (!qword_100084110)
  {
    result = swift_getWitnessTable(&unk_10006219C, &type metadata for CRLUSDRendering.SceneDescription.AnimationState);
    atomic_store(result, (unint64_t *)&qword_100084110);
  }
  return result;
}

uint64_t sub_10002BCEC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000134AC(&qword_1000840E8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002BD4C()
{
  unint64_t result;

  result = qword_100084130;
  if (!qword_100084130)
  {
    result = swift_getWitnessTable(&unk_100061CE4, &type metadata for CRLUSDRendering.RendererError);
    atomic_store(result, (unint64_t *)&qword_100084130);
  }
  return result;
}

_OWORD *sub_10002BD90(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10002BDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002BDE8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002BE28(uint64_t a1)
{
  uint64_t v1;

  return sub_100024C68(a1, v1);
}

uint64_t sub_10002BE30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10002BE40(uint64_t a1)
{
  uint64_t *v1;

  return sub_100024758(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10002BE50(uint64_t a1)
{
  return sub_10002BEE4(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100024908);
}

uint64_t sub_10002BE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000131C0(&qword_1000841A8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002BED8(uint64_t a1)
{
  return sub_10002BEE4(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100024A04);
}

uint64_t sub_10002BEE4(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000131C0(&qword_1000841A8) - 8) + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

uint64_t sub_10002BF38(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000134AC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneDescription.CodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneDescription.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneConfiguration.CodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendering.RendererError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendering.RendererError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10002C084 + 4 * byte_1000619EB[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10002C0B8 + 4 * byte_1000619E6[v4]))();
}

uint64_t sub_10002C0B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C0C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002C0C8);
  return result;
}

uint64_t sub_10002C0D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002C0DCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10002C0E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C0E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError.CodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererError.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError.CodingErrorCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererError.CodingErrorCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError.UrlErrorCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererError.UrlErrorCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError.LoadingErrorCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererError.LoadingErrorCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError.StateErrorCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererError.StateErrorCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError.TimeoutErrorCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererError.TimeoutErrorCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError.ExtensionErrorCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererError.ExtensionErrorCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError.GenericErrorCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererError.GenericErrorCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererState.CodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererState.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererState.DisabledCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererState.DisabledCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererState.RequestedCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererState.RequestedCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererState.LoadingCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererState.LoadingCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererState.RenderingCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererState.RenderingCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererState.ErrorCodingKeys()
{
  return &type metadata for CRLUSDRendering.RendererState.ErrorCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys;
}

uint64_t _s20USDRendererExtension15CRLUSDRenderingO13RendererErrorO21CodingErrorCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10002C24C + 4 * byte_1000619F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10002C26C + 4 * byte_1000619F5[v4]))();
}

_BYTE *sub_10002C24C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10002C26C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002C274(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002C27C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002C284(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002C28C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys;
}

uint64_t _s20USDRendererExtension15CRLUSDRenderingO18SceneConfigurationV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20USDRendererExtension15CRLUSDRenderingO18SceneConfigurationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10002C384 + 4 * byte_1000619FF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10002C3B8 + 4 * byte_1000619FA[v4]))();
}

uint64_t sub_10002C3B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C3C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002C3C8);
  return result;
}

uint64_t sub_10002C3D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002C3DCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10002C3E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C3E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneAction.CodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneAction.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CRLPencilAndPaperFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10002C4E0 + 4 * byte_100061A09[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002C514 + 4 * byte_100061A04[v4]))();
}

uint64_t sub_10002C514(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C51C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002C524);
  return result;
}

uint64_t sub_10002C530(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002C538);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10002C53C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C544(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneAction.PlayAnimationsCodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneAction.PlayAnimationsCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneAction.PauseAnimationsCodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneAction.PauseAnimationsCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneAction.ResumeAnimationsCodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneAction.ResumeAnimationsCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneAction.ResetAnimationsCodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneAction.ResetAnimationsCodingKeys;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys;
}

uint64_t _s20USDRendererExtension15CRLUSDRenderingO16SceneDescriptionV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20USDRendererExtension15CRLUSDRenderingO16SceneDescriptionV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10002C67C + 4 * byte_100061A13[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10002C6B0 + 4 * byte_100061A0E[v4]))();
}

uint64_t sub_10002C6B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C6B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002C6C0);
  return result;
}

uint64_t sub_10002C6CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002C6D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10002C6D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C6E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneRequest.CodingKeys()
{
  return &type metadata for CRLUSDRendering.SceneRequest.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for CRLUSDRendering.SceneAction(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendering.SceneAction(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 < 2)
    return 0;
  v4 = (v3 + 2147483646) & 0x7FFFFFFF;
  result = v4 - 3;
  if (v4 <= 3)
    return 0;
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendering.SceneAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 5;
  }
  return result;
}

uint64_t sub_10002C7A0(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t sub_10002C7BC(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneAction()
{
  return &type metadata for CRLUSDRendering.SceneAction;
}

_QWORD *initializeBufferWithCopyOfBuffer for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState()
{
  return &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState;
}

uint64_t *sub_10002C8A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_100013364(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    v17 = *((_OWORD *)v16 + 3);
    *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    *((_OWORD *)v15 + 3) = v17;
    *((_QWORD *)v15 + 8) = *((_QWORD *)v16 + 8);
    v18 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v18;
    v19 = (_OWORD *)((char *)a1 + v14);
    v20 = (_OWORD *)((char *)a2 + v14);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
  }
  return a1;
}

uint64_t sub_10002C97C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return sub_100013320(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_10002C9C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_100013364(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  v16 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v14 + 48) = v16;
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
  v17 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v17;
  v18 = (_OWORD *)(a1 + v13);
  v19 = (_OWORD *)(a2 + v13);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  return a1;
}

uint64_t sub_10002CA70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_100013364(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_100013320(v12, v13);
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 + 16);
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 + 56);
  *(_QWORD *)(v15 + 64) = *(_QWORD *)(v16 + 64);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  v18[2] = v19[2];
  v18[3] = v19[3];
  return a1;
}

uint64_t sub_10002CB60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  v10 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v10;
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v11;
  v12 = a3[7];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  return a1;
}

uint64_t sub_10002CBF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100013320(v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  *(_OWORD *)(v12 + 32) = v14;
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(v13 + 48);
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
  v15 = (_OWORD *)(a1 + v11);
  v16 = (_OWORD *)(a2 + v11);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  return a1;
}

uint64_t sub_10002CC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002CCA0);
}

uint64_t sub_10002CCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t sub_10002CD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002CD3C);
}

uint64_t sub_10002CD3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_10002CDC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100062620;
    v4[2] = &unk_100062638;
    v4[3] = &unk_100062650;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendering.SceneDescription.AnimationState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[8])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  if (v5 + 1 >= 2)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendering.SceneDescription.AnimationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_10002CEE0(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_QWORD *sub_10002CEFC(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.SceneDescription.AnimationState()
{
  return &type metadata for CRLUSDRendering.SceneDescription.AnimationState;
}

uint64_t destroy for CRLUSDRendering.RendererError(uint64_t a1)
{
  return sub_100014C2C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s20USDRendererExtension15CRLUSDRenderingO13RendererErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100014E74(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CRLUSDRendering.RendererError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100014E74(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100014C2C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CRLUSDRendering.RendererError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100014C2C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLUSDRendering.RendererError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLUSDRendering.RendererError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10002D0B0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_10002D0C8(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRendering.RendererError()
{
  return &type metadata for CRLUSDRendering.RendererError;
}

unint64_t sub_10002D0F4()
{
  unint64_t result;

  result = qword_100084260;
  if (!qword_100084260)
  {
    result = swift_getWitnessTable(&unk_100062718, &type metadata for CRLUSDRendering.SceneRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084260);
  }
  return result;
}

unint64_t sub_10002D13C()
{
  unint64_t result;

  result = qword_100084268;
  if (!qword_100084268)
  {
    result = swift_getWitnessTable(&unk_100062910, &type metadata for CRLUSDRendering.SceneAction.PlayAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084268);
  }
  return result;
}

unint64_t sub_10002D184()
{
  unint64_t result;

  result = qword_100084270;
  if (!qword_100084270)
  {
    result = swift_getWitnessTable(&unk_1000629C8, &type metadata for CRLUSDRendering.SceneAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084270);
  }
  return result;
}

unint64_t sub_10002D1CC()
{
  unint64_t result;

  result = qword_100084278;
  if (!qword_100084278)
  {
    result = swift_getWitnessTable(&unk_100062A80, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084278);
  }
  return result;
}

unint64_t sub_10002D214()
{
  unint64_t result;

  result = qword_100084280;
  if (!qword_100084280)
  {
    result = swift_getWitnessTable(&unk_100062B88, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084280);
  }
  return result;
}

unint64_t sub_10002D25C()
{
  unint64_t result;

  result = qword_100084288;
  if (!qword_100084288)
  {
    result = swift_getWitnessTable(&unk_100062C40, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084288);
  }
  return result;
}

unint64_t sub_10002D2A4()
{
  unint64_t result;

  result = qword_100084290;
  if (!qword_100084290)
  {
    result = swift_getWitnessTable(&unk_100062CF8, &type metadata for CRLUSDRendering.RendererState.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084290);
  }
  return result;
}

unint64_t sub_10002D2EC()
{
  unint64_t result;

  result = qword_100084298;
  if (!qword_100084298)
  {
    result = swift_getWitnessTable(&unk_100062DB0, &type metadata for CRLUSDRendering.RendererState.RenderingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084298);
  }
  return result;
}

unint64_t sub_10002D334()
{
  unint64_t result;

  result = qword_1000842A0;
  if (!qword_1000842A0)
  {
    result = swift_getWitnessTable(&unk_100062F58, &type metadata for CRLUSDRendering.RendererState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842A0);
  }
  return result;
}

unint64_t sub_10002D37C()
{
  unint64_t result;

  result = qword_1000842A8;
  if (!qword_1000842A8)
  {
    result = swift_getWitnessTable(&unk_100063010, &type metadata for CRLUSDRendering.RendererError.GenericErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842A8);
  }
  return result;
}

unint64_t sub_10002D3C4()
{
  unint64_t result;

  result = qword_1000842B0;
  if (!qword_1000842B0)
  {
    result = swift_getWitnessTable(&unk_1000630C8, &type metadata for CRLUSDRendering.RendererError.ExtensionErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842B0);
  }
  return result;
}

unint64_t sub_10002D40C()
{
  unint64_t result;

  result = qword_1000842B8;
  if (!qword_1000842B8)
  {
    result = swift_getWitnessTable(&unk_1000631D0, &type metadata for CRLUSDRendering.RendererError.StateErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842B8);
  }
  return result;
}

unint64_t sub_10002D454()
{
  unint64_t result;

  result = qword_1000842C0;
  if (!qword_1000842C0)
  {
    result = swift_getWitnessTable(&unk_100063288, &type metadata for CRLUSDRendering.RendererError.LoadingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842C0);
  }
  return result;
}

unint64_t sub_10002D49C()
{
  unint64_t result;

  result = qword_1000842C8;
  if (!qword_1000842C8)
  {
    result = swift_getWitnessTable(&unk_100063340, &type metadata for CRLUSDRendering.RendererError.UrlErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842C8);
  }
  return result;
}

unint64_t sub_10002D4E4()
{
  unint64_t result;

  result = qword_1000842D0;
  if (!qword_1000842D0)
  {
    result = swift_getWitnessTable(&unk_1000633F8, &type metadata for CRLUSDRendering.RendererError.CodingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842D0);
  }
  return result;
}

unint64_t sub_10002D52C()
{
  unint64_t result;

  result = qword_1000842D8;
  if (!qword_1000842D8)
  {
    result = swift_getWitnessTable(&unk_1000634B0, &type metadata for CRLUSDRendering.RendererError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842D8);
  }
  return result;
}

unint64_t sub_10002D574()
{
  unint64_t result;

  result = qword_1000842E0;
  if (!qword_1000842E0)
  {
    result = swift_getWitnessTable(&unk_100063568, &type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842E0);
  }
  return result;
}

unint64_t sub_10002D5BC()
{
  unint64_t result;

  result = qword_1000842E8;
  if (!qword_1000842E8)
  {
    result = swift_getWitnessTable(&unk_100063620, &type metadata for CRLUSDRendering.SceneDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842E8);
  }
  return result;
}

unint64_t sub_10002D604()
{
  unint64_t result;

  result = qword_1000842F0;
  if (!qword_1000842F0)
  {
    result = swift_getWitnessTable(&unk_100063590, &type metadata for CRLUSDRendering.SceneDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842F0);
  }
  return result;
}

unint64_t sub_10002D64C()
{
  unint64_t result;

  result = qword_1000842F8;
  if (!qword_1000842F8)
  {
    result = swift_getWitnessTable(&unk_1000635B8, &type metadata for CRLUSDRendering.SceneDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000842F8);
  }
  return result;
}

unint64_t sub_10002D694()
{
  unint64_t result;

  result = qword_100084300;
  if (!qword_100084300)
  {
    result = swift_getWitnessTable(&unk_1000634D8, &type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084300);
  }
  return result;
}

unint64_t sub_10002D6DC()
{
  unint64_t result;

  result = qword_100084308;
  if (!qword_100084308)
  {
    result = swift_getWitnessTable(&unk_100063500, &type metadata for CRLUSDRendering.SceneConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084308);
  }
  return result;
}

unint64_t sub_10002D724()
{
  unint64_t result;

  result = qword_100084310;
  if (!qword_100084310)
  {
    result = swift_getWitnessTable(&unk_100063368, &type metadata for CRLUSDRendering.RendererError.CodingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084310);
  }
  return result;
}

unint64_t sub_10002D76C()
{
  unint64_t result;

  result = qword_100084318;
  if (!qword_100084318)
  {
    result = swift_getWitnessTable(&unk_100063390, &type metadata for CRLUSDRendering.RendererError.CodingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084318);
  }
  return result;
}

unint64_t sub_10002D7B4()
{
  unint64_t result;

  result = qword_100084320;
  if (!qword_100084320)
  {
    result = swift_getWitnessTable(&unk_1000632B0, &type metadata for CRLUSDRendering.RendererError.UrlErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084320);
  }
  return result;
}

unint64_t sub_10002D7FC()
{
  unint64_t result;

  result = qword_100084328;
  if (!qword_100084328)
  {
    result = swift_getWitnessTable(&unk_1000632D8, &type metadata for CRLUSDRendering.RendererError.UrlErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084328);
  }
  return result;
}

unint64_t sub_10002D844()
{
  unint64_t result;

  result = qword_100084330;
  if (!qword_100084330)
  {
    result = swift_getWitnessTable(&unk_1000631F8, &type metadata for CRLUSDRendering.RendererError.LoadingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084330);
  }
  return result;
}

unint64_t sub_10002D88C()
{
  unint64_t result;

  result = qword_100084338;
  if (!qword_100084338)
  {
    result = swift_getWitnessTable(&unk_100063220, &type metadata for CRLUSDRendering.RendererError.LoadingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084338);
  }
  return result;
}

unint64_t sub_10002D8D4()
{
  unint64_t result;

  result = qword_100084340;
  if (!qword_100084340)
  {
    result = swift_getWitnessTable(&unk_100063140, &type metadata for CRLUSDRendering.RendererError.StateErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084340);
  }
  return result;
}

unint64_t sub_10002D91C()
{
  unint64_t result;

  result = qword_100084348;
  if (!qword_100084348)
  {
    result = swift_getWitnessTable(&unk_100063168, &type metadata for CRLUSDRendering.RendererError.StateErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084348);
  }
  return result;
}

unint64_t sub_10002D964()
{
  unint64_t result;

  result = qword_100084350;
  if (!qword_100084350)
  {
    result = swift_getWitnessTable(&unk_1000630F0, &type metadata for CRLUSDRendering.RendererError.TimeoutErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084350);
  }
  return result;
}

unint64_t sub_10002D9AC()
{
  unint64_t result;

  result = qword_100084358;
  if (!qword_100084358)
  {
    result = swift_getWitnessTable(&unk_100063118, &type metadata for CRLUSDRendering.RendererError.TimeoutErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084358);
  }
  return result;
}

unint64_t sub_10002D9F4()
{
  unint64_t result;

  result = qword_100084360;
  if (!qword_100084360)
  {
    result = swift_getWitnessTable(&unk_100063038, &type metadata for CRLUSDRendering.RendererError.ExtensionErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084360);
  }
  return result;
}

unint64_t sub_10002DA3C()
{
  unint64_t result;

  result = qword_100084368;
  if (!qword_100084368)
  {
    result = swift_getWitnessTable(&unk_100063060, &type metadata for CRLUSDRendering.RendererError.ExtensionErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084368);
  }
  return result;
}

unint64_t sub_10002DA84()
{
  unint64_t result;

  result = qword_100084370;
  if (!qword_100084370)
  {
    result = swift_getWitnessTable(&unk_100062F80, &type metadata for CRLUSDRendering.RendererError.GenericErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084370);
  }
  return result;
}

unint64_t sub_10002DACC()
{
  unint64_t result;

  result = qword_100084378;
  if (!qword_100084378)
  {
    result = swift_getWitnessTable(&unk_100062FA8, &type metadata for CRLUSDRendering.RendererError.GenericErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084378);
  }
  return result;
}

unint64_t sub_10002DB14()
{
  unint64_t result;

  result = qword_100084380;
  if (!qword_100084380)
  {
    result = swift_getWitnessTable(&unk_100063420, &type metadata for CRLUSDRendering.RendererError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084380);
  }
  return result;
}

unint64_t sub_10002DB5C()
{
  unint64_t result;

  result = qword_100084388;
  if (!qword_100084388)
  {
    result = swift_getWitnessTable(&unk_100063448, &type metadata for CRLUSDRendering.RendererError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084388);
  }
  return result;
}

unint64_t sub_10002DBA4()
{
  unint64_t result;

  result = qword_100084390;
  if (!qword_100084390)
  {
    result = swift_getWitnessTable(&unk_100062E78, &type metadata for CRLUSDRendering.RendererState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084390);
  }
  return result;
}

unint64_t sub_10002DBEC()
{
  unint64_t result;

  result = qword_100084398;
  if (!qword_100084398)
  {
    result = swift_getWitnessTable(&unk_100062EA0, &type metadata for CRLUSDRendering.RendererState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084398);
  }
  return result;
}

unint64_t sub_10002DC34()
{
  unint64_t result;

  result = qword_1000843A0;
  if (!qword_1000843A0)
  {
    result = swift_getWitnessTable(&unk_100062E28, &type metadata for CRLUSDRendering.RendererState.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843A0);
  }
  return result;
}

unint64_t sub_10002DC7C()
{
  unint64_t result;

  result = qword_1000843A8;
  if (!qword_1000843A8)
  {
    result = swift_getWitnessTable(&unk_100062E50, &type metadata for CRLUSDRendering.RendererState.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843A8);
  }
  return result;
}

unint64_t sub_10002DCC4()
{
  unint64_t result;

  result = qword_1000843B0;
  if (!qword_1000843B0)
  {
    result = swift_getWitnessTable(&unk_100062DD8, &type metadata for CRLUSDRendering.RendererState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843B0);
  }
  return result;
}

unint64_t sub_10002DD0C()
{
  unint64_t result;

  result = qword_1000843B8;
  if (!qword_1000843B8)
  {
    result = swift_getWitnessTable(&unk_100062E00, &type metadata for CRLUSDRendering.RendererState.LoadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843B8);
  }
  return result;
}

unint64_t sub_10002DD54()
{
  unint64_t result;

  result = qword_1000843C0;
  if (!qword_1000843C0)
  {
    result = swift_getWitnessTable(&unk_100062D20, &type metadata for CRLUSDRendering.RendererState.RenderingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843C0);
  }
  return result;
}

unint64_t sub_10002DD9C()
{
  unint64_t result;

  result = qword_1000843C8;
  if (!qword_1000843C8)
  {
    result = swift_getWitnessTable(&unk_100062D48, &type metadata for CRLUSDRendering.RendererState.RenderingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843C8);
  }
  return result;
}

unint64_t sub_10002DDE4()
{
  unint64_t result;

  result = qword_1000843D0;
  if (!qword_1000843D0)
  {
    result = swift_getWitnessTable(&unk_100062C68, &type metadata for CRLUSDRendering.RendererState.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843D0);
  }
  return result;
}

unint64_t sub_10002DE2C()
{
  unint64_t result;

  result = qword_1000843D8;
  if (!qword_1000843D8)
  {
    result = swift_getWitnessTable(&unk_100062C90, &type metadata for CRLUSDRendering.RendererState.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843D8);
  }
  return result;
}

unint64_t sub_10002DE74()
{
  unint64_t result;

  result = qword_1000843E0;
  if (!qword_1000843E0)
  {
    result = swift_getWitnessTable(&unk_100062EC8, &type metadata for CRLUSDRendering.RendererState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843E0);
  }
  return result;
}

unint64_t sub_10002DEBC()
{
  unint64_t result;

  result = qword_1000843E8;
  if (!qword_1000843E8)
  {
    result = swift_getWitnessTable(&unk_100062EF0, &type metadata for CRLUSDRendering.RendererState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843E8);
  }
  return result;
}

unint64_t sub_10002DF04()
{
  unint64_t result;

  result = qword_1000843F0;
  if (!qword_1000843F0)
  {
    result = swift_getWitnessTable(&unk_100062BB0, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843F0);
  }
  return result;
}

unint64_t sub_10002DF4C()
{
  unint64_t result;

  result = qword_1000843F8;
  if (!qword_1000843F8)
  {
    result = swift_getWitnessTable(&unk_100062BD8, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.PlaybackState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000843F8);
  }
  return result;
}

unint64_t sub_10002DF94()
{
  unint64_t result;

  result = qword_100084400;
  if (!qword_100084400)
  {
    result = swift_getWitnessTable(&unk_100062AA8, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084400);
  }
  return result;
}

unint64_t sub_10002DFDC()
{
  unint64_t result;

  result = qword_100084408;
  if (!qword_100084408)
  {
    result = swift_getWitnessTable(&unk_100062AD0, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.InactiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084408);
  }
  return result;
}

unint64_t sub_10002E024()
{
  unint64_t result;

  result = qword_100084410;
  if (!qword_100084410)
  {
    result = swift_getWitnessTable(&unk_1000629F0, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084410);
  }
  return result;
}

unint64_t sub_10002E06C()
{
  unint64_t result;

  result = qword_100084418;
  if (!qword_100084418)
  {
    result = swift_getWitnessTable(&unk_100062A18, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.ActiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084418);
  }
  return result;
}

unint64_t sub_10002E0B4()
{
  unint64_t result;

  result = qword_100084420;
  if (!qword_100084420)
  {
    result = swift_getWitnessTable(&unk_100062AF8, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084420);
  }
  return result;
}

unint64_t sub_10002E0FC()
{
  unint64_t result;

  result = qword_100084428;
  if (!qword_100084428)
  {
    result = swift_getWitnessTable(&unk_100062B20, &type metadata for CRLUSDRendering.SceneDescription.AnimationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084428);
  }
  return result;
}

unint64_t sub_10002E144()
{
  unint64_t result;

  result = qword_100084430;
  if (!qword_100084430)
  {
    result = swift_getWitnessTable(&unk_100062880, &type metadata for CRLUSDRendering.SceneAction.PlayAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084430);
  }
  return result;
}

unint64_t sub_10002E18C()
{
  unint64_t result;

  result = qword_100084438;
  if (!qword_100084438)
  {
    result = swift_getWitnessTable(&unk_1000628A8, &type metadata for CRLUSDRendering.SceneAction.PlayAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084438);
  }
  return result;
}

unint64_t sub_10002E1D4()
{
  unint64_t result;

  result = qword_100084440;
  if (!qword_100084440)
  {
    result = swift_getWitnessTable(&unk_100062830, &type metadata for CRLUSDRendering.SceneAction.PauseAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084440);
  }
  return result;
}

unint64_t sub_10002E21C()
{
  unint64_t result;

  result = qword_100084448;
  if (!qword_100084448)
  {
    result = swift_getWitnessTable(&unk_100062858, &type metadata for CRLUSDRendering.SceneAction.PauseAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084448);
  }
  return result;
}

unint64_t sub_10002E264()
{
  unint64_t result;

  result = qword_100084450;
  if (!qword_100084450)
  {
    result = swift_getWitnessTable(&unk_1000627E0, &type metadata for CRLUSDRendering.SceneAction.ResumeAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084450);
  }
  return result;
}

unint64_t sub_10002E2AC()
{
  unint64_t result;

  result = qword_100084458;
  if (!qword_100084458)
  {
    result = swift_getWitnessTable(&unk_100062808, &type metadata for CRLUSDRendering.SceneAction.ResumeAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084458);
  }
  return result;
}

unint64_t sub_10002E2F4()
{
  unint64_t result;

  result = qword_100084460;
  if (!qword_100084460)
  {
    result = swift_getWitnessTable(&unk_100062790, &type metadata for CRLUSDRendering.SceneAction.ResetAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084460);
  }
  return result;
}

unint64_t sub_10002E33C()
{
  unint64_t result;

  result = qword_100084468;
  if (!qword_100084468)
  {
    result = swift_getWitnessTable(&unk_1000627B8, &type metadata for CRLUSDRendering.SceneAction.ResetAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084468);
  }
  return result;
}

unint64_t sub_10002E384()
{
  unint64_t result;

  result = qword_100084470;
  if (!qword_100084470)
  {
    result = swift_getWitnessTable(&unk_100062740, &type metadata for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084470);
  }
  return result;
}

unint64_t sub_10002E3CC()
{
  unint64_t result;

  result = qword_100084478;
  if (!qword_100084478)
  {
    result = swift_getWitnessTable(&unk_100062768, &type metadata for CRLUSDRendering.SceneAction.StopAnimationsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084478);
  }
  return result;
}

unint64_t sub_10002E414()
{
  unint64_t result;

  result = qword_100084480;
  if (!qword_100084480)
  {
    result = swift_getWitnessTable(&unk_100062938, &type metadata for CRLUSDRendering.SceneAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084480);
  }
  return result;
}

unint64_t sub_10002E45C()
{
  unint64_t result;

  result = qword_100084488;
  if (!qword_100084488)
  {
    result = swift_getWitnessTable(&unk_100062960, &type metadata for CRLUSDRendering.SceneAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084488);
  }
  return result;
}

unint64_t sub_10002E4A4()
{
  unint64_t result;

  result = qword_100084490;
  if (!qword_100084490)
  {
    result = swift_getWitnessTable(&unk_100062688, &type metadata for CRLUSDRendering.SceneRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084490);
  }
  return result;
}

unint64_t sub_10002E4EC()
{
  unint64_t result;

  result = qword_100084498;
  if (!qword_100084498)
  {
    result = swift_getWitnessTable(&unk_1000626B0, &type metadata for CRLUSDRendering.SceneRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100084498);
  }
  return result;
}

uint64_t sub_10002E530(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000131C0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002E594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000345E4(a1, &qword_1000836D0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100074068, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100084610, v16);
}

uint64_t sub_10002E6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000345E4(a1, &qword_1000836D0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1000740B8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_1000131C0(&qword_100084660);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_100084658, v16);
}

uint64_t sub_10002E834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  id v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = v4;
  v34 = a3;
  v35 = a2;
  v8 = sub_1000131C0(&qword_100083780);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + 24) = 0;
  swift_unknownObjectWeakInit(v5 + 16, 0);
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  v15 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_acknowledgeQueue;
  v16 = type metadata accessor for CRLUSDRendering.TaskQueue();
  v17 = swift_allocObject(v16, 136, 15);
  swift_defaultActor_initialize();
  *(_QWORD *)(v17 + 128) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v17 + 112) = xmmword_100061700;
  *(_QWORD *)(v5 + v15) = v17;
  v18 = v5
      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = xmmword_100063ED0;
  if (qword_100083108 != -1)
    swift_once(&qword_100083108, sub_10003FB44);
  sub_100015550(a1, (uint64_t)v10);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  v20 = a1;
  if ((_DWORD)v19 == 1)
  {
    UUID.init()(v19);
    sub_1000345E4((uint64_t)v10, &qword_100083780);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_uuid, v14, v11);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v21(v14, v10, v11);
    v21((char *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_uuid), v14, v11);
  }
  v22 = v35;
  *(_QWORD *)(v5 + 24) = v34;
  swift_unknownObjectWeakAssign(v5 + 16, v22);
  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0xC000000000000000;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_QWORD *)(v5 + 128) = 0;
  if ((a4 & 2) != 0)
  {
    v23 = objc_msgSend(objc_allocWithZone((Class)_s14descr100074D19C10MetalLayerCMa()), "init");
    v24 = *(void **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = v23;
    v25 = (char *)v23;

    objc_msgSend(v25, "setFrame:", 0.0, 0.0, 300.0, 300.0);
    v36 = *(_QWORD *)&v25[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_frameNumber];
    v26 = v36;
    v27 = swift_allocObject(&unk_1000740E0, 24, 7);
    swift_weakInit(v27 + 16, v5);
    swift_retain(v26);
    v28 = sub_1000131C0(&qword_100084668);
    v29 = sub_10003464C();
    v30 = Publisher<>.sink(receiveValue:)(sub_100034644, v27, v28, v29);

    swift_unknownObjectRelease(v22);
    swift_release(v27);
    sub_1000345E4(v20, &qword_100083780);
    swift_release(v36);
    v31 = *(_QWORD *)(v5 + 136);
    *(_QWORD *)(v5 + 136) = v30;
    swift_release(v31);
  }
  else
  {
    swift_unknownObjectRelease(v22);
    sub_1000345E4(a1, &qword_100083780);
  }
  return v5;
}

_QWORD *sub_10002EB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *result;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE v42[24];

  v3 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v42, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    v8 = (void *)result[4];
    if (!v8)
      return (_QWORD *)swift_release(result);
    if ((*((_BYTE *)v8 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_hasDrawnFrame) & 1) != 0
      && (v9 = result[9], v9 >> 62 == 1))
    {
      v10 = result[15];
      v11 = result[16];
      v12 = result[13];
      v13 = result[14];
      v39 = result[12];
      v40 = v12;
      v14 = result[11];
      v33 = result[10];
      v34 = v14;
      v16 = result[8];
      v41 = result[7];
      v15 = v41;
      v17 = result[6];
      v30 = v16;
      v31 = v17;
      v32 = v9;
      v18 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v5, 1, 1, v18);
      v35 = type metadata accessor for MainActor(0);
      v38 = v11;
      v37 = v10;
      v36 = v13;
      sub_10002F308(v17, v15, v16, v9);
      v19 = v8;
      LOBYTE(v11) = v30;
      v20 = v31;
      v21 = v32;
      v22 = sub_10002F308(v31, v41, v30, v32);
      v23 = static MainActor.shared.getter(v22);
      v24 = (_QWORD *)swift_allocObject(&unk_100074108, 40, 7);
      v24[2] = v23;
      v24[3] = &protocol witness table for MainActor;
      v24[4] = v20;
      v25 = sub_10002E594((uint64_t)v5, (uint64_t)&unk_100084680, (uint64_t)v24);
      sub_10002F36C(v20, v41, v11, v21);
      swift_release(v25);
      v26 = v7[17];
      if (!v26)
        goto LABEL_9;
    }
    else
    {
      v27 = v8;
      v26 = v7[17];
      if (!v26)
      {
LABEL_9:

        v28 = (_QWORD *)v7[17];
        v7[17] = 0;
        swift_release(v7);
        result = v28;
        return (_QWORD *)swift_release(result);
      }
    }
    swift_retain(v26);
    AnyCancellable.cancel()();
    swift_release(v26);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_10002EE08()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_100084AC4);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_10002EE6C;
  return sub_10003B6CC();
}

uint64_t sub_10002EE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002EEDC, v2, v3);
}

uint64_t sub_10002EEDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002EF0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 72);
  if (v5 >> 62 == 1)
  {
    v18 = *(_OWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = v6;
    v8 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 48);
    v10 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
    type metadata accessor for MainActor(0);
    v11 = swift_retain_n(v9, 2);
    v12 = static MainActor.shared.getter(v11);
    v13 = (_QWORD *)swift_allocObject(&unk_100074130, 40, 7);
    v13[2] = v12;
    v13[3] = &protocol witness table for MainActor;
    v13[4] = v9;
    v14 = sub_10002E594((uint64_t)v4, (uint64_t)&unk_100084690, (uint64_t)v13);
    sub_10002F36C(v9, v8, v7, v5);
    swift_release(v14);
  }
  sub_100015698(v1 + 16);

  sub_10002F36C(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
  swift_release(*(_QWORD *)(v1 + 136));
  v15 = v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_uuid;
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_release(*(_QWORD *)(v1
                          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_acknowledgeQueue));
  sub_1000340D4(*(_QWORD *)(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState), *(_QWORD *)(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState+ 8), *(_QWORD *)(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState+ 16), *(_QWORD *)(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState+ 24), *(_QWORD *)(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState+ 32), *(_QWORD *)(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState+ 40), *(_QWORD *)(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState
              + 48));
  return v1;
}

uint64_t sub_10002F118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002F184, v6, v7);
}

uint64_t sub_10002F184()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  if (qword_100083108 != -1)
    swift_once(&qword_100083108, sub_10003FB44);
  sub_10003EF78(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F1EC()
{
  uint64_t v0;

  sub_10002EF0C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002F210()
{
  return _s14descr100074149C10RepBackendCMa(0);
}

uint64_t _s14descr100074149C10RepBackendCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1000844E0;
  if (!qword_1000844E0)
    return swift_getSingletonMetadata(a1, &_s14descr100074149C10RepBackendCMn);
  return result;
}

uint64_t sub_10002F254(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100063F30;
  v4[1] = &unk_100063F48;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_100063F60;
  v4[4] = &unk_100063F48;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = &unk_100063F78;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10002F308(uint64_t result, unint64_t a2, char a3, unint64_t a4)
{
  if (a4 >> 62 == 2)
    return sub_100014E74(result, a2, a3);
  if ((a4 >> 62) <= 1)
    return swift_retain(result);
  return result;
}

uint64_t _s14descr100074149C10RepBackendC12BackendStateOwxx(uint64_t *a1)
{
  return sub_10002F36C(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_10002F36C(uint64_t result, unint64_t a2, char a3, unint64_t a4)
{
  if (a4 >> 62 == 2)
    return sub_100014C2C(result, a2, a3);
  if ((a4 >> 62) <= 1)
    return swift_release(result);
  return result;
}

uint64_t *_s14descr100074149C10RepBackendC12BackendStateOwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  sub_10002F308(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t *_s14descr100074149C10RepBackendC12BackendStateOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v17 = a2[9];
  v18 = a2[10];
  sub_10002F308(*a2, v4, v5, v6);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v17;
  a1[10] = v18;
  sub_10002F36C(v12, v13, v14, v15);
  return a1;
}

__n128 _s14descr100074149C10RepBackendC12BackendStateOwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s14descr100074149C10RepBackendC12BackendStateOwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  sub_10002F36C(v4, v6, v5, v7);
  return a1;
}

uint64_t _s14descr100074149C10RepBackendC12BackendStateOwet(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 20);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double _s14descr100074149C10RepBackendC12BackendStateOwst(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = (unint64_t)-a2 << 32;
      result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10002F668(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24) >> 62;
  if ((_DWORD)v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_10002F684(uint64_t result)
{
  *(_QWORD *)(result + 24) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10002F694(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(_QWORD *)(result + 16) = *(unsigned int *)(result + 16);
    *(_QWORD *)(result + 24) = a2 << 62;
  }
  else
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 3);
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 24) = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *_s14descr100074149C10RepBackendC12BackendStateOMa()
{
  return &_s14descr100074149C10RepBackendC12BackendStateON;
}

ValueMetadata *_s14descr100074149C10RepBackendC5FlagsVMa()
{
  return &_s14descr100074149C10RepBackendC5FlagsVN;
}

_QWORD *sub_10002F6F0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10002F6FC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_10002F704@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10002F718@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_10002F72C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10002F740(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_10002F770@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10002F79C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_10002F7C0(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_10002F7D4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_10002F7E8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_10002F7FC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10002F810(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10002F824(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10002F838(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_10002F84C()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_10002F85C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_10002F870@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10002F880(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_10002F88C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10002F8A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100039678();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

unint64_t sub_10002F8E0()
{
  unint64_t result;

  result = qword_1000845A0;
  if (!qword_1000845A0)
  {
    result = swift_getWitnessTable(&unk_100063FD4, &_s14descr100074149C10RepBackendC5FlagsVN);
    atomic_store(result, (unint64_t *)&qword_1000845A0);
  }
  return result;
}

unint64_t sub_10002F928()
{
  unint64_t result;

  result = qword_1000845A8;
  if (!qword_1000845A8)
  {
    result = swift_getWitnessTable(&unk_100063FA4, &_s14descr100074149C10RepBackendC5FlagsVN);
    atomic_store(result, (unint64_t *)&qword_1000845A8);
  }
  return result;
}

unint64_t sub_10002F970()
{
  unint64_t result;

  result = qword_1000845B0;
  if (!qword_1000845B0)
  {
    result = swift_getWitnessTable(&unk_100063FFC, &_s14descr100074149C10RepBackendC5FlagsVN);
    atomic_store(result, (unint64_t *)&qword_1000845B0);
  }
  return result;
}

unint64_t sub_10002F9B8()
{
  unint64_t result;

  result = qword_1000845B8;
  if (!qword_1000845B8)
  {
    result = swift_getWitnessTable(&unk_100064034, &_s14descr100074149C10RepBackendC5FlagsVN);
    atomic_store(result, (unint64_t *)&qword_1000845B8);
  }
  return result;
}

void sub_10002F9FC(uint64_t a1)
{
  _QWORD v2[12];
  _BYTE v3[24];

  sub_100034010(a1, (uint64_t)v2);
  sub_100034010(a1, (uint64_t)v3);
  __asm { BR              X11 }
}

uint64_t sub_10002FA50()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 72) >> 62 == 1)
  {
    v1 = *(_QWORD *)(v0 + 48);
    swift_retain(v1);
  }
  else
  {
    v1 = 0;
  }
  return swift_release(v1);
}

void sub_10002FB48()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[7];
  uint64_t v5;

  v5 = type metadata accessor for UUID(0);
  v4[2] = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v4[1] = v1;
  v4[6] = (char *)v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v2);
  v4[5] = (char *)v4 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { BR              X10 }
}

uint64_t sub_10002FC30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Strong;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v0[3] = v1;
  v0[4] = 0;
  v0[8] = 0;
  v0[9] = 0;
  v0[10] = 0;
  v0[11] = 0;
  *(_QWORD *)(v3 - 144) = 2;
  *(_QWORD *)(v3 - 136) = 0;
  *(_QWORD *)(v3 - 128) = 0;
  *(_QWORD *)(v3 - 120) = 0;
  *(_QWORD *)(v3 - 112) = 0;
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = 0;
  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v3 - 168, 0, 0);
  v4 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v5 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  inited = swift_initStackObject(v5, v0 + 19);
  *(_OWORD *)(inited + 16) = xmmword_100061920;
  v7 = v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_uuid;
  v8 = v4;
  *v0 = v7;
  v9 = UUID.uuidString.getter();
  v10 = v2;
  v12 = v11;
  v13 = String.index(_:offsetBy:)(15, 8, v9, v11);
  v14 = String.subscript.getter(15, v13, v9, v12);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_bridgeObjectRelease(v12);
  v21 = static String._fromSubstring(_:)(v14, v16, v18, v20);
  v23 = v22;
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v24 = sub_1000340E8();
  *(_QWORD *)(inited + 64) = v24;
  *(_QWORD *)(inited + 32) = v21;
  *(_QWORD *)(inited + 40) = v23;
  sub_100013C20(v3 - 144, (uint64_t)(v0 + 12));
  v26 = v0[3];
  v25 = v0[4];
  sub_100014E34(2, v0[8], v25, v0[9], v0[10], v26, v0[11]);
  v27 = ((uint64_t (*)(_QWORD *, ValueMetadata *))String.init<A>(describing:))(v0 + 12, &type metadata for CRLUSDRendering.RendererState);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v24;
  *(_QWORD *)(inited + 72) = v27;
  *(_QWORD *)(inited + 80) = v28;
  v29 = static os_log_type_t.debug.getter();
  sub_10001D7E0((uint64_t)v8, &_mh_execute_header, v29, "(CoreRE) [%{public}@] new state: %{public}@", 43, 2, inited);
  swift_setDeallocating(inited);
  v30 = sub_1000131C0(&qword_1000852E0);
  swift_arrayDestroy(inited + 32, 2, v30);

  Strong = swift_unknownObjectWeakLoadStrong(v10 + 16);
  v32 = v25;
  v33 = v26;
  if (Strong)
  {
    v34 = Strong;
    v35 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v0[5], 1, 1, v35);
    v36 = v0[2];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v36 + 16))(v0[6], *v0, v0[7]);
    type metadata accessor for MainActor(0);
    *v0 = v10;
    sub_100014E34(2, v0[8], v25, v0[9], v0[10], v26, v0[11]);
    v37 = swift_unknownObjectRetain(v34);
    v38 = static MainActor.shared.getter(v37);
    v39 = *(unsigned __int8 *)(v36 + 80);
    v40 = (v39 + 40) & ~v39;
    v41 = (v0[1] + v40 + 15) & 0xFFFFFFFFFFFFFFF0;
    v42 = (char *)swift_allocObject(&unk_100074040, v41 + 56, v39 | 0xF);
    *((_QWORD *)v42 + 2) = v38;
    *((_QWORD *)v42 + 3) = &protocol witness table for MainActor;
    *((_QWORD *)v42 + 4) = v34;
    (*(void (**)(char *, _QWORD, _QWORD))(v36 + 32))(&v42[v40], v0[6], v0[7]);
    sub_100013C20(v3 - 144, (uint64_t)&v42[v41]);
    v43 = sub_10002E594(v0[5], (uint64_t)&unk_100083710, (uint64_t)v42);
    swift_unknownObjectRelease(v34);
    v44 = v43;
    v10 = *v0;
    swift_release(v44);
  }
  sub_100014BEC(2, v0[8], v32, v0[9], v0[10], v33, v0[11]);
  v45 = v10
      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState;
  v46 = *(_QWORD *)(v10
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState);
  v47 = *(_QWORD *)(v10
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState
                  + 8);
  v48 = *(_QWORD *)(v10
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState
                  + 16);
  v49 = *(_QWORD *)(v10
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState
                  + 24);
  v50 = *(_QWORD *)(v10
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState
                  + 32);
  v51 = *(_QWORD *)(v10
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState
                  + 40);
  v52 = *(_QWORD *)(v10
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_lastSentAcknowledgedRenderState
                  + 48);
  *(_OWORD *)v45 = 0u;
  *(_OWORD *)(v45 + 16) = 0u;
  *(_QWORD *)(v45 + 32) = 0;
  *(_OWORD *)(v45 + 40) = xmmword_100063ED0;
  return sub_1000340D4(v46, v47, v48, v49, v50, v51, v52);
}

uint64_t sub_100030000()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[4] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[5] = v3;
  v1[6] = v4;
  return swift_task_switch(sub_10003006C, v3, v4);
}

uint64_t sub_10003006C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_acknowledgeQueue);
  *(_QWORD *)(v0 + 56) = v2;
  swift_weakInit(v0 + 16, v1);
  return swift_task_switch(sub_1000300BC, v2, 0);
}

uint64_t sub_1000300BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  static Task<>.checkCancellation()();
  v1 = *(_QWORD *)(v0 + 56);
  v2 = sub_10003408C();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_100030180;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, v1, v2, 0xD000000000000013, 0x800000010005EE70, sub_10002BE28, *(_QWORD *)(v0 + 56), (char *)&type metadata for () + 8);
}

uint64_t sub_100030180()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100030284;
  else
    v4 = sub_1000301E4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_1000301E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[9];
  result = static Task<>.checkCancellation()();
  if (v1)
  {
    v3 = v0[7];
    v4 = *(_QWORD *)(v3 + 120);
    v5 = __OFSUB__(v4, 1);
    v6 = v4 - 1;
    if (v5)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v3 + 120) = v6;
      sub_100024D90();
      v0[12] = v1;
      return swift_task_switch(sub_1000303DC, v0[5], v0[6]);
    }
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc(dword_100084604);
    v0[10] = v7;
    *v7 = v0;
    v7[1] = sub_10003029C;
    return sub_100033214((uint64_t)v7, (uint64_t)(v0 + 2));
  }
  return result;
}

uint64_t sub_100030284()
{
  _QWORD *v0;

  v0[12] = v0[9];
  return swift_task_switch(sub_1000303DC, v0[5], v0[6]);
}

uint64_t sub_10003029C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100030388;
  else
    v4 = sub_100030300;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_100030300()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v1 = v0[7];
  v2 = *(_QWORD *)(v1 + 120);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 120) = v4;
    sub_100024D90();
    swift_weakDestroy(v0 + 2);
    return swift_task_switch(sub_100030358, v0[5], v0[6]);
  }
  return result;
}

uint64_t sub_100030358()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100030388()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v1 = v0[7];
  v2 = *(_QWORD *)(v1 + 120);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 120) = v4;
    sub_100024D90();
    v0[12] = v0[11];
    return swift_task_switch(sub_1000303DC, v0[5], v0[6]);
  }
  return result;
}

uint64_t sub_1000303DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 32));
  swift_weakDestroy(v0 + 16);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100030424(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[19] = a1;
  v2[20] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[21] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[22] = v4;
  v2[23] = v5;
  return swift_task_switch(sub_100030490, v4, v5);
}

uint64_t sub_100030490()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  v1 = v0[19];
  v2 = v0[20];
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v0 + 16, 0, 0);
  v3 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v4 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  inited = swift_initStackObject(v4, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100061920;
  v6 = v3;
  v7 = UUID.uuidString.getter();
  v9 = v8;
  v10 = String.index(_:offsetBy:)(15, 8, v7, v8);
  v11 = String.subscript.getter(15, v10, v7, v9);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease(v9);
  v18 = static String._fromSubstring(_:)(v11, v13, v15, v17);
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v21 = sub_1000340E8();
  *(_QWORD *)(inited + 64) = v21;
  *(_QWORD *)(inited + 32) = v18;
  *(_QWORD *)(inited + 40) = v20;
  v22 = sub_100023548();
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v21;
  *(_QWORD *)(inited + 72) = v22;
  *(_QWORD *)(inited + 80) = v23;
  v24 = static os_log_type_t.debug.getter();
  sub_10001D7E0((uint64_t)v6, &_mh_execute_header, v24, "(CoreRE) [%{public}@] loadScene(%@)", 35, 2, inited);
  swift_setDeallocating(inited);
  v25 = sub_1000131C0(&qword_1000852E0);
  swift_arrayDestroy(inited + 32, 2, v25);

  v26 = swift_task_alloc(32);
  v0[24] = v26;
  *(_QWORD *)(v26 + 16) = v2;
  *(_QWORD *)(v26 + 24) = v1;
  v27 = (_QWORD *)swift_task_alloc(dword_100084634);
  v0[25] = v27;
  *v27 = v0;
  v27[1] = sub_1000306B4;
  return sub_1000316AC((uint64_t)v27, 0x6E65635364616F6CLL, 0xEB00000000292865, dword_100084628);
}

uint64_t sub_1000306B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[22];
    v5 = v2[23];
    v6 = sub_100030754;
  }
  else
  {
    swift_task_dealloc(v2[24]);
    v4 = v2[22];
    v5 = v2[23];
    v6 = sub_100030720;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100030720()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100030754()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100030794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[51] = a2;
  v3[52] = a3;
  v4 = sub_1000131C0(&qword_100084638);
  v3[53] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v3[54] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[55] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[56] = swift_task_alloc(v7);
  v3[57] = swift_task_alloc(v7);
  v3[58] = swift_task_alloc(v7);
  v3[59] = swift_task_alloc(v7);
  v8 = type metadata accessor for MainActor(0);
  v3[60] = v8;
  v3[61] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v3[62] = v9;
  v3[63] = v10;
  return swift_task_switch(sub_100030878, v9, v10);
}

uint64_t sub_100030878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Receipt;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[9];

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 408) + 40) & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 416);
    v5 = *(_QWORD *)(v0 + 424);
    v28[0] = 0;
    v6 = (uint64_t *)(v4 + *(int *)(type metadata accessor for CRLUSDRendering.SceneRequest(0) + 20));
    v7 = *v6;
    v8 = v6[1];
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v3(v5, v4, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v5, 0, 1, v1);
    URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(v7, v8, 0, v5, v28);
    sub_1000345E4(v5, &qword_100084638);
    v9 = *(_QWORD *)(v0 + 464);
    v10 = *(_QWORD *)(v0 + 472);
    v11 = *(_QWORD *)(v0 + 432);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 32);
    v12(v9, *(_QWORD *)(v0 + 456), v11);
    v12(v10, v9, v11);
  }
  else
  {
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v3(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 432));
  }
  v13 = *(_QWORD *)(v0 + 480);
  v15 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 448);
  v16 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 416);
  v3(v14, *(_QWORD *)(v0 + 472), v16);
  Receipt = type metadata accessor for CRLUSDRendering.LoadReceipt(0);
  v19 = swift_allocObject(Receipt, *(unsigned int *)(Receipt + 48), *(unsigned __int16 *)(Receipt + 52));
  *(_QWORD *)(v19 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest) = 0;
  *(_QWORD *)(v19 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable) = 0;
  *(_QWORD *)(v0 + 512) = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v19 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_url, v14, v16);
  v20 = *(_QWORD *)(v19 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest);
  *(_QWORD *)(v19 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest) = 0;
  swift_release(v20);
  v21 = *(_QWORD *)(v19 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable);
  *(_QWORD *)(v19 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable) = 0;
  swift_release(v21);
  v22 = v17 + *(int *)(type metadata accessor for CRLUSDRendering.SceneRequest(0) + 24);
  *(_DWORD *)(v0 + 744) = *(_DWORD *)v22;
  v23 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v0 + 384) = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(v0 + 392) = v23;
  *(_QWORD *)(v0 + 520) = *(_QWORD *)(v22 + 32);
  *(_QWORD *)(v0 + 528) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v22 + 48);
  *(_QWORD *)(v0 + 544) = *(_QWORD *)(v22 + 56);
  *(_QWORD *)(v0 + 552) = *(_QWORD *)(v22 + 64);
  v24 = swift_retain(v19);
  *(_QWORD *)(v0 + 560) = static MainActor.shared.getter(v24);
  v25 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  *(_QWORD *)(v0 + 568) = v25;
  *(_QWORD *)(v0 + 576) = v26;
  return swift_task_switch(sub_100030B80, v25, v26);
}

uint64_t sub_100030B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 552);
  v10 = *(_OWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 520);
  v9 = *(_OWORD *)(v0 + 384);
  v4 = *(unsigned int *)(v0 + 744);
  v5 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 408);
  sub_100034010(v6 + 48, v0 + 16);
  v13 = *(_QWORD *)(v6 + 56);
  v14 = *(_QWORD *)(v6 + 48);
  v12 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 72) = 0;
  *(_OWORD *)(v6 + 80) = v9;
  *(_QWORD *)(v6 + 96) = v3;
  *(_QWORD *)(v6 + 104) = v2;
  *(_OWORD *)(v6 + 112) = v10;
  *(_QWORD *)(v6 + 128) = v1;
  swift_retain_n(v5, 2);
  sub_100034038((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F308);
  sub_10002F36C(v14, v13, v12, v11);
  sub_10002F9FC(v0 + 16);
  swift_release(v5);
  sub_100034038((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F36C);
  v7 = (_QWORD *)swift_task_alloc(dword_1000845FC);
  *(_QWORD *)(v0 + 584) = v7;
  *v7 = v0;
  v7[1] = sub_100030CE0;
  return sub_100030000();
}

uint64_t sub_100030CE0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 584));
  return swift_task_switch(sub_100030D30, *(_QWORD *)(v1 + 568), *(_QWORD *)(v1 + 576));
}

uint64_t sub_100030D30()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[64];
  swift_release(v0[70]);
  swift_release(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_100083B94);
  v0[74] = v2;
  *v2 = v0;
  v2[1] = sub_100030D8C;
  return sub_1000240BC();
}

uint64_t sub_100030D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 592);
  v3[75] = a1;
  v3[76] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100031614;
  else
    v5 = sub_100030DF8;
  return swift_task_switch(v5, v3[62], v3[63]);
}

uint64_t sub_100030DF8()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  v1 = *(_QWORD **)(v0 + 408);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v0 + 264, 0, 0);
  v2 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v3 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  inited = swift_initStackObject(v3, v0 + 104);
  *(_OWORD *)(inited + 16) = xmmword_100061930;
  v5 = v2;
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  v9 = String.index(_:offsetBy:)(15, 8, v6, v7);
  v10 = String.subscript.getter(15, v9, v6, v8);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease(v8);
  v17 = static String._fromSubstring(_:)(v10, v12, v14, v16);
  v19 = v18;
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v20 = sub_1000340E8();
  *(_QWORD *)(inited + 64) = v20;
  *(_QWORD *)(inited + 32) = v17;
  *(_QWORD *)(inited + 40) = v19;
  v21 = static os_log_type_t.debug.getter(v20);
  sub_10001D7E0((uint64_t)v5, &_mh_execute_header, v21, "(CoreRE) [%{public}@] loadScene(): entity loaded", 48, 2, inited);
  swift_setDeallocating(inited);
  v22 = sub_1000131C0(&qword_1000852E0);
  swift_arrayDestroy(inited + 32, 1, v22);

  v23 = v1[6];
  *(_QWORD *)(v0 + 616) = v23;
  v24 = v1[7];
  *(_QWORD *)(v0 + 624) = v24;
  v25 = v1[8];
  *(_QWORD *)(v0 + 632) = v25;
  v26 = v1[9];
  *(_QWORD *)(v0 + 640) = v26;
  v27 = v1[10];
  *(_QWORD *)(v0 + 648) = v27;
  v28 = v1[11];
  *(_QWORD *)(v0 + 656) = v28;
  v29 = v1[12];
  *(_QWORD *)(v0 + 664) = v29;
  v30 = v1[13];
  *(_QWORD *)(v0 + 672) = v30;
  v31 = v1[14];
  *(_QWORD *)(v0 + 680) = v31;
  v32 = v1[15];
  *(_QWORD *)(v0 + 688) = v32;
  v33 = v1[16];
  *(_QWORD *)(v0 + 696) = v33;
  if (v26 >> 62)
  {
    v63 = *(_QWORD *)(v0 + 600);
    v65 = *(_QWORD *)(v0 + 512);
    v64 = *(_QWORD *)(v0 + 488);
    v69 = *(_QWORD *)(v0 + 472);
    v66 = *(_QWORD *)(v0 + 440);
    v68 = *(_QWORD *)(v0 + 432);
    sub_10002F308(v23, v24, v25, v26);
    swift_release(v63);
    swift_release(v64);
    swift_release(v65);
    sub_10002F36C(v23, v24, v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v69, v68);
    goto LABEL_7;
  }
  v34 = *(_QWORD *)(v0 + 512);
  *(_DWORD *)(v0 + 288) = v25;
  *(_QWORD *)(v0 + 304) = v27;
  *(_QWORD *)(v0 + 312) = v28;
  *(_QWORD *)(v0 + 320) = v29;
  *(_QWORD *)(v0 + 328) = v30;
  *(_QWORD *)(v0 + 336) = v31;
  *(_QWORD *)(v0 + 344) = v32;
  *(_QWORD *)(v0 + 352) = v33;
  if (v34 != v23)
  {
    v35 = *(_QWORD *)(v0 + 600);
    v36 = *(_QWORD *)(v0 + 488);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 432));
    swift_release(v35);
    swift_release(v36);
    swift_release(v34);
LABEL_7:
    v37 = *(_QWORD *)(v0 + 464);
    v39 = *(_QWORD *)(v0 + 448);
    v38 = *(_QWORD *)(v0 + 456);
    v40 = *(_QWORD *)(v0 + 424);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    v41 = *(uint64_t (**)(void))(v0 + 8);
    return v41();
  }
  v67 = v25;
  v70 = v23;
  v43 = qword_100083108;
  swift_retain(v34);
  if (v43 != -1)
    swift_once(&qword_100083108, sub_10003FB44);
  v44 = *(_QWORD *)(v0 + 608);
  v45 = *(_QWORD *)(v0 + 600);
  v46 = *(_QWORD *)(v0 + 408);
  v47 = qword_10008D720;
  swift_retain(qword_10008D720);
  v48 = sub_10003F358(v46, v45, v0 + 288);
  *(_QWORD *)(v0 + 704) = v48;
  if (v44)
  {
    v49 = *(_QWORD *)(v0 + 600);
    v50 = *(_QWORD *)(v0 + 512);
    v51 = *(_QWORD *)(v0 + 488);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 432));
    swift_release(v50);
    sub_10002F36C(v70, v24, v67, v26);
    swift_release(v47);
    swift_release(v49);
    swift_release(v51);
    v52 = *(_QWORD *)(v0 + 464);
    v54 = *(_QWORD *)(v0 + 448);
    v53 = *(_QWORD *)(v0 + 456);
    v55 = *(_QWORD *)(v0 + 424);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    v41 = *(uint64_t (**)(void))(v0 + 8);
    return v41();
  }
  v56 = v48;
  v57 = *(_QWORD *)(v0 + 512);
  v58 = *(_QWORD *)(v0 + 480);
  swift_release(v47);
  v59 = *(_QWORD *)(v56 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_loadReceipt);
  *(_QWORD *)(v56 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_loadReceipt) = v57;
  swift_retain(v57);
  swift_release(v59);
  v60 = swift_retain(v56);
  *(_QWORD *)(v0 + 712) = static MainActor.shared.getter(v60);
  v61 = dispatch thunk of Actor.unownedExecutor.getter(v58, &protocol witness table for MainActor);
  *(_QWORD *)(v0 + 720) = v61;
  *(_QWORD *)(v0 + 728) = v62;
  return swift_task_switch(sub_10003131C, v61, v62);
}

uint64_t sub_10003131C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = v0[88];
  v2 = v0[51];
  sub_100034010(v2 + 48, (uint64_t)(v0 + 22));
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(v2 + 72);
  v8 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = v1;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0x4000000000000000;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 128) = 0;
  *(_OWORD *)(v2 + 112) = 0u;
  swift_retain_n(v1, 2);
  sub_100034038(v0 + 22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F308);
  sub_10002F36C(v8, v3, v4, v5);
  sub_10002F9FC((uint64_t)(v0 + 22));
  swift_release(v1);
  sub_100034038(v0 + 22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F36C);
  v6 = (_QWORD *)swift_task_alloc(dword_1000845FC);
  v0[92] = v6;
  *v6 = v0;
  v6[1] = sub_10003144C;
  return sub_100030000();
}

uint64_t sub_10003144C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 736));
  return swift_task_switch(sub_10003149C, *(_QWORD *)(v1 + 720), *(_QWORD *)(v1 + 728));
}

uint64_t sub_10003149C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[88];
  swift_release(v0[89]);
  swift_release(v1);
  return swift_task_switch(sub_1000314E0, v0[62], v0[63]);
}

uint64_t sub_1000314E0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 704);
  v2 = *(_QWORD *)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 632);
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 512);
  v7 = *(_QWORD *)(v0 + 488);
  v15 = *(_QWORD *)(v0 + 472);
  v13 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 432);
  swift_release(*(_QWORD *)(v0 + 600));
  swift_release(v7);
  swift_release(v1);
  sub_10002F36C(v5, v4, v3, v2);
  swift_release(v6);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  v8 = *(_QWORD *)(v0 + 464);
  v10 = *(_QWORD *)(v0 + 448);
  v9 = *(_QWORD *)(v0 + 456);
  v11 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 440);
  swift_release(*(_QWORD *)(v0 + 488));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 456);
  v8 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000316AC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v5[51] = a3;
  v5[52] = v4;
  v5[50] = a2;
  v8 = type metadata accessor for MainActor(0);
  v5[53] = v8;
  v5[54] = static MainActor.shared.getter(v8);
  v11 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v9 = (_QWORD *)swift_task_alloc(a4[1]);
  v5[55] = v9;
  *v9 = v5;
  v9[1] = sub_100031740;
  return v11(a1);
}

uint64_t sub_100031740()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 440);
  *(_QWORD *)(*v1 + 448) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 424), &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000317F8;
  else
    v6 = sub_1000317C4;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1000317C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 432));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000317F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  id v39;
  unint64_t v40;
  uint64_t v41;

  swift_release(*(_QWORD *)(v0 + 432));
  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 408);
  v38 = *(_QWORD *)(v0 + 400);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v0 + 256, 0, 0);
  v3 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v4 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  inited = swift_initStackObject(v4, v0 + 104);
  *(_OWORD *)(inited + 16) = xmmword_100061910;
  v39 = v3;
  v6 = UUID.uuidString.getter();
  v8 = v7;
  v9 = String.index(_:offsetBy:)(15, 8, v6, v7);
  v10 = String.subscript.getter(15, v9, v6, v8);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease(v8);
  v17 = static String._fromSubstring(_:)(v10, v12, v14, v16);
  v19 = v18;
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v20 = sub_1000340E8();
  *(_QWORD *)(inited + 32) = v17;
  *(_QWORD *)(inited + 40) = v19;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v20;
  *(_QWORD *)(inited + 64) = v20;
  *(_QWORD *)(inited + 72) = v38;
  *(_QWORD *)(inited + 80) = v2;
  swift_getErrorValue(v1, v0 + 376, v0 + 280);
  v21 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRetain(v2);
  v23 = Error.localizedDescription.getter(v21, v22);
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v20;
  *(_QWORD *)(inited + 112) = v23;
  *(_QWORD *)(inited + 120) = v24;
  v25 = static os_log_type_t.error.getter();
  sub_10001D7E0((uint64_t)v39, &_mh_execute_header, v25, "(CoreRE) [%{public}@] %{public}@ error: %{public}@", 50, 2, inited);
  swift_setDeallocating(inited);
  v26 = sub_1000131C0(&qword_1000852E0);
  swift_arrayDestroy(inited + 32, 3, v26);

  *(_QWORD *)(v0 + 392) = v1;
  swift_errorRetain(v1);
  v27 = sub_1000131C0(&qword_100084D00);
  if (swift_dynamicCast(v0 + 328, v0 + 392, v27, &type metadata for CRLUSDRendering.RendererError, 6))
  {
    v28 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 336);
    v30 = *(unsigned __int8 *)(v0 + 344);
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 448);
    *(_QWORD *)(v0 + 368) = v31;
    swift_errorRetain(v31);
    if ((swift_dynamicCast(v0 + 352, v0 + 368, v27, &type metadata for CRLUSDRendererExtensionShared.ExtensionError, 6) & 1) != 0)
    {
      v28 = *(_QWORD *)(v0 + 352);
      v29 = *(_QWORD *)(v0 + 360);
      v30 = 4;
    }
    else
    {
      swift_getErrorValue(*(_QWORD *)(v0 + 448), v0 + 384, v0 + 304);
      v28 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
      v29 = v32;
      v30 = 2;
    }
  }
  v33 = *(_QWORD *)(v0 + 416);
  sub_100034010(v33 + 48, v0 + 16);
  v34 = *(_QWORD *)(v33 + 56);
  v35 = *(_QWORD *)(v33 + 64);
  v40 = *(_QWORD *)(v33 + 72);
  v41 = *(_QWORD *)(v33 + 48);
  *(_QWORD *)(v33 + 48) = v28;
  *(_QWORD *)(v33 + 56) = v29;
  *(_QWORD *)(v33 + 64) = v30;
  *(_QWORD *)(v33 + 72) = 0x8000000000000000;
  *(_OWORD *)(v33 + 80) = 0u;
  *(_OWORD *)(v33 + 96) = 0u;
  *(_QWORD *)(v33 + 128) = 0;
  *(_OWORD *)(v33 + 112) = 0u;
  sub_100014E74(v28, v29, v30);
  sub_100014E74(v28, v29, v30);
  sub_100034038((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F308);
  sub_10002F36C(v41, v34, v35, v40);
  sub_10002F9FC(v0 + 16);
  sub_100014C2C(v28, v29, v30);
  sub_100034038((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F36C);
  sub_10002FB48();
  v36 = sub_100014C2C(v28, v29, v30);
  swift_willThrow(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031BE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 328) = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 128) = v1;
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = v4;
  *(_OWORD *)(v2 + 152) = v3;
  *(_QWORD *)(v2 + 168) = *(_QWORD *)(a1 + 64);
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 176) = v5;
  *(_QWORD *)(v2 + 184) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 192) = v6;
  *(_QWORD *)(v2 + 200) = v7;
  return swift_task_switch(sub_100031C78, v6, v7);
}

uint64_t sub_100031C78()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v1 = *(_QWORD **)(v0 + 128);
  v2 = v1[6];
  *(_QWORD *)(v0 + 208) = v2;
  v3 = v1[7];
  *(_QWORD *)(v0 + 216) = v3;
  v4 = v1[8];
  *(_QWORD *)(v0 + 224) = v4;
  v5 = v1[9];
  *(_QWORD *)(v0 + 232) = v5;
  *(_QWORD *)(v0 + 240) = v1[10];
  *(_QWORD *)(v0 + 248) = v1[11];
  *(_QWORD *)(v0 + 256) = v1[12];
  *(_QWORD *)(v0 + 264) = v1[13];
  *(_QWORD *)(v0 + 272) = v1[14];
  *(_QWORD *)(v0 + 280) = v1[15];
  *(_QWORD *)(v0 + 288) = v1[16];
  if (v5 >> 62 == 1)
  {
    v16 = *(_QWORD *)(v0 + 184);
    v17 = v3;
    v11 = *(_QWORD *)(v0 + 104);
    v18 = v4;
    swift_retain(v2);
    swift_release(v16);
    v12 = v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration;
    *(_OWORD *)v12 = *(_OWORD *)v11;
    v13 = *(_OWORD *)(v11 + 16);
    v14 = *(_OWORD *)(v11 + 32);
    v15 = *(_OWORD *)(v11 + 48);
    *(_QWORD *)(v12 + 64) = *(_QWORD *)(v11 + 64);
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)(v12 + 48) = v15;
    *(_OWORD *)(v12 + 16) = v13;
    sub_10002F36C(v2, v17, v18, v5);
  }
  else
  {
    if (!(v5 >> 62))
    {
      v6 = *(_QWORD *)(v0 + 176);
      sub_10002F308(v2, v3, v4, v5);
      v7 = swift_retain_n(v2, 2);
      *(_QWORD *)(v0 + 296) = static MainActor.shared.getter(v7);
      v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
      *(_QWORD *)(v0 + 304) = v8;
      *(_QWORD *)(v0 + 312) = v9;
      return swift_task_switch(sub_100031E3C, v8, v9);
    }
    swift_release(*(_QWORD *)(v0 + 184));
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100031E3C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  v12 = *(_OWORD *)(v0 + 112);
  v13 = *(_OWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(unsigned int *)(v0 + 328);
  sub_100034010(v8 + 48, v0 + 16);
  v16 = *(_QWORD *)(v8 + 56);
  v17 = *(_QWORD *)(v8 + 48);
  v14 = *(_QWORD *)(v8 + 72);
  v15 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v8 + 48) = v4;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = v9;
  *(_QWORD *)(v8 + 72) = 0;
  *(_OWORD *)(v8 + 80) = v12;
  *(_QWORD *)(v8 + 96) = v6;
  *(_QWORD *)(v8 + 104) = v7;
  *(_OWORD *)(v8 + 112) = v13;
  *(_QWORD *)(v8 + 128) = v5;
  sub_10002F308(v4, v2, v3, v1);
  sub_10002F308(v4, v2, v3, v1);
  sub_100034038((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F308);
  sub_10002F36C(v17, v16, v15, v14);
  sub_10002F9FC(v0 + 16);
  sub_10002F36C(v4, v2, v3, v1);
  sub_100034038((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F36C);
  v10 = (_QWORD *)swift_task_alloc(dword_1000845FC);
  *(_QWORD *)(v0 + 320) = v10;
  *v10 = v0;
  v10[1] = sub_100032088;
  return sub_100030000();
}

uint64_t sub_100032088()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 320));
  return swift_task_switch(sub_1000320D4, *(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 312));
}

uint64_t sub_1000320D4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = v0[28];
  v1 = v0[29];
  v4 = v0[26];
  v3 = v0[27];
  swift_release(v0[37]);
  sub_10002F36C(v4, v3, v2, v1);
  return swift_task_switch(sub_100032174, v0[24], v0[25]);
}

uint64_t sub_100032174()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 184));
  sub_10002F36C(v4, v2, v3, v1);
  sub_10002F36C(v4, v2, v3, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032240(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_1000322AC, v4, v5);
}

uint64_t sub_1000322AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t result;
  double v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v1 = *(_QWORD **)(v0 + 24);
  v2 = v1[6];
  *(_QWORD *)(v0 + 56) = v2;
  v3 = v1[7];
  *(_QWORD *)(v0 + 64) = v3;
  v4 = v1[8];
  *(_QWORD *)(v0 + 72) = v4;
  v5 = v1[9];
  *(_QWORD *)(v0 + 80) = v5;
  *(_QWORD *)(v0 + 88) = v1[10];
  *(_QWORD *)(v0 + 96) = v1[11];
  *(_QWORD *)(v0 + 104) = v1[12];
  *(_QWORD *)(v0 + 112) = v1[13];
  *(_QWORD *)(v0 + 120) = v1[14];
  *(_QWORD *)(v0 + 128) = v1[15];
  *(_QWORD *)(v0 + 136) = v1[16];
  if (v5 >> 62 != 1)
  {
    swift_release(*(_QWORD *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v0 + 144) = v7;
  if (!v7)
  {
    v18 = *(_QWORD *)(v0 + 32);
    v19 = v3;
    v20 = v4;
    swift_retain(v2);
    swift_release(v18);
    sub_10002F36C(v2, v19, v20, v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = v6;
  sub_10002F308(v2, v3, v4, v5);
  *(_QWORD *)(v0 + 152) = 0;
  v9 = *(_QWORD *)(v0 + 16);
  v10 = *(unsigned __int8 *)(v9 + 40);
  swift_bridgeObjectRetain(v8);
  switch(v10)
  {
    case 2:
      v11 = (_QWORD *)swift_task_alloc(dword_100084A9C);
      *(_QWORD *)(v0 + 168) = v11;
      *v11 = v0;
      v11[1] = sub_1000325EC;
      result = sub_10003A5E0();
      break;
    case 3:
      v15 = (_QWORD *)swift_task_alloc(dword_100084AA4);
      *(_QWORD *)(v0 + 176) = v15;
      *v15 = v0;
      v15[1] = sub_100032638;
      result = sub_10003A894();
      break;
    case 4:
      v16 = (_QWORD *)swift_task_alloc(dword_100084AB4);
      *(_QWORD *)(v0 + 192) = v16;
      *v16 = v0;
      v16[1] = sub_1000326D0;
      result = sub_10003AFD0();
      break;
    case 5:
      v17 = (_QWORD *)swift_task_alloc(dword_100084AAC);
      *(_QWORD *)(v0 + 184) = v17;
      *v17 = v0;
      v17[1] = sub_100032684;
      result = sub_10003AB18();
      break;
    default:
      v13 = *(double *)(v9 + 32);
      v14 = (_QWORD *)swift_task_alloc(dword_100084A94);
      *(_QWORD *)(v0 + 160) = v14;
      *v14 = v0;
      v14[1] = sub_1000325A0;
      result = sub_10003A090(v10 & 1, v13);
      break;
  }
  return result;
}

uint64_t sub_1000325A0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  return swift_task_switch(sub_1000347AC, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1000325EC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  return swift_task_switch(sub_1000347AC, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100032638()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  return swift_task_switch(sub_1000347AC, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100032684()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  return swift_task_switch(sub_1000347AC, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1000326D0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 192));
  return swift_task_switch(sub_10003271C, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10003271C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 152) + 1;
  if (v1 == *(_QWORD *)(v0 + 144))
  {
    v3 = *(_QWORD *)(v0 + 72);
    v2 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    swift_release(v6);
    sub_10002F36C(v5, v4, v3, v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 152) = v1;
    v8 = *(_QWORD *)(v0 + 16) + 16 * v1;
    switch(*(_BYTE *)(v8 + 40))
    {
      case 2:
        v9 = (_QWORD *)swift_task_alloc(dword_100084A9C);
        *(_QWORD *)(v0 + 168) = v9;
        *v9 = v0;
        v9[1] = sub_1000325EC;
        result = sub_10003A5E0();
        break;
      case 3:
        v13 = (_QWORD *)swift_task_alloc(dword_100084AA4);
        *(_QWORD *)(v0 + 176) = v13;
        *v13 = v0;
        v13[1] = sub_100032638;
        result = sub_10003A894();
        break;
      case 4:
        v14 = (_QWORD *)swift_task_alloc(dword_100084AB4);
        *(_QWORD *)(v0 + 192) = v14;
        *v14 = v0;
        v14[1] = sub_1000326D0;
        result = sub_10003AFD0();
        break;
      case 5:
        v15 = (_QWORD *)swift_task_alloc(dword_100084AAC);
        *(_QWORD *)(v0 + 184) = v15;
        *v15 = v0;
        v15[1] = sub_100032684;
        result = sub_10003AB18();
        break;
      default:
        v10 = *(double *)(v8 + 32);
        v11 = *(_BYTE *)(v8 + 40) & 1;
        v12 = (_QWORD *)swift_task_alloc(dword_100084A94);
        *(_QWORD *)(v0 + 160) = v12;
        *v12 = v0;
        v12[1] = sub_1000325A0;
        result = sub_10003A090(v11, v10);
        break;
    }
  }
  return result;
}

uint64_t sub_100032994(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v1;
  *(float *)(v2 + 160) = a1;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 24) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = v5;
  return swift_task_switch(sub_100032A04, v4, v5);
}

uint64_t sub_100032A04()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[6];
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)(v0 + 56) = v1[7];
  *(_QWORD *)(v0 + 64) = v1[8];
  v3 = v1[9];
  *(_QWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v0 + 80) = v1[10];
  *(_QWORD *)(v0 + 88) = v1[11];
  *(_QWORD *)(v0 + 96) = v1[12];
  *(_QWORD *)(v0 + 104) = v1[13];
  *(_QWORD *)(v0 + 112) = v1[14];
  *(_QWORD *)(v0 + 120) = v1[15];
  *(_QWORD *)(v0 + 128) = v1[16];
  if (v3 >> 62 == 1)
  {
    v4 = dword_100084ABC;
    swift_retain(v2);
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 136) = v5;
    *v5 = v0;
    v5[1] = sub_100032AE4;
    return sub_10003B210(*(float *)(v0 + 160));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 24));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100032AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 136);
  *(_QWORD *)(*(_QWORD *)v2 + 144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[4];
    v7 = v4[5];
    v8 = sub_100032BFC;
  }
  else
  {
    v4[19] = a1;
    v6 = v4[4];
    v7 = v4[5];
    v8 = sub_100032B58;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100032B58()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 24));
  sub_10002F36C(v4, v3, v2, v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152));
}

uint64_t sub_100032BFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_10002F36C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032C58(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  id v33;
  void *v34;
  char *v35;
  uint64_t v36;

  v5 = v4;
  v10 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, "device");
  v14 = *(void **)(v4 + 32);
  if (v14)
  {
    v34 = a4;
    v15 = v14;
    v16 = objc_msgSend(v15, "device");
    v17 = v16;
    if (v16)
    {
      v18 = objc_msgSend(v16, "registryID");
      swift_unknownObjectRelease(v17);
    }
    else
    {
      v18 = 0;
    }
    v35 = v12;
    v36 = v5;
    v19 = objc_msgSend(v13, "registryID");
    if (!v17 || v18 != v19)
      objc_msgSend(v15, "setDevice:", v13);
    v20 = &v15[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData];
    v21 = *(_QWORD *)&v15[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData];
    v22 = *(_QWORD *)&v15[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData + 8];
    v33 = v13;
    v23 = *(_QWORD *)&v15[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData + 16];
    v24 = *(void **)&v15[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData + 24];
    *(_QWORD *)v20 = a1;
    *((_QWORD *)v20 + 1) = a2;
    a4 = v34;
    *((_QWORD *)v20 + 2) = a3;
    *((_QWORD *)v20 + 3) = a4;
    swift_unknownObjectRetain_n(a1, 2);
    swift_unknownObjectRetain_n(a2, 2);
    swift_unknownObjectRetain_n(a3, 2);
    v25 = a4;
    v26 = v24;
    v13 = v33;
    sub_100034528(v21, v22, v23, v26);
    sub_100047740();

    swift_unknownObjectRelease(a3);
    swift_unknownObjectRelease(a2);
    swift_unknownObjectRelease(a1);
    v12 = v35;
    v5 = v36;
  }
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 1, 1, v27);
  type metadata accessor for MainActor(0);
  swift_unknownObjectRetain(a1);
  swift_retain(v5);
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRetain(a3);
  v28 = a4;
  v29 = static MainActor.shared.getter(v28);
  v30 = (_QWORD *)swift_allocObject(&unk_100074090, 72, 7);
  v30[2] = v29;
  v30[3] = &protocol witness table for MainActor;
  v30[4] = v5;
  v30[5] = a1;
  v30[6] = a2;
  v30[7] = a3;
  v30[8] = v28;
  v31 = sub_10002E6E0((uint64_t)v12, (uint64_t)&unk_100084648, (uint64_t)v30);
  swift_unknownObjectRelease(v13);
  return swift_release(v31);
}

uint64_t sub_100032ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[8] = v9;
  v8[9] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[10] = v10;
  v8[11] = v11;
  return swift_task_switch(sub_100032F44, v10, v11);
}

uint64_t sub_100032F44()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 16);
  *(_QWORD *)(v0 + 96) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 104) = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_uuid;
    *(_QWORD *)(v0 + 112) = static MainActor.shared.getter(Strong);
    v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 120) = v3;
    *(_QWORD *)(v0 + 128) = v4;
    return swift_task_switch(sub_100032FEC, v3, v4);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 72));
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100032FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 24) + *(_QWORD *)(v0 + 104);
  v3 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 136) = v3;
  v4 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 56) = v1;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000836C0 + dword_1000836C0);
  v5 = (_QWORD *)swift_task_alloc(unk_1000836C4);
  *(_QWORD *)(v0 + 144) = v5;
  *v5 = v0;
  v5[1] = sub_10003309C;
  return v7(0xD00000000000002CLL, 0x800000010005E200, (uint64_t)sub_1000149B4, v3);
}

uint64_t sub_10003309C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 136);
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_100033188;
  else
    v5 = sub_10003310C;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
}

uint64_t sub_10003310C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[12];
  swift_release(v0[14]);
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_100033150, v0[10], v0[11]);
}

uint64_t sub_100033150()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  **(_BYTE **)(v0 + 16) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033188()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[19];
  v2 = v0[12];
  swift_release(v0[14]);
  swift_errorRelease(v1);
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_1000331D8, v0[10], v0[11]);
}

uint64_t sub_1000331D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  **(_BYTE **)(v0 + 16) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033214(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[83] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[84] = v3;
  v2[85] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[86] = v4;
  v2[87] = v5;
  return swift_task_switch(sub_100033288, v4, v5);
}

uint64_t sub_100033288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 664);
  swift_beginAccess(v1, v0 + 408, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 704) = Strong;
  if (Strong)
    __asm { BR              X10 }
  swift_release(*(_QWORD *)(v0 + 680));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003383C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v6;

  v1 = v0[101];
  v2 = v0[88] + v0[98];
  v3 = (_QWORD *)swift_task_alloc(48);
  v0[105] = v3;
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 54;
  v6 = (char *)&dword_1000836C0 + dword_1000836C0;
  v4 = (_QWORD *)swift_task_alloc(unk_1000836C4);
  v0[106] = v4;
  *v4 = v0;
  v4[1] = sub_1000338F4;
  return ((uint64_t (*)(unint64_t, unint64_t, void (*)(id *, uint64_t), _QWORD *))v6)(0xD00000000000002DLL, 0x800000010005E230, sub_100014BD0, v3);
}

uint64_t sub_1000338F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 848);
  v4 = *(_QWORD *)(*v1 + 840);
  *(_QWORD *)(*v1 + 856) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_100033A2C;
  else
    v5 = sub_10003396C;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 824), *(_QWORD *)(v2 + 832));
}

uint64_t sub_10003396C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[101];
  swift_release(v0[102]);
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_1000339B4, v0[86], v0[87]);
}

uint64_t sub_1000339B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  swift_release(*(_QWORD *)(v0 + 680));
  v1 = *(_QWORD *)(v0 + 760);
  v2 = *(_QWORD *)(v0 + 704);
  v3 = (uint64_t *)(v2 + *(_QWORD *)(v0 + 768));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  v11 = *(_OWORD *)(v0 + 728);
  v12 = *(_OWORD *)(v0 + 744);
  *(_OWORD *)v3 = *(_OWORD *)(v0 + 712);
  *((_OWORD *)v3 + 1) = v11;
  *((_OWORD *)v3 + 2) = v12;
  v3[6] = v1;
  sub_1000340D4(v4, v5, v6, v7, v8, v9, v10);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033A2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = v0[101];
  v2 = v0[95];
  v3 = v0[94];
  v4 = v0[93];
  v5 = v0[92];
  v6 = v0[91];
  v7 = v0[90];
  v8 = v0[89];
  swift_release(v0[102]);
  swift_unknownObjectRelease(v1);
  sub_100014BEC(v8, v7, v6, v5, v4, v3, v2);
  return swift_task_switch(sub_100033AC8, v0[86], v0[87]);
}

uint64_t sub_100033AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 856);
  v34 = *(_QWORD *)(v0 + 800);
  v2 = *(_QWORD *)(v0 + 792);
  v3 = *(_QWORD *)(v0 + 776);
  swift_release(*(_QWORD *)(v0 + 680));
  v4 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  inited = swift_initStackObject(v3, v0 + 104);
  *(_OWORD *)(inited + 16) = xmmword_100061920;
  v6 = v4;
  v7 = UUID.uuidString.getter();
  v9 = v8;
  v10 = String.index(_:offsetBy:)(15, 8, v7, v8);
  v11 = String.subscript.getter(15, v10, v7, v9);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease(v9);
  v18 = static String._fromSubstring(_:)(v11, v13, v15, v17);
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v18;
  *(_QWORD *)(inited + 40) = v20;
  swift_getErrorValue(v1, v0 + 656, v0 + 568);
  v21 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 576), *(_QWORD *)(v0 + 584));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v2;
  *(_QWORD *)(inited + 72) = v21;
  *(_QWORD *)(inited + 80) = v22;
  v23 = static os_log_type_t.debug.getter();
  sub_10001D7E0((uint64_t)v6, &_mh_execute_header, v23, "(CoreRE) [%{public}@] error sending state: %{public}@", 53, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 2, v34);

  *(_QWORD *)(v0 + 632) = v1;
  swift_errorRetain(v1);
  v24 = sub_1000131C0(&qword_100084D00);
  if (swift_dynamicCast(v0 + 592, v0 + 632, v24, &type metadata for CRLUSDRendering.RendererError, 6))
  {
    v25 = *(_QWORD *)(v0 + 592);
    v26 = *(_QWORD *)(v0 + 600);
    v27 = *(unsigned __int8 *)(v0 + 608);
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 856);
    *(_QWORD *)(v0 + 640) = v28;
    swift_errorRetain(v28);
    if ((swift_dynamicCast(v0 + 616, v0 + 640, v24, &type metadata for CRLUSDRendererExtensionShared.ExtensionError, 6) & 1) != 0)
    {
      v25 = *(_QWORD *)(v0 + 616);
      v26 = *(_QWORD *)(v0 + 624);
      v27 = 4;
    }
    else
    {
      swift_getErrorValue(*(_QWORD *)(v0 + 856), v0 + 648, v0 + 488);
      v25 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504));
      v26 = v29;
      v27 = 2;
    }
  }
  v37 = *(_QWORD *)(v0 + 856);
  v30 = *(_QWORD *)(v0 + 704);
  sub_100034010(v30 + 48, v0 + 16);
  v31 = *(_QWORD *)(v30 + 56);
  v32 = *(_QWORD *)(v30 + 64);
  v35 = *(_QWORD *)(v30 + 72);
  v36 = *(_QWORD *)(v30 + 48);
  *(_QWORD *)(v30 + 48) = v25;
  *(_QWORD *)(v30 + 56) = v26;
  *(_QWORD *)(v30 + 64) = v27;
  *(_QWORD *)(v30 + 72) = 0x8000000000000000;
  *(_OWORD *)(v30 + 80) = 0u;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_QWORD *)(v30 + 128) = 0;
  *(_OWORD *)(v30 + 112) = 0u;
  sub_100014E74(v25, v26, v27);
  sub_100014E74(v25, v26, v27);
  sub_100034038((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F308);
  sub_10002F36C(v36, v31, v32, v35);
  sub_10002F9FC(v0 + 16);
  sub_100014C2C(v25, v26, v27);
  sub_100034038((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002F36C);
  sub_10002FB48();
  sub_100014C2C(v25, v26, v27);
  swift_release(v30);
  swift_errorRelease(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033E48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_uuid;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100033E8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10008461C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001634C;
  return sub_100030424(a1);
}

uint64_t sub_100033ED8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000845F4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100015350;
  return sub_100031BE4(a1);
}

uint64_t sub_100033F24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000845EC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001634C;
  return sub_100032240(a1);
}

uint64_t sub_100033F70(float a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000845E4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100033FBC;
  return sub_100032994(a1);
}

uint64_t sub_100033FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100034010(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  return a2;
}

_QWORD *sub_100034038(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return a1;
}

unint64_t sub_10003408C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100084198;
  if (!qword_100084198)
  {
    v1 = type metadata accessor for CRLUSDRendering.TaskQueue();
    result = swift_getWitnessTable(&unk_100061D64, v1);
    atomic_store(result, &qword_100084198);
  }
  return result;
}

uint64_t sub_1000340D4(uint64_t result, unint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (a6 >> 1 != 0xFFFFFFFF)
    return sub_100014BEC(result, a2, a3, a4, a5, a6, a7);
  return result;
}

unint64_t sub_1000340E8()
{
  unint64_t result;

  result = qword_1000854B0;
  if (!qword_1000854B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_1000854B0);
  }
  return result;
}

uint64_t sub_10003412C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100034190;
  return v6(a1);
}

uint64_t sub_100034190()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000341DC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_100034244;
  return v5(v2 + 32);
}

uint64_t sub_100034244()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100034294(uint64_t result, unint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (a6 >> 1 != 0xFFFFFFFF)
    return sub_100014E34(result, a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t sub_1000342A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 0xF;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100014BEC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_QWORD *)(v0 + v6 + 16), *(_QWORD *)(v0 + v6 + 24), *(_QWORD *)(v0 + v6 + 32), *(_QWORD *)(v0 + v6 + 40), *(_QWORD *)(v0 + v6 + 48));
  return swift_deallocObject(v0, v6 + 56, v5);
}

uint64_t sub_100034350()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100034374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10008460C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001634C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100084608 + dword_100084608))(a1, v4);
}

uint64_t sub_1000343E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100084624);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100015350;
  return sub_100030794(a1, v5, v4);
}

uint64_t sub_100034448()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100034494(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_100084644);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10001634C;
  return sub_100032ECC(a1, v4, v5, v6, v7, v8, v9, v10);
}

void sub_100034528(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    swift_unknownObjectRelease(a1);
    swift_unknownObjectRelease(a2);
    swift_unknownObjectRelease(a3);

  }
}

uint64_t sub_100034574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100084654);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001634C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100084650 + dword_100084650))(a1, v4);
}

uint64_t sub_1000345E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000131C0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100034620()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_100034644(uint64_t a1)
{
  uint64_t v1;

  return sub_10002EB6C(a1, v1);
}

unint64_t sub_10003464C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100084670;
  if (!qword_100084670)
  {
    v1 = sub_1000134AC(&qword_100084668);
    result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v1);
    atomic_store(result, &qword_100084670);
  }
  return result;
}

uint64_t sub_10003469C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10008467C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001634C;
  return sub_10002EE08();
}

uint64_t sub_10003470C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100034738(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10008468C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001634C;
  return sub_10002F118(a1, v4, v5, v6);
}

uint64_t sub_1000347B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10003967C(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000347EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[10];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  __chkstk_darwin(v2);
  v4 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v4);
  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v7[8] = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    v7[9] = v2;
    v6 = *(_QWORD *)(v1 + 72) >> 62;
    v7[6] = v3;
    v7[7] = result;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_100034B3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[52] = a1;
  v2[53] = v1;
  v3 = sub_1000131C0(&qword_100084638);
  v2[54] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[55] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[56] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[57] = swift_task_alloc(v6);
  v2[58] = swift_task_alloc(v6);
  v2[59] = swift_task_alloc(v6);
  v2[60] = swift_task_alloc(v6);
  v7 = type metadata accessor for MainActor(0);
  v2[61] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[62] = v8;
  v2[63] = v9;
  return swift_task_switch(sub_100034C1C, v8, v9);
}

uint64_t sub_100034C1C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Receipt;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v46;
  _BYTE v47[9];

  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  v1 = v0[53];
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v0 + 29, 0, 0);
  v2 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v3 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  v0[64] = v3;
  inited = swift_initStackObject(v3, v0 + 20);
  *(_OWORD *)(inited + 16) = xmmword_100061930;
  v5 = v2;
  v6 = sub_100023548();
  v8 = v7;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v9 = sub_1000340E8();
  v0[65] = v9;
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v8;
  v10 = static os_log_type_t.debug.getter(v9);
  sub_10001D7E0((uint64_t)v5, &_mh_execute_header, v10, "(ARViewBackend) loadScene(%@)", 29, 2, inited);
  swift_setDeallocating(inited);
  v11 = sub_1000131C0(&qword_1000852E0);
  v0[66] = v11;
  swift_arrayDestroy(inited + 32, 1, v11);

  v12 = v0[55];
  v13 = v0[56];
  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    v15 = v0[54];
    v16 = v0[52];
    v47[0] = 0;
    v17 = (uint64_t *)(v16 + *(int *)(type metadata accessor for CRLUSDRendering.SceneRequest(0) + 20));
    v18 = *v17;
    v19 = v17[1];
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v14(v15, v16, v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(v18, v19, 0, v15, v47);
    sub_100039888(v15);
    v20 = v0[59];
    v21 = v0[60];
    v22 = v0[55];
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[56] + 32);
    v23(v20, v0[58], v22);
    v23(v21, v20, v22);
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v14(v0[60], v0[52], v0[55]);
  }
  v25 = v0[56];
  v24 = v0[57];
  v26 = v0[55];
  v28 = v0[52];
  v27 = v0[53];
  v14(v24, v0[60], v26);
  Receipt = type metadata accessor for CRLUSDRendering.LoadReceipt(0);
  v30 = swift_allocObject(Receipt, *(unsigned int *)(Receipt + 48), *(unsigned __int16 *)(Receipt + 52));
  *(_QWORD *)(v30 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest) = 0;
  *(_QWORD *)(v30 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable) = 0;
  v0[67] = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v30 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_url, v24, v26);
  v31 = *(_QWORD *)(v30 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest);
  *(_QWORD *)(v30 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_entityLoadRequest) = 0;
  swift_release(v31);
  v32 = *(_QWORD *)(v30 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable);
  *(_QWORD *)(v30 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering11LoadReceipt_cancellable) = 0;
  swift_release(v32);
  v33 = type metadata accessor for CRLUSDRendering.SceneRequest(0);
  v0[68] = v33;
  v34 = (unsigned int *)(v28 + *(int *)(v33 + 24));
  v35 = *v34;
  v37 = *((_QWORD *)v34 + 2);
  v36 = *((_QWORD *)v34 + 3);
  v38 = *((_QWORD *)v34 + 8);
  v39 = *(_QWORD *)(v27 + 56);
  v40 = *(_QWORD *)(v27 + 64);
  v41 = *(_QWORD *)(v27 + 72);
  v46 = *(_QWORD *)(v27 + 48);
  v42 = *((_OWORD *)v34 + 2);
  v43 = *((_OWORD *)v34 + 3);
  *(_QWORD *)(v27 + 48) = v30;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 64) = v35;
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 80) = v37;
  *(_QWORD *)(v27 + 88) = v36;
  *(_OWORD *)(v27 + 96) = v42;
  *(_OWORD *)(v27 + 112) = v43;
  *(_QWORD *)(v27 + 128) = v38;
  swift_retain_n(v30, 2);
  sub_100037D94(v46, v39, v40, v41);
  sub_1000347EC();
  swift_release(v30);
  v44 = (_QWORD *)swift_task_alloc(dword_100083B94);
  v0[69] = v44;
  *v44 = v0;
  v44[1] = sub_100035294;
  return sub_1000240BC();
}

uint64_t sub_100035294(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 552);
  v3[70] = a1;
  v3[71] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100035784;
  else
    v5 = sub_100035300;
  return swift_task_switch(v5, v3[62], v3[63]);
}

uint64_t sub_100035300()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;

  v1 = *(_QWORD **)(v0 + 424);
  swift_release(*(_QWORD *)(v0 + 488));
  v2 = (id)static OS_os_log.crlThreeDimensionalObjects;
  v3 = static os_log_type_t.debug.getter(v2);
  sub_10001D7E0((uint64_t)v2, &_mh_execute_header, v3, "(ARViewBackend) loadScene(): entity loaded", 42, 2, (uint64_t)_swiftEmptyArrayStorage);

  v5 = v1[6];
  v4 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  v8 = v1[10];
  v9 = v1[11];
  v11 = v1[12];
  v10 = v1[13];
  v12 = v1[14];
  v13 = v1[15];
  v14 = v1[16];
  if (v7 >> 62)
  {
    v50 = *(_QWORD *)(v0 + 560);
    v48 = *(_QWORD *)(v0 + 536);
    v54 = *(_QWORD *)(v0 + 480);
    v52 = *(_QWORD *)(v0 + 448);
    v53 = *(_QWORD *)(v0 + 440);
    v17 = v1[7];
    sub_100037CE0(v5, v4, v6, v7);
    swift_release(v48);
    swift_release(v50);
    sub_100037D94(v5, v17, v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v53);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 536);
    *(_DWORD *)(v0 + 16) = v6;
    *(_QWORD *)(v0 + 32) = v8;
    *(_QWORD *)(v0 + 40) = v9;
    *(_QWORD *)(v0 + 48) = v11;
    *(_QWORD *)(v0 + 56) = v10;
    *(_QWORD *)(v0 + 64) = v12;
    *(_QWORD *)(v0 + 72) = v13;
    *(_QWORD *)(v0 + 80) = v14;
    v16 = *(_QWORD *)(v0 + 560);
    if (v15 == v5)
    {
      v44 = v15;
      v47 = *(_QWORD *)(v0 + 448);
      v49 = *(_QWORD *)(v0 + 440);
      v51 = *(_QWORD *)(v0 + 480);
      v18 = *(_QWORD *)(v0 + 424);
      v19 = (double *)(*(_QWORD *)(v0 + 416) + *(int *)(*(_QWORD *)(v0 + 544) + 28));
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
      v45 = v4;
      v24 = v4;
      v46 = v6;
      v25 = _s13ARViewBackendC17ARViewCoordinatorCMa();
      swift_allocObject(v25, 184, 15);
      sub_100037CE0(v5, v24, v6, v7);
      v26 = swift_retain(v16);
      v27 = v16;
      v28 = sub_100038898(v26, v0 + 16, v20, v21, v22, v23);
      swift_release(v16);
      v55 = &_swiftEmptySetSingleton;
      v29 = *(_QWORD *)(v28 + 168);
      *(_QWORD *)(v0 + 392) = v29;
      v30 = swift_allocObject(&unk_1000744A8, 24, 7);
      swift_weakInit(v30 + 16, v18);
      swift_retain(v29);
      v31 = sub_1000131C0(&qword_100084A18);
      v32 = sub_10003983C();
      v33 = Publisher<>.sink(receiveValue:)(sub_100039834, v30, v31, v32);
      swift_release(v30);
      swift_release(*(_QWORD *)(v0 + 392));
      AnyCancellable.store(in:)(&v55);
      swift_release(v33);
      v34 = v55;
      v36 = *(_QWORD *)(v18 + 48);
      v35 = *(_QWORD *)(v18 + 56);
      v37 = *(_QWORD *)(v18 + 64);
      v43 = *(_QWORD *)(v18 + 72);
      *(_QWORD *)(v18 + 48) = v44;
      *(_QWORD *)(v18 + 56) = v28;
      *(_QWORD *)(v18 + 64) = v34;
      *(_QWORD *)(v18 + 72) = 0x4000000000000000;
      *(_OWORD *)(v18 + 80) = 0u;
      *(_OWORD *)(v18 + 96) = 0u;
      *(_OWORD *)(v18 + 112) = 0u;
      *(_QWORD *)(v18 + 128) = 0;
      swift_retain_n(v44, 2);
      swift_retain_n(v28, 2);
      swift_bridgeObjectRetain(v34);
      sub_100037D94(v36, v35, v37, v43);
      sub_1000347EC();
      swift_release(v27);
      swift_bridgeObjectRelease(v34);
      swift_release_n(v28, 2);
      swift_release(v44);
      sub_100037D94(v5, v45, v46, v7);
      swift_release(v44);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v49);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 448) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 440));
      swift_release(v15);
      swift_release(v16);
    }
  }
  v38 = *(_QWORD *)(v0 + 472);
  v40 = *(_QWORD *)(v0 + 456);
  v39 = *(_QWORD *)(v0 + 464);
  v41 = *(_QWORD *)(v0 + 432);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 448);
  swift_release(*(_QWORD *)(v0 + 488));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 528);
  v7 = *(_QWORD *)(v0 + 520);
  v8 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  inited = swift_initStackObject(*(_QWORD *)(v0 + 512), v0 + 88);
  *(_OWORD *)(inited + 16) = xmmword_100061930;
  swift_getErrorValue(v5, v0 + 408, v0 + 256);
  v10 = *(_QWORD *)(v0 + 264);
  v11 = *(_QWORD *)(v0 + 272);
  v12 = v8;
  v13 = Error.localizedDescription.getter(v10, v11);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v7;
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v14;
  v15 = static os_log_type_t.error.getter();
  sub_10001D7E0((uint64_t)v12, &_mh_execute_header, v15, "(ARViewBackend) loadScene() error: %{public}@", 45, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, v6);

  *(_QWORD *)(v0 + 384) = v5;
  swift_errorRetain(v5);
  v16 = sub_1000131C0(&qword_100084D00);
  if (swift_dynamicCast(v0 + 328, v0 + 384, v16, &type metadata for CRLUSDRendering.RendererError, 6))
  {
    v17 = *(_QWORD *)(v0 + 328);
    v18 = *(_QWORD *)(v0 + 336);
    v19 = *(unsigned __int8 *)(v0 + 344);
  }
  else
  {
    *(_QWORD *)(v0 + 368) = v5;
    swift_errorRetain(v5);
    if ((swift_dynamicCast(v0 + 352, v0 + 368, v16, &type metadata for CRLUSDRendererExtensionShared.ExtensionError, 6) & 1) != 0)
    {
      v17 = *(_QWORD *)(v0 + 352);
      v18 = *(_QWORD *)(v0 + 360);
      v19 = 4;
    }
    else
    {
      swift_getErrorValue(v5, v0 + 376, v0 + 280);
      v17 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
      v18 = v20;
      v19 = 2;
    }
  }
  v28 = *(_QWORD *)(v0 + 480);
  v29 = *(_QWORD *)(v0 + 472);
  v30 = *(_QWORD *)(v0 + 464);
  v31 = *(_QWORD *)(v0 + 456);
  v21 = *(_QWORD *)(v0 + 424);
  v32 = *(_QWORD *)(v0 + 432);
  v22 = *(_QWORD *)(v21 + 48);
  v23 = *(_QWORD *)(v21 + 56);
  v25 = *(_QWORD *)(v21 + 64);
  v24 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v21 + 48) = v17;
  *(_QWORD *)(v21 + 56) = v18;
  *(_QWORD *)(v21 + 64) = v19;
  *(_QWORD *)(v21 + 72) = 0x8000000000000000;
  *(_QWORD *)(v21 + 128) = 0;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  sub_100014E74(v17, v18, v19);
  sub_100037D94(v22, v23, v25, v24);
  sub_1000347EC();
  v26 = sub_100014C2C(v17, v18, v19);
  swift_willThrow(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_100035F4C();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100035AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  *(_DWORD *)(v2 + 96) = *(_DWORD *)a1;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 24) = v3;
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 80) = *(_QWORD *)(a1 + 64);
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 88) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100035B4C, v6, v7);
}

uint64_t sub_100035B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  if (v5 >> 62 == 1)
  {
    v13 = *(_QWORD *)(v0 + 32);
    *(_OWORD *)(v3 + 16) = *(_OWORD *)v13;
    v14 = *(_OWORD *)(v13 + 16);
    v15 = *(_OWORD *)(v13 + 32);
    v16 = *(_OWORD *)(v13 + 48);
    *(_QWORD *)(v3 + 80) = *(_QWORD *)(v13 + 64);
    *(_OWORD *)(v3 + 48) = v15;
    *(_OWORD *)(v3 + 64) = v16;
    *(_OWORD *)(v3 + 32) = v14;
    sub_100037CE0(v2, v3, v4, v5);
    swift_retain(v3);
    sub_100036FC8();
    swift_release(v3);
    sub_100037D94(v2, v3, v4, v5);
  }
  else if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    v9 = *(unsigned int *)(v0 + 96);
    v10 = *(_OWORD *)(v0 + 48);
    v11 = *(_OWORD *)(v0 + 64);
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 64) = v9;
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = v8;
    *(_QWORD *)(v1 + 88) = v7;
    *(_OWORD *)(v1 + 96) = v10;
    *(_OWORD *)(v1 + 112) = v11;
    *(_QWORD *)(v1 + 128) = v6;
    sub_100037CE0(v2, v3, v4, v5);
    sub_100037CE0(v2, v3, v4, v5);
    v12 = swift_retain_n(v2, 2);
    sub_100037D94(v12, v3, v4, v5);
    sub_1000347EC();
    sub_100037D94(v2, v3, v4, v5);
    sub_100037D94(v2, v3, v4, v5);
    swift_release(v2);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035DFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_100035E68, v4, v5);
}

uint64_t sub_100035E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v1 + 72) >> 62 == 1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 56);
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
    swift_retain(v2);
    if (v3)
    {
      v4 = (double *)(swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16)) + 40);
      do
      {
        switch(*(_BYTE *)v4)
        {
          case 2:
            sub_100036734();
            break;
          case 3:
            sub_100036740();
            break;
          case 4:
            sub_100036D98();
            break;
          case 5:
            sub_100036984();
            break;
          default:
            sub_10003629C(*(_BYTE *)v4 & 1, *(v4 - 1));
            break;
        }
        v4 += 2;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    }
    swift_release(v2);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[10];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  __chkstk_darwin(v2);
  v4 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v4);
  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v7[8] = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    v7[9] = v2;
    v6 = *(_QWORD *)(v1 + 72) >> 62;
    v7[6] = v3;
    v7[7] = result;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_10003629C(char a1, double a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  BOOL v52;
  unint64_t v53;
  uint64_t result;
  uint64_t v55;
  unsigned int v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  _OWORD v65[2];
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  _QWORD *v69;
  char v70[32];

  v5 = (_QWORD *)(v2 + 176);
  swift_beginAccess(v2 + 176, v70, 0, 0);
  v6 = *(_QWORD *)(v2 + 176);
  v55 = v6 + 64;
  v7 = 1 << *(_BYTE *)(v6 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v6 + 64);
  v57 = (unint64_t)(v7 + 63) >> 6;
  v58 = v2;
  v59 = *(_QWORD *)(v2 + 176);
  swift_bridgeObjectRetain(v6);
  v10 = 0;
  v56 = a1 & 1;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_23;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_44;
    if (v17 >= v57)
      break;
    v18 = *(_QWORD *)(v55 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v57)
        break;
      v18 = *(_QWORD *)(v55 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v57)
          break;
        v18 = *(_QWORD *)(v55 + 8 * v10);
        if (!v18)
        {
          v19 = v17 + 3;
          if (v19 >= v57)
            break;
          v18 = *(_QWORD *)(v55 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v10 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_46;
              if (v10 >= v57)
                goto LABEL_40;
              v18 = *(_QWORD *)(v55 + 8 * v10);
              ++v19;
              if (v18)
                goto LABEL_22;
            }
          }
          v10 = v19;
        }
      }
    }
LABEL_22:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_23:
    v20 = 16 * v16;
    v21 = (uint64_t *)(*(_QWORD *)(v59 + 48) + v20);
    v22 = v21[1];
    v63 = *v21;
    v23 = (uint64_t *)(*(_QWORD *)(v59 + 56) + v20);
    v14 = *v23;
    v24 = v23[1];
    if (!v24)
    {
      swift_bridgeObjectRetain(v22);
      v26 = swift_retain(v14);
LABEL_29:
      v60 = v9;
      v61 = v10;
      v28 = AnimationResource.repeat(duration:)(v26, INFINITY);
      v29 = Entity.playAnimation(_:transitionDuration:startsPaused:)(v28, v56, a2);
      v30 = v5;
      swift_beginAccess(v5, v65, 33, 0);
      swift_retain(v14);
      swift_retain(v29);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v58 + 176));
      v69 = *(_QWORD **)(v58 + 176);
      v32 = v69;
      *(_QWORD *)(v58 + 176) = 0x8000000000000000;
      v34 = sub_100024F88(v63, v22);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v38 = v33;
      if (v32[3] < v37)
      {
        sub_100043B88(v37, isUniquelyReferenced_nonNull_native);
        v39 = sub_100024F88(v63, v22);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_47;
        v34 = v39;
        v41 = v69;
        if ((v38 & 1) == 0)
          goto LABEL_36;
LABEL_4:
        v11 = (_QWORD *)(v41[7] + 16 * v34);
        v12 = v11[1];
        swift_release(*v11);
        swift_release(v12);
        *v11 = v14;
        v11[1] = v29;
LABEL_5:
        v5 = v30;
        v13 = *v30;
        *v30 = v41;
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v13);
        swift_endAccess(v65);
        swift_release(v14);
        swift_release(v28);
        swift_release(v29);
        v14 = v24;
        v9 = v60;
        v10 = v61;
        goto LABEL_6;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v41 = v69;
        if ((v33 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100045630();
        v41 = v69;
        if ((v38 & 1) != 0)
          goto LABEL_4;
      }
LABEL_36:
      v41[(v34 >> 6) + 8] |= 1 << v34;
      v42 = (uint64_t *)(v41[6] + 16 * v34);
      *v42 = v63;
      v42[1] = v22;
      v43 = (_QWORD *)(v41[7] + 16 * v34);
      *v43 = v14;
      v43[1] = v29;
      v44 = v41[2];
      v45 = __OFADD__(v44, 1);
      v46 = v44 + 1;
      if (v45)
        goto LABEL_45;
      v41[2] = v46;
      swift_bridgeObjectRetain(v22);
      goto LABEL_5;
    }
    swift_bridgeObjectRetain(v22);
    swift_retain(v14);
    v25 = swift_retain(v24);
    v26 = AnimationPlaybackController.isValid.getter(v25);
    if ((v26 & 1) == 0)
      goto LABEL_29;
    v27 = swift_bridgeObjectRelease(v22);
    if ((dispatch thunk of AnimationPlaybackController.isPaused.getter(v27) & 1) != 0)
      dispatch thunk of AnimationPlaybackController.resume()();
    swift_release(v24);
LABEL_6:
    swift_release(v14);
  }
LABEL_40:
  swift_release(v59);
  v62 = *(_OWORD *)(v58 + 128);
  v64 = *(_OWORD *)(v58 + 112);
  v47 = *(_QWORD *)(v58 + 176);
  v48 = swift_bridgeObjectRetain(v47);
  v49 = sub_1000385E0(v48);
  swift_bridgeObjectRelease(v47);
  v50 = objc_msgSend(*(id *)(v58 + 88), "superview");
  v51 = v50;
  if (v50)

  v52 = v51 != 0;
  v53 = sub_10001E610((uint64_t)_swiftEmptyArrayStorage);
  v65[0] = v64;
  v65[1] = v62;
  v66 = v49;
  v67 = v52;
  v68 = v53;
  CurrentValueSubject.send(_:)(v65);
  swift_bridgeObjectRelease(v53);
  return swift_release(v49);
}

uint64_t sub_100036734()
{
  return sub_10003674C((void (*)(void))&dispatch thunk of AnimationPlaybackController.pause());
}

uint64_t sub_100036740()
{
  return sub_10003674C((void (*)(void))&dispatch thunk of AnimationPlaybackController.resume());
}

uint64_t sub_10003674C(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  BOOL v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  _BYTE v34[24];

  v3 = v1;
  swift_beginAccess(v1 + 176, v34, 0, 0);
  v4 = *(_QWORD *)(v1 + 176);
  v5 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v4 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(*(_QWORD *)(v1 + 176));
  v11 = 0;
  while (v8)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v11 << 6);
LABEL_21:
    v17 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v13);
    v18 = v17[1];
    if (v18)
    {
      v19 = *v17;
      swift_retain(*v17);
      v20 = swift_retain(v18);
      if ((AnimationPlaybackController.isValid.getter(v20) & 1) != 0)
        a1();
      swift_release(v18);
      result = swift_release(v19);
    }
  }
  v14 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  if (v14 >= v9)
    goto LABEL_24;
  v15 = *(_QWORD *)(v5 + 8 * v14);
  ++v11;
  if (v15)
    goto LABEL_20;
  v11 = v14 + 1;
  if (v14 + 1 >= v9)
    goto LABEL_24;
  v15 = *(_QWORD *)(v5 + 8 * v11);
  if (v15)
    goto LABEL_20;
  v11 = v14 + 2;
  if (v14 + 2 >= v9)
    goto LABEL_24;
  v15 = *(_QWORD *)(v5 + 8 * v11);
  if (v15)
  {
LABEL_20:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_21;
  }
  v16 = v14 + 3;
  if (v16 < v9)
  {
    v15 = *(_QWORD *)(v5 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        v11 = v16 + 1;
        if (__OFADD__(v16, 1))
          goto LABEL_28;
        if (v11 >= v9)
          goto LABEL_24;
        v15 = *(_QWORD *)(v5 + 8 * v11);
        ++v16;
        if (v15)
          goto LABEL_20;
      }
    }
    v11 = v16;
    goto LABEL_20;
  }
LABEL_24:
  swift_release(v4);
  v28 = *(_OWORD *)(v3 + 128);
  v29 = *(_OWORD *)(v3 + 112);
  v21 = *(_QWORD *)(v3 + 176);
  v22 = swift_bridgeObjectRetain(v21);
  v23 = sub_1000385E0(v22);
  swift_bridgeObjectRelease(v21);
  v24 = objc_msgSend(*(id *)(v3 + 88), "superview");
  v25 = v24;
  if (v24)

  v26 = v25 != 0;
  v27 = sub_10001E610((uint64_t)_swiftEmptyArrayStorage);
  v30[0] = v29;
  v30[1] = v28;
  v31 = v23;
  v32 = v26;
  v33 = v27;
  CurrentValueSubject.send(_:)(v30);
  swift_bridgeObjectRelease(v27);
  return swift_release(v23);
}

uint64_t sub_100036984()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t i;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  BOOL v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  __int128 v51;
  int64_t v52;
  __int128 v53;
  _OWORD v54[2];
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  _QWORD *v58;
  char v59[32];

  v1 = (_QWORD *)(v0 + 176);
  swift_beginAccess(v0 + 176, v59, 0, 0);
  v2 = *(_QWORD *)(v0 + 176);
  v47 = v0;
  v48 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v49 = (unint64_t)(v3 + 63) >> 6;
  v50 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain(v2);
  for (i = 0; ; i = v52)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (i << 6);
      goto LABEL_22;
    }
    v12 = i + 1;
    if (__OFADD__(i, 1))
      goto LABEL_43;
    if (v12 >= v49)
      break;
    v13 = *(_QWORD *)(v48 + 8 * v12);
    ++i;
    if (!v13)
    {
      i = v12 + 1;
      if (v12 + 1 >= v49)
        break;
      v13 = *(_QWORD *)(v48 + 8 * i);
      if (!v13)
      {
        i = v12 + 2;
        if (v12 + 2 >= v49)
          break;
        v13 = *(_QWORD *)(v48 + 8 * i);
        if (!v13)
        {
          v14 = v12 + 3;
          if (v14 >= v49)
            break;
          v13 = *(_QWORD *)(v48 + 8 * v14);
          if (!v13)
          {
            while (1)
            {
              i = v14 + 1;
              if (__OFADD__(v14, 1))
                goto LABEL_44;
              if (i >= v49)
                goto LABEL_38;
              v13 = *(_QWORD *)(v48 + 8 * i);
              ++v14;
              if (v13)
                goto LABEL_21;
            }
          }
          i = v14;
        }
      }
    }
LABEL_21:
    v5 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (i << 6);
LABEL_22:
    v15 = 16 * v11;
    v16 = (uint64_t *)(*(_QWORD *)(v50 + 48) + v15);
    v18 = *v16;
    v17 = v16[1];
    v19 = (uint64_t *)(*(_QWORD *)(v50 + 56) + v15);
    v21 = *v19;
    v20 = v19[1];
    v52 = i;
    if (v20)
    {
      swift_retain_n(v20, 2);
      swift_bridgeObjectRetain(v17);
      v22 = swift_retain(v21);
      if ((AnimationPlaybackController.isValid.getter(v22) & 1) != 0)
        dispatch thunk of AnimationPlaybackController.stop()();
      swift_release(v20);
    }
    else
    {
      swift_bridgeObjectRetain(v17);
      swift_retain(v21);
    }
    swift_beginAccess(v1, v54, 33, 0);
    swift_retain(v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    v58 = (_QWORD *)*v1;
    v24 = v58;
    *v1 = 0x8000000000000000;
    v26 = sub_100024F88(v18, v17);
    v27 = v24[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return result;
    }
    v30 = v25;
    if (v24[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v33 = v58;
        if ((v25 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100045630();
        v33 = v58;
        if ((v30 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100043B88(v29, isUniquelyReferenced_nonNull_native);
      v31 = sub_100024F88(v18, v17);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_45;
      v26 = v31;
      v33 = v58;
      if ((v30 & 1) != 0)
      {
LABEL_4:
        v7 = (_QWORD *)(v33[7] + 16 * v26);
        v8 = v7[1];
        swift_release(*v7);
        swift_release(v8);
        *v7 = v21;
        v7[1] = 0;
        goto LABEL_5;
      }
    }
    v33[(v26 >> 6) + 8] |= 1 << v26;
    v34 = (uint64_t *)(v33[6] + 16 * v26);
    *v34 = v18;
    v34[1] = v17;
    v35 = (_QWORD *)(v33[7] + 16 * v26);
    *v35 = v21;
    v35[1] = 0;
    v36 = v33[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_42;
    v33[2] = v38;
    swift_bridgeObjectRetain(v17);
LABEL_5:
    v9 = *v1;
    *v1 = v33;
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v9);
    swift_endAccess(v54);
    swift_release(v21);
    swift_release(v20);
  }
LABEL_38:
  swift_release(v50);
  v51 = *(_OWORD *)(v47 + 128);
  v53 = *(_OWORD *)(v47 + 112);
  v39 = *(_QWORD *)(v47 + 176);
  v40 = swift_bridgeObjectRetain(v39);
  v41 = sub_1000385E0(v40);
  swift_bridgeObjectRelease(v39);
  v42 = objc_msgSend(*(id *)(v47 + 88), "superview");
  v43 = v42;
  if (v42)

  v44 = v43 != 0;
  v45 = sub_10001E610((uint64_t)_swiftEmptyArrayStorage);
  v54[0] = v53;
  v54[1] = v51;
  v55 = v41;
  v56 = v44;
  v57 = v45;
  CurrentValueSubject.send(_:)(v54);
  swift_bridgeObjectRelease(v45);
  return swift_release(v41);
}

uint64_t sub_100036D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  BOOL v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  _BYTE v32[24];

  v1 = v0;
  swift_beginAccess(v0 + 176, v32, 0, 0);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 176));
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_21:
    v15 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v11);
    v16 = v15[1];
    if (v16)
    {
      v17 = *v15;
      swift_retain(*v15);
      v18 = swift_retain(v16);
      if ((AnimationPlaybackController.isValid.getter(v18) & 1) != 0)
        AnimationPlaybackController.time.setter(0.0);
      swift_release(v16);
      result = swift_release(v17);
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  if (v12 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_20;
  v9 = v12 + 1;
  if (v12 + 1 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_20;
  v9 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_20:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_21;
  }
  v14 = v12 + 3;
  if (v14 < v7)
  {
    v13 = *(_QWORD *)(v3 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_28;
        if (v9 >= v7)
          goto LABEL_24;
        v13 = *(_QWORD *)(v3 + 8 * v9);
        ++v14;
        if (v13)
          goto LABEL_20;
      }
    }
    v9 = v14;
    goto LABEL_20;
  }
LABEL_24:
  swift_release(v2);
  v26 = *(_OWORD *)(v1 + 128);
  v27 = *(_OWORD *)(v1 + 112);
  v19 = *(_QWORD *)(v1 + 176);
  v20 = swift_bridgeObjectRetain(v19);
  v21 = sub_1000385E0(v20);
  swift_bridgeObjectRelease(v19);
  v22 = objc_msgSend(*(id *)(v1 + 88), "superview");
  v23 = v22;
  if (v22)

  v24 = v23 != 0;
  v25 = sub_10001E610((uint64_t)_swiftEmptyArrayStorage);
  v28[0] = v27;
  v28[1] = v26;
  v29 = v21;
  v30 = v24;
  v31 = v25;
  CurrentValueSubject.send(_:)(v28);
  swift_bridgeObjectRelease(v25);
  return swift_release(v21);
}

uint64_t sub_100036FC8()
{
  __n128 *v0;
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t inited;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, _QWORD);
  __n128 v14;
  _BYTE v15[32];
  _BYTE v16[48];

  v1 = v0[1].n128_f32[0];
  v2 = BoundingBox.boundingRadius.getter(v0[7], v0[8]);
  v3 = (float)((float)(v1 * 0.5) * 3.1416) / 180.0;
  if (v1 <= 0.0)
    v3 = 0.0087266;
  v4 = sinf(v3);
  v5 = v0[1].n128_f32[0];
  v6 = v2 / v4;
  v7 = sub_1000131C0((uint64_t *)&unk_100084D50);
  inited = swift_initStackObject(v7, v16);
  *(_OWORD *)(inited + 16) = xmmword_100061910;
  *(_QWORD *)(inited + 32) = 0;
  *(float *)(inited + 40) = v6;
  sub_10003D4CC(inited);
  v14 = v9;
  swift_setDeallocating(inited);
  v10 = type metadata accessor for AnchorEntity(0);
  HasTransform.position.setter(v10, &protocol witness table for Entity, v14);
  v11 = type metadata accessor for PerspectiveCamera(0);
  v12 = (void (*)(_BYTE *, _QWORD))HasPerspectiveCamera.camera.modify(v15, v11, &protocol witness table for PerspectiveCamera);
  PerspectiveCameraComponent.fieldOfViewInDegrees.setter(v5);
  v12(v15, 0);
  return HasTransform.orientation.setter(v10, &protocol witness table for Entity, v0[2]);
}

uint64_t sub_100037108()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
  return v0;
}

uint64_t sub_100037154()
{
  uint64_t v0;

  sub_100037108();
  return swift_deallocClassInstance(v0, 184, 15);
}

uint64_t sub_100037174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100015698(v0 + 16);
  sub_100037D94(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  v1 = v0 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering13ARViewBackend_uuid;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000371F8()
{
  return _s13ARViewBackendCMa(0);
}

uint64_t _s13ARViewBackendCMa(uint64_t a1)
{
  return sub_100012AE4(a1, (uint64_t *)&unk_1000846C0, (uint64_t)&_s13ARViewBackendCMn);
}

uint64_t sub_100037214(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100064190;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_1000641A8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s13ARViewBackendC17ARViewCoordinatorCMa()
{
  return objc_opt_self(_TtCCO20USDRendererExtension15CRLUSDRendering13ARViewBackend17ARViewCoordinator);
}

uint64_t type metadata accessor for CRLARView(uint64_t a1)
{
  return sub_100012AE4(a1, (uint64_t *)&unk_100084950, (uint64_t)&nominal type descriptor for CRLARView);
}

uint64_t sub_1000372D8(uint64_t a1)
{
  const char *v2;

  v2 = "\b";
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_100084940);
}

uint64_t sub_100037320@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtCO20USDRendererExtension15CRLUSDRendering13ARViewBackend_uuid;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100037364(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000846D4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001634C;
  return sub_100034B3C(a1);
}

uint64_t sub_1000373B0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000846DC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100015350;
  return sub_100035AC0(a1);
}

uint64_t sub_1000373FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000846E4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001634C;
  return sub_100035DFC(a1);
}

uint64_t sub_100037448()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1000849E0 + dword_1000849E0);
  v1 = (_QWORD *)swift_task_alloc(unk_1000849E4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100033FBC;
  return v3();
}

uint64_t sub_1000374A0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v4 = sub_1000131C0(&qword_1000849F8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for MainActor(0);
  v12 = a2;
  v13 = static MainActor.shared.getter(v12);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 40) & ~v14;
  v16 = (char *)swift_allocObject(&unk_100074408, v15 + v6, v14 | 7);
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v16 + 4) = v12;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v16[v15], v7, v4);
  v17 = sub_10002E594((uint64_t)v10, (uint64_t)&unk_100084A08, (uint64_t)v16);
  return swift_release(v17);
}

uint64_t sub_100037608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[2] = a4;
  v5[3] = a5;
  v6 = sub_1000131C0(&qword_1000849F8);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[6] = v8;
  v5[7] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v5[8] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000376A4, v10, v11);
}

uint64_t sub_1000376A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_100074430, v8 + v2, v7 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9 + v8, v1, v4);
  dispatch thunk of ARView.snapshot(saveToHDR:completion:)(0, sub_100039638, v9);
  swift_release(v9);
  objc_msgSend(v6, "bounds");
  objc_msgSend(v6, "setNeedsDisplayInRect:");
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037788(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;

  v4 = a1;
  v1 = a1;
  v2 = sub_1000131C0(&qword_1000849F8);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

uint64_t sub_1000377CC()
{
  char *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  BOOL v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  _BYTE v16[24];
  objc_super v17;

  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for CRLARView(0);
  objc_msgSendSuper2(&v17, "didMoveToSuperview");
  result = swift_weakLoadStrong(&v0[qword_100084938]);
  if (result)
  {
    v2 = result;
    v10 = *(_OWORD *)(result + 112);
    v11 = *(_OWORD *)(result + 128);
    swift_beginAccess(result + 176, v16, 0, 0);
    v3 = *(_QWORD *)(v2 + 176);
    v4 = swift_bridgeObjectRetain(v3);
    v5 = sub_1000385E0(v4);
    swift_bridgeObjectRelease(v3);
    v6 = objc_msgSend(*(id *)(v2 + 88), "superview");
    v7 = v6;
    if (v6)

    v8 = v7 != 0;
    v9 = sub_10001E610((uint64_t)_swiftEmptyArrayStorage);
    v12[0] = v10;
    v12[1] = v11;
    v13 = v5;
    v14 = v8;
    v15 = v9;
    CurrentValueSubject.send(_:)(v12);
    swift_release(v5);
    swift_bridgeObjectRelease(v9);
    return swift_release(v2);
  }
  return result;
}

void sub_1000378E8(void *a1)
{
  id v1;

  v1 = a1;
  sub_1000377CC();

}

id sub_10003791C(char *a1, uint64_t a2, uint64_t a3)
{
  objc_super v6;

  swift_weakInit(&a1[qword_100084938], 0);
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for CRLARView(0);
  return objc_msgSendSuper2(&v6, "initWithCoder:", a3);
}

id sub_100037978(char *a1, double a2, double a3, double a4, double a5)
{
  objc_super v11;

  swift_weakInit(&a1[qword_100084938], 0);
  v11.receiver = a1;
  v11.super_class = (Class)type metadata accessor for CRLARView(0);
  return objc_msgSendSuper2(&v11, "initWithFrame:", a2, a3, a4, a5);
}

uint64_t sub_1000379FC(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  objc_class *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v13 = type metadata accessor for ARView.CameraMode(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (char *)objc_allocWithZone(v6);
  swift_weakInit(&v17[qword_100084938], 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v18 = ARView.init(frame:cameraMode:automaticallyConfigureSession:)(v16, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v18;
}

uint64_t sub_100037AF0()
{
  uint64_t v0;

  return swift_weakDestroy(v0 + qword_100084938);
}

id sub_100037B00()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLARView(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100037B34(uint64_t a1)
{
  return swift_weakDestroy(a1 + qword_100084938);
}

uint64_t sub_100037B44()
{
  return type metadata accessor for CRLARView(0);
}

uint64_t *_s14descr1000747C9C11ClientSceneC22InternalAnimationStateOwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t _s14descr1000747C9C11ClientSceneC15ImageBasedLightVwxx(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *_s14descr1000747C9C11ClientSceneC22InternalAnimationStateOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *_s14descr1000747C9C11ClientSceneC22InternalAnimationStateOwtk(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *_s14descr1000747C9C11ClientSceneC22InternalAnimationStateOwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t _s14descr1000747C9C11ClientSceneC22InternalAnimationStateOwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t _s14descr1000747C9C11ClientSceneC22InternalAnimationStateOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_100037C98(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100037CB0(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *_s13ARViewBackendC17ARViewCoordinatorC22InternalAnimationStateOMa()
{
  return &_s13ARViewBackendC17ARViewCoordinatorC22InternalAnimationStateON;
}

uint64_t sub_100037CE0(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;

  v6 = a4 >> 62;
  if (a4 >> 62 == 2)
    return sub_100014E74(result, a2, a3);
  if ((_DWORD)v6 == 1)
  {
    swift_retain(result);
    swift_retain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  else if (!(_DWORD)v6)
  {
    return swift_retain(result);
  }
  return result;
}

uint64_t _s13ARViewBackendC12BackendStateOwxx(uint64_t a1)
{
  return sub_100037D94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_100037D94(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;

  v6 = a4 >> 62;
  if (a4 >> 62 == 2)
    return sub_100014C2C(result, a2, a3);
  if ((_DWORD)v6 == 1)
  {
    swift_release(result);
    swift_release(a2);
    return swift_bridgeObjectRelease(a3);
  }
  else if (!(_DWORD)v6)
  {
    return swift_release(result);
  }
  return result;
}

uint64_t *_s13ARViewBackendC12BackendStateOwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  sub_100037CE0(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t *_s13ARViewBackendC12BackendStateOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v17 = a2[9];
  v18 = a2[10];
  sub_100037CE0(*a2, v4, v5, v6);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v17;
  a1[10] = v18;
  sub_100037D94(v12, v13, v14, v15);
  return a1;
}

uint64_t _s13ARViewBackendC12BackendStateOwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  sub_100037D94(v4, v6, v5, v7);
  return a1;
}

uint64_t _s13ARViewBackendC12BackendStateOwet(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 24);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double _s13ARViewBackendC12BackendStateOwst(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_QWORD *)(a1 + 80) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1000380B4(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(_QWORD *)(result + 24) = a2 << 62;
  }
  else
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 3);
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 24) = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *_s13ARViewBackendC12BackendStateOMa()
{
  return &_s13ARViewBackendC12BackendStateON;
}

ValueMetadata *_s13ARViewBackendC5FlagsVMa()
{
  return &_s13ARViewBackendC5FlagsVN;
}

unint64_t sub_100038110()
{
  unint64_t result;

  result = qword_1000849A0;
  if (!qword_1000849A0)
  {
    result = swift_getWitnessTable(&unk_1000642BC, &_s13ARViewBackendC5FlagsVN);
    atomic_store(result, (unint64_t *)&qword_1000849A0);
  }
  return result;
}

unint64_t sub_100038158()
{
  unint64_t result;

  result = qword_1000849A8;
  if (!qword_1000849A8)
  {
    result = swift_getWitnessTable(&unk_10006428C, &_s13ARViewBackendC5FlagsVN);
    atomic_store(result, (unint64_t *)&qword_1000849A8);
  }
  return result;
}

unint64_t sub_1000381A0()
{
  unint64_t result;

  result = qword_1000849B0;
  if (!qword_1000849B0)
  {
    result = swift_getWitnessTable(&unk_1000642E4, &_s13ARViewBackendC5FlagsVN);
    atomic_store(result, (unint64_t *)&qword_1000849B0);
  }
  return result;
}

unint64_t sub_1000381E8()
{
  unint64_t result;

  result = qword_1000849B8;
  if (!qword_1000849B8)
  {
    result = swift_getWitnessTable(&unk_10006431C, &_s13ARViewBackendC5FlagsVN);
    atomic_store(result, (unint64_t *)&qword_1000849B8);
  }
  return result;
}

uint64_t sub_10003822C(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *i;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (!a1[2])
    return swift_bridgeObjectRelease(a1);
  v45 = a1[2];
  v6 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  swift_bridgeObjectRetain(a1);
  v49 = v6;
  v50 = v5;
  v9 = (_QWORD *)*a3;
  swift_retain(v8);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  v11 = sub_100024F88(v6, v5);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_100045630();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v6;
    v22[1] = v5;
    v23 = (_QWORD *)(v21[7] + 16 * v11);
    *v23 = v7;
    v23[1] = v8;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v26;
    v27 = v45 - 1;
    if (v45 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 11; ; i += 4)
    {
      v5 = *(i - 2);
      v7 = *(i - 1);
      v8 = *i;
      v49 = *(i - 3);
      v29 = v49;
      v50 = v5;
      v30 = (_QWORD *)*a3;
      swift_retain(v8);
      swift_bridgeObjectRetain(v5);
      swift_retain(v7);
      v31 = sub_100024F88(v49, v5);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_100043B88(v35, 1);
        v31 = sub_100024F88(v49, v5);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v29;
      v39[1] = v5;
      v40 = (_QWORD *)(v38[7] + 16 * v31);
      *v40 = v7;
      v40[1] = v8;
      v41 = v38[2];
      v25 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v25)
        goto LABEL_24;
      v38[2] = v42;
      if (!--v27)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100043B88(v14, a2 & 1);
  v16 = sub_100024F88(v6, v5);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v51 = v19;
    swift_errorRetain(v19);
    v20 = sub_1000131C0(&qword_100084D00);
    if ((swift_dynamicCast(v20, &v51, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v5);
      swift_release(v8);
      swift_release(v7);
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v51);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x800000010005F3D0;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)(&v49, &v47, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v47, v48, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000385E0(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int64_t v45;

  sub_1000131C0((uint64_t *)&unk_100084D70);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v43 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v40 = v6;
  v41 = (unint64_t)(v8 + 63) >> 6;
  v42 = result + 64;
  v39 = (_QWORD *)result;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(_QWORD *)(v43 + 56);
    v17 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(v16 + 16 * i + 8);
    if (v20)
    {
      v45 = v4;
      v21 = *(_QWORD *)(v16 + 16 * i);
      swift_bridgeObjectRetain(v19);
      swift_retain(v21);
      v22 = swift_retain(v20);
      v44 = dispatch thunk of AnimationPlaybackController.isPaused.getter(v22);
      v23 = dispatch thunk of AnimationPlaybackController.isComplete.getter();
      v24 = AnimationPlaybackController.isPlaying.getter();
      v25 = v18;
      v26 = AnimationPlaybackController.isStopped.getter();
      v27 = AnimationPlaybackController.speed.getter();
      swift_release(v20);
      v28 = v21;
      v4 = v45;
      result = swift_release(v28);
      v3 = v39;
      v29 = 256;
      if ((v23 & 1) == 0)
        v29 = 0;
      v30 = v29 & 0xFFFFFFFFFFFFFFFELL | v44 & 1;
      v31 = 0x10000;
      if ((v24 & 1) == 0)
        v31 = 0;
      v32 = (v26 & 1) == 0;
      v18 = v25;
      v33 = 0x1000000;
      if (v32)
        v33 = 0;
      v34 = v30 | v31 | v33 | ((unint64_t)LODWORD(v27) << 32);
    }
    else
    {
      result = swift_bridgeObjectRetain(v19);
      v34 = 2;
    }
    *(_QWORD *)(v42 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v35 = (_QWORD *)(v3[6] + 16 * i);
    *v35 = v18;
    v35[1] = v19;
    *(_QWORD *)(v3[7] + 8 * i) = v34;
    v36 = v3[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v3[2] = v38;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_34;
    if (v13 >= v41)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v40 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v41)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v40 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v41)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v40 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v41)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v40 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v41)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v40 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100038898(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  objc_class *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t started;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t (*v53)(__int128 *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  unint64_t v86;
  uint64_t result;
  uint64_t v88;
  objc_class *v89;
  __n128 v90;
  __int128 v91;
  _QWORD *v92;
  __int128 v93;
  __n128 v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v97;
  uint64_t v98;

  v7 = v6;
  v14 = type metadata accessor for ARView.Environment.Background(0);
  __chkstk_darwin(v14);
  *(_QWORD *)&v91 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ARView.CameraMode(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v7 + 96) = a1;
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v7 + 64) = v20;
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(a2 + 64);
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 32) = v21;
  v22 = type metadata accessor for AnchorEntity(0);
  sub_10003D4CC((uint64_t)&off_100071D90);
  v90 = v23;
  v24 = swift_retain(a1);
  v25 = AnchorEntity.__allocating_init(world:)(v24, v90);
  *(_QWORD *)(v7 + 144) = v25;
  v26 = type metadata accessor for Entity(0);
  *(double *)&v27 = HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)(1, 0, 0, v26, &protocol witness table for Entity);
  *(_OWORD *)(v7 + 112) = v27;
  *(_OWORD *)(v7 + 128) = v28;
  v29 = BoundingBox.center.getter();
  v30.n128_u64[0] = (unint64_t)vsub_f32(0, (float32x2_t)v29.n128_u64[0]);
  v30.n128_f32[2] = 0.0 - v29.n128_f32[2];
  v30.n128_u32[3] = 0;
  v31 = v7;
  HasTransform.position.setter(v26, &protocol witness table for Entity, v30);
  swift_retain(v25);
  HasHierarchy.addChild(_:preservingWorldTransform:)(a1, 0, v22, &protocol witness table for Entity);
  swift_release(v25);
  v32 = type metadata accessor for PerspectiveCamera(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v33 = PerspectiveCamera.init()();
  *(_QWORD *)(v7 + 152) = v33;
  v34 = sub_10003D4CC((uint64_t)&off_100071DC0);
  v36 = AnchorEntity.__allocating_init(world:)(v34, v35);
  *(_QWORD *)(v7 + 160) = v36;
  swift_retain(v36);
  v37 = swift_retain(v33);
  HasHierarchy.addChild(_:preservingWorldTransform:)(v37, 0, v22, &protocol witness table for Entity);
  swift_release(v33);
  swift_release(v36);
  v38 = (objc_class *)type metadata accessor for CRLARView(0);
  *(_QWORD *)(v31 + 88) = objc_msgSend(objc_allocWithZone(v38), "initWithFrame:", a3, a4, a5, a6);
  v39 = ((uint64_t (*)(void))dispatch thunk of ARView.scene.getter)();
  v40 = dispatch thunk of Scene.__interactionService.getter();
  swift_release(v39);
  v41 = type metadata accessor for __RKEntityInteractionManager(0);
  if (swift_dynamicCastClass(v40, v41))
  {
    dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.setter(0);
    started = dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.setter(0);
    dispatch thunk of __RKEntityInteractionManager.__removeAllInteractions()(started);
  }
  swift_unknownObjectRelease(v40);
  v43 = *(void **)(v31 + 88);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for ARView.CameraMode.nonAR(_:), v16);
  ARView.cameraMode.setter(v19);
  v44 = dispatch thunk of ARView.scene.getter(objc_msgSend(v43, "setUserInteractionEnabled:", 0));
  v45 = *(_QWORD *)(v31 + 144);
  v46 = swift_retain(v45);
  dispatch thunk of Scene.addAnchor(_:)(v46, &protocol witness table for AnchorEntity);
  swift_release(v45);
  v47 = swift_release(v44);
  v48 = dispatch thunk of ARView.scene.getter(v47);
  v49 = *(_QWORD *)(v31 + 160);
  v50 = swift_retain(v49);
  dispatch thunk of Scene.addAnchor(_:)(v50, &protocol witness table for AnchorEntity);
  swift_release(v49);
  swift_release(v48);
  v51 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v52 = v91;
  static ARView.Environment.Background.color(_:)();

  v53 = (uint64_t (*)(__int128 *, _QWORD))dispatch thunk of ARView.environment.modify(&v93);
  ARView.Environment.background.setter(v52);
  v54 = v53(&v93, 0);
  v55 = Entity.availableAnimations.getter(v54);
  v56 = v55;
  if ((unint64_t)v55 >> 62)
  {
    if (v55 >= 0)
      v55 &= 0xFFFFFFFFFFFFFF8uLL;
    v57 = _CocoaArrayWrapper.endIndex.getter(v55);
    if (v57)
    {
LABEL_5:
      v92 = _swiftEmptyArrayStorage;
      sub_10003CA3C(0, v57 & ~(v57 >> 63), 0);
      if (v57 < 0)
      {
        __break(1u);
        result = swift_unexpectedError(v56, "Swift/Dictionary.swift", 22, 1, 489);
        __break(1u);
        return result;
      }
      v89 = v38;
      v90.n128_u64[0] = v31;
      v58 = 0;
      v59 = v92;
      *(_QWORD *)&v91 = v56 & 0xC000000000000001;
      v60 = v56;
      v61 = v57;
      do
      {
        if ((_QWORD)v91)
        {
          v62 = specialized _ArrayBuffer._getElementSlowPath(_:)(v58, v56);
        }
        else
        {
          v62 = *(_QWORD *)(v56 + 8 * v58 + 32);
          swift_retain(v62);
        }
        v98 = ObjectIdentifier.hashValue.getter(v62);
        *(_QWORD *)&v93 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        *((_QWORD *)&v93 + 1) = v63;
        v64._countAndFlagsBits = 47;
        v64._object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        v65 = AnimationResource.name.getter();
        if (v66)
        {
          v67 = v66;
        }
        else
        {
          v65 = 0x64656D616E6E75;
          v67 = 0xE700000000000000;
        }
        v68 = v67;
        String.append(_:)(*(Swift::String *)&v65);
        swift_bridgeObjectRelease(v67);
        v69 = v93;
        v92 = v59;
        v71 = v59[2];
        v70 = v59[3];
        if (v71 >= v70 >> 1)
        {
          sub_10003CA3C((_QWORD *)(v70 > 1), v71 + 1, 1);
          v59 = v92;
        }
        ++v58;
        v59[2] = v71 + 1;
        v72 = &v59[4 * v71];
        *((_OWORD *)v72 + 2) = v69;
        v72[6] = v62;
        v72[7] = 0;
        v56 = v60;
      }
      while (v61 != v58);
      swift_bridgeObjectRelease(v60);
      v31 = v90.n128_u64[0];
      v38 = v89;
      v73 = v59[2];
      if (v73)
        goto LABEL_17;
LABEL_22:
      v74 = &_swiftEmptyDictionarySingleton;
      goto LABEL_23;
    }
  }
  else
  {
    v57 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v57)
      goto LABEL_5;
  }
  swift_bridgeObjectRelease(v56);
  v59 = _swiftEmptyArrayStorage;
  v73 = _swiftEmptyArrayStorage[2];
  if (!v73)
    goto LABEL_22;
LABEL_17:
  sub_1000131C0(&qword_100084A28);
  v74 = (void *)static _DictionaryStorage.allocate(capacity:)(v73);
LABEL_23:
  *(_QWORD *)&v93 = v74;
  v75 = (_QWORD *)swift_bridgeObjectRetain(v59);
  sub_10003822C(v75, 1, &v93);
  swift_bridgeObjectRelease(v59);
  *(_QWORD *)(v31 + 176) = v93;
  v76 = *(_OWORD *)(v31 + 112);
  v90 = *(__n128 *)(v31 + 128);
  v91 = v76;
  v77 = sub_10001E730((uint64_t)_swiftEmptyArrayStorage);
  v78 = sub_10001E610((uint64_t)_swiftEmptyArrayStorage);
  v93 = v91;
  v94 = v90;
  v95 = v77;
  v96 = 0;
  v97 = v78;
  v79 = sub_1000131C0(&qword_100084A18);
  swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
  *(_QWORD *)(v31 + 168) = CurrentValueSubject.init(_:)(&v93);
  v80 = swift_dynamicCastClass(*(_QWORD *)(v31 + 88), v38);
  if (v80)
    swift_weakAssign(v80 + qword_100084938, v31);
  sub_100036FC8();
  swift_beginAccess(v31 + 176, &v92, 0, 0);
  v81 = *(_QWORD *)(v31 + 176);
  v82 = swift_bridgeObjectRetain(v81);
  v83 = sub_1000385E0(v82);
  swift_bridgeObjectRelease(v81);
  v84 = objc_msgSend(*(id *)(v31 + 88), "superview");
  v85 = v84;
  if (v84)

  v86 = sub_10001E610((uint64_t)_swiftEmptyArrayStorage);
  v93 = v91;
  v94 = v90;
  v95 = v83;
  v96 = v85 != 0;
  v97 = v86;
  CurrentValueSubject.send(_:)(&v93);
  swift_release(v83);
  swift_bridgeObjectRelease(v86);
  return v31;
}

uint64_t sub_100038FBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[4] = v2;
  v1[5] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[6] = v3;
  v1[7] = v4;
  return swift_task_switch(sub_10003902C, v3, v4);
}

uint64_t sub_10003902C()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  CGRect v13;
  CGRect v14;

  objc_msgSend(*(id *)(v0 + 24), "frame");
  if (CGRectIsEmpty(v13))
  {
    v1 = objc_msgSend(*(id *)(v0 + 24), "superview");
    if (v1)
    {
      v2 = v1;
      v3 = *(void **)(v0 + 24);
      objc_msgSend(v1, "setNeedsLayout");
      objc_msgSend(v2, "layoutIfNeeded");
      objc_msgSend(v3, "frame");
      if (CGRectIsEmpty(v14))
        objc_msgSend(*(id *)(v0 + 24), "setFrame:", 0.0, 0.0, 300.0, 300.0);

    }
  }
  v4 = objc_msgSend(*(id *)(v0 + 24), "frame");
  if (v5 != v6)
  {
    if (v5 <= v6)
      v5 = v6;
    v4 = objc_msgSend(*(id *)(v0 + 24), "setFrame:", 0.0, 0.0, v5, v5);
  }
  v7 = *(_QWORD *)(v0 + 24);
  v8 = static MainActor.shared.getter(v4);
  *(_QWORD *)(v0 + 64) = v8;
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 72) = v9;
  *(_QWORD *)(v9 + 16) = v7;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v10;
  v11 = sub_1000131C0(&qword_1000849F0);
  *v10 = v0;
  v10[1] = sub_1000391B8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, v8, &protocol witness table for MainActor, 0xD000000000000012, 0x800000010005F2F0, sub_1000394B4, v9, v11);
}

uint64_t sub_1000391B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100039220, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_100039220()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_release(*(_QWORD *)(v0 + 40));
  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(v1, "CGImage");

  return (*(uint64_t (**)(id))(v0 + 8))(v2);
}

uint64_t sub_10003927C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_1000392E8, v3, v4);
}

uint64_t sub_1000392E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v1 + 72) >> 62 == 1)
  {
    v2 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v0 + 48) = v2;
    v3 = *(void **)(v2 + 88);
    *(_QWORD *)(v0 + 56) = v3;
    v4 = unk_1000849EC;
    v8 = (uint64_t (*)(uint64_t))((char *)&dword_1000849E8 + dword_1000849E8);
    v5 = v3;
    swift_retain(v2);
    v6 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 64) = v6;
    *v6 = v0;
    v6[1] = sub_1000393AC;
    return v8((uint64_t)v5);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 24));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_1000393AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 64);
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(_QWORD *)(v4 + 40);
    v8 = sub_10003946C;
  }
  else
  {

    *(_QWORD *)(v4 + 80) = a1;
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(_QWORD *)(v4 + 40);
    v8 = sub_100039428;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100039428()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

uint64_t sub_10003946C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);

  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000394B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000374A0(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000394BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000131C0(&qword_1000849F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003953C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000131C0(&qword_1000849F8) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_100084A04);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001634C;
  return sub_100037608(a1, v5, v6, v7, v8);
}

uint64_t sub_1000395D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000131C0(&qword_1000849F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100039638(void *a1)
{
  sub_1000131C0(&qword_1000849F8);
  return sub_100037788(a1);
}

uint64_t sub_10003967C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1000396BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 0xF;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100014BEC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_QWORD *)(v0 + v6 + 16), *(_QWORD *)(v0 + v6 + 24), *(_QWORD *)(v0 + v6 + 32), *(_QWORD *)(v0 + v6 + 40), *(_QWORD *)(v0 + v6 + 48));
  return swift_deallocObject(v0, v6 + 56, v5);
}

uint64_t sub_100039764(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (uint64_t)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_1000836BC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100015350;
  return sub_1000122C0(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100039810()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100039834(uint64_t a1)
{
  uint64_t v1;

  return sub_100035A6C(a1, v1);
}

unint64_t sub_10003983C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100084A20;
  if (!qword_100084A20)
  {
    v1 = sub_1000134AC(&qword_100084A18);
    result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100084A20);
  }
  return result;
}

uint64_t sub_100039888(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000131C0(&qword_100084638);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000398CC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  void *v33;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for __VaListBuilder(0);
  v7 = (_QWORD *)swift_allocObject(v6, 48, 7);
  v7[2] = 8;
  v7[3] = 0;
  v8 = v7 + 3;
  v7[4] = 0;
  v7[5] = 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_25:
    v28 = __VaListBuilder.va_list()();
    StaticString.description.getter(a3, a4, a5);
    v30 = v29;
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    v32 = objc_msgSend((id)objc_opt_self(NSString), "crl_redactedStringWithFormat:arguments:", v31, v28);

    v33 = *a2;
    *a2 = v32;
    swift_release(v7);

    return;
  }
  v10 = 0;
  v11 = a1 + 32;
  while (1)
  {
    sub_10001E5C8(v11 + 40 * v10, (uint64_t)v38);
    v12 = v39;
    v13 = v40;
    sub_100015BEC(v38, v39);
    v14 = dispatch thunk of CVarArg._cVarArgEncoding.getter(v12, v13);
    v15 = *v8;
    v16 = *(_QWORD *)(v14 + 16);
    v17 = __OFADD__(*v8, v16);
    v18 = *v8 + v16;
    if (v17)
      break;
    v19 = v14;
    v20 = v7[4];
    if (v20 >= v18)
      goto LABEL_18;
    if (v20 + 0x4000000000000000 < 0)
      goto LABEL_28;
    v21 = (char *)v7[5];
    if (2 * v20 > v18)
      v18 = 2 * v20;
    v7[4] = v18;
    if ((unint64_t)(v18 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_29;
    v22 = (char *)swift_slowAlloc(8 * v18, 7);
    v7[5] = v22;
    if (v21)
    {
      if (v22 != v21 || v22 >= &v21[8 * v15])
        memmove(v22, v21, 8 * v15);
      __VaListBuilder.deallocStorage(wordCount:storage:)(v20, v21);
LABEL_18:
      v22 = (char *)v7[5];
    }
    if (!v22)
      goto LABEL_30;
    v24 = *(_QWORD *)(v19 + 16);
    if (v24)
    {
      v25 = (uint64_t *)(v19 + 32);
      v26 = *v8;
      while (1)
      {
        v27 = *v25++;
        *(_QWORD *)&v22[8 * v26] = v27;
        v26 = *v8 + 1;
        if (__OFADD__(*v8, 1))
          break;
        *v8 = v26;
        if (!--v24)
          goto LABEL_3;
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v10;
    swift_bridgeObjectRelease(v19);
    sub_100015C54(v38);
    if (v10 == v9)
      goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_100039B00(const mach_header_64 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE v45[232];
  _BYTE v46[24];
  id v47;

  v42 = objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "_atomicIncrementAssertCount");
  v47 = objc_msgSend(objc_allocWithZone((Class)NSString), "init");
  sub_1000398CC(a12, &v47, (uint64_t)a9, a10, a11);
  StaticString.description.getter(a2, a3, a4);
  v19 = v18;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  StaticString.description.getter(a5, a6, a7);
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  v24 = objc_msgSend(v23, "lastPathComponent");

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  if (qword_100082EF8 != -1)
    swift_once(&qword_100082EF8, sub_1000170D4);
  swift_beginAccess(&static OS_os_log.crlAssert, v46, 0, 0);
  v28 = (void *)static OS_os_log.crlAssert;
  v29 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  inited = swift_initStackObject(v29, v45);
  *(_OWORD *)(inited + 16) = xmmword_1000618F0;
  *(_QWORD *)(inited + 56) = &type metadata for Int32;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int32;
  *(_DWORD *)(inited + 32) = v42;
  v31 = sub_100039DD0();
  *(_QWORD *)(inited + 96) = v31;
  v32 = sub_100039E0C();
  *(_QWORD *)(inited + 104) = v32;
  *(_QWORD *)(inited + 72) = v20;
  *(_QWORD *)(inited + 136) = &type metadata for String;
  v33 = sub_1000340E8();
  *(_QWORD *)(inited + 112) = v25;
  *(_QWORD *)(inited + 120) = v27;
  *(_QWORD *)(inited + 176) = &type metadata for UInt;
  *(_QWORD *)(inited + 184) = &protocol witness table for UInt;
  *(_QWORD *)(inited + 144) = v33;
  *(_QWORD *)(inited + 152) = a8;
  v34 = v47;
  *(_QWORD *)(inited + 216) = v31;
  *(_QWORD *)(inited + 224) = v32;
  *(_QWORD *)(inited + 192) = v34;
  v35 = v28;
  v36 = v20;
  v37 = v34;
  v38 = static os_log_type_t.error.getter();
  sub_10001D7E0((uint64_t)v35, a1, v38, "#Assert *** Assertion failure #%d: %{public}@ %{public}@:%lu %{public}@", 71, 2, inited);
  swift_setDeallocating(inited);
  v39 = sub_1000131C0(&qword_1000852E0);
  swift_arrayDestroy(inited + 32, 5, v39);

  v40 = (id)static OS_os_log.crlAssert;
  v41 = static os_log_type_t.error.getter();
  sub_10001D7E0((uint64_t)v40, a1, v41, a9, a10, a11, a12);

}

unint64_t sub_100039DD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100084A30;
  if (!qword_100084A30)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100084A30);
  }
  return result;
}

unint64_t sub_100039E0C()
{
  unint64_t result;
  unint64_t v1;

  result = qword_100084A38;
  if (!qword_100084A38)
  {
    v1 = sub_100039DD0();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100084A38);
  }
  return result;
}

_QWORD *sub_100039E54(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_10003CA68(0, v1, 0);
  result = (_QWORD *)sub_10003D444(a1);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = a1 + 64;
  v21 = v1;
  v22 = v4;
  v23 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    v10 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v4)
      goto LABEL_24;
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v5);
    v12 = v11[1];
    v24 = *v11;
    v14 = _swiftEmptyArrayStorage[2];
    v13 = _swiftEmptyArrayStorage[3];
    result = (_QWORD *)swift_bridgeObjectRetain(v12);
    if (v14 >= v13 >> 1)
      result = sub_10003CA68((_QWORD *)(v13 > 1), v14 + 1, 1);
    _swiftEmptyArrayStorage[2] = v14 + 1;
    v15 = &_swiftEmptyArrayStorage[4 * v14];
    v15[4] = 0x617453656B617761;
    v15[5] = 0xEA00000000006574;
    v15[6] = v24;
    v15[7] = v12;
    v8 = 1 << *(_BYTE *)(a1 + 32);
    if (v5 >= v8)
      goto LABEL_25;
    v7 = a1 + 64;
    v16 = *(_QWORD *)(v23 + 8 * v10);
    if ((v16 & (1 << v5)) == 0)
      goto LABEL_26;
    v4 = v22;
    if (*(_DWORD *)(a1 + 36) != v22)
      goto LABEL_27;
    v17 = v16 & (-2 << (v5 & 0x3F));
    if (v17)
    {
      v8 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v9 = v21;
    }
    else
    {
      v18 = v10 + 1;
      v19 = (unint64_t)(v8 + 63) >> 6;
      v9 = v21;
      if (v10 + 1 < v19)
      {
        v20 = *(_QWORD *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v8 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v10)
          {
            v20 = *(_QWORD *)(a1 + 80 + 8 * v10++);
            if (v20)
            {
              v18 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    v5 = v8;
    if (v6 == v9)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

double sub_10003A07C()
{
  double result;

  *(_QWORD *)&result = 1060439283;
  xmmword_100084A40 = xmmword_100064430;
  return result;
}

uint64_t sub_10003A090(char a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 72) = v2;
  *(_BYTE *)(v3 + 112) = a1;
  *(double *)(v3 + 64) = a2;
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 80) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 88) = v5;
  *(_QWORD *)(v3 + 96) = v6;
  return swift_task_switch(sub_10003A104, v5, v6);
}

uint64_t sub_10003A104()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  char v36;
  char v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v1 = v0 + 40;
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 72)
                + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations);
  swift_beginAccess(v2, v0 + 16, 0, 0);
  v45 = *v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(*v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(*v2 + 64);
  v46 = (unint64_t)(63 - v4) >> 6;
  v48 = *v2;
  result = swift_bridgeObjectRetain(*v2);
  v7 = 0;
  v44 = v1;
  while (1)
  {
    if (v5)
    {
      v12 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v13 = v12 | (v7 << 6);
      goto LABEL_23;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_43;
    if (v14 >= v46)
    {
LABEL_40:
      swift_release(v48);
      v43 = (_QWORD *)swift_task_alloc(dword_100084AC4);
      *(_QWORD *)(v47 + 104) = v43;
      *v43 = v47;
      v43[1] = sub_10003A564;
      return sub_10003B6CC();
    }
    v15 = *(_QWORD *)(v45 + 8 * v14);
    ++v7;
    if (!v15)
    {
      v7 = v14 + 1;
      if (v14 + 1 >= v46)
        goto LABEL_40;
      v15 = *(_QWORD *)(v45 + 8 * v7);
      if (!v15)
      {
        v7 = v14 + 2;
        if (v14 + 2 >= v46)
          goto LABEL_40;
        v15 = *(_QWORD *)(v45 + 8 * v7);
        if (!v15)
          break;
      }
    }
LABEL_22:
    v5 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_23:
    v17 = 16 * v13;
    v18 = (uint64_t *)(*(_QWORD *)(v48 + 48) + v17);
    v19 = v18[1];
    v51 = *v18;
    v20 = (uint64_t *)(*(_QWORD *)(v48 + 56) + v17);
    v11 = *v20;
    v21 = v20[1];
    if (!v21)
    {
      swift_bridgeObjectRetain(v19);
      v23 = swift_retain(v11);
LABEL_29:
      v49 = v5;
      v50 = v7;
      v25 = *(unsigned __int8 *)(v47 + 112);
      v26 = *(double *)(v47 + 64);
      v27 = AnimationResource.repeat(duration:)(v23, INFINITY);
      v28 = Entity.playAnimation(_:transitionDuration:startsPaused:)(v27, v25, v26);
      swift_beginAccess(v2, v1, 33, 0);
      swift_retain(v11);
      swift_retain(v28);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v30 = (_QWORD *)*v2;
      v52 = (_QWORD *)*v2;
      v31 = v2;
      *v2 = 0x8000000000000000;
      v33 = sub_100024F88(v51, v19);
      v34 = v30[2];
      v35 = (v32 & 1) == 0;
      result = v34 + v35;
      if (__OFADD__(v34, v35))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      v36 = v32;
      if (v30[3] < result)
      {
        sub_100043EB8(result, isUniquelyReferenced_nonNull_native);
        v30 = v52;
        result = sub_100024F88(v51, v19);
        if ((v36 & 1) != (v37 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        v33 = result;
        if ((v36 & 1) == 0)
          goto LABEL_36;
LABEL_4:
        v8 = (_QWORD *)(v30[7] + 16 * v33);
        v9 = v8[1];
        swift_release(*v8);
        swift_release(v9);
        *v8 = v11;
        v8[1] = v28;
LABEL_5:
        v1 = v44;
        v2 = v31;
        v5 = v49;
        v7 = v50;
        v10 = *v2;
        *v2 = v30;
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v19);
        swift_endAccess(v44);
        swift_release(v28);
        swift_release(v27);
        swift_release(v11);
        v11 = v21;
        goto LABEL_6;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v32 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        result = (uint64_t)sub_1000457F4();
        v30 = v52;
        if ((v36 & 1) != 0)
          goto LABEL_4;
      }
LABEL_36:
      v30[(v33 >> 6) + 8] |= 1 << v33;
      v38 = (uint64_t *)(v30[6] + 16 * v33);
      *v38 = v51;
      v38[1] = v19;
      v39 = (_QWORD *)(v30[7] + 16 * v33);
      *v39 = v11;
      v39[1] = v28;
      v40 = v30[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_44;
      v30[2] = v42;
      swift_bridgeObjectRetain(v19);
      goto LABEL_5;
    }
    swift_bridgeObjectRetain(v19);
    swift_retain(v11);
    v22 = swift_retain(v21);
    v23 = AnimationPlaybackController.isValid.getter(v22);
    if ((v23 & 1) == 0)
      goto LABEL_29;
    v24 = swift_bridgeObjectRelease(v19);
    if ((dispatch thunk of AnimationPlaybackController.isPaused.getter(v24) & 1) != 0)
      dispatch thunk of AnimationPlaybackController.resume()();
    swift_release(v21);
LABEL_6:
    result = swift_release(v11);
  }
  v16 = v14 + 3;
  if (v16 >= v46)
    goto LABEL_40;
  v15 = *(_QWORD *)(v45 + 8 * v16);
  if (v15)
  {
    v7 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v46)
      goto LABEL_40;
    v15 = *(_QWORD *)(v45 + 8 * v7);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_10003A564()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  return swift_task_switch(sub_10003A5B0, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_10003A5B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A5E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_10003A64C, v3, v4);
}

uint64_t sub_10003A64C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 40)
                + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = *v1;
  v3 = *v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(*v1 + 64);
  v7 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(*v1);
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_21:
    v15 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v11);
    v16 = v15[1];
    if (v16)
    {
      v17 = *v15;
      swift_retain(*v15);
      v18 = swift_retain(v16);
      if ((AnimationPlaybackController.isValid.getter(v18) & 1) != 0)
        dispatch thunk of AnimationPlaybackController.pause()();
      swift_release(v17);
      result = swift_release(v16);
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_20;
  v9 = v12 + 1;
  if (v12 + 1 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_20;
  v9 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_20:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_21;
  }
  v14 = v12 + 3;
  if (v14 >= v7)
  {
LABEL_24:
    swift_release(v2);
    v19 = (_QWORD *)swift_task_alloc(dword_100084AC4);
    *(_QWORD *)(v0 + 72) = v19;
    *v19 = v0;
    v19[1] = sub_10003A818;
    return sub_10003B6CC();
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_24;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10003A818()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  return swift_task_switch(sub_10003A864, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10003A864()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A894()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_10003A900, v3, v4);
}

uint64_t sub_10003A900()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 40)
                + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = *v1;
  v3 = *v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(*v1 + 64);
  v7 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(*v1);
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_21:
    v15 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v11);
    v16 = v15[1];
    if (v16)
    {
      v17 = *v15;
      swift_retain(*v15);
      v18 = swift_retain(v16);
      if ((AnimationPlaybackController.isValid.getter(v18) & 1) != 0)
        dispatch thunk of AnimationPlaybackController.resume()();
      swift_release(v17);
      result = swift_release(v16);
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_20;
  v9 = v12 + 1;
  if (v12 + 1 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_20;
  v9 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_20:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_21;
  }
  v14 = v12 + 3;
  if (v14 >= v7)
  {
LABEL_24:
    swift_release(v2);
    v19 = (_QWORD *)swift_task_alloc(dword_100084AC4);
    *(_QWORD *)(v0 + 72) = v19;
    *v19 = v0;
    v19[1] = sub_10003AACC;
    return sub_10003B6CC();
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_24;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10003AACC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  return swift_task_switch(sub_10003E044, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10003AB18()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[8] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[9] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[10] = v3;
  v1[11] = v4;
  return swift_task_switch(sub_10003AB84, v3, v4);
}

uint64_t sub_10003AB84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  char v32;
  char v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  _QWORD *v46;

  v1 = v0 + 40;
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 64)
                + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations);
  swift_beginAccess(v2, v0 + 16, 0, 0);
  v41 = *v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(*v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(*v2 + 64);
  v42 = (unint64_t)(63 - v4) >> 6;
  v43 = *v2;
  result = swift_bridgeObjectRetain(*v2);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v12 = (v5 - 1) & v5;
      v13 = v11 | (v7 << 6);
    }
    else
    {
      v14 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_42;
      if (v14 >= v42)
      {
LABEL_38:
        swift_release(v43);
        v39 = (_QWORD *)swift_task_alloc(dword_100084AC4);
        *(_QWORD *)(v40 + 96) = v39;
        *v39 = v40;
        v39[1] = sub_10003AF54;
        return sub_10003B6CC();
      }
      v15 = *(_QWORD *)(v41 + 8 * v14);
      ++v7;
      if (!v15)
      {
        v7 = v14 + 1;
        if (v14 + 1 >= v42)
          goto LABEL_38;
        v15 = *(_QWORD *)(v41 + 8 * v7);
        if (!v15)
        {
          v7 = v14 + 2;
          if (v14 + 2 >= v42)
            goto LABEL_38;
          v15 = *(_QWORD *)(v41 + 8 * v7);
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v42)
              goto LABEL_38;
            v15 = *(_QWORD *)(v41 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v7 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_43;
                if (v7 >= v42)
                  goto LABEL_38;
                v15 = *(_QWORD *)(v41 + 8 * v7);
                ++v16;
                if (v15)
                  goto LABEL_21;
              }
            }
            v7 = v16;
          }
        }
      }
LABEL_21:
      v12 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v7 << 6);
    }
    v17 = 16 * v13;
    v18 = (uint64_t *)(*(_QWORD *)(v43 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = (uint64_t *)(*(_QWORD *)(v43 + 56) + v17);
    v23 = *v21;
    v22 = v21[1];
    v44 = v12;
    v45 = v7;
    if (v22)
    {
      swift_retain_n(v22, 2);
      swift_bridgeObjectRetain(v19);
      v24 = swift_retain(v23);
      if ((AnimationPlaybackController.isValid.getter(v24) & 1) != 0)
        dispatch thunk of AnimationPlaybackController.stop()();
      swift_release(v22);
    }
    else
    {
      swift_bridgeObjectRetain(v19);
      swift_retain(v23);
    }
    v25 = v1;
    swift_beginAccess(v2, v1, 33, 0);
    swift_retain(v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v27 = (_QWORD *)*v2;
    v46 = (_QWORD *)*v2;
    *v2 = 0x8000000000000000;
    v29 = sub_100024F88(v20, v19);
    v30 = v27[2];
    v31 = (v28 & 1) == 0;
    result = v30 + v31;
    if (__OFADD__(v30, v31))
      break;
    v32 = v28;
    if (v27[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v28 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        result = (uint64_t)sub_1000457F4();
        v27 = v46;
        if ((v32 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100043EB8(result, isUniquelyReferenced_nonNull_native);
      v27 = v46;
      result = sub_100024F88(v20, v19);
      if ((v32 & 1) != (v33 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v29 = result;
      if ((v32 & 1) != 0)
      {
LABEL_4:
        v8 = (_QWORD *)(v27[7] + 16 * v29);
        v9 = v8[1];
        swift_release(*v8);
        swift_release(v9);
        *v8 = v23;
        v8[1] = 0;
        goto LABEL_5;
      }
    }
    v27[(v29 >> 6) + 8] |= 1 << v29;
    v34 = (uint64_t *)(v27[6] + 16 * v29);
    *v34 = v20;
    v34[1] = v19;
    v35 = (_QWORD *)(v27[7] + 16 * v29);
    *v35 = v23;
    v35[1] = 0;
    v36 = v27[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_41;
    v27[2] = v38;
    swift_bridgeObjectRetain(v19);
LABEL_5:
    v1 = v25;
    v5 = v44;
    v7 = v45;
    v10 = *v2;
    *v2 = v27;
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v19);
    swift_endAccess(v1);
    swift_release(v23);
    result = swift_release(v22);
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_10003AF54()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  return swift_task_switch(sub_10003AFA0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_10003AFA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003AFD0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_10003B03C, v3, v4);
}

uint64_t sub_10003B03C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 40)
                + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = *v1;
  v3 = *v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(*v1 + 64);
  v7 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(*v1);
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_21:
    v15 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v11);
    v16 = v15[1];
    if (v16)
    {
      v17 = *v15;
      swift_retain(*v15);
      v18 = swift_retain(v16);
      if ((AnimationPlaybackController.isValid.getter(v18) & 1) != 0)
      {
        v19 = AnimationPlaybackController.time.setter(0.0);
        dispatch thunk of AnimationPlaybackController.pause()(v19);
      }
      swift_release(v17);
      result = swift_release(v16);
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_20;
  v9 = v12 + 1;
  if (v12 + 1 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_20;
  v9 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_24;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_20:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_21;
  }
  v14 = v12 + 3;
  if (v14 >= v7)
  {
LABEL_24:
    swift_release(v2);
    v20 = (_QWORD *)swift_task_alloc(dword_100084AC4);
    *(_QWORD *)(v0 + 72) = v20;
    *v20 = v0;
    v20[1] = sub_10003AACC;
    return sub_10003B6CC();
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_24;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10003B210(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 24) = v1;
  *(float *)(v2 + 96) = a1;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 48) = v4;
  *(_QWORD *)(v2 + 56) = v5;
  return swift_task_switch(sub_10003B284, v4, v5);
}

uint64_t sub_10003B284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(float *)(v1 + 96);
  v4 = *(double *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration + 48)
     * v3;
  v5 = *(double *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration + 56)
     * v3;
  v6 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 64) = v6;
  v7 = swift_task_alloc(48);
  *(_QWORD *)(v1 + 72) = v7;
  *(_QWORD *)(v7 + 16) = v2;
  *(double *)(v7 + 24) = v4;
  *(double *)(v7 + 32) = v5;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 80) = v8;
  type metadata accessor for CGImage(0);
  *v8 = v1;
  v8[1] = sub_10003B36C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, v6, &protocol witness table for MainActor, 0xD000000000000011, 0x800000010005E0D0, sub_10003E034, v7, v9);
}

uint64_t sub_10003B36C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_10003B414;
  }
  else
  {
    v7 = v2[9];
    swift_release(v2[8]);
    swift_task_dealloc(v7);
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_10003B3E0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10003B3E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10003B414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B45C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_100083108 != -1)
    swift_once(&qword_100083108, sub_10003FB44);
  result = sub_10003F96C(a2, a1, a3, a4);
  if ((result & 1) == 0)
  {
    v9 = sub_1000133A8();
    v10 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v9, 0, 0);
    *(_QWORD *)v11 = 0xD000000000000018;
    *(_QWORD *)(v11 + 8) = 0x800000010005F520;
    *(_BYTE *)(v11 + 16) = 5;
    v13 = v10;
    v12 = sub_1000131C0(&qword_100084D80);
    return CheckedContinuation.resume(throwing:)(&v13, v12);
  }
  return result;
}

__n128 sub_10003B544@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  void *v5;
  _BYTE *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  __n128 result;
  __n128 v20;
  __int128 v21;
  void *v22;
  char v23[24];

  Strong = swift_weakLoadStrong(v1 + 16);
  if (Strong && (v4 = Strong, v5 = *(void **)(Strong + 32), v6 = v5, swift_release(v4), v5))
  {
    v7 = v6[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_hasDrawnFrame];

  }
  else
  {
    v7 = 1;
  }
  v20 = *(__n128 *)(v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelBounds + 16);
  v21 = *(_OWORD *)(v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelBounds);
  v8 = (_QWORD *)(v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations);
  swift_beginAccess(v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations, v23, 0, 0);
  v9 = *v8;
  v10 = swift_bridgeObjectRetain(*v8);
  v11 = sub_1000385E0(v10);
  swift_bridgeObjectRelease(v9);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_metadata);
  v13 = swift_bridgeObjectRetain(v12);
  v14 = sub_100039E54(v13);
  swift_bridgeObjectRelease(v12);
  v15 = v14[2];
  if (v15)
  {
    sub_1000131C0((uint64_t *)&unk_100085390);
    v16 = (void *)static _DictionaryStorage.allocate(capacity:)(v15);
  }
  else
  {
    v16 = &_swiftEmptyDictionarySingleton;
  }
  v22 = v16;
  v17 = (_QWORD *)swift_bridgeObjectRetain(v14);
  sub_10003CCF4(v17, 1, &v22);
  swift_bridgeObjectRelease(v14);
  v18 = v22;
  result = v20;
  *(_OWORD *)a1 = v21;
  *(__n128 *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v18;
  return result;
}

uint64_t sub_10003B6CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[11] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[12] = v2;
  v1[13] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[14] = v3;
  v1[15] = v4;
  return swift_task_switch(sub_10003B73C, v3, v4);
}

uint64_t sub_10003B73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 88);
  sub_10003B544(v0 + 16);
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 80) = v2;
  v3 = v1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription;
  v4 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                 + 32);
  v5 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                 + 48);
  v6 = *(_OWORD *)(v0 + 32);
  v7 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 32) = v7;
  *(_QWORD *)(v3 + 48) = v2;
  sub_10003DFE4((_QWORD *)(v0 + 72));
  sub_10003DFE4((_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  sub_10003E00C((_QWORD *)(v0 + 72));
  sub_10003E00C((_QWORD *)(v0 + 80));
  Strong = swift_weakLoadStrong(v1 + 16);
  *(_QWORD *)(v0 + 128) = Strong;
  if (Strong)
  {
    v9 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 136) = static MainActor.shared.getter(Strong);
    v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 144) = v10;
    *(_QWORD *)(v0 + 152) = v11;
    return swift_task_switch(sub_10003B860, v10, v11);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10003B860()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  v1 = (_QWORD *)v0[16];
  v2 = v1[6];
  v0[20] = v2;
  v0[21] = v1[7];
  v0[22] = v1[8];
  v3 = v1[9];
  v0[23] = v3;
  v0[24] = v1[10];
  v0[25] = v1[11];
  v0[26] = v1[12];
  v0[27] = v1[13];
  v0[28] = v1[14];
  v0[29] = v1[15];
  v0[30] = v1[16];
  if (v3 >> 62 == 1 && (v4 = v0[11], v4 == v2))
  {
    v6 = dword_1000845FC;
    swift_retain(v4);
    v7 = (_QWORD *)swift_task_alloc(v6);
    v0[31] = v7;
    *v7 = v0;
    v7[1] = sub_10003B950;
    return sub_100030000();
  }
  else
  {
    swift_release(v0[17]);
    swift_release(v1);
    return swift_task_switch(sub_10003BA4C, v0[14], v0[15]);
  }
}

uint64_t sub_10003B950()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 248));
  return swift_task_switch(sub_10003B99C, *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t sub_10003B99C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[22];
  v1 = v0[23];
  v4 = v0[20];
  v3 = v0[21];
  v5 = v0[16];
  swift_release(v0[17]);
  sub_10002F36C(v4, v3, v2, v1);
  swift_release(v5);
  return swift_task_switch(sub_10003BA4C, v0[14], v0[15]);
}

uint64_t sub_10003BA4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BA7C()
{
  uint64_t v0;
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t inited;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  __n128 v11;
  __n128 v13;
  __n128 v14;
  _BYTE v15[32];
  _BYTE v16[48];

  v1 = *(float *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration);
  v14 = *(__n128 *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration + 16);
  v2 = BoundingBox.boundingRadius.getter(*(__n128 *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelBounds), *(__n128 *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelBounds + 16));
  v3 = (float)((float)(v1 * 0.5) * 3.1416) / 180.0;
  if (v1 <= 0.0)
    v3 = 0.0087266;
  v4 = v2 / sinf(v3);
  v5 = sub_1000131C0((uint64_t *)&unk_100084D50);
  inited = swift_initStackObject(v5, v16);
  *(_OWORD *)(inited + 16) = xmmword_100061910;
  *(_QWORD *)(inited + 32) = 0;
  *(float *)(inited + 40) = v4;
  sub_10003D4CC(inited);
  v13 = v7;
  swift_setDeallocating(inited);
  v8 = type metadata accessor for AnchorEntity(0);
  HasTransform.position.setter(v8, &protocol witness table for Entity, v13);
  v9 = type metadata accessor for PerspectiveCamera(0);
  v10 = (void (*)(_BYTE *, _QWORD))HasPerspectiveCamera.camera.modify(v15, v9, &protocol witness table for PerspectiveCamera);
  PerspectiveCameraComponent.fieldOfViewInDegrees.setter(v1);
  v10(v15, 0);
  HasTransform.orientation.setter(v8, &protocol witness table for Entity, v14);
  sub_10003D4CC((uint64_t)&off_100071E40);
  return HasTransform.position.setter(v8, &protocol witness table for Entity, v11);
}

uint64_t sub_10003BC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  _BYTE v13[32];

  v1 = sub_1000131C0(&qword_100084D48);
  __chkstk_darwin(v1);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_lighting);
  if (v4)
  {
    v5 = *(float *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_lighting + 8);
    v6 = swift_retain_n(v4, 2);
    __ImageBasedLightComponent.init(environment:intensityExponent:)(v6, v5);
    v7 = type metadata accessor for __ImageBasedLightComponent(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 0, 1, v7);
    v8 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify(v13);
    Entity.ComponentSet.subscript.setter(v3, v7, v7, &protocol witness table for __ImageBasedLightComponent);
    v8(v13, 0);
    return swift_release(v4);
  }
  else
  {
    type metadata accessor for EnvironmentResource(0);
    v10 = static EnvironmentResource.defaultObject()();
    __ImageBasedLightComponent.init(environment:intensityExponent:)(v10, 0.0);
    v11 = type metadata accessor for __ImageBasedLightComponent(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v3, 0, 1, v11);
    v12 = (uint64_t (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify(v13);
    Entity.ComponentSet.subscript.setter(v3, v11, v11, &protocol witness table for __ImageBasedLightComponent);
    return v12(v13, 0);
  }
}

uint64_t sub_10003BDA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _BYTE v20[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations);
  swift_beginAccess(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations, v20, 0, 0);
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(v2);
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v9 << 6);
LABEL_21:
    v15 = *(_QWORD *)(v2 + 56) + 16 * v11;
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = swift_retain(*(_QWORD *)(v15 + 8));
      if ((AnimationPlaybackController.isValid.getter(v17) & 1) != 0)
      {
        v18 = AnimationPlaybackController.isPlaying.getter();
        result = swift_release(v16);
        if ((v18 & 1) != 0)
        {
          v19 = 1;
LABEL_26:
          swift_release(v2);
          return v19;
        }
      }
      else
      {
        result = swift_release(v16);
      }
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v12 >= v7)
    goto LABEL_25;
  v13 = *(_QWORD *)(v3 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_20;
  v9 = v12 + 1;
  if (v12 + 1 >= v7)
    goto LABEL_25;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
    goto LABEL_20;
  v9 = v12 + 2;
  if (v12 + 2 >= v7)
    goto LABEL_25;
  v13 = *(_QWORD *)(v3 + 8 * v9);
  if (v13)
  {
LABEL_20:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_21;
  }
  v14 = v12 + 3;
  if (v14 >= v7)
  {
LABEL_25:
    v19 = 0;
    goto LABEL_26;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_25;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Int sub_10003BF48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::Int result;
  int64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  float v15;
  Swift::UInt32 v16;
  double v17;
  Swift::UInt64 v18;
  float v19;
  Swift::UInt32 v20;
  double v21;
  Swift::UInt64 v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt *v32;
  Swift::UInt v33;
  Swift::UInt v34;
  uint64_t v35;
  _OWORD v36[4];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  Hasher.init()(v36);
  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations);
  swift_beginAccess(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations, &v35, 0, 0);
  v2 = *v1;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(v2);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v23 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v24 = v23 | (v9 << 6);
      goto LABEL_34;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v25 >= v7)
      goto LABEL_36;
    v26 = *(_QWORD *)(v3 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v7)
        goto LABEL_36;
      v26 = *(_QWORD *)(v3 + 8 * v9);
      if (!v26)
      {
        v9 = v25 + 2;
        if (v25 + 2 >= v7)
          goto LABEL_36;
        v26 = *(_QWORD *)(v3 + 8 * v9);
        if (!v26)
          break;
      }
    }
LABEL_33:
    v6 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_34:
    v28 = 16 * v24;
    v29 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v28);
    v30 = *v29;
    v31 = v29[1];
    v32 = (Swift::UInt *)(*(_QWORD *)(v2 + 56) + v28);
    v33 = *v32;
    v34 = v32[1];
    swift_retain(v34);
    swift_bridgeObjectRetain(v31);
    swift_retain(v33);
    String.hash(into:)(v36, v30, v31);
    swift_bridgeObjectRelease(v31);
    Hasher._combine(_:)(v33);
    if (v34)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v34);
      v10 = swift_retain(v34);
      v11 = AnimationPlaybackController.isValid.getter(v10);
      Hasher._combine(_:)(v11 & 1);
      v12 = AnimationPlaybackController.isPlaying.getter();
      Hasher._combine(_:)(v12 & 1);
      v13 = dispatch thunk of AnimationPlaybackController.isPaused.getter();
      Hasher._combine(_:)(v13 & 1);
      v14 = AnimationPlaybackController.isStopped.getter();
      Hasher._combine(_:)(v14 & 1);
      v15 = AnimationPlaybackController.speed.getter();
      if ((LODWORD(v15) & 0x7FFFFFFF) != 0)
        v16 = LODWORD(v15);
      else
        v16 = 0;
      Hasher._combine(_:)(v16);
      v17 = AnimationPlaybackController.time.getter();
      if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v18 = *(_QWORD *)&v17;
      else
        v18 = 0;
      Hasher._combine(_:)(v18);
      v19 = AnimationPlaybackController.blendFactor.getter();
      if ((LODWORD(v19) & 0x7FFFFFFF) != 0)
        v20 = LODWORD(v19);
      else
        v20 = 0;
      Hasher._combine(_:)(v20);
      v21 = AnimationPlaybackController.duration.getter();
      if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v22 = *(_QWORD *)&v21;
      else
        v22 = 0;
      Hasher._combine(_:)(v22);
      swift_release_n(v34, 2);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = swift_release(v33);
  }
  v27 = v25 + 3;
  if (v27 >= v7)
  {
LABEL_36:
    swift_release(v2);
    v40 = v36[2];
    v41 = v36[3];
    v42 = v37;
    v38 = v36[0];
    v39 = v36[1];
    return Hasher.finalize()();
  }
  v26 = *(_QWORD *)(v3 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_33;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v7)
      goto LABEL_36;
    v26 = *(_QWORD *)(v3 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_33;
  }
LABEL_38:
  __break(1u);
  return result;
}

Swift::Int sub_10003C230()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x617453656B617761, 0xEA00000000006574);
  return Hasher._finalize()();
}

uint64_t sub_10003C284(uint64_t a1)
{
  return String.hash(into:)(a1, 0x617453656B617761, 0xEA00000000006574);
}

Swift::Int sub_10003C2A0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x617453656B617761, 0xEA00000000006574);
  return Hasher._finalize()();
}

uint64_t sub_10003C2F0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100071ED0, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10003C340(_QWORD *a1@<X8>)
{
  *a1 = 0x617453656B617761;
  a1[1] = 0xEA00000000006574;
}

uint64_t sub_10003C360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_metadata);
  *(_QWORD *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_metadata) = a1;
  v8 = swift_bridgeObjectRetain(a1);
  v9 = sub_100022EB0(v8, v7);
  swift_bridgeObjectRelease(a1);
  if ((v9 & 1) != 0)
    return swift_bridgeObjectRelease(v7);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  type metadata accessor for MainActor(0);
  v12 = swift_retain(v2);
  v13 = static MainActor.shared.getter(v12);
  v14 = (_QWORD *)swift_allocObject(&unk_1000747B0, 40, 7);
  v14[2] = v13;
  v14[3] = &protocol witness table for MainActor;
  v14[4] = v2;
  v15 = sub_10002E594((uint64_t)v6, (uint64_t)&unk_100084D40, (uint64_t)v14);
  swift_bridgeObjectRelease(v7);
  return swift_release(v15);
}

uint64_t sub_10003C4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_uuid;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_scene));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_objectEntity));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelAnchor));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraAnchor));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraEntity));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_environmentEntity));
  v3 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                                      + 48));
  swift_bridgeObjectRelease(v3);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_loadReceipt));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_lighting));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_metadata));
  return v0;
}

uint64_t sub_10003C5B0()
{
  uint64_t v0;

  sub_10003C4A4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003C5D4()
{
  return _s14descr1000747C9C11ClientSceneCMa(0);
}

uint64_t _s14descr1000747C9C11ClientSceneCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100084A80;
  if (!qword_100084A80)
    return swift_getSingletonMetadata(a1, &_s14descr1000747C9C11ClientSceneCMn);
  return result;
}

uint64_t sub_10003C618(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = "\b";
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_100064480;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = &unk_100064498;
    v4[10] = &unk_1000644B0;
    v4[11] = &unk_1000644C8;
    v4[12] = &unk_1000644E0;
    v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
  return result;
}

uint64_t _s14descr1000747C9C11ClientSceneC11MetadataKeyOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003C724 + 4 * byte_100064440[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003C744 + 4 * byte_100064445[v4]))();
}

_BYTE *sub_10003C724(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003C744(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003C74C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003C754(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003C75C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003C764(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s14descr1000747C9C11ClientSceneC11MetadataKeyOMa()
{
  return &_s14descr1000747C9C11ClientSceneC11MetadataKeyON;
}

ValueMetadata *_s14descr1000747C9C11ClientSceneC22InternalAnimationStateOMa()
{
  return &_s14descr1000747C9C11ClientSceneC22InternalAnimationStateON;
}

uint64_t _s14descr1000747C9C11ClientSceneC15ImageBasedLightVwCP(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  swift_retain(v3);
  return a1;
}

uint64_t *_s14descr1000747C9C11ClientSceneC15ImageBasedLightVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t _s14descr1000747C9C11ClientSceneC15ImageBasedLightVwtk(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *_s14descr1000747C9C11ClientSceneC15ImageBasedLightVwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t _s14descr1000747C9C11ClientSceneC15ImageBasedLightVwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 12))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s14descr1000747C9C11ClientSceneC15ImageBasedLightVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *_s14descr1000747C9C11ClientSceneC15ImageBasedLightVMa()
{
  return &_s14descr1000747C9C11ClientSceneC15ImageBasedLightVN;
}

unint64_t sub_10003C924()
{
  unint64_t result;

  result = qword_100084CE8;
  if (!qword_100084CE8)
  {
    result = swift_getWitnessTable(&unk_1000645B0, &_s14descr1000747C9C11ClientSceneC11MetadataKeyON);
    atomic_store(result, (unint64_t *)&qword_100084CE8);
  }
  return result;
}

Swift::Int sub_10003C968()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10003C9AC()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10003C9D4(uint64_t a1)
{
  Swift::UInt *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(*v1);
  return Hasher._finalize()();
}

uint64_t sub_10003CA10()
{
  return sub_1000154CC(&qword_100084CF0, _s14descr1000747C9C11ClientSceneCMa, (uint64_t)&unk_1000645D8);
}

_QWORD *sub_10003CA3C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_10003CBD0(a1, a2, a3, *v3, &qword_100084D88, qword_100084D90);
  *v3 = result;
  return result;
}

_QWORD *sub_10003CA68(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_10003CAB0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_10003CA84(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_10003CBD0(a1, a2, a3, *v3, &qword_100084D08, &qword_100084D10);
  *v3 = result;
  return result;
}

_QWORD *sub_10003CAB0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000131C0(&qword_100084D60);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_1000131C0(&qword_100084D68);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_10003CBD0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_1000131C0(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 32 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 1;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 5);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((v8 & 1) != 0)
  {
    if (v14 != a4 || v14 + 4 >= &a4[4 * v11 + 4])
      memmove(v14 + 4, a4 + 4, 32 * v11);
    a4[2] = 0;
  }
  else
  {
    v18 = sub_1000131C0(a6);
    swift_arrayInitWithCopy(v14 + 4, a4 + 4, v11, v18);
  }
  swift_release(a4);
  return v14;
}

uint64_t sub_10003CCF4(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *i;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = a1[2];
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[7];
  v46 = a1[6];
  swift_bridgeObjectRetain(a1);
  v50 = v7;
  v51 = v6;
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v11 = sub_100024F88(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10004563C();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v7;
    v22[1] = v6;
    v23 = (_QWORD *)(v21[7] + 16 * v11);
    *v23 = v46;
    v23[1] = v8;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v26;
    v27 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 11; ; i += 4)
    {
      v6 = *(i - 2);
      v30 = *(i - 1);
      v8 = *i;
      v50 = *(i - 3);
      v29 = v50;
      v51 = v6;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v8);
      v32 = sub_100024F88(v50, v6);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_100043B94(v36, 1);
        v32 = sub_100024F88(v50, v6);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v6;
      v41 = (_QWORD *)(v39[7] + 16 * v32);
      *v41 = v30;
      v41[1] = v8;
      v42 = v39[2];
      v25 = __OFADD__(v42, 1);
      v43 = v42 + 1;
      if (v25)
        goto LABEL_24;
      v39[2] = v43;
      if (!--v27)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100043B94(v14, a2 & 1);
  v16 = sub_100024F88(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v52 = v19;
    swift_errorRetain(v19);
    v20 = sub_1000131C0(&qword_100084D00);
    if ((swift_dynamicCast(v20, &v52, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v52);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v48 = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v44._object = (void *)0x800000010005F3D0;
  v44._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  _print_unlocked<A, B>(_:_:)(&v50, &v48, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v45._countAndFlagsBits = 39;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v48, v49, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003D090(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *i;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (!a1[2])
    return swift_bridgeObjectRelease(a1);
  v45 = a1[2];
  v6 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  swift_bridgeObjectRetain(a1);
  v49 = v6;
  v50 = v5;
  v9 = (_QWORD *)*a3;
  swift_retain(v8);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  v11 = sub_100024F88(v6, v5);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000457F4();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v6;
    v22[1] = v5;
    v23 = (_QWORD *)(v21[7] + 16 * v11);
    *v23 = v7;
    v23[1] = v8;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v26;
    v27 = v45 - 1;
    if (v45 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 11; ; i += 4)
    {
      v5 = *(i - 2);
      v7 = *(i - 1);
      v8 = *i;
      v49 = *(i - 3);
      v29 = v49;
      v50 = v5;
      v30 = (_QWORD *)*a3;
      swift_retain(v8);
      swift_bridgeObjectRetain(v5);
      swift_retain(v7);
      v31 = sub_100024F88(v49, v5);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_100043EB8(v35, 1);
        v31 = sub_100024F88(v49, v5);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v29;
      v39[1] = v5;
      v40 = (_QWORD *)(v38[7] + 16 * v31);
      *v40 = v7;
      v40[1] = v8;
      v41 = v38[2];
      v25 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v25)
        goto LABEL_24;
      v38[2] = v42;
      if (!--v27)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100043EB8(v14, a2 & 1);
  v16 = sub_100024F88(v6, v5);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v51 = v19;
    swift_errorRetain(v19);
    v20 = sub_1000131C0(&qword_100084D00);
    if ((swift_dynamicCast(v20, &v51, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v5);
      swift_release(v8);
      swift_release(v7);
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v51);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x800000010005F3D0;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)(&v49, &v47, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v47, v48, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003D444(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10003D4CC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

double sub_10003D53C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v0 = sub_1000131C0(&qword_100084D18);
  __chkstk_darwin(v0);
  v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for __REAnchoringType.Alignment(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v22 - v8;
  v10 = type metadata accessor for Entity(0);
  *(double *)&v11 = HasTransform.orientation.getter(v10, &protocol witness table for Entity);
  v22 = v11;
  Scene.__anchoringType.getter();
  v12 = type metadata accessor for __REAnchoringType(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v2, 1, v12) == 1)
  {
    sub_10003DF0C((uint64_t)v2);
  }
  else if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v2, v12) == enum case for __REAnchoringType.surface(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v2, v12);
    v14 = &v2[*(int *)(sub_1000131C0(&qword_100084D20) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
    v15 = type metadata accessor for __REAnchoringType.Classification(0);
    v16 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    static __REAnchoringType.Alignment.vertical.getter(v16);
    v17 = sub_1000154CC((unint64_t *)&unk_100084D28, (uint64_t (*)(uint64_t))&type metadata accessor for __REAnchoringType.Alignment, (uint64_t)&protocol conformance descriptor for __REAnchoringType.Alignment);
    dispatch thunk of RawRepresentable.rawValue.getter(&v24, v3, v17);
    dispatch thunk of RawRepresentable.rawValue.getter(&v23, v3, v17);
    v19 = v23;
    v18 = v24;
    v20 = *(void (**)(char *, uint64_t))(v4 + 8);
    v20(v7, v3);
    if (v18 == v19)
    {
      if (qword_100083100 != -1)
        swift_once(&qword_100083100, sub_10003A07C);
      v22 = xmmword_100084A40;
    }
    v20(v9, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v2, v12);
  }
  return *(double *)&v22;
}

uint64_t sub_10003D7A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _OWORD *v26;
  __int128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  __int128 v41;
  uint64_t v42;
  BOOL v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t result;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __n128 v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __n128 v88;
  __int128 v89;
  uint64_t v90;
  _QWORD *v91;
  _OWORD v92[3];
  uint64_t v93;

  v5 = v4;
  *(_QWORD *)&v87 = type metadata accessor for Scene.AnchorCollection(0);
  *(_QWORD *)&v85 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v84 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit(v5 + 16, 0);
  *(_QWORD *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_loadReceipt) = 0;
  v11 = v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_lighting;
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 8) = 0;
  v12 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_metadata;
  *(_QWORD *)(v5 + v12) = sub_10001E974((uint64_t)_swiftEmptyArrayStorage);
  v13 = a1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_uuid;
  v14 = v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_uuid;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v13, v15);
  v80 = a1;
  swift_weakAssign(v5 + 16, a1);
  v86 = a2;
  *(_QWORD *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_scene) = a2;
  *(_QWORD *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_objectEntity) = a3;
  v16 = v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration;
  v17 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v16 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v16 + 48) = v17;
  *(_QWORD *)(v16 + 64) = *(_QWORD *)(a4 + 64);
  v18 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v16 = *(_OWORD *)a4;
  *(_OWORD *)(v16 + 16) = v18;
  v19 = type metadata accessor for AnchorEntity(0);
  sub_10003D4CC((uint64_t)&off_100071E70);
  v83 = v20;
  swift_retain(a2);
  v21 = swift_retain(a3);
  v22 = AnchorEntity.__allocating_init(world:)(v21, v83);
  v23 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelAnchor;
  *(_QWORD *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelAnchor) = v22;
  v24 = type metadata accessor for Entity(0);
  *(double *)&v25 = HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)(1, 0, 0, v24, &protocol witness table for Entity);
  v26 = (_OWORD *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelBounds);
  *v26 = v25;
  v26[1] = v27;
  v28 = BoundingBox.center.getter();
  v29.n128_u64[0] = (unint64_t)vsub_f32(0, (float32x2_t)v28.n128_u64[0]);
  v29.n128_f32[2] = 0.0 - v28.n128_f32[2];
  v29.n128_u32[3] = 0;
  HasTransform.position.setter(v24, &protocol witness table for Entity, v29);
  swift_retain(v22);
  HasHierarchy.addChild(_:preservingWorldTransform:)(a3, 0, v19, &protocol witness table for Entity);
  swift_release(v22);
  v30 = type metadata accessor for PerspectiveCamera(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = PerspectiveCamera.init()();
  *(_QWORD *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraEntity) = v31;
  v32 = sub_10003D4CC((uint64_t)&off_100071EA0);
  v34 = AnchorEntity.__allocating_init(world:)(v32, v33);
  v35 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraAnchor;
  *(_QWORD *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraAnchor) = v34;
  swift_retain(v34);
  v36 = swift_retain(v31);
  HasHierarchy.addChild(_:preservingWorldTransform:)(v36, 0, v19, &protocol witness table for Entity);
  swift_release(v34);
  swift_release(v31);
  v37 = *(_QWORD *)(v5 + v23);
  swift_retain(v37);
  dispatch thunk of Scene.addAnchor(_:)(v37, &protocol witness table for AnchorEntity);
  swift_release(v37);
  v38 = *(_QWORD *)(v5 + v35);
  v39 = swift_retain(v38);
  dispatch thunk of Scene.addAnchor(_:)(v39, &protocol witness table for AnchorEntity);
  swift_release(v38);
  v40.n128_f64[0] = sub_10003D53C();
  v83 = v40;
  *(double *)&v41 = HasTransform.orientation.getter(v24, &protocol witness table for Entity);
  v42 = 0;
  while (1)
  {
    v88 = v83;
    v44 = *(float *)((unint64_t)&v88 & 0xFFFFFFFFFFFFFFF3 | (4 * (v42 & 3)));
    v89 = v41;
    v45 = *(float *)((unint64_t)&v89 & 0xFFFFFFFFFFFFFFF3 | (4 * (v42 & 3)));
    v43 = v44 == v45;
    if (v42 == 3)
      break;
    while (1)
    {
      ++v42;
      if (v43)
        break;
      if (v42 == 3)
        goto LABEL_8;
      v43 = 0;
    }
  }
  if (v44 != v45)
LABEL_8:
    HasTransform.orientation.setter(v24, &protocol witness table for Entity, v83);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v46 = Entity.init()();
  *(_QWORD *)(v5 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_environmentEntity) = v46;
  v47 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_environmentEntity;
  swift_retain(v46);
  dispatch thunk of Entity.name.setter(0xD000000000000019, 0x800000010005F500);
  swift_release(v46);
  v48 = *(_QWORD *)(v5 + v47);
  swift_retain(v48);
  Entity.turnIntoNinja()();
  v49 = swift_release(v48);
  v50 = v84;
  dispatch thunk of Scene.anchors.getter(v49);
  Scene.AnchorCollection.appendNinja(_:)(*(_QWORD *)(v5 + v47));
  v51 = (*(uint64_t (**)(char *, _QWORD))(v85 + 8))(v50, v87);
  v52 = Entity.availableAnimations.getter(v51);
  if ((unint64_t)v52 >> 62)
  {
LABEL_30:
    if (v52 < 0)
      v78 = v52;
    else
      v78 = v52 & 0xFFFFFFFFFFFFFF8;
    v53 = _CocoaArrayWrapper.endIndex.getter(v78);
  }
  else
  {
    v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v82 = v5;
  v81 = a3;
  if (!v53)
  {
    swift_bridgeObjectRelease(v52);
    v54 = _swiftEmptyArrayStorage;
    v66 = _swiftEmptyArrayStorage[2];
    if (!v66)
    {
LABEL_27:
      v67 = &_swiftEmptyDictionarySingleton;
      goto LABEL_28;
    }
LABEL_25:
    sub_1000131C0(&qword_100084CF8);
    v67 = (void *)static _DictionaryStorage.allocate(capacity:)(v66);
LABEL_28:
    *(_QWORD *)&v92[0] = v67;
    v68 = (_QWORD *)swift_bridgeObjectRetain(v54);
    sub_10003D090(v68, 1, v92);
    swift_bridgeObjectRelease(v54);
    v69 = v82;
    *(_QWORD *)(v82 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_animations) = *(_QWORD *)&v92[0];
    v87 = *(_OWORD *)(v69 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelBounds);
    v85 = *(_OWORD *)(v69
                    + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_modelBounds
                    + 16);
    v70 = sub_10001E730((uint64_t)_swiftEmptyArrayStorage);
    v71 = sub_10001E610((uint64_t)_swiftEmptyArrayStorage);
    v72 = v69 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription;
    v73 = v85;
    *(_OWORD *)v72 = v87;
    *(_OWORD *)(v72 + 16) = v73;
    *(_QWORD *)(v72 + 32) = v70;
    *(_BYTE *)(v72 + 40) = 0;
    *(_QWORD *)(v72 + 48) = v71;
    sub_10003BA7C();
    sub_10003BC08();
    sub_10003B544((uint64_t)v92);
    swift_release(v80);
    swift_release(v86);
    swift_release(v81);
    v74 = *(_QWORD *)(v72 + 32);
    v75 = *(_QWORD *)(v72 + 48);
    v76 = v92[1];
    *(_OWORD *)v72 = v92[0];
    *(_OWORD *)(v72 + 16) = v76;
    *(_OWORD *)(v72 + 32) = v92[2];
    *(_QWORD *)(v72 + 48) = v93;
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v74);
    return v69;
  }
  v91 = _swiftEmptyArrayStorage;
  sub_10003CA84(0, v53 & ~(v53 >> 63), 0);
  if ((v53 & 0x8000000000000000) == 0)
  {
    v50 = 0;
    v54 = v91;
    *(_QWORD *)&v87 = v52 & 0xC000000000000001;
    v55 = v52;
    do
    {
      if ((char *)v53 == v50)
      {
        __break(1u);
        goto LABEL_30;
      }
      if ((_QWORD)v87)
      {
        v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v52);
      }
      else
      {
        v56 = *(_QWORD *)(v52 + 8 * (_QWORD)v50 + 32);
        swift_retain(v56);
      }
      v90 = ObjectIdentifier.hashValue.getter(v56);
      *(_QWORD *)&v92[0] = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      *((_QWORD *)&v92[0] + 1) = v57;
      v58._countAndFlagsBits = 47;
      v58._object = (void *)0xE100000000000000;
      String.append(_:)(v58);
      v59 = AnimationResource.name.getter();
      if (v60)
      {
        v61 = v60;
      }
      else
      {
        v59 = 0x64656D616E6E75;
        v61 = 0xE700000000000000;
      }
      v62 = v61;
      String.append(_:)(*(Swift::String *)&v59);
      swift_bridgeObjectRelease(v61);
      v63 = *((_QWORD *)&v92[0] + 1);
      v5 = *(_QWORD *)&v92[0];
      v91 = v54;
      a3 = v54[2];
      v64 = v54[3];
      if (a3 >= v64 >> 1)
      {
        sub_10003CA84((_QWORD *)(v64 > 1), a3 + 1, 1);
        v54 = v91;
      }
      ++v50;
      v54[2] = a3 + 1;
      v65 = &v54[4 * a3];
      v65[4] = v5;
      v65[5] = v63;
      v65[6] = v56;
      v65[7] = 0;
      v52 = v55;
    }
    while ((char *)v53 != v50);
    swift_bridgeObjectRelease(v55);
    v66 = v54[2];
    if (!v66)
      goto LABEL_27;
    goto LABEL_25;
  }
  __break(1u);
  result = swift_unexpectedError(v50, "Swift/Dictionary.swift", 22, 1, 489);
  __break(1u);
  return result;
}

uint64_t sub_10003DF0C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000131C0(&qword_100084D18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003DF4C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003DF78()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100084D3C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100015350;
  return sub_10002EE08();
}

_QWORD *sub_10003DFE4(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

_QWORD *sub_10003E00C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_10003E034(uint64_t a1)
{
  uint64_t v1;

  return sub_10003B45C(a1, *(_QWORD *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t CRLAsyncStreamProperty.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v4 = sub_10003E4FC(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t CRLAsyncStreamProperty.init(wrappedValue:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = sub_10003E4FC(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t sub_10003E0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for AsyncStream.Continuation(255, a3);
  v6 = type metadata accessor for Optional(0, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  v7 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v5);
}

uint64_t *CRLAsyncStreamProperty.deinit()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = *v0;
  v3 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v4 = *(_QWORD *)(v2 + 80);
  v5 = type metadata accessor for AsyncStream.Continuation(0, v4);
  AsyncStream.Continuation.finish()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))((uint64_t)v1 + *(_QWORD *)(*v1 + 88), v4);
  v6 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  v7 = type metadata accessor for AsyncStream(0, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  swift_release(*(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 112)));
  return v1;
}

uint64_t CRLAsyncStreamProperty.__deallocating_deinit()
{
  uint64_t v0;

  CRLAsyncStreamProperty.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t CRLAsyncStreamProperty.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 88);
  swift_beginAccess(v4, v6, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t CRLAsyncStreamProperty.wrappedValue.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_10003E7C8(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void (*CRLAsyncStreamProperty.wrappedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v3[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[5] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[6] = malloc(v7);
  v8 = malloc(v7);
  v3[7] = v8;
  v9 = (uint64_t)v1 + *(_QWORD *)(v4 + 88);
  swift_beginAccess(v9, v3, 0, 0);
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  return sub_10003E3AC;
}

void sub_10003E3AC(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 48), v4, v5);
    sub_10003E7C8((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_10003E7C8(*(_QWORD *)(*(_QWORD *)a1 + 56));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t CRLAsyncStreamProperty.projectedValue.getter()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t CRLAsyncStreamProperty.ProjectedValue.values.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 96);
  v5 = type metadata accessor for AsyncStream(0, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v4, v5);
}

uint64_t CRLAsyncStreamProperty.ProjectedValue.publisher()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t WitnessTable;

  v2 = type metadata accessor for CurrentValueSubject(0, a2, &type metadata for Never, &protocol witness table for Never);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v2);
  return Publisher.eraseToAnyPublisher()(v2, WitnessTable);
}

uint64_t sub_10003E4FC(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  char *v38;

  v2 = v1;
  v35 = a1;
  v31 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v31 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy(0, v3);
  v32 = *(char **)(v6 - 8);
  v33 = v6;
  __chkstk_darwin(v6);
  v8 = (void (**)(char *, uint64_t, uint64_t))((char *)&v28 - v7);
  v9 = type metadata accessor for AsyncStream(0, v3);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for AsyncStream.Continuation(255, v3);
  v34 = type metadata accessor for Optional(0, v13);
  v30 = *(_QWORD *)(v34 - 8);
  v14 = __chkstk_darwin(v34);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v28 - v17;
  v19 = &v2[*(_QWORD *)(v31 + 88)];
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v28(v19, v35, v3);
  v20 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v13);
  *v8 = 1;
  (*((void (**)(_QWORD *, _QWORD, uint64_t))v32 + 13))(v8, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v33);
  v37 = v3;
  v38 = v18;
  AsyncStream.init(_:bufferingPolicy:_:)(v3, v8, sub_10003EA0C, v36, v3);
  v21 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 96)];
  v31 = v10;
  v32 = v12;
  v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v23 = v12;
  v24 = v30;
  v33 = v9;
  v22(v21, v23, v9);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v16, v18, v34);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 104)], v16, v13);
    type metadata accessor for CurrentValueSubject(0, v3, &type metadata for Never, &protocol witness table for Never);
    v26 = v29;
    v28(v29, v35, v3);
    v27 = CurrentValueSubject.__allocating_init(_:)(v26);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    *(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 + 112)] = v27;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v34);
    return (uint64_t)v2;
  }
  return result;
}

uint64_t sub_10003E7C8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  _BYTE v17[24];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for AsyncStream.Continuation.YieldResult(0, v5);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = &v17[-v11 - 8];
  v13 = (char *)v2 + *(_QWORD *)(v4 + 88);
  swift_beginAccess(v13, v17, 33, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v13, a1, v5);
  swift_endAccess(v17);
  CurrentValueSubject.send(_:)(a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v14 = type metadata accessor for AsyncStream.Continuation(0, v5);
  AsyncStream.Continuation.yield(_:)(v8, v14);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10003E918(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  _QWORD v11[4];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(v2 - 8) + 64;
    v5 = type metadata accessor for AsyncStream(319, v2);
    if (v6 > 0x3F)
    {
      return v5;
    }
    else
    {
      v11[1] = *(_QWORD *)(v5 - 8) + 64;
      v7 = type metadata accessor for AsyncStream.Continuation(319, v3);
      v3 = v7;
      if (v8 <= 0x3F)
      {
        v11[2] = *(_QWORD *)(v7 - 8) + 64;
        v11[3] = (char *)&value witness table for Builtin.NativeObject + 64;
        inited = swift_initClassMetadata2(a1, 0, 4, v11, a1 + 88);
        if (inited)
          return inited;
        else
          return 0;
      }
    }
  }
  return v3;
}

uint64_t type metadata accessor for CRLAsyncStreamProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003EA14(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRLAsyncStreamProperty);
}

uint64_t sub_10003E9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for CRLAsyncStreamProperty.ProjectedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003EA14(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRLAsyncStreamProperty.ProjectedValue);
}

uint64_t sub_10003EA0C(uint64_t a1)
{
  uint64_t v1;

  return sub_10003E0F4(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_10003EA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10003EA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000345E4(a1, &qword_1000836D0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10003EB74(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_1000131C0((uint64_t *)&unk_100085370);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_1000345E4(a1, (uint64_t *)&unk_100085370);
    sub_10004BFF4(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_1000345E4((uint64_t)v8, (uint64_t *)&unk_100085370);
  }
  else
  {
    sub_10002BDA4(a1, (uint64_t)v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000451B0((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

void sub_10003ECEC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  v12 = type metadata accessor for __VaListBuilder(0);
  v13 = (_QWORD *)swift_allocObject(v12, 48, 7);
  v13[2] = 8;
  v13[3] = 0;
  v14 = v13 + 3;
  v13[4] = 0;
  v13[5] = 0;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = 0;
    v17 = a1 + 32;
    while (1)
    {
      sub_10001E5C8(v17 + 40 * v16, (uint64_t)v52);
      v18 = v53;
      v19 = v54;
      sub_100015BEC(v52, v53);
      v20 = dispatch thunk of CVarArg._cVarArgEncoding.getter(v18, v19);
      v21 = *v14;
      v22 = *(_QWORD *)(v20 + 16);
      v23 = __OFADD__(*v14, v22);
      v24 = *v14 + v22;
      if (v23)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }
      v25 = v20;
      v26 = v13[4];
      if (v26 >= v24)
        goto LABEL_18;
      if (v26 + 0x4000000000000000 < 0)
        goto LABEL_29;
      v27 = (char *)v13[5];
      if (2 * v26 > v24)
        v24 = 2 * v26;
      v13[4] = v24;
      if ((unint64_t)(v24 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_30;
      v28 = (char *)swift_slowAlloc(8 * v24, 7);
      v13[5] = v28;
      if (v27)
        break;
LABEL_19:
      if (!v28)
        goto LABEL_32;
      v30 = *(_QWORD *)(v25 + 16);
      if (v30)
      {
        v31 = (uint64_t *)(v25 + 32);
        v32 = *v14;
        while (1)
        {
          v33 = *v31++;
          *(_QWORD *)&v28[8 * v32] = v33;
          v32 = *v14 + 1;
          if (__OFADD__(*v14, 1))
            break;
          *v14 = v32;
          if (!--v30)
            goto LABEL_3;
        }
        __break(1u);
        goto LABEL_28;
      }
LABEL_3:
      ++v16;
      swift_bridgeObjectRelease(v25);
      sub_100015C54(v52);
      if (v16 == v15)
        goto LABEL_25;
    }
    if (v28 != v27 || v28 >= &v27[8 * v21])
      memmove(v28, v27, 8 * v21);
    __VaListBuilder.deallocStorage(wordCount:storage:)(v26, v27);
LABEL_18:
    v28 = (char *)v13[5];
    goto LABEL_19;
  }
LABEL_25:
  v34 = __VaListBuilder.va_list()();
  v35 = (void *)objc_opt_self(CRLAssertionHandler);
  StaticString.description.getter(a2, a3, a4);
  v37 = v36;
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  StaticString.description.getter(a5, a6, a7);
  v40 = v39;
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  if (a8 < 0)
    goto LABEL_31;
  StaticString.description.getter(a9, a10, a11);
  v43 = v42;
  v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v43);
  objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:isFatal:format:args:", v38, v41, a8, 0, v44, v34);
  swift_release(v13);

}

void sub_10003EF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t inited;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[72];

  v2 = v1;
  v4 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v4);
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (char *)objc_msgSend(*(id *)(v1 + 16), "objectForKey:", a1);
  if (v7)
  {
    v8 = v7;
    v9 = (uint64_t)(v7 + 64);
    swift_beginAccess(v7 + 64, v43, 0, 0);
    sub_10002E530(v9, (uint64_t)&v44, &qword_1000852E8);
    if (*((_QWORD *)&v45 + 1))
    {
      sub_10001E5C8((uint64_t)&v44, (uint64_t)v40);
      sub_1000345E4((uint64_t)&v44, &qword_1000852E8);
      v10 = v41;
      v11 = v42;
      sub_100015BEC(v40, v41);
      dispatch thunk of Cancellable.cancel()(v10, v11);
      sub_100015C54(v40);
    }
    else
    {
      sub_1000345E4((uint64_t)&v44, &qword_1000852E8);
    }
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    swift_beginAccess(v9, v40, 33, 0);
    sub_100046A78((uint64_t)&v44, v9, &qword_1000852E8);
    swift_endAccess(v40);
    dispatch thunk of __ServiceLocator.sceneService.getter(&v44, objc_msgSend(*(id *)(v1 + 16), "removeObjectForKey:", a1));
    v32 = *((_QWORD *)&v45 + 1);
    v33 = v46;
    sub_100015BEC(&v44, *((uint64_t *)&v45 + 1));
    dispatch thunk of __SceneService.remove(scene:)(*(_QWORD *)(a1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_scene), v32, v33);
    sub_100015C54(&v44);
    if (objc_msgSend(*(id *)(v1 + 16), "count"))
    {
      v34 = (uint64_t)v8;
    }
    else
    {
      sub_1000406C8();
      v35 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v6, 1, 1, v35);
      type metadata accessor for MainActor(0);
      v36 = swift_retain(v1);
      v37 = static MainActor.shared.getter(v36);
      v38 = (_QWORD *)swift_allocObject(&unk_100074A60, 40, 7);
      v38[2] = v37;
      v38[3] = &protocol witness table for MainActor;
      v38[4] = v2;
      v39 = sub_10003EA40((uint64_t)v6, (uint64_t)&unk_1000852F8, (uint64_t)v38);
      swift_release(v8);
      v34 = v39;
    }
    swift_release(v34);
  }
  else
  {
    if (qword_100083000 != -1)
      swift_once(&qword_100083000, sub_10001A5D8);
    swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, &v44, 0, 0);
    v12 = (void *)static OS_os_log.crlThreeDimensionalObjects;
    v13 = sub_1000131C0((uint64_t *)&unk_1000852D0);
    inited = swift_initStackObject(v13, v47);
    *(_OWORD *)(inited + 16) = xmmword_100061930;
    v15 = v12;
    v16 = UUID.uuidString.getter();
    v18 = v17;
    v19 = String.index(_:offsetBy:)(15, 8, v16, v17);
    v20 = String.subscript.getter(15, v19, v16, v18);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    swift_bridgeObjectRelease(v18);
    v27 = static String._fromSubstring(_:)(v20, v22, v24, v26);
    v29 = v28;
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1000340E8();
    *(_QWORD *)(inited + 32) = v27;
    *(_QWORD *)(inited + 40) = v29;
    v30 = static os_log_type_t.debug.getter();
    sub_10001D7E0((uint64_t)v15, &_mh_execute_header, v30, "(CoreRE) [%{public}@] Cannot remove unknown client.", 51, 2, inited);
    swift_setDeallocating(inited);
    v31 = sub_1000131C0(&qword_1000852E0);
    swift_arrayDestroy(inited + 32, 1, v31);

  }
}

uint64_t sub_10003F358(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  void *object;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  unint64_t v81;
  char v82[72];
  _BYTE v83[24];
  _OWORD v84[2];
  uint64_t v85;
  uint64_t v86[3];
  uint64_t v87;
  uint64_t v88;
  char v89[72];
  char v90[32];
  uint64_t v91;

  v4 = v3;
  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v90, 0, 0);
  v6 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v74 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  inited = swift_initStackObject(v74, v89);
  *(_OWORD *)(inited + 16) = xmmword_100061930;
  v8 = a1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10RepBackend_uuid;
  v9 = v6;
  v76 = a1;
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  v13 = String.index(_:offsetBy:)(15, 8, v10, v11);
  v14 = String.subscript.getter(15, v13, v10, v12);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_bridgeObjectRelease(v12);
  v21 = v18;
  v22 = v8;
  v23 = static String._fromSubstring(_:)(v14, v16, v21, v20);
  v25 = v24;
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v26 = sub_1000340E8();
  *(_QWORD *)(inited + 64) = v26;
  *(_QWORD *)(inited + 32) = v23;
  v27 = inited + 32;
  *(_QWORD *)(inited + 40) = v25;
  v28 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
  sub_10001D7E0((uint64_t)v9, &_mh_execute_header, v28, "(CoreRE) [%{public}@] Adding new client.", 40, 2, inited);
  swift_setDeallocating(inited);
  v29 = sub_1000131C0(&qword_1000852E0);
  swift_arrayDestroy(v27, 1, v29);

  strcpy((char *)v86, "ClientScene-");
  BYTE5(v86[1]) = 0;
  HIWORD(v86[1]) = -5120;
  v30 = type metadata accessor for UUID(0);
  v31 = sub_1000154CC(&qword_100085328, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
  object = v32._object;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(object);
  v34 = sub_1000402F4(v86[0], v86[1]);
  v36 = v35;
  swift_bridgeObjectRelease(v86[1]);
  v37 = String.utf8CString.getter(v34, v36);
  swift_bridgeObjectRelease(v36);
  v38 = RESceneCreate(v37 + 32);
  swift_release(v37);
  RESceneSetRequiresAnchoring(v38, 0);
  type metadata accessor for Scene(0);
  v39 = static Scene.fromCore(_:)(v38);
  v40 = RERelease(v38);
  dispatch thunk of __ServiceLocator.sceneService.getter(v86, v40);
  v41 = v87;
  v42 = v88;
  sub_100015BEC(v86, v87);
  dispatch thunk of __SceneService.append(scene:)(v39, v41, v42);
  sub_100015C54(v86);
  v43 = _s14descr1000747C9C11ClientSceneCMa(0);
  swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  swift_retain(v76);
  swift_retain(v39);
  swift_retain(a2);
  v44 = sub_10003D7A0(v76, v39, a2, a3);
  v45 = *(void **)(v4 + 24);
  v46 = _s6CoreREO19SceneRenderingStateCMa(0);
  swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
  swift_unknownObjectRetain(v45);
  swift_retain(v44);
  v47 = v91;
  v48 = sub_100040C20(v45, v44);
  if (v47)
  {
    swift_release(v39);
    swift_release(v44);
  }
  else
  {
    v49 = v48;
    v79 = v29;
    v81 = v26;
    if (!*(_QWORD *)(v4 + 96))
      sub_1000403E8();
    v91 = v22;
    if ((dispatch thunk of __Engine.isRunning.getter() & 1) == 0)
      dispatch thunk of __Engine.__start()();
    objc_msgSend(*(id *)(v4 + 16), "setObject:forKey:", v49, v44);
    v50 = type metadata accessor for SceneEvents.Update(0);
    v85 = 0;
    memset(v84, 0, sizeof(v84));
    v51 = swift_allocObject(&unk_100074A88, 24, 7);
    swift_weakInit(v51 + 16, v4);
    v52 = swift_allocObject(&unk_100074AB0, 24, 7);
    swift_weakInit(v52 + 16, v44);
    v53 = v49;
    v77 = v49;
    v54 = swift_allocObject(&unk_100074AD8, 32, 7);
    *(_QWORD *)(v54 + 16) = v51;
    *(_QWORD *)(v54 + 24) = v52;
    Scene.subscribe<A>(to:on:_:)(v86, v50, v84, sub_100046744, v54, v50, &protocol witness table for SceneEvents.Update);
    swift_release(v54);
    sub_1000345E4((uint64_t)v84, &qword_100085318);
    sub_100046A34((uint64_t)v86, (uint64_t)v84, &qword_1000852E8);
    swift_beginAccess(v53 + 64, v83, 33, 0);
    sub_100046A78((uint64_t)v84, v53 + 64, &qword_1000852E8);
    swift_endAccess(v83);
    v55 = (void *)static OS_os_log.crlThreeDimensionalObjects;
    v56 = swift_initStackObject(v74, v82);
    *(_OWORD *)(v56 + 16) = xmmword_100061930;
    v75 = v55;
    v57 = UUID.uuidString.getter(v75);
    v59 = v58;
    v60 = String.index(_:offsetBy:)(15, 8, v57, v58);
    v61 = String.subscript.getter(15, v60, v57, v59);
    v63 = v62;
    v65 = v64;
    v67 = v66;
    swift_bridgeObjectRelease(v59);
    v68 = static String._fromSubstring(_:)(v61, v63, v65, v67);
    v70 = v69;
    v71 = swift_bridgeObjectRelease(v67);
    *(_QWORD *)(v56 + 56) = &type metadata for String;
    *(_QWORD *)(v56 + 64) = v81;
    *(_QWORD *)(v56 + 32) = v68;
    *(_QWORD *)(v56 + 40) = v70;
    v72 = static os_log_type_t.debug.getter(v71);
    sub_10001D7E0((uint64_t)v75, &_mh_execute_header, v72, "(CoreRE) [%{public}@] Added new client.", 39, 2, v56);
    swift_setDeallocating(v56);
    swift_arrayDestroy(v56 + 32, 1, v79);
    swift_release(v39);
    swift_release(v77);

  }
  return v44;
}

BOOL sub_10003F96C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE v25[24];

  v9 = sub_1000131C0((uint64_t *)&unk_100085370);
  __chkstk_darwin(v9);
  v11 = (double *)&v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v14);
  v18 = &v25[-v17 - 8];
  v19 = (char *)objc_msgSend(*(id *)(v4 + 16), "objectForKey:", a1);
  if (v19)
  {
    UUID.init()();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v16, v18, v12);
    v20 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
    v21 = (char *)v11 + *(int *)(v20 + 20);
    v22 = sub_1000131C0(&qword_100084D80);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a2, v22);
    *v11 = a3;
    v11[1] = a4;
    *((_BYTE *)v11 + *(int *)(v20 + 24)) = 0;
    (*(void (**)(double *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v11, 0, 1, v20);
    swift_beginAccess(&v19[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests], v25, 33, 0);
    sub_10003EB74((uint64_t)v11, (uint64_t)v16);
    swift_endAccess(v25);
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v18, v12);
    swift_release(v19);
  }
  return v19 != 0;
}

uint64_t sub_10003FB44()
{
  uint64_t v0;
  uint64_t result;

  v0 = _s6CoreREO6EngineCMa();
  swift_allocObject(v0, 104, 7);
  result = sub_10003FB7C();
  qword_10008D720 = result;
  return result;
}

uint64_t sub_10003FB7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];

  v1 = (_QWORD *)v0;
  v2 = type metadata accessor for __EngineServiceMaskRef(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __Engine.Configuration(0);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 517, 0);
  *(_OWORD *)(v0 + 48) = 0u;
  v10 = v0 + 48;
  *(_QWORD *)(v0 + 16) = v9;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  if (qword_100083000 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, (char *)v40 + 4, 0, 0);
  v11 = (id)static OS_os_log.crlThreeDimensionalObjects;
  v12 = static os_log_type_t.debug.getter();
  sub_10001D7E0((uint64_t)v11, &_mh_execute_header, v12, "(CoreRE) Loading CoreRE.Engine.", 31, 2, (uint64_t)&_swiftEmptyArrayStorage);

  v13 = __Engine.Configuration.init()();
  __Engine.Configuration.__createServices.getter(v13);
  type metadata accessor for REEngineServiceMask(0);
  v15 = v14;
  __EngineServiceMaskRef.__as<A>(_:)(v40, v14, v14);
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v5, v2);
  v17 = v40[0] & 0xFFFFDE3F;
  if ((v40[0] & 0x21C0) != 0)
    LODWORD(v40[0]) &= 0xFFFFDE3F;
  v38 = v15;
  LODWORD(v37[0]) = v17;
  static __EngineServiceMaskRef.__fromCore(_:)(v37);
  sub_100015C54(v37);
  v18 = __Engine.Configuration.__createServices.setter(v5);
  __Engine.Configuration.__updateServices.getter(v18);
  __EngineServiceMaskRef.__as<A>(_:)(v37, v15, v15);
  v16(v5, v2);
  LODWORD(v40[0]) = v37[0];
  if ((v37[0] & 0x21C0) != 0)
    LODWORD(v40[0]) = v37[0] & 0xFFFFDE3F;
  v38 = v15;
  LODWORD(v37[0]) &= 0xFFFFDE3F;
  static __EngineServiceMaskRef.__fromCore(_:)(v37);
  sub_100015C54(v37);
  __Engine.Configuration.__updateServices.setter(v5);
  type metadata accessor for __ServiceLocator(0);
  v19 = static __ServiceLocator.__createSharedIfNeeded(with:)(v8);
  v1[5] = static __ServiceLocator.shared.getter(v19);
  v1[4] = dispatch thunk of __ServiceLocator.engine.getter();
  dispatch thunk of __ServiceLocator.renderService.getter(v37);
  v20 = v38;
  v21 = v39;
  sub_100015BEC(v37, v38);
  v1[3] = dispatch thunk of __RenderService.device.getter(v20, v21);
  v22 = sub_100015C54(v37);
  dispatch thunk of __ServiceLocator.eventService.getter(v34, v22);
  v23 = v35;
  v24 = v36;
  sub_100015BEC(v34, v35);
  v25 = type metadata accessor for EngineRenderEvent(0);
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v26 = swift_allocObject(&unk_100074A88, 24, 7);
  swift_weakInit(v26 + 16, v1);
  EventService.subscribe<A>(to:on:componentType:_:)(v37, v25, v32, 0, 0, sub_100043AF0, v26, v23, v25, v24);
  swift_release(v26);
  sub_1000345E4((uint64_t)v32, &qword_100085318);
  swift_beginAccess(v10, v32, 33, 0);
  sub_100046A78((uint64_t)v37, v10, &qword_1000852E8);
  swift_endAccess(v32);
  v27 = sub_100015C54(v34);
  v28 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter(v27);
  result = REServiceLocatorGetECSService(v28);
  if (result)
  {
    REECSManagerAddDefaultSystems();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
    return (uint64_t)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003FF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10003FFA0();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10003FFA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  double CurrentTime;
  uint64_t RenderFrameSettings;
  float v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t RenderFrameWorkload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  Swift::Int v58;
  _OWORD v59[9];
  __int128 v60;
  uint64_t v61;

  v1 = v0;
  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter(v4);
  result = REServiceLocatorGetEngine();
  if (!result)
    return result;
  v9 = result;
  result = REServiceLocatorGetRenderManager(v7);
  if (!result || !*(_QWORD *)(v1 + 96))
    return result;
  v10 = *(_QWORD *)(v1 + 88);
  v11 = __CFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    goto LABEL_20;
  v13 = result;
  v38 = *(_QWORD *)(v1 + 96);
  v40 = v3;
  v41 = v2;
  *(_QWORD *)(v1 + 88) = v12;
  CurrentTime = REEngineGetCurrentTime(v9);
  v39 = v13;
  RenderFrameSettings = RERenderManagerCreateRenderFrameSettings(v13);
  v16 = CurrentTime;
  RERenderFrameSettingsSetTotalTime(v16);
  v17 = objc_msgSend(*(id *)(v1 + 16), "objectEnumerator");
  if (!v17)
    v17 = objc_msgSend(objc_allocWithZone((Class)NSEnumerator), "init");
  NSEnumerator.makeIterator()();

  NSFastEnumerationIterator.next()(&v60);
  if (!v61)
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
    v36 = v39;
    RenderFrameWorkload = RERenderManagerCreateRenderFrameWorkload(v39);
    RERenderFrameWorkloadConfigure(RenderFrameWorkload, RenderFrameSettings);
    RERenderGraphEmitterAssetExecute(v38, v36);
    RERenderFrameWorkloadCommit(RenderFrameWorkload);
    RERelease(RenderFrameWorkload);
    return RERelease(RenderFrameSettings);
  }
  v18 = (char *)&type metadata for Any + 8;
  while (1)
  {
    sub_10002BD90(&v60, v59);
    v19 = _s6CoreREO19SceneRenderingStateCMa(0);
    if (!swift_dynamicCast(v48, v59, v18, v19, 6))
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
      return RERelease(RenderFrameSettings);
    }
    v20 = v48[0];
    if (*(_BYTE *)(v48[0] + 256) == 1)
      break;
    swift_release(v48[0]);
LABEL_10:
    NSFastEnumerationIterator.next()(&v60);
    if (!v61)
      goto LABEL_15;
  }
  v21 = v6;
  v22 = v18;
  v23 = v1;
  v47 = *(_QWORD *)(v1 + 88);
  v24 = *(_QWORD *)(v48[0] + 16);
  v25 = *(_DWORD *)(v24 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration);
  v26 = *(_OWORD *)(v24
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                  + 16);
  v45 = *(_OWORD *)(v24
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                  + 32);
  v46 = v26;
  v44 = *(_OWORD *)(v24
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                  + 48);
  v27 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                  + 64);
  v28 = *(_OWORD *)(v24 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription);
  v42 = *(_OWORD *)(v24
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                  + 16);
  v43 = v28;
  v29 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                  + 32);
  v30 = *(_BYTE *)(v24
                 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                 + 40);
  v31 = RenderFrameSettings;
  v32 = *(_QWORD *)(v24
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                  + 48);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v32);
  v33 = sub_10003BF48();
  LODWORD(v48[0]) = v25;
  v49 = v46;
  v50 = v45;
  v51 = v44;
  v52 = v27;
  v53 = v43;
  v54 = v42;
  v55 = v29;
  v56 = v30;
  v57 = v32;
  v58 = v33;
  RenderFrameSettings = v31;
  nullsub_2(v48);
  sub_100046A34(v20 + 112, (uint64_t)v59, &qword_100085320);
  sub_100046A34((uint64_t)v48, v20 + 112, &qword_100085320);
  sub_100043AF8((uint64_t *)v59);
  result = RERenderFrameSettingsAddGpuSignalEvent(v31, *(_QWORD *)(v20 + 40), v47);
  v34 = *(_QWORD *)(v20 + 264);
  v11 = __CFADD__(v34, 1);
  v35 = v34 + 1;
  if (!v11)
  {
    *(_QWORD *)(v20 + 264) = v35;
    swift_release(v20);
    v1 = v23;
    v18 = v22;
    v6 = v21;
    goto LABEL_10;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000402F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  void *object;

  if ((sub_1000407E0(a1, a2, v2) & 1) != 0)
  {
    v5 = 1;
    while (1)
    {
      swift_bridgeObjectRetain(a2);
      v6._countAndFlagsBits = 45;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v7._object;
      String.append(_:)(v7);
      swift_bridgeObjectRelease(object);
      if ((sub_1000407E0(a1, a2, v2) & 1) == 0)
        break;
      swift_bridgeObjectRelease(a2);
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRetain(a2);
  }
  return a1;
}

void sub_1000403E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssetHandle;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(v0 + 96))
  {
    sub_100039B00(&_mh_execute_header, (uint64_t)"loadRenderGraphEmitter()", 24, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2, 259, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_10003ECEC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"loadRenderGraphEmitter()", 24, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2u, 259, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
  }
  else
  {
    v1 = v0;
    dispatch thunk of __ServiceLocator.assetService.getter(v10);
    v2 = v11;
    v3 = v12;
    sub_100015BEC(v10, v11);
    v4 = dispatch thunk of __REAssetService.__handle.getter(v2, v3);
    sub_100015C54(v10);
    AssetHandle = REAssetManagerCreateAssetHandle(v4, "engine:BuiltinRenderGraphResources/SimpleForward/simpleForwardCombinedPost.rerendergraphemitter");
    if (AssetHandle)
    {
      v6 = AssetHandle;
      REAssetHandleLoadNow();
      dispatch thunk of __ServiceLocator.renderService.getter(v10);
      v7 = v11;
      v8 = v12;
      sub_100015BEC(v10, v11);
      v9 = dispatch thunk of __RenderService.__coreRenderManager.getter(v7, v8);
      sub_100015C54(v10);
      RERenderGraphEmitterAssetRegisterProviders(v6, v9);
      *(_QWORD *)(v1 + 96) = v6;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100040554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char v12[24];
  char v13[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = a3 + 16;
    swift_beginAccess(v7, v12, 0, 0);
    Strong = swift_weakLoadStrong(v7);
    if (Strong)
    {
      v9 = Strong;
      v10 = objc_msgSend(*(id *)(v6 + 16), "objectForKey:", Strong);
      if (v10)
      {
        v11 = (uint64_t)v10;
        sub_100041280();
        swift_release(v6);
        v6 = v9;
        v9 = v11;
      }
      else
      {
        sub_100039B00(&_mh_execute_header, (uint64_t)"doUpdateCallback(client:update:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2, 307, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_10003ECEC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"doUpdateCallback(client:update:)", 32, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2u, 307, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
      }
      swift_release(v6);
      v6 = v9;
    }
    return swift_release(v6);
  }
  return result;
}

void sub_1000406C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    v2 = v0;
    dispatch thunk of __ServiceLocator.renderService.getter(v6);
    v3 = v7;
    v4 = v8;
    sub_100015BEC(v6, v7);
    v5 = dispatch thunk of __RenderService.__coreRenderManager.getter(v3, v4);
    sub_100015C54(v6);
    RERenderGraphEmitterAssetUnregisterProviders(v1, v5);
    RERelease(v1);
    *(_QWORD *)(v2 + 96) = 0;
  }
  else
  {
    sub_100039B00(&_mh_execute_header, (uint64_t)"unloadRenderGraphEmitter()", 26, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2, 277, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)&_swiftEmptyArrayStorage);
    sub_10003ECEC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)"unloadRenderGraphEmitter()", 26, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2u, 277, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
  }
}

uint64_t sub_1000407E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v6 = type metadata accessor for NSFastEnumerationIterator(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(*(id *)(a3 + 16), "keyEnumerator");
  NSEnumerator.makeIterator()();

  NSFastEnumerationIterator.next()(&v23);
  while (v24)
  {
    sub_10002BD90(&v23, v22);
    v11 = _s14descr1000747C9C11ClientSceneCMa(0);
    if (swift_dynamicCast(&v21, v22, (char *)&type metadata for Any + 8, v11, 6))
    {
      v12 = v21;
      v13 = dispatch thunk of Scene.name.getter();
      if (v13 == a1 && v14 == a2)
      {
        swift_bridgeObjectRelease(a2);
        swift_release(v12);
        v18 = 1;
        goto LABEL_12;
      }
      v16 = v14;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a1, a2, 0);
      swift_bridgeObjectRelease(v16);
      swift_release(v12);
      if ((v17 & 1) != 0)
      {
        v18 = 1;
        goto LABEL_12;
      }
    }
    NSFastEnumerationIterator.next()(&v23);
  }
  v18 = 0;
LABEL_12:
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v18;
}

uint64_t sub_10004097C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[7] = v8;
  v4[8] = v9;
  return swift_task_switch(sub_100040A10, v8, v9);
}

uint64_t sub_100040A10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100085300 + dword_100085300);
  v1 = (_QWORD *)swift_task_alloc(unk_100085304);
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_100040A90;
  return v3(0xA055690D9DB80000, 1, 0, 0, 1);
}

uint64_t sub_100040A90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  v5 = *(_QWORD *)(*v1 + 32);
  v4 = *(_QWORD *)(*v1 + 40);
  v6 = *(_QWORD *)(*v1 + 24);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_100040B78;
  else
    v7 = sub_100040B18;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100040B18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  if (!objc_msgSend(*(id *)(v1 + 16), "count"))
    dispatch thunk of __Engine.__stop()();
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040B78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040BB4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_1000345E4(v0 + 48, &qword_1000852E8);
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t _s6CoreREO6EngineCMa()
{
  return objc_opt_self(_TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE6Engine);
}

uint64_t sub_100040C20(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36[18];
  _OWORD v37[4];
  uint64_t v38;
  _OWORD v39[10];

  v4 = v2;
  *(_OWORD *)(v2 + 64) = 0u;
  v7 = v2 + 64;
  v8 = v2 + 112;
  *(_QWORD *)(v4 + 96) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  sub_10004674C(v39);
  sub_100046A34((uint64_t)v39, v8, &qword_100085320);
  *(_BYTE *)(v4 + 256) = 1;
  *(_QWORD *)(v4 + 264) = 0;
  v9 = v4
     + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_lastTextureResizeTimestamp;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_BYTE *)(v4
           + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_textureSizeIsStale) = 1;
  v11 = v4
      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(v4
           + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_viewDescriptorsValid) = 0;
  v12 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests;
  *(_QWORD *)(v4 + v12) = sub_10001EA68((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v13 = *(_OWORD *)(a2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration + 48);
  v37[2] = *(_OWORD *)(a2
                     + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                     + 32);
  v37[3] = v13;
  v38 = *(_QWORD *)(a2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration + 64);
  v14 = *(_OWORD *)(a2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration + 16);
  v37[0] = *(_OWORD *)(a2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration);
  v37[1] = v14;
  swift_unknownObjectRetain_n(a1, 2);
  swift_retain(a2);
  v15 = sub_10004D8DC((double *)v37);
  v17 = objc_msgSend((id)objc_opt_self(MTLTextureDescriptor), "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 81, v15, v16, 0);
  objc_msgSend(v17, "setStorageMode:", 2);
  objc_msgSend(v17, "setUsage:", 23);
  v18 = sub_10004DB7C(a1, v17, 0, 0);
  if (v3)
  {
    swift_unknownObjectRelease(a1);
    swift_release(a2);
    swift_release(*(_QWORD *)(v4 + 16));
    swift_unknownObjectRelease(*(_QWORD *)(v4 + 24));
    sub_1000345E4(v7, &qword_1000852E8);
    sub_100046A34(v8, (uint64_t)v36, &qword_100085320);
    sub_100043AF8(v36);
    sub_1000345E4(v4+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_lastTextureResizeTimestamp, (uint64_t *)&unk_100085330);
    swift_bridgeObjectRelease(*(_QWORD *)(v4
                                        + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests));
    v22 = _s6CoreREO19SceneRenderingStateCMa(0);
    swift_deallocPartialClassInstance(v4, v22, *(unsigned int *)(*(_QWORD *)v4 + 48), *(unsigned __int16 *)(*(_QWORD *)v4 + 52));
  }
  else
  {
    *(_QWORD *)(v4 + 32) = v18;
    *(_QWORD *)(v4 + 40) = v19;
    *(_QWORD *)(v4 + 48) = v20;
    *(_QWORD *)(v4 + 56) = v21;
    *(_BYTE *)(v4
             + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_textureSizeIsStale) = 0;
    Strong = swift_weakLoadStrong(a2 + 16);
    if (Strong)
    {
      v24 = Strong;
      v25 = *(void **)(v4 + 32);
      v26 = *(_QWORD *)(v4 + 40);
      v28 = *(_QWORD *)(v4 + 48);
      v27 = *(void **)(v4 + 56);
      swift_unknownObjectRetain(v25);
      swift_unknownObjectRetain(v26);
      swift_unknownObjectRetain(v28);
      v29 = v27;
      sub_100032C58(v25, v26, v28, v29);
      swift_release(v24);

      swift_unknownObjectRelease(v28);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v25);
    }
    if (*(_BYTE *)(v4
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState
                  + 8) == 1)
    {
      if (*(_QWORD *)(v4
                     + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState))
        v30 = 0x7065656C7361;
      else
        v30 = 0x656B617761;
      if (*(_QWORD *)(v4
                     + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState))
        v31 = 0xE600000000000000;
      else
        v31 = 0xE500000000000000;
    }
    else
    {
      v31 = 0x800000010005F9F0;
      v30 = 0xD000000000000011;
    }
    v32 = *(_QWORD *)(a2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_metadata);
    v33 = swift_bridgeObjectRetain(v32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
    v36[0] = v32;
    sub_100045088(v30, v31, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10003C360(v32);
    swift_release(a2);
    swift_unknownObjectRelease(a1);
  }
  return v4;
}

BOOL sub_100040FCC(uint64_t a1)
{
  float *v1;
  float *v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  double v7;
  __int128 v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  BOOL v13;
  float64x2_t v14;
  float v15;
  float v16;
  _BOOL8 result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  __int128 v25;
  __int128 v26;

  v2 = v1;
  v3 = a1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration;
  if (*(float *)(a1 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration) != *v1)
    return 1;
  v5 = 0;
  v6 = *(_OWORD *)(v3 + 16);
  v7 = *(double *)(v3 + 32);
  v8 = *((_OWORD *)v2 + 1);
  v9 = *((double *)v2 + 4);
  v10 = *(float64x2_t *)(v3 + 56);
  v11 = *(float64x2_t *)(v3 + 40);
  v12 = *(float64x2_t *)(v2 + 14);
  v13 = 1;
  v14 = *(float64x2_t *)(v2 + 10);
  while (1)
  {
    while (!v13)
    {
      if (v5 == 3)
        return 1;
      v13 = 0;
      ++v5;
    }
    v25 = v6;
    v15 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v26 = v8;
    v16 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v13 = v15 == v16;
    if (v5 == 3)
      break;
    ++v5;
  }
  result = 1;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v11, v14), (int32x4_t)vceqq_f64(v10, v12))), 0xFuLL))) & 1) != 0&& v15 == v16&& v7 == v9)
  {
    v19 = *(_QWORD *)(a1
                    + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                    + 32);
    v20 = *(unsigned __int8 *)(a1
                             + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                             + 40);
    v21 = *(_QWORD *)(a1
                    + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                    + 48);
    v22 = *((_QWORD *)v2 + 14);
    v23 = *((unsigned __int8 *)v2 + 120);
    if (sub_1000266BC(*(__n128 *)(a1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription), *(__n128 *)(a1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_sceneDescription+ 16), *(__n128 *)(v2 + 20), *(__n128 *)(v2 + 24)))
    {
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v21);
      v24 = sub_100022A98(v19, v22);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v19);
      if ((v24 & 1) != 0 && ((v20 ^ v23) & 1) == 0)
        return sub_10003BF48() != *((_QWORD *)v2 + 17);
    }
    return 1;
  }
  return result;
}

uint64_t sub_100041164(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;

  v3 = v2
     + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState;
  v4 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState);
  v5 = *(unsigned __int8 *)(v2
                          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState
                          + 8);
  *(_QWORD *)v3 = result;
  *(_BYTE *)(v3 + 8) = a2 & 1;
  if ((a2 & 1) != 0)
  {
    if (result)
    {
      if (!v4)
        v5 = 0;
      if (v5 == 1)
        return result;
LABEL_10:
      v6 = 0x7065656C7361;
      if (!result)
        v6 = 0x656B617761;
      v7 = 0xE600000000000000;
      if (!result)
        v7 = 0xE500000000000000;
      if ((a2 & 1) != 0)
        v8 = v6;
      else
        v8 = 0xD000000000000011;
      if ((a2 & 1) != 0)
        v9 = v7;
      else
        v9 = 0x800000010005F9F0;
      v10 = *(_QWORD *)(*(_QWORD *)(v2 + 16)
                      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_metadata);
      v11 = swift_bridgeObjectRetain(v10);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      sub_100045088(v8, v9, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(0x8000000000000000);
      return sub_10003C360(v10);
    }
    if (v4)
      LOBYTE(v5) = 0;
    if ((v5 & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    if (v4 != result)
      LOBYTE(v5) = 1;
    if ((v5 & 1) != 0)
      goto LABEL_10;
  }
  return result;
}

uint64_t sub_100041280()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  double v52;
  void (*v53)(char *, uint64_t);
  char v54;
  void *v55;
  void *v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ComponentType;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98[24];
  _QWORD v99[3];
  _OWORD v100[4];
  uint64_t v101;
  _OWORD v102[4];
  uint64_t v103;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for __EntityRef(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000131C0((uint64_t *)&unk_100085330);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v86 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v86 - v15;
  v97 = type metadata accessor for Date(0);
  v96 = *(_QWORD *)(v97 - 8);
  v17 = __chkstk_darwin(v97);
  v95 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v94 = (char *)&v86 - v19;
  if ((sub_100041A14() & 1) != 0)
  {
    v87 = v14;
    v88 = v11;
    v90 = v5;
    v91 = v4;
    if (*((_BYTE *)v0
         + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState
         + 8) == 1
      && *(_QWORD *)((char *)v0
                   + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState))
    {
      v21 = (void *)v0[4];
      v20 = v0[5];
      v22 = v0[6];
      v23 = (void *)v3[7];
      swift_unknownObjectRetain(v3[6]);
      v24 = v23;
      swift_unknownObjectRetain(v21);
      swift_unknownObjectRetain(v20);
      if ((char *)objc_msgSend(v21, "setPurgeableState:", 1) - 3 < (char *)2)
        objc_msgSend(v21, "setPurgeableState:", 2);
      swift_unknownObjectRelease(v21);
      swift_unknownObjectRelease(v20);
      swift_unknownObjectRelease(v22);

    }
    v89 = v7;
    v93 = v2;
    sub_100041164(0, 1);
    *((_BYTE *)v3 + 256) = 1;
    v25 = (void *)v3[4];
    v26 = v3[5];
    v27 = v3[6];
    v28 = (void *)v3[7];
    v92 = v3[2];
    v29 = (__int128 *)(v92 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration);
    v30 = *(_OWORD *)(v92
                    + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                    + 48);
    v102[2] = *(_OWORD *)(v92
                        + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                        + 32);
    v102[3] = v30;
    v103 = *(_QWORD *)(v92
                     + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                     + 64);
    v31 = *(_OWORD *)(v92
                    + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration
                    + 16);
    v102[0] = *(_OWORD *)(v92
                        + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_configuration);
    v102[1] = v31;
    swift_unknownObjectRetain(v25);
    swift_unknownObjectRetain(v26);
    swift_unknownObjectRetain(v27);
    v32 = v28;
    v33 = (id)sub_10004D8DC((double *)v102);
    v35 = v34;
    if (objc_msgSend(v25, "width") == v33)
    {
      v36 = objc_msgSend(v25, "height");
      swift_unknownObjectRelease(v25);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v27);

      if (v36 == v35)
        goto LABEL_27;
    }
    else
    {
      swift_unknownObjectRelease(v25);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v27);

    }
    if (v3[33] >= 0x79uLL)
    {
      v46 = (uint64_t)v3
          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_lastTextureResizeTimestamp;
      swift_beginAccess((char *)v3+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_lastTextureResizeTimestamp, v98, 0, 0);
      sub_10002E530(v46, (uint64_t)v16, (uint64_t *)&unk_100085330);
      v47 = v96;
      v48 = v97;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v16, 1, v97) == 1)
      {
        sub_1000345E4((uint64_t)v16, (uint64_t *)&unk_100085330);
      }
      else
      {
        v49 = v94;
        v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v47 + 32))(v94, v16, v48);
        v51 = v95;
        Date.init()(v50);
        v52 = Date.timeIntervalSince(_:)(v49);
        v53 = *(void (**)(char *, uint64_t))(v47 + 8);
        v53(v51, v48);
        v53(v49, v48);
        if (v52 < 1.0)
        {
          v54 = 1;
LABEL_26:
          *((_BYTE *)v3
          + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_textureSizeIsStale) = v54;
LABEL_27:
          sub_10003BA7C();
          return sub_100041BA0();
        }
      }
    }
    v55 = (void *)v3[5];
    v56 = (void *)v3[6];
    v57 = (void *)v3[3];
    v58 = v29[3];
    v100[2] = v29[2];
    v100[3] = v58;
    v101 = *((_QWORD *)v29 + 8);
    v60 = *v29;
    v59 = v29[1];
    v61 = v55;
    v100[0] = v60;
    v100[1] = v59;
    swift_unknownObjectRetain_n(v55, 2);
    swift_unknownObjectRetain_n(v56, 2);
    swift_unknownObjectRetain(v57);
    v62 = sub_10004D8DC((double *)v100);
    v64 = objc_msgSend((id)objc_opt_self(MTLTextureDescriptor), "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 81, v62, v63, 0);
    objc_msgSend(v64, "setStorageMode:", 2);
    objc_msgSend(v64, "setUsage:", 23);
    v65 = v93;
    v66 = sub_10004DB7C(v57, v64, v61, v56);
    if (v65)
    {
      swift_unknownObjectRelease(v56);
      swift_unknownObjectRelease(v61);
      *((_BYTE *)v3 + 256) = 0;
      v70 = *(_QWORD *)(v92 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraEntity);
      v71 = swift_retain(v70);
      v72 = v89;
      dispatch thunk of Entity.__coreEntity.getter(v71);
      swift_release(v70);
      __EntityRef.__as<A>(_:)(v99, &type metadata for OpaquePointer, &type metadata for OpaquePointer);
      v73 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v72, v91);
      v74 = v99[0];
      ComponentType = RECameraViewDescriptorsComponentGetComponentType(v73);
      v76 = REEntityGetOrAddComponentByClass(v74, ComponentType);
      v77 = RECameraViewDescriptorsComponentClearCameraViewDescriptors(v76);
      *((_BYTE *)v3
      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_viewDescriptorsValid) = 0;
      return swift_willThrow(v77);
    }
    v78 = v66;
    v79 = v67;
    v80 = v68;
    v81 = v69;
    sub_100046930((uint64_t)v66, v67, v68, v69);
    swift_unknownObjectRelease(v78);
    swift_unknownObjectRelease(v79);
    swift_unknownObjectRelease(v80);

    v82 = (uint64_t)v87;
    Date.init()(v83);
    swift_unknownObjectRelease(v61);
    swift_unknownObjectRelease(v56);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v82, 0, 1, v97);
    v84 = (uint64_t)v88;
    sub_100046A34(v82, (uint64_t)v88, (uint64_t *)&unk_100085330);
    v85 = (uint64_t)v3
        + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_lastTextureResizeTimestamp;
    swift_beginAccess((char *)v3+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_lastTextureResizeTimestamp, v99, 33, 0);
    sub_100046A78(v84, v85, (uint64_t *)&unk_100085330);
    swift_endAccess(v99);
    v54 = 0;
    goto LABEL_26;
  }
  v37 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraEntity);
  v38 = swift_retain(v37);
  dispatch thunk of Entity.__coreEntity.getter(v38);
  swift_release(v37);
  __EntityRef.__as<A>(_:)(v99, &type metadata for OpaquePointer, &type metadata for OpaquePointer);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v40 = v99[0];
  v41 = RECameraViewDescriptorsComponentGetComponentType(v39);
  v42 = REEntityGetOrAddComponentByClass(v40, v41);
  RECameraViewDescriptorsComponentClearCameraViewDescriptors(v42);
  *((_BYTE *)v3
  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_viewDescriptorsValid) = 0;
  *((_BYTE *)v3 + 256) = 0;
  v43 = *(_QWORD *)((char *)v3
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState);
  if (*((_BYTE *)v3
       + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_awakeState
       + 8) == 1)
  {
    v44 = v43 != 0;
    result = 1;
    return sub_100041164(result, v44);
  }
  result = v43 + 1;
  if (!__OFADD__(v43, 1))
  {
    if (result > 59)
    {
      objc_msgSend((id)v3[4], "setPurgeableState:", 3);
      result = 1;
      v44 = 1;
    }
    else
    {
      v44 = 0;
    }
    return sub_100041164(result, v44);
  }
  __break(1u);
  return result;
}

uint64_t sub_100041A14()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[18];
  uint64_t v10[18];
  _DWORD v11[4];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = objc_msgSend(*(id *)(v0 + 48), "signaledValue");
  if (v2 != objc_msgSend(*(id *)(v1 + 40), "signaledValue"))
    return 0;
  sub_100046A34(v1 + 112, (uint64_t)v10, &qword_100085320);
  sub_100046A34((uint64_t)v10, (uint64_t)v11, &qword_100085320);
  if (sub_100046918((uint64_t)v11) == 1)
  {
    v3 = 1;
  }
  else
  {
    v22 = v11[0];
    v23 = v12;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    v27 = v16;
    v28 = v17;
    v29 = v18;
    v30 = v19;
    v31 = v20;
    v32 = v21;
    v5 = *(_QWORD *)(v1 + 16);
    sub_100046A34((uint64_t)v10, (uint64_t)v9, &qword_100085320);
    v6 = v9[16];
    swift_bridgeObjectRetain(v9[14]);
    swift_bridgeObjectRetain(v6);
    v3 = sub_100040FCC(v5);
    sub_100043AF8(v10);
  }
  v7 = sub_10003BDA4();
  v8 = v1
     + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests;
  swift_beginAccess(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests, v9, 0, 0);
  if (v3 || (v7 & 1) != 0 || *(uint64_t *)(*(_QWORD *)v8 + 16) > 0 || *(_QWORD *)(v1 + 264) <= 0x77uLL)
    return 1;
  else
    return *(unsigned __int8 *)(v1
                              + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_textureSizeIsStale);
}

uint64_t sub_100041BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t ComponentType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t result;
  int64_t v36;
  unint64_t v37;
  unint64_t i;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD v48[3];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000131C0(&qword_100083780);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __EntityRef(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraEntity;
  v45 = *(_QWORD *)(v0 + 16);
  v14 = *(_QWORD *)(v45 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE11ClientScene_cameraEntity);
  v15 = swift_retain(v14);
  dispatch thunk of Entity.__coreEntity.getter(v15);
  swift_release(v14);
  __EntityRef.__as<A>(_:)(v48, &type metadata for OpaquePointer, &type metadata for OpaquePointer);
  v16 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v46 = v9;
  v17 = v16(v12, v9);
  v18 = v48[0];
  ComponentType = RECameraViewDescriptorsComponentGetComponentType(v17);
  v47 = REEntityGetOrAddComponentByClass(v18, ComponentType);
  v44 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_viewDescriptorsValid;
  if ((*(_BYTE *)(v1
                 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_viewDescriptorsValid) & 1) == 0)
  {
    v20 = *(_QWORD *)(v45 + v13);
    v21 = swift_retain(v20);
    dispatch thunk of Entity.__coreEntity.getter(v21);
    swift_release(v20);
    __EntityRef.__as<A>(_:)(v48, &type metadata for OpaquePointer, &type metadata for OpaquePointer);
    v22 = v16(v12, v46);
    v23 = v48[0];
    v24 = RECameraViewDescriptorsComponentGetComponentType(v22);
    v25 = REEntityGetOrAddComponentByClass(v23, v24);
    RECameraViewDescriptorsComponentClearCameraViewDescriptors(v25);
    *(_BYTE *)(v1 + v44) = 0;
    v26 = v47;
    v27 = RECameraViewDescriptorsComponentAddViewDescriptor(v47);
    RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture(v26, v27, "Color", *(_QWORD *)(v1 + 32), 0);
    RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport(v26, v27, 0, 0.0, 0.0, 1.0, 1.0);
    v28 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct(v26, v27);
    RERenderGraphDataStructAddFloat4(v28, "clearColor", (__n128)0);
    RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct(v26, v27, v28);
    RERelease(v28);
  }
  v29 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests);
  swift_beginAccess(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests, v48, 0, 0);
  v30 = *v29;
  v31 = *(_QWORD *)(*v29 + 64);
  v45 = *v29 + 64;
  v32 = 1 << *(_BYTE *)(v30 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v46 = (unint64_t)(v32 + 63) >> 6;
  result = swift_bridgeObjectRetain(v30);
  v36 = 0;
  if (!v34)
    goto LABEL_7;
LABEL_6:
  v37 = __clz(__rbit64(v34));
  v34 &= v34 - 1;
  for (i = v37 | (v36 << 6); ; i = __clz(__rbit64(v40)) + (v36 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v3 + 72) * i, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
      goto LABEL_29;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    v42 = objc_msgSend(*(id *)(v1 + 32), "device");
    sub_1000423CC((uint64_t)v5, v47, v42);
    swift_unknownObjectRelease(v42);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v34)
      goto LABEL_6;
LABEL_7:
    v39 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v39 >= v46)
      goto LABEL_28;
    v40 = *(_QWORD *)(v45 + 8 * v39);
    ++v36;
    if (!v40)
    {
      v36 = v39 + 1;
      if (v39 + 1 >= v46)
        goto LABEL_28;
      v40 = *(_QWORD *)(v45 + 8 * v36);
      if (!v40)
      {
        v36 = v39 + 2;
        if (v39 + 2 >= v46)
          goto LABEL_28;
        v40 = *(_QWORD *)(v45 + 8 * v36);
        if (!v40)
        {
          v36 = v39 + 3;
          if (v39 + 3 >= v46)
            goto LABEL_28;
          v40 = *(_QWORD *)(v45 + 8 * v36);
          if (!v40)
          {
            v36 = v39 + 4;
            if (v39 + 4 >= v46)
              goto LABEL_28;
            v40 = *(_QWORD *)(v45 + 8 * v36);
            if (!v40)
              break;
          }
        }
      }
    }
LABEL_24:
    v34 = (v40 - 1) & v40;
  }
  v41 = v39 + 5;
  if (v41 >= v46)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
LABEL_29:
    result = swift_release(v30);
    *(_BYTE *)(v1 + v44) = 1;
    return result;
  }
  v40 = *(_QWORD *)(v45 + 8 * v41);
  if (v40)
  {
    v36 = v41;
    goto LABEL_24;
  }
  while (1)
  {
    v36 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v36 >= v46)
      goto LABEL_28;
    v40 = *(_QWORD *)(v45 + 8 * v36);
    ++v41;
    if (v40)
      goto LABEL_24;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t (*sub_100042058(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10004209C(uint64_t a1, void *a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  char v47[24];

  v41 = a4;
  v38 = a3;
  v42 = a2;
  v6 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000131C0(&qword_100084D80);
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000131C0((uint64_t *)&unk_100085370);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v38 - v16;
  v18 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t *)(v4
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests);
  swift_beginAccess(v4+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests, v47, 0, 0);
  v23 = *v22;
  v24 = *(_QWORD *)(*v22 + 16);
  v45 = a1;
  if (!v24)
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v27(v17, 1, 1, v18);
LABEL_7:
    sub_1000345E4((uint64_t)v17, (uint64_t *)&unk_100085370);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(v23);
  v25 = sub_10002501C(a1);
  if ((v26 & 1) != 0)
  {
    sub_100046890(*(_QWORD *)(v23 + 56) + *(_QWORD *)(v19 + 72) * v25, (uint64_t)v17);
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v27(v17, 0, 1, v18);
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v27(v17, 1, 1, v18);
  }
  swift_bridgeObjectRelease(v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    goto LABEL_7;
  sub_10002BDA4((uint64_t)v17, (uint64_t)v21);
  v29 = v39;
  v28 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v11, &v21[*(int *)(v18 + 20)], v40);
  v30 = v41;
  if ((v41 & 0x100) != 0)
  {
    v32 = sub_1000133A8();
    v33 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v32, 0, 0);
    v34 = (uint64_t)v42;
    v35 = v38;
    *(_QWORD *)v36 = v42;
    *(_QWORD *)(v36 + 8) = v35;
    *(_BYTE *)(v36 + 16) = v30;
    v46[0] = v33;
    sub_100014E74(v34, v35, v30);
    CheckedContinuation.resume(throwing:)(v46, v28);
  }
  else
  {
    v46[0] = v42;
    v31 = v42;
    CheckedContinuation.resume(returning:)(v46, v28);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v28);
  sub_100046768((uint64_t)v21);
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v8, v45, v44);
  v27(v15, 1, 1, v18);
  swift_beginAccess(v22, v46, 33, 0);
  sub_10003EB74((uint64_t)v15, (uint64_t)v8);
  return swift_endAccess(v46);
}

uint64_t sub_1000423CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  double v24;
  double v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD);
  void (*v46)(_QWORD *);
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t RenderGraphDataStruct;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  id v56;
  uint64_t v57;
  _QWORD v58[4];
  _QWORD aBlock[5];
  uint64_t v60;
  char v61[32];

  v56 = a3;
  v54 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v55 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - v9;
  v11 = sub_1000131C0((uint64_t *)&unk_100085370);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (double *)((char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = v3;
  v18 = (uint64_t *)(v3
                  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests);
  swift_beginAccess(v18, v61, 0, 0);
  v19 = *v18;
  if (!*(_QWORD *)(v19 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    return sub_1000345E4((uint64_t)v13, (uint64_t *)&unk_100085370);
  }
  v53 = v6;
  swift_bridgeObjectRetain(v19);
  v20 = sub_10002501C(a1);
  if ((v21 & 1) != 0)
  {
    sub_100046890(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v15 + 72) * v20, (uint64_t)v13);
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v22, 1, v14);
  swift_bridgeObjectRelease(v19);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v52(v13, 1, v14) == 1)
    return sub_1000345E4((uint64_t)v13, (uint64_t *)&unk_100085370);
  result = sub_10002BDA4((uint64_t)v13, (uint64_t)v17);
  if ((*((_BYTE *)v17 + *(int *)(v14 + 24)) & 1) != 0)
    return sub_100046768((uint64_t)v17);
  v24 = *v17;
  if ((~*(_QWORD *)v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v51 = v5;
  if (v24 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v25 = v17[1];
  v26 = v53;
  if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v25 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v25 < 9.22337204e18)
  {
    v27 = objc_msgSend((id)objc_opt_self(MTLTextureDescriptor), "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 81, (uint64_t)v24, (uint64_t)v25, 0);
    objc_msgSend(v27, "setUsage:", 23);
    objc_msgSend(v27, "setStorageMode:", 0);
    v28 = objc_msgSend(v56, "newTextureWithDescriptor:", v27);

    if (v28)
    {
      RenderGraphDataStruct = RERenderGraphCreateRenderGraphDataStruct("SnapshotViewDescriptorSettings");
      RERenderGraphDataStructAddFloat4(RenderGraphDataStruct, "clearColor", (__n128)0);
      v29 = swift_allocObject(&unk_100074B00, 24, 7);
      swift_weakInit(v29 + 16, v57);
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
      v30 = v26;
      v31 = v51;
      v49(v10, a1, v51);
      v32 = *(unsigned __int8 *)(v30 + 80);
      v33 = (v32 + 24) & ~v32;
      v34 = (v7 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
      v35 = swift_allocObject(&unk_100074B28, v34 + 8, v32 | 7);
      *(_QWORD *)(v35 + 16) = v29;
      v36 = v35 + v33;
      v37 = v53;
      (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v36, v10, v31);
      *(_QWORD *)(v35 + v34) = v28;
      aBlock[4] = sub_100046834;
      v60 = v35;
      v38 = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004296C;
      aBlock[3] = &unk_100074B40;
      v39 = _Block_copy(aBlock);
      v40 = v60;
      swift_unknownObjectRetain(v28);
      swift_release(v40);
      v56 = v28;
      v41 = v28;
      v42 = RenderGraphDataStruct;
      RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings(v54, v41, RenderGraphDataStruct, v39);
      _Block_release(v39);
      v43 = v55;
      v49(v55, a1, v31);
      v44 = v37;
      v45 = sub_100042058((uint64_t)aBlock);
      v46 = sub_100042998(v58);
      v48 = v47;
      if (!v52(v47, 1, v14))
        v48[*(int *)(v14 + 24)] = 1;
      ((void (*)(_QWORD *, _QWORD))v46)(v58, 0);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v38);
      ((void (*)(_QWORD *, _QWORD))v45)(aBlock, 0);
      RERelease(v42);
      swift_unknownObjectRelease(v56);
    }
    else
    {
      sub_10004209C(a1, (void *)0xD000000000000022, 0x800000010005FA40, 261);
    }
    return sub_100046768((uint64_t)v17);
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000428FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_100042A7C(a2, a3);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10004296C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void (*sub_100042998(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_1000461E4(v2, (uint64_t)v5);
  return sub_100042A28;
}

void sub_100042A28(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void sub_100042A7C(uint64_t a1, uint64_t a2)
{
  CGColorSpaceRef v4;
  CGColorSpaceRef v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  CGColorSpace *v9;
  NSString *v10;
  NSString *v11;
  unint64_t v12;
  id v13;
  Class isa;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  char v22[112];

  v4 = CGColorSpaceCreateWithName(kCGColorSpaceLinearSRGB);
  if (v4)
  {
    v5 = v4;
    v6 = sub_1000131C0((uint64_t *)&unk_100085360);
    inited = swift_initStackObject(v6, v22);
    *(_OWORD *)(inited + 16) = xmmword_100061920;
    *(_QWORD *)(inited + 32) = kCIContextWorkingColorSpace;
    type metadata accessor for CGColorSpace(0);
    *(_QWORD *)(inited + 40) = v5;
    *(_QWORD *)(inited + 64) = v8;
    *(_QWORD *)(inited + 72) = kCIContextOutputColorSpace;
    *(_QWORD *)(inited + 104) = v8;
    *(_QWORD *)(inited + 80) = v5;
    v9 = v5;
    v10 = kCIContextWorkingColorSpace;
    v11 = kCIContextOutputColorSpace;
    v12 = sub_10001EC18(inited);
    v13 = objc_allocWithZone((Class)CIContext);
    type metadata accessor for CIContextOption(0);
    sub_1000154CC(&qword_100083868, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&unk_10006128C);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v12);
    v15 = objc_msgSend(v13, "initWithOptions:", isa);

    v16 = objc_msgSend(objc_allocWithZone((Class)CIImage), "initWithMTLTexture:options:", a2, 0);
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v16, "imageByApplyingCGOrientation:", 4);

      if (v18)
      {
        objc_msgSend(v18, "extent");
        v19 = objc_msgSend(v15, "createCGImage:fromRect:format:colorSpace:", v18, kCIFormatBGRA8, v9);
        if (v19)
        {
          v20 = v19;
          v21 = v19;
          sub_10004209C(a1, v20, 0, 0);

LABEL_8:
          return;
        }

      }
    }
    sub_10004209C(a1, (void *)0xD000000000000024, 0x800000010005FA10, 261);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_100042CB0()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) != 1)
    return 0xD000000000000011;
  if (*(_QWORD *)v0)
    return 0x7065656C7361;
  return 0x656B617761;
}

uint64_t sub_100042D0C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

_QWORD *sub_100042D48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5[18];

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  v1 = v0[5];
  v2 = v0[6];
  v3 = (void *)v0[7];
  swift_unknownObjectRelease(v0[4]);
  swift_unknownObjectRelease(v1);
  swift_unknownObjectRelease(v2);

  sub_1000345E4((uint64_t)(v0 + 8), &qword_1000852E8);
  sub_100046A34((uint64_t)(v0 + 14), (uint64_t)v5, &qword_100085320);
  sub_100043AF8(v5);
  sub_1000345E4((uint64_t)v0+ OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_lastTextureResizeTimestamp, (uint64_t *)&unk_100085330);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_snapshotRequests));
  return v0;
}

uint64_t sub_100042DF8()
{
  _QWORD *v0;

  v0 = sub_100042D48();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100042E18()
{
  return _s6CoreREO19SceneRenderingStateCMa(0);
}

uint64_t _s6CoreREO19SceneRenderingStateCMa(uint64_t a1)
{
  return sub_100012AE4(a1, (uint64_t *)&unk_100084FC0, (uint64_t)&_s6CoreREO19SceneRenderingStateCMn);
}

void sub_100042E34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  v4[2] = &unk_100064750;
  v4[3] = &unk_100064768;
  v4[4] = &unk_100064780;
  v4[5] = &unk_100064798;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100042F08(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_100064798;
    v4[9] = &unk_1000647B0;
    v4[10] = &unk_100064798;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
  }
}

void sub_100042F08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100084FD0)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100084FD0);
  }
}

_QWORD *sub_100042F5C(_OWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1000131C0(&qword_100084D80);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100043004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1000131C0(&qword_100084D80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *sub_100043040(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1000131C0(&qword_100084D80);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1000430BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1000131C0(&qword_100084D80);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_100043140(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1000131C0(&qword_100084D80);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1000431BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1000131C0(&qword_100084D80);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100043238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100043244);
}

uint64_t sub_100043244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_1000131C0(&qword_100084D80);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1000432D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000432E4);
}

uint64_t sub_1000432E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1000131C0(&qword_100084D80);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(uint64_t a1)
{
  return sub_100012AE4(a1, (uint64_t *)&unk_100085278, (uint64_t)&_s6CoreREO19SceneRenderingStateC15SnapshotRequestVMn);
}

void sub_100043378(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000647D8;
  sub_1000433F4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100064798;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1000433F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100085288)
  {
    type metadata accessor for CGImage(255);
    v3 = v2;
    v4 = sub_1000134AC(&qword_100084D00);
    v5 = type metadata accessor for CheckedContinuation(a1, v3, v4, &protocol self-conformance witness table for Error);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100085288);
  }
}

uint64_t _s6CoreREO19SceneRenderingStateC10AwakeStateOwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s6CoreREO19SceneRenderingStateC10AwakeStateOwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000434B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000434D0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *_s6CoreREO19SceneRenderingStateC10AwakeStateOMa()
{
  return &_s6CoreREO19SceneRenderingStateC10AwakeStateON;
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 112);
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

__n128 _s6CoreREO19SceneRenderingStateC12FrameReceiptVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s6CoreREO19SceneRenderingStateC12FrameReceiptVMa()
{
  return &_s6CoreREO19SceneRenderingStateC12FrameReceiptVN;
}

ValueMetadata *_s6CoreREOMa()
{
  return &_s6CoreREON;
}

uint64_t sub_1000437B4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000437E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000852F4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100015350;
  return sub_10004097C(a1, v4, v5, v6);
}

uint64_t sub_10004384C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_1000438F0, 0, 0);
}

uint64_t sub_1000438F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_1000154CC(&qword_100085308, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_1000154CC(&qword_100085310, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100043A08;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100043A08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_100043AB4, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100043AB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100043AF0(uint64_t a1)
{
  uint64_t v1;

  return sub_10003FF4C(a1, v1);
}

uint64_t *sub_100043AF8(uint64_t *a1)
{
  sub_100043B50(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t sub_100043B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t result;

  result = a15;
  if (a15)
  {
    swift_bridgeObjectRelease(a15);
    return swift_bridgeObjectRelease(a17);
  }
  return result;
}

Swift::Int sub_100043B88(uint64_t a1, uint64_t a2)
{
  return sub_100043EC4(a1, a2, &qword_100084A28);
}

Swift::Int sub_100043B94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000131C0((uint64_t *)&unk_100085390);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100043EB8(uint64_t a1, uint64_t a2)
{
  return sub_100043EC4(a1, a2, &qword_100084CF8);
}

Swift::Int sub_100043EC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  char v43;
  _QWORD v44[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1000131C0(a3);
  v43 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v40 = v4;
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v42 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v41 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v6);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v23 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v24 = v23 | (v15 << 6);
      }
      else
      {
        v25 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v25 >= v41)
          goto LABEL_36;
        v26 = v42[v25];
        ++v15;
        if (!v26)
        {
          v15 = v25 + 1;
          if (v25 + 1 >= v41)
            goto LABEL_36;
          v26 = v42[v15];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v41)
            {
LABEL_36:
              swift_release(v6);
              v4 = v40;
              if ((v43 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v6 + 32);
                if (v39 >= 64)
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v39;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v26 = v42[v27];
            if (!v26)
            {
              while (1)
              {
                v15 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_43;
                if (v15 >= v41)
                  goto LABEL_36;
                v26 = v42[v15];
                ++v27;
                if (v26)
                  goto LABEL_33;
              }
            }
            v15 = v27;
          }
        }
LABEL_33:
        v12 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v15 << 6);
      }
      v32 = 16 * v24;
      v33 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v32);
      v35 = *v33;
      v34 = v33[1];
      v36 = (uint64_t *)(*(_QWORD *)(v6 + 56) + v32);
      v38 = *v36;
      v37 = v36[1];
      if ((v43 & 1) == 0)
      {
        swift_retain(v37);
        swift_bridgeObjectRetain(v34);
        swift_retain(v38);
      }
      Hasher.init(_seed:)(v44, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v44, v35, v34);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v30 = v18 == v29;
          if (v18 == v29)
            v18 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v31 == -1);
        v19 = __clz(__rbit64(~v31)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v35;
      v21[1] = v34;
      v22 = (_QWORD *)(*(_QWORD *)(v9 + 56) + v20);
      *v22 = v38;
      v22[1] = v37;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_1000441D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000131C0(&qword_100084158);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64)
                  bzero((void *)(v5 + 64), 8 * v35);
                else
                  *v10 = v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(v5 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v29);
      v32 = *(_QWORD *)(v30 + v29);
      if ((a2 & 1) == 0)
        swift_retain(*(_QWORD *)(v30 + v29));
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v31);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v31;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10004448C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000131C0((uint64_t *)&unk_100085340);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v36 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v36 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v36 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v22);
    v32 = *v31;
    v33 = v31[1];
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain(v33);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, 0x617453656B617761, 0xEA00000000006574);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19);
    *v20 = v32;
    v20[1] = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v24 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10004478C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v3 = v2;
  v6 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  v51 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000131C0(&qword_100084168);
  v52 = a2;
  v13 = a2;
  v14 = v12;
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, v13);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_43;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v49 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v47 = v2;
  v48 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  result = swift_retain(v14);
  v23 = 0;
  for (i = v14; ; v14 = i)
  {
    if (v20)
    {
      v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v26 = v25 | (v23 << 6);
      goto LABEL_24;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v27 >= v48)
      break;
    v28 = v49;
    v29 = v49[v27];
    ++v23;
    if (!v29)
    {
      v23 = v27 + 1;
      if (v27 + 1 >= v48)
        goto LABEL_36;
      v29 = v49[v23];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v48)
        {
LABEL_36:
          swift_release(v14);
          v3 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v29 = v49[v30];
        if (!v29)
        {
          while (1)
          {
            v23 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_45;
            if (v23 >= v48)
              goto LABEL_36;
            v29 = v49[v23];
            ++v30;
            if (v29)
              goto LABEL_23;
          }
        }
        v23 = v30;
      }
    }
LABEL_23:
    v20 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_24:
    v31 = *(_QWORD *)(v9 + 72);
    v32 = *(_QWORD *)(v14 + 48) + v31 * v26;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v32, v8);
      v33 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v51 + 72);
      sub_10002BDA4(v33 + v34 * v26, v53);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v32, v8);
      v35 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v51 + 72);
      sub_100046890(v35 + v34 * v26, v53);
    }
    v36 = *(_QWORD *)(v16 + 40);
    v37 = sub_1000154CC(&qword_100084170, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v8, v37);
    v38 = -1 << *(_BYTE *)(v16 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v21 + 8 * (v39 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v21 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v21 + 8 * v40);
      }
      while (v44 == -1);
      v24 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v16 + 48) + v24 * v31, v11, v8);
    result = sub_10002BDA4(v53, *(_QWORD *)(v16 + 56) + v24 * v34);
    ++*(_QWORD *)(v16 + 16);
  }
  swift_release(v14);
  v3 = v47;
  v28 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v14 + 32);
  if (v45 >= 64)
    bzero(v28, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v45;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_43:
  result = swift_release(v14);
  *v3 = v16;
  return result;
}

uint64_t sub_100044B80(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 *v33;
  __int128 v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  int v49;
  __int128 v50;
  __int128 v51;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000131C0((uint64_t *)&unk_100085350);
  v49 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v48 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v46 = v2;
  v47 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v47)
      break;
    v26 = v48;
    v27 = v48[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v47)
        goto LABEL_36;
      v27 = v48[v19];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v47)
        {
LABEL_36:
          swift_release(v10);
          v3 = v46;
          if ((v49 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v48[v28];
        if (!v27)
        {
          while (1)
          {
            v19 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v19 >= v47)
              goto LABEL_36;
            v27 = v48[v19];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v19 = v28;
      }
    }
LABEL_23:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v7 + 72);
    v30 = *(_QWORD *)(v10 + 48) + v29 * v24;
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v30, v6);
      v31 = (__int128 *)(*(_QWORD *)(v10 + 56) + 32 * v24);
      v32 = v31[1];
      v50 = *v31;
      v51 = v32;
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v30, v6);
      v33 = (__int128 *)(*(_QWORD *)(v10 + 56) + 32 * v24);
      v34 = v33[1];
      v50 = *v33;
      v51 = v34;
      swift_retain(v50);
      swift_unknownObjectRetain(*((_QWORD *)&v50 + 1));
      swift_retain(v51);
      v35 = *((id *)&v51 + 1);
    }
    v36 = *(_QWORD *)(v12 + 40);
    v37 = sub_1000154CC(&qword_100084170, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v6, v37);
    v38 = -1 << *(_BYTE *)(v12 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v17 + 8 * (v39 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v17 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v17 + 8 * v40);
      }
      while (v44 == -1);
      v20 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v29 * v20, v9, v6);
    v21 = (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20);
    v22 = v51;
    *v21 = v50;
    v21[1] = v22;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v46;
  v26 = v48;
  if ((v49 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v10 + 32);
  if (v45 >= 64)
    bzero(v26, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v45;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_100044F50(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100024FEC(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1000459C0();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000441D8(result, a3 & 1);
  result = sub_100024FEC(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
  __break(1u);
  return result;
}

uint64_t sub_100045088(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000270B0();
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100045B60();
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = (_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * v10);
      result = swift_bridgeObjectRelease(v17[1]);
      *v17 = a1;
      v17[1] = a2;
      return result;
    }
LABEL_11:
    *(_QWORD *)(v16 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    v19 = (_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * v10);
    *v19 = a1;
    v19[1] = a2;
    v20 = *(_QWORD *)(v16 + 16);
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      *(_QWORD *)(v16 + 16) = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_10004448C(result, a3 & 1);
  result = sub_1000270B0();
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = *v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s14descr1000747C9C11ClientSceneC11MetadataKeyON);
  __break(1u);
  return result;
}

uint64_t sub_1000451B0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10002501C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
        return sub_1000468D4(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100045CFC();
      goto LABEL_7;
    }
    sub_10004478C(v17, a3 & 1);
    v24 = sub_10002501C(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1000454CC(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_100045330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v7 = (_QWORD **)v6;
  v35 = a3;
  v36 = a4;
  v34 = a2;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)*v6;
  v17 = sub_10002501C(a5);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = v15[3];
  if (v22 >= v20 && (a6 & 1) != 0)
  {
LABEL_7:
    v23 = *v7;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = v23[7] + 32 * v17;
      v25 = *(_QWORD *)v24;
      v26 = *(_QWORD *)(v24 + 8);
      v27 = *(_QWORD *)(v24 + 16);

      swift_release(v27);
      swift_unknownObjectRelease(v26);
      result = swift_release(v25);
      v29 = v34;
      *(_QWORD *)v24 = a1;
      *(_QWORD *)(v24 + 8) = v29;
      v30 = v36;
      *(_QWORD *)(v24 + 16) = v35;
      *(_QWORD *)(v24 + 24) = v30;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a6 & 1) == 0)
  {
    sub_100045F78();
    goto LABEL_7;
  }
  sub_100044B80(v20, a6 & 1);
  v31 = sub_10002501C(a5);
  if ((v21 & 1) != (v32 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return result;
  }
  v17 = v31;
  v23 = *v7;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a5, v11);
  return sub_10004557C(v17, (uint64_t)v14, a1, v34, v35, v36, v23);
}

uint64_t sub_1000454CC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  result = sub_10002BDA4(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_10004557C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  a7[(a1 >> 6) + 8] |= 1 << a1;
  v14 = a7[6];
  v15 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * a1, a2, v15);
  v17 = (_QWORD *)(a7[7] + 32 * a1);
  *v17 = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  v18 = a7[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a7[2] = v20;
  return result;
}

void *sub_100045630()
{
  return sub_100045800(&qword_100084A28);
}

void *sub_10004563C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_1000131C0((uint64_t *)&unk_100085390);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000457F4()
{
  return sub_100045800(&qword_100084CF8);
}

void *sub_100045800(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v2 = v1;
  sub_1000131C0(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v26 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v14)
      goto LABEL_26;
    v27 = *(_QWORD *)(v7 + 8 * v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v14)
        goto LABEL_26;
      v27 = *(_QWORD *)(v7 + 8 * v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v16 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v3 + 56);
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v19;
    v21 = v19[1];
    v23 = *(_QWORD *)(v18 + v17);
    v22 = *(_QWORD *)(v18 + v17 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v24 = v20;
    v24[1] = v21;
    v25 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v17);
    *v25 = v23;
    v25[1] = v22;
    swift_retain(v22);
    swift_bridgeObjectRetain(v21);
    result = (void *)swift_retain(v23);
  }
  v28 = v26 + 2;
  if (v28 >= v14)
    goto LABEL_26;
  v27 = *(_QWORD *)(v7 + 8 * v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v27 = *(_QWORD *)(v7 + 8 * v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000459C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_1000131C0(&qword_100084158);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100045B60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1000131C0((uint64_t *)&unk_100085340);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100045CFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v1 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  v28 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000131C0(&qword_100084168);
  v25 = v0;
  v8 = *v0;
  v9 = static _DictionaryStorage.copy(original:)(*v0);
  v10 = v9;
  v11 = *(_QWORD *)(v8 + 16);
  if (!v11)
  {
LABEL_23:
    result = (void *)swift_release(v8);
    *v25 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    v11 = *(_QWORD *)(v8 + 16);
  }
  v26 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = v11;
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v27 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_9;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v14;
    if (!v23)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v27)
        goto LABEL_23;
      v23 = *(_QWORD *)(v26 + 8 * v14);
      if (!v23)
        break;
    }
LABEL_22:
    v17 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_9:
    v20 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v20, v4);
    v21 = *(_QWORD *)(v28 + 72) * v19;
    sub_100046890(*(_QWORD *)(v8 + 56) + v21, (uint64_t)v3);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v20, v7, v4);
    result = (void *)sub_10002BDA4((uint64_t)v3, *(_QWORD *)(v10 + 56) + v21);
  }
  v24 = v22 + 2;
  if (v24 >= v27)
    goto LABEL_23;
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v14 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_100045F78()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  unint64_t v22;
  void (*v23)(unint64_t, char *, uint64_t);
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000131C0((uint64_t *)&unk_100085350);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (id)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v31 = v1;
  result = (id)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v32 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v28 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v16)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    ++v12;
    if (!v29)
    {
      v12 = v28 + 1;
      if (v28 + 1 >= v16)
        goto LABEL_26;
      v29 = *(_QWORD *)(v32 + 8 * v12);
      if (!v29)
        break;
    }
LABEL_25:
    v15 = (v29 - 1) & v29;
    v18 = __clz(__rbit64(v29)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    v21 = (__int128 *)(*(_QWORD *)(v6 + 56) + v20);
    v22 = *(_QWORD *)(v8 + 48) + v19;
    v23 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v24 = v21[1];
    v33 = *v21;
    v34 = v24;
    v23(v22, v5, v2);
    v25 = (_OWORD *)(*(_QWORD *)(v8 + 56) + v20);
    v27 = v33;
    v26 = v34;
    *v25 = v33;
    v25[1] = v26;
    swift_retain(v27);
    swift_unknownObjectRetain(*((_QWORD *)&v33 + 1));
    swift_retain(v34);
    result = *((id *)&v34 + 1);
  }
  v30 = v28 + 2;
  if (v30 >= v16)
  {
LABEL_26:
    result = (id)swift_release(v6);
    v1 = v31;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v32 + 8 * v30);
  if (v29)
  {
    v12 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v12);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void (*sub_1000461E4(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x68uLL);
  *a1 = v5;
  v6 = type metadata accessor for UUID(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v5[10] = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_1000464D8(v5);
  v5[12] = sub_100046310(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1000462A4;
}

void sub_1000462A4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_100046310(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*result)(uint64_t **);
  uint64_t v26;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = v3;
  v9 = sub_1000131C0((uint64_t *)&unk_100085370);
  v10 = malloc(*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  v8[2] = v10;
  v11 = *v3;
  v13 = sub_10002501C(a2);
  *((_BYTE *)v8 + 32) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v4 + 56);
        v20 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
        v21 = *(_QWORD *)(v20 - 8);
        sub_10002BDA4(v19 + *(_QWORD *)(v21 + 72) * v13, (uint64_t)v10);
        v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_10004648C;
      }
LABEL_11:
      v20 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100045CFC();
      goto LABEL_7;
    }
    sub_10004478C(v16, a3 & 1);
    v23 = sub_10002501C(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v8[3] = v23;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v26 = type metadata accessor for UUID(0);
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

void sub_10004648C(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)(*a1)[2];
  sub_100046504((uint64_t)v2, *((unsigned __int8 *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  sub_1000345E4((uint64_t)v2, (uint64_t *)&unk_100085370);
  free(v2);
  free(v1);
}

uint64_t (*sub_1000464D8(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1000464F8;
}

uint64_t sub_1000464F8(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

unint64_t sub_100046504(uint64_t a1, int a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t result;
  int64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;

  v23 = a5;
  v25 = a4;
  v26 = a2;
  v24 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000131C0((uint64_t *)&unk_100085370);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v23 - v18;
  sub_10002E530(a1, (uint64_t)v12, (uint64_t *)&unk_100085370);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    result = sub_1000345E4((uint64_t)v12, (uint64_t *)&unk_100085370);
    if ((v26 & 1) != 0)
    {
      v21 = v25;
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v7 + 72) * v25, 1, v24);
      return sub_10004C230(v21, *a3);
    }
  }
  else
  {
    sub_10002BDA4((uint64_t)v12, (uint64_t)v19);
    v22 = (_QWORD *)*a3;
    if ((v26 & 1) != 0)
    {
      return sub_10002BDA4((uint64_t)v19, v22[7] + *(_QWORD *)(v14 + 72) * v25);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v23, v24);
      sub_10002BDA4((uint64_t)v19, (uint64_t)v17);
      return sub_1000454CC(v25, (uint64_t)v9, (uint64_t)v17, v22);
    }
  }
  return result;
}

uint64_t sub_1000466F4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100046718()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100046744(uint64_t a1)
{
  uint64_t v1;

  return sub_100040554(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_10004674C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100046768(uint64_t a1)
{
  uint64_t v2;

  v2 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000467A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100046834()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000428FC(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100046878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046888(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100046890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000468D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100046918(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_100046930(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v5 = v4;
  v9 = v5[4];
  v10 = v5[5];
  v11 = v5[6];
  v12 = (void *)v5[7];
  v5[4] = a1;
  v5[5] = a2;
  v5[6] = a3;
  v5[7] = a4;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRetain(a3);
  v13 = a4;

  swift_unknownObjectRelease(v11);
  swift_unknownObjectRelease(v10);
  swift_unknownObjectRelease(v9);
  result = swift_weakLoadStrong(v5[2] + 16);
  if (result)
  {
    v15 = result;
    v16 = (void *)v5[4];
    v17 = v5[5];
    v18 = v5[6];
    v19 = (void *)v5[7];
    swift_unknownObjectRetain(v16);
    swift_unknownObjectRetain(v17);
    swift_unknownObjectRetain(v18);
    v20 = v19;
    sub_100032C58(v16, v17, v18, v20);
    swift_release(v15);

    swift_unknownObjectRelease(v18);
    swift_unknownObjectRelease(v17);
    result = swift_unknownObjectRelease(v16);
  }
  *((_BYTE *)v5
  + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState_viewDescriptorsValid) = 0;
  return result;
}

uint64_t sub_100046A34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000131C0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100046A78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000131C0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

NSString sub_100046AC4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static CRLDeviceManagementRestrictionsManager.deviceManagementRestrictionsChangedNotificationName = (uint64_t)result;
  return result;
}

uint64_t *CRLDeviceManagementRestrictionsManager.deviceManagementRestrictionsChangedNotificationName.unsafeMutableAddressor()
{
  if (qword_100083110 != -1)
    swift_once(&qword_100083110, sub_100046AC4);
  return &static CRLDeviceManagementRestrictionsManager.deviceManagementRestrictionsChangedNotificationName;
}

id static CRLDeviceManagementRestrictionsManager.deviceManagementRestrictionsChangedNotificationName.getter()
{
  return sub_10004701C(&qword_100083110, (id *)&static CRLDeviceManagementRestrictionsManager.deviceManagementRestrictionsChangedNotificationName, (uint64_t)sub_100046AC4);
}

uint64_t CRLDeviceManagementRestrictionsManager.isMathPaperSolvingAllowed.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed);
  swift_beginAccess(v0 + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed, v3, 0, 0);
  return *v1;
}

uint64_t CRLDeviceManagementRestrictionsManager.isKeyboardMathSolvingAllowed.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed);
  swift_beginAccess(v0 + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed, v3, 0, 0);
  return *v1;
}

uint64_t CRLDeviceManagementRestrictionsManager.isDefinitionLookupAllowed.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isDefinitionLookupAllowed);
  swift_beginAccess(v0 + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isDefinitionLookupAllowed, v3, 0, 0);
  return *v1;
}

id sub_100046DE0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager____lazy_storage___connection;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager____lazy_storage___connection);
  v3 = v2;
  if (v2 == (void *)1)
  {
    v3 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    v5 = v3;
    sub_100047588(v4);
  }
  sub_100047598(v2);
  return v3;
}

id CRLDeviceManagementRestrictionsManager.__deallocating_deinit()
{
  void *v0;
  id v1;
  void *v2;
  objc_super v4;

  v1 = sub_100046DE0();
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "unregisterObserver:", v0);

  }
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for CRLDeviceManagementRestrictionsManager();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for CRLDeviceManagementRestrictionsManager()
{
  return objc_opt_self(_TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager);
}

void sub_100046F4C()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLDeviceManagementRestrictionsManager()), "init");
  CRLDeviceManagementRestrictionsManager.registerObserver()();
  qword_1000853A0 = (uint64_t)v0;
}

id CRLDeviceManagementRestrictionsManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id sub_100046FC4(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4, uint64_t a5)
{
  if (*a3 != -1)
    swift_once(a3, a5);
  return *a4;
}

id static CRLDeviceManagementRestrictionsManager.shared.getter()
{
  return sub_10004701C(&qword_100083118, (id *)&qword_1000853A0, (uint64_t)sub_100046F4C);
}

id sub_10004701C(_QWORD *a1, id *a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return *a2;
}

Swift::Void __swiftcall CRLDeviceManagementRestrictionsManager.registerObserver()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  id v8;
  void *v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  id v12;
  void *v13;
  unsigned __int8 *v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v1 = sub_100046DE0();
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "registerObserver:", v0);

  }
  v3 = sub_100046DE0();
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "isMathPaperSolvingAllowed");

  }
  else
  {
    v5 = 1;
  }
  v6 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed);
  v7 = 1;
  swift_beginAccess(v0 + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed, v17, 1, 0);
  *v6 = v5;
  v8 = sub_100046DE0();
  if (v8)
  {
    v9 = v8;
    v7 = objc_msgSend(v8, "isKeyboardMathSolvingAllowed");

  }
  v10 = (unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed);
  v11 = 1;
  swift_beginAccess(v0 + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed, v16, 1, 0);
  *v10 = v7;
  v12 = sub_100046DE0();
  if (v12)
  {
    v13 = v12;
    v11 = objc_msgSend(v12, "isDefinitionLookupAllowed");

  }
  v14 = (unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isDefinitionLookupAllowed);
  swift_beginAccess(v0 + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isDefinitionLookupAllowed, v15, 1, 0);
  *v14 = v11;
}

id CRLDeviceManagementRestrictionsManager.init()()
{
  _BYTE *v0;
  objc_super v2;

  v0[OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed] = 1;
  v0[OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed] = 1;
  v0[OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isDefinitionLookupAllowed] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager____lazy_storage___connection] = 1;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLDeviceManagementRestrictionsManager();
  return objc_msgSendSuper2(&v2, "init");
}

void _s20USDRendererExtension38CRLDeviceManagementRestrictionsManagerC63profileConnectionDidReceiveEffectiveSettingsChangedNotification_8userInfoySo09MCProfileH0CSg_SDys11AnyHashableVypGSgtF_0(void *a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  _BYTE *v4;
  char v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  id v10;
  _BYTE v11[24];
  _BYTE v12[24];
  _BYTE v13[24];

  if (!a1)
  {
    __break(1u);
    return;
  }
  v3 = objc_msgSend(a1, "isMathPaperSolvingAllowed");
  v4 = (_BYTE *)(v1
               + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed);
  swift_beginAccess(v1 + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed, v13, 1, 0);
  v5 = v3 ^ *v4;
  if ((v5 & 1) != 0)
    *v4 = objc_msgSend(a1, "isMathPaperSolvingAllowed");
  v6 = objc_msgSend(a1, "isKeyboardMathSolvingAllowed");
  v7 = (_BYTE *)(v1
               + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed);
  swift_beginAccess(v1 + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed, v12, 1, 0);
  if (v6 != *v7)
  {
    *v7 = objc_msgSend(a1, "isKeyboardMathSolvingAllowed");
    v5 = 1;
  }
  v8 = objc_msgSend(a1, "isDefinitionLookupAllowed");
  v9 = (_BYTE *)(v1
               + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isDefinitionLookupAllowed);
  swift_beginAccess(v9, v11, 1, 0);
  if (v8 == *v9)
  {
    if ((v5 & 1) == 0)
      return;
  }
  else
  {
    *v9 = objc_msgSend(a1, "isDefinitionLookupAllowed");
  }
  v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100083110 != -1)
    swift_once(&qword_100083110, sub_100046AC4);
  objc_msgSend(v10, "postNotificationName:object:userInfo:", static CRLDeviceManagementRestrictionsManager.deviceManagementRestrictionsChangedNotificationName, 0, 0);

}

uint64_t sub_1000474AC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000474E8(a1, &OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed, a2);
}

uint64_t sub_1000474B8(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_100047540(a1, a2, a3, a4, &OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed);
}

uint64_t sub_1000474C4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000474E8(a1, &OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed, a2);
}

uint64_t sub_1000474D0(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_100047540(a1, a2, a3, a4, &OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isKeyboardMathSolvingAllowed);
}

uint64_t sub_1000474DC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000474E8(a1, &OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isDefinitionLookupAllowed, a2);
}

uint64_t sub_1000474E8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;
  _BYTE v6[24];

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess(v4, v6, 0, 0);
  *a3 = *v4;
  return result;
}

uint64_t sub_100047534(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_100047540(a1, a2, a3, a4, &OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isDefinitionLookupAllowed);
}

uint64_t sub_100047540(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;
  _BYTE v8[24];

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess(v6, v8, 1, 0);
  *v6 = v5;
  return result;
}

void sub_100047588(id a1)
{
  if (a1 != (id)1)

}

id sub_100047598(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

id sub_1000475A8()
{
  _BYTE *v0;
  objc_class *ObjectType;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  objc_super v12;
  uint64_t v13;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = &v0[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData];
  *v2 = 0u;
  v2[1] = 0u;
  v0[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_hasDrawnFrame] = 0;
  v3 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_frameNumber;
  v13 = 0;
  v4 = sub_1000131C0(&qword_100084668);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = v0;
  *(_QWORD *)&v0[v3] = CurrentValueSubject.init(_:)(&v13);
  v6 = &v5[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = &v5[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_signalState];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 2;
  sub_100048D18();
  v8 = (void *)static OS_dispatch_queue.main.getter();
  v9 = objc_msgSend(objc_allocWithZone((Class)MTLSharedEventListener), "initWithDispatchQueue:", v8);

  *(_QWORD *)&v5[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_listener] = v9;
  v12.receiver = v5;
  v12.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v12, "init");
  objc_msgSend(v10, "setBackgroundColor:", 0);
  objc_msgSend(v10, "setOpaque:", 0);

  return v10;
}

void sub_100047740()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  BOOL v13;
  unint64_t v14;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData);
  v2 = *(void **)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData);
  if (!v2)
  {
    sub_100048840(0, 0);
    return;
  }
  v4 = (void *)v1[2];
  v3 = (void *)v1[3];
  v5 = (void *)v1[1];
  swift_unknownObjectRetain(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData));
  swift_unknownObjectRetain(v5);
  swift_unknownObjectRetain(v4);
  v6 = v3;
  v7 = objc_msgSend(v2, "device");
  v8 = *(id *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext);
  if (v8)
  {
    v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext + 8);
    swift_unknownObjectRetain(v9);
    if (v7 == v8)
      goto LABEL_7;
    swift_unknownObjectRelease(v9);
  }
  v10 = objc_msgSend(v7, "newCommandQueue");
  if (!v10)
  {
    sub_100048840(0, 0);

    swift_unknownObjectRelease(v4);
    swift_unknownObjectRelease(v5);
    swift_unknownObjectRelease(v2);
    swift_unknownObjectRelease(v7);
    return;
  }
  v9 = (uint64_t)v10;
LABEL_7:
  swift_unknownObjectRetain(v9);
  v11 = sub_100016BA0(v7);
  swift_release(v11);
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRetain(v9);
  sub_100048840((uint64_t)v7, v9);
  swift_unknownObjectRelease(v9);
  swift_unknownObjectRelease(v7);
  v12 = objc_msgSend(v4, "signaledValue");
  v13 = __CFADD__(v12, 1);
  v14 = (unint64_t)v12 + 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    sub_10004890C(v14, v5);

    swift_unknownObjectRelease(v4);
    swift_unknownObjectRelease(v5);
    swift_unknownObjectRelease(v2);
    swift_unknownObjectRelease(v7);
    swift_unknownObjectRelease_n(v9, 2);
  }
}

uint64_t sub_100047928(id a1, id a2)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 == a2)
  {
LABEL_17:
    v10 = 1;
    return v10 & 1;
  }
  v4 = objc_msgSend(a2, "label");
  if (v4)
  {

    v5 = objc_msgSend(a1, "label");
    if (v5)
    {
      v6 = v5;
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v9 = v8;

    }
    else
    {
      v7 = 0;
      v9 = 0;
    }
    v11 = objc_msgSend(a2, "label");
    if (v11)
    {
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

      if (v9)
      {
        if (v15)
        {
          if (v7 == v13 && v9 == v15)
          {
            swift_bridgeObjectRelease(v9);
            v10 = 1;
          }
          else
          {
            v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v13, v15, 0);
            swift_bridgeObjectRelease(v9);
          }
          goto LABEL_19;
        }
        goto LABEL_14;
      }
      if (v15)
      {
        v10 = 0;
        goto LABEL_19;
      }
    }
    else if (v9)
    {
LABEL_14:
      v10 = 0;
      v15 = v9;
LABEL_19:
      swift_bridgeObjectRelease(v15);
      return v10 & 1;
    }
    goto LABEL_17;
  }
  v10 = 0;
  return v10 & 1;
}

void sub_100047A68(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  _BYTE v14[32];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = Strong + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_signalState;
    if (!*(_BYTE *)(Strong
                   + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_signalState
                   + 16))
    {
      v10 = *(_QWORD *)v8;
      v9 = *(void **)(v8 + 8);
      swift_unknownObjectRetain(v9);
      if ((sub_100047928(a1, v9) & 1) != 0 && v10 <= a2)
      {
        v11 = *(_QWORD *)v8;
        v12 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)v8 = a2;
        *(_QWORD *)(v8 + 8) = a1;
        v13 = *(_BYTE *)(v8 + 16);
        *(_BYTE *)(v8 + 16) = 1;
        swift_unknownObjectRetain(a1);
        sub_100048738(v11, v12, v13);
        sub_100047CE0(a2);
      }
      sub_100048738(v10, (uint64_t)v9, 0);
    }

  }
}

uint64_t sub_100047C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = swift_unknownObjectRetain(a2);
  v6(v7, a3);
  swift_release(v5);
  return swift_unknownObjectRelease(a2);
}

void sub_100047CE0(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  __int128 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  double v45;
  _QWORD v46[3];
  __int128 v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  __int128 aBlock;
  uint64_t (*v50)(uint64_t, uint64_t);
  void *v51;
  uint64_t (*v52)(uint64_t);
  _QWORD *v53;
  id v54;

  v3 = v2;
  v4 = &v1[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData];
  v5 = *(void **)&v1[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData];
  if (v5)
  {
    v6 = v1;
    v9 = (void *)*((_QWORD *)v4 + 2);
    v8 = (void *)*((_QWORD *)v4 + 3);
    v10 = (void *)*((_QWORD *)v4 + 1);
    swift_unknownObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData]);
    swift_unknownObjectRetain(v10);
    swift_unknownObjectRetain(v9);
    v11 = v8;
    v12 = objc_msgSend(v10, "signaledValue");
    if (v12 < objc_msgSend(v9, "signaledValue"))
    {
      swift_unknownObjectRelease(v5);
      swift_unknownObjectRelease(v10);
      swift_unknownObjectRelease(v9);

      return;
    }
    v54 = v11;
    v13 = *(void **)&v6[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext];
    if (v13)
    {
      v14 = *(void **)&v6[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext + 8];
      swift_unknownObjectRetain(*(_QWORD *)&v6[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext]);
      swift_unknownObjectRetain(v14);
      objc_msgSend(v6, "bounds");
      v16 = v15;
      v18 = v17;
      objc_msgSend(v6, "contentsScale");
      v20 = v16 * v19;
      if (qword_100083128 != -1)
      {
        v45 = v19;
        swift_once(&qword_100083128, sub_10004D400);
        v19 = v45;
      }
      if (v20 > (double)qword_10008D738)
        v20 = (double)qword_10008D738;
      v21 = v18 * v19;
      if (v21 <= (double)qword_10008D738)
        v22 = v21;
      else
        v22 = (double)qword_10008D738;
      objc_msgSend(v6, "drawableSize");
      if (v24 != v20 || v23 != v22)
        objc_msgSend(v6, "setDrawableSize:", v20, v22);
      v44 = objc_msgSend(v6, "nextDrawable");
      if (!v44)
      {
        swift_unknownObjectRelease(v13);
        swift_unknownObjectRelease(v5);
        swift_unknownObjectRelease(v10);
        swift_unknownObjectRelease(v9);

        swift_unknownObjectRelease(v14);
        return;
      }
      v26 = objc_msgSend(v14, "commandBuffer");
      if (!v26)
      {
        swift_unknownObjectRelease(v13);
        swift_unknownObjectRelease(v5);
        swift_unknownObjectRelease(v10);
        swift_unknownObjectRelease(v9);

        swift_unknownObjectRelease(v14);
        swift_unknownObjectRelease(v44);
        return;
      }
      v42 = v26;
      v41 = v14;
      v40 = objc_msgSend(v10, "signaledValue");
      v27 = objc_msgSend(v44, "texture");
      v28 = objc_msgSend((id)swift_unknownObjectRetain(v5), "width");
      v43 = v27;
      if (v28 == objc_msgSend(v27, "width"))
      {
        v29 = objc_msgSend(v5, "height");
        if (v29 == objc_msgSend(v27, "height"))
        {
          v30 = objc_msgSend(v42, "blitCommandEncoder");
          if (!v30)
          {
            __break(1u);
            return;
          }
          v31 = v30;
          sub_100048B24((uint64_t)objc_msgSend(v5, "width"), (uint64_t)objc_msgSend(v5, "height"), (uint64_t)objc_msgSend(v5, "depth"), &aBlock);
          v32 = v50;
          v33 = aBlock;
          aBlock = 0uLL;
          v50 = 0;
          v47 = v33;
          v48 = v32;
          memset(v46, 0, sizeof(v46));
          objc_msgSend(v31, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v5, 0, 0, &aBlock, &v47, v43, 0, 0, v46);
          objc_msgSend(v31, "endEncoding");
          swift_unknownObjectRelease(v31);
          goto LABEL_29;
        }
      }
      v35 = sub_100016BA0(v13);
      if (!v3)
      {
        v36 = v35;
        sub_1000163D4(v5, v27, v42);
        swift_release(v36);
LABEL_29:
        objc_msgSend(v42, "encodeSignalEvent:value:", v9, v40);
        objc_msgSend(v42, "presentDrawable:", v44);
        v37 = swift_allocObject(&unk_100074C60, 24, 7);
        swift_unknownObjectWeakInit(v37 + 16, v6);
        v38 = (_QWORD *)swift_allocObject(&unk_100074CB0, 40, 7);
        v38[2] = v37;
        v38[3] = a1;
        v38[4] = v40;
        v52 = sub_100048B18;
        v53 = v38;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        v50 = sub_1000485AC;
        v51 = &unk_100074CC8;
        v39 = _Block_copy(&aBlock);
        swift_release(v53);
        objc_msgSend(v42, "addCompletedHandler:", v39);
        _Block_release(v39);
        objc_msgSend(v42, "commit");
        swift_unknownObjectRelease_n(v5, 2);
        swift_unknownObjectRelease(v43);
        swift_unknownObjectRelease(v42);
        swift_unknownObjectRelease(v44);
        swift_unknownObjectRelease(v41);
        v34 = v13;
        goto LABEL_30;
      }
      swift_unknownObjectRelease_n(v5, 2);
      swift_unknownObjectRelease(v27);
      swift_unknownObjectRelease(v42);
      swift_unknownObjectRelease(v44);
      swift_unknownObjectRelease(v41);
      v34 = v13;
    }
    else
    {
      v34 = v5;
    }
LABEL_30:
    swift_unknownObjectRelease(v34);
    swift_unknownObjectRelease(v10);
    swift_unknownObjectRelease(v9);

  }
}

uint64_t sub_100048270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE v18[24];

  v7 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v18, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    v11 = (void *)result;
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
    type metadata accessor for MainActor(0);
    v13 = v11;
    v14 = static MainActor.shared.getter(v13);
    v15 = (_QWORD *)swift_allocObject(&unk_100074D00, 56, 7);
    v15[2] = v14;
    v15[3] = &protocol witness table for MainActor;
    v15[4] = v13;
    v15[5] = a3;
    v15[6] = a4;
    v16 = sub_10002E594((uint64_t)v9, (uint64_t)&unk_1000854C0, (uint64_t)v15);

    return swift_release(v16);
  }
  return result;
}

uint64_t sub_10004839C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[5] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004840C, v8, v9);
}

uint64_t sub_10004840C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100048454(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100048454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData);
  if (v4)
  {
    v8 = (void *)v3[1];
    v7 = v3[2];
    v9 = (void *)v3[3];
    *(_BYTE *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_hasDrawnFrame) = 1;
    v16 = a2;
    swift_unknownObjectRetain(v4);
    swift_unknownObjectRetain(v8);
    swift_unknownObjectRetain(v7);
    v10 = v9;
    CurrentValueSubject.send(_:)(&v16);
    v11 = v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_signalState;
    if (*(_BYTE *)(v11 + 16) == 1 && *(_QWORD *)v11 == a1)
    {
      v12 = *(void **)(v11 + 8);
      swift_unknownObjectRetain(v12);
      if ((sub_100047928(v8, v12) & 1) == 0)
      {
LABEL_7:
        sub_100034528(v4, (uint64_t)v8, v7, v9);
        sub_100048738(a1, (uint64_t)v12, 1u);
        return;
      }
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      v15 = *(_BYTE *)(v11 + 16);
      *(_BYTE *)(v11 + 16) = 2;
      sub_100048738(v13, v14, v15);
      if (a2 != -1)
      {
        sub_10004890C(a2 + 1, v8);
        goto LABEL_7;
      }
      __break(1u);
    }
    else
    {
      sub_100034528(v4, (uint64_t)v8, v7, v9);
    }
  }
}

uint64_t sub_1000485AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t _s14descr100074D19C10MetalLayerCMa()
{
  return objc_opt_self(_TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer);
}

uint64_t sub_100048710(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_unknownObjectRetain(a2);
  return result;
}

uint64_t _s14descr100074D19C10MetalLayerC11SignalStateOwxx(uint64_t a1)
{
  return sub_100048738(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100048738(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_unknownObjectRelease(a2);
  return result;
}

uint64_t _s14descr100074D19C10MetalLayerC11SignalStateOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100048710(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s14descr100074D19C10MetalLayerC11SignalStateOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100048710(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100048738(v6, v7, v8);
  return a1;
}

uint64_t _s14descr100074D19C10MetalLayerC11SignalStateOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100048738(v4, v5, v6);
  return a1;
}

ValueMetadata *_s14descr100074D19C10MetalLayerC11SignalStateOMa()
{
  return &_s14descr100074D19C10MetalLayerC11SignalStateON;
}

void sub_100048840(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CGColorSpaceRef v7;

  v3 = (uint64_t *)&v2[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext];
  v4 = *(_QWORD *)&v2[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext];
  v5 = *(_QWORD *)&v2[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext + 8];
  *v3 = a1;
  v3[1] = a2;
  sub_100048BDC(a1, a2);
  sub_100048C08(v4, v5);
  v6 = *v3;
  if (*v3)
    swift_unknownObjectRetain(*v3);
  objc_msgSend(v2, "setDevice:", v6);
  swift_unknownObjectRelease(v6);
  objc_msgSend(v2, "setFramebufferOnly:", 0);
  objc_msgSend(v2, "setPixelFormat:", 81);
  v7 = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
  objc_msgSend(v2, "setColorspace:", v7);

}

void sub_10004890C(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[5];
  uint64_t v16;

  v5 = v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_signalState;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_signalState + 16))
  {
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_signalState + 16) == 1)
      return;
    swift_unknownObjectRetain(a2);
    v6 = 2;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    v8 = *(void **)(v5 + 8);
    swift_unknownObjectRetain(a2);
    sub_100048710(v7, (uint64_t)v8, 0);
    v9 = sub_100047928(a2, v8);
    sub_100048738(v7, (uint64_t)v8, 0);
    if ((v9 & 1) != 0 && v7 <= a1)
    {
      swift_unknownObjectRelease(a2);
      return;
    }
    v6 = *(_BYTE *)(v5 + 16);
  }
  v10 = *(_QWORD *)v5;
  v11 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  *(_BYTE *)(v5 + 16) = 0;
  swift_unknownObjectRetain(a2);
  sub_100048738(v10, v11, v6);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_listener);
  v13 = swift_allocObject(&unk_100074C60, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v2);
  v15[4] = sub_100048AD4;
  v16 = v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_100047C90;
  v15[3] = &unk_100074C78;
  v14 = _Block_copy(v15);
  swift_release(v16);
  objc_msgSend(a2, "notifyListener:atValue:block:", v12, a1, v14);
  swift_unknownObjectRelease(a2);
  _Block_release(v14);
}

uint64_t sub_100048AB0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100048AD4(void *a1, unint64_t a2)
{
  uint64_t v2;

  sub_100047A68(a1, a2, v2);
}

uint64_t sub_100048ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100048AEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100048AF4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100048B18(uint64_t a1)
{
  uint64_t *v1;

  return sub_100048270(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100048B24@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t sub_100048B30()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100048B5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1000854BC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100015350;
  return sub_10004839C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100048BDC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_unknownObjectRetain(result);
    return swift_unknownObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100048C08(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_unknownObjectRelease(result);
    return swift_unknownObjectRelease(a2);
  }
  return result;
}

void sub_100048C34()
{
  _BYTE *v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;

  v1 = &v0[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_textureData];
  *v1 = 0u;
  v1[1] = 0u;
  v0[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_hasDrawnFrame] = 0;
  v2 = OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_frameNumber;
  v6 = 0;
  v3 = sub_1000131C0(&qword_100084668);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)&v0[v2] = CurrentValueSubject.init(_:)(&v6);
  v4 = &v0[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_metalContext];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v0[OBJC_IVAR____TtCOO20USDRendererExtension15CRLUSDRendering6CoreRE10MetalLayer_signalState];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 2;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010005FF40, "USDRendererExtension/CRLUSDRendering+CoreRE_MetalLayer.swift", 60, 2, 42, 0);
  __break(1u);
}

unint64_t sub_100048D18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000854D0;
  if (!qword_1000854D0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000854D0);
  }
  return result;
}

uint64_t sub_100048D5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100048D88 + 4 * byte_1000648F0[a1]))("AdoptTipsNext", 13);
}

const char *sub_100048D88()
{
  return "AppIntents";
}

const char *sub_100048EB0()
{
  return "Stencils";
}

const char *sub_100048ED8()
{
  return "ToolPickerItemAPI";
}

const char *sub_100048EEC()
{
  return "VerticalTextBoxAlignment";
}

const char *sub_100048F00()
{
  return "AllowMinRequiredVersionForGoodEnoughFidelityToSaveToCloudKit";
}

const char *sub_100048F28()
{
  return "Freeform";
}

uint64_t sub_100048F3C()
{
  unsigned __int8 *v0;

  return sub_100048D5C(*v0);
}

const char *sub_100048F58()
{
  return "UIKit";
}

const char *sub_100048F6C()
{
  return "redesigned_text_cursor";
}

const char *sub_100048F80()
{
  return "GenerativePlayground";
}

const char *sub_100048F94()
{
  return "App";
}

const char *sub_100048FA8()
{
  return "AppleAccount";
}

const char *sub_100048FBC()
{
  return "AABranding";
}

const char *sub_100048FD0()
{
  return "PencilAndPaper";
}

const char *sub_100048FE4()
{
  _BYTE *v0;

  if (*v0)
    return "DrawingDataDetectors";
  else
    return "MathPaper";
}

uint64_t sub_1000490B0(uint64_t a1, uint64_t a2, char a3, char a4)
{
  char v6;
  char v7;
  _QWORD v9[3];
  ValueMetadata *v10;
  unint64_t v11;

  v10 = &type metadata for CRLPencilAndPaperFeatureFlags;
  v11 = sub_100049348();
  LOBYTE(v9[0]) = a3;
  v6 = isFeatureEnabled(_:)(v9);
  sub_100015C54(v9);
  if ((v6 & 1) != 0)
  {
    v10 = &type metadata for CRLFeatureFlags;
    v11 = sub_1000492C0();
    LOBYTE(v9[0]) = a4;
    v7 = isFeatureEnabled(_:)(v9);
    sub_100015C54(v9);
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_10004915C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  char v4;
  _QWORD v6[5];

  v6[3] = a3;
  v6[4] = a4();
  v4 = isFeatureEnabled(_:)(v6);
  sub_100015C54(v6);
  return v4 & 1;
}

uint64_t sub_1000491E0(uint64_t a1, uint64_t a2, char a3)
{
  char v4;
  _QWORD v6[5];

  v6[3] = &type metadata for CRLFeatureFlags;
  v6[4] = sub_1000492C0();
  LOBYTE(v6[0]) = a3;
  v4 = isFeatureEnabled(_:)(v6);
  sub_100015C54(v6);
  return v4 & 1;
}

id sub_100049270()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLFeatureFlagGroup();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLFeatureFlagGroup()
{
  return objc_opt_self(_TtC20USDRendererExtension19CRLFeatureFlagGroup);
}

unint64_t sub_1000492C0()
{
  unint64_t result;

  result = qword_100085508;
  if (!qword_100085508)
  {
    result = swift_getWitnessTable(&unk_100064CB0, &type metadata for CRLFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085508);
  }
  return result;
}

unint64_t sub_100049304()
{
  unint64_t result;

  result = qword_100085510;
  if (!qword_100085510)
  {
    result = swift_getWitnessTable(&unk_100064C80, &type metadata for CRLUIKitFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085510);
  }
  return result;
}

unint64_t sub_100049348()
{
  unint64_t result;

  result = qword_100085518;
  if (!qword_100085518)
  {
    result = swift_getWitnessTable(&unk_100064C50, &type metadata for CRLPencilAndPaperFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085518);
  }
  return result;
}

id sub_10004938C()
{
  char v0;
  char v1;
  uint64_t v2;
  _QWORD v4[3];
  ValueMetadata *v5;
  unint64_t v6;

  v5 = &type metadata for CRLGenerativePlaygroundFeatureFlags;
  v6 = sub_100049510();
  v0 = isFeatureEnabled(_:)(v4);
  sub_100015C54(v4);
  if ((v0 & 1) != 0
    && (v5 = &type metadata for CRLFeatureFlags,
        v6 = sub_1000492C0(),
        LOBYTE(v4[0]) = 12,
        v1 = isFeatureEnabled(_:)(v4),
        sub_100015C54(v4),
        (v1 & 1) != 0))
  {
    return objc_msgSend((id)type metadata accessor for ImagePlaygroundViewController(0, v2), "available");
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100049428()
{
  char v0;
  uint64_t result;
  char v2;
  unsigned __int8 *v3;
  _QWORD v4[3];
  ValueMetadata *v5;
  unint64_t v6;

  v5 = &type metadata for CRLPencilAndPaperFeatureFlags;
  v6 = sub_100049348();
  LOBYTE(v4[0]) = 0;
  v0 = isFeatureEnabled(_:)(v4);
  sub_100015C54(v4);
  result = 0;
  if ((v0 & 1) != 0)
  {
    v5 = &type metadata for CRLFeatureFlags;
    v6 = sub_1000492C0();
    LOBYTE(v4[0]) = 14;
    v2 = isFeatureEnabled(_:)(v4);
    sub_100015C54(v4);
    if ((v2 & 1) != 0)
    {
      if (qword_100083118 != -1)
        swift_once(&qword_100083118, sub_100046F4C);
      v3 = (unsigned __int8 *)(qword_1000853A0
                             + OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed);
      swift_beginAccess(qword_1000853A0+ OBJC_IVAR____TtC20USDRendererExtension38CRLDeviceManagementRestrictionsManager_isMathPaperSolvingAllowed, v4, 0, 0);
      return *v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100049510()
{
  unint64_t result;

  result = qword_100085520;
  if (!qword_100085520)
  {
    result = swift_getWitnessTable(&unk_100064C20, &type metadata for CRLGenerativePlaygroundFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085520);
  }
  return result;
}

unint64_t sub_100049554()
{
  unint64_t result;

  result = qword_100085528;
  if (!qword_100085528)
  {
    result = swift_getWitnessTable(&unk_100064BF0, &type metadata for CRLAppleAccountFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085528);
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLAppleAccountFeatureFlags()
{
  return &type metadata for CRLAppleAccountFeatureFlags;
}

ValueMetadata *type metadata accessor for CRLGenerativePlaygroundFeatureFlags()
{
  return &type metadata for CRLGenerativePlaygroundFeatureFlags;
}

uint64_t storeEnumTagSinglePayload for CRLPencilAndPaperFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100049608 + 4 * byte_10006490E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004963C + 4 * byte_100064909[v4]))();
}

uint64_t sub_10004963C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049644(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004964CLL);
  return result;
}

uint64_t sub_100049658(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100049660);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100049664(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004966C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLPencilAndPaperFeatureFlags()
{
  return &type metadata for CRLPencilAndPaperFeatureFlags;
}

uint64_t _s20USDRendererExtension27CRLAppleAccountFeatureFlagsOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000496C8 + 4 * byte_100064913[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000496E8 + 4 * byte_100064918[v4]))();
}

_BYTE *sub_1000496C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000496E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000496F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000496F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100049700(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100049708(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CRLUIKitFeatureFlags()
{
  return &type metadata for CRLUIKitFeatureFlags;
}

uint64_t getEnumTagSinglePayload for CRLFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE8)
    goto LABEL_17;
  if (a2 + 24 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 24) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 24;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 24;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 24;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v8 = v6 - 25;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_100049800 + 4 * byte_100064922[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_100049834 + 4 * byte_10006491D[v4]))();
}

uint64_t sub_100049834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004983C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049844);
  return result;
}

uint64_t sub_100049850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100049858);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_10004985C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLFeatureFlags()
{
  return &type metadata for CRLFeatureFlags;
}

unint64_t sub_100049884()
{
  unint64_t result;

  result = qword_100085530;
  if (!qword_100085530)
  {
    result = swift_getWitnessTable(&unk_100064A28, &type metadata for CRLFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085530);
  }
  return result;
}

unint64_t sub_1000498CC()
{
  unint64_t result;

  result = qword_100085538;
  if (!qword_100085538)
  {
    result = swift_getWitnessTable(&unk_100064A90, &type metadata for CRLUIKitFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085538);
  }
  return result;
}

unint64_t sub_100049914()
{
  unint64_t result;

  result = qword_100085540;
  if (!qword_100085540)
  {
    result = swift_getWitnessTable(&unk_100064AF8, &type metadata for CRLPencilAndPaperFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085540);
  }
  return result;
}

unint64_t sub_10004995C()
{
  unint64_t result;

  result = qword_100085548;
  if (!qword_100085548)
  {
    result = swift_getWitnessTable(&unk_100064B60, &type metadata for CRLGenerativePlaygroundFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085548);
  }
  return result;
}

unint64_t sub_1000499A4()
{
  unint64_t result;

  result = qword_100085550;
  if (!qword_100085550)
  {
    result = swift_getWitnessTable(&unk_100064BC8, &type metadata for CRLAppleAccountFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100085550);
  }
  return result;
}

id sub_100049A44()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLGenerativePlaygroundAvailabilityHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLGenerativePlaygroundAvailabilityHelper()
{
  return objc_opt_self(_TtC20USDRendererExtension41CRLGenerativePlaygroundAvailabilityHelper);
}

uint64_t CRLWeakWrapper.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = swift_unknownObjectWeakInit(a2, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t CRLWeakWrapper.value.getter()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0);
}

uint64_t CRLWeakWrapper.value.setter(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectWeakAssign(v1, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*CRLWeakWrapper.value.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = swift_unknownObjectWeakLoadStrong(v1);
  return sub_100049B34;
}

uint64_t sub_100049B34(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_unknownObjectWeakAssign(a1[1], *a1);
  return swift_unknownObjectRelease(v1);
}

BOOL static CRLWeakWrapper.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;

  Strong = swift_unknownObjectWeakLoadStrong(a1);
  v4 = swift_unknownObjectWeakLoadStrong(a2);
  v5 = v4;
  if (Strong)
  {
    swift_unknownObjectRelease(Strong);
    if (v5)
    {
      swift_unknownObjectRelease(v5);
      return Strong == v5;
    }
    return 0;
  }
  if (v4)
  {
    swift_unknownObjectRelease(v4);
    return 0;
  }
  return 1;
}

uint64_t sub_100049BE4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100049C04(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for CRLWeakWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003EA14(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRLWeakWrapper);
}

uint64_t sub_100049C38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = sub_10002501C(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v3);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = (void *)v5[3];
  swift_retain(*v5);
  swift_unknownObjectRetain(v7);
  swift_retain(v8);
  v10 = v9;
  return v6;
}

char *sub_100049CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for __VaListBuilder(0);
  v4 = (_QWORD *)swift_allocObject(v3, 48, 7);
  v4[2] = 8;
  v4[3] = 0;
  v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_25:
    v24 = __VaListBuilder.va_list()();
    CRLSetCrashReporterInfov(a2, v24);
    return (char *)swift_release(v4);
  }
  v7 = 0;
  v8 = a1 + 32;
  while (1)
  {
    sub_10001E5C8(v8 + 40 * v7, (uint64_t)v26);
    v9 = v27;
    v10 = v28;
    sub_100015BEC(v26, v27);
    result = (char *)dispatch thunk of CVarArg._cVarArgEncoding.getter(v9, v10);
    v12 = *v5;
    v13 = *((_QWORD *)result + 2);
    v14 = __OFADD__(*v5, v13);
    v15 = *v5 + v13;
    if (v14)
      break;
    v16 = result;
    v17 = v4[4];
    if (v17 >= v15)
      goto LABEL_18;
    if (v17 + 0x4000000000000000 < 0)
      goto LABEL_28;
    v18 = (char *)v4[5];
    if (2 * v17 > v15)
      v15 = 2 * v17;
    v4[4] = v15;
    if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_29;
    result = (char *)swift_slowAlloc(8 * v15, 7);
    v4[5] = result;
    if (v18)
    {
      if (result != v18 || result >= &v18[8 * v12])
        memmove(result, v18, 8 * v12);
      __VaListBuilder.deallocStorage(wordCount:storage:)(v17, v18);
LABEL_18:
      result = (char *)v4[5];
    }
    if (!result)
      goto LABEL_30;
    v20 = *((_QWORD *)v16 + 2);
    if (v20)
    {
      v21 = (uint64_t *)(v16 + 32);
      v22 = *v5;
      while (1)
      {
        v23 = *v21++;
        *(_QWORD *)&result[8 * v22] = v23;
        v22 = *v5 + 1;
        if (__OFADD__(*v5, 1))
          break;
        *v5 = v22;
        if (!--v20)
          goto LABEL_3;
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v7;
    swift_bridgeObjectRelease(v16);
    sub_100015C54(v26);
    if (v7 == v6)
      goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void sub_100049E90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  v12 = type metadata accessor for __VaListBuilder(0);
  v13 = (_QWORD *)swift_allocObject(v12, 48, 7);
  v13[2] = 8;
  v13[3] = 0;
  v14 = v13 + 3;
  v13[4] = 0;
  v13[5] = 0;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = 0;
    v17 = a1 + 32;
    while (1)
    {
      sub_10001E5C8(v17 + 40 * v16, (uint64_t)v52);
      v18 = v53;
      v19 = v54;
      sub_100015BEC(v52, v53);
      v20 = dispatch thunk of CVarArg._cVarArgEncoding.getter(v18, v19);
      v21 = *v14;
      v22 = *(_QWORD *)(v20 + 16);
      v23 = __OFADD__(*v14, v22);
      v24 = *v14 + v22;
      if (v23)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }
      v25 = v20;
      v26 = v13[4];
      if (v26 >= v24)
        goto LABEL_18;
      if (v26 + 0x4000000000000000 < 0)
        goto LABEL_29;
      v27 = (char *)v13[5];
      if (2 * v26 > v24)
        v24 = 2 * v26;
      v13[4] = v24;
      if ((unint64_t)(v24 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_30;
      v28 = (char *)swift_slowAlloc(8 * v24, 7);
      v13[5] = v28;
      if (v27)
        break;
LABEL_19:
      if (!v28)
        goto LABEL_32;
      v30 = *(_QWORD *)(v25 + 16);
      if (v30)
      {
        v31 = (uint64_t *)(v25 + 32);
        v32 = *v14;
        while (1)
        {
          v33 = *v31++;
          *(_QWORD *)&v28[8 * v32] = v33;
          v32 = *v14 + 1;
          if (__OFADD__(*v14, 1))
            break;
          *v14 = v32;
          if (!--v30)
            goto LABEL_3;
        }
        __break(1u);
        goto LABEL_28;
      }
LABEL_3:
      ++v16;
      swift_bridgeObjectRelease(v25);
      sub_100015C54(v52);
      if (v16 == v15)
        goto LABEL_25;
    }
    if (v28 != v27 || v28 >= &v27[8 * v21])
      memmove(v28, v27, 8 * v21);
    __VaListBuilder.deallocStorage(wordCount:storage:)(v26, v27);
LABEL_18:
    v28 = (char *)v13[5];
    goto LABEL_19;
  }
LABEL_25:
  v34 = __VaListBuilder.va_list()();
  v35 = (void *)objc_opt_self(CRLAssertionHandler);
  StaticString.description.getter(a2, a3, a4);
  v37 = v36;
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  StaticString.description.getter(a5, a6, a7);
  v40 = v39;
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  if (a8 < 0)
    goto LABEL_31;
  StaticString.description.getter(a9, a10, a11);
  v43 = v42;
  v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v43);
  objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:isFatal:format:args:", v38, v41, a8, 1, v44, v34);
  swift_release(v13);

}

uint64_t sub_10004A11C()
{
  return PrimitiveAppExtensionScene.init<A>(id:content:onConnection:)(0x7974706D65, 0xE500000000000000, nullsub_2, 0, sub_100015FF0, 0, &type metadata for EmptyView, &protocol witness table for EmptyView);
}

uint64_t sub_10004A15C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v4;

  v4 = 0;
  v0 = sub_1000131C0(&qword_1000857A8);
  v1 = sub_10004CC34(&qword_1000857B0, (uint64_t)&unk_100064FF8);
  v2 = sub_10004C81C();
  return AppExtensionSceneConfiguration.init<A, B>(_:configuration:)(sub_10004C80C, 0, &v4, v0, &type metadata for CRLUSDRenderingExtensionConfiguration, v1, v2);
}

uint64_t sub_10004A1E8()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for CRLUSDRenderingExtension.APIEndpointCoordinator();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = _swiftEmptyArrayStorage;
  qword_10008D730 = result;
  return result;
}

uint64_t sub_10004A21C()
{
  uint64_t v0;
  void **p_cache;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = v0 + 16;
  swift_beginAccess(v0 + 16, v17, 0, 0);
  v7 = *(_QWORD *)(v0 + 16);
  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
    if (v8)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v7);
  }
  if (v7 < 0)
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v8)
    return swift_bridgeObjectRelease(v7);
LABEL_3:
  v9 = v8 - 1;
  if (__OFSUB__(v8, 1))
  {
    __break(1u);
  }
  else if ((v7 & 0xC000000000000001) == 0)
  {
    if ((v9 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v9 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v8 = *(_QWORD *)(v7 + 8 * v9 + 32);
      swift_retain(v8);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_27;
  }
  v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
LABEL_8:
  swift_bridgeObjectRelease(v7);
  p_cache = _TtCOO20USDRendererExtension15CRLUSDRendering6CoreREP33_6B26D7FDF97DFF6774F3E1B8C546A30619SceneRenderingState.cache;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8+ OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_uuid, v2);
  v6 = *(_QWORD *)v6;
  v16 = v2;
  if (!((unint64_t)v6 >> 62))
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v6);
    if (!v10)
      goto LABEL_31;
    goto LABEL_10;
  }
LABEL_27:
  if (v6 < 0)
    v15 = v6;
  else
    v15 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  result = _CocoaArrayWrapper.endIndex.getter(v15);
  v10 = result;
  if (!result)
    goto LABEL_31;
LABEL_10:
  if (v10 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v10; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    }
    else
    {
      v13 = *(_QWORD *)(v6 + 8 * i + 32);
      swift_retain(v13);
    }
    if ((static UUID.== infix(_:_:)((char *)p_cache[213] + v13, v5) & 1) == 0)
      objc_msgSend(*(id *)(v13 + 16), "invalidate");
    swift_release(v13);
  }
LABEL_31:
  swift_bridgeObjectRelease(v6);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v16);
}

uint64_t sub_10004A454(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_14;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = 0;
  if (v7)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3);
      }
      else
      {
        v9 = *(_QWORD *)(a3 + 8 * v8 + 32);
        swift_retain(v9);
      }
      v14 = v9;
      v10 = a1(&v14);
      swift_release(v9);
      if (v4 || (v10 & 1) != 0)
        break;
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_14:
        if (a3 < 0)
          v12 = a3;
        else
          v12 = a3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a3);
        v7 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(a3);
        v8 = 0;
        if (!v7)
          return v8;
      }
      else
      {
        ++v8;
        if (v11 == v7)
          return 0;
      }
    }
  }
  return v8;
}

uint64_t sub_10004A570(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    result = sub_10004C7A4(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v5 + 8 * a1;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * (v6 - 1 - a1));
    *(_QWORD *)(v5 + 16) = v7;
    specialized Array._endMutation()(v10);
    return v9;
  }
  return result;
}

uint64_t sub_10004A604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 64) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 72) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004A670, v6, v7);
}

uint64_t sub_10004A670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_100083120 != -1)
    swift_once(&qword_100083120, sub_10004A1E8);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = qword_10008D730;
  v3 = qword_10008D730 + 16;
  swift_beginAccess(qword_10008D730 + 16, v0 + 16, 0, 0);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v1;
  swift_bridgeObjectRetain(v4);
  v6 = sub_10004A454(sub_10004D3E4, v5, v4);
  LOBYTE(v1) = v7;
  swift_bridgeObjectRelease(v4);
  swift_task_dealloc(v5);
  if ((v1 & 1) == 0)
  {
    swift_beginAccess(v3, v0 + 40, 33, 0);
    v8 = sub_10004A570(v6);
    swift_endAccess(v0 + 40);
    swift_release(v8);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v13 = type metadata accessor for MainActor(0);
  v14 = static MainActor.shared.getter(v13);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(a2, v16 + v8, v15 | 7);
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = &protocol witness table for MainActor;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v18 = sub_10002E594((uint64_t)v11, a3, v17);
  return swift_release(v18);
}

uint64_t sub_10004A8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 64) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 72) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004A948, v6, v7);
}

uint64_t sub_10004A948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_100083120 != -1)
    swift_once(&qword_100083120, sub_10004A1E8);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = qword_10008D730;
  v3 = qword_10008D730 + 16;
  swift_beginAccess(qword_10008D730 + 16, v0 + 16, 0, 0);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v1;
  swift_bridgeObjectRetain(v4);
  v6 = sub_10004A454(sub_10004D290, v5, v4);
  LOBYTE(v1) = v7;
  swift_bridgeObjectRelease(v4);
  swift_task_dealloc(v5);
  if ((v1 & 1) == 0)
  {
    swift_beginAccess(v3, v0 + 40, 33, 0);
    v8 = sub_10004A570(v6);
    swift_endAccess(v0 + 40);
    swift_release(v8);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AA5C()
{
  _QWORD *v0;
  void *v1;
  char *v2;
  uint64_t v3;

  v1 = (void *)v0[2];
  objc_msgSend(v1, "invalidate");

  v2 = (char *)v0
     + OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_uuid;
  v3 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_coreREInstances));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10004AB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v8[7] = v13;
  v8[8] = v14;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[9] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004ABE8, v10, v11);
}

uint64_t sub_10004ABE8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(void (**)(void))(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 72));
  sub_10004AC58(v6, v5, v4, v3, v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004AC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  objc_class *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  id v83;
  void (*v84)(char *, uint64_t);
  uint64_t *v85;
  id v86;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t inited;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(void);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _BYTE v104[24];
  objc_super v105;
  char v106[72];
  __objc2_prot *v107;
  _BYTE v108[24];
  char v109[24];

  v7 = v6;
  v97 = a6;
  v98 = a5;
  v99 = a4;
  v101 = a3;
  v10 = sub_1000131C0(&qword_1000836D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000131C0(&qword_100083780);
  v14 = __chkstk_darwin(v13);
  v95 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v92 - v16;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v92 - v23;
  UUID.init(uuidString:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100015598((uint64_t)v17);
    v90 = sub_1000131C0((uint64_t *)&unk_1000852D0);
    inited = swift_initStackObject(v90, v109);
    *(_OWORD *)(inited + 16) = xmmword_100061930;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1000340E8();
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = a2;
    swift_bridgeObjectRetain(a2);
    sub_100039B00(&_mh_execute_header, (uint64_t)"_makeCoreRERendererProxy(for:delegateProxy:flags:response:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/App Extension/USDRendererExtension.swift", 124, 2, 210, "Expected valid UUID string, got: %{public}@", 43, 2u, inited);
    sub_100049CBC(inited, (uint64_t)"Expected valid UUID string, got: %{public}@");
    sub_100049E90(inited, (uint64_t)"_makeCoreRERendererProxy(for:delegateProxy:flags:response:)", 59, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/App Extension/USDRendererExtension.swift", 124, 2u, 210, (uint64_t)"Expected valid UUID string, got: %{public}@", 43, 2u);
LABEL_14:
    CRLCrashBreakpoint();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "USDRendererExtension/CRLAssert.swift", 36, 2, 348, 0);
    __break(1u);
    return;
  }
  v96 = v19;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v17, v18);
  v25 = (uint64_t *)(v7
                  + OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_coreREInstances);
  swift_beginAccess(v7+ OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_coreREInstances, v108, 32, 0);
  v26 = sub_100049C38((uint64_t)v24, *v25);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  swift_endAccess(v108);
  sub_10004C908(v26, v28, v30, v32);
  if (v26)
  {
    v34 = UUID.uuidString.getter(v33);
    v36 = v35;
    v37 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v12, 1, 1, v37);
    v38 = swift_allocObject(&unk_100075160, 24, 7);
    swift_weakInit(v38 + 16, v7);
    type metadata accessor for MainActor(0);
    swift_retain(v38);
    v39 = swift_bridgeObjectRetain(v36);
    v40 = static MainActor.shared.getter(v39);
    v41 = (_QWORD *)swift_allocObject(&unk_100075200, 56, 7);
    v41[2] = v40;
    v41[3] = &protocol witness table for MainActor;
    v41[4] = v38;
    v41[5] = v34;
    v41[6] = v36;
    swift_release(v38);
    v42 = sub_10002E6E0((uint64_t)v12, (uint64_t)&unk_1000857E0, (uint64_t)v41);
    swift_release(v42);
    swift_bridgeObjectRelease(v36);
  }
  v100 = v18;
  v102 = v24;
  v107 = &OBJC_PROTOCOL___NSXPCProxyCreating;
  v43 = v101;
  v44 = swift_dynamicCastObjCProtocolConditional(v101, 1, &v107);
  if (!v44)
  {
    sub_100039B00(&_mh_execute_header, (uint64_t)"_makeCoreRERendererProxy(for:delegateProxy:flags:response:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/App Extension/USDRendererExtension.swift", 124, 2, 221, "Expected XPC proxy for delegate argument.", 41, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100049CBC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Expected XPC proxy for delegate argument.");
    sub_100049E90((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeCoreRERendererProxy(for:delegateProxy:flags:response:)", 59, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/App Extension/USDRendererExtension.swift", 124, 2u, 221, (uint64_t)"Expected XPC proxy for delegate argument.", 41, 2u);
    goto LABEL_14;
  }
  v45 = v44;
  v94 = v25;
  v46 = qword_100083000;
  swift_unknownObjectRetain(v43);
  if (v46 != -1)
    swift_once(&qword_100083000, sub_10001A5D8);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v108, 0, 0);
  v47 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v48 = sub_1000131C0((uint64_t *)&unk_1000852D0);
  v49 = swift_initStackObject(v48, v106);
  *(_OWORD *)(v49 + 16) = xmmword_100061930;
  v50 = v47;
  v51 = v102;
  v52 = UUID.uuidString.getter(v50);
  v54 = v53;
  v55 = String.index(_:offsetBy:)(15, 8, v52, v53);
  v56 = String.subscript.getter(15, v55, v52, v54);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  swift_bridgeObjectRelease(v54);
  v63 = static String._fromSubstring(_:)(v56, v58, v60, v62);
  v65 = v64;
  swift_bridgeObjectRelease(v62);
  *(_QWORD *)(v49 + 56) = &type metadata for String;
  v66 = sub_1000340E8();
  *(_QWORD *)(v49 + 64) = v66;
  *(_QWORD *)(v49 + 32) = v63;
  *(_QWORD *)(v49 + 40) = v65;
  v67 = static os_log_type_t.debug.getter(v66);
  sub_10001D7E0((uint64_t)v50, &_mh_execute_header, v67, "(AppEx:CoreRE) connected: %{public}@", 36, 2, v49);
  swift_setDeallocating(v49);
  v68 = sub_1000131C0(&qword_1000852E0);
  swift_arrayDestroy(v49 + 32, 1, v68);

  v69 = v96;
  v70 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v71 = v51;
  v72 = v100;
  v70(v22, v71, v100);
  v73 = type metadata accessor for CRLUSDRendererExtensionShared.RendererDelegateSenderProxy();
  v74 = swift_allocObject(v73, 24, 7);
  v93 = v45;
  *(_QWORD *)(v74 + 16) = v45;
  v75 = (uint64_t)v95;
  v70(v95, v22, v72);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v75, 0, 1, v72);
  v76 = _s14descr100074149C10RepBackendCMa(0);
  swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
  v77 = v101;
  swift_unknownObjectRetain_n(v101, 2);
  swift_retain(v74);
  LOBYTE(v62) = v99;
  v78 = sub_10002E834(v75, v74, (uint64_t)&off_1000720A8, v99);
  v79 = (objc_class *)type metadata accessor for CRLUSDRendererExtensionShared.AsyncRendererReceiverProxy();
  v80 = (char *)objc_allocWithZone(v79);
  v81 = &v80[OBJC_IVAR____TtCO20USDRendererExtension29CRLUSDRendererExtensionShared26AsyncRendererReceiverProxy_renderer];
  *((_QWORD *)v81 + 1) = 0;
  v82 = swift_unknownObjectWeakInit(v81, 0);
  *(_QWORD *)(v82 + 8) = &off_100073FF8;
  swift_unknownObjectWeakAssign(v82, v78);
  v105.receiver = v80;
  v105.super_class = v79;
  v83 = objc_msgSendSuper2(&v105, "init");
  v84 = *(void (**)(char *, uint64_t))(v69 + 8);
  v84(v22, v72);
  v70(v22, v102, v72);
  v85 = v94;
  swift_beginAccess(v94, v104, 33, 0);
  swift_unknownObjectRetain(v77);
  swift_retain(v74);
  swift_retain(v78);
  v86 = v83;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v85);
  v103 = *v85;
  *v85 = 0x8000000000000000;
  sub_100045330(v78, v93, v74, (uint64_t)v86, (uint64_t)v22, isUniquelyReferenced_nonNull_native);
  v88 = *v85;
  *v85 = v103;
  swift_bridgeObjectRelease(v88);
  v84(v22, v72);
  swift_endAccess(v104);
  v89 = v86;
  v98();

  if ((v62 & 8) != 0)
  {
    if (qword_100083120 != -1)
      swift_once(&qword_100083120, sub_10004A1E8);
    sub_10004A21C();
    swift_release(v78);
    swift_unknownObjectRelease_n(v77, 2);
    swift_release(v74);

    v84(v102, v100);
  }
  else
  {
    v84(v102, v72);
    swift_unknownObjectRelease_n(v77, 2);
    swift_release(v78);
    swift_release(v74);

  }
}

uint64_t sub_10004B6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a1;
  v6[6] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[9] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_10004B754, v8, v9);
}

uint64_t sub_10004B754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 72));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    sub_10004B7D4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
    swift_release(Strong);
  }
  **(_BYTE **)(v0 + 40) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t inited;
  _BYTE v22[24];
  _BYTE v23[72];

  v5 = sub_1000131C0(&qword_100083780);
  __chkstk_darwin(v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  UUID.init(uuidString:)(a1, a2);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100015598((uint64_t)v7);
    v20 = sub_1000131C0((uint64_t *)&unk_1000852D0);
    inited = swift_initStackObject(v20, v23);
    *(_OWORD *)(inited + 16) = xmmword_100061930;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1000340E8();
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = a2;
    swift_bridgeObjectRetain(a2);
    sub_100039B00(&_mh_execute_header, (uint64_t)"_didTeardownCoreRERenderer(for:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/App Extension/USDRendererExtension.swift", 124, 2, 248, "Expected valid UUID string, got: %{public}@", 43, 2u, inited);
    sub_100049CBC(inited, (uint64_t)"Expected valid UUID string, got: %{public}@");
    sub_100049E90(inited, (uint64_t)"_didTeardownCoreRERenderer(for:)", 32, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/App Extension/USDRendererExtension.swift", 124, 2u, 248, (uint64_t)"Expected valid UUID string, got: %{public}@", 43, 2u);
    CRLCrashBreakpoint();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "USDRendererExtension/CRLAssert.swift", 36, 2, 348, 0);
    __break(1u);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
    swift_beginAccess(v2+ OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_coreREInstances, v22, 33, 0);
    v12 = sub_10004C128((uint64_t)v11);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    swift_endAccess(v22);
    sub_10004C908(v12, v14, v16, v18);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

uint64_t sub_10004BBAC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10004BBD0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004BBF0()
{
  uint64_t (**v0)(void);

  return sub_10004BBD0(*v0);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_10004BC58();
  static AppExtension<>.main()();
  return 0;
}

unint64_t sub_10004BC58()
{
  unint64_t result;

  result = qword_100085600;
  if (!qword_100085600)
  {
    result = swift_getWitnessTable(&unk_100064E54, &type metadata for CRLUSDRenderingExtension);
    atomic_store(result, (unint64_t *)&qword_100085600);
  }
  return result;
}

uint64_t type metadata accessor for CRLUSDRenderingExtension.APIEndpointCoordinator()
{
  return objc_opt_self(_TtCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinator);
}

uint64_t sub_10004BCBC()
{
  return type metadata accessor for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint(0);
}

uint64_t type metadata accessor for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1000856E0;
  if (!qword_1000856E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint);
  return result;
}

uint64_t sub_10004BD00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void destroy for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint.CoreREInstance(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));

}

uint64_t *initializeWithCopy for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint.CoreREInstance(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = (void *)a2[3];
  a1[2] = v5;
  a1[3] = (uint64_t)v6;
  swift_retain(v3);
  swift_unknownObjectRetain(v4);
  swift_retain(v5);
  v7 = v6;
  return a1;
}

uint64_t *assignWithCopy for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint.CoreREInstance(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = (void *)a2[3];
  v11 = (void *)a1[3];
  a1[3] = (uint64_t)v10;
  v12 = v10;

  return a1;
}

_QWORD *assignWithTake for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint.CoreREInstance(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  void *v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease(v4);
  swift_release(a1[2]);
  v5 = (void *)a1[3];
  *((_OWORD *)a1 + 1) = a2[1];

  return a1;
}

uint64_t _s11TextureDataVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11TextureDataVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint.CoreREInstance()
{
  return &type metadata for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint.CoreREInstance;
}

ValueMetadata *type metadata accessor for CRLUSDRenderingExtension()
{
  return &type metadata for CRLUSDRenderingExtension;
}

uint64_t sub_10004BF94(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000694EC, 1);
}

unint64_t sub_10004BFA4(uint64_t a1)
{
  unint64_t result;

  result = sub_10004BC58();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004BFC8()
{
  return sub_1000154CC(&qword_1000857A0, (uint64_t (*)(uint64_t))&type metadata accessor for AppExtensionSceneConfiguration, (uint64_t)&protocol conformance descriptor for AppExtensionSceneConfiguration);
}

uint64_t sub_10004BFF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10002501C(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100045CFC();
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_10002BDA4(v13 + *(_QWORD *)(v15 + 72) * v7, a2);
    sub_10004C230(v7, v10);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t sub_10004C128(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10002501C(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100045F78();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 32 * v5);
  sub_10004C504(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_10004C230(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v43 = (result + 1) & v11;
      v12 = *(_QWORD *)(v44 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v42(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_1000154CC(&qword_100084170, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v26 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v4);
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
            v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72);
            v30 = v29 * a1;
            result = v27 + v29 * a1;
            v31 = v29 * v10;
            v32 = v27 + v29 * v10;
            v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v32, 1, v28);
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v30 != v31)
              {
                result = swift_arrayInitWithTakeBackToFront(result);
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v36 = *v35;
    v37 = (-1 << a1) - 1;
  }
  else
  {
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v37 = *v35;
    v36 = (-1 << a1) - 1;
  }
  *v35 = v37 & v36;
  v38 = *(_QWORD *)(a2 + 16);
  v39 = __OFSUB__(v38, 1);
  v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v40;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10004C504(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (result + 1) & v11;
      v12 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v37(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_1000154CC(&qword_100084170, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v38)
        {
          if (v21 >= v38 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_OWORD *)(v26 + 32 * a1);
            v28 = (_OWORD *)(v26 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 2))
            {
              v29 = v28[1];
              *v27 = *v28;
              v27[1] = v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v38 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10004C7A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

void sub_10004C80C(_QWORD *a1@<X8>)
{
  *a1 = nullsub_2;
  a1[1] = 0;
}

unint64_t sub_10004C81C()
{
  unint64_t result;

  result = qword_1000857B8;
  if (!qword_1000857B8)
  {
    result = swift_getWitnessTable(&unk_100064FD0, &type metadata for CRLUSDRenderingExtensionConfiguration);
    atomic_store(result, &qword_1000857B8);
  }
  return result;
}

uint64_t sub_10004C860()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004C888(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1000857C4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001634C;
  return sub_10004B6E4(a1, v4, v5, v6, v7, v8);
}

void sub_10004C908(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    swift_release(a1);
    swift_unknownObjectRelease(a2);
    swift_release(a3);

  }
}

uint64_t sub_10004C954()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004C978()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10004C988()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_unknownObjectRelease(v0[7]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10004C9CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc(dword_1000857D4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001634C;
  return sub_10004AB68(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10004CA78()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

ValueMetadata *type metadata accessor for CRLUSDRenderingExtensionConfiguration()
{
  return &type metadata for CRLUSDRenderingExtensionConfiguration;
}

ValueMetadata *type metadata accessor for CRLUSDRenderingExtension.EmptyScene()
{
  return &type metadata for CRLUSDRenderingExtension.EmptyScene;
}

ValueMetadata *type metadata accessor for CRLUSDRenderingExtensionSceneBuilder()
{
  return &type metadata for CRLUSDRenderingExtensionSceneBuilder;
}

uint64_t sub_10004CADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

_QWORD *sub_10004CAE4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t sub_10004CB10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_10004CB18(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_10004CB50(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t sub_10004CB80(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10004CBC8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CRLUSDRenderingExtensionSceneBuilder._CRLUSDRenderingExtensionScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003EA14(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRLUSDRenderingExtensionSceneBuilder._CRLUSDRenderingExtensionScene);
}

uint64_t sub_10004CC10()
{
  return sub_10004CC34(&qword_100085868, (uint64_t)&unk_100064F58);
}

uint64_t sub_10004CC34(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1000134AC(&qword_1000857A8);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004CC78(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&unk_100064FF8, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004CCA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100069548, 1);
}

unint64_t sub_10004CCB4(uint64_t a1)
{
  unint64_t result;

  result = sub_10004CCD8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004CCD8()
{
  unint64_t result;

  result = qword_100085870;
  if (!qword_100085870)
  {
    result = swift_getWitnessTable(&unk_100064F74, &type metadata for CRLUSDRenderingExtension.EmptyScene);
    atomic_store(result, &qword_100085870);
  }
  return result;
}

uint64_t sub_10004CD1C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100069514, 1);
}

uint64_t sub_10004CD50(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  void (*v13)(uint64_t, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  void **aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - v9;
  v11 = OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_coreREInstances;
  *(_QWORD *)(v2 + v11) = sub_10001ED44((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v2 + 16) = a1;
  v12 = a1;
  UUID.init()(v12);
  v13 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 16);
  v13(v2+ OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_uuid, v10, v4);
  v27 = v2;
  objc_msgSend(v12, "setExportedObject:", v2);
  if (qword_100082EE0 != -1)
    swift_once(&qword_100082EE0, sub_10000D6F0);
  objc_msgSend(v12, "setExportedInterface:", qword_10008D470);
  v13((uint64_t)v8, v10, v4);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = v15 + v6;
  v17 = v14 | 7;
  v18 = swift_allocObject(&unk_100075300, v16, v14 | 7);
  v19 = v5;
  v26 = v5;
  v20 = v18;
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v21(v18 + v15, v8, v4);
  v32 = sub_10004D114;
  v33 = v20;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_10004296C;
  v31 = &unk_100075318;
  v22 = _Block_copy(&aBlock);
  swift_release(v33);
  objc_msgSend(v12, "setInterruptionHandler:", v22);
  _Block_release(v22);
  v13((uint64_t)v8, v10, v4);
  v23 = swift_allocObject(&unk_100075350, v16, v17);
  v21(v23 + v15, v8, v4);
  v32 = sub_10004D1A4;
  v33 = v23;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_10004296C;
  v31 = &unk_100075368;
  v24 = _Block_copy(&aBlock);
  swift_release(v33);
  objc_msgSend(v12, "setInvalidationHandler:", v24);
  _Block_release(v24);
  objc_msgSend(v12, "resume");
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v4);
  return v27;
}

uint64_t sub_10004D014(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  if (qword_100083120 != -1)
    swift_once(&qword_100083120, sub_10004A1E8);
  v2 = qword_10008D730;
  v3 = type metadata accessor for CRLUSDRenderingExtension.APIEndpointCoordinator.APIEndpoint(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = a1;
  v5 = sub_10004CD50(v4);

  swift_beginAccess(v2 + 16, v11, 33, 0);
  v6 = swift_retain(v5);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
  v8 = *(_QWORD *)((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v7 = *(_QWORD *)((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v5);
  specialized Array._endMutation()(v9);
  swift_endAccess(v11);
  swift_release(v5);
  return 1;
}

uint64_t sub_10004D114()
{
  return sub_10004D1B8((uint64_t)&unk_1000753C8, (uint64_t)&unk_100085890);
}

uint64_t sub_10004D128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004D138(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004D144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004D1A4()
{
  return sub_10004D1B8((uint64_t)&unk_1000753A0, (uint64_t)&unk_100085880);
}

uint64_t sub_10004D1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10004A784(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_10004D20C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10008587C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100015350;
  return sub_10004A8DC(a1, v5, v6, v7);
}

uint64_t sub_10004D290(_QWORD *a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(*a1+ OBJC_IVAR____TtCCV20USDRendererExtension24CRLUSDRenderingExtension22APIEndpointCoordinatorP33_16A498A59AE630C2B6A999A1E566D34011APIEndpoint_uuid, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10004D2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004D344(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10008588C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001634C;
  return sub_10004A604(a1, v5, v6, v7);
}

uint64_t sub_10004D3C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void *sub_10004D3D0()
{
  return &protocol witness table for PrimitiveAppExtensionScene;
}

uint64_t sub_10004D3E4(_QWORD *a1)
{
  return sub_10004D290(a1) & 1;
}

id sub_10004D400()
{
  id result;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __objc2_prot *v5;

  result = MTLCreateSystemDefaultDevice();
  if (!result)
    goto LABEL_7;
  v1 = result;
  v5 = &OBJC_PROTOCOL___MTLDeviceSPI;
  v2 = (void *)swift_dynamicCastObjCProtocolConditional(result, 1, &v5);
  if (!v2)
  {
    result = (id)swift_unknownObjectRelease(v1);
LABEL_7:
    v4 = 4096;
    goto LABEL_8;
  }
  v3 = (uint64_t)objc_msgSend(v2, "maxTextureWidth2D");
  result = (id)swift_unknownObjectRelease(v1);
  v4 = 4096;
  if (v3 < 4096)
    v4 = v3;
LABEL_8:
  qword_10008D738 = v4;
  return result;
}

id sub_10004D484(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v5 = sub_10004DEAC();
  v6 = v2;
  v7 = NSCoder.decodeObject<A>(of:forKey:)(v5, 0x656C646E6168, 0xE600000000000000, v5);
  if (v7)
  {
    *(_QWORD *)&v6[OBJC_IVAR___CRLUSDRenderingCoreRESharedTextureHandle_handle] = v7;

    v10.receiver = v6;
    v10.super_class = ObjectType;
    v8 = objc_msgSendSuper2(&v10, "init");

  }
  else
  {

    swift_deallocPartialClassInstance(v6, ObjectType, 16, 7);
    return 0;
  }
  return v8;
}

uint64_t _s19SharedTextureHandleCMa()
{
  return objc_opt_self(CRLUSDRenderingCoreRESharedTextureHandle);
}

void _s11TextureDataVwxx(uint64_t a1)
{
  swift_unknownObjectRelease(*(_QWORD *)a1);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 16));

}

uint64_t *_s11TextureDataVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = (void *)a2[3];
  a1[2] = v5;
  a1[3] = (uint64_t)v6;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRetain(v5);
  v7 = v6;
  return a1;
}

uint64_t *_s11TextureDataVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  v10 = (void *)a2[3];
  v11 = (void *)a1[3];
  a1[3] = (uint64_t)v10;
  v12 = v10;

  return a1;
}

_QWORD *_s11TextureDataVwta(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  void *v5;

  swift_unknownObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease(v4);
  swift_unknownObjectRelease(a1[2]);
  v5 = (void *)a1[3];
  *((_OWORD *)a1 + 1) = a2[1];

  return a1;
}

ValueMetadata *_s11TextureDataVMa()
{
  return &_s11TextureDataVN;
}

id sub_10004D7C8(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  id v4;
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = objc_msgSend(a1, "newSharedTextureWithHandle:", *(_QWORD *)&a2[OBJC_IVAR___CRLUSDRenderingCoreRESharedTextureHandle_handle]);
  if (v9)
  {
    v4 = v9;
    v10 = objc_msgSend(a1, "newSharedEventWithHandle:", a3);
    if (v10)
    {
      v11 = v10;
      if (objc_msgSend(a1, "newSharedEventWithHandle:", a4))
        return v4;
      swift_unknownObjectRelease(v4);
    }
    else
    {
      v11 = v4;
    }
    swift_unknownObjectRelease(v11);
  }
  v12 = sub_1000133A8();
  v13 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v12, 0, 0);
  *(_QWORD *)v14 = 0xD00000000000001ELL;
  *(_QWORD *)(v14 + 8) = 0x8000000100060970;
  *(_BYTE *)(v14 + 16) = 5;
  swift_willThrow(v13);

  return v4;
}

uint64_t sub_10004D8DC(double *a1)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t result;
  float v11;
  float v12;
  float v13;

  v3 = a1[8];
  v4 = a1[4];
  v5 = v3 * v4;
  if (v5 <= -9.2234e18)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v6 = a1[5];
  v7 = v3 * v6;
  if ((LODWORD(v5) & 0x7F800000) == 0x7F800000 || (LODWORD(v7) & 0x7F800000) == 2139095040)
    goto LABEL_27;
  if (v7 <= -9.2234e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 < 9.2234e18)
  {
    v2 = (uint64_t)v5;
    v1 = (uint64_t)v7;
    if (qword_100083128 == -1)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  swift_once(&qword_100083128, sub_10004D400);
LABEL_10:
  result = qword_10008D738;
  if (qword_10008D738 >= v2 && qword_10008D738 >= v1)
    return v2;
  if (v2 != v1)
  {
    v11 = (float)qword_10008D738;
    if (v1 >= v2)
    {
      v13 = (float)((float)v2 / (float)v1) * v11;
      if ((~LODWORD(v13) & 0x7F800000) != 0)
      {
        if (v13 > -9.2234e18)
        {
          if (v13 < 9.2234e18)
            return (uint64_t)v13;
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return result;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v12 = (float)((float)v1 / (float)v2) * v11;
    if ((~LODWORD(v12) & 0x7F800000) != 0)
    {
      if (v12 > -9.2234e18)
      {
        if (v12 < 9.2234e18)
          return result;
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  return result;
}

id sub_10004DA9C(uint64_t a1, id a2)
{
  id v2;
  objc_class *v3;
  char *v4;
  id v5;
  objc_super v7;

  v2 = objc_msgSend(a2, "newSharedTextureWithDescriptor:", a1);
  if (v2)
  {
    v3 = (objc_class *)_s19SharedTextureHandleCMa();
    v4 = (char *)objc_allocWithZone(v3);
    v5 = objc_msgSend((id)swift_unknownObjectRetain(v2), "newSharedTextureHandle");
    if (v5)
    {
      *(_QWORD *)&v4[OBJC_IVAR___CRLUSDRenderingCoreRESharedTextureHandle_handle] = v5;

      v7.receiver = v4;
      v7.super_class = v3;
      objc_msgSendSuper2(&v7, "init");
      swift_unknownObjectRelease(v2);
    }
    else
    {
      swift_unknownObjectRelease(v2);

      swift_deallocPartialClassInstance(v4, v3, 16, 7);
      swift_unknownObjectRelease(v2);
      return 0;
    }
  }
  return v2;
}

void *sub_10004DB7C(void *a1, id a2, void *a3, void *a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  char **v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  unint64_t v24;
  NSString v25;
  Swift::String v26;
  unint64_t v27;
  NSString v28;
  NSString v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  id v40;

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10004DA9C((uint64_t)a2, a1);
  if (!v14)
    goto LABEL_15;
  v5 = v14;
  v40 = v15;
  if (!a3)
  {
    v36 = objc_msgSend(a1, "newSharedEvent");
    if (!v36)
    {
      swift_unknownObjectRelease(v5);

      goto LABEL_15;
    }
    v37 = a2;
    if (a4)
    {
      v35 = v4;
      swift_unknownObjectRetain(0);
      v34 = a4;
LABEL_11:
      v18 = swift_unknownObjectRetain(a4);
      v19 = UUID.init()(v18);
      v20 = UUID.uuidString.getter(v19);
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v38 = 0x72657265646E6572;
      v39 = 0xE90000000000003ALL;
      v23._countAndFlagsBits = v20;
      v23._object = v22;
      String.append(_:)(v23);
      v24 = v39;
      v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
      objc_msgSend(v36, "setLabel:", v25);

      v16 = &off_100081000;
      v38 = 0x6579616C70736964;
      v39 = 0xEA00000000003A72;
      v26._countAndFlagsBits = v20;
      v26._object = v22;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(v22);
      v27 = v39;
      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v27);
      objc_msgSend(v34, "setLabel:", v28);

      goto LABEL_12;
    }
LABEL_9:
    swift_unknownObjectRetain(a3);
    v17 = objc_msgSend(a1, "newSharedEvent");
    if (v17)
    {
      v34 = v17;
      v35 = v4;
      goto LABEL_11;
    }
    swift_unknownObjectRelease(v5);

    swift_unknownObjectRelease(v36);
    a2 = v37;
LABEL_15:
    v30 = sub_1000133A8();
    v31 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v30, 0, 0);
    *(_QWORD *)v32 = 0xD00000000000001ELL;
    *(_QWORD *)(v32 + 8) = 0x8000000100060900;
    *(_BYTE *)(v32 + 16) = 5;
    swift_willThrow(v31);
    swift_unknownObjectRelease(a1);

    swift_unknownObjectRelease(a4);
    swift_unknownObjectRelease(a3);
    return v5;
  }
  v37 = a2;
  if (!a4)
  {
    v36 = a3;
    goto LABEL_9;
  }
  swift_unknownObjectRetain(a4);
  swift_unknownObjectRetain(a3);
  v16 = &off_100081000;
LABEL_12:
  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, v16[484], v29);

  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(a4);
  return v5;
}

unint64_t sub_10004DEAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085998;
  if (!qword_100085998)
  {
    v1 = objc_opt_self(MTLSharedTextureHandle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100085998);
  }
  return result;
}

void sub_10004DEE8(void *a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v2 = a1;
  v3 = objc_msgSend((id)sub_10000A018(), "packedBacktraceString");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100009FB8();
  sub_100009FA4((void *)&_mh_execute_header, v5, v6, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v7, v8, v9, v10, v11);

  sub_100009FD0();
}

void sub_10004DF78()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_100009FF4();
  sub_10000A024();
  sub_10000A008();
  v4 = 268;
  v5 = v0;
  v6 = "directoryPath";
  sub_100009FE8((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_100009FE0();
}

void sub_10004E00C()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_100009FF4();
  sub_10000A024();
  sub_10000A008();
  v4 = 342;
  v5 = v0;
  v6 = "charSet";
  sub_100009FE8((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_100009FE0();
}

void sub_10004E0A0()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[30];
  int v4;
  __int16 v5;
  const char *v6;

  sub_100009FF4();
  sub_10000A024();
  sub_10000A008();
  v4 = 440;
  v5 = v0;
  v6 = "icuRegexCharSet";
  sub_100009FE8((void *)&_mh_execute_header, v1, v2, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v3);
  sub_100009FE0();
}

void sub_10004E134(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v4[0] = 67110146;
  v4[1] = a2;
  v5 = 2082;
  sub_10000A024();
  v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/NSString_CRLAdditions.m";
  v7 = 1024;
  v8 = 1331;
  v9 = 2112;
  v10 = v2;
  sub_100009FE8((void *)&_mh_execute_header, v3, (uint64_t)v3, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unable to make a string out of data with UTI %@", (uint8_t *)v4);
  sub_100009FE0();
}

void sub_10004E1DC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to use AddressBook API. Localization format may be incorrect.", v1, 2u);
}

void sub_10004E21C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  sub_100009FB8();
  sub_100009FA4((void *)&_mh_execute_header, v3, v4, "#Assert *** Assertion failure #%u: Assertion backtrace: >>%{public}@<<", v5, v6, v7, v8, v9);

  sub_100009FD0();
}

void sub_10004E2B0()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_100009FF4();
  v3 = "-[CRLMetalDeviceCapabilities initWithDevice:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMetalDeviceCapabilities.m";
  v6 = 1024;
  v7 = 20;
  v8 = v0;
  v9 = "device";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10004E35C()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  sub_100009FF4();
  v3 = "-[CRLMetalDeviceCapabilities supportsGPUFamily:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLMetalDeviceCapabilities.m";
  v6 = 1024;
  v7 = 62;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Can't compare iOS to macOS GPUs.", v2, 0x22u);
}

void sub_10004E3F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100009FF4();
  sub_10000BC24();
  sub_10000BC14((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown platform!", v2, v3, v4, v5, v6);
  sub_10000BC38();
}

void sub_10004E478()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100009FF4();
  sub_10000BC24();
  sub_10000BC14((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Unknown platform!", v2, v3, v4, v5, v6);
  sub_10000BC38();
}

void sub_10004E4F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100009FF4();
  sub_10000BC24();
  sub_10000BC14((void *)&_mh_execute_header, v0, v1, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d Shouldn't be asking for the maximum Metal texture size on a device that doesn't support Metal.", v2, v3, v4, v5, v6);
  sub_10000BC38();
}

void sub_10004E578()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[10];
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;

  sub_100009FF4();
  v3 = "-[CRLCapabilities metalCapabilitiesForDevice:]";
  v4 = v0;
  v5 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLCapabilities.m";
  v6 = 1024;
  v7 = 438;
  v8 = v0;
  v9 = "device";
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert *** Assertion failure #%u: %{public}s %{public}s:%d invalid nil value for '%{public}s'", v2, 0x2Cu);
}

void sub_10004E624(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#Assert *** Ignored previous assertion failure ***", v1, 2u);
}

void sub_10004E664(void *a1)
{
  NSObject *v1;
  void *v2;
  int v3;
  void *v4;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CRLAssertionHandler packedBacktraceString](CRLAssertionHandler, "packedBacktraceString"));
  v3 = 138543362;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#Assert Assertion backtrace: >>%{public}@<<", (uint8_t *)&v3, 0xCu);

  sub_10000D5C8();
}

void sub_10004E704(void *a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  intptr_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = a1;
  v4 = 134218242;
  v5 = CRLDynamicBaseAddress();
  v6 = 2114;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#Assert Assertion backtrace. Load address 0x%0llx, Backtrace:\n%{public}@", (uint8_t *)&v4, 0x16u);

  sub_10000D5C8();
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__atomicIncrementAssertCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_atomicIncrementAssertCount");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_addCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCharactersInString:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_callStackReturnAddresses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callStackReturnAddresses");
}

id objc_msgSend_canBeConvertedToEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBeConvertedToEncoding:");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_characterSetWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterSetWithRange:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_crl_appendJSONStringToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_appendJSONStringToString:");
}

id objc_msgSend_crl_compressWithAlgorithm_operation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_compressWithAlgorithm:operation:");
}

id objc_msgSend_crl_countInstancesOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_countInstancesOfString:options:");
}

id objc_msgSend_crl_filenameTruncatedToCharacterLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_filenameTruncatedToCharacterLimit:");
}

id objc_msgSend_crl_initRedactedWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_initRedactedWithFormat:arguments:");
}

id objc_msgSend_crl_initUnRedactedWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_initUnRedactedWithFormat:arguments:");
}

id objc_msgSend_crl_isCJKString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_isCJKString");
}

id objc_msgSend_crl_parseBaseTitleWithLocalizedCopyString_firstCopyFormatString_generalCopyFormatString_outNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_parseBaseTitleWithLocalizedCopyString:firstCopyFormatString:generalCopyFormatString:outNumber:");
}

id objc_msgSend_crl_platformString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_platformString");
}

id objc_msgSend_crl_regexForTitleParsingWithLocalizedCopyString_isFirstCopyFormatString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_regexForTitleParsingWithLocalizedCopyString:isFirstCopyFormatString:");
}

id objc_msgSend_crl_stringByApplyingSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_stringByApplyingSubstitutions:");
}

id objc_msgSend_crl_stringByIncrementingCounterAfterDuplicateTitleModifierWithLocalizedCopyString_firstCopyFormatString_generalCopyFormatString_numberFormatter_uniquenessTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_stringByIncrementingCounterAfterDuplicateTitleModifierWithLocalizedCopyString:firstCopyFormatString:generalCopyFormatString:numberFormatter:uniquenessTest:");
}

id objc_msgSend_crl_stringByRemovingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_stringByRemovingCharactersInSet:");
}

id objc_msgSend_crl_stringByReplacingInstancesOfCharactersInSet_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_stringByReplacingInstancesOfCharactersInSet:withString:");
}

id objc_msgSend_crl_stringWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_stringWithFormat:arguments:");
}

id objc_msgSend_crl_stringWithNormalizedHyphens(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_stringWithNormalizedHyphens");
}

id objc_msgSend_crl_stringWithNormalizedQuotationMarks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_stringWithNormalizedQuotationMarks");
}

id objc_msgSend_crl_stringWithPathRelativeTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_stringWithPathRelativeTo:");
}

id objc_msgSend_crl_tolerantStringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_tolerantStringByAppendingPathExtension:");
}

id objc_msgSend_crl_uncommentedAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crl_uncommentedAddress");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decimalDigitCharacterSet");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithSharedKeySet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithSharedKeySet:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSubstringsInRange:options:usingBlock:");
}

id objc_msgSend_escapedPatternForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "escapedPatternForString:");
}

id objc_msgSend_familyName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyName");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_firstMatchInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstMatchInString:options:range:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_getCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCharacters:");
}

id objc_msgSend_getCharacters_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCharacters:range:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_givenName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "givenName");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_isFatal_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:isFatal:description:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_isFatal_format_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:isFatal:format:args:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:encoding:freeWhenDone:");
}

id objc_msgSend_initWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacters:length:");
}

id objc_msgSend_initWithDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPattern:options:error:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_insertString_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertString:atIndex:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invertedSet");
}

id objc_msgSend_isAtEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAtEnd");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isMetalCapable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMetalCapable");
}

id objc_msgSend_isQAFatalAssertionsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isQAFatalAssertionsEnabled");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastThrottleCheck(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastThrottleCheck");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingAnchor");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringFromPersonNameComponents_style_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringFromPersonNameComponents:style:options:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_maximumHardcodedTextureSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumHardcodedTextureSize");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_mutableCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopyWithZone:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectWithItemProviderData_typeIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithItemProviderData:typeIdentifier:error:");
}

id objc_msgSend_p_assignFeatureSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_assignFeatureSet");
}

id objc_msgSend_p_deviceGPUFamily(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_deviceGPUFamily");
}

id objc_msgSend_p_isMetalCapable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_isMetalCapable");
}

id objc_msgSend_p_performBlockIgnoringAssertions_onlyFatal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_performBlockIgnoringAssertions:onlyFatal:");
}

id objc_msgSend_p_setupDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_setupDevice");
}

id objc_msgSend_p_setupPlatform(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "p_setupPlatform");
}

id objc_msgSend_packedBacktraceString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packedBacktraceString");
}

id objc_msgSend_packedBacktraceStringWithReturnAddresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packedBacktraceStringWithReturnAddresses:");
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathComponents");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtension");
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_physicalMemory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "physicalMemory");
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerValue");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processInfo");
}

id objc_msgSend_punctuationCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "punctuationCharacterSet");
}

id objc_msgSend_rangeAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeAtIndex:");
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfCharacterFromSet_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:options:");
}

id objc_msgSend_rangeOfCharacterFromSet_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:");
}

id objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfComposedCharacterSequenceAtIndex:");
}

id objc_msgSend_rangeOfComposedCharacterSequencesForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfComposedCharacterSequencesForRange:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rangeOfString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:range:");
}

id objc_msgSend_rangeValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeValue");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_scanCharactersFromSet_intoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanCharactersFromSet:intoString:");
}

id objc_msgSend_scanLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanLocation");
}

id objc_msgSend_scanUpToCharactersFromSet_intoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanUpToCharactersFromSet:intoString:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setCaseSensitive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaseSensitive:");
}

id objc_msgSend_setCharactersToBeSkipped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharactersToBeSkipped:");
}

id objc_msgSend_setLastThrottleCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastThrottleCheck:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setThrottleCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThrottleCount:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_sharedKeySetForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedKeySetForKeys:");
}

id objc_msgSend_simulateCrashWithMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateCrashWithMessage:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByDeletingPathExtension");
}

id objc_msgSend_stringByPaddingToLength_withString_startingAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByPaddingToLength:withString:startingAtIndex:");
}

id objc_msgSend_stringByReplacingMatchesInString_options_range_withTemplate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingMatchesInString:options:range:withTemplate:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByStandardizingPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByStandardizingPath");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCapacity:");
}

id objc_msgSend_stringWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCharacters:length:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongToStrongObjectsMapTable");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_supportsFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsFamily:");
}

id objc_msgSend_supportsGPUFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsGPUFamily:");
}

id objc_msgSend_systemName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemName");
}

id objc_msgSend_systemVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemVersion");
}

id objc_msgSend_throttleCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "throttleCount");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topAnchor");
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingAnchor");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_valueWithPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithPointer:");
}

id objc_msgSend_valueWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithRange:");
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceAndNewlineCharacterSet");
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceCharacterSet");
}
