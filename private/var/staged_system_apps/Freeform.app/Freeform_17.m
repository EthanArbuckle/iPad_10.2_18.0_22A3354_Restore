void sub_100C98B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[72];
  __int128 v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *(void **)(v1 + 56);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_1013DD870, sub_100A059E0);
    goto LABEL_5;
  }
  sub_1004CB7BC(v1 + 16, (uint64_t)&v28, &qword_1013E6100);
  if (v29)
  {
    sub_1004DB728(&v28, (uint64_t)v30);
    v9 = *sub_1004BB5A4(v30, v31);
    v10 = sub_1004B804C(&qword_1013E6108);
    OS_dispatch_queue.sync<A>(execute:)(sub_1005D2C74, v9, v10);
    v11 = swift_allocObject(&unk_10129EE90, 24, 7);
    swift_weakInit(v11 + 16, v1);
    v12 = sub_1004CBA30(&qword_1013E6110, &qword_1013E6108, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v13 = Publisher<>.sink(receiveValue:)(sub_100C9A6E0, v11, v10, v12);
    swift_release(v11);
    swift_release(v28);
    v14 = v1 + 120;
    swift_beginAccess(v14, &v28, 33, 0);
    AnyCancellable.store(in:)(v14);
    swift_endAccess(&v28);
    swift_release(v13);
    v15 = sub_1004BB5A4(v30, v31);
    OS_dispatch_queue.sync<A>(execute:)(sub_1005D2CB8, *v15, (char *)&type metadata for () + 8);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v30);
    return;
  }
  sub_1004CB800((uint64_t)&v28, &qword_1013E6100);
  if (qword_1013DD870 != -1)
    goto LABEL_13;
LABEL_5:
  swift_beginAccess(&static OS_os_log.dataSync, v30, 0, 0);
  v16 = (void *)static OS_os_log.dataSync;
  v17 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v17, v27);
  v19 = inited;
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  if (*(_BYTE *)(v1 + 64))
    v20 = 0x5320646572616853;
  else
    v20 = 0x2065746176697250;
  if (*(_BYTE *)(v1 + 64))
    v21 = 0xEC00000065706F63;
  else
    v21 = 0xED000065706F6353;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 40) = v21;
  v22 = v16;
  v24 = static os_log_type_t.default.getter(v23);
  sub_100A06EBC((uint64_t)v22, &_mh_execute_header, v24, "<%{public}@> Failed to setup reachability listener. Will execute jobs without it", 80, 2, v19);
  swift_setDeallocating(v19);
  v25 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v19 + 32, 1, v25);

}

double sub_100C98EA8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t Strong;
  double result;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  _QWORD v21[2];
  double *v22;
  _QWORD aBlock[5];
  uint64_t v24;
  _BYTE v25[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v25, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v15 = Strong;
    if (v12)
    {
      v21[1] = *(_QWORD *)(Strong + 56);
      aBlock[4] = sub_100C9A6E8;
      v24 = Strong;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = *(_QWORD *)"";
      aBlock[2] = sub_1005D2FC0;
      aBlock[3] = &unk_10129EEA8;
      v21[0] = _Block_copy(aBlock);
      v16 = swift_retain(v15);
      static DispatchQoS.unspecified.getter(v16);
      v22 = _swiftEmptyArrayStorage;
      v17 = sub_1004CB65C();
      v18 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
      v19 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v4, v17);
      v20 = (const void *)v21[0];
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v21[0]);
      _Block_release(v20);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_release(v15);
      Strong = v24;
    }
    *(_QWORD *)&result = swift_release(Strong).n128_u64[0];
  }
  return result;
}

void sub_100C990A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[8];
  uint64_t v28;
  _BYTE v29[8];
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[8];
  _BYTE v34[152];
  _BYTE v35[32];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(void **)(v0 + 56);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
  {
    sub_100C98358();
  }
  else
  {
    __break(1u);
    swift_once(&qword_1013DD870, sub_100A059E0);
    swift_beginAccess(&static OS_os_log.dataSync, v35, 0, 0);
    v8 = (void *)static OS_os_log.dataSync;
    v9 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v9, v34);
    v11 = (_QWORD *)inited;
    *(_OWORD *)(inited + 16) = xmmword_100EF5550;
    v12 = *(_BYTE *)(v0 + 64) == 0;
    if (*(_BYTE *)(v0 + 64))
      v13 = 0x5320646572616853;
    else
      v13 = 0x2065746176697250;
    if (v12)
      v14 = 0xED000065706F6353;
    else
      v14 = 0xEC00000065706F63;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v15 = sub_1004CFC2C();
    v11[8] = v15;
    v11[4] = v13;
    v11[5] = v14;
    swift_getErrorValue(v5, v33, v30);
    v16 = v31;
    v17 = v32;
    v18 = v8;
    v19 = Error.publicDescription.getter(v16, v17);
    v11[12] = &type metadata for String;
    v11[13] = v15;
    v11[9] = v19;
    v11[10] = v20;
    swift_getErrorValue(v5, v29, v27);
    v21 = Error.fullDescription.getter(v28);
    v11[17] = &type metadata for String;
    v11[18] = v15;
    v11[14] = v21;
    v11[15] = v22;
    v24 = static os_log_type_t.default.getter(v23);
    sub_100A06EBC((uint64_t)v18, &_mh_execute_header, v24, "<%{public}@> Failed to schedule pending activities after network connected. Error:\"<%{public}@> <%@>\"", 101, 2, (uint64_t)v11);
    swift_setDeallocating(v11);
    v25 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v11 + 4, 3, v25);

    swift_errorRelease(v5);
  }
}

uint64_t sub_100C99324()
{
  uint64_t v0;

  sub_1004CB800(v0 + 16, &qword_1013E6100);

  swift_release(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for CRLSyncScheduler()
{
  return objc_opt_self(_TtC8Freeform16CRLSyncScheduler);
}

_QWORD *sub_100C99398(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = (int *)type metadata accessor for CRLSyncActivity(0);
    v8 = v7[5];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_1004B804C(&qword_1013E04F0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)v4 + v7[6]) = *((_BYTE *)a2 + v7[6]);
    v15 = v7[7];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    *((_BYTE *)v4 + v7[8]) = *((_BYTE *)a2 + v7[8]);
    v18 = *(int *)(a3 + 20);
    v19 = *(_QWORD *)((char *)a2 + v18);
    if ((unint64_t)(v19 - 1) >= 2)
      swift_retain(v19);
    *(_QWORD *)((char *)v4 + v18) = v19;
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t type metadata accessor for CRLSyncActivity(uint64_t a1)
{
  return sub_1004BD408(a1, qword_10140D8E8, (uint64_t)&nominal type descriptor for CRLSyncActivity);
}

double sub_100C9950C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = a1 + *(int *)(type metadata accessor for CRLSyncActivity(0) + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = *(_QWORD *)(a1 + *(int *)(a2 + 20));
  if ((unint64_t)(v8 - 1) >= 2)
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

_BYTE *sub_100C995AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for CRLSyncActivity(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1004B804C(&qword_1013E04F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  a1[v6[6]] = a2[v6[6]];
  v13 = v6[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  a1[v6[8]] = a2[v6[8]];
  v16 = *(int *)(a3 + 20);
  v17 = *(_QWORD *)&a2[v16];
  if ((unint64_t)(v17 - 1) >= 2)
    swift_retain(v17);
  *(_QWORD *)&a1[v16] = v17;
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_100C996E0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for CRLSyncActivity(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_1004B804C(&qword_1013E04F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  a1[v6[6]] = a2[v6[6]];
  v16 = v6[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  a1[v6[8]] = a2[v6[8]];
  v20 = *(int *)(a3 + 20);
  v21 = &a1[v20];
  v22 = *(_QWORD *)&a1[v20];
  v23 = *(_QWORD *)&a2[v20];
  v24 = v23 - 1;
  if ((unint64_t)(v22 - 1) >= 2)
  {
    if (v24 >= 2)
    {
      *v21 = v23;
      swift_retain(v23);
      swift_release(v22);
    }
    else
    {
      sub_1004CB800((uint64_t)&a1[v20], &qword_10140D7F0);
      *v21 = *(_QWORD *)&a2[v20];
    }
  }
  else
  {
    *v21 = v23;
    if (v24 >= 2)
      swift_retain(v23);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_100C998B4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for CRLSyncActivity(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1004B804C(&qword_1013E04F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  a1[v6[6]] = a2[v6[6]];
  v13 = v6[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  a1[v6[8]] = a2[v6[8]];
  v16 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  return a1;
}

_BYTE *sub_100C999D4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for CRLSyncActivity(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_1004B804C(&qword_1013E04F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  a1[v6[6]] = a2[v6[6]];
  v16 = v6[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  a1[v6[8]] = a2[v6[8]];
  v19 = *(int *)(a3 + 20);
  v20 = &a1[v19];
  v21 = *(_QWORD *)&a1[v19];
  v22 = *(_QWORD *)&a2[v19];
  if ((unint64_t)(v21 - 1) >= 2)
  {
    if ((unint64_t)(v22 - 1) >= 2)
    {
      *v20 = v22;
      swift_release(v21);
      goto LABEL_12;
    }
    sub_1004CB800((uint64_t)&a1[v19], &qword_10140D7F0);
    v22 = *(_QWORD *)&a2[v19];
  }
  *v20 = v22;
LABEL_12:
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_100C99B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100C99B90);
}

uint64_t sub_100C99B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for CRLSyncActivity(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  if (v10 >= 2)
    return (v10 - 1);
  else
    return 0;
}

uint64_t sub_100C99C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100C99C2C);
}

uint64_t sub_100C99C2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for CRLSyncActivity(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 + 2);
  return result;
}

uint64_t type metadata accessor for CRLSyncScheduledActivity(uint64_t a1)
{
  return sub_1004BD408(a1, qword_10140D850, (uint64_t)&nominal type descriptor for CRLSyncScheduledActivity);
}

uint64_t sub_100C99CB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for CRLSyncActivity(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100C99D38(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_1004B804C(&qword_1013E04F0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return v4;
}

uint64_t sub_100C99E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

_BYTE *sub_100C99ECC(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1004B804C(&qword_1013E04F0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

_BYTE *sub_100C99FC8(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_1004B804C(&qword_1013E04F0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  a1[a3[6]] = a2[a3[6]];
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

_BYTE *sub_100C9A114(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1004B804C(&qword_1013E04F0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

_BYTE *sub_100C9A210(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_1004B804C(&qword_1013E04F0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_100C9A358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100C9A364);
}

uint64_t sub_100C9A364(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_1004B804C(&qword_1013E04F0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100C9A3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100C9A3E8);
}

_BYTE *sub_100C9A3E8(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_1004B804C(&qword_1013E04F0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_100C9A45C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100F31AB8;
  sub_10056ACC0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100F31AD0;
    v4[3] = &unk_100F31AE8;
    v4[4] = &unk_100F31AB8;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t initializeWithCopy for CRLSyncSchedulerConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for CRLSyncSchedulerConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for CRLSyncSchedulerConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLSyncSchedulerConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLSyncSchedulerConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLSyncSchedulerConfiguration()
{
  return &type metadata for CRLSyncSchedulerConfiguration;
}

ValueMetadata *type metadata accessor for CRLSyncActivityIdentifier()
{
  return &type metadata for CRLSyncActivityIdentifier;
}

unint64_t sub_100C9A678()
{
  unint64_t result;

  result = qword_10140D930;
  if (!qword_10140D930)
  {
    result = swift_getWitnessTable(&unk_100F31BB4, &type metadata for CRLSyncActivityIdentifier);
    atomic_store(result, (unint64_t *)&qword_10140D930);
  }
  return result;
}

uint64_t sub_100C9A6BC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_100C9A6E0(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_100C98EA8(a1, v1);
}

double sub_100C9A6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100C9A6FC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100C9A70C(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  *(double *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(sub_100C9A72C, 0, 0);
}

void sub_100C9A72C()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(v0 + 24) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 48) = v3;
    *v3 = v0;
    v3[1] = sub_100C9A7C8;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_100C9A7C8()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = (int *)v2[4];
  v8 = (uint64_t (*)(_QWORD))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v2[7] = v7;
  *v7 = v4;
  v7[1] = sub_100C9A864;
  return v8(v2[2]);
}

uint64_t sub_100C9A864()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_100C9A8AC(uint64_t a1)
{
  double result;

  if ((unint64_t)(a1 - 1) >= 2)
    *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_100C9A8C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100C9A8E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10140D94C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1004CFD00;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10140D948 + dword_10140D948))(a1, v4);
}

unint64_t sub_100C9A954()
{
  unint64_t result;

  result = qword_10140D958;
  if (!qword_10140D958)
  {
    result = swift_getWitnessTable(&unk_100F31D30, &type metadata for CRLSyncSchedulerError);
    atomic_store(result, (unint64_t *)&qword_10140D958);
  }
  return result;
}

uint64_t sub_100C9A998()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10140D964);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1004CFD00;
  return ((uint64_t (*)(int *))((char *)&dword_10140D960 + dword_10140D960))(v2);
}

void sub_100C9A9FC(uint64_t a1, uint64_t a2, double (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v6 = sub_1004B804C(&qword_1013E04F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v18 - v14;
  sub_1004CB7BC(a2, (uint64_t)v8, &qword_1013E04F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1004CB800((uint64_t)v8, &qword_1013E04F0);
  }
  else
  {
    v16.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    static Date.now.getter(v16);
    Date.timeIntervalSince(_:)(v12);
    v17 = *(void (**)(char *, uint64_t))(v10 + 8);
    v17(v12, v9);
    v17(v15, v9);
  }
  a3(a1);
}

uint64_t sub_100C9ABA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100C9ABD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_10140D974);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1004CF80C;
  return sub_100C96DB8(a1, v4, v5, v7, v6);
}

uint64_t sub_100C9AC4C()
{
  return sub_1008F1294();
}

uint64_t sub_100C9AC64()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100C9AC90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_10140D984);
  v6 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_1004CFD00;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_100C9A72C, 0, 0);
}

uint64_t sub_100C9AD08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100C9AD2C()
{
  uint64_t v0;

  sub_100C97718(2, *(_BYTE *)(v0 + 24));
}

uint64_t sub_100C9AD58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100C9AD84()
{
  uint64_t v0;

  return sub_100C97408(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_100C9ADB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 26, 7);
}

void sub_100C9ADD4()
{
  uint64_t v0;

  sub_100C9714C(*(unsigned __int8 *)(v0 + 24), *(_BYTE *)(v0 + 25));
}

uint64_t sub_100C9AE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for CRLSyncActivity(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + *(int *)(v1 + 20) + v4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100C9AEAC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLSyncActivity(0) - 8) + 80);
  return sub_100C9512C(*(_QWORD *)(v0 + 16), (char *)(v0 + ((v1 + 24) & ~v1)));
}

void sub_100C9AEDC()
{
  sub_100C94D6C();
}

uint64_t _s8Freeform25CRLSyncActivityIdentifierOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100C9AF30 + 4 * byte_100F31A05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100C9AF64 + 4 * asc_100F31A00[v4]))();
}

uint64_t sub_100C9AF64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100C9AF6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100C9AF74);
  return result;
}

uint64_t sub_100C9AF80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100C9AF88);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100C9AF8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100C9AF94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLSyncSchedulerError()
{
  return &type metadata for CRLSyncSchedulerError;
}

double destroy for CRLSyncActivityScheduleState(unint64_t *a1)
{
  unint64_t v1;
  int v2;
  double result;

  v1 = *a1;
  v2 = -1;
  if (v1 < 0xFFFFFFFF)
    v2 = v1;
  if (v2 - 1 < 0)
    *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

_QWORD *_s8Freeform28CRLSyncActivityScheduleStateOwCP_0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if ((int)v4 - 1 < 0)
    swift_retain(v3);
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for CRLSyncActivityScheduleState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v5) = -1;
  else
    v5 = *a1;
  v6 = v5 - 1;
  v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  v8 = v4 - 1;
  if (v6 < 0)
  {
    if (v8 < 0)
    {
      *a1 = v7;
      swift_retain(v7);
      swift_release(v3);
    }
    else
    {
      swift_release(v3);
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v7;
    if (v8 < 0)
      swift_retain(v7);
  }
  return a1;
}

unint64_t *assignWithTake for CRLSyncActivityScheduleState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a1;
  v4 = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = v3;
  v5 = *a2;
  if (v4 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (v5 < 0xFFFFFFFF)
      v6 = *a2;
    if ((int)v6 - 1 < 0)
    {
      *a1 = v5;
      swift_release(v3);
      return a1;
    }
    swift_release(v3);
  }
  *a1 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLSyncActivityScheduleState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 1;
  if (v5 >= 3)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CRLSyncActivityScheduleState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_100C9B1C4(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_100C9B1E8(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2)
LABEL_5:
    *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CRLSyncActivityScheduleState()
{
  return &type metadata for CRLSyncActivityScheduleState;
}

uint64_t storeEnumTagSinglePayload for CRLSyncActivityPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100C9B26C + 4 * byte_100F31A0F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100C9B2A0 + 4 * byte_100F31A0A[v4]))();
}

uint64_t sub_100C9B2A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100C9B2A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100C9B2B0);
  return result;
}

uint64_t sub_100C9B2BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100C9B2C4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100C9B2C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100C9B2D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLSyncActivityPriority()
{
  return &type metadata for CRLSyncActivityPriority;
}

unint64_t sub_100C9B2F0()
{
  unint64_t result;

  result = qword_10140D990;
  if (!qword_10140D990)
  {
    result = swift_getWitnessTable(&unk_100F31C78, &type metadata for CRLSyncActivityPriority);
    atomic_store(result, (unint64_t *)&qword_10140D990);
  }
  return result;
}

unint64_t sub_100C9B338()
{
  unint64_t result;

  result = qword_10140D998;
  if (!qword_10140D998)
  {
    result = swift_getWitnessTable(&unk_100F31D08, &type metadata for CRLSyncSchedulerError);
    atomic_store(result, (unint64_t *)&qword_10140D998);
  }
  return result;
}

void sub_100C9B3B0(uint64_t a1)
{
  sub_100C9B3D8(a1, (unint64_t *)&qword_1013F07F0, NSNumber_ptr);
}

void sub_100C9B3C4(uint64_t a1)
{
  sub_100C9B3D8(a1, (unint64_t *)&qword_1013DFC10, UIView_ptr);
}

void sub_100C9B3D8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int64_t i;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_1004B804C(&qword_1013F2128);
    v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v4);
  }
  else
  {
    v5 = _swiftEmptyDictionarySingleton;
  }
  v41 = v3 + 64;
  v6 = -1 << *(_BYTE *)(v3 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 64);
  v40 = (unint64_t)(63 - v6) >> 6;
  v9 = &v48;
  v10 = &v50;
  swift_bridgeObjectRetain(v3);
  i = 0;
  v12 = (char *)&type metadata for Any + 8;
  if (v8)
    goto LABEL_10;
LABEL_11:
  v22 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v22 >= v40)
    goto LABEL_32;
  v23 = *(_QWORD *)(v41 + 8 * v22);
  v24 = i + 1;
  if (!v23)
  {
    v24 = i + 2;
    if (i + 2 >= v40)
      goto LABEL_32;
    v23 = *(_QWORD *)(v41 + 8 * v24);
    if (!v23)
    {
      v24 = i + 3;
      if (i + 3 >= v40)
        goto LABEL_32;
      v23 = *(_QWORD *)(v41 + 8 * v24);
      if (!v23)
      {
        v24 = i + 4;
        if (i + 4 >= v40)
          goto LABEL_32;
        v23 = *(_QWORD *)(v41 + 8 * v24);
        if (!v23)
        {
          v25 = i + 5;
          if (i + 5 < v40)
          {
            v23 = *(_QWORD *)(v41 + 8 * v25);
            if (v23)
            {
              v24 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v24 = v25 + 1;
              if (__OFADD__(v25, 1))
                goto LABEL_36;
              if (v24 >= v40)
                break;
              v23 = *(_QWORD *)(v41 + 8 * v24);
              ++v25;
              if (v23)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1004D284C(v3);
          return;
        }
      }
    }
  }
LABEL_26:
  v8 = (v23 - 1) & v23;
  v21 = __clz(__rbit64(v23)) + (v24 << 6);
  for (i = v24; ; v21 = v20 | (i << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v21);
    v27 = v26[1];
    v28 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v21);
    v46 = *v26;
    v47 = v27;
    v45 = v28;
    v29 = sub_1004B8930(0, a2, a3);
    swift_bridgeObjectRetain(v27);
    v30 = v28;
    swift_dynamicCast(v9, &v45, v29, v12, 7);
    v32 = v46;
    v31 = v47;
    sub_10050CB14(v9, v10);
    sub_10050CB14(v10, v51);
    sub_10050CB14(v51, &v49);
    v33 = sub_100842E98(v32, v31);
    v34 = v33;
    if ((v35 & 1) != 0)
    {
      v42 = v8;
      v13 = v10;
      v14 = v9;
      v15 = v3;
      v16 = i;
      v17 = v12;
      v18 = (uint64_t *)(v5[6] + 16 * v33);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v32;
      v18[1] = v31;
      v12 = v17;
      i = v16;
      v3 = v15;
      v9 = v14;
      v10 = v13;
      v8 = v42;
      v19 = (_QWORD *)(v5[7] + 32 * v34);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v19);
      sub_10050CB14(&v49, v19);
      if (!v42)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v5[2] >= v5[3])
      break;
    *(_QWORD *)((char *)v5 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v33;
    v36 = (uint64_t *)(v5[6] + 16 * v33);
    *v36 = v32;
    v36[1] = v31;
    sub_10050CB14(&v49, (_OWORD *)(v5[7] + 32 * v33));
    v37 = v5[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_34;
    v5[2] = v39;
    if (!v8)
      goto LABEL_11;
LABEL_10:
    v20 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

_QWORD *sub_100C9B734(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v15;
  uint64_t v16;
  _BYTE v17[64];
  _OWORD v18[2];
  _BYTE v19[8];
  _BYTE v20[32];
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1004B804C(&qword_1013F4FC8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v15 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  if (v6)
  {
    v7 = __clz(__rbit64(v6));
    goto LABEL_24;
  }
  if (v15 > 1)
  {
    v8 = *(_QWORD *)(a1 + 72);
    v9 = 1;
    if (v8)
      goto LABEL_23;
    v9 = 2;
    if (v15 <= 2)
      goto LABEL_25;
    v8 = *(_QWORD *)(a1 + 80);
    if (v8)
      goto LABEL_23;
    v9 = 3;
    if (v15 <= 3)
      goto LABEL_25;
    v8 = *(_QWORD *)(a1 + 88);
    if (v8)
      goto LABEL_23;
    v9 = 4;
    if (v15 <= 4)
      goto LABEL_25;
    v8 = *(_QWORD *)(a1 + 96);
    if (v8)
    {
LABEL_23:
      v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_24:
      v11 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v7);
      sub_1004CB6E8(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v23 + 8);
      LOBYTE(v23[0]) = v11;
      v21[0] = v23[0];
      v21[1] = v23[1];
      v22 = v24;
      v19[0] = v11;
      sub_10050CB14((_OWORD *)((char *)v21 + 8), v18);
      v12 = sub_1004B804C(&qword_1013E0230);
      swift_dynamicCast(v20, v18, (char *)&type metadata for Any + 8, v12, 7);
      v13 = v19[0];
      sub_1004C4938((uint64_t)v20, (uint64_t)v17, &qword_1013E0230);
      sub_1004C4938((uint64_t)v17, (uint64_t)v19, &qword_1013E0230);
      sub_1004C4938((uint64_t)v19, (uint64_t)v18, &qword_1013E0230);
      Hasher.init(_seed:)(&v16, v3[5]);
      __asm { BR              X8 }
    }
    v10 = 5;
    if (v15 > 5)
    {
      v8 = *(_QWORD *)(a1 + 104);
      if (v8)
      {
        v9 = 5;
        goto LABEL_23;
      }
      while (1)
      {
        v9 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          JUMPOUT(0x100C9BBECLL);
        }
        if (v9 >= v15)
          break;
        v8 = *(_QWORD *)(a1 + 64 + 8 * v9);
        ++v10;
        if (v8)
          goto LABEL_23;
      }
    }
  }
LABEL_25:
  swift_release(v3);
  sub_1004D284C(a1);
  return v3;
}

void sub_100C9BC14(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1004B804C(&qword_1013F4F78);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v28)
      goto LABEL_37;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v28)
        goto LABEL_37;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v28)
          goto LABEL_37;
        v14 = *(_QWORD *)(v29 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v28)
            goto LABEL_37;
          v14 = *(_QWORD *)(v29 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_1004CB6E8(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v41);
    *(_QWORD *)&v40 = v19;
    *((_QWORD *)&v40 + 1) = v18;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v19;
    *((_QWORD *)&v38[0] + 1) = v18;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10050CB14(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10050CB14(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10050CB14(v37, v38);
    sub_10050CB14(v38, &v34);
    v20 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v9 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v30;
    *(_OWORD *)(v10 + 16) = v31;
    *(_QWORD *)(v10 + 32) = v32;
    sub_10050CB14(&v34, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_1004D284C(a1);
    return;
  }
  v14 = *(_QWORD *)(v29 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v28)
      goto LABEL_37;
    v14 = *(_QWORD *)(v29 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

void sub_100C9BFD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int64_t i;
  uint64_t *v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1004B804C(&qword_1013F2128);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v38 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v37 = (unint64_t)(63 - v4) >> 6;
  v7 = &v44;
  v8 = &v46;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v10 = (uint64_t *)&unk_1013F14F0;
  v11 = (char *)&type metadata for Any + 8;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v37)
    goto LABEL_32;
  v21 = *(_QWORD *)(v38 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v37)
      goto LABEL_32;
    v21 = *(_QWORD *)(v38 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v37)
        goto LABEL_32;
      v21 = *(_QWORD *)(v38 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v37)
          goto LABEL_32;
        v21 = *(_QWORD *)(v38 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v37)
          {
            v21 = *(_QWORD *)(v38 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v37)
                break;
              v21 = *(_QWORD *)(v38 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1004D284C(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v40 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v6)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v25 = v24[1];
    v26 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v19);
    v42 = *v24;
    v43 = v25;
    v41 = v26;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    v27 = sub_1004B804C(v10);
    swift_dynamicCast(v7, &v41, v27, v11, 7);
    v28 = v42;
    v29 = v43;
    sub_10050CB14(v7, v8);
    sub_10050CB14(v8, v47);
    sub_10050CB14(v47, &v45);
    v30 = sub_100842E98(v28, v29);
    v31 = v30;
    if ((v32 & 1) != 0)
    {
      v39 = i;
      v12 = v8;
      v13 = v7;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v3[6] + 16 * v30);
      swift_bridgeObjectRelease(v17[1]);
      *v17 = v28;
      v17[1] = v29;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v7 = v13;
      v8 = v12;
      i = v39;
      v18 = (_QWORD *)(v3[7] + 32 * v31);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v18);
      sub_10050CB14(&v45, v18);
      v6 = v40;
      if (!v40)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v30;
    v33 = (uint64_t *)(v3[6] + 16 * v30);
    *v33 = v28;
    v33[1] = v29;
    sub_10050CB14(&v45, (_OWORD *)(v3[7] + 32 * v30));
    v34 = v3[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_34;
    v3[2] = v36;
    v6 = v40;
    if (!v40)
      goto LABEL_11;
LABEL_10:
    v40 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_100C9C340(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1004B804C(&qword_1013F4F78);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v31)
      goto LABEL_37;
    v14 = *(_QWORD *)(v32 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_37;
      v14 = *(_QWORD *)(v32 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_37;
        v14 = *(_QWORD *)(v32 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v31)
            goto LABEL_37;
          v14 = *(_QWORD *)(v32 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    *(_QWORD *)&v42[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    v17 = *(void **)&v42[0];
    type metadata accessor for Name(0);
    v20 = v19;
    v21 = v17;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v34, v42, v20, &type metadata for AnyHashable, 7);
    v33 = v18;
    v22 = sub_1004B804C((uint64_t *)&unk_1013E8BE0);
    swift_dynamicCast(v37, &v33, v22, (char *)&type metadata for Any + 8, 7);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_10050CB14(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_10050CB14(v41, v42);
    sub_10050CB14(v42, &v38);
    v23 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~v7[v25 >> 6]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v25) & ~v7[v25 >> 6])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = v7[v26];
      }
      while (v30 == -1);
      v9 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v34;
    *(_OWORD *)(v10 + 16) = v35;
    *(_QWORD *)(v10 + 32) = v36;
    sub_10050CB14(&v38, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_1004D284C(a1);
    return;
  }
  v14 = *(_QWORD *)(v32 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v31)
      goto LABEL_37;
    v14 = *(_QWORD *)(v32 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_100C9C704(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 168) = a2;
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = v2;
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 64) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 72) = v5;
  *(_QWORD *)(v3 + 80) = v6;
  return swift_task_switch(sub_100C9C774, v5, v6);
}

uint64_t sub_100C9C774()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  __n128 v11;

  if ((*(_BYTE *)(v0 + 168) & 1) == 0)
  {
    v1 = (uint64_t *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
    swift_beginAccess(v1, v0 + 16, 32, 0);
    v2 = *v1;
    if (*(_QWORD *)(v2 + 16))
    {
      v3 = sub_100843264(*(_QWORD *)(v0 + 48));
      if ((v4 & 1) != 0)
      {
        v5 = *(_QWORD *)(v0 + 64);
        v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
        swift_endAccess(v0 + 16);
        swift_retain(v6);
        swift_release(v5);
        v7 = (char *)objc_retain(*(id *)(*(_QWORD *)(v6 + 16)
                                       + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard));
        swift_release(v6);
        v8 = *(_QWORD *)&v7[OBJC_IVAR____TtC8Freeform8CRLBoard_shareState];
        swift_retain(v8);

        v9 = *(void **)(v8 + 16);
        v10 = v9;
        v11 = swift_release(v8);
        return (*(uint64_t (**)(void *, __n128))(v0 + 8))(v9, v11);
      }
    }
    swift_endAccess(v0 + 16);
  }
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100C9C8A8, 0, 0);
}

uint64_t sub_100C9C8A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[11];
  v2 = v0[6];
  v3 = swift_task_alloc(32);
  v0[12] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[13] = v4;
  v5 = sub_1004B804C(&qword_101405618);
  *v4 = v0;
  v4[1] = sub_100C9C95C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000017, 0x8000000101009630, sub_100CEBBD0, v3, v5);
}

uint64_t sub_100C9C95C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100C9CA68;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 96));
    v4 = sub_100C9C9C8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100C9C9C8()
{
  _QWORD *v0;

  v0[15] = v0[5];
  return swift_task_switch(sub_100C9C9E0, v0[9], v0[10]);
}

uint64_t sub_100C9C9E0()
{
  uint64_t v0;
  __n128 v1;
  _QWORD *v3;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = swift_release(*(_QWORD *)(v0 + 64));
    return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 120), v1);
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc(dword_10140F0B4);
    *(_QWORD *)(v0 + 128) = v3;
    *v3 = v0;
    v3[1] = sub_100C9CAD4;
    return sub_100D2AE50(*(_QWORD *)(v0 + 48));
  }
}

uint64_t sub_100C9CA68()
{
  _QWORD *v0;

  swift_task_dealloc(v0[12]);
  return swift_task_switch(sub_100C9CAA0, v0[9], v0[10]);
}

uint64_t sub_100C9CAA0()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100C9CAD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 128);
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100C9CC68;
  else
    v5 = sub_100C9CB3C;
  return swift_task_switch(v5, v3[9], v3[10]);
}

uint64_t sub_100C9CB3C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  __n128 v6;

  v1 = *(void **)(v0 + 136);
  if (v1)
  {
    v2 = dword_10140DF04;
    v3 = v1;
    v4 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 152) = v4;
    *v4 = v0;
    v4[1] = sub_100C9CBC4;
    return sub_100C9CCDC(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 136), 1);
  }
  else
  {
    v6 = swift_release(*(_QWORD *)(v0 + 64));
    return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(0, v6);
  }
}

uint64_t sub_100C9CBC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 72);
    v5 = *(_QWORD *)(v2 + 80);
    v6 = sub_100C9CC9C;
  }
  else
  {

    v4 = *(_QWORD *)(v2 + 72);
    v5 = *(_QWORD *)(v2 + 80);
    v6 = sub_100C9CC30;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100C9CC30()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 136), v1);
}

uint64_t sub_100C9CC68()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100C9CC9C()
{
  uint64_t v0;
  void *v1;
  __n128 v2;

  v1 = *(void **)(v0 + 136);

  v2 = swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_100C9CCDC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 160) = a2;
  *(_QWORD *)(v4 + 168) = v3;
  *(_BYTE *)(v4 + 216) = a3;
  *(_QWORD *)(v4 + 152) = a1;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 176) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  *(_QWORD *)(v4 + 184) = v6;
  *(_QWORD *)(v4 + 192) = v7;
  return swift_task_switch(sub_100C9CD50, v6, v7);
}

uint64_t sub_100C9CD50()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;

  if (qword_1013DD8C8 != -1)
    swift_once(&qword_1013DD8C8, sub_100A069BC);
  v1 = *(_QWORD *)(v0 + 160);
  swift_beginAccess(&static OS_os_log.shareState, v0 + 128, 0, 0);
  v2 = (void *)static OS_os_log.shareState;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 16);
  v5 = (_QWORD *)inited;
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v6 = inited + 32;
  v7 = *(void **)(v0 + 160);
  if (v1)
  {
    *(_QWORD *)(v0 + 112) = sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
    *(_QWORD *)(v0 + 120) = sub_1005A15B8((unint64_t *)&qword_1013EF500, &qword_1013E0240, CKShare_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v0 + 88) = v7;
    sub_1004DB728((__int128 *)(v0 + 88), v6);
  }
  else
  {
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    v5[4] = 7104878;
    v5[5] = 0xE300000000000000;
  }
  v8 = v2;
  v9 = v7;
  v11 = static os_log_type_t.default.getter(v10);
  sub_100A06EBC((uint64_t)v8, &_mh_execute_header, v11, "Trying to update saved share with: %@", 37, 2, (uint64_t)v5);
  swift_setDeallocating(v5);
  v12 = v5[2];
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v6, v12, v13);

  if (v1)
  {
    v14 = objc_msgSend(v9, "containerID");

    if (!v14)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165, "The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crl_checkForNilContainerID()", 28, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2u, 165, (uint64_t)"The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u);
      objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
    }
  }
  v15 = (_QWORD *)swift_task_alloc(dword_10140DF0C);
  *(_QWORD *)(v0 + 200) = v15;
  *v15 = v0;
  v15[1] = sub_100C9CFF8;
  return sub_100CB1EE0(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_BYTE *)(v0 + 216));
}

uint64_t sub_100C9CFF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100C9D08C;
  else
    v4 = sub_100C9D058;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 192));
}

uint64_t sub_100C9D058()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100C9D08C()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

void *sub_100C9D0C0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  return sub_100C9D5E8(a1, a2, a3);
}

void sub_100C9D0D4(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char v19;
  id v20[2];
  int64_t v21;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v21 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  v10 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = 8 * i;
    v17 = *(void **)(*(_QWORD *)(a3 + 56) + v16);
    v20[0] = *(id *)(*(_QWORD *)(a3 + 48) + v16);
    v20[1] = v17;
    v18 = v20[0];
    swift_bridgeObjectRetain(v17);
    v19 = a1(v20);
    if (v3)
    {
      swift_release(a3);
      swift_bridgeObjectRelease(v17);

      return;
    }
    if ((v19 & 1) != 0)
    {
LABEL_27:
      swift_release(a3);
      return;
    }
    swift_bridgeObjectRelease(v17);

    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v10 >= v21)
      goto LABEL_27;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    if (!v14)
      break;
LABEL_17:
    v9 = (v14 - 1) & v14;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v21)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 2;
  if (v10 + 2 >= v21)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 3;
  if (v10 + 3 >= v21)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 4;
  if (v10 + 4 >= v21)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v21)
      goto LABEL_27;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
}

void sub_100C9D2D0(uint64_t (*a1)(uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = _s8ItemDataCMa(0);
    v10 = sub_1004B7878((unint64_t *)&qword_101402B88, _s8ItemDataCMa, (uint64_t)&unk_100F22174);
    v11 = Set.Iterator.init(_cocoa:)(v34, v8, v9, v10);
    v5 = v34[0];
    v32 = v34[1];
    v12 = v34[2];
    v13 = v34[3];
    v14 = v34[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v32 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain(a3);
    v12 = v16;
    v13 = 0;
  }
  v31 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(v11);
  if (!v19)
    goto LABEL_39;
  v20 = v19;
  v33 = v19;
  v21 = _s8ItemDataCMa(0);
  swift_unknownObjectRetain(v20);
  swift_dynamicCast(&v35, &v33, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
  v22 = v35;
  v23 = swift_unknownObjectRelease(v20);
  v24 = v13;
  v25 = v14;
  if (!v22)
    goto LABEL_39;
  while (1)
  {
    v35 = v22;
    v29 = a1(&v35, v23);
    if (v4)
    {
      swift_release(v22);
      goto LABEL_39;
    }
    if ((v29 & 1) != 0)
      goto LABEL_39;
    swift_release(v22);
    v13 = v24;
    v14 = v25;
    if (v5 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v14)
      break;
    v25 = (v14 - 1) & v14;
    v26 = __clz(__rbit64(v14)) | (v13 << 6);
    v24 = v13;
LABEL_27:
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v26);
    v23 = swift_retain(v22);
    if (!v22)
      goto LABEL_39;
  }
  v24 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    return;
  }
  if (v24 >= v31)
    goto LABEL_39;
  v27 = *(_QWORD *)(v32 + 8 * v24);
  if (v27)
  {
LABEL_26:
    v25 = (v27 - 1) & v27;
    v26 = __clz(__rbit64(v27)) + (v24 << 6);
    goto LABEL_27;
  }
  v28 = v13 + 2;
  if (v13 + 2 >= v31)
    goto LABEL_39;
  v27 = *(_QWORD *)(v32 + 8 * v28);
  if (v27)
    goto LABEL_25;
  v28 = v13 + 3;
  if (v13 + 3 >= v31)
    goto LABEL_39;
  v27 = *(_QWORD *)(v32 + 8 * v28);
  if (v27)
    goto LABEL_25;
  v28 = v13 + 4;
  if (v13 + 4 >= v31)
    goto LABEL_39;
  v27 = *(_QWORD *)(v32 + 8 * v28);
  if (v27)
  {
LABEL_25:
    v24 = v28;
    goto LABEL_26;
  }
  v24 = v13 + 5;
  if (v13 + 5 >= v31)
    goto LABEL_39;
  v27 = *(_QWORD *)(v32 + 8 * v24);
  if (v27)
    goto LABEL_26;
  v30 = v13 + 6;
  while (v31 != v30)
  {
    v27 = *(_QWORD *)(v32 + 8 * v30++);
    if (v27)
    {
      v24 = v30 - 1;
      goto LABEL_26;
    }
  }
LABEL_39:
  sub_1004D284C(v5);
}

void *sub_100C9D5E8(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  id v15;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v15 = v9;
      v12 = a1(&v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v10;
      }
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  return 0;
}

void sub_100C9D708(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v26 = a3;
  v25 = type metadata accessor for CRLSELibraryViewModel.Item(0);
  v29 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - v9;
  v11 = *(_QWORD *)(a2 + 56);
  v27 = a2 + 56;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v28 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v15 = 0;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    sub_1004B8460(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v29 + 72) * i, (uint64_t)v10, type metadata accessor for CRLSELibraryViewModel.Item);
    sub_1004B84E0((uint64_t)v10, (uint64_t)v7, type metadata accessor for CRLSELibraryViewModel.Item);
    v21 = a1(v7);
    if (v3)
    {
      sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLSELibraryViewModel.Item);
      swift_release(a2);
      return;
    }
    if ((v21 & 1) != 0)
    {
      swift_release(a2);
      v22 = v26;
      sub_1004B84E0((uint64_t)v7, v26, type metadata accessor for CRLSELibraryViewModel.Item);
      v23 = 0;
      v24 = v25;
      goto LABEL_29;
    }
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLSELibraryViewModel.Item);
    if (v14)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v15++, 1))
      break;
    if (v15 >= v28)
      goto LABEL_28;
    v19 = *(_QWORD *)(v27 + 8 * v15);
    if (!v19)
    {
      v20 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_28;
      v19 = *(_QWORD *)(v27 + 8 * v20);
      if (v19)
        goto LABEL_16;
      v20 = v15 + 2;
      if (v15 + 2 >= v28)
        goto LABEL_28;
      v19 = *(_QWORD *)(v27 + 8 * v20);
      if (v19)
        goto LABEL_16;
      v20 = v15 + 3;
      if (v15 + 3 >= v28)
        goto LABEL_28;
      v19 = *(_QWORD *)(v27 + 8 * v20);
      if (v19)
      {
LABEL_16:
        v15 = v20;
        goto LABEL_17;
      }
      v20 = v15 + 4;
      if (v15 + 4 < v28)
      {
        v19 = *(_QWORD *)(v27 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v15 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_31;
            if (v15 >= v28)
              goto LABEL_28;
            v19 = *(_QWORD *)(v27 + 8 * v15);
            ++v20;
            if (v19)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v24 = v25;
      v22 = v26;
      swift_release(a2);
      v23 = 1;
LABEL_29:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v22, v23, 1, v24);
      return;
    }
LABEL_17:
    v14 = (v19 - 1) & v19;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t sub_100C9D9C0(uint64_t a1, uint64_t a2)
{
  return sub_100C9D9D8(a1, a2, type metadata accessor for CRLShapeItem);
}

uint64_t sub_100C9D9CC(uint64_t a1, uint64_t a2)
{
  return sub_100C9D9D8(a1, a2, type metadata accessor for CRLBoardItem);
}

uint64_t sub_100C9D9D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  id v18;
  char v19;
  uint64_t v20;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v7 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v8 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v9 = v8;
      a3 = (uint64_t (*)(_QWORD))a3(0);
      v10 = static NSObject.== infix(_:_:)(v9, a1);

      if ((v10 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v6 == 1)
        goto LABEL_18;
      if (v7)
        break;
      v7 = 5;
      while (1)
      {
        v17 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v18 = *(id *)(a2 + 8 * v7);
        v19 = static NSObject.== infix(_:_:)(v18, a1);

        if ((v19 & 1) != 0)
          goto LABEL_6;
        ++v7;
        if (v17 == v6)
          goto LABEL_18;
      }
      __break(1u);
    }
    v12 = 1;
    while (1)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a2);
      v14 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      v15 = v13;
      v16 = static NSObject.== infix(_:_:)(v13, a1);
      swift_unknownObjectRelease(v15);
      if ((v16 & 1) != 0)
        goto LABEL_6;
      ++v12;
      if (v14 == v6)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v20 = a2;
    else
      v20 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100C9DB50(uint64_t a1, uint64_t a2)
{
  return sub_100C9D9D8(a1, a2, type metadata accessor for CRLCollaborationParticipant);
}

uint64_t sub_100C9DB5C(uint64_t a1, uint64_t a2)
{
  return sub_100C9DB70(a1, a2, (uint64_t)&qword_1013F6620, UIViewController_ptr);
}

uint64_t sub_100C9DB70(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v9 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v10 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v11 = v10;
      a4 = (_QWORD *)sub_1004B8930(0, (unint64_t *)a3, a4);
      a3 = static NSObject.== infix(_:_:)(v11, a1);

      if ((a3 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v8 == 1)
        goto LABEL_18;
      if (v9)
        break;
      v9 = 5;
      while (1)
      {
        v17 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
          break;
        a3 = (uint64_t)*(id *)(a2 + 8 * v9);
        v18 = static NSObject.== infix(_:_:)(a3, a1);

        if ((v18 & 1) != 0)
          goto LABEL_6;
        ++v9;
        if (v17 == v8)
          goto LABEL_18;
      }
      __break(1u);
    }
    a3 = 1;
    while (1)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, a2);
      v14 = a3 + 1;
      if (__OFADD__(a3, 1))
        break;
      v15 = v13;
      v16 = static NSObject.== infix(_:_:)(v13, a1);
      swift_unknownObjectRelease(v15);
      if ((v16 & 1) != 0)
        goto LABEL_6;
      ++a3;
      if (v14 == v8)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v19 = a2;
    else
      v19 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100C9DCF4(uint64_t a1, uint64_t a2)
{
  return sub_100C9D9D8(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for CRLTextSelectionRect);
}

uint64_t sub_100C9DD00(uint64_t a1, uint64_t a2)
{
  return sub_100C9DB70(a1, a2, (uint64_t)&unk_1013F4880, UILayoutGuide_ptr);
}

uint64_t sub_100C9DD14(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100C9DDD8(uint64_t a1, uint64_t a2)
{
  return sub_100C9DB70(a1, a2, (uint64_t)&qword_1013E56E0, off_101229808);
}

uint64_t sub_100C9DDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - v8;
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - v12;
  v14 = *(_QWORD *)(a2 + 16);
  if (!v14)
    return 0;
  v15 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v16 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain(a2);
  while (1)
  {
    sub_1004B8460(v15, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    v17 = static UUID.== infix(_:_:)(v13);
    sub_1004B8460((uint64_t)v13, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(a1, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    if ((v17 & 1) == 0)
    {
      sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
      goto LABEL_4;
    }
    v18 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
    v19 = *(_QWORD *)&v9[v18];
    v20 = *(_QWORD *)&v9[v18 + 8];
    v21 = &v6[v18];
    v22 = *((_QWORD *)v21 + 1);
    if (v19 == *(_QWORD *)v21 && v20 == v22)
      break;
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *(_QWORD *)v21, v22, 0);
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    if ((v24 & 1) != 0)
      goto LABEL_15;
LABEL_4:
    v15 += v16;
    if (!--v14)
    {
      v25 = 0;
      goto LABEL_16;
    }
  }
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
LABEL_15:
  v25 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  return v25;
}

BOOL sub_100C9DFEC(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100C9E04C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BOOL8 v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  void (*v42)(char *, uint64_t);
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v4 = type metadata accessor for AnyCRValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  v11 = sub_1004B804C(&qword_1013FC358);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (int64_t *)((char *)&v43 - v16);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v47 = a2;
  v48 = 0;
  v46 = a1;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v44 = v19;
  v45 = (unint64_t)(v21 + 63) >> 6;
  v43 = v45 - 1;
  while (1)
  {
    if (v23)
    {
      v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v25 = v24 | (v48 << 6);
LABEL_8:
      v26 = *(_QWORD *)(*(_QWORD *)(v46 + 48) + 8 * v25);
      v27 = *(_QWORD *)(v46 + 56) + *(_QWORD *)(v5 + 72) * v25;
      v28 = sub_1004B804C(&qword_1013FC360);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v14[*(int *)(v28 + 48)], v27, v4);
      *(_QWORD *)v14 = v26;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 0, 1, v28);
      v29 = v47;
      goto LABEL_27;
    }
    v30 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    v29 = v47;
    if (v30 < v45)
    {
      v31 = *(_QWORD *)(v44 + 8 * v30);
      if (v31)
        goto LABEL_12;
      v32 = v48 + 2;
      ++v48;
      if (v30 + 1 < v45)
      {
        v31 = *(_QWORD *)(v44 + 8 * v32);
        if (v31)
          goto LABEL_15;
        v48 = v30 + 1;
        if (v30 + 2 < v45)
        {
          v31 = *(_QWORD *)(v44 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          v32 = v30 + 3;
          v48 = v30 + 2;
          if (v30 + 3 < v45)
            break;
        }
      }
    }
LABEL_26:
    v33 = sub_1004B804C(&qword_1013FC360);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 1, 1, v33);
    v23 = 0;
LABEL_27:
    sub_1004C4938((uint64_t)v14, (uint64_t)v17, &qword_1013FC358);
    v34 = sub_1004B804C(&qword_1013FC360);
    v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v17, 1, v34);
    v36 = v35 == 1;
    if (v35 == 1)
      return v36;
    v37 = (char *)v17 + *(int *)(v34 + 48);
    v38 = *v17;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v37, v4);
    v39 = sub_100842E60(v38);
    if ((v40 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      return 0;
    }
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v29 + 56) + *(_QWORD *)(v5 + 72) * v39, v4);
    sub_1004B7878(&qword_10140DFE0, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCRValue, (uint64_t)&protocol conformance descriptor for AnyCRValue);
    v41 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10);
    v42 = *(void (**)(char *, uint64_t))(v5 + 8);
    v42(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v42)(v10, v4);
    if ((v41 & 1) == 0)
      return v36;
  }
  v31 = *(_QWORD *)(v44 + 8 * v32);
  if (v31)
  {
LABEL_15:
    v30 = v32;
LABEL_12:
    v23 = (v31 - 1) & v31;
    v25 = __clz(__rbit64(v31)) + (v30 << 6);
    v48 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v45)
    {
      v48 = v43;
      goto LABEL_26;
    }
    v31 = *(_QWORD *)(v44 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

void sub_100C9E440(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_23:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v19 = sub_100842E98(v16, v17);
    v21 = v20;
    swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0)
      return;
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19);
    if (v22 == 2)
    {
      if (v18 != 2)
        return;
    }
    else
    {
      if (v18 == 2)
        return;
      v23 = (v18 & 1) == ((v22 & 1) == 0) || ((v18 >> 8) & 1) == ((v22 & 0x100) == 0);
      v24 = v23 || ((v18 >> 16) & 1) == ((v22 & 0x10000) == 0);
      v25 = v24 || ((v18 >> 24) & 1) == ((v22 & 0x1000000) == 0);
      if (v25 || *((float *)&v22 + 1) != *((float *)&v18 + 1))
        return;
    }
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v12 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_22;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_22;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_22:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_23;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_42:
  __break(1u);
}

void sub_100C9E654(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  int64_t v28;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v28)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v28)
        return;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v28)
          return;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    v21 = sub_100842E98(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease(v17);
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease(v19);
      return;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    v25 = v24[1];
    if (*v24 == v20 && v25 == v19)
    {
      swift_bridgeObjectRelease(v19);
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v20, v19, 0);
      swift_bridgeObjectRelease(v19);
      if ((v27 & 1) == 0)
        return;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v28)
    return;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v28)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_100C9E858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t);
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  _BOOL4 v60;
  uint64_t v61;

  v4 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
  v61 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v57 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - v7;
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  v56 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v58 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1004B804C(&qword_10140DFB8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v50 - v16;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v59 = 0;
  v54 = a1;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v52 = v19;
  v53 = (unint64_t)(v21 + 63) >> 6;
  v51 = v53 - 1;
  v24 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata;
  v55 = v8;
  while (1)
  {
    if (v23)
    {
      v25 = __clz(__rbit64(v23));
      v26 = (v23 - 1) & v23;
      v27 = v25 | (v59 << 6);
LABEL_8:
      v28 = v54;
      sub_1004B8460(*(_QWORD *)(v54 + 48) + *(_QWORD *)(v56 + 72) * v27, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      v29 = *(_QWORD *)(v28 + 56) + *(_QWORD *)(v61 + 72) * v27;
      v30 = sub_1004B804C(&qword_10140DFC0);
      sub_1004B8460(v29, (uint64_t)&v14[*(int *)(v30 + 48)], v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 0, 1, v30);
      goto LABEL_30;
    }
    v31 = v59 + 1;
    if (__OFADD__(v59, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v31 < v53)
    {
      v32 = *(_QWORD *)(v52 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v59 + 2;
      ++v59;
      if (v31 + 1 < v53)
      {
        v32 = *(_QWORD *)(v52 + 8 * v33);
        if (v32)
          goto LABEL_15;
        v59 = v31 + 1;
        if (v31 + 2 < v53)
        {
          v32 = *(_QWORD *)(v52 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          v59 = v31 + 2;
          if (v31 + 3 < v53)
          {
            v32 = *(_QWORD *)(v52 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3;
              goto LABEL_12;
            }
            v33 = v31 + 4;
            v59 = v31 + 3;
            if (v31 + 4 < v53)
              break;
          }
        }
      }
    }
LABEL_29:
    v34 = sub_1004B804C(&qword_10140DFC0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v14, 1, 1, v34);
    v26 = 0;
LABEL_30:
    sub_1004C4938((uint64_t)v14, (uint64_t)v17, &qword_10140DFB8);
    v35 = sub_1004B804C(&qword_10140DFC0);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v17, 1, v35);
    v60 = v36 == 1;
    if (v36 == 1)
      return v60;
    v37 = v26;
    v38 = v14;
    v39 = (uint64_t)&v17[*(int *)(v35 + 48)];
    v40 = v17;
    v41 = (uint64_t)v17;
    v42 = v58;
    v43 = v24;
    sub_1004B84E0(v41, v58, type metadata accessor for CRLBoardIdentifier);
    v44 = (uint64_t)v55;
    sub_1004B84E0(v39, (uint64_t)v55, v24);
    v45 = sub_100843264(v42);
    v47 = v46;
    sub_1004B84A4(v42, type metadata accessor for CRLBoardIdentifier);
    if ((v47 & 1) == 0)
    {
      sub_1004B84A4(v44, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
      return 0;
    }
    v48 = v57;
    sub_1004B8460(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v61 + 72) * v45, v57, v43);
    v49 = sub_100BC10A4(v48, v44);
    sub_1004B84A4(v48, v43);
    result = sub_1004B84A4(v44, v43);
    v24 = v43;
    v14 = v38;
    v17 = v40;
    v23 = v37;
    if ((v49 & 1) == 0)
      return v60;
  }
  v32 = *(_QWORD *)(v52 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    v26 = (v32 - 1) & v32;
    v27 = __clz(__rbit64(v32)) + (v31 << 6);
    v59 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v53)
    {
      v59 = v51;
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(v52 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100C9ECF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(__n128);
  __n128 v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  int64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int64_t v66;
  char *v67;
  uint64_t v68;
  _BOOL4 v69;
  unint64_t v70;
  uint64_t v71;
  char v72[24];
  char v73[32];

  v4 = type metadata accessor for CRLBoardCRDTData(0);
  v5 = __chkstk_darwin(v4);
  v63 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v64 = (uint64_t)&v59 - v7;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v67 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1004B804C(&qword_10140E0B8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v59 - v16;
  v68 = a1;
  v71 = a2;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(v68 + 16) != *(_QWORD *)(v71 + 16))
    return 0;
  v18 = 0;
  v19 = *(_QWORD *)(v68 + 64);
  v60 = v68 + 64;
  v20 = 1 << *(_BYTE *)(v68 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v61 = (unint64_t)(v20 + 63) >> 6;
  v62 = v14;
  v59 = v61 - 1;
  v65 = (char *)&v59 - v16;
  while (1)
  {
    if (v22)
    {
      v23 = __clz(__rbit64(v22));
      v24 = (v22 - 1) & v22;
      v25 = v23 | (v18 << 6);
LABEL_8:
      v26 = v68;
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, *(_QWORD *)(v68 + 48) + *(_QWORD *)(v9 + 72) * v25, v8);
      v27 = *(_QWORD *)(v26 + 56);
      v28 = sub_1004B804C(&qword_101405F50);
      v29 = *(_QWORD *)(v27 + 8 * v25);
      *(_QWORD *)&v14[*(int *)(v28 + 48)] = v29;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 0, 1, v28);
      swift_retain(v29);
      goto LABEL_30;
    }
    v30 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v30 < v61)
    {
      v31 = *(_QWORD *)(v60 + 8 * v30);
      if (v31)
        goto LABEL_12;
      v32 = v18 + 2;
      ++v18;
      if (v30 + 1 < v61)
      {
        v31 = *(_QWORD *)(v60 + 8 * v32);
        if (v31)
          goto LABEL_15;
        v18 = v30 + 1;
        if (v30 + 2 < v61)
        {
          v31 = *(_QWORD *)(v60 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          v18 = v30 + 2;
          if (v30 + 3 < v61)
          {
            v31 = *(_QWORD *)(v60 + 8 * (v30 + 3));
            if (v31)
            {
              v30 += 3;
              goto LABEL_12;
            }
            v32 = v30 + 4;
            v18 = v30 + 3;
            if (v30 + 4 < v61)
              break;
          }
        }
      }
    }
LABEL_29:
    v33 = sub_1004B804C(&qword_101405F50);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 1, 1, v33);
    v24 = 0;
LABEL_30:
    sub_1004C4938((uint64_t)v14, (uint64_t)v17, &qword_10140E0B8);
    v34 = sub_1004B804C(&qword_101405F50);
    v35 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v17, 1, v34) == 1;
    result = v35;
    if (v35)
      return result;
    v69 = v35;
    v70 = v24;
    v36 = *(int *)(v34 + 48);
    v37 = (uint64_t)v67;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v67, v17, v8);
    v38 = *(_QWORD *)&v17[v36];
    v39 = sub_100842EFC(v37);
    v41 = v40;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v37, v8);
    if ((v41 & 1) == 0)
    {
      v58 = v38;
      goto LABEL_43;
    }
    v42 = v8;
    v43 = *(_QWORD *)(*(_QWORD *)(v71 + 56) + 8 * v39);
    v44 = v43 + OBJC_IVAR____TtC8Freeform19CRLTransactableData_id;
    swift_retain(v43);
    if ((static UUID.== infix(_:_:)(v44) & 1) == 0)
      goto LABEL_41;
    v45 = *(_QWORD *)(v43 + OBJC_IVAR____TtC8Freeform19CRLTransactableData_data);
    v46 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8Freeform19CRLTransactableData_data);
    if (v45 < 0)
    {
      if ((v46 & 0x8000000000000000) == 0)
      {
LABEL_41:
        swift_release(v38);
        v58 = v43;
LABEL_43:
        swift_release(v58);
        return 0;
      }
      v54 = v45 & 0x7FFFFFFFFFFFFFFFLL;
      v55 = v46 & 0x7FFFFFFFFFFFFFFFLL;
      v56 = *(uint64_t (**)(__n128))(*(_QWORD *)v54 + 448);
      swift_retain(v54);
      v57 = swift_retain(v55);
      LOBYTE(v56) = v56(v57);
      swift_release(v38);
      swift_release(v43);
      swift_release(v54);
      swift_release(v55);
      v8 = v42;
      v17 = v65;
      v22 = v70;
      result = v69;
      if ((v56 & 1) == 0)
        return result;
    }
    else
    {
      if (v46 < 0)
        goto LABEL_41;
      v66 = v18;
      v47 = v45 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v45 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v73, 0, 0);
      v48 = v64;
      sub_1004B8460(v47, v64, type metadata accessor for CRLBoardCRDTData);
      v49 = v46 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v46 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v72, 0, 0);
      v50 = v9;
      v51 = v63;
      sub_1004B8460(v49, v63, type metadata accessor for CRLBoardCRDTData);
      swift_retain(v45);
      swift_retain(v46);
      LOBYTE(v49) = sub_100DDAE78(v48, v51);
      v52 = v51;
      v9 = v50;
      v18 = v66;
      sub_1004B84A4(v52, type metadata accessor for CRLBoardCRDTData);
      v53 = v48;
      v14 = v62;
      sub_1004B84A4(v53, type metadata accessor for CRLBoardCRDTData);
      swift_release(v38);
      swift_release(v43);
      swift_release(v45);
      swift_release(v46);
      v8 = v42;
      v17 = v65;
      v22 = v70;
      result = v69;
      if ((v49 & 1) == 0)
        return result;
    }
  }
  v31 = *(_QWORD *)(v60 + 8 * v32);
  if (v31)
  {
LABEL_15:
    v30 = v32;
LABEL_12:
    v24 = (v31 - 1) & v31;
    v25 = __clz(__rbit64(v31)) + (v30 << 6);
    v18 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v61)
    {
      v18 = v59;
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(v60 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_12;
  }
LABEL_47:
  __break(1u);
  return result;
}

void sub_100C9F2C8(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  char v23;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    swift_bridgeObjectRetain(v16);
    v18 = sub_100849E04();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease(v16);
      return;
    }
    v20 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18);
    v21 = v20[1];
    if (*v20 == v17 && v21 == v16)
    {
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v17, v16, 0);
      swift_bridgeObjectRelease(v16);
      if ((v23 & 1) == 0)
        return;
    }
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_100C9F48C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[14] = a1;
  v2[15] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[16] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[17] = v4;
  v2[18] = v5;
  return swift_task_switch(sub_100C9F4F8, v4, v5);
}

uint64_t sub_100C9F4F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  __n128 v6;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = (_QWORD *)(v1 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v3 = v2[1];
  if (*v2)
    v4 = 0;
  else
    v4 = v3 == 0xE000000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v2, v3, 0, 0xE000000000000000, 0) & 1) != 0)
  {
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    return swift_task_switch(sub_100C9F59C, 0, 0);
  }
  else
  {
    v6 = swift_release(*(_QWORD *)(v0 + 128));
    return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(0, v6);
  }
}

uint64_t sub_100C9F59C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[19];
  v2 = v0[14];
  v3 = swift_task_alloc(32);
  v0[20] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[21] = v4;
  *v4 = v0;
  v4[1] = sub_100C9F648;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 23, 0, 0, 0xD000000000000039, 0x8000000101009650, sub_100CEBBD8, v3, &type metadata for Bool);
}

uint64_t sub_100C9F648()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100C9F774;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 160));
    v4 = sub_100C9F6B4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100C9F6B4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 185) = *(_BYTE *)(v0 + 184);
  return swift_task_switch(sub_100C9F6CC, *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
}

uint64_t sub_100C9F6CC()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  id v3;

  v1 = *(unsigned __int8 *)(v0 + 185);
  v2 = swift_release(*(_QWORD *)(v0 + 128));
  if ((v1 & 1) == 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1013DDE38 != -1)
      swift_once(&qword_1013DDE38, sub_100CAC328);
    objc_msgSend(v3, "postNotificationName:object:", qword_1014812B8, *(_QWORD *)(v0 + 120));

  }
  return (*(uint64_t (**)(uint64_t, __n128))(v0 + 8))(v1, v2);
}

uint64_t sub_100C9F774()
{
  _QWORD *v0;

  swift_task_dealloc(v0[20]);
  return swift_task_switch(sub_100C9F7AC, v0[17], v0[18]);
}

uint64_t sub_100C9F7AC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 128));
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v1 = *(_QWORD *)(v0 + 176);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 88, 0, 0);
  v2 = (void *)static OS_os_log.crlBoardLibrary;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v5 = v2;
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v9 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v8;
  v10 = static os_log_type_t.error.getter(v9);
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v10, "Failed to check fetchBoardExistsAndHasSyncedAtLeastOnce for %{public}@", 70, 2, inited);
  swift_setDeallocating(inited);
  v11 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v11);

  swift_errorRelease(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100C9F8F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t inited;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  __n128 v60;
  uint64_t v61;
  _BYTE *v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  _BYTE *v70;
  _QWORD v71[3];
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  double v82;
  _BYTE v83[24];
  _BYTE v84[72];
  _BYTE v85[72];
  _BYTE v86[8];

  v4 = v2;
  v7 = sub_1004B804C(&qword_1013F5478);
  __chkstk_darwin(v7);
  v77 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v78);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v76 - 8);
  v11 = __chkstk_darwin(v76);
  v79 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v81 = (char *)&v72 - v13;
  v14 = (int *)type metadata accessor for CRLBoardViewModelMetadata(0);
  v15 = *((_QWORD *)v14 - 1);
  __chkstk_darwin(v14);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata);
  swift_beginAccess(v18, v86, 32, 0);
  v19 = *v18;
  if (*(_QWORD *)(v19 + 16) && (v20 = sub_100843264(a1), (v21 & 1) != 0))
  {
    sub_1004B8460(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v15 + 72) * v20, (uint64_t)v17, type metadata accessor for CRLBoardViewModelMetadata);
    sub_1004B84E0((uint64_t)v17, a2, type metadata accessor for CRLBoardViewModelMetadata);
    return swift_endAccess(v86);
  }
  else
  {
    swift_endAccess(v86);
    v23 = (uint64_t *)(v4 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
    swift_beginAccess(v4 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos, v86, 32, 0);
    v24 = *v23;
    if (*(_QWORD *)(*v23 + 16) && (v25 = sub_100843264(a1), (v26 & 1) != 0))
    {
      v73 = (_BYTE *)a2;
      v74 = v3;
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
      swift_endAccess(v86);
      v28 = qword_1013DD748;
      v75 = v27;
      swift_retain(v27);
      if (v28 != -1)
        swift_once(&qword_1013DD748, sub_100A023E8);
      swift_beginAccess(&static OS_os_log.crlBoardLibrary, v86, 0, 0);
      v29 = (void *)static OS_os_log.crlBoardLibrary;
      v30 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v30, v84);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v32 = v29;
      v33 = UUID.uuidString.getter(v32);
      v35 = v34;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v33;
      *(_QWORD *)(inited + 40) = v35;
      v36 = static os_log_type_t.debug.getter();
      sub_100A06EBC((uint64_t)v32, &_mh_execute_header, v36, "No metadata in snapshot; returning metadata for open board with identifier: %@",
        78,
        2,
        inited);
      swift_setDeallocating(inited);
      v37 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v37);

      v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard)
                      + OBJC_IVAR____TtC8Freeform8CRLBoard_data);
      v39 = v38 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v38 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v83, 0, 0);
      sub_1004B8460(v39, (uint64_t)v10, type metadata accessor for CRLBoardCRDTData);
      v72 = v38;
      swift_retain(v38);
      v40 = sub_1004B804C(&qword_1013FE148);
      CRMaxRegister.wrappedValue.getter(&v82, v40);
      v41 = v82;
      v42 = sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardCRDTData);
      v43 = Date.init(timeIntervalSinceReferenceDate:)(v42, v41);
      v44 = *(_QWORD *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController)
                      + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
      __chkstk_darwin(v43);
      v71[2] = a1;
      swift_bridgeObjectRetain(v44);
      v45 = sub_100C9D5E8((uint64_t (*)(id *))sub_1006F01E8, (uint64_t)v71, v44);
      swift_bridgeObjectRelease(v44);
      if (v45)

      sub_1004B8460(v39, (uint64_t)v10, type metadata accessor for CRLBoardCRDTData);
      type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
      v46 = sub_1004B804C((uint64_t *)&unk_1013F5590);
      CRRegister.wrappedValue.getter(v46);
      LODWORD(v78) = LOBYTE(v82);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardCRDTData);
      v47 = v76;
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v79, v81, v76);
      v48 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + 16)
                                             + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard)
                                 + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState)
                     + 16);
      if (v48)
      {
        v49 = v48;
        v50 = v77;
        sub_100BC0994(v49, v77);
        v51 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
      }
      else
      {
        v61 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
        v50 = v77;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v77, 1, 1, v61);
      }
      v62 = v73;
      v63 = v45 != 0;
      v64 = v72;
      v65 = *(_QWORD *)(v72 + 24);
      swift_retain(v72);
      v66 = sub_1001E9730();
      swift_release_n(v64, 2, v67);
      v68 = swift_release(v75);
      LOBYTE(v66) = v66 < v65;
      v69 = v80;
      (*(void (**)(char *, uint64_t, __n128))(v80 + 8))(v81, v47, v68);
      *v62 = v78;
      v62[1] = 0;
      (*(void (**)(_BYTE *, char *, uint64_t))(v69 + 32))(&v62[v14[6]], v79, v47);
      result = sub_1004C4938(v50, (uint64_t)&v62[v14[7]], &qword_1013F5478);
      v62[v14[8]] = 0;
      v62[v14[9]] = v63;
      v62[v14[10]] = v66;
      v70 = &v62[v14[11]];
      *(_QWORD *)v70 = 0;
      v70[8] = 1;
      v62[v14[12]] = 1;
      v62[v14[13]] = 1;
      v62[v14[14]] = 0;
      v62[v14[15]] = 0;
    }
    else
    {
      swift_endAccess(v86);
      v52 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v53 = swift_initStackObject(v52, v85);
      *(_OWORD *)(v53 + 16) = xmmword_100EF5E40;
      v54 = UUID.uuidString.getter(v53);
      v56 = v55;
      *(_QWORD *)(v53 + 56) = &type metadata for String;
      *(_QWORD *)(v53 + 64) = sub_1004CFC2C();
      *(_QWORD *)(v53 + 32) = v54;
      *(_QWORD *)(v53 + 40) = v56;
      sub_100757E04(&_mh_execute_header, (uint64_t)"boardMetadata(for:)", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 1074, "No metadata for board identifier: %@", 36, 2u, v53);
      sub_1004F5394(v53, (uint64_t)"boardMetadata(for:)", 19, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 1074, (uint64_t)"No metadata for board identifier: %@", 36, 2u);
      objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
      swift_setDeallocating(v53);
      v57 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v53 + 32, 1, v57);
      v58 = sub_100619D10();
      swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v58, 0, 0);
      *v59 = 0;
      return swift_willThrow(v60);
    }
  }
  return result;
}

void sub_100CA0104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[2];
  _QWORD v26[5];

  v2 = a1;
  v25[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v3 = __CocoaSet.makeIterator()(a1);
    v4 = type metadata accessor for CRLTransactableHashableWrapper();
    v5 = sub_1004B7878((unint64_t *)&qword_101405D90, (uint64_t (*)(uint64_t))type metadata accessor for CRLTransactableHashableWrapper, (uint64_t)&unk_100F393F8);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v2 = v26[0];
    v23 = v26[1];
    v6 = v26[2];
    v7 = v26[3];
    v8 = v26[4];
  }
  else
  {
    v7 = 0;
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v23 = a1 + 56;
    v6 = ~v9;
    v10 = -v9;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v8 = v11 & *(_QWORD *)(a1 + 56);
  }
  v12 = (unint64_t)(v6 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v8)
    {
      v13 = (v8 - 1) & v8;
      v14 = __clz(__rbit64(v8)) | (v7 << 6);
      v15 = v7;
      goto LABEL_31;
    }
    v20 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v20 >= v12)
      goto LABEL_34;
    v21 = *(_QWORD *)(v23 + 8 * v20);
    v15 = v7 + 1;
    if (!v21)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v12)
        goto LABEL_34;
      v21 = *(_QWORD *)(v23 + 8 * v15);
      if (!v21)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v12)
          goto LABEL_34;
        v21 = *(_QWORD *)(v23 + 8 * v15);
        if (!v21)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v12)
            goto LABEL_34;
          v21 = *(_QWORD *)(v23 + 8 * v15);
          if (!v21)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v12)
              goto LABEL_34;
            v21 = *(_QWORD *)(v23 + 8 * v15);
            if (!v21)
            {
              v22 = v7 + 6;
              while (v12 != v22)
              {
                v21 = *(_QWORD *)(v23 + 8 * v22++);
                if (v21)
                {
                  v15 = v22 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_1004D284C(v2);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v13 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_31:
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    swift_retain(v19);
    if (!v19)
      goto LABEL_34;
    while (1)
    {
      sub_100AD58F8(v25, v19);
      swift_release(v25[0]);
      v7 = v15;
      v8 = v13;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v16 = __CocoaSet.Iterator.next()(a1);
      if (v16)
      {
        v17 = v16;
        v24 = v16;
        v18 = type metadata accessor for CRLTransactableHashableWrapper();
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
        v19 = v25[0];
        swift_unknownObjectRelease(v17);
        v15 = v7;
        v13 = v8;
        if (v19)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

void sub_100CA0398(uint64_t a1, void *a2)
{
  sub_100CA07FC(a1, a2, type metadata accessor for CRLBoardItem, (unint64_t *)&qword_1013E4190, (void (*)(id *, id))sub_100AD7814);
}

uint64_t sub_100CA03B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  result = __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0;
  v16 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v17 + 63) >> 6;
  v26 = a2;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v20 | (v15 << 6); ; i = __clz(__rbit64(v23)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v14, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v14, v4);
    sub_100AD569C((uint64_t)v10, (uint64_t)v8);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (v19)
      goto LABEL_4;
LABEL_5:
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v22);
    ++v15;
    if (!v23)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v25)
        goto LABEL_24;
      v23 = *(_QWORD *)(v16 + 8 * v15);
      if (!v23)
      {
        v15 = v22 + 2;
        if (v22 + 2 >= v25)
          goto LABEL_24;
        v23 = *(_QWORD *)(v16 + 8 * v15);
        if (!v23)
        {
          v15 = v22 + 3;
          if (v22 + 3 >= v25)
            goto LABEL_24;
          v23 = *(_QWORD *)(v16 + 8 * v15);
          if (!v23)
            break;
        }
      }
    }
LABEL_20:
    v19 = (v23 - 1) & v23;
  }
  v24 = v22 + 4;
  if (v24 >= v25)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v14, 1, 1, v4);
LABEL_25:
    swift_release(a1);
    return v26;
  }
  v23 = *(_QWORD *)(v16 + 8 * v24);
  if (v23)
  {
    v15 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v15 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v15);
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_100CA0650(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[3];

  v3 = 0;
  v17[2] = a2;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_100AD8690(v17, v12, v13);
    swift_bridgeObjectRelease(v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100CA07CC(uint64_t a1, uint64_t a2)
{
  return sub_100CA0AB8(a1, a2, type metadata accessor for CRLBoardIdentifier, (void (*)(char *, char *))sub_100AD7844);
}

void sub_100CA07E0(uint64_t a1, void *a2)
{
  sub_100CA07FC(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for CRLiOSMiniFormatterBuilder, &qword_1013F4B40, (void (*)(id *, id))sub_100AD9FA8);
}

void sub_100CA07FC(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, void (*a5)(id *, id))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  id v32[2];
  _QWORD v33[5];

  v6 = a1;
  v32[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v9 = __CocoaSet.makeIterator()(a1);
    v10 = a3(0);
    v11 = sub_1004B7878(a4, a3, (uint64_t)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v33, v9, v10, v11);
    v6 = v33[0];
    v30 = v33[1];
    v12 = v33[2];
    v13 = v33[3];
    v14 = v33[4];
  }
  else
  {
    v13 = 0;
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v12 = ~v15;
    v16 = -v15;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v14 = v17 & *(_QWORD *)(a1 + 56);
  }
  v18 = (unint64_t)(v12 + 64) >> 6;
  if (v6 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v14)
    {
      v19 = (v14 - 1) & v14;
      v20 = __clz(__rbit64(v14)) | (v13 << 6);
      v21 = v13;
      goto LABEL_31;
    }
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v26 >= v18)
      goto LABEL_34;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    v21 = v13 + 1;
    if (!v27)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v18)
        goto LABEL_34;
      v27 = *(_QWORD *)(v30 + 8 * v21);
      if (!v27)
      {
        v21 = v13 + 3;
        if (v13 + 3 >= v18)
          goto LABEL_34;
        v27 = *(_QWORD *)(v30 + 8 * v21);
        if (!v27)
        {
          v21 = v13 + 4;
          if (v13 + 4 >= v18)
            goto LABEL_34;
          v27 = *(_QWORD *)(v30 + 8 * v21);
          if (!v27)
          {
            v21 = v13 + 5;
            if (v13 + 5 >= v18)
              goto LABEL_34;
            v27 = *(_QWORD *)(v30 + 8 * v21);
            if (!v27)
            {
              v28 = v13 + 6;
              while (v18 != v28)
              {
                v27 = *(_QWORD *)(v30 + 8 * v28++);
                if (v27)
                {
                  v21 = v28 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_1004D284C(v6);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v19 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_31:
    v25 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v20);
    if (!v25)
      goto LABEL_34;
    while (1)
    {
      a5(v32, v25);

      v13 = v21;
      v14 = v19;
      if ((v6 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v22 = __CocoaSet.Iterator.next()(a1);
      if (v22)
      {
        v23 = v22;
        v31 = v22;
        v24 = a3(0);
        swift_unknownObjectRetain(v23);
        swift_dynamicCast(v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
        v25 = v32[0];
        swift_unknownObjectRelease(v23);
        v21 = v13;
        v19 = v14;
        if (v25)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

uint64_t sub_100CA0AA4(uint64_t a1, uint64_t a2)
{
  return sub_100CA0AB8(a1, a2, _s17CategoryViewModelVMa, (void (*)(char *, char *))sub_100AD9FBC);
}

uint64_t sub_100CA0AB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v29 - v14;
  result = __chkstk_darwin(v13);
  v18 = (char *)&v29 - v17;
  v19 = 0;
  v20 = *(_QWORD *)(a1 + 56);
  v30 = a1 + 56;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v31 = (unint64_t)(v21 + 63) >> 6;
  v32 = a2;
  while (1)
  {
    if (v23)
    {
      v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v25 = v24 | (v19 << 6);
      goto LABEL_5;
    }
    v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v26 >= v31)
      goto LABEL_23;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v19;
    if (!v27)
    {
      v19 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_23;
      v27 = *(_QWORD *)(v30 + 8 * v19);
      if (!v27)
      {
        v19 = v26 + 2;
        if (v26 + 2 >= v31)
          goto LABEL_23;
        v27 = *(_QWORD *)(v30 + 8 * v19);
        if (!v27)
        {
          v19 = v26 + 3;
          if (v26 + 3 >= v31)
            goto LABEL_23;
          v27 = *(_QWORD *)(v30 + 8 * v19);
          if (!v27)
            break;
        }
      }
    }
LABEL_22:
    v23 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_5:
    sub_1004B8460(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v9 + 72) * v25, (uint64_t)v18, a3);
    sub_1004B84E0((uint64_t)v18, (uint64_t)v12, a3);
    a4(v15, v12);
    result = sub_1004B84A4((uint64_t)v15, a3);
  }
  v28 = v26 + 4;
  if (v28 >= v31)
  {
LABEL_23:
    swift_release(a1);
    return v32;
  }
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v19 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    v19 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v19 >= v31)
      goto LABEL_23;
    v27 = *(_QWORD *)(v30 + 8 * v19);
    ++v28;
    if (v27)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100CA0CFC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[19] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[20] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[21] = v3;
  v1[22] = v4;
  return swift_task_switch(sub_100CA0D68, v3, v4);
}

uint64_t sub_100CA0D68()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 152);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_didStartUpdating) & 1) != 0
    || (*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_didCallStartUpdating) & 1) != 0)
  {
    v2 = swift_release(*(_QWORD *)(v0 + 160));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
  }
  else
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_didCallStartUpdating) = 1;
    *(_QWORD *)(v0 + 136) = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    KeyPath = swift_getKeyPath(&unk_100F32168);
    v5 = swift_allocObject(&unk_10129FDF8, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16);
    v6 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 5, sub_100CED04C, v5, &protocol witness table for NSObject);
    swift_release(v5);
    swift_release(KeyPath);

    v7 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_userDataDeletionRequestObserver);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_userDataDeletionRequestObserver) = v6;

    v8 = (_QWORD *)swift_task_alloc(dword_10140E244);
    *(_QWORD *)(v0 + 184) = v8;
    *v8 = v0;
    v8[1] = sub_100CA0EBC;
    return sub_100CB60F4();
  }
}

uint64_t sub_100CA0EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v3 = *(_QWORD **)v1;
  v3[24] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100CA1024, v3[21], v3[22]);
  v5 = (_QWORD *)swift_task_alloc(dword_10140DF34);
  v3[25] = v5;
  *v5 = v3;
  v5[1] = sub_100CA0F50;
  return sub_100CEA898((uint64_t)&_swiftEmptySetSingleton);
}

uint64_t sub_100CA0F50()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 200));
  return swift_task_switch(sub_100CA0F9C, *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
}

uint64_t sub_100CA0F9C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 160));
  sub_100CB69C8();
  v2 = *(void **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController)
                + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_highlightObservers);
  if ((objc_msgSend(v2, "containsObject:", v1) & 1) == 0)
    objc_msgSend(v2, "addObject:", *(_QWORD *)(v0 + 152));
  sub_100CB40F8();
  sub_100CB0DE8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA1024()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if (qword_1013DD6C8 != -1)
    swift_once(&qword_1013DD6C8, sub_100A00D28);
  v1 = v0[24];
  swift_beginAccess(&static OS_os_log.crlError, v0 + 11, 0, 0);
  v2 = (void *)static OS_os_log.crlError;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v0 + 18, v0 + 14);
  v5 = v0[15];
  v6 = v0[16];
  v7 = v2;
  v8 = Error.localizedDescription.getter(v5, v6);
  v10 = v9;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v11 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v10;
  v12 = static os_log_type_t.error.getter(v11);
  sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v12, "Failed to mark all existing boards as not discardable: %@", 57, 2, inited);
  swift_setDeallocating(inited);
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v13);

  swift_errorRelease(v1);
  v14 = (_QWORD *)swift_task_alloc(dword_10140DF34);
  v0[25] = v14;
  *v14 = v0;
  v14[1] = sub_100CA0F50;
  return sub_100CEA898((uint64_t)&_swiftEmptySetSingleton);
}

uint64_t sub_100CA11BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[44] = a1;
  v2[45] = v1;
  v4 = type metadata accessor for MainActor(0);
  v2[46] = v4;
  v2[47] = static MainActor.shared.getter(v4);
  v5 = (_QWORD *)swift_task_alloc(dword_10140DEFC);
  v2[48] = v5;
  *v5 = v2;
  v5[1] = sub_100CA1238;
  return sub_100C9C704(a1, 1);
}

uint64_t sub_100CA1238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 384);
  *(_QWORD *)(*(_QWORD *)v2 + 392) = a1;
  swift_task_dealloc(v4);
  v5 = v3[46];
  if (v1)
  {
    swift_errorRelease(v1);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
    v8 = v7;
    v9 = sub_100CA1780;
    v10 = v6;
    v11 = v8;
  }
  else
  {
    v12 = dispatch thunk of Actor.unownedExecutor.getter(v3[46], &protocol witness table for MainActor);
    v11 = v13;
    v3[50] = v12;
    v3[51] = v13;
    v9 = sub_100CA12F8;
    v10 = v12;
  }
  return swift_task_switch(v9, v10, v11);
}

uint64_t sub_100CA12F8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  __n128 v21;
  void *v22;
  uint64_t v23;
  uint64_t inited;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 392);
  if (!v1)
  {
    swift_release(*(_QWORD *)(v0 + 376));
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v0 + 272, 0, 0);
    v22 = (void *)static OS_os_log.shareState;
    v23 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v23, v0 + 200);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v25 = v22;
    v26 = UUID.uuidString.getter(v25);
    v28 = v27;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(inited + 40) = v28;
    v30 = static os_log_type_t.default.getter(v29);
    sub_100A06EBC((uint64_t)v25, &_mh_execute_header, v30, "No share found for board with UUID: %@.", 39, 2, inited);
    swift_setDeallocating(inited);
    v31 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v31);

    return (*(uint64_t (**)(__n128))(v0 + 8))(v21);
  }
  v2 = objc_msgSend(*(id *)(v0 + 392), "participants");
  v3 = sub_1004B8930(0, (unint64_t *)&qword_1013FF620, CKShareParticipant_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v32 = v4;
    else
      v32 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v6 = swift_bridgeObjectRelease(v4).n128_u64[0];
  if (v5 != 1 || objc_msgSend(v1, "publicPermission", v6) != (id)1)
  {
    v20 = *(_QWORD *)(v0 + 376);

    v21 = swift_release(v20);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v21);
  }
  if (qword_1013DD8C8 != -1)
    swift_once(&qword_1013DD8C8, sub_100A069BC);
  swift_beginAccess(&static OS_os_log.shareState, v0 + 296, 0, 0);
  v7 = (void *)static OS_os_log.shareState;
  v8 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  *(_QWORD *)(v0 + 416) = v8;
  v9 = swift_initStackObject(v8, v0 + 128);
  *(_OWORD *)(v9 + 16) = xmmword_100EF5E40;
  v10 = v7;
  v11 = UUID.uuidString.getter(v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_1004CFC2C();
  *(_QWORD *)(v0 + 424) = v14;
  *(_QWORD *)(v9 + 64) = v14;
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  v16 = static os_log_type_t.default.getter(v15);
  sub_100A06EBC((uint64_t)v10, &_mh_execute_header, v16, "There are no participants. Deleting the share for board with UUID: %@.", 70, 2, v9);
  swift_setDeallocating(v9);
  v17 = sub_1004B804C(&qword_1013E0190);
  *(_QWORD *)(v0 + 432) = v17;
  swift_arrayDestroy(v9 + 32, 1, v17);

  v18 = (_QWORD *)swift_task_alloc(dword_10140F0D4);
  *(_QWORD *)(v0 + 440) = v18;
  *v18 = v0;
  v18[1] = sub_100CA1654;
  return sub_100D2BA60(*(_QWORD *)(v0 + 352));
}

uint64_t sub_100CA1654()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[55];
  v3 = *v1;
  v3[56] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100CA18BC, v3[50], v3[51]);
  v5 = (uint64_t **)swift_task_alloc(dword_10140DF04);
  v3[57] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_100CA16E8;
  return sub_100C9CCDC(v3[44], 0, 1);
}

uint64_t sub_100CA16E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 456);
  *(_QWORD *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CA19F8;
  else
    v4 = sub_100CA1748;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 400), *(_QWORD *)(v2 + 408));
}

uint64_t sub_100CA1748()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 392);
  swift_release(*(_QWORD *)(v0 + 376));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA1780()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*(_QWORD *)(v0 + 376));
  if (qword_1013DD8C8 != -1)
    swift_once(&qword_1013DD8C8, sub_100A069BC);
  swift_beginAccess(&static OS_os_log.shareState, v0 + 272, 0, 0);
  v1 = (void *)static OS_os_log.shareState;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v2, v0 + 200);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v4 = v1;
  v5 = UUID.uuidString.getter(v4);
  v7 = v6;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = v7;
  v9 = static os_log_type_t.default.getter(v8);
  sub_100A06EBC((uint64_t)v4, &_mh_execute_header, v9, "No share found for board with UUID: %@.", 39, 2, inited);
  swift_setDeallocating(inited);
  v10 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v10);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA18BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 416);
  v14 = *(void **)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 432);
  swift_release(*(_QWORD *)(v0 + 376));
  v4 = (void *)static OS_os_log.shareState;
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v6 = v4;
  v7 = UUID.uuidString.getter(v6);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v8;
  swift_getErrorValue(v1, v0 + 344, v0 + 320);
  v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v2;
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 80) = v10;
  v12 = static os_log_type_t.default.getter(v11);
  sub_100A06EBC((uint64_t)v6, &_mh_execute_header, v12, "Unsharing board failed. Board UUID: %@. Error: %@.", 50, 2, inited);

  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 2, v15);

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA19F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 416);
  v14 = *(void **)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 432);
  swift_release(*(_QWORD *)(v0 + 376));
  v4 = (void *)static OS_os_log.shareState;
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v6 = v4;
  v7 = UUID.uuidString.getter(v6);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v8;
  swift_getErrorValue(v1, v0 + 344, v0 + 320);
  v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v2;
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 80) = v10;
  v12 = static os_log_type_t.default.getter(v11);
  sub_100A06EBC((uint64_t)v6, &_mh_execute_header, v12, "Unsharing board failed. Board UUID: %@. Error: %@.", 50, 2, inited);

  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 2, v15);

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100CA1B34()
{
  uint64_t v0;
  id v1;
  Class isa;
  Class v3;
  _QWORD v4[3];

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v4[2] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  OS_dispatch_queue.sync<A>(execute:)(sub_100AFF0A0, v4, &type metadata for CRLBoardDataStore.CRLBoardDataStoreMetadata);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v1, "setValue:forKey:", isa, CFSTR("CRLUserHasDataUserDefault"));

  v3 = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v1, "setValue:forKey:", v3, CFSTR("CRLUserHasUnsyncedDataUserDefault"));

}

void sub_100CA1D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  _QWORD v21[2];
  _BYTE v22[8];
  _QWORD v23[3];
  _BYTE v24[8];
  _BYTE v25[112];
  uint64_t v26;
  char v27;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store)
                 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_sideStore);
  swift_retain(v1);
  v2 = sub_1004B804C(&qword_1013E8368);
  OS_dispatch_queue.sync<A>(execute:)(sub_100CECFF8, v1, v2);
  swift_release(v1);
  if (v27 == 1)
  {
    v3 = v26;
    swift_errorRetain(v26);
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, &v26, 0, 0);
    v4 = (void *)static OS_os_log.crlBoardLibrary;
    v5 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v5, v25);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    swift_getErrorValue(v3, v24, v23);
    v7 = v23[1];
    v8 = v23[2];
    v9 = v4;
    v10 = Error.publicDescription.getter(v7, v8);
    v12 = v11;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v13 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v13;
    *(_QWORD *)(inited + 32) = v10;
    *(_QWORD *)(inited + 40) = v12;
    swift_getErrorValue(v3, v22, v21);
    v14 = Error.fullDescription.getter(v21[1]);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 104) = v13;
    *(_QWORD *)(inited + 72) = v14;
    *(_QWORD *)(inited + 80) = v15;
    v16 = static os_log_type_t.error.getter(v14);
    sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v16, "Failed to clean up board load marks for app termination. Error: %{public}@ %@", 77, 2, inited);
    sub_1004E1DFC(v3, 1);
    swift_setDeallocating(inited);
    v17 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 2, v17);

    sub_1004E1DFC(v3, 1);
  }
  else
  {
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, &v26, 0, 0);
    v18 = (id)static OS_os_log.crlBoardLibrary;
    v20 = static os_log_type_t.default.getter(v19);
    sub_100A06EBC((uint64_t)v18, &_mh_execute_header, v20, "Successfully cleaned up board load marks for app termination.", 61, 2, (uint64_t)_swiftEmptyArrayStorage);

  }
}

uint64_t sub_100CA1FEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100CA2058, v4, v5);
}

uint64_t sub_100CA2058()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  uint64_t v16;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardShareController);
  v0[7] = v2;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  swift_bridgeObjectRetain(v3);
  sub_1007C3B58(v4);
  v6 = v5;
  swift_bridgeObjectRelease(v3);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_100843264(v0[2]), (v8 & 1) != 0))
  {
    v9 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v7);
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v13 = String._bridgeToObjectiveC()();
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v12, "localizedStringForKey:value:table:", v13, v14, 0);

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v11 = v16;

  }
  v0[8] = v10;
  v0[9] = v11;
  return swift_task_switch(sub_100CA21B8, v2, 0);
}

uint64_t sub_100CA21B8()
{
  uint64_t *v0;
  uint64_t v1;
  Class v2;
  uint64_t **v3;

  v1 = v0[9];
  v2 = sub_100B4AD90(v0[2]);
  v0[10] = (uint64_t)v2;
  v3 = (uint64_t **)swift_task_alloc(dword_1013EA234);
  v0[11] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100CA2234;
  return sub_10067301C((uint64_t)v2, v0[8], v1, 0, 0xF000000000000000);
}

uint64_t sub_100CA2234(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = *(_QWORD *)(v3 + 56);
    v6 = sub_100CA23BC;
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 56);

    v6 = sub_100CA22B0;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100CA22B0()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t **v4;

  v1 = (void *)v0[12];
  swift_bridgeObjectRelease(v0[9]);
  v2 = dword_10140DF04;
  v3 = v1;
  v4 = (uint64_t **)swift_task_alloc(v2);
  v0[14] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_100CA2320;
  return sub_100C9CCDC(v0[2], (uint64_t)v1, 1);
}

uint64_t sub_100CA2320()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 112);
  v3 = *v1;
  *(_QWORD *)(v3 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100CA24B4, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));

  v5 = (_QWORD *)swift_task_alloc(dword_10140DF34);
  *(_QWORD *)(v3 + 128) = v5;
  *v5 = v3;
  v5[1] = sub_100CA2430;
  return sub_100CEA898((uint64_t)&_swiftEmptySetSingleton);
}

uint64_t sub_100CA23BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);

  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100CA23FC, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100CA23FC()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CA2430()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));
  return swift_task_switch(sub_100CA247C, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100CA247C()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 96), v1);
}

uint64_t sub_100CA24B4()
{
  uint64_t v0;
  void *v1;
  __n128 v2;

  v1 = *(void **)(v0 + 96);

  v2 = swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_100CA24F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v7 + 184) = a4;
  *(_QWORD *)(v7 + 192) = v6;
  *(_BYTE *)(v7 + 249) = a6;
  *(_BYTE *)(v7 + 248) = a5;
  *(_QWORD *)(v7 + 168) = a2;
  *(_QWORD *)(v7 + 176) = a3;
  *(_QWORD *)(v7 + 160) = a1;
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v7 + 200) = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  *(_QWORD *)(v7 + 208) = v9;
  *(_QWORD *)(v7 + 216) = v10;
  return swift_task_switch(sub_100CA2570, v9, v10);
}

uint64_t sub_100CA2570()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 136, 0, 0);
  v1 = (void *)static OS_os_log.crlBoardLibrary;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v4 = v1;
  v5 = UUID.uuidString.getter(v4);
  v7 = v6;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = v7;
  v9 = static os_log_type_t.default.getter(v8);
  sub_100A06EBC((uint64_t)v4, &_mh_execute_header, v9, "Creating new board with Board UUID (%@).", 40, 2, inited);
  swift_setDeallocating(inited);
  v10 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v10);

  v11 = (_QWORD *)swift_task_alloc(dword_10140E154);
  *(_QWORD *)(v0 + 224) = v11;
  *v11 = v0;
  v11[1] = sub_100CA26D4;
  return sub_100CB0070(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_BYTE *)(v0 + 249));
}

uint64_t sub_100CA26D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100CA2950;
  else
    v5 = sub_100CA273C;
  return swift_task_switch(v5, v3[26], v3[27]);
}

void sub_100CA273C()
{
  uint64_t v0;
  int v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  double v15;

  v1 = *(unsigned __int8 *)(v0 + 248);
  v2 = swift_release(*(_QWORD *)(v0 + 200));
  if (v1 != 1)
    goto LABEL_6;
  v3 = *(_QWORD *)(v0 + 240);
  sub_1006699C4(*(char **)(v0 + 232));
  if (v3)
  {
    v5 = (id)static OS_os_log.crlBoardLibrary;
    v6 = static os_log_type_t.error.getter(v5);
    sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v6, "Loading demo contents failed", 28, 2, (uint64_t)_swiftEmptyArrayStorage);

    swift_errorRelease(v3);
LABEL_6:
    (*(void (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 232), v2);
    return;
  }
  v7 = v4;
  v8 = *(char **)(v0 + 232);
  objc_msgSend(v8, "fixUp");
  v9 = *(_QWORD *)&v8[OBJC_IVAR____TtC8Freeform8CRLBoard_pendingChanges];
  v10 = *(NSObject **)(v9 + OBJC_IVAR____TtC8Freeform17CRLBoardChangeSet_accessQueue);
  v11 = swift_allocObject(&unk_10129FD80, 32, 7);
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v9;
  v12 = swift_allocObject(&unk_10129FDA8, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100619E50;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v0 + 120) = sub_1005B72B0;
  *(_QWORD *)(v0 + 128) = v12;
  *(_QWORD *)(v0 + 88) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 96) = *(_QWORD *)"";
  *(_QWORD *)(v0 + 104) = sub_100618D24;
  *(_QWORD *)(v0 + 112) = &unk_10129FDC0;
  v13 = _Block_copy((const void *)(v0 + 88));
  v14 = *(_QWORD *)(v0 + 128);
  swift_retain_n(v9, 2);
  swift_retain(v7);
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v12, "", 89, 314, 26, 1);
  swift_release(v12);
  swift_release(v11);
  *(_QWORD *)&v15 = swift_release(v9).n128_u64[0];
  if ((v10 & 1) == 0)
  {
    objc_msgSend(*(id *)(v0 + 232), "savePendingChanges", v15);
    v2 = swift_release(v7);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_100CA2950()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CA2984(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = type metadata accessor for CRLBoardCRDTData(0);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v1[25] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[26] = v5;
  v1[27] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v1[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v1[29] = v7;
  v1[30] = static MainActor.shared.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_10140DFEC);
  v1[31] = v8;
  *v8 = v1;
  v8[1] = sub_100CA2A60;
  return sub_100CAEC2C(a1);
}

uint64_t sub_100CA2A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 248);
  v5 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(v3 + 256) = a1;
  *(_QWORD *)(v3 + 264) = v1;
  swift_task_dealloc(v4);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  if (v1)
    v8 = sub_100CA2EB0;
  else
    v8 = sub_100CA2AF0;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_100CA2AF0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  char *v4;
  id v5;
  id v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t inited;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 240));
  v2 = *(void **)(v1 + 16);
  v3 = (objc_class *)type metadata accessor for CRLBoardLibraryHeadlessController();
  v4 = (char *)objc_allocWithZone(v3);
  *(int64x2_t *)&v4[OBJC_IVAR____TtC8Freeform33CRLBoardLibraryHeadlessController_offset] = vdupq_n_s64(0x4049000000000000uLL);
  *(_QWORD *)&v4[OBJC_IVAR____TtC8Freeform33CRLBoardLibraryHeadlessController_editingCoordinator] = v2;
  v5 = objc_allocWithZone((Class)CRLCanvas);
  v6 = v2;
  v7 = v4;
  v8 = objc_msgSend(v5, "init");
  *(_QWORD *)&v7[OBJC_IVAR____TtC8Freeform33CRLBoardLibraryHeadlessController_canvas] = v8;

  *(_QWORD *)(v0 + 176) = v7;
  *(_QWORD *)(v0 + 184) = v3;
  v9 = objc_msgSendSuper2((objc_super *)(v0 + 176), "init");

  objc_msgSend(*(id *)(v1 + 32), "addObject:", v9);
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v46 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 216);
  v41 = *(_QWORD *)(v0 + 224);
  v42 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 192);
  v43 = *(_QWORD *)(v0 + 200);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 128, 0, 0);
  v12 = (void *)static OS_os_log.crlBoardLibrary;
  v13 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v13, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v44 = v12;
  v45 = v9;
  v15 = objc_msgSend(v45, "description");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  *(_QWORD *)(inited + 56) = &type metadata for String;
  v39 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v39;
  *(_QWORD *)(inited + 32) = v16;
  *(_QWORD *)(inited + 40) = v18;
  v19 = *(char **)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v20 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v21 = *(_QWORD *)&v19[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v22 = v21 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v21 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 152, 0, 0);
  v23 = v22;
  v24 = v11;
  v40 = v11;
  sub_1004B8460(v23, v11, type metadata accessor for CRLBoardCRDTData);
  v25 = v19;
  swift_retain(v21);
  v26 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v26);
  sub_1004B84A4(v24, type metadata accessor for CRLBoardCRDTData);
  swift_release(v21);
  v27 = (uint64_t *)(*(_QWORD *)&v19[v20] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v28 = *v27;
  v29 = v27[1];
  swift_bridgeObjectRetain(v29);
  sub_10067AFD0(v10, v28, v29, v41);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v10, v41, v43);
  v30 = sub_1004B84A4(v41, type metadata accessor for CRLBoardIdentifier);
  v31 = UUID.uuidString.getter(v30);
  v33 = v32;
  v34.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v42 + 8))(v10, v43);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v39;
  *(_QWORD *)(inited + 72) = v31;
  *(_QWORD *)(inited + 80) = v33;
  v35 = static os_log_type_t.default.getter(v34);
  sub_100A06EBC((uint64_t)v44, &_mh_execute_header, v35, "Created headless controller %@ for identifier: %{public}@", 57, 2, inited);
  swift_setDeallocating(inited);
  v36 = *(_QWORD *)(inited + 16);
  v37 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, v36, v37);

  swift_release(v46);
  swift_task_dealloc(v41);
  swift_task_dealloc(v10);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(id))(v0 + 8))(v45);
}

uint64_t sub_100CA2EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA2F0C(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  char *v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t inited;
  char *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v59;
  _BYTE *v60;
  __n128 v61;
  unint64_t v62;
  _BYTE *v63;
  __n128 v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[24];
  char v92[32];
  char *v93;

  v2 = v1;
  v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = a1;
  v13 = *(char **)(*(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform33CRLBoardLibraryHeadlessController_editingCoordinator]
                 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v14 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v15 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v16 = v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v92, 0, 0);
  sub_1004B8460(v16, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  v93 = v13;
  swift_retain(v15);
  v17 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v17);
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  swift_release(v15);
  v18 = (uint64_t *)(*(_QWORD *)&v13[v14] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v20 = *v18;
  v19 = v18[1];
  swift_bridgeObjectRetain(v19);
  sub_10067AFD0((uint64_t)v9, v20, v19, (uint64_t)v12);
  v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos, v91, 32, 0);
  v22 = *v21;
  if (!*(_QWORD *)(v22 + 16) || (v23 = sub_100843264((uint64_t)v12), (v24 & 1) == 0))
  {
    swift_endAccess(v91);
    v59 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v59, 0, 0);
    *v60 = 0;
    swift_willThrow(v61);
    v27 = v93;
LABEL_15:

    return sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
  swift_endAccess(v91);
  v26 = *(void **)(v25 + 32);
  swift_retain(v25);
  v27 = v26;
  v28 = v88;
  if (!objc_msgSend(v27, "containsObject:", v88))
  {
    v62 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v62, 0, 0);
    *v63 = 3;
    swift_willThrow(v64);
    swift_release(v25);

    goto LABEL_15;
  }
  v85 = v12;
  objc_msgSend(v27, "removeObject:", v28);
  objc_msgSend(*(id *)&v28[OBJC_IVAR____TtC8Freeform33CRLBoardLibraryHeadlessController_canvas], "teardown");
  v84 = *(id *)(v25 + 24);
  v29 = objc_msgSend(v84, "allObjects");
  v30 = type metadata accessor for CRLiOSBoardViewController(0);
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v81 = v31;
    else
      v81 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v32 = _CocoaArrayWrapper.endIndex.getter(v81);
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v33 = swift_bridgeObjectRelease(v31).n128_u64[0];
  v86 = v27;
  v87 = v25;
  if (v32)
    goto LABEL_10;
  v34 = objc_msgSend(v27, "allObjects", v33);
  v35 = type metadata accessor for CRLBoardLibraryHeadlessController();
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

  if ((unint64_t)v36 >> 62)
  {
    v82 = v36 < 0 ? v36 : v36 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v36);
    v37 = _CocoaArrayWrapper.endIndex.getter(v82);
    swift_bridgeObjectRelease(v36);
  }
  else
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v36);
  if (v37)
  {
LABEL_10:
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v91, 0, 0);
    v38 = (void *)static OS_os_log.crlBoardLibrary;
    v39 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v39, &v90);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E30;
    v41 = v88;
    v88 = v38;
    v42 = objc_msgSend(v41, "description");
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    *(_QWORD *)(inited + 56) = &type metadata for String;
    v46 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v46;
    *(_QWORD *)(inited + 32) = v43;
    *(_QWORD *)(inited + 40) = v45;
    v47 = v86;
    v48 = objc_msgSend(v86, "count");
    *(_QWORD *)(inited + 96) = &type metadata for Int;
    *(_QWORD *)(inited + 104) = &protocol witness table for Int;
    *(_QWORD *)(inited + 72) = v48;
    v49 = v84;
    v50 = objc_msgSend(v84, "count");
    *(_QWORD *)(inited + 136) = &type metadata for Int;
    *(_QWORD *)(inited + 144) = &protocol witness table for Int;
    *(_QWORD *)(inited + 112) = v50;
    v51 = (uint64_t)v85;
    v52 = UUID.uuidString.getter(v50);
    *(_QWORD *)(inited + 176) = &type metadata for String;
    *(_QWORD *)(inited + 184) = v46;
    *(_QWORD *)(inited + 152) = v52;
    *(_QWORD *)(inited + 160) = v53;
    v55 = static os_log_type_t.default.getter(v54);
    v56 = v88;
    sub_100A06EBC((uint64_t)v88, &_mh_execute_header, v55, "Removing %@, %li headless controllers, %li view controllers remain before tearing down BoardInfo for %{public}@", 111, 2, inited);

    swift_setDeallocating(inited);
    v57 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 4, v57);
    swift_release(v87);
  }
  else
  {
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v91, 0, 0);
    v65 = (void *)static OS_os_log.crlBoardLibrary;
    v66 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v67 = swift_initStackObject(v66, &v89);
    *(_OWORD *)(v67 + 16) = xmmword_100EF5A10;
    v83 = v65;
    v68 = v88;
    v69 = objc_msgSend(v68, "description");
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v72 = v71;

    *(_QWORD *)(v67 + 56) = &type metadata for String;
    v73 = sub_1004CFC2C();
    *(_QWORD *)(v67 + 64) = v73;
    *(_QWORD *)(v67 + 32) = v70;
    *(_QWORD *)(v67 + 40) = v72;
    v51 = (uint64_t)v85;
    v74 = UUID.uuidString.getter(v73);
    *(_QWORD *)(v67 + 96) = &type metadata for String;
    *(_QWORD *)(v67 + 104) = v73;
    *(_QWORD *)(v67 + 72) = v74;
    *(_QWORD *)(v67 + 80) = v75;
    v77 = static os_log_type_t.default.getter(v76);
    v78 = v83;
    sub_100A06EBC((uint64_t)v83, &_mh_execute_header, v77, "Tearing down BoardInfo after removing %@ for %{public}@", 55, 2, v67);
    swift_setDeallocating(v67);
    v79 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v67 + 32, 2, v79);

    v80 = v87;
    sub_100CAFA90(v87);
    swift_release(v80);

    v56 = v86;
  }

  return sub_1004B84A4(v51, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100CA3640(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[20] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[21] = v5;
  v3[22] = v6;
  return swift_task_switch(sub_100CA36B0, v5, v6);
}

uint64_t sub_100CA36B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t **v5;

  v1 = v0[18];
  v2 = *(_QWORD *)(*(_QWORD *)(v0[19] + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController)
                 + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v1;
  swift_bridgeObjectRetain(v2);
  v4 = sub_100C9D5E8((uint64_t (*)(id *))sub_1006F01E8, v3, v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v3);
  if (v4)
  {
    if ((*((_BYTE *)v4 + OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_accepted) & 1) == 0)
      sub_1004DF000(v4);

  }
  v5 = (uint64_t **)swift_task_alloc(dword_10140E21C);
  v0[23] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = (uint64_t *)sub_100CA3794;
  return sub_100CB19D4(v0[18]);
}

uint64_t sub_100CA3794(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 168);
    v7 = *(_QWORD *)(v4 + 176);
    v8 = sub_100CA3ADC;
  }
  else
  {
    *(_BYTE *)(v4 + 224) = a1 & 1;
    v6 = *(_QWORD *)(v4 + 168);
    v7 = *(_QWORD *)(v4 + 176);
    v8 = sub_100CA380C;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100CA380C()
{
  uint64_t v0;
  id v1;
  __n128 v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t inited;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (*(_BYTE *)(v0 + 224) == 1)
  {
    swift_release(*(_QWORD *)(v0 + 160));
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v0 + 112, 0, 0);
    v1 = (id)static OS_os_log.shareState;
    v3 = static os_log_type_t.default.getter(v2);
    sub_100A06EBC((uint64_t)v1, &_mh_execute_header, v3, "Found an existing board.", 24, 2, (uint64_t)_swiftEmptyArrayStorage);

    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v0 + 88, 0, 0);
    v5 = (void *)static OS_os_log.shareState;
    v6 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v6, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v8 = v5;
    v9 = UUID.uuidString.getter(v8);
    v11 = v10;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v9;
    *(_QWORD *)(inited + 40) = v11;
    v13 = static os_log_type_t.default.getter(v12);
    sub_100A06EBC((uint64_t)v8, &_mh_execute_header, v13, "Accepting shared board with UUID: %@.", 37, 2, inited);
    swift_setDeallocating(inited);
    v14 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v14);

    v15 = (_QWORD *)swift_task_alloc(dword_10140F0CC);
    *(_QWORD *)(v0 + 200) = v15;
    *v15 = v0;
    v15[1] = sub_100CA3A2C;
    return sub_100D2B8D8(*(_QWORD *)(v0 + 136));
  }
}

uint64_t sub_100CA3A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 200);
  *(_QWORD *)(*(_QWORD *)v2 + 208) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[21];
    v7 = v4[22];
    v8 = sub_100CA3B10;
  }
  else
  {
    v4[27] = a1;
    v6 = v4[21];
    v7 = v4[22];
    v8 = sub_100CA3AA0;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100CA3AA0()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = swift_release(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(uint64_t, __n128))(v0 + 8))(v1, v2);
}

uint64_t sub_100CA3ADC()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CA3B10()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

void sub_100CA3B44(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  id *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t inited;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  __n128 v65;
  unint64_t v66;
  _BYTE *v67;
  __n128 v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  id *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id *v86;
  char *v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[24];
  char v94[32];
  char *v95;

  v2 = v1;
  v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = a1;
  v13 = *(char **)(*(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_editingCoordinator]
                 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v14 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v15 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v16 = v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v94, 0, 0);
  sub_1004B8460(v16, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  v95 = v13;
  swift_retain(v15);
  v17 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v17);
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  swift_release(v15);
  v18 = *(_QWORD *)&v13[v14];
  v19 = (uint64_t)v12;
  v20 = (uint64_t *)(v18 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v22 = *v20;
  v21 = v20[1];
  swift_bridgeObjectRetain(v21);
  sub_10067AFD0((uint64_t)v9, v22, v21, (uint64_t)v12);
  v23 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos, v93, 32, 0);
  v24 = *v23;
  if (!*(_QWORD *)(v24 + 16) || (v25 = sub_100843264((uint64_t)v12), (v26 & 1) == 0))
  {
    swift_endAccess(v93);
    v63 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v63, 0, 0);
    *v64 = 0;
    swift_willThrow(v65);
    v34 = v95;
LABEL_16:

    sub_1004B84A4(v19, type metadata accessor for CRLBoardIdentifier);
    return;
  }
  v27 = *(id **)(*(_QWORD *)(v24 + 56) + 8 * v25);
  swift_endAccess(v93);
  v28 = (void *)objc_opt_self(UIApplication);
  v29 = objc_msgSend(v28, "sharedApplication", swift_retain(v27).n128_f64[0]);
  v30 = objc_msgSend(v29, "delegate");

  if (v30)
  {
    v31 = type metadata accessor for CRLiOSAppDelegate();
    v32 = *(_QWORD *)(swift_dynamicCastClassUnconditional(v30, v31, 0, 0, 0)
                    + OBJC_IVAR____TtC8Freeform17CRLiOSAppDelegate_sharedBoardThumbnailManager);
    swift_retain(v32);
    swift_unknownObjectRelease(v30);
    v33 = v90;
    if (v32)
    {
      sub_100D6AAC0(v19);
      swift_release(v32);
      v34 = (char *)v27[3];
      if (objc_msgSend(v34, "containsObject:", v33))
      {
        objc_msgSend(v34, "removeObject:", v33);
        v89 = v27[4];
        v87 = v34;
        v35 = objc_msgSend(v34, "allObjects");
        v36 = type metadata accessor for CRLiOSBoardViewController(0);
        v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

        if ((unint64_t)v37 >> 62)
        {
          if (v37 < 0)
            v83 = v37;
          else
            v83 = v37 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v37);
          v38 = _CocoaArrayWrapper.endIndex.getter(v83);
          swift_bridgeObjectRelease(v37);
        }
        else
        {
          v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        *(_QWORD *)&v39 = swift_bridgeObjectRelease(v37).n128_u64[0];
        v88 = v19;
        if (v38)
          goto LABEL_12;
        v40 = objc_msgSend(v89, "allObjects", v39);
        v41 = type metadata accessor for CRLBoardLibraryHeadlessController();
        v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, v41);

        if ((unint64_t)v42 >> 62)
        {
          v84 = v42 < 0 ? v42 : v42 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v42);
          v43 = _CocoaArrayWrapper.endIndex.getter(v84);
          swift_bridgeObjectRelease(v42);
        }
        else
        {
          v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v42);
        if (v43)
        {
LABEL_12:
          v86 = v27;
          if (qword_1013DD748 != -1)
            swift_once(&qword_1013DD748, sub_100A023E8);
          swift_beginAccess(&static OS_os_log.crlBoardLibrary, v93, 0, 0);
          v44 = (void *)static OS_os_log.crlBoardLibrary;
          v45 = sub_1004B804C((uint64_t *)&unk_1013E0180);
          inited = swift_initStackObject(v45, &v92);
          *(_OWORD *)(inited + 16) = xmmword_100EF5E30;
          v47 = v90;
          v90 = v44;
          v48 = objc_msgSend(v47, "description");
          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          v51 = v50;

          *(_QWORD *)(inited + 56) = &type metadata for String;
          v52 = sub_1004CFC2C();
          *(_QWORD *)(inited + 64) = v52;
          *(_QWORD *)(inited + 32) = v49;
          *(_QWORD *)(inited + 40) = v51;
          v53 = v87;
          v54 = objc_msgSend(v87, "count");
          *(_QWORD *)(inited + 96) = &type metadata for Int;
          *(_QWORD *)(inited + 104) = &protocol witness table for Int;
          *(_QWORD *)(inited + 72) = v54;
          v55 = v89;
          v56 = objc_msgSend(v89, "count");
          *(_QWORD *)(inited + 136) = &type metadata for Int;
          *(_QWORD *)(inited + 144) = &protocol witness table for Int;
          *(_QWORD *)(inited + 112) = v56;
          v57 = v88;
          v58 = UUID.uuidString.getter(v56);
          *(_QWORD *)(inited + 176) = &type metadata for String;
          *(_QWORD *)(inited + 184) = v52;
          *(_QWORD *)(inited + 152) = v58;
          *(_QWORD *)(inited + 160) = v59;
          v61 = static os_log_type_t.default.getter(v60);
          v34 = (char *)v90;
          sub_100A06EBC((uint64_t)v90, &_mh_execute_header, v61, "Removing %@, %li view controllers, %li headless controllers remain before tearing down BoardInfo for %{public}@", 111, 2, inited);

          swift_setDeallocating(inited);
          v62 = sub_1004B804C(&qword_1013E0190);
          v19 = v57;
          swift_arrayDestroy(inited + 32, 4, v62);
          swift_release(v86);
        }
        else
        {
          if (qword_1013DD748 != -1)
            swift_once(&qword_1013DD748, sub_100A023E8);
          swift_beginAccess(&static OS_os_log.crlBoardLibrary, v93, 0, 0);
          v69 = (void *)static OS_os_log.crlBoardLibrary;
          v70 = sub_1004B804C((uint64_t *)&unk_1013E0180);
          v71 = swift_initStackObject(v70, &v91);
          *(_OWORD *)(v71 + 16) = xmmword_100EF5A10;
          v86 = v69;
          v72 = v33;
          v73 = objc_msgSend(v72, "description");
          v90 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
          v75 = v74;

          *(_QWORD *)(v71 + 56) = &type metadata for String;
          v76 = sub_1004CFC2C();
          *(_QWORD *)(v71 + 64) = v76;
          *(_QWORD *)(v71 + 32) = v90;
          *(_QWORD *)(v71 + 40) = v75;
          v19 = v88;
          v77 = UUID.uuidString.getter(v76);
          *(_QWORD *)(v71 + 96) = &type metadata for String;
          *(_QWORD *)(v71 + 104) = v76;
          *(_QWORD *)(v71 + 72) = v77;
          *(_QWORD *)(v71 + 80) = v78;
          v80 = static os_log_type_t.default.getter(v79);
          v81 = v86;
          sub_100A06EBC((uint64_t)v86, &_mh_execute_header, v80, "Tearing down BoardInfo after removing %@ for %{public}@", 55, 2, v71);
          swift_setDeallocating(v71);
          v82 = sub_1004B804C(&qword_1013E0190);
          swift_arrayDestroy(v71 + 32, 2, v82);

          sub_100CAFA90((uint64_t)v27);
          swift_release(v27);

          v34 = (char *)v89;
        }
      }
      else
      {
        v66 = sub_100619D10();
        swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v66, 0, 0);
        *v67 = 2;
        swift_willThrow(v68);
        swift_release(v27);

      }
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100CA4314(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __n128 v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  int64_t v119;
  __n128 v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(char *, unint64_t, uint64_t, __n128);
  char *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  int64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD v158[4];
  char v159[8];

  v134 = a1;
  v137 = a2;
  v141 = 0;
  v139 = type metadata accessor for URLQueryItem(0);
  v140 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v138 = (char *)&v127 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1004B804C(&qword_1013E8878);
  __chkstk_darwin(v3);
  v132 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1004B804C(&qword_1013E8868);
  __chkstk_darwin(v5);
  v147 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for URLComponents(0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C(&qword_1013F5478);
  __chkstk_darwin(v8);
  v10 = (char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v11);
  v145 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v152 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v133 = (uint64_t)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v156 = (uint64_t)&v127 - v15;
  v16 = sub_1004B804C(&qword_10140DFA0);
  __chkstk_darwin(v16);
  v18 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v127 - v20;
  v22 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v22);
  v24 = (char *)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v25);
  v27 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for CRLBoardIdentifier(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v157 = (uint64_t)&v127 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v33 = (char *)&v127 - v32;
  sub_1006302CC((uint64_t)v27);
  v153 = v29;
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v136 = v28;
  if (v34(v27, 1, v28) == 1)
  {
    v35 = sub_1004CB800((uint64_t)v27, &qword_1013E0270);
    v36 = v141;
    v37 = v155;
  }
  else
  {
    sub_1004B84E0((uint64_t)v27, (uint64_t)v33, type metadata accessor for CRLBoardIdentifier);
    v38 = v155;
    v39 = v141;
    sub_100C9F8F8((uint64_t)v33, (uint64_t)v24);
    if (!v39)
    {
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v24, 0, 1, v154);
      sub_1004CB800((uint64_t)v24, &qword_1013E4690);
      v124 = (uint64_t)v33;
      goto LABEL_94;
    }
    v37 = v38;
    swift_errorRelease(v39);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v152 + 56))(v24, 1, 1, v154);
    sub_1004B84A4((uint64_t)v33, type metadata accessor for CRLBoardIdentifier);
    v35 = sub_1004CB800((uint64_t)v24, &qword_1013E4690);
    v36 = 0;
  }
  v40 = sub_100630FEC(v35);
  v42 = (uint64_t)v145;
  v135 = v43;
  if (!v43)
  {
LABEL_92:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v153 + 56))(v137, 1, 1, v136, v41);
    return;
  }
  v130 = v40;
  v141 = v36;
  v44 = (uint64_t *)(v37 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata);
  swift_beginAccess(v37 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata, v159, 0, 0);
  v45 = *v44;
  v46 = *(_QWORD *)(*v44 + 64);
  v146 = *v44 + 64;
  v47 = 1 << *(_BYTE *)(v45 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & v46;
  v149 = (unint64_t)(v47 + 63) >> 6;
  v128 = v149 - 1;
  v151 = v45;
  swift_bridgeObjectRetain(v45);
  v50 = 0;
  v51 = &qword_1013E04D0;
  v150 = v10;
  if (!v49)
    goto LABEL_11;
LABEL_9:
  v52 = __clz(__rbit64(v49));
  v49 &= v49 - 1;
  v53 = v52 | (v50 << 6);
LABEL_10:
  v54 = v151;
  sub_1004B8460(*(_QWORD *)(v151 + 48) + *(_QWORD *)(v153 + 72) * v53, (uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
  v55 = *(_QWORD *)(v54 + 56) + *(_QWORD *)(v152 + 72) * v53;
  v56 = sub_1004B804C(&qword_10140DF90);
  sub_1004B8460(v55, (uint64_t)&v18[*(int *)(v56 + 48)], type metadata accessor for CRLBoardViewModelMetadata);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v18, 0, 1, v56);
  while (1)
  {
    sub_1004C4938((uint64_t)v18, (uint64_t)v21, &qword_10140DFA0);
    v60 = sub_1004B804C(&qword_10140DF90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v21, 1, v60) == 1)
    {
      swift_bridgeObjectRelease();
      v41 = swift_release(v151);
      goto LABEL_92;
    }
    v155 = v50;
    v61 = v51;
    v62 = &v21[*(int *)(v60 + 48)];
    sub_1004B84E0((uint64_t)v21, v157, type metadata accessor for CRLBoardIdentifier);
    v63 = (uint64_t)v62;
    v64 = v156;
    sub_1004B84E0(v63, v156, type metadata accessor for CRLBoardViewModelMetadata);
    sub_1004CB7BC(v64 + *(int *)(v154 + 28), (uint64_t)v10, &qword_1013F5478);
    v65 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v10, 1, v65) == 1)
    {
      sub_1004CB800((uint64_t)v10, &qword_1013F5478);
      goto LABEL_70;
    }
    sub_1004CB7BC((uint64_t)&v10[*(int *)(v65 + 28)], v42, v51);
    sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
    v66 = type metadata accessor for URL(0);
    v67 = *(_QWORD *)(v66 - 8);
    v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v42, 1, v66);
    if ((_DWORD)v68 == 1)
    {
      sub_1004CB800(v42, v51);
      goto LABEL_69;
    }
    v148 = v67;
    v69 = URL.scheme.getter(v68);
    v71 = v147;
    if (v70)
    {
      if (v69 == 0x7370747468 && v70 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_30:
        v158[2] = URL.path.getter(v72);
        v158[3] = v74;
        v158[0] = 0x726F66656572662FLL;
        v158[1] = 0xEA00000000002F6DLL;
        v75 = sub_1004D292C();
        v76 = StringProtocol.contains<A>(_:)(v158, &type metadata for String, &type metadata for String, v75, v75);
        v77 = swift_bridgeObjectRelease();
        if ((v76 & 1) == 0
          || (v78 = URL.lastPathComponent.getter(v77),
              v80 = String.count.getter(v78, v79),
              v77 = swift_bridgeObjectRelease(),
              v80 < 16))
        {
          (*(void (**)(uint64_t, uint64_t, __n128))(v148 + 8))(v42, v66, v77);
          v51 = v61;
          goto LABEL_69;
        }
        v92 = URL.lastPathComponent.getter(v77);
        v94 = v93;
        goto LABEL_41;
      }
      v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, 0x7370747468, 0xE500000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v73 & 1) != 0)
        goto LABEL_30;
    }
    URLComponents.init(url:resolvingAgainstBaseURL:)(v42, 0);
    v81 = v143;
    v82 = v144;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v71, 1, v144) == 1)
    {
      v83 = (uint64_t)v71;
      v84 = &qword_1013E8868;
      goto LABEL_35;
    }
    v85 = v142;
    v86 = (*(uint64_t (**)(char *, char *, uint64_t))(v81 + 32))(v142, v71, v82);
    v87 = URLComponents.scheme.getter(v86);
    if (!v88)
    {
      (*(void (**)(char *, uint64_t))(v81 + 8))(v85, v82);
      goto LABEL_45;
    }
    if (v87 == 0x6D726F6665657266 && v88 == 0xE800000000000000)
    {
      v89 = swift_bridgeObjectRelease();
      v90 = v142;
      v91 = v148;
    }
    else
    {
      v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, 0x6D726F6665657266, 0xE800000000000000, 0);
      v89 = swift_bridgeObjectRelease();
      v90 = v142;
      v91 = v148;
      if ((v95 & 1) == 0)
        goto LABEL_67;
    }
    v96 = URLComponents.host.getter(v89);
    if (!v97)
      goto LABEL_67;
    if (v96 == 0x6472616F62 && v97 == 0xE500000000000000)
    {
      v89 = swift_bridgeObjectRelease();
    }
    else
    {
      v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v97, 0x6472616F62, 0xE500000000000000, 0);
      v89 = swift_bridgeObjectRelease();
      if ((v102 & 1) == 0)
        goto LABEL_67;
    }
    v103 = URLComponents.queryItems.getter(v89);
    if (!v103)
    {
LABEL_67:
      (*(void (**)(char *, uint64_t, __n128))(v143 + 8))(v90, v144, v89);
      v42 = (uint64_t)v145;
      v51 = v61;
LABEL_68:
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v42, v66);
LABEL_69:
      v10 = v150;
LABEL_70:
      v50 = v155;
      sub_1004B84A4(v156, type metadata accessor for CRLBoardViewModelMetadata);
      goto LABEL_71;
    }
    v104 = *(_QWORD *)(v103 + 16);
    v127 = v103;
    if (v104)
    {
      v105 = v140;
      v106 = v103 + ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
      v107 = swift_bridgeObjectRetain(v103);
      v129 = *(_QWORD *)(v105 + 72);
      v131 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v105 + 16);
      v108 = v138;
      v109 = v139;
      while (1)
      {
        v110 = v131(v108, v106, v109, v107);
        v111 = URLQueryItem.name.getter(v110);
        if (v111 == 0x54676E6972616873 && v112 == 0xEC0000006E656B6FLL)
        {
          swift_bridgeObjectRelease();
          v118 = v139;
          goto LABEL_84;
        }
        v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, 0x54676E6972616873, 0xEC0000006E656B6FLL, 0);
        v114 = swift_bridgeObjectRelease();
        if ((v113 & 1) != 0)
          break;
        v108 = v138;
        v109 = v139;
        (*(void (**)(char *, uint64_t, __n128))(v140 + 8))(v138, v139, v114);
        v106 += v129;
        --v104;
        v90 = v142;
        if (!v104)
        {
          v89 = swift_bridgeObjectRelease();
          v115 = 1;
          v116 = v140;
          v117 = v132;
          v118 = v109;
          goto LABEL_85;
        }
      }
      v118 = v139;
      v90 = v142;
LABEL_84:
      v120 = swift_bridgeObjectRelease();
      v116 = v140;
      v117 = v132;
      (*(void (**)(char *, char *, uint64_t, __n128))(v140 + 32))(v132, v138, v118, v120);
      v115 = 0;
    }
    else
    {
      v115 = 1;
      v116 = v140;
      v117 = v132;
      v118 = v139;
    }
LABEL_85:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v116 + 56))(v117, v115, 1, v118, v89);
    v121 = swift_bridgeObjectRelease();
    v122 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v116 + 48))(v117, 1, v118, v121);
    if ((_DWORD)v122 == 1)
    {
      (*(void (**)(char *, uint64_t))(v143 + 8))(v90, v144);
      v83 = (uint64_t)v117;
      v84 = &qword_1013E8878;
LABEL_35:
      sub_1004CB800(v83, v84);
LABEL_45:
      v42 = (uint64_t)v145;
      v51 = v61;
      v91 = v148;
      goto LABEL_68;
    }
    v92 = URLQueryItem.value.getter(v122);
    v94 = v123;
    (*(void (**)(char *, uint64_t))(v143 + 8))(v90, v144);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v132, v118);
    if (!v94)
      goto LABEL_45;
    v42 = (uint64_t)v145;
LABEL_41:
    (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v42, v66);
    if (v92 == v130 && v135 == v94)
    {
      swift_bridgeObjectRelease();
      v51 = v61;
    }
    else
    {
      v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, v130, v135, 0);
      swift_bridgeObjectRelease();
      v51 = v61;
      if ((v98 & 1) == 0)
        goto LABEL_69;
    }
    v99 = v133;
    sub_1004B84E0(v156, v133, type metadata accessor for CRLBoardViewModelMetadata);
    v10 = v150;
    v50 = v155;
    if ((v134 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1004B84A4(v99, type metadata accessor for CRLBoardViewModelMetadata);
      swift_release(v151);
LABEL_96:
      v124 = v157;
LABEL_94:
      v125 = v137;
      sub_1004B84E0(v124, v137, type metadata accessor for CRLBoardIdentifier);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v153 + 56))(v125, 0, 1, v136, v126);
      return;
    }
    v100 = v99;
    v101 = *(_BYTE *)(v99 + *(int *)(v154 + 32));
    sub_1004B84A4(v100, type metadata accessor for CRLBoardViewModelMetadata);
    if ((v101 & 1) == 0)
    {
      swift_release(v151);
      swift_bridgeObjectRelease();
      goto LABEL_96;
    }
LABEL_71:
    sub_1004B84A4(v157, type metadata accessor for CRLBoardIdentifier);
    if (v49)
      goto LABEL_9;
LABEL_11:
    v57 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
      goto LABEL_98;
    }
    if (v57 < v149)
    {
      v58 = *(_QWORD *)(v146 + 8 * v57);
      if (v58)
        goto LABEL_14;
      v50 += 2;
      if (v57 + 1 >= v149)
      {
        v50 = v57;
        goto LABEL_19;
      }
      v58 = *(_QWORD *)(v146 + 8 * v50);
      if (v58)
      {
        ++v57;
LABEL_14:
        v49 = (v58 - 1) & v58;
        v53 = __clz(__rbit64(v58)) + (v57 << 6);
        v50 = v57;
        goto LABEL_10;
      }
      if (v57 + 2 < v149)
        break;
    }
LABEL_19:
    v59 = sub_1004B804C(&qword_10140DF90);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v18, 1, 1, v59);
    v49 = 0;
  }
  v58 = *(_QWORD *)(v146 + 8 * (v57 + 2));
  if (v58)
  {
    v57 += 2;
    goto LABEL_14;
  }
  v119 = v57 + 3;
  if (v57 + 3 >= v149)
  {
    v50 = v57 + 2;
    goto LABEL_19;
  }
  v58 = *(_QWORD *)(v146 + 8 * v119);
  if (v58)
  {
    v57 += 3;
    goto LABEL_14;
  }
  while (1)
  {
    v57 = v119 + 1;
    if (__OFADD__(v119, 1))
      break;
    if (v57 >= v149)
    {
      v50 = v128;
      goto LABEL_19;
    }
    v58 = *(_QWORD *)(v146 + 8 * v57);
    ++v119;
    if (v58)
      goto LABEL_14;
  }
LABEL_98:
  __break(1u);
}

void sub_100CA5264(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  id v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  __n128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  __n128 v37;
  void *v38;
  char *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t inited;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  __n128 v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  double v77;
  _QWORD v78[3];
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void **aBlock;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  void *v88;
  uint64_t (*v89)();
  uint64_t v90;
  char v91[24];
  char v92[24];
  char v93[72];
  char v94[32];
  uint64_t v95;

  v95 = a2;
  v3 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v3);
  v80 = (uint64_t)v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = (_QWORD *)type metadata accessor for UUID(0);
  v82 = *(v83 - 1);
  __chkstk_darwin(v83);
  v9 = (char *)v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v12 = (char *)v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform8CRLBoard_data);
  v15 = v14 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v14 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v94, 0, 0);
  sub_1004B8460(v15, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  swift_retain(v14);
  v16 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v16);
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  swift_release(v14);
  v17 = (uint64_t *)(*(_QWORD *)(a1 + v13) + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v19 = *v17;
  v18 = v17[1];
  swift_bridgeObjectRetain(v18);
  sub_10067AFD0((uint64_t)v9, v19, v18, (uint64_t)v12);
  v20 = &v12[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
  v21 = *((_QWORD *)v20 + 1);
  if (*(_QWORD *)v20)
    v22 = 0;
  else
    v22 = v21 == 0xE000000000000000;
  if (v22)
  {
    sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v20, v21, 0, 0xE000000000000000, 0);
    sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    if ((v23 & 1) == 0)
    {
      if (qword_1013DD748 != -1)
        swift_once(&qword_1013DD748, sub_100A023E8);
      swift_beginAccess(&static OS_os_log.crlBoardLibrary, &aBlock, 0, 0);
      v24 = (id)static OS_os_log.crlBoardLibrary;
      v26 = static os_log_type_t.default.getter(v25);
      sub_100A06EBC((uint64_t)v24, &_mh_execute_header, v26, "Import board from file failed because .boardIdentifierMustBeOwnerForCreation", 76, 2, (uint64_t)_swiftEmptyArrayStorage);

      v27 = sub_100619D10();
      swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v27, 0, 0);
      v30 = 5;
      goto LABEL_14;
    }
  }
  v79[1] = v5;
  v31 = v84;
  v32 = *(_QWORD *)(v84 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  swift_bridgeObjectRetain(v32);
  v33 = v95;
  sub_100BCB904();
  __chkstk_darwin(v34);
  v78[2] = v9;
  sub_1007C2808(1, (uint64_t (*)(id))sub_100BBC4B4, (uint64_t)v78, v32);
  v36 = v35;
  v37 = swift_bridgeObjectRelease();
  (*(void (**)(char *, _QWORD *, __n128))(v82 + 8))(v9, v83, v37);
  if (!v36)
  {
    v48 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v48, v93);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v50 = v80;
    sub_1004B8460(v33, v80, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    sub_100BCAD68();
    v52 = v51;
    v54 = v53;
    sub_1004B84A4(v50, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v52;
    v55 = inited + 32;
    *(_QWORD *)(inited + 40) = v54;
    sub_100757E04(&_mh_execute_header, (uint64_t)"addImportedBoard(board:in:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 1524, "Folder not found: %@", 20, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"addImportedBoard(board:in:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 1524, (uint64_t)"Folder not found: %@", 20, 2u);
    swift_setDeallocating(inited);
    v56 = *(_QWORD *)(inited + 16);
    v57 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v55, v56, v57);
    v58 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v58, 0, 0);
    v30 = 1;
LABEL_14:
    *v28 = v30;
    swift_willThrow(v29);
    return;
  }
  v83 = v36;
  v38 = *(void **)(v31 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  v39 = (char *)a1;
  v40 = *(_QWORD *)(a1 + v13) + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v40, v92, 0, 0);
  sub_1004B8460(v40, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  v41 = v38;
  v42 = sub_1004B804C(&qword_1013E1980);
  CRRegister.wrappedValue.getter(v42);
  v43 = (uint64_t)aBlock;
  v44 = v86;
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  v45 = v81;
  sub_1006326BC(v43, v44, v33, 0, (uint64_t)v41, 0);
  if (v45)
  {

    swift_bridgeObjectRelease();
LABEL_19:

    return;
  }
  v59 = v46;
  v60 = v47;
  swift_bridgeObjectRelease();
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v91, 0, 0);
  v61 = (id)static OS_os_log.crlBoardLibrary;
  v63 = static os_log_type_t.default.getter(v62);
  sub_100A06EBC((uint64_t)v61, &_mh_execute_header, v63, "Import board from file will save to database.", 45, 2, (uint64_t)_swiftEmptyArrayStorage);

  sub_1004B7878((unint64_t *)&qword_101406AE0, type metadata accessor for CRLBoard, (uint64_t)&unk_100F276E4);
  v64 = (void *)a1;
  swift_unknownObjectRetain(a1);
  UUID.init()(v65);
  v66 = type metadata accessor for CRLTransactionContext(0);
  v67 = swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v68 = sub_1006AD854(a1, 0, 1, (uint64_t)v9, 1, v67);
  sub_100C86CC4((uint64_t)v39, 2, v68);
  sub_100B12B6C(v59, v60);
  v69 = swift_bridgeObjectRelease();
  v70 = (*(uint64_t (**)(__n128))(*(_QWORD *)v68 + 720))(v69);
  objc_msgSend(v39, "fixUp", swift_release(v70).n128_f64[0]);
  v71 = *(_QWORD *)&v39[OBJC_IVAR____TtC8Freeform8CRLBoard_pendingChanges];
  v72 = *(NSObject **)(v71 + OBJC_IVAR____TtC8Freeform17CRLBoardChangeSet_accessQueue);
  v73 = swift_allocObject(&unk_10129FF50, 32, 7);
  *(_QWORD *)(v73 + 16) = v68;
  *(_QWORD *)(v73 + 24) = v71;
  v74 = swift_allocObject(&unk_10129FF78, 32, 7);
  *(_QWORD *)(v74 + 16) = sub_1006B0744;
  *(_QWORD *)(v74 + 24) = v73;
  v89 = sub_1005B72B0;
  v90 = v74;
  aBlock = _NSConcreteStackBlock;
  v86 = *(_QWORD *)"";
  v87 = sub_100618D24;
  v88 = &unk_10129FF90;
  v75 = _Block_copy(&aBlock);
  v76 = v90;
  swift_retain(v68);
  swift_retain(v71);
  swift_retain(v74);
  swift_release(v76);
  dispatch_sync(v72, v75);
  _Block_release(v75);
  LOBYTE(v72) = swift_isEscapingClosureAtFileLocation(v74, "", 89, 314, 26, 1);
  swift_release(v73);
  *(_QWORD *)&v77 = swift_release(v74).n128_u64[0];
  if ((v72 & 1) == 0)
  {
    objc_msgSend(v64, "savePendingChanges", v77);

    swift_release(v68);
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_100CA5AE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v5 + 384) = a4;
  *(_QWORD *)(v5 + 184) = a3;
  *(_QWORD *)(v5 + 192) = v4;
  *(_QWORD *)(v5 + 168) = a1;
  *(_QWORD *)(v5 + 176) = a2;
  v6 = type metadata accessor for CRLBoardCRDTData(0);
  *(_QWORD *)(v5 + 200) = v6;
  *(_QWORD *)(v5 + 208) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardIdentifier(0);
  *(_QWORD *)(v5 + 216) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 224) = v8;
  *(_QWORD *)(v5 + 232) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013E0270);
  *(_QWORD *)(v5 + 240) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 248) = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 256) = v11;
  *(_QWORD *)(v5 + 264) = v12;
  return swift_task_switch(sub_100CA5BCC, v11, v12);
}

uint64_t sub_100CA5BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  char *v65;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(unsigned __int8 *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  v8 = *(void **)(*(_QWORD *)(v0 + 192) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  *(_QWORD *)(v0 + 272) = v8;
  sub_1004B8460(v6, v1, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  v9 = v8;
  *(_QWORD *)(v0 + 280) = sub_100632E3C(v7, v5, v4, v1, (uint64_t)v9);
  *(_QWORD *)(v0 + 288) = v10;
  v14 = *(_QWORD *)(v0 + 192);
  sub_1004CB800(*(_QWORD *)(v0 + 240), &qword_1013E0270);
  v15 = (uint64_t *)(v14 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v15, v0 + 96, 32, 0);
  v16 = *v15;
  if (*(_QWORD *)(v16 + 16) && (v17 = sub_100843264(*(_QWORD *)(v0 + 168)), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
    swift_endAccess(v0 + 96);
    v20 = *(char **)(v19 + 16);
    *(_QWORD *)(v0 + 320) = v20;
    v21 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
    v22 = *(_QWORD *)(*(_QWORD *)&v20[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard]
                    + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState);
    v23 = *(void **)(v22 + 16);
    v24 = v20;
    if (v23)
    {
      swift_retain(v22);
      v25 = v23;
      v26 = objc_msgSend(v25, "currentUserParticipant");
      if (v26)
      {
        v27 = v26;
        v28 = objc_msgSend(v26, "permission");

        swift_release(v22);
        if (v28 == (id)2)
        {
LABEL_6:
          v29 = *(void **)(v0 + 272);
          swift_release(*(_QWORD *)(v0 + 248));
          swift_bridgeObjectRelease();
          v30 = sub_100CECDA0();
          swift_allocError(&type metadata for CRLBoardLibrary.RenameError, v30, 0, 0);
          swift_willThrow(v31);

          v11 = *(_QWORD *)(v0 + 232);
          v12 = *(_QWORD *)(v0 + 208);
          swift_task_dealloc(*(_QWORD *)(v0 + 240));
          swift_task_dealloc(v11);
          swift_task_dealloc(v12);
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
      }
      else
      {
        v37 = objc_msgSend(v25, "publicPermission");

        swift_release(v22);
        if (v37 == (id)2)
          goto LABEL_6;
      }
    }
    v63 = v21;
    v65 = v24;
    v39 = *(_QWORD *)(v0 + 280);
    v38 = *(_QWORD *)(v0 + 288);
    v40 = *(_QWORD *)(v0 + 208);
    v41 = *(char **)&v20[v21];
    v42 = *(_QWORD *)&v41[OBJC_IVAR____TtC8Freeform8CRLBoard_data] + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v42, v0 + 48, 0, 0);
    sub_1004B8460(v42, v40, type metadata accessor for CRLBoardCRDTData);
    v43 = v41;
    v44 = sub_1004B804C(&qword_1013E1980);
    CRRegister.wrappedValue.getter(v44);
    v45 = *(_QWORD *)(v0 + 120);
    v46 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 328) = v45;
    *(_QWORD *)(v0 + 336) = v46;
    sub_1004B84A4(v40, type metadata accessor for CRLBoardCRDTData);

    if ((v45 != v39 || v46 != v38)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), 0) & 1) == 0)
    {
      v48 = *(_QWORD *)(v0 + 280);
      v47 = *(_QWORD *)(v0 + 288);
      v49 = *(void **)(v0 + 272);
      v50 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetBoardTitle());
      v51 = v49;
      swift_bridgeObjectRetain(v47);
      v52 = sub_100D2E79C(v48, v47, v51, 0);
      v53 = *(char **)&v65[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];
      v54 = &v53[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue];
      swift_beginAccess(&v53[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue], v0 + 72, 33, 0);
      v55 = *(_QWORD **)v54;
      v56 = v53;
      v57 = v52;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
      *(_QWORD *)v54 = v55;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v55 = sub_100D0F980(0, v55[2] + 1, 1, v55);
        *(_QWORD *)v54 = v55;
      }
      v60 = v55[2];
      v59 = v55[3];
      if (v60 >= v59 >> 1)
      {
        v55 = sub_100D0F980((_QWORD *)(v59 > 1), v60 + 1, 1, v55);
        *(_QWORD *)v54 = v55;
      }
      v55[2] = v60 + 1;
      v61 = &v55[2 * v60];
      v61[4] = v57;
      *((_BYTE *)v61 + 40) = 1;
      swift_endAccess(v0 + 72);
      sub_1006A8ED4();

      objc_msgSend(*(id *)&v20[v63], "savePendingChanges");
    }
    v62 = (_QWORD *)swift_task_alloc(dword_10140DEFC);
    *(_QWORD *)(v0 + 344) = v62;
    *v62 = v0;
    v62[1] = sub_100CA6610;
    return sub_100C9C704(*(_QWORD *)(v0 + 168), 0);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 232);
    v33 = *(_QWORD *)(v0 + 168);
    swift_endAccess(v0 + 96);
    sub_1004B8460(v33, v32, type metadata accessor for CRLBoardIdentifier);
    v34 = unk_1013EF4DC;
    v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1013EF4D8 + dword_1013EF4D8);
    v35 = v9;
    v36 = (_QWORD *)swift_task_alloc(v34);
    *(_QWORD *)(v0 + 296) = v36;
    *v36 = v0;
    v36[1] = sub_100CA6148;
    return v64(*(_QWORD *)(v0 + 232), (uint64_t)v35, 0);
  }
}

uint64_t sub_100CA6148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 296);
  *(_QWORD *)(*(_QWORD *)v2 + 304) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v6 = v4[32];
    v7 = v4[33];
    v8 = sub_100CA65AC;
  }
  else
  {
    v4[39] = a1;
    v6 = v4[32];
    v7 = v4[33];
    v8 = sub_100CA61C4;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100CA61C4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  BOOL v12;
  void *v13;
  unint64_t v14;
  __n128 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(char **)(v0 + 312);
  *(_QWORD *)(v0 + 320) = v2;
  v3 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  v4 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard];
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState);
  v6 = *(void **)(v5 + 16);
  if (!v6)
    goto LABEL_7;
  swift_retain(*(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState));
  v7 = v6;
  v8 = objc_msgSend(v7, "currentUserParticipant");
  if (!v8)
  {
    v16 = objc_msgSend(v7, "publicPermission");

    swift_release(v5);
    if (v16 != (id)2)
      goto LABEL_7;
LABEL_5:
    v13 = *(void **)(v0 + 272);
    swift_release(*(_QWORD *)(v0 + 248));
    swift_bridgeObjectRelease();
    v14 = sub_100CECDA0();
    swift_allocError(&type metadata for CRLBoardLibrary.RenameError, v14, 0, 0);
    swift_willThrow(v15);

LABEL_12:
    v33 = *(_QWORD *)(v0 + 232);
    v34 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = v8;
  v10 = v3;
  v11 = objc_msgSend(v8, "permission");

  swift_release(v5);
  v12 = v11 == (id)2;
  v3 = v10;
  if (v12)
    goto LABEL_5;
LABEL_7:
  v17 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 288);
  v19 = *(_QWORD *)(v0 + 208);
  v47 = v3;
  v48 = v2;
  v20 = *(char **)&v2[v3];
  v21 = *(_QWORD *)&v20[OBJC_IVAR____TtC8Freeform8CRLBoard_data] + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v21, v0 + 48, 0, 0);
  sub_1004B8460(v21, v19, type metadata accessor for CRLBoardCRDTData);
  v22 = v20;
  v23 = sub_1004B804C(&qword_1013E1980);
  CRRegister.wrappedValue.getter(v23);
  v25 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 328) = v25;
  *(_QWORD *)(v0 + 336) = v24;
  sub_1004B84A4(v19, type metadata accessor for CRLBoardCRDTData);

  if ((v25 != v17 || v24 != v18)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), 0) & 1) == 0)
  {
    v27 = *(_QWORD *)(v0 + 280);
    v26 = *(_QWORD *)(v0 + 288);
    v28 = *(void **)(v0 + 272);
    objc_allocWithZone((Class)type metadata accessor for CRLCommandSetBoardTitle());
    v29 = v28;
    swift_bridgeObjectRetain(v26);
    v30 = sub_100D2E79C(v27, v26, v29, 0);
    if (v1)
    {
      v31 = *(void **)(v0 + 272);
      v32 = *(_QWORD *)(v0 + 248);

      swift_release(v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    v36 = v30;
    v37 = *(char **)&v48[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];
    v38 = &v37[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue];
    swift_beginAccess(&v37[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue], v0 + 72, 33, 0);
    v39 = *(_QWORD **)v38;
    v40 = v37;
    v41 = v36;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
    *(_QWORD *)v38 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v39 = sub_100D0F980(0, v39[2] + 1, 1, v39);
      *(_QWORD *)v38 = v39;
    }
    v44 = v39[2];
    v43 = v39[3];
    if (v44 >= v43 >> 1)
    {
      v39 = sub_100D0F980((_QWORD *)(v43 > 1), v44 + 1, 1, v39);
      *(_QWORD *)v38 = v39;
    }
    v39[2] = v44 + 1;
    v45 = &v39[2 * v44];
    v45[4] = v41;
    *((_BYTE *)v45 + 40) = 1;
    swift_endAccess(v0 + 72);
    sub_1006A8ED4();

    objc_msgSend(*(id *)&v48[v47], "savePendingChanges");
  }
  v46 = (_QWORD *)swift_task_alloc(dword_10140DEFC);
  *(_QWORD *)(v0 + 344) = v46;
  *v46 = v0;
  v46[1] = sub_100CA6610;
  return sub_100C9C704(*(_QWORD *)(v0 + 168), 0);
}

uint64_t sub_100CA65AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 248);

  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA6610(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(*v2 + 352) = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    v5 = *(_QWORD *)(v3 + 256);
    v6 = *(_QWORD *)(v3 + 264);
    v7 = sub_100CA6A1C;
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 256);
    v6 = *(_QWORD *)(v3 + 264);
    v7 = sub_100CA668C;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_100CA668C()
{
  uint64_t v0;
  void *v1;
  id v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v1 = *(void **)(v0 + 352);
  if (v1)
  {
    v2 = v1;
    v4 = static CKShare.SystemFieldKey.title.getter(v3);
    v5 = CKRecord.subscript.getter(v4);
    swift_bridgeObjectRelease();

    if (v5)
    {
      *(_QWORD *)(v0 + 160) = v5;
      v6 = sub_1004B804C((uint64_t *)&unk_1013E0510);
      if ((swift_dynamicCast(v0 + 136, v0 + 160, v6, &type metadata for String, 6) & 1) != 0)
      {
        v7 = *(_QWORD *)(v0 + 280);
        v8 = *(_QWORD *)(v0 + 288);
        v9 = *(_QWORD *)(v0 + 136);
        if (v7 == v9 && v8 == *(_QWORD *)(v0 + 144))
        {
          v10 = *(void **)(v0 + 320);
          v11 = *(void **)(v0 + 272);
          swift_bridgeObjectRelease();
LABEL_10:

          v15 = *(_QWORD *)(v0 + 248);
          swift_release(v15);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, *(_QWORD *)(v0 + 144), 0);
        swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
        {
          v10 = *(void **)(v0 + 320);
          v11 = *(void **)(v0 + 272);
          goto LABEL_10;
        }
      }
    }
    v16 = objc_msgSend(v2, "copy");
    _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 16), v16);
    swift_unknownObjectRelease(v16);
    v17 = sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
    if ((swift_dynamicCast(v0 + 152, v0 + 16, (char *)&type metadata for Any + 8, v17, 6) & 1) != 0)
    {
      v20 = *(_QWORD *)(v0 + 280);
      v19 = *(_QWORD *)(v0 + 288);
      v21 = *(void **)(v0 + 152);
      *(_QWORD *)(v0 + 360) = v21;
      v22 = static CKShare.SystemFieldKey.title.getter(v18);
      v32[3] = &type metadata for String;
      v32[4] = &protocol witness table for String;
      v32[0] = v20;
      v32[1] = v19;
      CKRecordKeyValueSetting.subscript.setter(v32, v22, v23, v17);
      v24 = dword_10140DF04;
      v25 = v21;
      v26 = (_QWORD *)swift_task_alloc(v24);
      *(_QWORD *)(v0 + 368) = v26;
      *v26 = v0;
      v26[1] = sub_100CA6924;
      return sub_100C9CCDC(*(_QWORD *)(v0 + 168), (uint64_t)v21, 1);
    }
    v28 = *(void **)(v0 + 272);
    v29 = *(_QWORD *)(v0 + 248);

    swift_release(v29);
    swift_bridgeObjectRelease();

  }
  else
  {
    v12 = *(void **)(v0 + 320);
    v13 = *(void **)(v0 + 272);
    swift_release(*(_QWORD *)(v0 + 248));

    swift_bridgeObjectRelease();
  }
LABEL_14:
  v30 = *(_QWORD *)(v0 + 232);
  v31 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
}

uint64_t sub_100CA6924()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  *(_QWORD *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);

  if (v0)
  {
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v2 + 256);
    v5 = *(_QWORD *)(v2 + 264);
    v6 = sub_100CA6A80;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 256);
    v5 = *(_QWORD *)(v2 + 264);
    v6 = sub_100CA69A0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100CA69A0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v0 + 352);
  v1 = *(void **)(v0 + 360);
  v3 = *(void **)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 248);

  swift_release(v4);
  v5 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
}

uint64_t sub_100CA6A1C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 320);
  v2 = *(void **)(v0 + 272);
  swift_release(*(_QWORD *)(v0 + 248));

  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
}

uint64_t sub_100CA6A80()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v0 + 352);
  v1 = *(void **)(v0 + 360);
  v3 = *(void **)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 248);

  swift_release(v4);
  v5 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA6AF8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100CA6B64, v4, v5);
}

uint64_t sub_100CA6B64()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CA6B8C, 0, 0);
}

uint64_t sub_100CA6B8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[7];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[8] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_100CA6C38;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x726F766146746573, 0xEF293A5F28657469, sub_100CECF4C, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CA6C38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CA6CB4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_100CA6CA4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CA6CA4()
{
  uint64_t v0;

  return swift_task_switch(sub_10068A8D8, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100CA6CB4()
{
  _QWORD *v0;

  swift_task_dealloc(v0[8]);
  return swift_task_switch(sub_100593748, v0[5], v0[6]);
}

uint64_t sub_100CA6CEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100CA6D58, v4, v5);
}

uint64_t sub_100CA6D58()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CA6D80, 0, 0);
}

uint64_t sub_100CA6D80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[7];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[8] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_100CA6E24;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD00000000000001BLL, 0x800000010100A950, sub_100CECD90, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CA6E24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CA6EA0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_100CA6E90;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CA6E90()
{
  uint64_t v0;

  return swift_task_switch(sub_10068F0C4, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100CA6EA0()
{
  _QWORD *v0;

  swift_task_dealloc(v0[8]);
  return swift_task_switch(sub_100CED890, v0[5], v0[6]);
}

uint64_t sub_100CA6ED8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100CA6F44, v4, v5);
}

uint64_t sub_100CA6F44()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CA6F6C, 0, 0);
}

uint64_t sub_100CA6F6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[7];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[8] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_100CA6E24;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD00000000000001BLL, 0x800000010100A930, sub_100CECD88, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CA7010(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v6 + 137) = a5;
  *(_BYTE *)(v6 + 136) = a4;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  *(_QWORD *)(v6 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 64) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v6 + 72) = v10;
  *(_QWORD *)(v6 + 80) = v11;
  return swift_task_switch(sub_100CA70C8, v10, v11);
}

uint64_t sub_100CA70C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  UUID.init()(a1);
  sub_10067AFD0(v2, 0, 0xE000000000000000, v3);
  v4 = (_QWORD *)swift_task_alloc(dword_10140E14C);
  *(_QWORD *)(v1 + 88) = v4;
  *v4 = v1;
  v4[1] = sub_100CA7144;
  return sub_100CA24F4(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 136), *(_BYTE *)(v1 + 137));
}

uint64_t sub_100CA7144(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v5 = *(_QWORD **)v2;
  v5[12] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100CA7328, v5[9], v5[10]);

  v7 = (_QWORD *)swift_task_alloc(dword_10140DF34);
  v5[13] = v7;
  *v7 = v5;
  v7[1] = sub_100CA71EC;
  return sub_100CEA898((uint64_t)&_swiftEmptySetSingleton);
}

uint64_t sub_100CA71EC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  v2 = (_QWORD *)swift_task_alloc(dword_10140DFF4);
  *(_QWORD *)(v1 + 112) = v2;
  *v2 = v4;
  v2[1] = sub_100CA7258;
  return sub_100CAF45C(*(_QWORD *)(v1 + 56));
}

uint64_t sub_100CA7258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 112);
  *(_QWORD *)(*(_QWORD *)v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[9];
    v7 = v4[10];
    v8 = sub_100CA7388;
  }
  else
  {
    v4[16] = a1;
    v6 = v4[9];
    v7 = v4[10];
    v8 = sub_100CA72CC;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100CA72CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_1004B84A4(v1, type metadata accessor for CRLBoardIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t sub_100CA7328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_1004B84A4(v1, type metadata accessor for CRLBoardIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA7388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_1004B84A4(v1, type metadata accessor for CRLBoardIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CA73E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = swift_getObjectType(v3);
  v5 = type metadata accessor for MainActor(0);
  v4[8] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[9] = v6;
  v4[10] = v7;
  return swift_task_switch(sub_100CA7464, v6, v7);
}

uint64_t sub_100CA7464()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD v5[5];

  v1 = (void *)v0[6];
  v5[3] = v0[7];
  v5[4] = &off_10129F588;
  v5[0] = v1;
  v2 = type metadata accessor for CRLBoardSearchHelper();
  swift_allocObject(v2, 104, 7);
  v3 = v1;
  v0[11] = sub_1006B86D0((uint64_t)v5);
  return swift_task_switch(sub_100CA74DC, 0, 0);
}

uint64_t sub_100CA74DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 40);
  v7 = *(_OWORD *)(v0 + 24);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v7;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 104) = v4;
  v5 = sub_1004B804C(&qword_10140E2D8);
  *v4 = v0;
  v4[1] = sub_100CA75AC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000024, 0x800000010100BA00, sub_100CED66C, v3, v5);
}

uint64_t sub_100CA75AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100CA7608, 0, 0);
}

uint64_t sub_100CA7608()
{
  _QWORD *v0;

  swift_release(v0[11]);
  v0[14] = v0[2];
  return swift_task_switch(sub_100CA7648, v0[9], v0[10]);
}

uint64_t sub_100CA7648()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 112), v1);
}

uint64_t sub_100CA767C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[135] = v1;
  v2[134] = a1;
  v3 = type metadata accessor for UUID(0);
  v2[136] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[137] = v4;
  v2[138] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_101407310) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[139] = swift_task_alloc(v5);
  v2[140] = swift_task_alloc(v5);
  v6 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v2[141] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[142] = swift_task_alloc(v7);
  v2[143] = swift_task_alloc(v7);
  v2[144] = swift_task_alloc(v7);
  v8 = type metadata accessor for MainActor(0);
  v2[145] = v8;
  v2[146] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v2[147] = v9;
  v2[148] = v10;
  return swift_task_switch(sub_100CA7790, v9, v10);
}

uint64_t sub_100CA7790()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v1 = v0[134];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v41 = v0[141];
    sub_1006006EC(0, v2, 0);
    v0 = v44;
    v4 = sub_100CE048C(v1);
    v6 = v5;
    v8 = v7 & 1;
    v42 = v1;
    v43 = v1 + 56;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v1 + 32))
    {
      if (((*(_QWORD *)(v43 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_16;
      if (*(_DWORD *)(v1 + 36) != (_DWORD)v6)
        goto LABEL_17;
      v9 = v0[144];
      v10 = v0[143];
      sub_1004B8460(*(_QWORD *)(v1 + 48) + *(_QWORD *)(v41 + 72) * v4, v9, type metadata accessor for CRLBoardIdentifier);
      v11 = sub_1004B84E0(v9, v10, type metadata accessor for CRLBoardIdentifier);
      v12 = UUID.uuidString.getter(v11);
      v14 = v13;
      sub_1004B84A4(v10, type metadata accessor for CRLBoardIdentifier);
      v3 = (double *)v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1006006EC(0, *(_QWORD *)(v45 + 16) + 1, 1);
        v3 = (double *)v45;
      }
      v16 = *((_QWORD *)v3 + 2);
      v15 = *((_QWORD *)v3 + 3);
      v0 = v44;
      if (v16 >= v15 >> 1)
      {
        sub_1006006EC(v15 > 1, v16 + 1, 1);
        v0 = v44;
        v3 = (double *)v45;
      }
      v17 = v0[134];
      *((_QWORD *)v3 + 2) = v16 + 1;
      v18 = &v3[2 * v16];
      *((_QWORD *)v18 + 4) = v12;
      *((_QWORD *)v18 + 5) = v14;
      v19 = sub_1005C3B08(v4, v6, v8 & 1, v17);
      v4 = v19;
      v6 = v20;
      v8 = v21 & 1;
      --v2;
      v1 = v42;
      if (!v2)
      {
        sub_100503494(v19, v20, v21 & 1);
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_13:
  if (qword_1013DD748 != -1)
LABEL_18:
    swift_once(&qword_1013DD748, sub_100A023E8);
  v22 = v0[145];
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 110, 0, 0);
  v23 = (void *)static OS_os_log.crlBoardLibrary;
  v24 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v0[149] = v24;
  inited = swift_initStackObject(v24, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v26 = *((_QWORD *)v3 + 2);
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  *(_QWORD *)(inited + 32) = v26;
  v0[132] = v3;
  v27 = v23;
  v28 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  v29 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v28, v29);
  v32 = v31;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 96) = &type metadata for String;
  v33 = sub_1004CFC2C();
  v0[150] = v33;
  *(_QWORD *)(inited + 104) = v33;
  *(_QWORD *)(inited + 72) = v30;
  *(_QWORD *)(inited + 80) = v32;
  v35 = static os_log_type_t.default.getter(v34);
  sub_100A06EBC((uint64_t)v27, &_mh_execute_header, v35, "Deleting %d board(s): %@", 24, 2, inited);
  swift_setDeallocating(inited);
  v36 = sub_1004B804C(&qword_1013E0190);
  v0[151] = v36;
  swift_arrayDestroy(inited + 32, 2, v36);

  sub_100CB80C0();
  v0[129] = &_swiftEmptySetSingleton;
  v0[127] = &_swiftEmptySetSingleton;
  v0[130] = &_swiftEmptySetSingleton;
  v0[152] = static MainActor.shared.getter(v37);
  v38 = dispatch thunk of Actor.unownedExecutor.getter(v22, &protocol witness table for MainActor);
  v0[153] = v38;
  v0[154] = v39;
  return swift_task_switch(sub_100CA7B4C, v38, v39);
}

uint64_t sub_100CA7B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v1 = sub_1004B804C(&qword_101407318);
  v7 = *(_OWORD *)(v0 + 1072);
  v2 = static MainActor.shared.getter(v1);
  *(_QWORD *)(v0 + 1240) = v2;
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 1248) = v3;
  *(_OWORD *)(v3 + 16) = v7;
  v4 = sub_1004B804C(&qword_101407328);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 1256) = v5;
  *v5 = v0;
  v5[1] = sub_100CA7C28;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 1048, v1, v4, v2, &protocol witness table for MainActor, &unk_101407320, v3, v1);
}

uint64_t sub_100CA7C28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1248);
  v3 = *(_QWORD *)(*v0 + 1240);
  swift_task_dealloc(*(_QWORD *)(*v0 + 1256));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100CA7C98, *(_QWORD *)(v1 + 1224), *(_QWORD *)(v1 + 1232));
}

uint64_t sub_100CA7C98()
{
  _QWORD *v0;

  swift_release(v0[152]);
  v0[158] = v0[131];
  return swift_task_switch(sub_100CA7CDC, v0[147], v0[148]);
}

uint64_t sub_100CA7CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t inited;
  id v30;
  __n128 v31;
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 1264);
  v3 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v0 + 1608) = v3;
  v4 = 1 << v3;
  v5 = *(_QWORD *)(v2 + 64);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & v5;
  *(_QWORD *)(v0 + 1272) = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_isNetworkReachable;
  *(_QWORD *)(v0 + 1280) = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardShareController;
  *(_QWORD *)(v0 + 1288) = NSInternalInconsistencyException;
  if (v7)
  {
    v8 = (v7 - 1) & v7;
    v9 = __clz(__rbit64(v7));
    v10 = *(_QWORD **)(v0 + 1264);
LABEL_6:
    v11 = *(_QWORD *)(v0 + 1112);
    sub_1004B8460(v10[6] + *(_QWORD *)(*(_QWORD *)(v0 + 1128) + 72) * v9, v11, type metadata accessor for CRLBoardIdentifier);
    v12 = v10[7];
    v13 = sub_1004B804C(&qword_101407330);
    *(_BYTE *)(v11 + *(int *)(v13 + 48)) = *(_BYTE *)(v12 + v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 0, 1, v13);
    goto LABEL_24;
  }
  v14 = 1;
  v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 1608)) + 63) >> 6;
  if (v15 > 1)
  {
    v10 = *(_QWORD **)(v0 + 1264);
    v16 = v10[9];
    if (v16)
    {
LABEL_9:
      v8 = (v16 - 1) & v16;
      v9 = __clz(__rbit64(v16)) + (v14 << 6);
      v1 = v14;
      goto LABEL_6;
    }
    v17 = 2;
    v1 = 1;
    if ((unint64_t)((1 << *(_BYTE *)(v0 + 1608)) + 63) >> 6 > 2)
    {
      v16 = v10[10];
      if (v16)
      {
LABEL_12:
        v14 = v17;
        goto LABEL_9;
      }
      v1 = 2;
      if ((unint64_t)((1 << *(_BYTE *)(v0 + 1608)) + 63) >> 6 > 3)
      {
        v16 = v10[11];
        if (v16)
        {
          v14 = 3;
          goto LABEL_9;
        }
        v17 = 4;
        v1 = 3;
        if ((unint64_t)((1 << *(_BYTE *)(v0 + 1608)) + 63) >> 6 > 4)
        {
          v16 = v10[12];
          if (v16)
            goto LABEL_12;
          while (1)
          {
            v14 = v17 + 1;
            if (__OFADD__(v17, 1))
            {
              __break(1u);
              JUMPOUT(0x100CA8504);
            }
            if (v14 >= (uint64_t)v15)
              break;
            v16 = v10[v14 + 8];
            ++v17;
            if (v16)
              goto LABEL_9;
          }
          v1 = v15 - 1;
        }
      }
    }
  }
  v18 = *(_QWORD *)(v0 + 1112);
  v19 = sub_1004B804C(&qword_101407330);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v8 = 0;
LABEL_24:
  *(_QWORD *)(v0 + 1304) = v8;
  *(_QWORD *)(v0 + 1296) = v1;
  v20 = *(_QWORD *)(v0 + 1120);
  sub_1004C4938(*(_QWORD *)(v0 + 1112), v20, &qword_101407310);
  v21 = sub_1004B804C(&qword_101407330);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21) != 1)
  {
    v22 = *(_QWORD *)(v0 + 1120);
    v23 = *(unsigned __int8 *)(v22 + *(int *)(v21 + 48));
    sub_1004B84E0(v22, *(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
    __asm { BR              X8 }
  }
  swift_release(*(_QWORD *)(v0 + 1264));
  v24 = *(_QWORD *)(v0 + 1032);
  *(_QWORD *)(v0 + 1456) = v24;
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v26 = *(_QWORD *)(v0 + 1208);
    v27 = *(_QWORD *)(v0 + 1080);
    v28 = (void *)static OS_os_log.crlBoardLibrary;
    inited = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 592);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    *(_QWORD *)(inited + 56) = &type metadata for Int;
    *(_QWORD *)(inited + 64) = &protocol witness table for Int;
    *(_QWORD *)(inited + 32) = v25;
    v30 = v28;
    v32 = static os_log_type_t.default.getter(v31);
    sub_100A06EBC((uint64_t)v30, &_mh_execute_header, v32, "Encountered error while deleting %d board(s). Adding them to the list of boards to retry deletion.", 98, 2, inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, v26);

    *(_QWORD *)(v0 + 1464) = *(_QWORD *)(v27 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    swift_bridgeObjectRetain(v24);
    v33 = sub_100CAAFCC;
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v24);
    sub_100DB65BC(v34);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1496) = v45;
    v35 = *(_QWORD *)(v45 + 16);
    if (v35)
    {
      v36 = *(_QWORD *)(v0 + 1208);
      v37 = *(_QWORD *)(v0 + 1080);
      v38 = (void *)static OS_os_log.crlBoardLibrary;
      v39 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 664);
      *(_OWORD *)(v39 + 16) = xmmword_100EF5E40;
      *(_QWORD *)(v39 + 56) = &type metadata for Int;
      *(_QWORD *)(v39 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v39 + 32) = v35;
      v40 = v38;
      v42 = static os_log_type_t.default.getter(v41);
      sub_100A06EBC((uint64_t)v40, &_mh_execute_header, v42, "Successfully deleted %d boards", 30, 2, v39);
      swift_setDeallocating(v39);
      swift_arrayDestroy(v39 + 32, 1, v36);

      *(_QWORD *)(v0 + 1504) = *(_QWORD *)(v37 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v33 = sub_100CAB3B4;
    }
    else
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 1536) = *(_QWORD *)(*(_QWORD *)(v0 + 1080) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v43 = *(_QWORD *)(v0 + 1016);
      *(_QWORD *)(v0 + 1544) = v43;
      swift_bridgeObjectRetain(v43);
      v33 = sub_100CAB64C;
    }
  }
  return swift_task_switch(v33, 0, 0);
}

uint64_t sub_100CA8518(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  if (*(_BYTE *)(v1[135] + v1[159]) == 1)
  {
    v2 = v1[145];
    v3 = static MainActor.shared.getter(a1);
    v1[167] = v3;
    v1[168] = static MainActor.shared.getter(v3);
    v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
    v6 = v5;
    v1[169] = v4;
    v1[170] = v5;
    v7 = sub_100CA85B4;
    v8 = v4;
  }
  else
  {
    swift_release(v1[164]);
    v6 = v1[148];
    v8 = v1[147];
    v7 = sub_100CED884;
  }
  return swift_task_switch(v7, v8, v6);
}

uint64_t sub_100CA85B4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10140F0D4);
  *(_QWORD *)(v0 + 1368) = v1;
  *v1 = v0;
  v1[1] = sub_100CA860C;
  return sub_100D2BA60(*(_QWORD *)(v0 + 1136));
}

uint64_t sub_100CA860C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[171];
  v3 = *v1;
  v3[172] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100CA870C, v3[169], v3[170]);
  v5 = (uint64_t **)swift_task_alloc(dword_10140DF0C);
  v3[173] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_100CA86A8;
  return sub_100CB1EE0(v3[142], 0, 1);
}

uint64_t sub_100CA86A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1384);
  *(_QWORD *)(*v1 + 1392) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CA90B4;
  else
    v4 = sub_100CA8770;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1352), *(_QWORD *)(v2 + 1360));
}

uint64_t sub_100CA870C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0[175] = v0[172];
  v1 = v0[145];
  swift_release(v0[168]);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CA9118, v2, v3);
}

uint64_t sub_100CA8770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 1160);
  swift_release(*(_QWORD *)(v0 + 1344));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CA87CC, v2, v3);
}

uint64_t sub_100CA87CC()
{
  _QWORD *v0;

  swift_release(v0[167]);
  return swift_task_switch(sub_100CA8808, v0[165], v0[166]);
}

uint64_t sub_100CA8808()
{
  _QWORD *v0;

  swift_release(v0[164]);
  return swift_task_switch(sub_100CA8844, v0[147], v0[148]);
}

uint64_t sub_100CA8844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  __n128 v36;
  uint64_t v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 1208);
  v2 = *(_QWORD *)(v0 + 1200);
  v3 = (void *)static OS_os_log.crlBoardLibrary;
  inited = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 232);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v5 = v3;
  v6 = UUID.uuidString.getter(v5);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v7;
  v9 = static os_log_type_t.default.getter(v8);
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v9, "Owned share deletion for: %{public}@", 36, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, v1);

  sub_1004B84A4(*(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
  v10 = *(_QWORD *)(v0 + 1304);
  v11 = *(_QWORD *)(v0 + 1296);
  if (v10)
  {
    v12 = (v10 - 1) & v10;
    v13 = __clz(__rbit64(v10)) | (v11 << 6);
    v14 = *(_QWORD *)(v0 + 1264);
LABEL_3:
    v15 = *(_QWORD *)(v0 + 1112);
    sub_1004B8460(*(_QWORD *)(v14 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1128) + 72) * v13, v15, type metadata accessor for CRLBoardIdentifier);
    v16 = *(_QWORD *)(v14 + 56);
    v17 = sub_1004B804C(&qword_101407330);
    *(_BYTE *)(v15 + *(int *)(v17 + 48)) = *(_BYTE *)(v16 + v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
    goto LABEL_22;
  }
  v18 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    JUMPOUT(0x100CA90A0);
  }
  v19 = (unint64_t)((1 << *(_BYTE *)(v0 + 1608)) + 63) >> 6;
  if (v18 < v19)
  {
    v14 = *(_QWORD *)(v0 + 1264);
    v20 = v14 + 64;
    v21 = *(_QWORD *)(v14 + 64 + 8 * v18);
    if (v21)
    {
LABEL_7:
      v12 = (v21 - 1) & v21;
      v13 = __clz(__rbit64(v21)) + (v18 << 6);
      v11 = v18;
      goto LABEL_3;
    }
    v22 = v11 + 2;
    ++v11;
    if (v18 + 1 < v19)
    {
      v21 = *(_QWORD *)(v20 + 8 * v22);
      if (v21)
      {
LABEL_10:
        v18 = v22;
        goto LABEL_7;
      }
      v11 = v18 + 1;
      if (v18 + 2 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * (v18 + 2));
        if (v21)
        {
          v18 += 2;
          goto LABEL_7;
        }
        v22 = v18 + 3;
        v11 = v18 + 2;
        if (v18 + 3 < v19)
        {
          v21 = *(_QWORD *)(v20 + 8 * v22);
          if (v21)
            goto LABEL_10;
          while (1)
          {
            v18 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_31;
            if (v18 >= v19)
              break;
            v21 = *(_QWORD *)(v20 + 8 * v18);
            ++v22;
            if (v21)
              goto LABEL_7;
          }
          v11 = v19 - 1;
        }
      }
    }
  }
  v23 = *(_QWORD *)(v0 + 1112);
  v24 = sub_1004B804C(&qword_101407330);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v12 = 0;
LABEL_22:
  *(_QWORD *)(v0 + 1304) = v12;
  *(_QWORD *)(v0 + 1296) = v11;
  v25 = *(_QWORD *)(v0 + 1120);
  sub_1004C4938(*(_QWORD *)(v0 + 1112), v25, &qword_101407310);
  v26 = sub_1004B804C(&qword_101407330);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26) != 1)
  {
    v27 = *(_QWORD *)(v0 + 1120);
    v28 = *(unsigned __int8 *)(v27 + *(int *)(v26 + 48));
    sub_1004B84E0(v27, *(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
    __asm { BR              X8 }
  }
  swift_release(*(_QWORD *)(v0 + 1264));
  v29 = *(_QWORD *)(v0 + 1032);
  *(_QWORD *)(v0 + 1456) = v29;
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v31 = *(_QWORD *)(v0 + 1208);
    v32 = *(_QWORD *)(v0 + 1080);
    v33 = (void *)static OS_os_log.crlBoardLibrary;
    v34 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 592);
    *(_OWORD *)(v34 + 16) = xmmword_100EF5E40;
    *(_QWORD *)(v34 + 56) = &type metadata for Int;
    *(_QWORD *)(v34 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v34 + 32) = v30;
    v35 = v33;
    v37 = static os_log_type_t.default.getter(v36);
    sub_100A06EBC((uint64_t)v35, &_mh_execute_header, v37, "Encountered error while deleting %d board(s). Adding them to the list of boards to retry deletion.", 98, 2, v34);
    swift_setDeallocating(v34);
    swift_arrayDestroy(v34 + 32, 1, v31);

    *(_QWORD *)(v0 + 1464) = *(_QWORD *)(v32 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    swift_bridgeObjectRetain(v29);
    v38 = sub_100CAAFCC;
  }
  else
  {
    v50 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v29);
    sub_100DB65BC(v39);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1496) = v50;
    v40 = *(_QWORD *)(v50 + 16);
    if (v40)
    {
      v41 = *(_QWORD *)(v0 + 1208);
      v42 = *(_QWORD *)(v0 + 1080);
      v43 = (void *)static OS_os_log.crlBoardLibrary;
      v44 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 664);
      *(_OWORD *)(v44 + 16) = xmmword_100EF5E40;
      *(_QWORD *)(v44 + 56) = &type metadata for Int;
      *(_QWORD *)(v44 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v44 + 32) = v40;
      v45 = v43;
      v47 = static os_log_type_t.default.getter(v46);
      sub_100A06EBC((uint64_t)v45, &_mh_execute_header, v47, "Successfully deleted %d boards", 30, 2, v44);
      swift_setDeallocating(v44);
      swift_arrayDestroy(v44 + 32, 1, v41);

      *(_QWORD *)(v0 + 1504) = *(_QWORD *)(v42 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v38 = sub_100CAB3B4;
    }
    else
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 1536) = *(_QWORD *)(*(_QWORD *)(v0 + 1080) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v48 = *(_QWORD *)(v0 + 1016);
      *(_QWORD *)(v0 + 1544) = v48;
      swift_bridgeObjectRetain(v48);
      v38 = sub_100CAB64C;
    }
  }
  return swift_task_switch(v38, 0, 0);
}

uint64_t sub_100CA90B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0[175] = v0[174];
  v1 = v0[145];
  swift_release(v0[168]);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CA9118, v2, v3);
}

uint64_t sub_100CA9118()
{
  _QWORD *v0;

  swift_release(v0[167]);
  return swift_task_switch(sub_100CA9154, v0[165], v0[166]);
}

uint64_t sub_100CA9154()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release(v0[164]);
  if (qword_1013DD8C8 != -1)
    swift_once(&qword_1013DD8C8, sub_100A069BC);
  v1 = v0[175];
  v2 = v0[151];
  v3 = v0[150];
  v4 = v0[149];
  swift_beginAccess(&static OS_os_log.shareState, v0 + 113, 0, 0);
  v5 = (void *)static OS_os_log.shareState;
  inited = swift_initStackObject(v4, v0 + 38);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v0 + 133, v0 + 116);
  v7 = v0[117];
  v8 = v0[118];
  v9 = v5;
  v10 = Error.localizedDescription.getter(v7, v8);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v3;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v11;
  v12 = static os_log_type_t.error.getter(v10);
  sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v12, "Unable to unshare board before deleting due to error, will reattempt again later %@", 83, 2, inited);
  swift_errorRelease(v1);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, v2);

  return swift_task_switch(sub_100CA92C0, v0[147], v0[148]);
}

uint64_t sub_100CA92C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  __n128 v39;
  uint64_t v40;
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 1208);
  v2 = *(_QWORD *)(v0 + 1200);
  v3 = *(_QWORD *)(v0 + 1152);
  v4 = *(_QWORD *)(v0 + 1144);
  v5 = *(_QWORD *)(v0 + 1136);
  v6 = (void *)static OS_os_log.crlBoardLibrary;
  inited = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 376);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v8 = v6;
  v9 = UUID.uuidString.getter(v8);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = v10;
  v12 = static os_log_type_t.default.getter(v11);
  sub_100A06EBC((uint64_t)v8, &_mh_execute_header, v12, "Owned share deletion failed, retrying: %{public}@", 49, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, v1);

  sub_1004B8460(v5, v4, type metadata accessor for CRLBoardIdentifier);
  sub_100AD7844(v3, v4);
  sub_1004B84A4(v3, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(*(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
  v13 = *(_QWORD *)(v0 + 1304);
  v14 = *(_QWORD *)(v0 + 1296);
  if (v13)
  {
    v15 = (v13 - 1) & v13;
    v16 = __clz(__rbit64(v13)) | (v14 << 6);
    v17 = *(_QWORD *)(v0 + 1264);
LABEL_3:
    v18 = *(_QWORD *)(v0 + 1112);
    sub_1004B8460(*(_QWORD *)(v17 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1128) + 72) * v16, v18, type metadata accessor for CRLBoardIdentifier);
    v19 = *(_QWORD *)(v17 + 56);
    v20 = sub_1004B804C(&qword_101407330);
    *(_BYTE *)(v18 + *(int *)(v20 + 48)) = *(_BYTE *)(v19 + v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
    goto LABEL_22;
  }
  v21 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    JUMPOUT(0x100CA9B58);
  }
  v22 = (unint64_t)((1 << *(_BYTE *)(v0 + 1608)) + 63) >> 6;
  if (v21 < v22)
  {
    v17 = *(_QWORD *)(v0 + 1264);
    v23 = v17 + 64;
    v24 = *(_QWORD *)(v17 + 64 + 8 * v21);
    if (v24)
    {
LABEL_7:
      v15 = (v24 - 1) & v24;
      v16 = __clz(__rbit64(v24)) + (v21 << 6);
      v14 = v21;
      goto LABEL_3;
    }
    v25 = v14 + 2;
    ++v14;
    if (v21 + 1 < v22)
    {
      v24 = *(_QWORD *)(v23 + 8 * v25);
      if (v24)
      {
LABEL_10:
        v21 = v25;
        goto LABEL_7;
      }
      v14 = v21 + 1;
      if (v21 + 2 < v22)
      {
        v24 = *(_QWORD *)(v23 + 8 * (v21 + 2));
        if (v24)
        {
          v21 += 2;
          goto LABEL_7;
        }
        v25 = v21 + 3;
        v14 = v21 + 2;
        if (v21 + 3 < v22)
        {
          v24 = *(_QWORD *)(v23 + 8 * v25);
          if (v24)
            goto LABEL_10;
          while (1)
          {
            v21 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_31;
            if (v21 >= v22)
              break;
            v24 = *(_QWORD *)(v23 + 8 * v21);
            ++v25;
            if (v24)
              goto LABEL_7;
          }
          v14 = v22 - 1;
        }
      }
    }
  }
  v26 = *(_QWORD *)(v0 + 1112);
  v27 = sub_1004B804C(&qword_101407330);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v15 = 0;
LABEL_22:
  *(_QWORD *)(v0 + 1304) = v15;
  *(_QWORD *)(v0 + 1296) = v14;
  v28 = *(_QWORD *)(v0 + 1120);
  sub_1004C4938(*(_QWORD *)(v0 + 1112), v28, &qword_101407310);
  v29 = sub_1004B804C(&qword_101407330);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29) != 1)
  {
    v30 = *(_QWORD *)(v0 + 1120);
    v31 = *(unsigned __int8 *)(v30 + *(int *)(v29 + 48));
    sub_1004B84E0(v30, *(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
    __asm { BR              X8 }
  }
  swift_release(*(_QWORD *)(v0 + 1264));
  v32 = *(_QWORD *)(v0 + 1032);
  *(_QWORD *)(v0 + 1456) = v32;
  v33 = *(_QWORD *)(v32 + 16);
  if (v33)
  {
    v34 = *(_QWORD *)(v0 + 1208);
    v35 = *(_QWORD *)(v0 + 1080);
    v36 = (void *)static OS_os_log.crlBoardLibrary;
    v37 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 592);
    *(_OWORD *)(v37 + 16) = xmmword_100EF5E40;
    *(_QWORD *)(v37 + 56) = &type metadata for Int;
    *(_QWORD *)(v37 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v37 + 32) = v33;
    v38 = v36;
    v40 = static os_log_type_t.default.getter(v39);
    sub_100A06EBC((uint64_t)v38, &_mh_execute_header, v40, "Encountered error while deleting %d board(s). Adding them to the list of boards to retry deletion.", 98, 2, v37);
    swift_setDeallocating(v37);
    swift_arrayDestroy(v37 + 32, 1, v34);

    *(_QWORD *)(v0 + 1464) = *(_QWORD *)(v35 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    swift_bridgeObjectRetain(v32);
    v41 = sub_100CAAFCC;
  }
  else
  {
    v53 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v32);
    sub_100DB65BC(v42);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1496) = v53;
    v43 = *(_QWORD *)(v53 + 16);
    if (v43)
    {
      v44 = *(_QWORD *)(v0 + 1208);
      v45 = *(_QWORD *)(v0 + 1080);
      v46 = (void *)static OS_os_log.crlBoardLibrary;
      v47 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 664);
      *(_OWORD *)(v47 + 16) = xmmword_100EF5E40;
      *(_QWORD *)(v47 + 56) = &type metadata for Int;
      *(_QWORD *)(v47 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v47 + 32) = v43;
      v48 = v46;
      v50 = static os_log_type_t.default.getter(v49);
      sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v50, "Successfully deleted %d boards", 30, 2, v47);
      swift_setDeallocating(v47);
      swift_arrayDestroy(v47 + 32, 1, v44);

      *(_QWORD *)(v0 + 1504) = *(_QWORD *)(v45 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v41 = sub_100CAB3B4;
    }
    else
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 1536) = *(_QWORD *)(*(_QWORD *)(v0 + 1080) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v51 = *(_QWORD *)(v0 + 1016);
      *(_QWORD *)(v0 + 1544) = v51;
      swift_bridgeObjectRetain(v51);
      v41 = sub_100CAB64C;
    }
  }
  return swift_task_switch(v41, 0, 0);
}

uint64_t sub_100CA9B6C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(v1[135] + v1[159]) == 1)
  {
    v1[179] = static MainActor.shared.getter(a1);
    v2 = (_QWORD *)swift_task_alloc(dword_10140E19C);
    v1[180] = v2;
    *v2 = v1;
    v2[1] = sub_100CA9C04;
    return sub_100CB7C70(v1[142]);
  }
  else
  {
    swift_release(v1[176]);
    return swift_task_switch(sub_100CED888, v1[147], v1[148]);
  }
}

uint64_t sub_100CA9C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1440);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1160);
  *(_QWORD *)(*(_QWORD *)v1 + 1448) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_100CAA578;
  else
    v6 = sub_100CA9C90;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_100CA9C90()
{
  _QWORD *v0;

  swift_release(v0[179]);
  return swift_task_switch(sub_100CA9CCC, v0[177], v0[178]);
}

uint64_t sub_100CA9CCC()
{
  _QWORD *v0;

  swift_release(v0[176]);
  return swift_task_switch(sub_100CA9D08, v0[147], v0[148]);
}

uint64_t sub_100CA9D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  __n128 v36;
  uint64_t v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 1208);
  v2 = *(_QWORD *)(v0 + 1200);
  v3 = (void *)static OS_os_log.crlBoardLibrary;
  inited = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 448);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v5 = v3;
  v6 = UUID.uuidString.getter(v5);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v7;
  v9 = static os_log_type_t.default.getter(v8);
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v9, "Joined share deletion for: %{public}@", 37, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, v1);

  sub_1004B84A4(*(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
  v10 = *(_QWORD *)(v0 + 1304);
  v11 = *(_QWORD *)(v0 + 1296);
  if (v10)
  {
    v12 = (v10 - 1) & v10;
    v13 = __clz(__rbit64(v10)) | (v11 << 6);
    v14 = *(_QWORD *)(v0 + 1264);
LABEL_3:
    v15 = *(_QWORD *)(v0 + 1112);
    sub_1004B8460(*(_QWORD *)(v14 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1128) + 72) * v13, v15, type metadata accessor for CRLBoardIdentifier);
    v16 = *(_QWORD *)(v14 + 56);
    v17 = sub_1004B804C(&qword_101407330);
    *(_BYTE *)(v15 + *(int *)(v17 + 48)) = *(_BYTE *)(v16 + v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
    goto LABEL_22;
  }
  v18 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    JUMPOUT(0x100CAA564);
  }
  v19 = (unint64_t)((1 << *(_BYTE *)(v0 + 1608)) + 63) >> 6;
  if (v18 < v19)
  {
    v14 = *(_QWORD *)(v0 + 1264);
    v20 = v14 + 64;
    v21 = *(_QWORD *)(v14 + 64 + 8 * v18);
    if (v21)
    {
LABEL_7:
      v12 = (v21 - 1) & v21;
      v13 = __clz(__rbit64(v21)) + (v18 << 6);
      v11 = v18;
      goto LABEL_3;
    }
    v22 = v11 + 2;
    ++v11;
    if (v18 + 1 < v19)
    {
      v21 = *(_QWORD *)(v20 + 8 * v22);
      if (v21)
      {
LABEL_10:
        v18 = v22;
        goto LABEL_7;
      }
      v11 = v18 + 1;
      if (v18 + 2 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * (v18 + 2));
        if (v21)
        {
          v18 += 2;
          goto LABEL_7;
        }
        v22 = v18 + 3;
        v11 = v18 + 2;
        if (v18 + 3 < v19)
        {
          v21 = *(_QWORD *)(v20 + 8 * v22);
          if (v21)
            goto LABEL_10;
          while (1)
          {
            v18 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_31;
            if (v18 >= v19)
              break;
            v21 = *(_QWORD *)(v20 + 8 * v18);
            ++v22;
            if (v21)
              goto LABEL_7;
          }
          v11 = v19 - 1;
        }
      }
    }
  }
  v23 = *(_QWORD *)(v0 + 1112);
  v24 = sub_1004B804C(&qword_101407330);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v12 = 0;
LABEL_22:
  *(_QWORD *)(v0 + 1304) = v12;
  *(_QWORD *)(v0 + 1296) = v11;
  v25 = *(_QWORD *)(v0 + 1120);
  sub_1004C4938(*(_QWORD *)(v0 + 1112), v25, &qword_101407310);
  v26 = sub_1004B804C(&qword_101407330);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26) != 1)
  {
    v27 = *(_QWORD *)(v0 + 1120);
    v28 = *(unsigned __int8 *)(v27 + *(int *)(v26 + 48));
    sub_1004B84E0(v27, *(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
    __asm { BR              X8 }
  }
  swift_release(*(_QWORD *)(v0 + 1264));
  v29 = *(_QWORD *)(v0 + 1032);
  *(_QWORD *)(v0 + 1456) = v29;
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v31 = *(_QWORD *)(v0 + 1208);
    v32 = *(_QWORD *)(v0 + 1080);
    v33 = (void *)static OS_os_log.crlBoardLibrary;
    v34 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 592);
    *(_OWORD *)(v34 + 16) = xmmword_100EF5E40;
    *(_QWORD *)(v34 + 56) = &type metadata for Int;
    *(_QWORD *)(v34 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v34 + 32) = v30;
    v35 = v33;
    v37 = static os_log_type_t.default.getter(v36);
    sub_100A06EBC((uint64_t)v35, &_mh_execute_header, v37, "Encountered error while deleting %d board(s). Adding them to the list of boards to retry deletion.", 98, 2, v34);
    swift_setDeallocating(v34);
    swift_arrayDestroy(v34 + 32, 1, v31);

    *(_QWORD *)(v0 + 1464) = *(_QWORD *)(v32 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    swift_bridgeObjectRetain(v29);
    v38 = sub_100CAAFCC;
  }
  else
  {
    v50 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v29);
    sub_100DB65BC(v39);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1496) = v50;
    v40 = *(_QWORD *)(v50 + 16);
    if (v40)
    {
      v41 = *(_QWORD *)(v0 + 1208);
      v42 = *(_QWORD *)(v0 + 1080);
      v43 = (void *)static OS_os_log.crlBoardLibrary;
      v44 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 664);
      *(_OWORD *)(v44 + 16) = xmmword_100EF5E40;
      *(_QWORD *)(v44 + 56) = &type metadata for Int;
      *(_QWORD *)(v44 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v44 + 32) = v40;
      v45 = v43;
      v47 = static os_log_type_t.default.getter(v46);
      sub_100A06EBC((uint64_t)v45, &_mh_execute_header, v47, "Successfully deleted %d boards", 30, 2, v44);
      swift_setDeallocating(v44);
      swift_arrayDestroy(v44 + 32, 1, v41);

      *(_QWORD *)(v0 + 1504) = *(_QWORD *)(v42 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v38 = sub_100CAB3B4;
    }
    else
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 1536) = *(_QWORD *)(*(_QWORD *)(v0 + 1080) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v48 = *(_QWORD *)(v0 + 1016);
      *(_QWORD *)(v0 + 1544) = v48;
      swift_bridgeObjectRetain(v48);
      v38 = sub_100CAB64C;
    }
  }
  return swift_task_switch(v38, 0, 0);
}

uint64_t sub_100CAA578()
{
  _QWORD *v0;

  swift_release(v0[179]);
  return swift_task_switch(sub_100CAA5B4, v0[177], v0[178]);
}

uint64_t sub_100CAA5B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release(v0[176]);
  if (qword_1013DD8C8 != -1)
    swift_once(&qword_1013DD8C8, sub_100A069BC);
  v1 = v0[181];
  v2 = v0[151];
  v3 = v0[150];
  v4 = v0[149];
  swift_beginAccess(&static OS_os_log.shareState, v0 + 119, 0, 0);
  v5 = (void *)static OS_os_log.shareState;
  inited = swift_initStackObject(v4, v0 + 65);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v0 + 128, v0 + 122);
  v7 = v0[123];
  v8 = v0[124];
  v9 = v5;
  v10 = Error.localizedDescription.getter(v7, v8);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v3;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v11;
  v12 = static os_log_type_t.error.getter(v10);
  sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v12, "Unable to unshare board before deleting due to error, will reattempt again later %@", 83, 2, inited);
  swift_errorRelease(v1);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, v2);

  return swift_task_switch(sub_100CAA720, v0[147], v0[148]);
}

uint64_t sub_100CAA720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  __n128 v39;
  uint64_t v40;
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 1208);
  v2 = *(_QWORD *)(v0 + 1200);
  v3 = *(_QWORD *)(v0 + 1152);
  v4 = *(_QWORD *)(v0 + 1144);
  v5 = *(_QWORD *)(v0 + 1136);
  v6 = (void *)static OS_os_log.crlBoardLibrary;
  inited = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 808);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v8 = v6;
  v9 = UUID.uuidString.getter(v8);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = v10;
  v12 = static os_log_type_t.default.getter(v11);
  sub_100A06EBC((uint64_t)v8, &_mh_execute_header, v12, "Joined share deletion failed, retrying: %{public}@", 50, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, v1);

  sub_1004B8460(v5, v4, type metadata accessor for CRLBoardIdentifier);
  sub_100AD7844(v3, v4);
  sub_1004B84A4(v3, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(*(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
  v13 = *(_QWORD *)(v0 + 1304);
  v14 = *(_QWORD *)(v0 + 1296);
  if (v13)
  {
    v15 = (v13 - 1) & v13;
    v16 = __clz(__rbit64(v13)) | (v14 << 6);
    v17 = *(_QWORD *)(v0 + 1264);
LABEL_3:
    v18 = *(_QWORD *)(v0 + 1112);
    sub_1004B8460(*(_QWORD *)(v17 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1128) + 72) * v16, v18, type metadata accessor for CRLBoardIdentifier);
    v19 = *(_QWORD *)(v17 + 56);
    v20 = sub_1004B804C(&qword_101407330);
    *(_BYTE *)(v18 + *(int *)(v20 + 48)) = *(_BYTE *)(v19 + v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
    goto LABEL_22;
  }
  v21 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    JUMPOUT(0x100CAAFB8);
  }
  v22 = (unint64_t)((1 << *(_BYTE *)(v0 + 1608)) + 63) >> 6;
  if (v21 < v22)
  {
    v17 = *(_QWORD *)(v0 + 1264);
    v23 = v17 + 64;
    v24 = *(_QWORD *)(v17 + 64 + 8 * v21);
    if (v24)
    {
LABEL_7:
      v15 = (v24 - 1) & v24;
      v16 = __clz(__rbit64(v24)) + (v21 << 6);
      v14 = v21;
      goto LABEL_3;
    }
    v25 = v14 + 2;
    ++v14;
    if (v21 + 1 < v22)
    {
      v24 = *(_QWORD *)(v23 + 8 * v25);
      if (v24)
      {
LABEL_10:
        v21 = v25;
        goto LABEL_7;
      }
      v14 = v21 + 1;
      if (v21 + 2 < v22)
      {
        v24 = *(_QWORD *)(v23 + 8 * (v21 + 2));
        if (v24)
        {
          v21 += 2;
          goto LABEL_7;
        }
        v25 = v21 + 3;
        v14 = v21 + 2;
        if (v21 + 3 < v22)
        {
          v24 = *(_QWORD *)(v23 + 8 * v25);
          if (v24)
            goto LABEL_10;
          while (1)
          {
            v21 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_31;
            if (v21 >= v22)
              break;
            v24 = *(_QWORD *)(v23 + 8 * v21);
            ++v25;
            if (v24)
              goto LABEL_7;
          }
          v14 = v22 - 1;
        }
      }
    }
  }
  v26 = *(_QWORD *)(v0 + 1112);
  v27 = sub_1004B804C(&qword_101407330);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v15 = 0;
LABEL_22:
  *(_QWORD *)(v0 + 1304) = v15;
  *(_QWORD *)(v0 + 1296) = v14;
  v28 = *(_QWORD *)(v0 + 1120);
  sub_1004C4938(*(_QWORD *)(v0 + 1112), v28, &qword_101407310);
  v29 = sub_1004B804C(&qword_101407330);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29) != 1)
  {
    v30 = *(_QWORD *)(v0 + 1120);
    v31 = *(unsigned __int8 *)(v30 + *(int *)(v29 + 48));
    sub_1004B84E0(v30, *(_QWORD *)(v0 + 1136), type metadata accessor for CRLBoardIdentifier);
    __asm { BR              X8 }
  }
  swift_release(*(_QWORD *)(v0 + 1264));
  v32 = *(_QWORD *)(v0 + 1032);
  *(_QWORD *)(v0 + 1456) = v32;
  v33 = *(_QWORD *)(v32 + 16);
  if (v33)
  {
    v34 = *(_QWORD *)(v0 + 1208);
    v35 = *(_QWORD *)(v0 + 1080);
    v36 = (void *)static OS_os_log.crlBoardLibrary;
    v37 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 592);
    *(_OWORD *)(v37 + 16) = xmmword_100EF5E40;
    *(_QWORD *)(v37 + 56) = &type metadata for Int;
    *(_QWORD *)(v37 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v37 + 32) = v33;
    v38 = v36;
    v40 = static os_log_type_t.default.getter(v39);
    sub_100A06EBC((uint64_t)v38, &_mh_execute_header, v40, "Encountered error while deleting %d board(s). Adding them to the list of boards to retry deletion.", 98, 2, v37);
    swift_setDeallocating(v37);
    swift_arrayDestroy(v37 + 32, 1, v34);

    *(_QWORD *)(v0 + 1464) = *(_QWORD *)(v35 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    swift_bridgeObjectRetain(v32);
    v41 = sub_100CAAFCC;
  }
  else
  {
    v53 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v32);
    sub_100DB65BC(v42);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1496) = v53;
    v43 = *(_QWORD *)(v53 + 16);
    if (v43)
    {
      v44 = *(_QWORD *)(v0 + 1208);
      v45 = *(_QWORD *)(v0 + 1080);
      v46 = (void *)static OS_os_log.crlBoardLibrary;
      v47 = swift_initStackObject(*(_QWORD *)(v0 + 1192), v0 + 664);
      *(_OWORD *)(v47 + 16) = xmmword_100EF5E40;
      *(_QWORD *)(v47 + 56) = &type metadata for Int;
      *(_QWORD *)(v47 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v47 + 32) = v43;
      v48 = v46;
      v50 = static os_log_type_t.default.getter(v49);
      sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v50, "Successfully deleted %d boards", 30, 2, v47);
      swift_setDeallocating(v47);
      swift_arrayDestroy(v47 + 32, 1, v44);

      *(_QWORD *)(v0 + 1504) = *(_QWORD *)(v45 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v41 = sub_100CAB3B4;
    }
    else
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 1536) = *(_QWORD *)(*(_QWORD *)(v0 + 1080) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
      v51 = *(_QWORD *)(v0 + 1016);
      *(_QWORD *)(v0 + 1544) = v51;
      swift_bridgeObjectRetain(v51);
      v41 = sub_100CAB64C;
    }
  }
  return swift_task_switch(v41, 0, 0);
}

uint64_t sub_100CAAFCC()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[92].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[91], v0[91], 8uLL);
  v2 = (int8x16_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[92].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_100CAB068;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000021, 0x800000010100AAB0, sub_100CECDF4, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100CAB068()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1480);
  *(_QWORD *)(*v1 + 1488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CAB0D4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 1472));
    v4 = sub_100CAB1D4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CAB0D4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[184];
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CAB134, v0[147], v0[148]);
}

uint64_t sub_100CAB134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 1168));
  v1 = *(_QWORD *)(v0 + 1152);
  v2 = *(_QWORD *)(v0 + 1144);
  v3 = *(_QWORD *)(v0 + 1136);
  v4 = *(_QWORD *)(v0 + 1120);
  v5 = *(_QWORD *)(v0 + 1112);
  v6 = *(_QWORD *)(v0 + 1104);
  sub_100CCA858();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CAB1D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CAB210, *(_QWORD *)(v0 + 1176), *(_QWORD *)(v0 + 1184));
}

uint64_t sub_100CAB210()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t inited;
  id v10;
  __n128 v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  _QWORD *v16;

  v1 = v0[134];
  v2 = v0[129];
  if (*(_QWORD *)(v2 + 16) <= *(_QWORD *)(v1 + 16) >> 3)
  {
    v16 = (_QWORD *)v0[134];
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRetain(v2);
    sub_100DB65BC(v2);
    swift_bridgeObjectRelease();
    v4 = v16;
  }
  else
  {
    swift_bridgeObjectRetain(v0[134]);
    swift_bridgeObjectRetain(v2);
    v4 = sub_100DB83E4(v3, v1);
    swift_bridgeObjectRelease();
  }
  v0[187] = v4;
  v5 = v4[2];
  if (v5)
  {
    v6 = v0[151];
    v7 = v0[135];
    v8 = (void *)static OS_os_log.crlBoardLibrary;
    inited = swift_initStackObject(v0[149], v0 + 83);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    *(_QWORD *)(inited + 56) = &type metadata for Int;
    *(_QWORD *)(inited + 64) = &protocol witness table for Int;
    *(_QWORD *)(inited + 32) = v5;
    v10 = v8;
    v12 = static os_log_type_t.default.getter(v11);
    sub_100A06EBC((uint64_t)v10, &_mh_execute_header, v12, "Successfully deleted %d boards", 30, 2, inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, v6);

    v0[188] = *(_QWORD *)(v7 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    v13 = sub_100CAB3B4;
  }
  else
  {
    swift_bridgeObjectRelease();
    v0[192] = *(_QWORD *)(v0[135] + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    v14 = v0[127];
    v0[193] = v14;
    swift_bridgeObjectRetain(v14);
    v13 = sub_100CAB64C;
  }
  return swift_task_switch(v13, 0, 0);
}

uint64_t sub_100CAB3B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 1512) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 1496);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 1520) = v2;
  *v2 = v0;
  v2[1] = sub_100CAB450;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000026, 0x800000010100AB00, sub_100CECDFC, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100CAB450()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1520);
  *(_QWORD *)(*v1 + 1528) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CAB54C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 1512));
    v4 = sub_100CAB4BC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CAB4BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CAB4F8, *(_QWORD *)(v0 + 1176), *(_QWORD *)(v0 + 1184));
}

uint64_t sub_100CAB4F8()
{
  _QWORD *v0;
  uint64_t v1;

  v0[192] = *(_QWORD *)(v0[135] + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  v1 = v0[127];
  v0[193] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_100CAB64C, 0, 0);
}

uint64_t sub_100CAB54C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[189];
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CAB5AC, v0[147], v0[148]);
}

uint64_t sub_100CAB5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 1168));
  v1 = *(_QWORD *)(v0 + 1152);
  v2 = *(_QWORD *)(v0 + 1144);
  v3 = *(_QWORD *)(v0 + 1136);
  v4 = *(_QWORD *)(v0 + 1120);
  v5 = *(_QWORD *)(v0 + 1112);
  v6 = *(_QWORD *)(v0 + 1104);
  sub_100CCA858();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CAB64C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 1552) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 1536);
  *(_BYTE *)(v1 + 32) = 1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 1560) = v2;
  *v2 = v0;
  v2[1] = sub_100CAB6EC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000034, 0x800000010100AB30, sub_100CECE04, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100CAB6EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1560);
  *(_QWORD *)(*v1 + 1568) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CAB8E4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 1552));
    v4 = sub_100CAB758;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CAB758()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CAB794, *(_QWORD *)(v0 + 1176), *(_QWORD *)(v0 + 1184));
}

uint64_t sub_100CAB794()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1040);
  *(_QWORD *)(v0 + 1576) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_100CAB7D4, 0, 0);
}

uint64_t sub_100CAB7D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[197];
  v2 = v0[192];
  v3 = swift_task_alloc(32);
  v0[198] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[199] = v4;
  *v4 = v0;
  v4[1] = sub_100CAB878;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD00000000000002ALL, 0x800000010100AB70, sub_100CECE10, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CAB878()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1592);
  *(_QWORD *)(*v1 + 1600) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CABDF4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 1584));
    v4 = sub_100CAB9E4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CAB8E4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[194];
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CAB944, v0[147], v0[148]);
}

uint64_t sub_100CAB944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 1168));
  v1 = *(_QWORD *)(v0 + 1152);
  v2 = *(_QWORD *)(v0 + 1144);
  v3 = *(_QWORD *)(v0 + 1136);
  v4 = *(_QWORD *)(v0 + 1120);
  v5 = *(_QWORD *)(v0 + 1112);
  v6 = *(_QWORD *)(v0 + 1104);
  sub_100CCA858();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CAB9E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CABA20, *(_QWORD *)(v0 + 1176), *(_QWORD *)(v0 + 1184));
}

uint64_t sub_100CABA20()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;

  v1 = *(_QWORD *)(v0 + 1072);
  swift_release(*(_QWORD *)(v0 + 1168));
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v37 = *(_QWORD *)(v0 + 1096);
    v39 = _swiftEmptyArrayStorage;
    v4 = *(_QWORD *)(v0 + 1072);
    v3 = (double *)&v39;
    sub_100600724(0, v2, 0);
    v5 = sub_100CE048C(v4);
    v6 = v4;
    v8 = v7;
    v10 = v9 & 1;
    v33 = v6;
    v35 = v6 + 56;
    v11 = type metadata accessor for CRLBoardIdentifier;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v6 + 32))
    {
      if (((*(_QWORD *)(v35 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
        goto LABEL_16;
      if (*(_DWORD *)(v6 + 36) != (_DWORD)v8)
        goto LABEL_17;
      v12 = *(_QWORD *)(v0 + 1152);
      v13 = *(_QWORD *)(v0 + 1144);
      v14 = *(_QWORD *)(v0 + 1104);
      v15 = *(_QWORD *)(v0 + 1088);
      sub_1004B8460(*(_QWORD *)(v6 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1128) + 72) * v5, v12, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84E0(v12, v13, type metadata accessor for CRLBoardIdentifier);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v14, v13, v15);
      sub_1004B84A4(v13, type metadata accessor for CRLBoardIdentifier);
      v3 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
      {
        sub_100600724(0, *((_QWORD *)v3 + 2) + 1, 1);
        v3 = v39;
      }
      v17 = *((_QWORD *)v3 + 2);
      v16 = *((_QWORD *)v3 + 3);
      if (v17 >= v16 >> 1)
      {
        sub_100600724(v16 > 1, v17 + 1, 1);
        v3 = v39;
      }
      v18 = *(_QWORD *)(v0 + 1104);
      v19 = *(_QWORD *)(v0 + 1088);
      v20 = *(_QWORD *)(v0 + 1072);
      *((_QWORD *)v3 + 2) = v17 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v17, v18, v19);
      v39 = v3;
      v21 = sub_1005C3B08(v5, v8, v10 & 1, v20);
      v5 = v21;
      v8 = v22;
      v10 = v23 & 1;
      --v2;
      v6 = v33;
      if (!v2)
      {
        sub_100503494(v21, v22, v23 & 1);
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t (*)(uint64_t))objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1013DDE48 != -1)
LABEL_18:
    swift_once(&qword_1013DDE48, sub_100CAC390);
  v24 = *(_QWORD *)(v0 + 1152);
  v25 = *(_QWORD *)(v0 + 1144);
  v26 = *(_QWORD *)(v0 + 1136);
  v34 = *(_QWORD *)(v0 + 1120);
  v36 = *(_QWORD *)(v0 + 1112);
  v38 = *(_QWORD *)(v0 + 1104);
  v27 = *(_QWORD *)(v0 + 1080);
  v28 = qword_1014812C8;
  v29 = sub_1004B804C(&qword_1013E49B0);
  inited = swift_initStackObject(v29, v0 + 128);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v0 + 1000) = 0xD000000000000019;
  *(_QWORD *)(v0 + 1008) = 0x800000010100ABA0;
  AnyHashable.init<A>(_:)(v0 + 1000, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for CRLDeletedBoardsModel;
  *(_QWORD *)(inited + 72) = v3;
  sub_1008D5828(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "postNotificationName:object:userInfo:", v28, v27, isa, swift_bridgeObjectRelease().n128_f64[0]);

  sub_100CCA858();
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CABDF4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[198];
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CABE54, v0[147], v0[148]);
}

uint64_t sub_100CABE54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 1168));
  v1 = *(_QWORD *)(v0 + 1152);
  v2 = *(_QWORD *)(v0 + 1144);
  v3 = *(_QWORD *)(v0 + 1136);
  v4 = *(_QWORD *)(v0 + 1120);
  v5 = *(_QWORD *)(v0 + 1112);
  v6 = *(_QWORD *)(v0 + 1104);
  sub_100CCA858();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100CABEF4(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  double result;
  _BYTE v24[24];

  v3 = type metadata accessor for CRLBoardIdentifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v24, 0, 0);
  v10 = (id)static OS_os_log.realTimeSync;
  v12 = static os_log_type_t.default.getter(v11);
  sub_100A06EBC((uint64_t)v10, &_mh_execute_header, v12, "activateOpportunisticRealTimeCollaboration(boardIdentifier:) attempting to start opportunistic real-time collaboration.", 119, 2, (uint64_t)_swiftEmptyArrayStorage);

  v13 = (uint64_t)sub_100CAEB70(a1);
  if ((unint64_t)v13 >> 62)
  {
    if (v13 >= 0)
      v13 &= 0xFFFFFFFFFFFFFF8uLL;
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v14)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"activateOpportunisticRealTimeCollaboration(boardIdentifier:)", 60, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 1884, "Collaboration can only be started on a board that is already open", 65, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"activateOpportunisticRealTimeCollaboration(boardIdentifier:)", 60, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 1884, (uint64_t)"Collaboration can only be started on a board that is already open", 65, 2u);
  }
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
  sub_1004B8460(a1, (uint64_t)&v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], type metadata accessor for CRLBoardIdentifier);
  type metadata accessor for MainActor(0);
  v16 = v1;
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v4 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = (_QWORD *)swift_allocObject(&unk_10129F830, v19 + v5, v18 | 7);
  v20[2] = v17;
  v20[3] = &protocol witness table for MainActor;
  v20[4] = v16;
  sub_1004B84E0((uint64_t)v6, (uint64_t)v20 + v19, type metadata accessor for CRLBoardIdentifier);
  v21 = sub_100618920((uint64_t)v9, (uint64_t)&unk_10140E058, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_100CAC1BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100CAC228, v4, v5);
}

uint64_t sub_100CAC228()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CAC250, 0, 0);
}

uint64_t sub_100CAC250()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[7];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[8] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_100CA6E24;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD00000000000001ALL, 0x800000010100A9A0, sub_100CECD98, v3, (char *)&type metadata for () + 8);
}

NSString sub_100CAC2F4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1014812B0 = (uint64_t)result;
  return result;
}

NSString sub_100CAC328()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1014812B8 = (uint64_t)result;
  return result;
}

NSString sub_100CAC35C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1014812C0 = (uint64_t)result;
  return result;
}

NSString sub_100CAC390()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1014812C8 = (uint64_t)result;
  return result;
}

char *sub_100CAC3C4(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char *v25;
  id v26;
  char *v27;
  id v28;
  char *v29;
  id v30;
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  objc_class *v50;
  char *v51;
  id v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  Class v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  double *v61;
  char *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  objc_class *ObjectType;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  char *v88;
  uint64_t v89;
  Class v90;
  _BYTE *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _QWORD v98[5];
  char v99[24];
  objc_super v100;
  objc_super v101;
  char v102[24];
  objc_super v103;
  objc_super v104;
  objc_super v105;
  objc_super v106;
  objc_super v107;
  uint64_t v108;

  ObjectType = (objc_class *)swift_getObjectType(v3);
  v7 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v7);
  v92 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v81 - v10;
  v12 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata;
  v13 = v3;
  *(_QWORD *)&v3[v12] = sub_1008D6494((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_entityStore] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeFolderBoardCount] = 0;
  v14 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController;
  *(_QWORD *)&v13[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLSharedHighlightController()), "init");
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_cloudKitObserver] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_cloudKitRecordObserver] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_userDataDeletionRequestObserver] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_databaseSyncObserver] = 0;
  v15 = &v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListener];
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_QWORD *)v15 + 4) = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListenerSubscriptionSet] = &_swiftEmptySetSingleton;
  v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_isNetworkReachable] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pauseSnapshotUpdateCount] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pendingUpdateOptions] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pendingChangedBoards] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_snapshotUpdateInterval] = 0x4000000000000000;
  v16 = &v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_realTimeCollaborationDelegate];
  *((_QWORD *)v16 + 1) = 0;
  swift_unknownObjectWeakInit(v16);
  v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_didStartUpdating] = 0;
  v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_didCallStartUpdating] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_snapshot] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_maxRecentlyDeleted] = -1;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_maxRecents] = 30;
  v17 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos;
  *(_QWORD *)&v13[v17] = sub_1008D6940((uint64_t)_swiftEmptyArrayStorage);
  v18 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_shareErrorObservers;
  *(_QWORD *)&v13[v18] = objc_msgSend((id)objc_opt_self(NSHashTable), "weakObjectsHashTable");
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store] = a1;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardShareController] = a2;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_syncPriorityProvider] = a3;
  v19 = type metadata accessor for CRLOpportunisticGroupSessionManager(0);
  swift_allocObject(v19, 96, 7);
  v84 = a1;
  v85 = a2;
  swift_retain(a2);
  v86 = a3;
  swift_retain(a3);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_opportunisticGroupSessionManager] = sub_1009930BC();
  *v11 = 0;
  swift_storeEnumTagMultiPayload(v11, v7, 0);
  v20 = (objc_class *)type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  v21 = (char *)objc_allocWithZone(v20);
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
  sub_1004B8460((uint64_t)v11, (uint64_t)&v21[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
  v107.receiver = v21;
  v107.super_class = v20;
  v87 = (uint64_t (*)(uint64_t))objc_msgSendSuper2(&v107, "init");
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Item);
  v97 = (_BYTE *)sub_1004B804C((uint64_t *)&unk_1013E4180);
  v22 = swift_allocObject(v97, 64, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100EF7310;
  v23 = sub_1004B804C(&qword_1013E1790);
  v24 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v11, 1, 5, v23);
  swift_storeEnumTagMultiPayload(v11, v7, 1);
  v25 = (char *)objc_allocWithZone(v20);
  *(_QWORD *)&v25[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
  sub_1004B8460((uint64_t)v11, (uint64_t)&v25[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
  v106.receiver = v25;
  v106.super_class = v20;
  v26 = objc_msgSendSuper2(&v106, "init");
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Item);
  *(_QWORD *)(v22 + 32) = v26;
  v24(v11, 2, 5, v23);
  swift_storeEnumTagMultiPayload(v11, v7, 1);
  v27 = (char *)objc_allocWithZone(v20);
  *(_QWORD *)&v27[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
  sub_1004B8460((uint64_t)v11, (uint64_t)&v27[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
  v105.receiver = v27;
  v105.super_class = v20;
  v28 = objc_msgSendSuper2(&v105, "init");
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Item);
  *(_QWORD *)(v22 + 40) = v28;
  v24(v11, 4, 5, v23);
  swift_storeEnumTagMultiPayload(v11, v7, 1);
  v29 = (char *)objc_allocWithZone(v20);
  *(_QWORD *)&v29[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
  sub_1004B8460((uint64_t)v11, (uint64_t)&v29[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
  v104.receiver = v29;
  v104.super_class = v20;
  v30 = objc_msgSendSuper2(&v104, "init");
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Item);
  *(_QWORD *)(v22 + 48) = v30;
  v24(v11, 3, 5, v23);
  swift_storeEnumTagMultiPayload(v11, v7, 1);
  v31 = (char *)objc_allocWithZone(v20);
  *(_QWORD *)&v31[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
  sub_1004B8460((uint64_t)v11, (uint64_t)&v31[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
  v103.receiver = v31;
  v103.super_class = v20;
  v32 = objc_msgSendSuper2(&v103, "init");
  v91 = v11;
  v33 = sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Item);
  *(_QWORD *)(v22 + 56) = v32;
  v34 = v87;
  v98[0] = v22;
  specialized Array._endMutation()(v33);
  v35 = v98[0];
  v90 = v20;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v34, "setChildren:", isa, swift_bridgeObjectRelease(v35).n128_f64[0]);

  v37 = swift_allocObject(v97, 40, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100EEF400;
  *(_QWORD *)(v37 + 32) = v34;
  v98[0] = v37;
  specialized Array._endMutation()(v37);
  v38 = v98[0];
  v82 = v13;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot] = v98[0];
  v39 = swift_allocObject(&unk_10129F6B0, 17, 7);
  v93 = v39;
  *(_BYTE *)(v39 + 16) = 0;
  v97 = (_BYTE *)(v39 + 16);
  v98[0] = _swiftEmptyArrayStorage;
  v40 = &v108;
  v96 = v38;
  if ((unint64_t)v38 >> 62)
    goto LABEL_27;
  v41 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v38, 2);
  v42 = v34;
  while (v41)
  {
    v95 = v38 & 0xC000000000000001;
    swift_beginAccess(v97, v102, 0, 0);
    v43 = (uint64_t)v92;
    v88 = v92 + 8;
    v34 = type metadata accessor for CRLBoardLibraryViewModel.Item;
    v44 = 4;
    v89 = v7;
    v94 = v41;
    while (1)
    {
      v45 = v95
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44 - 4, v38)
          : *(id *)(v38 + 8 * v44);
      v38 = (uint64_t)v45;
      v46 = v44 - 3;
      if (__OFADD__(v44 - 4, 1))
        break;
      if (*v97 == 1)
      {

      }
      else
      {
        v47 = (uint64_t)v45 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
        sub_1004B8460((uint64_t)v45 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v43, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (swift_getEnumCaseMultiPayload(v43, v7) == 2)
        {
          v48 = sub_1004B804C((uint64_t *)&unk_1013EA630);
          swift_bridgeObjectRelease(*(_QWORD *)&v88[*(int *)(v48 + 48)]);
          sub_1004B84A4(v43, type metadata accessor for CRLBoardIdentifier);

        }
        else
        {
          sub_1004B84A4(v43, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v49 = (uint64_t)v91;
          sub_1004B8460(v47, (uint64_t)v91, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v50 = v90;
          v51 = (char *)objc_allocWithZone(v90);
          *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
          sub_1004B8460(v49, (uint64_t)&v51[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
          v101.receiver = v51;
          v101.super_class = v50;
          v52 = objc_msgSendSuper2(&v101, "init");
          sub_1004B84A4(v49, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v53 = objc_msgSend((id)v38, "children");
          v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, v50);

          v55 = sub_100CE1978(v54, v93, (uint64_t (*)(_QWORD, _QWORD))sub_1007C36F0, 0);
          swift_bridgeObjectRelease(v54);
          v56 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v52, "setChildren:", v56, swift_bridgeObjectRelease(v55).n128_f64[0]);

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v57);
          v59 = *(_QWORD *)((v98[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          v58 = *(_QWORD *)((v98[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v59 >= v58 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
          v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v52);
          specialized Array._endMutation()(v60);
          v7 = v89;
          v43 = (uint64_t)v92;
        }
      }
      ++v44;
      v38 = v96;
      if (v46 == v94)
      {
        swift_bridgeObjectRelease(v96);
        v61 = (double *)v98[0];
        v34 = v87;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_27:
    v77 = *(v40 - 32);
    if (v38 < 0)
      v78 = v77;
    else
      v78 = v38 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v96, 2);
    v79 = v34;
    v80 = v78;
    v38 = v96;
    v41 = _CocoaArrayWrapper.endIndex.getter(v80);
  }
  swift_bridgeObjectRelease(v38);
  v61 = _swiftEmptyArrayStorage;
LABEL_19:
  swift_bridgeObjectRelease(v38);
  swift_release(v93);
  v62 = v82;
  *(_QWORD *)&v82[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeFolderHierarchySnapshot] = v61;

  v100.receiver = v62;
  v100.super_class = ObjectType;
  v63 = objc_msgSendSuper2(&v100, "init");
  v64 = type metadata accessor for CRLBoardEntityStore();
  v65 = swift_allocObject(v64, 128, 15);
  v66 = (char *)v63;
  swift_defaultActor_initialize(v65, v67);
  swift_unknownObjectWeakInit(v65 + 112);
  *(_QWORD *)(v65 + 120) = sub_1008D6924((uint64_t)_swiftEmptyArrayStorage);
  swift_unknownObjectWeakAssign(v65 + 112, v66);
  v68 = *(_QWORD *)&v66[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_entityStore];
  *(_QWORD *)&v66[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_entityStore] = v65;
  swift_release(v68);
  sub_100CACFEC();
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v99, 0, 0);
  v69 = (uint64_t)(id)static OS_os_log.crlBoardLibrary;
  v71 = static os_log_type_t.default.getter(v70);
  sub_100A06EBC(v69, &_mh_execute_header, v71, "CRLBoardLibrary: Initializing and registering synced app model.", 63, 2, (uint64_t)_swiftEmptyArrayStorage);

  v72 = *(_QWORD *)&v66[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_opportunisticGroupSessionManager];
  *(_QWORD *)(v72 + 32) = &off_10129F460;
  swift_unknownObjectWeakAssign(v72 + 24, v66);
  v98[3] = &type metadata for CRLFeatureFlags;
  v98[4] = sub_1004DB6DC();
  LOBYTE(v98[0]) = 11;
  LOBYTE(v69) = isFeatureEnabled(_:)(v98);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v98);
  if ((v69 & 1) != 0)
  {
    if (qword_1013DD7C8 != -1)
      swift_once(&qword_1013DD7C8, sub_100A03AC0);
    swift_beginAccess(&static OS_os_log.crlFollow, v98, 0, 0);
    v73 = (id)static OS_os_log.crlFollow;
    v75 = static os_log_type_t.default.getter(v74);
    sub_100A06EBC((uint64_t)v73, &_mh_execute_header, v75, "Follow feature flag is enabled.", 31, 2, (uint64_t)_swiftEmptyArrayStorage);

  }
  swift_release(v85);
  swift_release(v86);
  return v66;
}

void sub_100CACFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v1 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v1);
  v73 = (uint64_t)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v69 = *(_QWORD *)(v3 - 8);
  v70 = v3;
  __chkstk_darwin(v3);
  v65 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v8 = __chkstk_darwin(v74);
  v10 = (uint64_t (*)(uint64_t))((char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (uint64_t (*)(uint64_t))((char *)&v59 - v11);
  v13 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v14 = __chkstk_darwin(v13);
  v63 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v62 = (uint64_t)&v59 - v16;
  v71 = v0;
  v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  swift_bridgeObjectRetain(v17);
  v18 = (char **)sub_1008D665C((uint64_t)_swiftEmptyArrayStorage);
  v76 = v17;
  v60 = v18;
  if ((unint64_t)v17 >> 62)
    goto LABEL_65;
  v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  if (v19)
  {
    do
    {
      v20 = v17;
      v17 = 0;
      v72 = v10;
      v67 = v7;
      v68 = (char *)v10 + 8;
      v64 = (unint64_t)v60;
      v59 = v20;
      v61 = v12;
      while (1)
      {
        v7 = (char *)((unint64_t)v20 >> 62);
        if (!((unint64_t)v20 >> 62))
          break;
        if (v20 < 0)
          v23 = v20;
        else
          v23 = v20 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v20);
        v12 = (uint64_t (*)(uint64_t))_CocoaArrayWrapper.endIndex.getter(v23);
        swift_bridgeObjectRelease(v20);
        if (!v12)
        {
          __break(1u);
          return;
        }
        swift_bridgeObjectRetain(v20);
        v24 = _CocoaArrayWrapper.endIndex.getter(v23);
        swift_bridgeObjectRelease(v20);
        if (!v24)
          goto LABEL_61;
LABEL_6:
        if ((v20 & 0xC000000000000001) != 0)
        {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
          if (!v7)
            goto LABEL_9;
        }
        else
        {
          if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_62;
          v21 = *(id *)(v20 + 32);
          if (!v7)
          {
LABEL_9:
            v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_21;
          }
        }
        if (v20 < 0)
          v25 = v20;
        else
          v25 = v20 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v20);
        v22 = _CocoaArrayWrapper.endIndex.getter(v25);
        swift_bridgeObjectRelease(v20);
LABEL_21:
        v7 = v67;
        v18 = &selRef_callStackDescriptionWithAction_callStackSymbols_index_;
        if (!v22)
          goto LABEL_63;
        sub_100CFE428(0, 1);
        v26 = objc_msgSend(v21, "children");
        v27 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
        v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

        v29 = v28;
        v12 = v61;
        sub_100CFB824(0, 0, v29);
        sub_1004B8460((uint64_t)v21 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v12, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (swift_getEnumCaseMultiPayload(v12, v74) == 1)
        {
          v30 = (uint64_t)v12;
          v31 = v62;
          v12 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
          sub_1004B84E0(v30, v62, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          sub_1004B8460(v31, v63, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v32 = objc_msgSend(v21, "children");
          v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v27);

          v75 = (unint64_t)_swiftEmptyArrayStorage;
          if ((unint64_t)v33 >> 62)
          {
            if (v33 < 0)
              v48 = v33;
            else
              v48 = v33 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v33);
            v34 = _CocoaArrayWrapper.endIndex.getter(v48);
            swift_bridgeObjectRelease(v33);
            v35 = (uint64_t)v72;
            if (!v34)
              goto LABEL_46;
LABEL_25:
            if (v34 < 1)
              goto LABEL_64;
            for (i = 0; i != v34; ++i)
            {
              if ((v33 & 0xC000000000000001) != 0)
                v37 = (char **)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v33);
              else
                v37 = (char **)*(id *)(v33 + 8 * i + 32);
              v18 = v37;
              v10 = type metadata accessor for CRLBoardLibraryViewModel.Item;
              sub_1004B8460((uint64_t)v37 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v35, type metadata accessor for CRLBoardLibraryViewModel.Item);
              if (swift_getEnumCaseMultiPayload(v35, v74) == 2)
              {
                v38 = sub_1004B804C((uint64_t *)&unk_1013EA630);
                swift_bridgeObjectRelease(*(_QWORD *)&v68[*(int *)(v38 + 48)]);
                v10 = type metadata accessor for CRLBoardIdentifier;
                sub_1004B84E0(v35, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
                sub_100C9F8F8((uint64_t)v7, v73);
                if (v17)
                {
                  swift_errorRelease(v17);
                  v39 = v73;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v73, 1, 1, v70);
                  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
                  sub_1004CB800(v39, &qword_1013E4690);

                  v17 = 0;
                  v35 = (uint64_t)v72;
                }
                else
                {
                  v66 = 0;
                  v40 = v73;
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v73, 0, 1, v70);
                  v41 = v65;
                  sub_1004B84E0(v40, (uint64_t)v65, type metadata accessor for CRLBoardViewModelMetadata);
                  LOBYTE(v40) = *v41;
                  v42 = (uint64_t)v41;
                  v7 = v67;
                  sub_1004B84A4(v42, type metadata accessor for CRLBoardViewModelMetadata);
                  v43 = sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
                  if ((v40 & 1) != 0)
                  {

                  }
                  else
                  {
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v43);
                    v10 = *(uint64_t (**)(uint64_t))(v75 + 16);
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
                    v7 = v67;
                    v44 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v18);
                    specialized ContiguousArray._endMutation()(v44);
                  }
                  v35 = (uint64_t)v72;
                  v17 = v66;
                }
              }
              else
              {
                sub_1004B84A4(v35, type metadata accessor for CRLBoardLibraryViewModel.Item);

              }
            }
            swift_bridgeObjectRelease(v33);
            v47 = v75;
            if ((v75 & 0x8000000000000000) != 0)
              goto LABEL_58;
LABEL_47:
            if ((v47 & 0x4000000000000000) != 0)
              goto LABEL_58;
            v12 = *(uint64_t (**)(uint64_t))(v47 + 16);
          }
          else
          {
            v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
            v35 = (uint64_t)v72;
            if (v34)
              goto LABEL_25;
LABEL_46:
            swift_bridgeObjectRelease(v33);
            v47 = (unint64_t)_swiftEmptyArrayStorage;
            if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0)
              goto LABEL_47;
LABEL_58:
            swift_bridgeObjectRetain(v47);
            v12 = (uint64_t (*)(uint64_t))_CocoaArrayWrapper.endIndex.getter(v54);
            swift_release(v47);
          }
          swift_release(v47);
          v49 = (_QWORD *)v64;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v64);
          v75 = (unint64_t)v49;
          v51 = v63;
          sub_100827718((uint64_t)v12, v63, isUniquelyReferenced_nonNull_native);
          v64 = v75;
          swift_bridgeObjectRelease(0x8000000000000000);
          sub_1004B84A4(v51, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v45 = v62;
          v46 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
          goto LABEL_50;
        }
        v45 = (uint64_t)v12;
        v46 = type metadata accessor for CRLBoardLibraryViewModel.Item;
LABEL_50:
        sub_1004B84A4(v45, v46);

        v20 = v76;
        if ((unint64_t)v76 >> 62)
        {
          if (v76 < 0)
            v52 = v76;
          else
            v52 = v76 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v76);
          v53 = _CocoaArrayWrapper.endIndex.getter(v52);
          swift_bridgeObjectRelease(v20);
          if (!v53)
          {
LABEL_59:
            swift_bridgeObjectRelease(v20);
            v17 = v59;
            v55 = v60;
            v56 = v64;
            goto LABEL_70;
          }
        }
        else if (!*(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_59;
        }
      }
      if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_6;
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      if (v17 < 0)
        v57 = v17;
      else
        v57 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
    }
    while (_CocoaArrayWrapper.endIndex.getter(v57));
  }
  swift_bridgeObjectRelease(v17);
  v55 = v60;
  v56 = (unint64_t)v60;
LABEL_70:
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v17);
  v58 = *(_QWORD *)(v71 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeFolderBoardCount);
  *(_QWORD *)(v71 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeFolderBoardCount) = v56;
  swift_bridgeObjectRelease(v58);
}

id sub_100CAD788()
{
  void *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  sub_100CAD7CC();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_100CAD7CC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v3 = v1;
  if (qword_1013DDAA0 != -1)
  {
    swift_once(&qword_1013DDAA0, sub_100A7424C);
    v1 = v3;
  }
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  objc_msgSend(v1, "removeObserver:name:object:", v0, qword_101480A48, v2);
  if (qword_1013DDAA8 != -1)
    swift_once(&qword_1013DDAA8, sub_100A74280);
  objc_msgSend(v3, "removeObserver:name:object:", v0, qword_101480A50, v2);
  if (qword_1013DDAB0 != -1)
    swift_once(&qword_1013DDAB0, sub_100A742B4);
  objc_msgSend(v3, "removeObserver:name:object:", v0, qword_101480A58, v2);
  if (qword_1013DDAB8 != -1)
    swift_once(&qword_1013DDAB8, sub_100A742E8);
  objc_msgSend(v3, "removeObserver:name:object:", v0, qword_101480A60, v2);
  if (qword_1013DDAC0 != -1)
    swift_once(&qword_1013DDAC0, sub_100A7431C);
  objc_msgSend(v3, "removeObserver:name:object:", v0, qword_101480A68, v2);

}

uint64_t sub_100CADB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE v10[32];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD v15[5];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListener;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListener, v14, 0, 0);
  sub_1004CB7BC(v2, (uint64_t)&v11, &qword_1013E6100);
  if (!*((_QWORD *)&v12 + 1))
    return sub_1004CB800((uint64_t)&v11, &qword_1013E6100);
  sub_1004DB728(&v11, (uint64_t)v15);
  v3 = sub_1004BB5A4(v15, v15[3]);
  OS_dispatch_queue.sync<A>(execute:)(sub_1005D2C5C, *v3, (char *)&type metadata for () + 8);
  v4 = (_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListenerSubscriptionSet);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListenerSubscriptionSet, v10, 1, 0);
  v5 = *v4;
  swift_bridgeObjectRetain(*v4);
  sub_100C19B9C(v6);
  swift_bridgeObjectRelease(v5);
  v7 = *v4;
  *v4 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v7);
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  swift_beginAccess(v2, v9, 33, 0);
  sub_100582338((uint64_t)&v11, v2, &qword_1013E6100);
  swift_endAccess(v9);
  return _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v15);
}

uint64_t sub_100CADD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)(v7 + 386) = a6;
  *(_BYTE *)(v7 + 385) = a5;
  *(_QWORD *)(v7 + 192) = a4;
  *(_QWORD *)(v7 + 200) = a7;
  v8 = sub_1004B804C(&qword_1013E4690);
  *(_QWORD *)(v7 + 208) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardViewModelMetadata(0);
  *(_QWORD *)(v7 + 216) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 224) = v10;
  *(_QWORD *)(v7 + 232) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLBoardCRDTData(0);
  *(_QWORD *)(v7 + 240) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  *(_QWORD *)(v7 + 256) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v7 + 264) = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 272) = swift_task_alloc(v15);
  *(_QWORD *)(v7 + 280) = swift_task_alloc(v15);
  *(_QWORD *)(v7 + 288) = swift_task_alloc(v15);
  v16 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v7 + 296) = static MainActor.shared.getter(v16);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
  *(_QWORD *)(v7 + 304) = v17;
  *(_QWORD *)(v7 + 312) = v18;
  return swift_task_switch(sub_100CADE64, v17, v18);
}

uint64_t sub_100CADE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  id v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  id v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform8CRLBoard_data);
  v7 = v6 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v6 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 120, 0, 0);
  sub_1004B8460(v7, v2, type metadata accessor for CRLBoardCRDTData);
  swift_retain(v6);
  v8 = sub_1004B804C(&qword_1013E1A80);
  *(_QWORD *)(v0 + 320) = v8;
  CRRegister.wrappedValue.getter(v8);
  sub_1004B84A4(v2, type metadata accessor for CRLBoardCRDTData);
  swift_release(v6);
  v9 = (uint64_t *)(*(_QWORD *)(v4 + v5) + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  sub_10067AFD0(v3, v10, v11, v1);
  v12 = *(void **)(*(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState) + 16);
  *(_QWORD *)(v0 + 328) = v12;
  if (v12)
  {
    v13 = objc_msgSend(v12, "currentUserParticipant");
    v14 = *(unsigned __int8 *)(v0 + 385);
    if (v13)
    {
      v15 = v13;
      v16 = objc_msgSend(v13, "role");

      v17 = 0;
      if (v16 == (id)1)
        v18 = 1;
      else
        v18 = v14;
      if (!v14 || v16 == (id)1)
        goto LABEL_27;
    }
    else if (!*(_BYTE *)(v0 + 385))
    {
      v17 = 0;
      v18 = 0;
LABEL_27:
      v32 = v0 + 16;
      *(_BYTE *)(v0 + 388) = v18;
      *(_BYTE *)(v0 + 387) = v17;
      v33 = *(void **)(v0 + 192);
      *(_QWORD *)(v0 + 56) = v0 + 384;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_100CAE34C;
      v34 = swift_continuation_init(v0 + 16, 0);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v35 = (_QWORD *)(v0 + 80);
      v35[1] = 0x40000000;
      v35[2] = sub_10091D2A0;
      v35[3] = &unk_10129F790;
      v35[4] = v34;
      objc_msgSend(v33, "hasUnsyncedChangesWithCompletionHandler:", v35);
      return swift_continuation_await(v32);
    }
    v31 = *(unsigned __int8 *)(v0 + 386);
    v18 = 0;
    v17 = v31 == 2 || (v31 & 1) == 0;
    goto LABEL_27;
  }
  v19 = (uint64_t)sub_100CAEB70(*(_QWORD *)(v0 + 288));
  *(_QWORD *)(v0 + 336) = v19;
  if ((unint64_t)v19 >> 62)
    goto LABEL_30;
  v19 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (*(_QWORD *)(v0 + 344) = v19; v19; *(_QWORD *)(v0 + 344) = v19)
  {
    v20 = 0;
    while (1)
    {
      v22 = *(_QWORD *)(v0 + 336);
      if ((v22 & 0xC000000000000001) != 0)
      {
        v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v22);
      }
      else
      {
        if (v20 >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_29;
        v19 = (uint64_t)*(id *)(v22 + 8 * v20 + 32);
      }
      v23 = (void *)v19;
      v24 = v20 + 1;
      *(_QWORD *)(v0 + 352) = v19;
      *(_QWORD *)(v0 + 360) = v20 + 1;
      if (__OFADD__(v20, 1))
        break;
      if (qword_1013DD748 != -1)
        swift_once(&qword_1013DD748, sub_100A023E8);
      swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 144, 0, 0);
      v25 = (id)static OS_os_log.crlBoardLibrary;
      v27 = static os_log_type_t.default.getter(v26);
      sub_100A06EBC((uint64_t)v25, &_mh_execute_header, v27, "Close view controller because the board has been deleted or removed.", 68, 2, (uint64_t)_swiftEmptyArrayStorage);

      sub_100C9F8F8(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 208));
      *(_QWORD *)(v0 + 368) = 0;
      v28 = *(_QWORD *)(v0 + 232);
      v30 = *(_QWORD *)(v0 + 208);
      v29 = *(_QWORD *)(v0 + 216);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 56))(v30, 0, 1, v29);
      sub_1004B84E0(v30, v28, type metadata accessor for CRLBoardViewModelMetadata);
      LODWORD(v29) = *(unsigned __int8 *)(v28 + *(int *)(v29 + 40));
      sub_1004B84A4(v28, type metadata accessor for CRLBoardViewModelMetadata);
      if ((_DWORD)v29 == 1)
      {
        sub_100C1E6AC();
        v36 = (_QWORD *)swift_task_alloc(dword_10140B374);
        *(_QWORD *)(v0 + 376) = v36;
        *v36 = v0;
        v36[1] = sub_100CAE864;
        return sub_100C29764();
      }
      v21 = *(_QWORD *)(v0 + 344);
      sub_100C2CAE4(*(_QWORD *)(v0 + 288));

      ++v20;
      if (v24 == v21)
        goto LABEL_33;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    if (v19 >= 0)
      v19 &= 0xFFFFFFFFFFFFFF8uLL;
    v19 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
LABEL_33:
  v38 = *(_QWORD *)(v0 + 288);
  v40 = *(_QWORD *)(v0 + 272);
  v39 = *(_QWORD *)(v0 + 280);
  v42 = *(_QWORD *)(v0 + 240);
  v41 = *(_QWORD *)(v0 + 248);
  v43 = *(_QWORD *)(v0 + 232);
  v44 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 296));
  swift_bridgeObjectRelease();
  sub_1004B84A4(v38, type metadata accessor for CRLBoardIdentifier);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CAE34C()
{
  uint64_t v0;

  return swift_task_switch(sub_100CAE390, *(_QWORD *)(*(_QWORD *)v0 + 304), *(_QWORD *)(*(_QWORD *)v0 + 312));
}

uint64_t sub_100CAE390()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  BOOL v25;
  id v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if ((*(_BYTE *)(v0 + 384) & 1) != 0)
    v1 = *(_BYTE *)(v0 + 388) ^ 1 | *(_BYTE *)(v0 + 387);
  else
    v1 = *(_BYTE *)(v0 + 387);
  v2 = (uint64_t)sub_100CAEB70(*(_QWORD *)(v0 + 288));
  *(_QWORD *)(v0 + 336) = v2;
  if ((unint64_t)v2 >> 62)
    goto LABEL_22;
  v2 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (*(_QWORD *)(v0 + 344) = v2; v2; *(_QWORD *)(v0 + 344) = v2)
  {
    v3 = 0;
    v4 = v0 + 144;
    v5 = &qword_1013DD000;
    while (1)
    {
      v23 = *(_QWORD *)(v0 + 336);
      if ((v23 & 0xC000000000000001) != 0)
      {
        v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v23);
      }
      else
      {
        if (v3 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_21;
        v2 = (uint64_t)*(id *)(v23 + 8 * v3 + 32);
      }
      v24 = (char *)v2;
      v25 = __OFADD__(v3++, 1);
      *(_QWORD *)(v0 + 352) = v2;
      *(_QWORD *)(v0 + 360) = v3;
      if (v25)
        break;
      if (v5[233] != -1)
        swift_once(&qword_1013DD748, sub_100A023E8);
      swift_beginAccess(&static OS_os_log.crlBoardLibrary, v4, 0, 0);
      v26 = (id)static OS_os_log.crlBoardLibrary;
      v28 = static os_log_type_t.default.getter(v27);
      sub_100A06EBC((uint64_t)v26, &_mh_execute_header, v28, "Close view controller because the board has been deleted or removed.", 68, 2, (uint64_t)_swiftEmptyArrayStorage);

      if ((v1 & 1) != 0)
      {
        v6 = *(_QWORD *)(v0 + 320);
        v42 = *(_QWORD *)(v0 + 280);
        v43 = *(_QWORD *)(v0 + 272);
        v7 = *(_QWORD *)(v0 + 248);
        v44 = *(_QWORD *)(v0 + 256);
        v45 = *(_QWORD *)(v0 + 264);
        v8 = *(char **)(*(_QWORD *)&v24[OBJC_IVAR____TtC8Freeform25CRLiOSBoardViewController_editingCoordinator]
                      + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
        v9 = *(_QWORD *)(v0 + 240);
        v10 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
        v11 = *(_QWORD *)&v8[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
        v12 = v11 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
        swift_beginAccess(v11 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 168, 0, 0);
        sub_1004B8460(v12, v9, type metadata accessor for CRLBoardCRDTData);
        v13 = v8;
        swift_retain(v11);
        CRRegister.wrappedValue.getter(v6);
        sub_1004B84A4(v9, type metadata accessor for CRLBoardCRDTData);
        swift_release(v11);
        v14 = *(_QWORD *)&v8[v10];
        v4 = v0 + 144;
        v15 = (uint64_t *)(v14 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
        v16 = *v15;
        v17 = v15[1];
        swift_bridgeObjectRetain(v17);
        v18 = v17;
        v5 = &qword_1013DD000;
        sub_10067AFD0(v7, v16, v18, v42);

        sub_1004B8460(v42, v43, type metadata accessor for CRLBoardIdentifier);
        v19 = *(unsigned __int8 *)(v44 + 80);
        v20 = (v19 + 24) & ~v19;
        v21 = swift_allocObject(&unk_10129F778, v20 + v45, v19 | 7);
        *(_QWORD *)(v21 + 16) = v24;
        sub_1004B84E0(v43, v21 + v20, type metadata accessor for CRLBoardIdentifier);
        v22 = v24;
        sub_100C2CFF4((uint64_t)sub_100CEBE54, v21);
        swift_release(v21);
        sub_1004B84A4(v42, type metadata accessor for CRLBoardIdentifier);

        v1 = 0;
        v3 = *(_QWORD *)(v0 + 360);
        if (v3 == *(_QWORD *)(v0 + 344))
          goto LABEL_25;
      }
      else
      {
        sub_100C9F8F8(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 208));
        *(_QWORD *)(v0 + 368) = 0;
        v29 = *(_QWORD *)(v0 + 232);
        v31 = *(_QWORD *)(v0 + 208);
        v30 = *(_QWORD *)(v0 + 216);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 56))(v31, 0, 1, v30);
        sub_1004B84E0(v31, v29, type metadata accessor for CRLBoardViewModelMetadata);
        LODWORD(v30) = *(unsigned __int8 *)(v29 + *(int *)(v30 + 40));
        sub_1004B84A4(v29, type metadata accessor for CRLBoardViewModelMetadata);
        if ((_DWORD)v30 == 1)
        {
          sub_100C1E6AC();
          v33 = (_QWORD *)swift_task_alloc(dword_10140B374);
          *(_QWORD *)(v0 + 376) = v33;
          *v33 = v0;
          v33[1] = sub_100CAE864;
          return sub_100C29764();
        }
        v32 = *(_QWORD *)(v0 + 344);
        sub_100C2CAE4(*(_QWORD *)(v0 + 288));

        v1 = 0;
        if (v3 == v32)
          goto LABEL_25;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    if (v2 >= 0)
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = _CocoaArrayWrapper.endIndex.getter(v2);
  }
LABEL_25:
  v35 = *(_QWORD *)(v0 + 288);
  v37 = *(_QWORD *)(v0 + 272);
  v36 = *(_QWORD *)(v0 + 280);
  v39 = *(_QWORD *)(v0 + 240);
  v38 = *(_QWORD *)(v0 + 248);
  v40 = *(_QWORD *)(v0 + 232);
  v41 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 296));
  swift_bridgeObjectRelease();
  sub_1004B84A4(v35, type metadata accessor for CRLBoardIdentifier);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CAE864()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 376));
  return swift_task_switch(sub_100CAE8B0, *(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 312));
}

void sub_100CAE8B0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 360);
  if (v1 == *(_QWORD *)(v0 + 344))
  {
LABEL_2:
    v2 = *(_QWORD *)(v0 + 288);
    v4 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 280);
    v6 = *(_QWORD *)(v0 + 240);
    v5 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 208);
    swift_release(*(_QWORD *)(v0 + 296));
    swift_bridgeObjectRelease();
    sub_1004B84A4(v2, type metadata accessor for CRLBoardIdentifier);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    (*(void (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 368);
    while (1)
    {
      v14 = *(_QWORD *)(v0 + 336);
      if ((v14 & 0xC000000000000001) != 0)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v14);
      }
      else
      {
        if (v1 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_17;
        v15 = *(id *)(v14 + 8 * v1 + 32);
      }
      v16 = v15;
      v17 = v1 + 1;
      *(_QWORD *)(v0 + 352) = v15;
      *(_QWORD *)(v0 + 360) = v1 + 1;
      if (__OFADD__(v1, 1))
        break;
      if (qword_1013DD748 != -1)
        swift_once(&qword_1013DD748, sub_100A023E8);
      swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 144, 0, 0);
      v18 = (id)static OS_os_log.crlBoardLibrary;
      v20 = static os_log_type_t.default.getter(v19);
      sub_100A06EBC((uint64_t)v18, &_mh_execute_header, v20, "Close view controller because the board has been deleted or removed.", 68, 2, (uint64_t)_swiftEmptyArrayStorage);

      sub_100C9F8F8(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 208));
      *(_QWORD *)(v0 + 368) = v9;
      if (v9)
      {
        v10 = *(_QWORD *)(v0 + 216);
        v11 = *(_QWORD *)(v0 + 224);
        v12 = *(_QWORD *)(v0 + 208);
        swift_errorRelease(v9);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v12, 1, 1, v10);
        sub_1004CB800(v12, &qword_1013E4690);
      }
      else
      {
        v21 = *(_QWORD *)(v0 + 232);
        v23 = *(_QWORD *)(v0 + 208);
        v22 = *(_QWORD *)(v0 + 216);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 56))(v23, 0, 1, v22);
        sub_1004B84E0(v23, v21, type metadata accessor for CRLBoardViewModelMetadata);
        LODWORD(v22) = *(unsigned __int8 *)(v21 + *(int *)(v22 + 40));
        sub_1004B84A4(v21, type metadata accessor for CRLBoardViewModelMetadata);
        if ((_DWORD)v22 == 1)
        {
          sub_100C1E6AC();
          v24 = (_QWORD *)swift_task_alloc(dword_10140B374);
          *(_QWORD *)(v0 + 376) = v24;
          *v24 = v0;
          v24[1] = sub_100CAE864;
          sub_100C29764();
          return;
        }
      }
      v13 = *(_QWORD *)(v0 + 344);
      sub_100C2CAE4(*(_QWORD *)(v0 + 288));

      v9 = 0;
      ++v1;
      if (v17 == v13)
        goto LABEL_2;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
}

double *sub_100CAEB70(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v3, v12, 32, 0);
  v4 = *v3;
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_100843264(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    swift_endAccess(v12);
    v8 = objc_msgSend(*(id *)(v7 + 24), "allObjects");
    v9 = type metadata accessor for CRLiOSBoardViewController(0);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  }
  else
  {
    swift_endAccess(v12);
    return _swiftEmptyArrayStorage;
  }
  return (double *)v10;
}

uint64_t sub_100CAEC2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[17] = a1;
  v2[18] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[19] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[20] = v4;
  v2[21] = v5;
  return swift_task_switch(sub_100CAEC98, v4, v5);
}

uint64_t sub_100CAEC98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 144) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v1, v0 + 88, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_100843264(*(_QWORD *)(v0 + 136)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    swift_endAccess(v0 + 88);
    swift_retain(v6);
    swift_release(v5);
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 112, 0, 0);
    v7 = (void *)static OS_os_log.crlBoardLibrary;
    v8 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v8, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v10 = v7;
    v11 = UUID.uuidString.getter(v10);
    v13 = v12;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v11;
    *(_QWORD *)(inited + 40) = v13;
    v15 = static os_log_type_t.default.getter(v14);
    sub_100A06EBC((uint64_t)v10, &_mh_execute_header, v15, "Reusing existing BoardInfo for identifier: %{public}@", 53, 2, inited);
    swift_setDeallocating(inited);
    v16 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v16);

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }
  else
  {
    swift_endAccess(v0 + 88);
    v18 = (_QWORD *)swift_task_alloc(dword_10140DFF4);
    *(_QWORD *)(v0 + 176) = v18;
    *v18 = v0;
    v18[1] = sub_100CAEE80;
    return sub_100CAF45C(*(_QWORD *)(v0 + 136));
  }
}

uint64_t sub_100CAEE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  *(_QWORD *)(*(_QWORD *)v2 + 184) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[20];
    v7 = v4[21];
    v8 = sub_100CAEF2C;
  }
  else
  {
    v4[24] = a1;
    v6 = v4[20];
    v7 = v4[21];
    v8 = sub_100CAEEF4;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100CAEEF4()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 192), v1);
}

uint64_t sub_100CAEF2C()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

char *sub_100CAEF60(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char *v17;
  void *v18;
  void *v19;
  NSString v20;
  unint64_t v21;
  Class isa;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63[24];
  char v64[112];
  char v65[32];

  v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v60 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v59 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a1 + 16);
  v11 = objc_allocWithZone((Class)CRLInteractiveCanvasController);
  v12 = v10;
  v13 = a2;
  v14 = objc_msgSend(v11, "init");
  v15 = objc_msgSend(objc_allocWithZone((Class)CRLiOSCanvasViewController), "init");
  v16 = objc_allocWithZone((Class)type metadata accessor for CRLiOSBoardViewController(0));
  v17 = sub_100C1D614(v12, v13, v14, v15);
  objc_msgSend(*(id *)(*(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_selectionDispatcher]+ OBJC_IVAR____TtC8Freeform22CRLSelectionDispatcher_receivers), "addObject:", v17);
  v18 = *(void **)(a1 + 24);
  objc_msgSend(v18, "addObject:", v17);
  if ((uint64_t)objc_msgSend(v18, "count") >= 2)
  {
    v19 = (void *)objc_opt_self(CRLAnalyticsLogger);
    v20 = String._bridgeToObjectiveC()();
    v21 = _s8Freeform23CRLAnalyticsFeatureUsedC14featurePayload3forSDySSSo8NSObjectCGAA0bC4NameO_tFZ_0(0);
    sub_1004B8930(0, (unint64_t *)&qword_1013E0490, NSObject_ptr);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "sendEventInDomain:lazily:eventPayload:", v20, 1, isa, swift_bridgeObjectRelease(v21).n128_f64[0]);

  }
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v65, 0, 0);
  v23 = (void *)static OS_os_log.crlBoardLibrary;
  v24 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v24, v64);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v57 = v23;
  v26 = v17;
  v58 = v26;
  v27 = objc_msgSend(v26, "description");
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  *(_QWORD *)(inited + 56) = &type metadata for String;
  v31 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v31;
  *(_QWORD *)(inited + 32) = v28;
  *(_QWORD *)(inited + 40) = v30;
  v32 = *(char **)&v12[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard];
  v33 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v34 = *(_QWORD *)&v32[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v35 = v34 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v34 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v63, 0, 0);
  sub_1004B8460(v35, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  v36 = (uint64_t)v6;
  v37 = v32;
  swift_retain(v34);
  v38 = sub_1004B804C(&qword_1013E1A80);
  v39 = (uint64_t)v60;
  CRRegister.wrappedValue.getter(v38);
  sub_1004B84A4(v36, type metadata accessor for CRLBoardCRDTData);
  swift_release(v34);
  v40 = (uint64_t *)(*(_QWORD *)&v32[v33] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v41 = *v40;
  v42 = v40[1];
  swift_bridgeObjectRetain(v42);
  v43 = v59;
  sub_10067AFD0(v39, v41, v42, v59);

  v44 = v61;
  v45 = v62;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v39, v43, v62);
  v46 = sub_1004B84A4(v43, type metadata accessor for CRLBoardIdentifier);
  v47 = UUID.uuidString.getter(v46);
  v49 = v48;
  v50.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v44 + 8))(v39, v45);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v31;
  *(_QWORD *)(inited + 72) = v47;
  *(_QWORD *)(inited + 80) = v49;
  v51 = static os_log_type_t.default.getter(v50);
  v52 = v57;
  sub_100A06EBC((uint64_t)v57, &_mh_execute_header, v51, "Created view controller %@ for identifier: %{public}@", 53, 2, inited);
  swift_setDeallocating(inited);
  v53 = *(_QWORD *)(inited + 16);
  v54 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, v53, v54);

  return v58;
}

uint64_t sub_100CAF45C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[23] = a1;
  v2[24] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v3);
  v2[26] = swift_task_alloc(v3);
  v4 = type metadata accessor for MainActor(0);
  v2[27] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v2[28] = v5;
  v2[29] = v6;
  return swift_task_switch(sub_100CAF4F8, v5, v6);
}

uint64_t sub_100CAF4F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t **v12;

  v1 = v0[24];
  v2 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos;
  v0[30] = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos;
  v3 = v1 + v2;
  swift_beginAccess(v1 + v2, v0 + 11, 32, 0);
  if (*(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    sub_100843264(v0[23]);
    v5 = v4;
    swift_endAccess(v0 + 11);
    if ((v5 & 1) != 0)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"makeBoardInfo(for:)", 19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2726, "Duplicate boardIdentifier.", 26, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"makeBoardInfo(for:)", 19, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2726, (uint64_t)"Duplicate boardIdentifier.", 26, 2u);
    }
  }
  else
  {
    swift_endAccess(v0 + 11);
  }
  v6 = v0[24];
  sub_1004B8460(v0[23], v0[26], type metadata accessor for CRLBoardIdentifier);
  v7 = *(void **)(v6 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_syncPriorityProvider);
  v9 = type metadata accessor for CRLBoardLibrary.BoardInfo(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = dword_10140DFFC;
  v11 = v7;
  swift_retain(v8);
  v12 = (uint64_t **)swift_task_alloc(v10);
  v0[31] = (uint64_t)v12;
  *v12 = v0;
  v12[1] = (uint64_t *)sub_100CAF6A4;
  return sub_100CBE398(v0[26], (uint64_t)v11, v8);
}

uint64_t sub_100CAF6A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 248);
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100CAF9B0;
  else
    v5 = sub_100CAF70C;
  return swift_task_switch(v5, v3[28], v3[29]);
}

uint64_t sub_100CAF70C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 192) + *(_QWORD *)(v0 + 240));
  swift_beginAccess(v1, v0 + 112, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_100843264(*(_QWORD *)(v0 + 184)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v0 + 216);
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    swift_endAccess(v0 + 112);
    swift_retain(v6);
    swift_release(v5);
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    v7 = *(_QWORD *)(v0 + 256);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 160, 0, 0);
    v8 = (void *)static OS_os_log.crlBoardLibrary;
    v9 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v9, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v11 = v8;
    v12 = UUID.uuidString.getter(v11);
    v14 = v13;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 40) = v14;
    v16 = static os_log_type_t.default.getter(v15);
    sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v16, "Dropping BoardInfo to reuse recently created BoardInfo for identifier: %{public}@", 81, 2, inited);
    swift_setDeallocating(inited);
    v17 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v17);

    swift_release(v7);
    v18 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 200);
    v22 = *(_QWORD *)(v0 + 184);
    v23 = (_QWORD *)(*(_QWORD *)(v0 + 192) + *(_QWORD *)(v0 + 240));
    swift_endAccess(v0 + 112);
    sub_1004B8460(v22, v21, type metadata accessor for CRLBoardIdentifier);
    swift_beginAccess(v23, v0 + 136, 33, 0);
    swift_retain(v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
    v27 = *v23;
    *v23 = 0x8000000000000000;
    sub_1008273AC(v20, v21, isUniquelyReferenced_nonNull_native);
    v25 = *v23;
    *v23 = v27;
    swift_bridgeObjectRelease(v25);
    sub_1004B84A4(v21, type metadata accessor for CRLBoardIdentifier);
    swift_endAccess(v0 + 136);
    v26 = (_QWORD *)swift_task_alloc(dword_10140DB2C);
    *(_QWORD *)(v0 + 272) = v26;
    *v26 = v0;
    v26[1] = sub_100CAF9F8;
    return sub_100CBEA68();
  }
}

uint64_t sub_100CAF9B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CAF9F8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 272));
  return swift_task_switch(sub_100CAFA44, *(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 232));
}

uint64_t sub_100CAFA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100CAFA90(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  _DWORD *v40;
  uint64_t v41;
  id v42;
  void *v43;
  os_unfair_lock_s *v44;
  id v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t inited;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  Class v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _BYTE v77[24];
  char v78[72];
  char v79[24];
  objc_super v80;
  char v81[32];

  v2 = v1;
  v4 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v4);
  v75 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  v72 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v71 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v68 - v15;
  v76 = a1;
  v17 = *(char **)(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v18 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v19 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v20 = v19 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v19 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v81, 0, 0);
  sub_1004B8460(v20, (uint64_t)v8, type metadata accessor for CRLBoardCRDTData);
  v74 = v17;
  swift_retain(v19);
  v21 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v21);
  sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardCRDTData);
  swift_release(v19);
  v22 = (uint64_t *)(*(_QWORD *)&v17[v18] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v23 = *v22;
  v24 = v22[1];
  swift_bridgeObjectRetain(v24);
  v25 = (uint64_t)v11;
  v26 = v2;
  sub_10067AFD0(v25, v23, v24, (uint64_t)v16);
  v27 = *(char **)&v2[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store];
  v28 = *(_QWORD *)&v27[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 16));
  v29 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager;
  v30 = *(void **)&v27[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  if (v30)
  {
    v31 = *(id *)&v27[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  }
  else
  {
    v69 = (Class)type metadata accessor for CRLAssetManager();
    v32 = (char *)objc_allocWithZone(v69);
    v33 = &v32[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store];
    swift_unknownObjectWeakInit(&v32[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store], 0);
    v34 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_lock;
    v35 = type metadata accessor for CRLUnfairLock();
    v36 = swift_allocObject(v35, 24, 7);
    v37 = v27;
    v70 = v26;
    v38 = v37;
    v39 = v32;
    v40 = (_DWORD *)swift_slowAlloc(4, -1);
    *v40 = 0;
    *(_QWORD *)(v36 + 16) = v40;
    atomic_thread_fence(memory_order_acq_rel);
    *(_QWORD *)&v32[v34] = v36;
    *(_QWORD *)&v39[OBJC_IVAR____TtC8Freeform15CRLAssetManager_assets] = _swiftEmptyDictionarySingleton;
    v41 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_owners;
    *(_QWORD *)&v39[v41] = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 517, 0);
    *(_QWORD *)&v39[OBJC_IVAR____TtC8Freeform15CRLAssetManager_garbageCollectionWorkItem] = 0;
    swift_unknownObjectWeakAssign(v33, v38);

    v80.receiver = v39;
    v80.super_class = v69;
    v42 = objc_msgSendSuper2(&v80, "init");

    v26 = v70;
    v43 = *(void **)&v27[v29];
    *(_QWORD *)&v27[v29] = v42;
    v31 = v42;

    v30 = 0;
  }
  v44 = *(os_unfair_lock_s **)(v28 + 16);
  v45 = v30;
  os_unfair_lock_unlock(v44);
  v46 = v74;
  sub_100962574((uint64_t)v74);

  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v79, 0, 0);
  v47 = (void *)static OS_os_log.crlBoardLibrary;
  v48 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v48, v78);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v50 = v47;
  v51 = UUID.uuidString.getter(v50);
  v53 = v52;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v51;
  *(_QWORD *)(inited + 40) = v53;
  v55 = static os_log_type_t.default.getter(v54);
  sub_100A06EBC((uint64_t)v50, &_mh_execute_header, v55, "deactivateOpportunisticRealTimeCollaboration() for %{public}@", 61, 2, inited);
  swift_setDeallocating(inited);
  v56 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v56);

  v57 = type metadata accessor for TaskPriority(0);
  v58 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v75, 1, 1, v57);
  v59 = v71;
  sub_1004B8460((uint64_t)v16, v71, type metadata accessor for CRLBoardIdentifier);
  type metadata accessor for MainActor(0);
  v60 = v26;
  v61 = static MainActor.shared.getter(v60);
  v62 = *(unsigned __int8 *)(v72 + 80);
  v63 = (v62 + 40) & ~v62;
  v64 = (_QWORD *)swift_allocObject(&unk_10129F6D8, v63 + v73, v62 | 7);
  v64[2] = v61;
  v64[3] = &protocol witness table for MainActor;
  v64[4] = v60;
  sub_1004B84E0(v59, (uint64_t)v64 + v63, type metadata accessor for CRLBoardIdentifier);
  v65 = sub_100618920(v58, (uint64_t)&unk_10140DFD8, (uint64_t)v64);
  swift_release(v65);
  sub_100CC7570();
  sub_100CC20E8();
  swift_beginAccess(&v60[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos], v77, 33, 0);
  v66 = sub_10084772C((uint64_t)v16);
  swift_endAccess(v77);

  swift_release(v66);
  return sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100CB0070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v6 + 312) = a4;
  *(_QWORD *)(v6 + 320) = v5;
  *(_BYTE *)(v6 + 457) = a5;
  *(_QWORD *)(v6 + 296) = a2;
  *(_QWORD *)(v6 + 304) = a3;
  *(_QWORD *)(v6 + 288) = a1;
  v7 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  *(_QWORD *)(v6 + 328) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v6 + 336) = v8;
  *(_QWORD *)(v6 + 344) = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  *(_QWORD *)(v6 + 352) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 360) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 368) = v11;
  *(_QWORD *)(v6 + 376) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 384) = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  *(_QWORD *)(v6 + 392) = v13;
  *(_QWORD *)(v6 + 400) = v14;
  return swift_task_switch(sub_100CB0158, v13, v14);
}

void sub_100CB0158()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __n128 v40;
  _BYTE *v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  char v80;
  char *v81;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = (_QWORD *)(v1 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v3 = v2[1];
  if (*v2)
    v4 = 0;
  else
    v4 = v3 == 0xE000000000000000;
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v2, v3, 0, 0xE000000000000000, 0) & 1) == 0)
  {
    swift_release(*(_QWORD *)(v0 + 384));
    v42 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v42, 0, 0);
    *v43 = 5;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 320);
  v9 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot;
  v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  swift_bridgeObjectRetain(v10);
  sub_100BCB904();
  v11 = swift_task_alloc(32);
  *(_QWORD *)(v11 + 16) = v5;
  sub_1007C2808(1, (uint64_t (*)(id))sub_100BBAB04, v11, v10);
  v13 = v12;
  *(_QWORD *)(v0 + 408) = v12;
  swift_bridgeObjectRelease(v10);
  swift_task_dealloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (!v13)
  {
    v28 = *(_QWORD *)(v0 + 352);
    v29 = *(_QWORD *)(v0 + 296);
    swift_release(*(_QWORD *)(v0 + 384));
    v30 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v30, v0 + 80);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    sub_1004B8460(v29, v28, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    sub_100BCAD68();
    v33 = v32;
    v35 = v34;
    sub_1004B84A4(v28, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v33;
    v36 = inited + 32;
    *(_QWORD *)(inited + 40) = v35;
    sub_100757E04(&_mh_execute_header, (uint64_t)"addNewBoard(boardIdentifier:in:title:isDiscardable:)", 52, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2755, "Folder not found: %@", 20, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"addNewBoard(boardIdentifier:in:title:isDiscardable:)", 52, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2755, (uint64_t)"Folder not found: %@", 20, 2u);
    swift_setDeallocating(inited);
    v37 = *(_QWORD *)(inited + 16);
    v38 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v36, v37, v38);
    v39 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v39, 0, 0);
    *v41 = 1;
LABEL_10:
    swift_willThrow(v40);
    v66 = *(_QWORD *)(v0 + 344);
    v67 = *(_QWORD *)(v0 + 352);
    swift_task_dealloc(*(_QWORD *)(v0 + 376));
    swift_task_dealloc(v67);
    swift_task_dealloc(v66);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v14 = *(_QWORD *)(v0 + 352);
  v16 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 320);
  v17 = *(_QWORD *)(v0 + 296);
  v18 = *(_QWORD *)(v0 + 304);
  v19 = *(_QWORD *)(v8 + v9);
  v20 = sub_1004B804C(&qword_1013E1790);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v14, 1, 5, v20);
  v21 = swift_task_alloc(32);
  *(_QWORD *)(v21 + 16) = v14;
  swift_bridgeObjectRetain(v19);
  sub_1007C2808(1, (uint64_t (*)(id))sub_100CED894, v21, v19);
  v23 = v22;
  swift_bridgeObjectRelease(v19);
  swift_task_dealloc(v21);
  sub_1004B84A4(v14, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  sub_100CB8834(v23);
  v25 = v24;
  *(_QWORD *)(v0 + 416) = v24;

  v26 = *(void **)(v15 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  *(_QWORD *)(v0 + 424) = v26;
  v27 = v26;
  sub_1006326BC(v18, v16, v17, 0, (uint64_t)v27, v25);
  v45 = v44;
  v81 = sub_100B2BD38(v27, *(_QWORD *)(v0 + 288), v46, v44);
  *(_QWORD *)(v0 + 432) = v81;
  swift_bridgeObjectRelease(v45);
  v47 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v79 = v47;
  if (qword_1013DD4A8 != -1)
    swift_once(&qword_1013DD4A8, sub_1008F5A8C);
  v49 = *(_QWORD *)(v0 + 336);
  v48 = *(_QWORD *)(v0 + 344);
  v51 = *(_QWORD *)(v0 + 320);
  v50 = *(_QWORD *)(v0 + 328);
  v80 = *(_BYTE *)(v0 + 457);
  v52 = *(_QWORD *)(v0 + 288);
  v77 = qword_10147FEB8;
  v78 = *(_QWORD *)(v0 + 376);
  v53 = swift_allocObject(&unk_10129FDF8, 24, 7);
  swift_unknownObjectWeakInit(v53 + 16, v51);
  sub_1004B8460(v52, v48, type metadata accessor for CRLBoardIdentifier);
  v54 = *(unsigned __int8 *)(v50 + 80);
  v55 = (v54 + 24) & ~v54;
  v56 = swift_allocObject(&unk_10129FE20, v55 + v49, v54 | 7);
  *(_QWORD *)(v56 + 16) = v53;
  sub_1004B84E0(v48, v56 + v55, type metadata accessor for CRLBoardIdentifier);
  *(_QWORD *)(v0 + 184) = sub_100CECD10;
  *(_QWORD *)(v0 + 192) = v56;
  *(_QWORD *)(v0 + 152) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 160) = *(_QWORD *)"";
  *(_QWORD *)(v0 + 168) = sub_100568280;
  *(_QWORD *)(v0 + 176) = &unk_10129FE38;
  v57 = _Block_copy((const void *)(v0 + 152));
  v58 = objc_msgSend(v79, "addObserverForName:object:queue:usingBlock:", v77, 0, 0, v57, swift_release(*(_QWORD *)(v0 + 192)).n128_f64[0]);
  _Block_release(v57);

  v59 = *(_QWORD *)(v51 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_databaseSyncObserver);
  *(_QWORD *)(v51 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_databaseSyncObserver) = v58;
  swift_unknownObjectRelease(v59);
  v60 = v81;
  UUID.init()(v60);
  v61 = type metadata accessor for CRLTransactionContext(0);
  v62 = swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  v63 = sub_1006AD854((uint64_t)v60, 0, 1, v78, (v80 & 1) == 0, v62);
  *(_QWORD *)(v0 + 440) = v63;
  v64 = v60;
  sub_100C86CC4((uint64_t)v64, 2, v63);

  v65 = (*(uint64_t (**)(void))(*(_QWORD *)v63 + 720))();
  objc_msgSend(v64, "fixUp", swift_release(v65).n128_f64[0]);
  v68 = *(_QWORD *)&v64[OBJC_IVAR____TtC8Freeform8CRLBoard_pendingChanges];
  v69 = *(NSObject **)(v68 + OBJC_IVAR____TtC8Freeform17CRLBoardChangeSet_accessQueue);
  v70 = swift_allocObject(&unk_10129FE70, 32, 7);
  *(_QWORD *)(v70 + 16) = v63;
  *(_QWORD *)(v70 + 24) = v68;
  v71 = swift_allocObject(&unk_10129FE98, 32, 7);
  *(_QWORD *)(v71 + 16) = sub_1006B0744;
  *(_QWORD *)(v71 + 24) = v70;
  *(_QWORD *)(v0 + 232) = sub_1005B72B0;
  *(_QWORD *)(v0 + 240) = v71;
  *(_QWORD *)(v0 + 200) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 208) = *(_QWORD *)"";
  *(_QWORD *)(v0 + 216) = sub_100618D24;
  *(_QWORD *)(v0 + 224) = &unk_10129FEB0;
  v72 = _Block_copy((const void *)(v0 + 200));
  v73 = *(_QWORD *)(v0 + 240);
  swift_retain_n(v68, 2);
  swift_retain(v63);
  swift_retain(v71);
  swift_release(v73);
  dispatch_sync(v69, v72);
  _Block_release(v72);
  LOBYTE(v63) = swift_isEscapingClosureAtFileLocation(v71, "", 89, 314, 26, 1);
  swift_release(v71);
  swift_release(v70);
  swift_release(v68);
  if ((v63 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v74 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 456;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100CB092C;
    v75 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 248) = _NSConcreteStackBlock;
    v76 = (_QWORD *)(v0 + 248);
    v76[1] = 0x40000000;
    v76[2] = sub_100CBC074;
    v76[3] = &unk_10129FED8;
    v76[4] = v75;
    objc_msgSend(v64, "asyncSavePendingChangesWithCompletionHandler:", v76);
    swift_continuation_await(v74);
  }
}

uint64_t sub_100CB092C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 448) = v2;
  if (v2)
    v3 = sub_100CB0A1C;
  else
    v3 = sub_100CB0988;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 400));
}

uint64_t sub_100CB0988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(void **)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 384);
  v7 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 352);

  swift_release(v4);
  swift_release(v1);
  swift_bridgeObjectRelease(v2);

  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 432));
}

uint64_t sub_100CB0A1C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 440);
  v3 = *(void **)(v0 + 424);
  v2 = *(void **)(v0 + 432);
  v5 = *(void **)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v6 = swift_release(*(_QWORD *)(v0 + 384));
  swift_willThrow(v6);

  swift_release(v1);
  swift_bridgeObjectRelease(v4);

  v8 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB0AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, __n128);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  id v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  double v25;
  id v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  _QWORD *v32;

  v4 = sub_1004B804C(&qword_1013EF328);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v29 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12((char *)&v29 - v10, a1, v4, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v7, v11, v4);
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_10129F5A8, v14 + v6, v13 | 7);
  v16 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v15 + v14, v11, v4);
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_didStartUpdating) == 1)
  {
    CheckedContinuation.resume(returning:)(v16, v4);
    v17 = swift_release(v15);
  }
  else
  {
    v18 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v19 = swift_allocObject(&unk_10129F5D0, 24, 7);
    *(_QWORD *)(v19 + 16) = 0;
    v30 = v19 + 16;
    if (qword_1013DDD68 != -1)
      swift_once(&qword_1013DDD68, sub_100BC0B9C);
    v29 = qword_101480E38;
    v20 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
    v21 = (_QWORD *)swift_allocObject(&unk_10129F5F8, 48, 7);
    v21[2] = v19;
    v21[3] = v18;
    v21[4] = sub_10075D578;
    v21[5] = v15;
    aBlock[4] = sub_1005A1B3C;
    v32 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(_QWORD *)"";
    aBlock[2] = sub_100568280;
    aBlock[3] = &unk_10129F610;
    v22 = _Block_copy(aBlock);
    v23 = v32;
    swift_retain(v19);
    v24 = v18;
    swift_retain(v15);
    *(_QWORD *)&v25 = swift_release(v23).n128_u64[0];
    v26 = objc_msgSend(v24, "addObserverForName:object:queue:usingBlock:", v29, a2, v20, v22, v25);

    _Block_release(v22);
    swift_beginAccess(v30, aBlock, 1, 0);
    v27 = *(_QWORD *)(v19 + 16);
    *(_QWORD *)(v19 + 16) = v26;
    swift_release(v15);
    swift_release(v19);
    swift_unknownObjectRelease(v27);
  }
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v17);
}

uint64_t sub_100CB0D80(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(id))
{
  id v7;
  _BYTE v9[24];

  v7 = (id)swift_beginAccess(a2 + 16, v9, 0, 0);
  if (*(_QWORD *)(a2 + 16))
    v7 = objc_msgSend(a3, "removeObserver:");
  return a4(v7);
}

void sub_100CB0DE8()
{
  uint64_t v0;
  uint64_t v1;
  SCNetworkReachabilityRef v2;
  SCNetworkReachabilityRef v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  sockaddr address;
  _BYTE v22[72];
  _BYTE v23[24];
  _QWORD v24[5];

  v1 = v0;
  *(_QWORD *)&address.sa_data[6] = 0;
  *(_QWORD *)address.sa_data = 0;
  *(_WORD *)&address.sa_len = 528;
  v2 = SCNetworkReachabilityCreateWithAddress(0, &address);
  if (v2)
  {
    v3 = v2;
    v4 = type metadata accessor for CRLNetworkReachabilityListener();
    swift_allocObject(v4, 88, 7);
    v5 = sub_1008F07BC(v3);
    v24[3] = v4;
    v24[4] = &off_101286E28;
    v24[0] = v5;
    v6 = v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListener;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListener, v23, 33, 0);
    sub_100582338((uint64_t)v24, v6, &qword_1013E6100);
    swift_endAccess(v23);
  }
  else
  {
    if (qword_1013DD720 != -1)
      swift_once(&qword_1013DD720, sub_100A01CD8);
    swift_beginAccess(&static OS_os_log.crlNetworkReachability, v23, 0, 0);
    v7 = (id)static OS_os_log.crlNetworkReachability;
    v8 = static os_log_type_t.error.getter(v7);
    sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v8, "Failed to create network rechability for zero address.", 54, 2, (uint64_t)_swiftEmptyArrayStorage);

    v9 = sub_1005D29C8();
    v10 = swift_allocError(&type metadata for CRLNetworkReachabilityListenerError, v9, 0, 0);
    *v11 = 0;
    swift_willThrow(v12);
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v24, 0, 0);
    v13 = (void *)static OS_os_log.crlBoardLibrary;
    v14 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v14, v22);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v16 = v13;
    v17 = _convertErrorToNSError(_:)(v10);
    *(_QWORD *)(inited + 56) = sub_1004B8930(0, (unint64_t *)&qword_1013F95B0, NSError_ptr);
    v18 = sub_1005A15B8((unint64_t *)&qword_1014068F0, (unint64_t *)&qword_1013F95B0, NSError_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 32) = v17;
    v19 = static os_log_type_t.error.getter(v18);
    sub_100A06EBC((uint64_t)v16, &_mh_execute_header, v19, "Failed to set-up network reachability listener. Error: %@", 57, 2, inited);
    swift_setDeallocating(inited);
    v20 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v20);

    swift_errorRelease(v10);
  }
  sub_100CB10D8();
}

void sub_100CB10D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD v15[3];
  uint64_t v16;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListener;
  swift_beginAccess(v2, v14, 0, 0);
  sub_1004CB7BC(v2, (uint64_t)&v12, &qword_1013E6100);
  if (v13)
  {
    sub_1004DB728(&v12, (uint64_t)v15);
    v3 = *sub_1004BB5A4(v15, v16);
    v4 = sub_1004B804C(&qword_1013E6108);
    OS_dispatch_queue.sync<A>(execute:)(sub_1005D2C74, v3, v4);
    v5 = swift_allocObject(&unk_10129FDF8, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16);
    v6 = sub_1004CBA30(&qword_1013E6110, &qword_1013E6108, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v7 = Publisher<>.sink(receiveValue:)(sub_100CED054, v5, v4, v6);
    swift_release(v5);
    swift_release(v12);
    v8 = v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListenerSubscriptionSet;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_networkReachabilityListenerSubscriptionSet, &v12, 33, 0);
    AnyCancellable.store(in:)(v8);
    swift_endAccess(&v12);
    swift_release(v7);
    v9 = sub_1004BB5A4(v15, v16);
    OS_dispatch_queue.sync<A>(execute:)(sub_1005D2CB8, *v9, (char *)&type metadata for () + 8);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v15);
  }
  else
  {
    sub_1004CB800((uint64_t)&v12, &qword_1013E6100);
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v15, 0, 0);
    v10 = (id)static OS_os_log.crlBoardLibrary;
    v11 = static os_log_type_t.error.getter(v10);
    sub_100A06EBC((uint64_t)v10, &_mh_execute_header, v11, "networkReachabilityListener not set-up, will not get the listeners", 66, 2, (uint64_t)_swiftEmptyArrayStorage);

  }
}

void sub_100CB13A0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t Strong;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  void *v19;
  id v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31[72];
  char v32[24];
  char v33[24];

  v4 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v33, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v9 = (unsigned __int8 *)Strong;
    if (v7)
    {
      v10 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
      type metadata accessor for MainActor(0);
      v11 = v9;
      v12 = static MainActor.shared.getter(v11);
      v13 = (_QWORD *)swift_allocObject(&unk_10129FFC8, 40, 7);
      v13[2] = v12;
      v13[3] = &protocol witness table for MainActor;
      v13[4] = v11;
      v14 = sub_100618920((uint64_t)v6, (uint64_t)&unk_10140E250, (uint64_t)v13);
      swift_release(v14);
    }
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v32, 0, 0);
    v15 = (void *)static OS_os_log.crlBoardLibrary;
    v16 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v16, v31);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v29 = 0;
    v30 = 0xE000000000000000;
    if (v7)
      v18 = 1702195828;
    else
      v18 = 0x65736C6166;
    if (v7)
      v19 = (void *)0xE400000000000000;
    else
      v19 = (void *)0xE500000000000000;
    v20 = v15;
    v21._countAndFlagsBits = v18;
    v21._object = v19;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v19);
    v22 = v29;
    v23 = v30;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v22;
    *(_QWORD *)(inited + 40) = v23;
    v24 = static os_log_type_t.info.getter();
    sub_100A06EBC((uint64_t)v20, &_mh_execute_header, v24, "networkReachabilityListener update isReachable: %{public}@", 58, 2, inited);
    swift_setDeallocating(inited);
    v25 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v25);

    v26 = v9[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_isNetworkReachable];
    v9[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_isNetworkReachable] = v7;
    if (v7 == v26)
    {
      v27 = v9;
    }
    else
    {
      v27 = (unsigned __int8 *)objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      if (qword_1013DDE40 != -1)
        swift_once(&qword_1013DDE40, sub_100CAC35C);
      objc_msgSend(v27, "postNotificationName:object:", qword_1014812C0, v9);

    }
  }
}

uint64_t sub_100CB1688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[3] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[4] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[5] = v6;
  v4[6] = v7;
  return swift_task_switch(sub_100CB16F4, v6, v7);
}

uint64_t sub_100CB16F4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CB171C, 0, 0);
}

uint64_t sub_100CB171C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[7];
  v2 = swift_task_alloc(32);
  v0[8] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v3;
  v4 = sub_1004B804C(&qword_1013E4980);
  *v3 = v0;
  v3[1] = sub_100CB17CC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000021, 0x800000010100B480, sub_100CED0CC, v2, v4);
}

uint64_t sub_100CB17CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CB18EC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_100CB1838;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CB1838()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[2];
  v0[11] = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_10140E18C);
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_100CB188C;
  return sub_100CA767C(v1);
}

uint64_t sub_100CB188C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CB1998;
  else
    v4 = sub_100CB1958;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_100CB18EC()
{
  _QWORD *v0;

  swift_task_dealloc(v0[8]);
  return swift_task_switch(sub_100CB1924, v0[5], v0[6]);
}

uint64_t sub_100CB1924()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CB1958()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  v2 = swift_release(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_100CB1998()
{
  uint64_t v0;
  __n128 v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  v1 = swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CB19D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[28] = a1;
  v2[29] = v1;
  v3 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v2[30] = v3;
  v2[31] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v2[32] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v2[33] = v5;
  v2[34] = v6;
  return swift_task_switch(sub_100CB1A64, v5, v6);
}

uint64_t sub_100CB1A64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[30];
  v1 = v0[31];
  v3 = v0[29];
  sub_1004B8460(v0[28], v1, type metadata accessor for CRLBoardIdentifier);
  v4 = sub_1004B804C(&qword_1013E7870);
  v5 = *(_QWORD *)(v2 + 72);
  v6 = *(unsigned __int8 *)(v2 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v4, v7 + v5, v6 | 7);
  v0[35] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_100EF5E40;
  sub_1004B84E0(v1, v8 + v7, type metadata accessor for CRLBoardIdentifier);
  v0[36] = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CB1B14, 0, 0);
}

uint64_t sub_100CB1B14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = v0[35];
  v1 = v0[36];
  v3 = swift_task_alloc(48);
  v0[37] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 40) = 0;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[38] = v4;
  v5 = type metadata accessor for CRLBoardDatabaseFetchResult();
  *v4 = v0;
  v4[1] = sub_100CB1BC8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 27, 0, 0, 0x3A5F286863746566, 0xE900000000000029, sub_100CED89C, v3, v5);
}

uint64_t sub_100CB1BC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CB1E5C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 296));
    v4 = sub_100CB1C34;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CB1C34()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  v0[40] = v0[27];
  return swift_task_switch(sub_100CB1C74, v0[33], v0[34]);
}

uint64_t sub_100CB1C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t inited;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 256));
  swift_beginAccess(v1 + 16, v0 + 168, 0, 0);
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(v3);
  sub_10061868C(v2, v3, v0 + 128);
  swift_bridgeObjectRelease();
  sub_100CECF78(v0 + 128);
  sub_1004C4938(v0 + 128, v0 + 88, &qword_101405EE0);
  v4 = *(_QWORD *)(v0 + 88);
  if (v4)
  {
    swift_release(*(_QWORD *)(v0 + 320));
  }
  else
  {
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    v5 = *(_QWORD *)(v0 + 320);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 192, 0, 0);
    v6 = (void *)static OS_os_log.crlBoardLibrary;
    v7 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v7, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v9 = v6;
    v10 = UUID.uuidString.getter(v9);
    v12 = v11;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v13 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v13;
    *(_QWORD *)(inited + 32) = v10;
    *(_QWORD *)(inited + 40) = v12;
    v14 = static os_log_type_t.error.getter(v13);
    sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v14, "board identifier not found: %@", 30, 2, inited);
    swift_release(v5);
    swift_setDeallocating(inited);
    v15 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v15);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v4 != 0);
}

uint64_t sub_100CB1E5C()
{
  _QWORD *v0;

  swift_task_dealloc(v0[37]);
  return swift_task_switch(sub_100CB1E94, v0[33], v0[34]);
}

uint64_t sub_100CB1E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100CB1EE0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 560) = v3;
  *(_BYTE *)(v4 + 688) = a3;
  *(_QWORD *)(v4 + 552) = a2;
  *(_QWORD *)(v4 + 544) = a1;
  v5 = type metadata accessor for CRLBoard.RealTimeSessionInfo(0);
  *(_QWORD *)(v4 + 568) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 576) = v6;
  *(_QWORD *)(v4 + 584) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C((uint64_t *)&unk_101405E90);
  *(_QWORD *)(v4 + 592) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 600) = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  *(_QWORD *)(v4 + 608) = v9;
  *(_QWORD *)(v4 + 616) = v10;
  return swift_task_switch(sub_100CB1FA8, v9, v10);
}

uint64_t sub_100CB1FA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  _OWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  __n128 v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  __n128 v107;
  uint64_t v108;
  _QWORD *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void *v117;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 560) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v1, v0 + 312, 32, 0);
  v2 = *v1;
  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_100843264(*(_QWORD *)(v0 + 544)), (v4 & 1) == 0))
  {
    swift_endAccess(v0 + 312);
    goto LABEL_25;
  }
  v5 = (id)(v0 + 200);
  v6 = (id)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 552);
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
  swift_endAccess(v0 + 312);
  v9 = *(char **)(*(_QWORD *)(v8 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  *(_QWORD *)(v0 + 624) = v9;
  v10 = &qword_1013DD000;
  v11 = &unk_100EF5000;
  v115 = v9;
  v116 = v7;
  if (!v7)
  {
    v68 = v9;
    goto LABEL_27;
  }
  v12 = *(id *)(v0 + 552);
  v114 = v9;
  v13 = static CKShare.SystemFieldKey.title.getter();
  v15 = v14;
  v16 = CKRecord.subscript.getter(v13);
  swift_bridgeObjectRelease(v15);

  swift_unknownObjectRelease(v16);
  if (v16)
    goto LABEL_14;
  v17 = *(void **)(*(_QWORD *)&v114[OBJC_IVAR____TtC8Freeform8CRLBoard_shareState] + 16);
  if (!v17)
    goto LABEL_14;
  v18 = v17;
  v19 = static CKShare.SystemFieldKey.title.getter();
  v21 = v20;
  v22 = (id)CKRecord.subscript.getter(v19);
  swift_bridgeObjectRelease(v21);

  if (!v22)
    goto LABEL_13;
  v23 = v0 + 128;
  v24 = (void *)(v0 + 408);
  v112 = v0 + 504;
  v113 = v18;
  v111 = v0 + 536;
  v25 = v12;
  v26 = static CKShare.SystemFieldKey.title.getter();
  v28 = v27;
  v29 = swift_unknownObjectRetain(v22);
  CKRecord.subscript.setter(v29, v26, v28);

  if (qword_1013DD8C8 != -1)
    goto LABEL_59;
  while (1)
  {
    swift_beginAccess(&static OS_os_log.shareState, v24, 0, 0);
    v30 = (void *)static OS_os_log.shareState;
    v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v31, v23);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    *(_QWORD *)(v0 + 536) = v22;
    swift_unknownObjectRetain(v22);
    v110 = v30;
    v33 = sub_1004B804C((uint64_t *)&unk_1013E0510);
    v34 = swift_dynamicCast(v112, v111, v33, &type metadata for String, 6);
    v35 = *(_QWORD *)(v0 + 504);
    v36 = *(_QWORD *)(v0 + 512);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    v38 = 7104878;
    if ((v34 & (v36 != 0)) != 0)
      v38 = v35;
    v39 = 0xE300000000000000;
    if ((v34 & (v36 != 0)) != 0)
      v39 = v36;
    *(_QWORD *)(inited + 32) = v38;
    *(_QWORD *)(inited + 40) = v39;
    v40 = static os_log_type_t.default.getter(v37);
    sub_100A06EBC((uint64_t)v110, &_mh_execute_header, v40, "New share did not contain a title, using previous title: %@", 59, 2, inited);
    swift_setDeallocating(inited);
    v41 = *(_QWORD *)(inited + 16);
    v42 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, v41, v42);

    swift_unknownObjectRelease(v22);
    v18 = v113;
LABEL_13:

    v7 = v116;
LABEL_14:

    v43 = v12;
    v44 = static CKShare.SystemFieldKey.thumbnailImageData.getter();
    v46 = v45;
    v47 = CKRecord.subscript.getter(v44);
    swift_bridgeObjectRelease(v46);

    swift_unknownObjectRelease(v47);
    if (!v47)
    {
      v48 = *(void **)(*(_QWORD *)&v114[OBJC_IVAR____TtC8Freeform8CRLBoard_shareState] + 16);
      if (v48)
      {
        v49 = v48;
        v50 = static CKShare.SystemFieldKey.thumbnailImageData.getter();
        v52 = v51;
        v53 = CKRecord.subscript.getter(v50);
        swift_bridgeObjectRelease(v52);

        if (v53)
        {
          v113 = (id)(v0 + 480);
          v54 = v43;
          v55 = static CKShare.SystemFieldKey.thumbnailImageData.getter();
          v57 = v56;
          v58 = swift_unknownObjectRetain(v53);
          CKRecord.subscript.setter(v58, v55, v57);

          if (qword_1013DD8C8 != -1)
            swift_once(&qword_1013DD8C8, sub_100A069BC);
          swift_beginAccess(&static OS_os_log.shareState, v113, 0, 0);
          v59 = (id)static OS_os_log.shareState;
          v61 = static os_log_type_t.default.getter(v60);
          sub_100A06EBC((uint64_t)v59, &_mh_execute_header, v61, "New share did not contain a thumbnail, using previous thumbnail", 63, 2, (uint64_t)_swiftEmptyArrayStorage);

          swift_unknownObjectRelease(v53);
          v7 = v116;
        }

      }
    }

    v62 = v43;
    v63 = static CKShare.SystemFieldKey.shareType.getter();
    v65 = v64;
    v66 = CKRecord.subscript.getter(v63);
    swift_bridgeObjectRelease(v65);

    swift_unknownObjectRelease(v66);
    if (v66 || (v95 = *(void **)(*(_QWORD *)&v114[OBJC_IVAR____TtC8Freeform8CRLBoard_shareState] + 16)) == 0)
    {

LABEL_23:
      v11 = (_OWORD *)&unk_100EF5000;
      v10 = &qword_1013DD000;
      goto LABEL_27;
    }
    v96 = v95;
    v97 = static CKShare.SystemFieldKey.shareType.getter();
    v99 = v98;
    v100 = CKRecord.subscript.getter(v97);
    swift_bridgeObjectRelease(v99);

    if (!v100)
    {

      v7 = v116;
      goto LABEL_23;
    }
    v101 = v62;
    v102 = static CKShare.SystemFieldKey.shareType.getter();
    v104 = v103;
    v105 = swift_unknownObjectRetain(v100);
    CKRecord.subscript.setter(v105, v102, v104);

    v10 = &qword_1013DD000;
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v0 + 456, 0, 0);
    v106 = (id)static OS_os_log.shareState;
    v108 = static os_log_type_t.default.getter(v107);
    sub_100A06EBC((uint64_t)v106, &_mh_execute_header, v108, "New share did not contain a share type, using previous share type", 65, 2, (uint64_t)_swiftEmptyArrayStorage);

    swift_unknownObjectRelease(v100);
    v7 = v116;
    v11 = (_OWORD *)&unk_100EF5000;
LABEL_27:
    v114 = (char *)(v0 + 432);
    if (v10[281] != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v6, 0, 0);
    v69 = (void *)static OS_os_log.shareState;
    v70 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v71 = swift_initStackObject(v70, v5);
    v72 = (_QWORD *)v71;
    *(_OWORD *)(v71 + 16) = v11[228];
    v73 = v71 + 32;
    v74 = *(void **)(v0 + 552);
    if (v7)
    {
      *(_QWORD *)(v0 + 296) = sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
      *(_QWORD *)(v0 + 304) = sub_1005A15B8((unint64_t *)&qword_1013EF500, &qword_1013E0240, CKShare_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v0 + 272) = v74;
      sub_1004DB728((__int128 *)(v0 + 272), v73);
    }
    else
    {
      *(_QWORD *)(v71 + 56) = &type metadata for String;
      *(_QWORD *)(v71 + 64) = sub_1004CFC2C();
      v72[4] = 7104878;
      v72[5] = 0xE300000000000000;
    }
    v75 = *(_QWORD *)(v0 + 592);
    v76 = *(_QWORD *)(v0 + 576);
    v12 = *(id *)(v0 + 568);
    v24 = *(void **)(v0 + 552);
    v22 = v69;
    v77 = v74;
    v79 = static os_log_type_t.default.getter(v78);
    sub_100A06EBC((uint64_t)v22, &_mh_execute_header, v79, "Updating board share state for new share: %@", 44, 2, (uint64_t)v72);
    swift_setDeallocating(v72);
    v80 = v72[2];
    v81 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v73, v80, v81);

    v82 = v115;
    v83 = *(_QWORD *)&v115[OBJC_IVAR____TtC8Freeform8CRLBoard_shareState];
    swift_retain(v83);
    sub_100D2C2C0(v24);
    swift_release(v83);
    v84 = (uint64_t)&v115[OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo];
    swift_beginAccess(&v115[OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo], v114, 0, 0);
    sub_1004CB7BC(v84, v75, (uint64_t *)&unk_101405E90);
    v85 = (*(uint64_t (**)(uint64_t, uint64_t, id))(v76 + 48))(v75, 1, v12);
    v86 = *(_QWORD *)(v0 + 592);
    if (v85)
      break;
    v87 = *(_QWORD *)(v0 + 584);
    v88 = *(_QWORD *)(v0 + 568);
    sub_1004B8460(*(_QWORD *)(v0 + 592), v87, type metadata accessor for CRLBoard.RealTimeSessionInfo);
    sub_1004CB800(v86, (uint64_t *)&unk_101405E90);
    v89 = *(_QWORD *)(v87 + *(int *)(v88 + 24));
    swift_retain(v89);
    sub_1004B84A4(v87, type metadata accessor for CRLBoard.RealTimeSessionInfo);
    if (!v116)
    {
      swift_release(v89);
      v82 = v115;
      goto LABEL_57;
    }
    v5 = v77;
    v6 = objc_msgSend(v5, "participants");
    v90 = sub_1004B8930(0, (unint64_t *)&qword_1013FF620, CKShareParticipant_ptr);
    v91 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v90);

    if ((unint64_t)v91 >> 62)
    {
      if (v91 < 0)
        v6 = (id)v91;
      else
        v6 = (id)(v91 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(v91);
      v23 = _CocoaArrayWrapper.endIndex.getter(v6);
      if (!v23)
        goto LABEL_55;
    }
    else
    {
      v23 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v91);
      if (!v23)
        goto LABEL_55;
    }
    if (v23 >= 1)
    {
      v92 = 0;
      do
      {
        if ((v91 & 0xC000000000000001) != 0)
          v93 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v92, v91);
        else
          v93 = *(id *)(v91 + 8 * v92 + 32);
        v94 = v93;
        ++v92;
        v117 = v93;
        sub_100641D10(&v117, v89);

      }
      while (v23 != v92);
LABEL_55:
      swift_release(v89);
      swift_bridgeObjectRelease_n(v91, 2);

LABEL_56:
      v109 = (_QWORD *)swift_task_alloc(dword_10140DF1C);
      *(_QWORD *)(v0 + 632) = v109;
      *v109 = v0;
      v109[1] = sub_100CB2968;
      return sub_100CB2E98(*(_QWORD *)(v0 + 544));
    }
    __break(1u);
LABEL_59:
    swift_once(&qword_1013DD8C8, sub_100A069BC);
  }
  sub_1004CB800(*(_QWORD *)(v0 + 592), (uint64_t *)&unk_101405E90);
  if (v116)
    goto LABEL_56;
LABEL_57:

LABEL_25:
  *(_QWORD *)(v0 + 648) = *(_QWORD *)(*(_QWORD *)(v0 + 560) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CB2A1C, 0, 0);
}

uint64_t sub_100CB2968()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 632);
  *(_QWORD *)(*v1 + 640) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CB2E38;
  else
    v4 = sub_100CB29CC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 608), *(_QWORD *)(v2 + 616));
}

uint64_t sub_100CB29CC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 648) = *(_QWORD *)(*(_QWORD *)(v0 + 560) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CB2A1C, 0, 0);
}

uint64_t sub_100CB2A1C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 648);
  v2 = *(_BYTE *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 544);
  v5 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 656) = v5;
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v3;
  *(_BYTE *)(v5 + 40) = v2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 664) = v6;
  v7 = sub_1004B804C(&qword_101405618);
  *v6 = v0;
  v6[1] = sub_100CB2AE8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 528, 0, 0, 0xD000000000000033, 0x8000000101008ED0, sub_100CE3C6C, v5, v7);
}

uint64_t sub_100CB2AE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 664);
  *(_QWORD *)(*v1 + 672) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CB2BB0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 656));
    v4 = sub_100CB2B54;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CB2B54()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10140DF14);
  *(_QWORD *)(v0 + 680) = v1;
  *v1 = v0;
  v1[1] = sub_100CB2D9C;
  return sub_100CB3574(2, (uint64_t)&_swiftEmptySetSingleton);
}

uint64_t sub_100CB2BB0()
{
  _QWORD *v0;

  swift_task_dealloc(v0[82]);
  return swift_task_switch(sub_100CB2BEC, v0[76], v0[77]);
}

uint64_t sub_100CB2BEC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (qword_1013DD8C8 != -1)
    swift_once(&qword_1013DD8C8, sub_100A069BC);
  v1 = v0[84];
  swift_beginAccess(&static OS_os_log.shareState, v0 + 48, 0, 0);
  v2 = (void *)static OS_os_log.shareState;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v5 = v2;
  v7 = UUID.description.getter(v6);
  v9 = v8;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v10 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v9;
  swift_getErrorValue(v1, v0 + 65, v0 + 42);
  v11 = Error.localizedDescription.getter(v0[43], v0[44]);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v10;
  *(_QWORD *)(inited + 72) = v11;
  *(_QWORD *)(inited + 80) = v12;
  v13 = static os_log_type_t.error.getter();
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v13, "Unable to update CKShare for board %@ with error %@", 51, 2, inited);
  swift_setDeallocating(inited);
  v14 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v14);

  swift_errorRelease(v1);
  v15 = (_QWORD *)swift_task_alloc(dword_10140DF14);
  v0[85] = v15;
  *v15 = v0;
  v15[1] = sub_100CB2D9C;
  return sub_100CB3574(2, (uint64_t)&_swiftEmptySetSingleton);
}

uint64_t sub_100CB2D9C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 680));
  return swift_task_switch(sub_100CB2DEC, *(_QWORD *)(v1 + 608), *(_QWORD *)(v1 + 616));
}

uint64_t sub_100CB2DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 584);
  swift_release(*(_QWORD *)(v0 + 600));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB2E38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 600);
  v2 = *(_QWORD *)(v0 + 592);
  v3 = *(_QWORD *)(v0 + 584);

  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB2E98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[21] = a1;
  v2[22] = v1;
  v3 = type metadata accessor for CRLBoardIdentifier(0);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v2[24] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v2[25] = v5;
  v2[26] = v6;
  return swift_task_switch(sub_100CB2F24, v5, v6);
}

uint64_t sub_100CB2F24()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  char *v6;
  void *v7;
  objc_class *v8;
  char *v9;
  id v10;
  char *v11;
  id v12;
  char *v13;
  _QWORD *v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(v0[22] + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v1, v0 + 15, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_100843264(v0[21]), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    swift_endAccess(v0 + 15);
    v6 = *(char **)(v5 + 16);
    v0[30] = v6;
    v7 = *(void **)&v6[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];
    v8 = (objc_class *)type metadata accessor for CRLCommandDirtyBoard();
    v9 = v6;
    v10 = objc_allocWithZone(v8);
    v11 = v7;
    v12 = objc_msgSend(v10, "init");
    v13 = &v11[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue];
    swift_beginAccess(&v11[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue], v0 + 18, 33, 0);
    v14 = *(_QWORD **)v13;
    v15 = v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    *(_QWORD *)v13 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_100D0F980(0, v14[2] + 1, 1, v14);
      *(_QWORD *)v13 = v14;
    }
    v18 = v14[2];
    v17 = v14[3];
    if (v18 >= v17 >> 1)
    {
      v14 = sub_100D0F980((_QWORD *)(v17 > 1), v18 + 1, 1, v14);
      *(_QWORD *)v13 = v14;
    }
    v19 = v0 + 2;
    v14[2] = v18 + 1;
    v20 = &v14[2 * v18];
    v20[4] = v15;
    *((_BYTE *)v20 + 40) = 1;
    swift_endAccess(v0 + 18);
    sub_1006A8ED4();

    v21 = *(void **)&v9[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard];
    v0[31] = v21;
    v0[7] = v0 + 33;
    v0[2] = v0;
    v0[3] = sub_100CB346C;
    v22 = swift_continuation_init(v0 + 2, 1);
    v0[10] = _NSConcreteStackBlock;
    v23 = v0 + 10;
    v23[1] = 0x40000000;
    v23[2] = sub_100CBC074;
    v23[3] = &unk_10129F638;
    v23[4] = v22;
    objc_msgSend(v21, "asyncSavePendingChangesWithCompletionHandler:", v23);
    return swift_continuation_await(v19);
  }
  else
  {
    v26 = v0[22];
    v25 = v0[23];
    v27 = v0[21];
    swift_endAccess(v0 + 15);
    sub_1004B8460(v27, v25, type metadata accessor for CRLBoardIdentifier);
    v28 = unk_1013EF4DC;
    v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1013EF4D8 + dword_1013EF4D8);
    v29 = *(id *)(v26 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    v30 = (_QWORD *)swift_task_alloc(v28);
    v0[27] = v30;
    *v30 = v0;
    v30[1] = sub_100CB31F0;
    return v31(v0[23], (uint64_t)v29, 0);
  }
}

uint64_t sub_100CB31F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  *(_QWORD *)(*(_QWORD *)v2 + 224) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[25];
    v7 = v4[26];
    v8 = sub_100CB3430;
  }
  else
  {
    v4[29] = a1;
    v6 = v4[25];
    v7 = v4[26];
    v8 = sub_100CB3264;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100CB3264()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  char *v6;
  _QWORD *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = v0[29];
  v0[30] = v1;
  v2 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController);
  v3 = objc_allocWithZone((Class)type metadata accessor for CRLCommandDirtyBoard());
  v4 = v2;
  v5 = objc_msgSend(v3, "init");
  v6 = &v4[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue];
  swift_beginAccess(&v4[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue], v0 + 18, 33, 0);
  v7 = *(_QWORD **)v6;
  v8 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  *(_QWORD *)v6 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = sub_100D0F980(0, v7[2] + 1, 1, v7);
    *(_QWORD *)v6 = v7;
  }
  v11 = v7[2];
  v10 = v7[3];
  if (v11 >= v10 >> 1)
  {
    v7 = sub_100D0F980((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
    *(_QWORD *)v6 = v7;
  }
  v12 = v0 + 2;
  v7[2] = v11 + 1;
  v13 = &v7[2 * v11];
  v13[4] = v8;
  *((_BYTE *)v13 + 40) = 1;
  swift_endAccess(v0 + 18);
  sub_1006A8ED4();

  v14 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v0[31] = v14;
  v0[7] = v0 + 33;
  v0[2] = v0;
  v0[3] = sub_100CB346C;
  v15 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v16 = v0 + 10;
  v16[1] = 0x40000000;
  v16[2] = sub_100CBC074;
  v16[3] = &unk_10129F638;
  v16[4] = v15;
  objc_msgSend(v14, "asyncSavePendingChangesWithCompletionHandler:", v16);
  return swift_continuation_await(v12);
}

uint64_t sub_100CB3430()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB346C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 256) = v2;
  if (v2)
    v3 = sub_100CB351C;
  else
    v3 = sub_100CB34C8;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 208));
}

uint64_t sub_100CB34C8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);

  swift_release(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB351C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  __n128 v3;

  v1 = *(void **)(v0 + 248);
  v2 = *(void **)(v0 + 240);
  v3 = swift_release(*(_QWORD *)(v0 + 192));
  swift_willThrow(v3);

  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB3574(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v4 = sub_1004B804C(&qword_1013E01F0);
  v3[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v3[15] = v5;
  v3[16] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CB360C, v6, v7);
}

uint64_t sub_100CB360C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 128));
  if (v1)
  {
    v2 = *(char **)(v0 + 104);
    if (*(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pauseSnapshotUpdateCount])
    {
      if (qword_1013DD748 != -1)
      {
        swift_once(&qword_1013DD748, sub_100A023E8);
        v2 = *(char **)(v0 + 104);
      }
      v4 = *(_QWORD *)(v0 + 88);
      v3 = *(_QWORD *)(v0 + 96);
      swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 16, 0, 0);
      v5 = (id)static OS_os_log.crlBoardLibrary;
      v7 = static os_log_type_t.default.getter(v6);
      sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v7, "Skipping snapshot update because we're paused.", 46, 2, (uint64_t)_swiftEmptyArrayStorage);

      *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pendingUpdateOptions] |= v4;
      swift_beginAccess(&v2[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pendingChangedBoards], v0 + 40, 33, 0);
      swift_bridgeObjectRetain(v3);
      sub_100512568(v8);
      swift_endAccess(v0 + 40);
    }
    else
    {
      v9 = v0 + 64;
      if (qword_1013DD748 != -1)
      {
        swift_once(&qword_1013DD748, sub_100A023E8);
        v9 = v0 + 64;
        v2 = *(char **)(v0 + 104);
      }
      v10 = *(_QWORD *)(v0 + 112);
      v12 = *(_QWORD *)(v0 + 88);
      v11 = *(_QWORD *)(v0 + 96);
      swift_beginAccess(&static OS_os_log.crlBoardLibrary, v9, 0, 0);
      v13 = (id)static OS_os_log.crlBoardLibrary;
      v15 = static os_log_type_t.default.getter(v14);
      sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Requesting rate-limited snapshot update", 39, 2, (uint64_t)_swiftEmptyArrayStorage);

      sub_100CB80C0();
      v16 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
      v17 = v2;
      swift_bridgeObjectRetain(v11);
      v19 = static MainActor.shared.getter(v18);
      v20 = (_QWORD *)swift_allocObject(&unk_10129F660, 56, 7);
      v20[2] = v19;
      v20[3] = &protocol witness table for MainActor;
      v20[4] = v17;
      v20[5] = v12;
      v20[6] = v11;
      v21 = sub_100618920(v10, (uint64_t)&unk_10140DF28, (uint64_t)v20);
      swift_release(v21);
    }
  }
  else
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"updateStoreSnapshot(options:changedBoards:)", 43, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2944, "Nothing to update", 17, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateStoreSnapshot(options:changedBoards:)", 43, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2944, (uint64_t)"Nothing to update", 17, 2u);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100CB38FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  id v51;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t (*v53)(uint64_t);
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  _QWORD *result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  NSString *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79[16];
  uint64_t v80;
  _QWORD *v81;
  _QWORD v82[5];

  v73 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v73);
  v72 = (char *)&v65 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v77 = *(_QWORD *)(v5 - 8);
  v78 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v65 - v9;
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v65 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v65 - v19;
  v80 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  v21 = sub_1004B804C(&qword_1013E8898);
  OS_dispatch_queue.sync<A>(execute:)(sub_100633B48, v79, v21);
  v75 = v20;
  v71 = v17;
  v68 = v12;
  v66 = v11;
  v76 = v10;
  v24 = *(_QWORD *)(v82[0] + 16);
  if (v24)
  {
    v74 = v7;
    v70 = CKCurrentUserDefaultName;
    swift_bridgeObjectRetain(v82[0]);
    v25 = _swiftEmptyDictionarySingleton;
    v67 = v26;
    v27 = (void **)(v26 + 40);
    v69 = v4;
    while (1)
    {
      v31 = (uint64_t)*(v27 - 1);
      v30 = *v27;
      v32 = v31 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v31 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v82, 0, 0);
      sub_1004B8460(v32, (uint64_t)v4, type metadata accessor for CRLBoardCRDTData);
      v33 = sub_1004B804C(&qword_1013E1A80);
      v34 = v76;
      CRRegister.wrappedValue.getter(v33);
      sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardCRDTData);
      v36 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      v35 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8);
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v34, v78);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v39 = v36 == v37 && v35 == v38;
      if (v39
        || (v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v35, v37, v38, 0),
            swift_bridgeObjectRetain(v35),
            v41 = swift_bridgeObjectRelease(),
            (v40 & 1) != 0))
      {
        v41 = swift_bridgeObjectRelease();
        v36 = 0;
        v35 = 0xE000000000000000;
      }
      v42 = v77;
      v43 = v78;
      (*(void (**)(char *, uint64_t, __n128))(v77 + 8))(v76, v78, v41);
      v44 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      v45 = (uint64_t)v72;
      v44(v72, v74, v43);
      v46 = (_QWORD *)(v45 + *(int *)(v73 + 20));
      *v46 = v36;
      v46[1] = v35;
      v47 = (uint64_t)v71;
      sub_1004B84E0(v45, (uint64_t)v71, type metadata accessor for CRLBoardIdentifierStorage);
      v48 = v47;
      v49 = (uint64_t)v75;
      v50 = type metadata accessor for CRLBoardIdentifier;
      sub_1004B84E0(v48, (uint64_t)v75, type metadata accessor for CRLBoardIdentifier);
      sub_1004B8460(v49, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      v51 = v30;
      swift_retain(v31);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v81 = v25;
      v54 = sub_100843264((uint64_t)v14);
      v55 = v25[2];
      v56 = (v53 & 1) == 0;
      v57 = v55 + v56;
      if (__OFADD__(v55, v56))
      {
        __break(1u);
LABEL_24:
        __break(1u);
        swift_once(&qword_1013DD748, sub_100A023E8);
        swift_beginAccess(&static OS_os_log.crlBoardLibrary, v82, 0, 0);
        v22 = (id)static OS_os_log.crlBoardLibrary;
        v23 = static os_log_type_t.error.getter(v22);
        sub_100A06EBC((uint64_t)v22, &_mh_execute_header, v23, "Failed to lookup existing board data in the store", 49, 2, (uint64_t)_swiftEmptyArrayStorage);

        swift_errorRelease(v50);
        return (_QWORD *)sub_1008D8220((uint64_t)_swiftEmptyArrayStorage);
      }
      v50 = v53;
      if (v25[3] >= v57)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100834AF0();
      }
      else
      {
        sub_100824248(v57, isUniquelyReferenced_nonNull_native);
        v58 = sub_100843264((uint64_t)v14);
        if ((v50 & 1) != (v59 & 1))
        {
          result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v66);
          __break(1u);
          return result;
        }
        v54 = v58;
      }
      v4 = v69;
      v25 = v81;
      if ((v50 & 1) != 0)
      {
        v28 = (_QWORD *)(v81[7] + 16 * v54);
        v29 = (void *)v28[1];
        swift_release(*v28);

        *v28 = v31;
        v28[1] = v30;
      }
      else
      {
        v81[(v54 >> 6) + 8] |= 1 << v54;
        sub_1004B8460((uint64_t)v14, v25[6] + *(_QWORD *)(v68 + 72) * v54, type metadata accessor for CRLBoardIdentifier);
        v60 = (_QWORD *)(v25[7] + 16 * v54);
        *v60 = v31;
        v60[1] = v30;
        v61 = v25[2];
        v62 = __OFADD__(v61, 1);
        v63 = v61 + 1;
        if (v62)
          goto LABEL_24;
        v25[2] = v63;
      }
      v27 += 2;
      swift_bridgeObjectRelease();
      sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v75, type metadata accessor for CRLBoardIdentifier);
      if (!--v24)
      {
        swift_bridgeObjectRelease_n(v67, 2);
        return v25;
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyDictionarySingleton;
}

void *sub_100CB3E90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[6];

  v3 = sub_100CB38FC();
  if (v3[2] && (v4 = sub_100843264(a1), (v5 & 1) != 0))
  {
    v6 = v3[7] + 16 * v4;
    v7 = *(_QWORD *)v6;
    v8 = *(id *)(v6 + 8);
    swift_retain(v7);
  }
  else
  {
    v7 = 0;
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController)
                 + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
  __chkstk_darwin(v10);
  v13[2] = a1;
  swift_bridgeObjectRetain(v9);
  v11 = sub_100C9D5E8((uint64_t (*)(id *))sub_100BBC47C, (uint64_t)v13, v9);
  swift_bridgeObjectRelease();
  if (v7)
    swift_release(v7);
  return v11;
}

void sub_100CB3FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                             + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_shareErrorObservers), "allObjects"));
  v6 = sub_1004B804C(&qword_10140E288);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return;
  }
  if (v7 < 0)
    v12 = v7;
  else
    v12 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease(v7);
  if (!v8)
    goto LABEL_13;
LABEL_3:
  if (v8 >= 1)
  {
    v9 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
      }
      else
      {
        v10 = *(void **)(v7 + 8 * v9 + 32);
        swift_unknownObjectRetain(v10);
      }
      ++v9;
      v11 = (void *)_convertErrorToNSError(_:)(a1);
      objc_msgSend(v10, "shareFailedWithError:recordID:", v11, a2);
      swift_unknownObjectRelease(v10);

    }
    while (v8 != v9);
    goto LABEL_13;
  }
  __break(1u);
}

void sub_100CB40F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD v19[5];
  uint64_t v20;

  v1 = v0;
  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardShareController) + 112)
                + 112);
  v3 = objc_allocWithZone((Class)CKSystemSharingUIObserver);
  v4 = v2;
  v5 = objc_msgSend(v3, "initWithContainer:", v4);
  v6 = swift_allocObject(&unk_10129FDF8, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16);
  v7 = swift_retain(v6);
  CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter(sub_100CED0D4, v6, v7);
  swift_release(v6);
  v8 = swift_allocObject(&unk_10129FDF8, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16);
  v9 = swift_retain(v8);
  CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter(sub_100CED110, v8, v9);
  swift_release(v8);
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_cloudKitObserver);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_cloudKitObserver) = v5;
  v11 = v5;

  sub_1004B8930(0, &qword_10140E258, CKRecordObserver_ptr);
  v12 = v4;
  v13 = static CKRecord.SystemType.share.getter();
  v15 = (void *)CKRecordObserver.init(container:recordType:)(v12, v13, v14);
  v16 = swift_allocObject(&unk_10129FDF8, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16);
  v19[4] = sub_100CED14C;
  v20 = v16;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = *(_QWORD *)"";
  v19[2] = sub_1004C6194;
  v19[3] = &unk_10129FFE0;
  v17 = _Block_copy(v19);
  objc_msgSend(v15, "registerWithBlock:", v17, swift_release(v20).n128_f64[0]);

  _Block_release(v17);
  v18 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_cloudKitRecordObserver);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_cloudKitRecordObserver) = v15;

}

void sub_100CB42FC(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t Strong;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  id v31;
  id v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  id v54;
  void *v55;
  char v56[72];
  char v57[72];
  _BYTE v58[24];
  char v59[32];

  v55 = a2;
  v7 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLBoardIdentifier(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v53 - v18;
  a1 += 16;
  swift_beginAccess(a1, v59, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v21 = (void *)Strong;
    if ((a3 & 1) != 0)
    {
      v25 = (void *)objc_opt_self(NSNotificationCenter);
      v26 = v55;
      swift_errorRetain(v55);
      v27 = objc_msgSend(v25, "defaultCenter");
      if (qword_1013DDE30 != -1)
        swift_once(&qword_1013DDE30, sub_100CAC2F4);
      objc_msgSend(v27, "postNotificationName:object:", qword_1014812B0, v21);

      if (qword_1013DD8C8 != -1)
        swift_once(&qword_1013DD8C8, sub_100A069BC);
      swift_beginAccess(&static OS_os_log.shareState, v58, 0, 0);
      v28 = (void *)static OS_os_log.shareState;
      v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v29, v57);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      *(_QWORD *)(inited + 56) = sub_1004B8930(0, &qword_1013E8810, CKRecordID_ptr);
      *(_QWORD *)(inited + 64) = sub_1005A15B8((unint64_t *)&qword_1013F2108, &qword_1013E8810, CKRecordID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(inited + 32) = a4;
      v31 = v28;
      v32 = a4;
      v34 = static os_log_type_t.default.getter(v33);
      sub_100A06EBC((uint64_t)v31, &_mh_execute_header, v34, "Share UI failed to save. recordID: %@", 37, 2, inited);
      swift_setDeallocating(inited);
      v35 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v35);

      sub_100CB3FB4((uint64_t)v26, (uint64_t)v32);
      sub_1004E1E08(v26, 1);
    }
    else
    {
      v53 = v9;
      v22 = v55;
      v54 = v55;
      v23 = objc_msgSend(v54, "recordID");
      v24 = objc_msgSend(v23, "zoneID");

      sub_100B38068((uint64_t)v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
      {
        sub_1004E1E08(v22, 0);

        sub_1004CB800((uint64_t)v12, &qword_1013E0270);
      }
      else
      {
        sub_1004B84E0((uint64_t)v12, (uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
        if (qword_1013DD8C8 != -1)
          swift_once(&qword_1013DD8C8, sub_100A069BC);
        swift_beginAccess(&static OS_os_log.shareState, v58, 0, 0);
        v36 = (void *)static OS_os_log.shareState;
        v37 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        v38 = swift_initStackObject(v37, v56);
        *(_OWORD *)(v38 + 16) = xmmword_100EF5E40;
        *(_QWORD *)(v38 + 56) = sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
        *(_QWORD *)(v38 + 64) = sub_1005A15B8((unint64_t *)&qword_1013EF500, &qword_1013E0240, CKShare_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v38 + 32) = v54;
        sub_10059BC74(v55, 0);
        v39 = v36;
        v41 = static os_log_type_t.default.getter(v40);
        sub_100A06EBC((uint64_t)v39, &_mh_execute_header, v41, "Share UI saved successfully. share: %@", 38, 2, v38);
        swift_setDeallocating(v38);
        v42 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v38 + 32, 1, v42);

        v43 = type metadata accessor for TaskPriority(0);
        v44 = (uint64_t)v53;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v53, 1, 1, v43);
        sub_1004B8460((uint64_t)v19, (uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
        type metadata accessor for MainActor(0);
        v45 = v55;
        sub_10059BC74(v55, 0);
        v46 = v21;
        v47 = static MainActor.shared.getter(v46);
        v48 = *(unsigned __int8 *)(v14 + 80);
        v49 = (v48 + 40) & ~v48;
        v50 = (v15 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
        v51 = (_QWORD *)swift_allocObject(&unk_1012A0108, v50 + 8, v48 | 7);
        v51[2] = v47;
        v51[3] = &protocol witness table for MainActor;
        v51[4] = v46;
        sub_1004B84E0((uint64_t)v16, (uint64_t)v51 + v49, type metadata accessor for CRLBoardIdentifier);
        *(_QWORD *)((char *)v51 + v50) = v54;
        v52 = sub_100618920(v44, (uint64_t)&unk_10140E298, (uint64_t)v51);
        swift_release(v52);
        sub_1004E1E08(v45, 0);

        sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
      }
    }
  }
}

uint64_t sub_100CB48E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  _QWORD *v10;

  v9 = type metadata accessor for MainActor(0);
  v6[2] = v9;
  v6[3] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10140DF04);
  v6[4] = v10;
  *v10 = v6;
  v10[1] = sub_1006897D0;
  return sub_100C9CCDC(a5, a6, 0);
}

double sub_100CB4964(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, __n128))
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  void *Strong;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __n128 v24;
  id v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  _BYTE v32[12];
  int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;
  char v43[24];

  v35 = a7;
  v36 = a8;
  v34 = a6;
  v33 = a3;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v15 - 8);
  v38 = v15;
  __chkstk_darwin(v15);
  v17 = &v32[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter();
  v19 = swift_allocObject(&unk_10129FDF8, 24, 7);
  swift_beginAccess(a4 + 16, v43, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a4 + 16);
  swift_unknownObjectWeakInit(v19 + 16);

  v21 = swift_allocObject(a5, 48, 7);
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(v21 + 24) = a2;
  v22 = v33 & 1;
  *(_BYTE *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = a1;
  aBlock[4] = v34;
  v42 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = v35;
  v23 = _Block_copy(aBlock);
  v24 = swift_retain(v19);
  v36(a2, v22, v24);
  v25 = a1;
  static DispatchQoS.unspecified.getter(v26);
  v40 = _swiftEmptyArrayStorage;
  v27 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v29 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v29, v12, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v23);
  _Block_release(v23);

  (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v14, v12);
  (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v17, v38);
  v30 = v42;
  swift_release(v19);
  *(_QWORD *)&result = swift_release(v30).n128_u64[0];
  return result;
}

uint64_t sub_100CB4C00(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  id v26;
  id v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  _BYTE v48[72];
  _BYTE v49[72];
  _BYTE v50[24];
  _BYTE v51[32];

  v8 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v8);
  v47 = &v48[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v10);
  v12 = &v48[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = type metadata accessor for CRLBoardIdentifier(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = &v48[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v17);
  v19 = &v48[-v18 - 8];
  a1 += 16;
  swift_beginAccess(a1, v51, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v21 = (void *)result;
    if ((a3 & 1) != 0)
    {
      swift_errorRetain(a2);
      if (qword_1013DD8C8 != -1)
        swift_once(&qword_1013DD8C8, sub_100A069BC);
      swift_beginAccess(&static OS_os_log.shareState, v50, 0, 0);
      v23 = (void *)static OS_os_log.shareState;
      v24 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v24, v49);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      *(_QWORD *)(inited + 56) = sub_1004B8930(0, &qword_1013E8810, CKRecordID_ptr);
      *(_QWORD *)(inited + 64) = sub_1005A15B8((unint64_t *)&qword_1013F2108, &qword_1013E8810, CKRecordID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(inited + 32) = a4;
      v26 = a4;
      v27 = v23;
      v29 = static os_log_type_t.default.getter(v28);
      sub_100A06EBC((uint64_t)v27, &_mh_execute_header, v29, "Share UI failed to stop. recordID: %@", 37, 2, inited);
      swift_setDeallocating(inited);
      v30 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v30);

      sub_100CB3FB4(a2, (uint64_t)v26);
      return sub_1004E1DFC(a2, 1);
    }
    else
    {
      v22 = objc_msgSend(a4, "zoneID");
      sub_100B38068((uint64_t)v12);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
      {

        return sub_1004CB800((uint64_t)v12, &qword_1013E0270);
      }
      else
      {
        sub_1004B84E0((uint64_t)v12, (uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
        if (qword_1013DD8C8 != -1)
          swift_once(&qword_1013DD8C8, sub_100A069BC);
        swift_beginAccess(&static OS_os_log.shareState, v50, 0, 0);
        v31 = (void *)static OS_os_log.shareState;
        v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        v33 = swift_initStackObject(v32, v48);
        *(_OWORD *)(v33 + 16) = xmmword_100EF5E40;
        *(_QWORD *)(v33 + 56) = sub_1004B8930(0, &qword_1013E8810, CKRecordID_ptr);
        *(_QWORD *)(v33 + 64) = sub_1005A15B8((unint64_t *)&qword_1013F2108, &qword_1013E8810, CKRecordID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v33 + 32) = a4;
        v34 = v31;
        v35 = a4;
        v37 = static os_log_type_t.default.getter(v36);
        sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v37, "Share UI stopped successfully. recordID: %@", 43, 2, v33);
        swift_setDeallocating(v33);
        v38 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v33 + 32, 1, v38);

        v39 = type metadata accessor for TaskPriority(0);
        v40 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v47, 1, 1, v39);
        sub_1004B8460((uint64_t)v19, (uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
        type metadata accessor for MainActor(0);
        v41 = v21;
        v42 = static MainActor.shared.getter(v41);
        v43 = *(unsigned __int8 *)(v14 + 80);
        v44 = (v43 + 40) & ~v43;
        v45 = (_QWORD *)swift_allocObject(&unk_1012A0090, v44 + v15, v43 | 7);
        v45[2] = v42;
        v45[3] = &protocol witness table for MainActor;
        v45[4] = v41;
        sub_1004B84E0((uint64_t)v16, (uint64_t)v45 + v44, type metadata accessor for CRLBoardIdentifier);
        v46 = sub_100618920(v40, (uint64_t)&unk_10140E280, (uint64_t)v45);

        swift_release(v46);
        return sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
      }
    }
  }
  return result;
}

uint64_t sub_100CB50EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v7 = type metadata accessor for MainActor(0);
  v5[2] = v7;
  v5[3] = static MainActor.shared.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_10140DF04);
  v5[4] = v8;
  *v8 = v5;
  v8[1] = sub_100688BDC;
  return sub_100C9CCDC(a5, 0, 1);
}

void sub_100CB5168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  char *Strong;
  uint64_t (*v24)(void **, uint64_t);
  int v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  __n128 v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t inited;
  id v52;
  id v53;
  __n128 v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  __n128 v73;
  uint64_t v74;
  id *v75;
  uint64_t (*v76)(id *, uint64_t);
  int v77;
  id v78;
  char *v79;
  void *v80;
  uint64_t v81;
  id v82;
  id v83;
  __n128 v84;
  uint64_t v85;
  uint64_t (*v86)(id *, uint64_t);
  uint64_t v87;
  id *v88;
  int v89;
  void *v90;
  uint64_t v91;
  id v92;
  __n128 v93;
  uint64_t v94;
  id v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  id v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  id v123;
  char v124;
  void *v125;
  uint64_t v126;
  id v127;
  id v128;
  id v129;
  void *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  id v137;
  __n128 v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(void **, uint64_t);
  id v148;
  char *v149;
  __int128 v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  id *v154;
  id v155;
  int v156;
  void (*v157)(void **, uint64_t);
  int v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  id *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171[72];
  _BYTE v172[24];
  char v173[32];

  v4 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v4);
  v161 = (char *)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v6);
  v8 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  v164 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v164 + 64);
  __chkstk_darwin(v9);
  v160 = (uint64_t)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v163 = (uint64_t)&v146 - v13;
  v14 = type metadata accessor for CKRecordChange.ChangeType(0, v12);
  v15 = *(_QWORD **)(v14 - 8);
  __chkstk_darwin(v14);
  v162 = (id *)((char *)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v19 = (id *)((char *)&v146 - v18);
  __chkstk_darwin(v20);
  v22 = (void **)((char *)&v146 - v21);
  a2 += 16;
  swift_beginAccess(a2, v173, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(a2);
  if (!Strong)
    return;
  v165 = Strong;
  v159 = a1;
  ((void (*)(void))CKRecordChange.changeType.getter)();
  v24 = (uint64_t (*)(void **, uint64_t))v15[11];
  v25 = v24(v22, v14);
  if (v25 == enum case for CKRecordChange.ChangeType.fetch(_:)
    || v25 == enum case for CKRecordChange.ChangeType.modify(_:))
  {
    v158 = enum case for CKRecordChange.ChangeType.modify(_:);
    v156 = enum case for CKRecordChange.ChangeType.fetch(_:);
    v157 = (void (*)(void **, uint64_t))v15[12];
    v157(v22, v14);
    v27 = *v22;
    v28 = objc_opt_self(CKShare);
    v29 = swift_dynamicCastObjCClass(v27, v28);
    if (!v29)
    {

      return;
    }
    v30 = (void *)v29;
    v154 = v19;
    v31 = v27;
    v155 = v30;
    v32 = objc_msgSend(v30, "recordID");
    v33 = objc_msgSend(v32, "zoneID");

    sub_100B38068((uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v8, 1, v9) == 1)
    {

      sub_1004CB800((uint64_t)v8, &qword_1013E0270);
      return;
    }
    v39 = (uint64_t)v8;
    v40 = v163;
    sub_1004B84E0(v39, v163, type metadata accessor for CRLBoardIdentifier);
    v41 = &v165[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos];
    swift_beginAccess(&v165[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos], v172, 32, 0);
    v42 = *(_QWORD *)v41;
    if (!*(_QWORD *)(v42 + 16) || (v43 = sub_100843264(v40), (v44 & 1) == 0))
    {
      swift_endAccess(v172);

      v61 = v40;
LABEL_26:
      sub_1004B84A4(v61, type metadata accessor for CRLBoardIdentifier);
      return;
    }
    v45 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v43);
    swift_endAccess(v172);
    v46 = *(char **)(*(_QWORD *)(v45 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
    v47 = *(void **)(*(_QWORD *)&v46[OBJC_IVAR____TtC8Freeform8CRLBoard_shareState] + 16);
    if (!v47)
    {
      v62 = v46;
      sub_1004B84A4(v40, type metadata accessor for CRLBoardIdentifier);

      return;
    }
    v147 = v24;
    v48 = qword_1013DD8C8;
    v149 = v46;
    v49 = v47;
    if (v48 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v172, 0, 0);
    v50 = (void *)static OS_os_log.shareState;
    v152 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v152, v171);
    v150 = xmmword_100EF5E40;
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v148 = (id)sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
    *(_QWORD *)(inited + 56) = v148;
    v146 = sub_1005A15B8((unint64_t *)&qword_1013EF500, &qword_1013E0240, CKShare_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(inited + 64) = v146;
    *(_QWORD *)(inited + 32) = v49;
    v52 = v49;
    v53 = v50;
    v55 = static os_log_type_t.default.getter(v54);
    sub_100A06EBC((uint64_t)v53, &_mh_execute_header, v55, "Record observer saw change for open board with existing share: %@", 65, 2, inited);
    swift_setDeallocating(inited);
    v153 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v153);

    v151 = v52;
    v56 = objc_msgSend(v52, "recordChangeTag");
    if (v56)
    {
      v57 = v56;
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v60 = v59;

    }
    else
    {
      v58 = 0;
      v60 = 0;
    }
    v63 = objc_msgSend(v155, "recordChangeTag");
    if (v63)
    {
      v64 = v63;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v67 = v66;

      if (!v60)
      {
        v68 = v155;
        if (!v67)
          goto LABEL_53;
        goto LABEL_39;
      }
      v68 = v155;
      if (v67)
      {
        if (v58 == v65 && v60 == v67)
        {
          swift_bridgeObjectRelease(v60);
          swift_bridgeObjectRelease(v67);
LABEL_53:
          sub_1004B84A4(v163, type metadata accessor for CRLBoardIdentifier);

          return;
        }
        v124 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v60, v65, v67, 0);
        swift_bridgeObjectRelease(v60);
        swift_bridgeObjectRelease(v67);
        if ((v124 & 1) != 0)
          goto LABEL_53;
LABEL_40:
        v69 = (void *)static OS_os_log.shareState;
        v70 = swift_initStackObject(v152, &v170);
        *(_OWORD *)(v70 + 16) = v150;
        v71 = v146;
        *(_QWORD *)(v70 + 56) = v148;
        *(_QWORD *)(v70 + 64) = v71;
        *(_QWORD *)(v70 + 32) = v68;
        v148 = v31;
        v72 = v69;
        v74 = static os_log_type_t.default.getter(v73);
        sub_100A06EBC((uint64_t)v72, &_mh_execute_header, v74, "Record observer saw change to in memory share. Forcing fetch. Share: %@", 71, 2, v70);
        swift_setDeallocating(v70);
        swift_arrayDestroy(v70 + 32, 1, v153);

        v75 = v154;
        ((void (*)(void))CKRecordChange.changeType.getter)();
        v76 = v147;
        v77 = v147(v75, v14);
        if (v77 == v158)
        {
          v157(v75, v14);

          v78 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
          if (qword_1013DDE30 != -1)
            swift_once(&qword_1013DDE30, sub_100CAC2F4);
          v79 = v165;
          objc_msgSend(v78, "postNotificationName:object:", qword_1014812B0, v165);

          v80 = (void *)static OS_os_log.shareState;
          v81 = swift_initStackObject(v152, &v166);
          *(_OWORD *)(v81 + 16) = v150;
          *(_QWORD *)(v81 + 56) = sub_1004B8930(0, (unint64_t *)&qword_1013E83B8, CKRecord_ptr);
          *(_QWORD *)(v81 + 64) = sub_1005A15B8(&qword_10140E260, (unint64_t *)&qword_1013E83B8, CKRecord_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
          v82 = v148;
          *(_QWORD *)(v81 + 32) = v148;
          v83 = v80;
          v85 = static os_log_type_t.default.getter(v84);
          sub_100A06EBC((uint64_t)v83, &_mh_execute_header, v85, "Record observer saw share modification: %@", 42, 2, v81);
          swift_setDeallocating(v81);
          swift_arrayDestroy(v81 + 32, 1, v153);

          goto LABEL_71;
        }
        v86 = (uint64_t (*)(id *, uint64_t))v15[1];
        v87 = v86(v75, v14);
        v88 = v162;
        CKRecordChange.changeType.getter(v87);
        v89 = v76(v88, v14);
        if (v89 != v156)
        {
          sub_1004B84A4(v163, type metadata accessor for CRLBoardIdentifier);

          v123 = v148;
          v86(v88, v14);
          return;
        }
        v157(v88, v14);

        v90 = (void *)static OS_os_log.shareState;
        v91 = swift_initStackObject(v152, &v169);
        *(_OWORD *)(v91 + 16) = v150;
        *(_QWORD *)(v91 + 56) = sub_1004B8930(0, (unint64_t *)&qword_1013E83B8, CKRecord_ptr);
        *(_QWORD *)(v91 + 64) = sub_1005A15B8(&qword_10140E260, (unint64_t *)&qword_1013E83B8, CKRecord_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v91 + 32) = v148;
        v92 = v90;
        v94 = static os_log_type_t.default.getter(v93);
        sub_100A06EBC((uint64_t)v92, &_mh_execute_header, v94, "Record observer saw share fetch: %@", 35, 2, v91);
        swift_setDeallocating(v91);
        swift_arrayDestroy(v91 + 32, 1, v153);

        v95 = objc_msgSend(v68, "recordChangeTag");
        if (v95)
        {
          v96 = v95;
          v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
          v99 = v98;

          v100 = objc_msgSend(v151, "recordChangeTag");
          if (v100)
          {
            v101 = v100;
            v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
            v104 = v103;

            if (v102 != v97 || (v105 = v99, v104 != v99))
            {
              if ((_stringCompareWithSmolCheck(_:_:expecting:)(v102, v104, v97, v99, 1) & 1) != 0)
              {
                v106 = (void *)static OS_os_log.shareState;
                v107 = swift_initStackObject(v152, &v167);
                *(_OWORD *)(v107 + 16) = xmmword_100EF5A10;
                *(_QWORD *)(v107 + 56) = &type metadata for String;
                v108 = sub_1004CFC2C();
                *(_QWORD *)(v107 + 32) = v97;
                *(_QWORD *)(v107 + 40) = v99;
                *(_QWORD *)(v107 + 96) = &type metadata for String;
                *(_QWORD *)(v107 + 104) = v108;
                *(_QWORD *)(v107 + 64) = v108;
                *(_QWORD *)(v107 + 72) = v102;
                *(_QWORD *)(v107 + 80) = v104;
                v109 = v106;
                v111 = static os_log_type_t.default.getter(v110);
                sub_100A06EBC((uint64_t)v109, &_mh_execute_header, v111, "Updating board's CKShare because change tag is newer. existing etag:%{public}@ > new etag:%{public}@", 100, 2, v107);
                swift_setDeallocating(v107);
                swift_arrayDestroy(v107 + 32, 2, v153);

                v112 = type metadata accessor for TaskPriority(0);
                v113 = (uint64_t)v161;
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v161, 1, 1, v112);
                v114 = v163;
                v115 = v160;
                sub_1004B8460(v163, v160, type metadata accessor for CRLBoardIdentifier);
                type metadata accessor for MainActor(0);
                v162 = (id *)v148;
                v116 = v165;
                v117 = static MainActor.shared.getter(v116);
                v118 = *(unsigned __int8 *)(v164 + 80);
                v119 = (v118 + 40) & ~v118;
                v120 = (v10 + v119 + 7) & 0xFFFFFFFFFFFFFFF8;
                v121 = (_QWORD *)swift_allocObject(&unk_1012A0018, v120 + 8, v118 | 7);
                v121[2] = v117;
                v121[3] = &protocol witness table for MainActor;
                v121[4] = v116;
                sub_1004B84E0(v115, (uint64_t)v121 + v119, type metadata accessor for CRLBoardIdentifier);
                *(_QWORD *)((char *)v121 + v120) = v155;
                v122 = sub_100618920(v113, (uint64_t)&unk_10140E270, (uint64_t)v121);

                swift_release(v122);
                v61 = v114;
                goto LABEL_26;
              }
              v105 = v104;
            }
            swift_bridgeObjectRelease(v99);
            v99 = v105;
          }
          swift_bridgeObjectRelease(v99);
        }
        v125 = (void *)static OS_os_log.shareState;
        v126 = swift_initStackObject(v152, &v168);
        *(_OWORD *)(v126 + 16) = xmmword_100EF5A10;
        v127 = v125;
        v128 = v151;
        v129 = objc_msgSend(v151, "recordChangeTag");
        if (v129)
        {
          v130 = v129;
          v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
          v133 = v132;

        }
        else
        {
          v131 = 0;
          v133 = 0;
        }
        *(_QWORD *)(v126 + 56) = &type metadata for String;
        v134 = sub_1004CFC2C();
        *(_QWORD *)(v126 + 64) = v134;
        if (v133)
          v135 = v131;
        else
          v135 = 0;
        v136 = 0xE000000000000000;
        if (v133)
          v136 = v133;
        *(_QWORD *)(v126 + 32) = v135;
        *(_QWORD *)(v126 + 40) = v136;
        v137 = objc_msgSend(v68, "recordChangeTag");
        if (v137)
        {
          v139 = v137;
          v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
          v142 = v141;

          v143 = (uint64_t *)(v126 + 72);
          *(_QWORD *)(v126 + 96) = &type metadata for String;
          *(_QWORD *)(v126 + 104) = v134;
          if (v142)
          {
            *v143 = v140;
            v144 = v149;
LABEL_70:
            *(_QWORD *)(v126 + 80) = v142;
            v145 = static os_log_type_t.default.getter(v138);
            sub_100A06EBC((uint64_t)v127, &_mh_execute_header, v145, "Not updating board's CKShare because existing etag:%{public}@ <= new etag:%{public}@", 84, 2, v126);
            swift_setDeallocating(v126);
            swift_arrayDestroy(v126 + 32, 2, v153);

LABEL_71:
            v61 = v163;
            goto LABEL_26;
          }
        }
        else
        {
          v143 = (uint64_t *)(v126 + 72);
          *(_QWORD *)(v126 + 96) = &type metadata for String;
          *(_QWORD *)(v126 + 104) = v134;
        }
        v144 = v149;
        *v143 = 0;
        v142 = 0xE000000000000000;
        goto LABEL_70;
      }
    }
    else
    {
      v68 = v155;
      if (!v60)
        goto LABEL_53;
    }
    v67 = v60;
LABEL_39:
    swift_bridgeObjectRelease(v67);
    goto LABEL_40;
  }
  if (v25 == enum case for CKRecordChange.ChangeType.delete(_:))
  {
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v172, 0, 0);
    v34 = (id)static OS_os_log.shareState;
    v36 = static os_log_type_t.default.getter(v35);
    sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v36, "Record observer saw delete", 26, 2, (uint64_t)_swiftEmptyArrayStorage);

  }
  else
  {
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v172, 0, 0);
    v37 = (id)static OS_os_log.shareState;
    v38 = static os_log_type_t.error.getter(v37);
    sub_100A06EBC((uint64_t)v37, &_mh_execute_header, v38, "Record observer saw unknown record change type.", 47, 2, (uint64_t)_swiftEmptyArrayStorage);

    ((void (*)(void **, uint64_t))v15[1])(v22, v14);
  }
}

uint64_t sub_100CB6028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  _QWORD *v10;

  v9 = type metadata accessor for MainActor(0);
  v6[2] = v9;
  v6[3] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10140DF04);
  v6[4] = v10;
  *v10 = v6;
  v10[1] = sub_100688BDC;
  return sub_100C9CCDC(a5, a6, 0);
}

uint64_t type metadata accessor for CRLBoardLibrary()
{
  return objc_opt_self(_TtC8Freeform15CRLBoardLibrary);
}

uint64_t sub_100CB60F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[15] = v0;
  v2 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v1[16] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[17] = swift_task_alloc(v3);
  v1[18] = swift_task_alloc(v3);
  v4 = type metadata accessor for MainActor(0);
  v1[19] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v1[20] = v5;
  v1[21] = v6;
  return swift_task_switch(sub_100CB6194, v5, v6);
}

uint64_t sub_100CB6194()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CB61BC, 0, 0);
}

uint64_t sub_100CB61BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[22];
  v2 = swift_task_alloc(32);
  v0[23] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[24] = v3;
  v4 = sub_1004B804C(&qword_1013E4980);
  *v3 = v0;
  v3[1] = sub_100CB626C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 14, 0, 0, 0xD000000000000022, 0x8000000101009580, sub_100CED898, v2, v4);
}

uint64_t sub_100CB626C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CB65C4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 184));
    v4 = sub_100CB62D8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CB62D8()
{
  _QWORD *v0;

  v0[26] = v0[14];
  return swift_task_switch(sub_100CB62F0, v0[20], v0[21]);
}

uint64_t sub_100CB62F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t inited;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 248) = v3;
  v4 = -1;
  v5 = -1 << v3;
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 56);
  if (!v6)
  {
    v24 = 63 - v5;
    if (v24 > 0x7F)
    {
      v25 = *(_QWORD *)(v1 + 64);
      if (v25)
      {
        v7 = 1;
LABEL_11:
        v9 = (v25 - 1) & v25;
        v8 = __clz(__rbit64(v25)) + (v7 << 6);
        goto LABEL_5;
      }
      if (v24 >= 0xC0)
      {
        v25 = *(_QWORD *)(v1 + 72);
        if (v25)
        {
          v7 = 2;
          goto LABEL_11;
        }
        if (v24 >= 0x100)
        {
          v25 = *(_QWORD *)(v1 + 80);
          if (v25)
          {
            v7 = 3;
            goto LABEL_11;
          }
          if (v24 >= 0x140)
          {
            v25 = *(_QWORD *)(v1 + 88);
            if (v25)
            {
              v7 = 4;
              goto LABEL_11;
            }
            v26 = 0;
            v27 = v24 >> 6;
            if (v27 <= 5)
              v27 = 5;
            v28 = v27 - 5;
            while (v28 != v26)
            {
              v25 = *(_QWORD *)(v1 + 96 + 8 * v26++);
              if (v25)
              {
                v7 = v26 + 4;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
    v29 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    v31 = *(_QWORD *)(v0 + 136);
    swift_release(v1);
    swift_release(v30);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v7 = 0;
  v8 = __clz(__rbit64(v6));
  v9 = (v6 - 1) & v6;
LABEL_5:
  *(_QWORD *)(v0 + 216) = v7;
  *(_QWORD *)(v0 + 224) = v9;
  v10 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 144);
  sub_1004B8460(*(_QWORD *)(v1 + 48) + *(_QWORD *)(v2 + 72) * v8, v11, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84E0(v11, v10, type metadata accessor for CRLBoardIdentifier);
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 88, 0, 0);
  v12 = (void *)static OS_os_log.crlBoardLibrary;
  v13 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v13, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v15 = v12;
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v16;
  *(_QWORD *)(inited + 40) = v18;
  v20 = static os_log_type_t.default.getter(v19);
  sub_100A06EBC((uint64_t)v15, &_mh_execute_header, v20, "Found discardable board %{public}@, marking as not discardable", 62, 2, inited);
  swift_setDeallocating(inited);
  v21 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v21);

  v22 = (_QWORD *)swift_task_alloc(dword_10140DF1C);
  *(_QWORD *)(v0 + 232) = v22;
  *v22 = v0;
  v22[1] = sub_100CB6640;
  return sub_100CB2E98(*(_QWORD *)(v0 + 136));
}

uint64_t sub_100CB65C4()
{
  _QWORD *v0;

  swift_task_dealloc(v0[23]);
  return swift_task_switch(sub_100CB65FC, v0[20], v0[21]);
}

uint64_t sub_100CB65FC()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB6640()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CB6964;
  else
    v4 = sub_100CB66A0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 168));
}

uint64_t sub_100CB66A0()
{
  uint64_t v0;
  uint64_t result;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = sub_1004B84A4(*(_QWORD *)(v0 + 136), type metadata accessor for CRLBoardIdentifier);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  if (!v3)
  {
    v19 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
    }
    else
    {
      v20 = (unint64_t)((1 << *(_BYTE *)(v0 + 248)) + 63) >> 6;
      result = *(_QWORD *)(v0 + 208);
      if (v19 >= v20)
        goto LABEL_20;
      v21 = result + 56;
      v22 = *(_QWORD *)(result + 56 + 8 * v19);
      ++v2;
      if (v22)
      {
LABEL_9:
        v4 = (v22 - 1) & v22;
        v5 = __clz(__rbit64(v22)) + (v2 << 6);
        goto LABEL_3;
      }
      v2 = v19 + 1;
      if (v19 + 1 >= v20)
        goto LABEL_20;
      v22 = *(_QWORD *)(v21 + 8 * v2);
      if (v22)
        goto LABEL_9;
      v2 = v19 + 2;
      if (v19 + 2 >= v20)
        goto LABEL_20;
      v22 = *(_QWORD *)(v21 + 8 * v2);
      if (v22)
        goto LABEL_9;
      v23 = v19 + 3;
      if (v23 >= v20)
      {
LABEL_20:
        v24 = *(_QWORD *)(v0 + 144);
        v25 = *(_QWORD *)(v0 + 152);
        v26 = *(_QWORD *)(v0 + 136);
        swift_release(result);
        swift_release(v25);
        swift_task_dealloc(v24);
        swift_task_dealloc(v26);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v22 = *(_QWORD *)(v21 + 8 * v23);
      if (v22)
      {
        v2 = v23;
        goto LABEL_9;
      }
      while (1)
      {
        v2 = v23 + 1;
        if (__OFADD__(v23, 1))
          break;
        if (v2 >= v20)
          goto LABEL_20;
        v22 = *(_QWORD *)(v21 + 8 * v2);
        ++v23;
        if (v22)
          goto LABEL_9;
      }
    }
    __break(1u);
    return result;
  }
  v4 = (v3 - 1) & v3;
  v5 = __clz(__rbit64(v3)) | (v2 << 6);
  result = *(_QWORD *)(v0 + 208);
LABEL_3:
  *(_QWORD *)(v0 + 216) = v2;
  *(_QWORD *)(v0 + 224) = v4;
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  sub_1004B8460(*(_QWORD *)(result + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 128) + 72) * v5, v7, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84E0(v7, v6, type metadata accessor for CRLBoardIdentifier);
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 88, 0, 0);
  v8 = (void *)static OS_os_log.crlBoardLibrary;
  v9 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v9, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v11 = v8;
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v12;
  *(_QWORD *)(inited + 40) = v14;
  v16 = static os_log_type_t.default.getter(v15);
  sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v16, "Found discardable board %{public}@, marking as not discardable", 62, 2, inited);
  swift_setDeallocating(inited);
  v17 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v17);

  v18 = (_QWORD *)swift_task_alloc(dword_10140DF1C);
  *(_QWORD *)(v0 + 232) = v18;
  *v18 = v0;
  v18[1] = sub_100CB6640;
  return sub_100CB2E98(*(_QWORD *)(v0 + 136));
}

uint64_t sub_100CB6964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 152));
  sub_1004B84A4(v2, type metadata accessor for CRLBoardIdentifier);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100CB69C8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v3 = v1;
  if (qword_1013DDAA0 != -1)
  {
    swift_once(&qword_1013DDAA0, sub_100A7424C);
    v1 = v3;
  }
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  objc_msgSend(v1, "addObserver:selector:name:object:", v0, "updateStoreSnapshotForHierarchyNotification:", qword_101480A48, v2);
  if (qword_1013DDAA8 != -1)
    swift_once(&qword_1013DDAA8, sub_100A74280);
  objc_msgSend(v3, "addObserver:selector:name:object:", v0, "updateBoardMetadataForNotification:", qword_101480A50, v2);
  if (qword_1013DDAB0 != -1)
    swift_once(&qword_1013DDAB0, sub_100A742B4);
  objc_msgSend(v3, "addObserver:selector:name:object:", v0, "updateBoardMetadataForNotification:", qword_101480A58, v2);
  if (qword_1013DDAB8 != -1)
    swift_once(&qword_1013DDAB8, sub_100A742E8);
  objc_msgSend(v3, "addObserver:selector:name:object:", v0, "updateBoardMetadataForNotification:", qword_101480A60, v2);
  if (qword_1013DDAC0 != -1)
    swift_once(&qword_1013DDAC0, sub_100A7431C);
  objc_msgSend(v3, "addObserver:selector:name:object:", v0, "updateBoardMetadataForNotification:", qword_101480A68, v2);
  if (qword_1013DDAC8 != -1)
    swift_once(&qword_1013DDAC8, sub_100A74350);
  objc_msgSend(v3, "addObserver:selector:name:object:", v0, "updateBoardMetadataForNotification:", qword_101480A70, v2);

}

uint64_t sub_100CB6BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  v5 = sub_1004B804C(&qword_101407318);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  v4[18] = swift_task_alloc(v7);
  v8 = sub_1004B804C(&qword_10140E1A0);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_10140E1A8);
  v4[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[21] = v10;
  v4[22] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013E01F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[23] = swift_task_alloc(v11);
  v4[24] = swift_task_alloc(v11);
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  v4[25] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[26] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v4[27] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v15);
  v4[29] = swift_task_alloc(v15);
  v16 = type metadata accessor for MainActor(0);
  v4[30] = v16;
  v4[31] = static MainActor.shared.getter(v16);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
  v4[32] = v17;
  v4[33] = v18;
  return swift_task_switch(sub_100CB6D64, v17, v18);
}

void sub_100CB6D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  id v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  void *v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 200);
  v52 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = sub_1004B7878(&qword_1013E9A00, type metadata accessor for CRLBoardIdentifier, (uint64_t)&unk_100F0215C);
  v48 = Dictionary.init(minimumCapacity:)(v3, v1, &type metadata for CRLDeleteConfirmationType, v4);
  v49 = v2 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v2 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(v2 + 56);
  v50 = (unint64_t)(63 - v6) >> 6;
  v51 = v2;
  swift_bridgeObjectRetain(v2);
  v8 = 0;
  while (1)
  {
    if (v7)
    {
      v55 = (v7 - 1) & v7;
      v53 = v8;
      v12 = __clz(__rbit64(v7)) | (v8 << 6);
      goto LABEL_21;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v50)
      goto LABEL_29;
    v14 = *(_QWORD *)(v49 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v50)
        goto LABEL_29;
      v14 = *(_QWORD *)(v49 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v50)
          goto LABEL_29;
        v14 = *(_QWORD *)(v49 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v55 = (v14 - 1) & v14;
    v53 = v15;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_21:
    v18 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 232);
    v19 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 192);
    v54 = *(void **)(v0 + 104);
    sub_1004B8460(*(_QWORD *)(v51 + 48) + *(_QWORD *)(v52 + 72) * v12, v17, type metadata accessor for CRLBoardIdentifier);
    v22 = type metadata accessor for TaskPriority(0);
    v23 = *(_QWORD *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
    sub_1004B84E0(v17, v18, type metadata accessor for CRLBoardIdentifier);
    v24 = *(unsigned __int8 *)(v52 + 80);
    v25 = (v24 + 40) & ~v24;
    v26 = (_QWORD *)swift_allocObject(&unk_10129FF00, v25 + v19, v24 | 7);
    v26[2] = 0;
    v27 = v26 + 2;
    v26[3] = 0;
    v26[4] = v54;
    sub_1004B84E0(v18, (uint64_t)v26 + v25, type metadata accessor for CRLBoardIdentifier);
    sub_1004CB7BC(v21, v20, &qword_1013E01F0);
    LODWORD(v18) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22);
    v28 = v54;
    v30 = *(_QWORD *)(v0 + 184);
    if ((_DWORD)v18 == 1)
    {
      sub_1004CB800(*(_QWORD *)(v0 + 184), &qword_1013E01F0);
      v31 = 0;
    }
    else
    {
      v32 = TaskPriority.rawValue.getter(v29);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v30, v22);
      v31 = v32;
    }
    v8 = v53;
    v33 = *v27;
    if (*v27)
    {
      v34 = v26[3];
      ObjectType = swift_getObjectType(*v27);
      swift_unknownObjectRetain(v33);
      v36 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v34);
      v38 = v37;
      swift_unknownObjectRelease(v33);
    }
    else
    {
      v36 = 0;
      v38 = 0;
    }
    v39 = **(_QWORD **)(v0 + 88);
    v40 = swift_allocObject(&unk_10129FF28, 32, 7);
    *(_QWORD *)(v40 + 16) = &unk_10140E1B8;
    *(_QWORD *)(v40 + 24) = v26;
    v41 = v38 | v36;
    if (v38 | v36)
    {
      v41 = v0 + 16;
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = v36;
      *(_QWORD *)(v0 + 40) = v38;
    }
    v9 = *(_QWORD *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 48) = 1;
    *(_QWORD *)(v0 + 56) = v41;
    *(_QWORD *)(v0 + 64) = v39;
    v11 = swift_task_create(v31 | 0x3100, v0 + 48, v10, &unk_10140E1C8);
    swift_release(v11);
    sub_1004CB800(v9, &qword_1013E01F0);
    v7 = v55;
  }
  v16 = v8 + 4;
  if (v8 + 4 >= v50)
  {
LABEL_29:
    v42 = *(_QWORD *)(v0 + 112);
    v43 = *(_QWORD **)(v0 + 88);
    v44 = swift_release(*(_QWORD *)(v0 + 96));
    v45 = TaskGroup.makeAsyncIterator()(*v43, v42, v44);
    *(_QWORD *)(v0 + 272) = v48;
    v46 = static MainActor.shared.getter(v45);
    *(_QWORD *)(v0 + 280) = v46;
    v47 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 288) = v47;
    *v47 = v0;
    v47[1] = sub_100CB71A0;
    TaskGroup.Iterator.next(isolation:)(*(_QWORD *)(v0 + 152), v46, &protocol witness table for MainActor, *(_QWORD *)(v0 + 160));
    return;
  }
  v14 = *(_QWORD *)(v49 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v50)
      goto LABEL_29;
    v14 = *(_QWORD *)(v49 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_100CB71A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 280);
  swift_task_dealloc(*(_QWORD *)(*v0 + 288));
  swift_release(v2);
  return swift_task_switch(sub_100CB71F4, *(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 264));
}

uint64_t sub_100CB71F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 272);
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 144);
    v42 = *(_QWORD *)(v0 + 136);
    v43 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD **)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(v10, *(_QWORD *)(v0 + 160));
    swift_release(v5);
    *v11 = v4;
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v1);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(int *)(v2 + 48);
  v17 = *(_BYTE *)(v1 + v16);
  sub_1004B84E0(v1, v13, type metadata accessor for CRLBoardIdentifier);
  *(_BYTE *)(v13 + v16) = v17;
  v18 = *(int *)(v2 + 48);
  sub_1004B8460(v13, v14, type metadata accessor for CRLBoardIdentifier);
  *(_BYTE *)(v14 + v18) = v17;
  v19 = *(int *)(v2 + 48);
  sub_1004B8460(v13, v15, type metadata accessor for CRLBoardIdentifier);
  *(_BYTE *)(v15 + v19) = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *(_QWORD *)(v0 + 72) = v4;
  v22 = sub_100843264(v14);
  v23 = *(_QWORD *)(v4 + 16);
  v24 = (v21 & 1) == 0;
  result = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
  }
  else
  {
    v25 = v21;
    if (*(_QWORD *)(*(_QWORD *)(v0 + 272) + 24) >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100834D3C();
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 136);
      sub_100824650(result, isUniquelyReferenced_nonNull_native);
      v27 = sub_100843264(v26);
      if ((v25 & 1) != (v28 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 200));
      v22 = v27;
    }
    v29 = *(_QWORD **)(v0 + 72);
    if ((v25 & 1) != 0)
    {
      *(_BYTE *)(v29[7] + v22) = v17;
LABEL_14:
      v35 = *(_QWORD *)(v0 + 136);
      v36 = *(_QWORD *)(v0 + 144);
      v37 = *(_QWORD *)(v0 + 128);
      swift_bridgeObjectRelease();
      sub_1004B84A4(v35, type metadata accessor for CRLBoardIdentifier);
      sub_1004CB800(v36, &qword_101407318);
      v38 = sub_1004B84A4(v37, type metadata accessor for CRLBoardIdentifier);
      *(_QWORD *)(v0 + 272) = v29;
      v39 = static MainActor.shared.getter(v38);
      *(_QWORD *)(v0 + 280) = v39;
      v40 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
      *(_QWORD *)(v0 + 288) = v40;
      *v40 = v0;
      v40[1] = sub_100CB71A0;
      return TaskGroup.Iterator.next(isolation:)(*(_QWORD *)(v0 + 152), v39, &protocol witness table for MainActor, *(_QWORD *)(v0 + 160));
    }
    v30 = *(_QWORD *)(v0 + 208);
    v31 = *(_QWORD *)(v0 + 136);
    v29[(v22 >> 6) + 8] |= 1 << v22;
    result = sub_1004B8460(v31, v29[6] + *(_QWORD *)(v30 + 72) * v22, type metadata accessor for CRLBoardIdentifier);
    *(_BYTE *)(v29[7] + v22) = v17;
    v32 = v29[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (!v33)
    {
      v29[2] = v34;
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100CB7524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;

  v5[2] = a1;
  v5[3] = a5;
  v7 = (_QWORD *)swift_task_alloc(dword_10140E1D4);
  v5[4] = v7;
  *v7 = v5;
  v7[1] = sub_100CB757C;
  return sub_100CB7638(a5);
}

uint64_t sub_100CB757C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_BYTE *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100CB75D8, 0, 0);
}

uint64_t sub_100CB75D8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(int *)(sub_1004B804C(&qword_101407318) + 48);
  sub_1004B8460(v3, v2, type metadata accessor for CRLBoardIdentifier);
  *(_BYTE *)(v2 + v4) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB7638(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[30] = a1;
  v2[31] = v1;
  v3 = sub_1004B804C(&qword_1013F5478);
  v2[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v2[33] = v4;
  v2[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[35] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CB76EC, v6, v7);
}

uint64_t sub_100CB76EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  id *v8;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  unsigned __int8 v15;
  id v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t inited;
  id v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 280));
  v2 = (_QWORD *)(v1 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v3 = v2[1];
  if (*v2)
    v4 = 0;
  else
    v4 = v3 == 0xE000000000000000;
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v2, v3, 0, 0xE000000000000000, 0) & 1) == 0)
  {
    v9 = 3;
    goto LABEL_15;
  }
  sub_100C9F8F8(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 272));
  v5 = *(_QWORD *)(v0 + 256);
  sub_1004CB7BC(*(_QWORD *)(v0 + 272) + *(int *)(*(_QWORD *)(v0 + 264) + 28), v5, &qword_1013F5478);
  v6 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  v8 = *(id **)(v0 + 256);
  if (v7 == 1)
  {
    sub_1004CB800(*(_QWORD *)(v0 + 256), &qword_1013F5478);
    goto LABEL_12;
  }
  v10 = *v8;
  v11 = (char *)*v8;
  sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
  if (!v10)
  {
LABEL_12:
    sub_1004B84A4(*(_QWORD *)(v0 + 272), type metadata accessor for CRLBoardViewModelMetadata);
    v13 = (void *)objc_opt_self(NSUserDefaults);
    v14 = objc_msgSend(v13, "standardUserDefaults");
    v15 = objc_msgSend(v14, "BOOLForKey:", CFSTR("CRLDidShowDeleteConfirmationAlert"));

    if ((v15 & 1) != 0)
    {
      v9 = 0;
    }
    else
    {
      v16 = objc_msgSend(v13, "standardUserDefaults");
      v9 = 1;
      objc_msgSend(v16, "setBool:forKey:", 1, CFSTR("CRLDidShowDeleteConfirmationAlert"));

    }
    goto LABEL_15;
  }
  v12 = *(id *)&v11[OBJC_IVAR____TtC8Freeform27CRLCollaborationParticipant_ckShareParticipant];

  if (objc_msgSend(v12, "role") == (id)1)
  {
    sub_1004B84A4(*(_QWORD *)(v0 + 272), type metadata accessor for CRLBoardViewModelMetadata);

    v9 = 2;
  }
  else
  {
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    v19 = *(_QWORD *)(v0 + 272);
    swift_beginAccess(&static OS_os_log.shareState, v0 + 184, 0, 0);
    v20 = (void *)static OS_os_log.shareState;
    v21 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v21, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = 0xE000000000000000;
    v23 = v20;
    v24 = static os_log_type_t.error.getter(v23);
    sub_100A06EBC((uint64_t)v23, &_mh_execute_header, v24, "Board identifier says we're the owner but existing share metadata does not: %@", 78, 2, inited);

    swift_setDeallocating(inited);
    v25 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v25);

    sub_1004B84A4(v19, type metadata accessor for CRLBoardViewModelMetadata);
    v9 = 3;
  }
LABEL_15:
  v17 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t sub_100CB7C70(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[14] = a1;
  v2[15] = v1;
  v4 = type metadata accessor for MainActor(0);
  v2[16] = v4;
  v2[17] = static MainActor.shared.getter(v4);
  v5 = (_QWORD *)swift_task_alloc(dword_10140DEFC);
  v2[18] = v5;
  *v5 = v2;
  v5[1] = sub_100CB7CEC;
  return sub_100C9C704(a1, 0);
}

uint64_t sub_100CB7CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 128);
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc(v4);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v3[21] = v7;
  v3[22] = v6;
  if (v1)
    v8 = sub_100CB8050;
  else
    v8 = sub_100CB7D80;
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_100CB7D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 152);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 112);
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 120)
                               + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController)
                   + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
    v4 = swift_task_alloc(32);
    *(_QWORD *)(v4 + 16) = v2;
    swift_bridgeObjectRetain(v3);
    v5 = sub_100C9D5E8((uint64_t (*)(id *))sub_100BBC47C, v4, v3);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v4);
    if (v5)
    {
      if (*((_BYTE *)v5 + OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_accepted) == 1)
        sub_1004DF000(v5);

    }
    v6 = (_QWORD *)swift_task_alloc(dword_10140F0DC);
    *(_QWORD *)(v0 + 184) = v6;
    *v6 = v0;
    v6[1] = sub_100CB7FB4;
    return sub_100D2BF04(*(_QWORD *)(v0 + 112), v1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 136));
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v0 + 88, 0, 0);
    v8 = (void *)static OS_os_log.shareState;
    v9 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v9, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v11 = v8;
    v12 = UUID.uuidString.getter(v11);
    v14 = v13;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v15 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v15;
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 40) = v14;
    v16 = static os_log_type_t.error.getter(v15);
    sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v16, "No CKShare for shared-to-me board: %{public}@", 45, 2, inited);
    swift_setDeallocating(inited);
    v17 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v17);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100CB7FB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CB8084;
  else
    v4 = sub_100CB8014;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t sub_100CB8014()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 136));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB8050()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CB8084()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

void sub_100CB80C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  id v5;
  __n128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v1 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pauseSnapshotUpdateCount;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pauseSnapshotUpdateCount);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pauseSnapshotUpdateCount) = v4;
  if (v4 == 1)
  {
    if (qword_1013DD748 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.crlBoardLibrary, v16, 0, 0);
      v5 = (id)static OS_os_log.crlBoardLibrary;
      v7 = static os_log_type_t.default.getter(v6);
      sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v7, "Pausing snapshot updates", 24, 2, (uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_8;
    }
LABEL_10:
    swift_once(&qword_1013DD748, sub_100A023E8);
    goto LABEL_4;
  }
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v16, 0, 0);
  v8 = (void *)static OS_os_log.crlBoardLibrary;
  v9 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v9, &v15);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v11 = *(_QWORD *)(v0 + v1);
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  *(_QWORD *)(inited + 32) = v11;
  v5 = v8;
  v13 = static os_log_type_t.default.getter(v12);
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v13, "Snapshot update pause counter incremented to: %d", 48, 2, inited);
  swift_setDeallocating(inited);
  v14 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v14);
LABEL_8:

}

uint64_t sub_100CB8270(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100CB82DC, v4, v5);
}

uint64_t sub_100CB82DC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CB8304, 0, 0);
}

uint64_t sub_100CB8304()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[7];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[8] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_100CB83A8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000026, 0x800000010100A9C0, sub_100CECDE4, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CB83A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CB18EC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_100CB8414;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CB8414()
{
  return swift_task_switch(sub_100CB8428, 0, 0);
}

uint64_t sub_100CB8428()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[7];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[11] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v4;
  *v4 = v0;
  v4[1] = sub_100CB84CC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD00000000000002BLL, 0x800000010100A9F0, sub_100CECDEC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CB84CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CB8538;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v4 = sub_100CA6CA4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CB8538()
{
  _QWORD *v0;

  swift_task_dealloc(v0[11]);
  return swift_task_switch(sub_100CA23FC, v0[5], v0[6]);
}

uint64_t sub_100CB8570(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[7] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[8] = v4;
  v2[9] = v5;
  return swift_task_switch(sub_100CB85DC, v4, v5);
}

uint64_t sub_100CB85DC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  __n128 v3;
  uint64_t v4;

  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v1 = *(_QWORD *)(v0 + 48);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 16, 0, 0);
  v2 = (id)static OS_os_log.crlBoardLibrary;
  v4 = static os_log_type_t.default.getter(v3);
  sub_100A06EBC((uint64_t)v2, &_mh_execute_header, v4, "Called hideFromRecentlyDeleted in board library", 47, 2, (uint64_t)_swiftEmptyArrayStorage);

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CB86A8, 0, 0);
}

uint64_t sub_100CB86A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[10];
  v2 = v0[5];
  v3 = swift_task_alloc(32);
  v0[11] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v4;
  *v4 = v0;
  v4[1] = sub_100CB874C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000035, 0x800000010100AF20, sub_100CECF54, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CB874C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CB87FC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v4 = sub_100CB87B8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CB87B8()
{
  uint64_t v0;

  return swift_task_switch(sub_100CB87C8, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_100CB87C8()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CB87FC()
{
  _QWORD *v0;

  swift_task_dealloc(v0[11]);
  return swift_task_switch(sub_10096F5EC, v0[8], v0[9]);
}

void sub_100CB8834(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  id v21;
  void *v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char *v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60[3];

  v55 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v55);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v5);
  v53 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v54);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return;
  v9 = a1;
  v10 = objc_msgSend(v9, "children");
  v11 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  v56 = (char *)&_swiftEmptySetSingleton;
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v28 = v12;
    else
      v28 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v13 = _CocoaArrayWrapper.endIndex.getter(v28);
    v51 = v9;
    if (v13)
      goto LABEL_4;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v12);
    v51 = v9;
    if (v13)
    {
LABEL_4:
      if (v13 < 1)
        goto LABEL_50;
      v50 = v1;
      v14 = 0;
      v52 = v8;
      do
      {
        if ((v12 & 0xC000000000000001) != 0)
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
        else
          v21 = *(id *)(v12 + 8 * v14 + 32);
        v22 = v21;
        sub_1004B8460((uint64_t)v21 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v8, type metadata accessor for CRLBoardLibraryViewModel.Item);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v54);
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            v24 = v53;
            sub_1004B84E0((uint64_t)v8, v53, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            sub_100BCAD68();
            v16 = v25;
            v17 = v26;
            v18 = v24;
            v19 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
            v8 = v52;
          }
          else
          {
            v15 = (uint64_t *)&v8[*(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48)];
            v16 = *v15;
            v17 = v15[1];
            v18 = (uint64_t)v8;
            v19 = type metadata accessor for CRLBoardIdentifier;
          }
          sub_1004B84A4(v18, v19);
        }
        else
        {
          v16 = sub_100BCE3AC();
          v17 = v27;
        }
        ++v14;
        sub_100AD8690(v60, v16, v17);
        v20 = v60[1];

        swift_bridgeObjectRelease(v20);
      }
      while (v13 != v14);
      swift_bridgeObjectRelease_n(v12, 2);
      v52 = v56;
      v1 = v50;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease_n(v12, 2);
  v52 = (char *)&_swiftEmptySetSingleton;
LABEL_22:
  v29 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v29, v60, 0, 0);
  v30 = *v29;
  v59 = &_swiftEmptySetSingleton;
  v31 = *(_QWORD *)(v30 + 64);
  v53 = v30 + 64;
  v32 = 1 << *(_BYTE *)(v30 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v54 = (unint64_t)(v32 + 63) >> 6;
  swift_bridgeObjectRetain_n(v30, 2);
  v35 = 0;
  while (1)
  {
    if (v34)
    {
      v36 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v37 = v36 | (v35 << 6);
      goto LABEL_26;
    }
    v46 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v54)
      goto LABEL_46;
    v47 = *(_QWORD *)(v53 + 8 * v46);
    ++v35;
    if (!v47)
    {
      v35 = v46 + 1;
      if (v46 + 1 >= v54)
        goto LABEL_46;
      v47 = *(_QWORD *)(v53 + 8 * v35);
      if (!v47)
      {
        v35 = v46 + 2;
        if (v46 + 2 >= v54)
          goto LABEL_46;
        v47 = *(_QWORD *)(v53 + 8 * v35);
        if (!v47)
        {
          v35 = v46 + 3;
          if (v46 + 3 >= v54)
            goto LABEL_46;
          v47 = *(_QWORD *)(v53 + 8 * v35);
          if (!v47)
          {
            v35 = v46 + 4;
            if (v46 + 4 >= v54)
              goto LABEL_46;
            v47 = *(_QWORD *)(v53 + 8 * v35);
            if (!v47)
              break;
          }
        }
      }
    }
LABEL_45:
    v34 = (v47 - 1) & v47;
    v37 = __clz(__rbit64(v47)) + (v35 << 6);
LABEL_26:
    v38 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v37);
    v39 = *(char **)(*(_QWORD *)(v38 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
    v40 = *(_QWORD *)&v39[OBJC_IVAR____TtC8Freeform8CRLBoard_data] + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v40, &v56, 0, 0);
    sub_1004B8460(v40, (uint64_t)v4, type metadata accessor for CRLBoardCRDTData);
    swift_retain(v38);
    v41 = v39;
    v42 = sub_1004B804C(&qword_1013E1980);
    CRRegister.wrappedValue.getter(v42);
    v44 = v57;
    v43 = v58;
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardCRDTData);

    sub_100AD8690(&v57, v44, v43);
    v45 = v58;
    swift_release(v38);
    swift_bridgeObjectRelease(v45);
  }
  v48 = v46 + 5;
  if (v48 >= v54)
  {
LABEL_46:
    swift_release(v30);
    swift_bridgeObjectRelease(v30);
    sub_100CA0650((uint64_t)v59, (uint64_t)v52);

    return;
  }
  v47 = *(_QWORD *)(v53 + 8 * v48);
  if (v47)
  {
    v35 = v48;
    goto LABEL_45;
  }
  while (1)
  {
    v35 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v35 >= v54)
      goto LABEL_46;
    v47 = *(_QWORD *)(v53 + 8 * v35);
    ++v48;
    if (v47)
      goto LABEL_45;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

uint64_t sub_100CB8DC0(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v5 + 504) = a2;
  *(_QWORD *)(v5 + 512) = v4;
  *(_BYTE *)(v5 + 1073) = a4;
  *(_BYTE *)(v5 + 1072) = a3;
  *(_QWORD *)(v5 + 496) = a1;
  v6 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  *(_QWORD *)(v5 + 520) = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 528) = swift_task_alloc(v7);
  *(_QWORD *)(v5 + 536) = swift_task_alloc(v7);
  v8 = type metadata accessor for CRLBoardViewModelMetadata(0);
  *(_QWORD *)(v5 + 544) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 552) = v9;
  *(_QWORD *)(v5 + 560) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013E4690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 568) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 576) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 584) = swift_task_alloc(v10);
  v11 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  *(_QWORD *)(v5 + 592) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLBoardIdentifierStorage(0);
  *(_QWORD *)(v5 + 600) = v12;
  *(_QWORD *)(v5 + 608) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLBoardCRDTData(0);
  *(_QWORD *)(v5 + 616) = v13;
  *(_QWORD *)(v5 + 624) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  *(_QWORD *)(v5 + 632) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 640) = swift_task_alloc(v15);
  *(_QWORD *)(v5 + 648) = swift_task_alloc(v15);
  *(_QWORD *)(v5 + 656) = swift_task_alloc(v15);
  *(_QWORD *)(v5 + 664) = swift_task_alloc(v15);
  *(_QWORD *)(v5 + 672) = swift_task_alloc(v15);
  *(_QWORD *)(v5 + 680) = swift_task_alloc(v15);
  v16 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 688) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v5 + 696) = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 704) = swift_task_alloc(v18);
  *(_QWORD *)(v5 + 712) = swift_task_alloc(v18);
  *(_QWORD *)(v5 + 720) = swift_task_alloc(v18);
  v19 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 728) = v19;
  *(_QWORD *)(v5 + 736) = static MainActor.shared.getter(v19);
  v20 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 744) = v20;
  *(_QWORD *)(v5 + 752) = v21;
  return swift_task_switch(sub_100CB8FEC, v20, v21);
}

uint64_t sub_100CB8FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  char v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t inited;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  int v94;
  void (*v95)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  void *v112;
  void *v113;
  uint64_t v114;
  char *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v1 = *(_QWORD *)(v0 + 720);
  v2 = *(_QWORD *)(v0 + 696);
  v3 = *(_QWORD *)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 512);
  v142 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot;
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  swift_bridgeObjectRetain(v5);
  sub_100BCB904();
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v1;
  sub_1007C2808(1, (uint64_t (*)(id))sub_100BBC4B4, v6, v5);
  v8 = v7;
  *(_QWORD *)(v0 + 760) = v7;
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v6);
  v151 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v151(v1, v3);
  if (!v8)
  {
    v76 = *(_QWORD *)(v0 + 592);
    v77 = *(_QWORD *)(v0 + 504);
    swift_release(*(_QWORD *)(v0 + 736));
    v78 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v78, v0 + 128);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    sub_1004B8460(v77, v76, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    sub_100BCAD68();
    v81 = v80;
    v83 = v82;
    sub_1004B84A4(v76, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v81;
    v84 = inited + 32;
    *(_QWORD *)(inited + 40) = v83;
    sub_100757E04(&_mh_execute_header, (uint64_t)"_duplicateBoards(_:in:duplicateMetadata:isForSendACopy:)", 56, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 1436, "Folder not found: %@", 20, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"_duplicateBoards(_:in:duplicateMetadata:isForSendACopy:)", 56, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 1436, (uint64_t)"Folder not found: %@", 20, 2u);
    swift_setDeallocating(inited);
    v85 = *(_QWORD *)(inited + 16);
    v86 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v84, v85, v86);
    v87 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v87, 0, 0);
    *v88 = 1;
    swift_willThrow(v89);
    v122 = *(_QWORD *)(v0 + 712);
    v123 = *(_QWORD *)(v0 + 704);
    v124 = *(_QWORD *)(v0 + 680);
    v125 = *(_QWORD *)(v0 + 672);
    v126 = *(_QWORD *)(v0 + 664);
    v127 = *(_QWORD *)(v0 + 656);
    v128 = *(_QWORD *)(v0 + 648);
    v129 = *(_QWORD *)(v0 + 640);
    v130 = *(_QWORD *)(v0 + 624);
    v146 = *(_QWORD *)(v0 + 608);
    v148 = *(_QWORD *)(v0 + 592);
    v150 = *(_QWORD *)(v0 + 584);
    v152 = *(_QWORD *)(v0 + 576);
    v154 = *(_QWORD *)(v0 + 568);
    v157 = *(_QWORD *)(v0 + 560);
    v160 = *(_QWORD *)(v0 + 536);
    v163 = *(_QWORD *)(v0 + 528);
    swift_task_dealloc(*(_QWORD *)(v0 + 720));
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v146);
    swift_task_dealloc(v148);
    swift_task_dealloc(v150);
    swift_task_dealloc(v152);
    swift_task_dealloc(v154);
    swift_task_dealloc(v157);
    swift_task_dealloc(v160);
    swift_task_dealloc(v163);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = *(_QWORD *)(v0 + 496);
  v139 = v4;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v138 = *(_QWORD *)(v0 + 496);
    else
      v138 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v10 = _CocoaArrayWrapper.endIndex.getter(v138);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v153 = (_QWORD *)v0;
  v140 = (unint64_t)v9 >> 62;
  v141 = v9;
  if (v10)
  {
    result = sub_1006006EC(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0)
    {
      __break(1u);
      return result;
    }
    v12 = 0;
    v147 = v0 + 368;
    v161 = *(_QWORD *)(v0 + 696);
    v144 = v9 & 0xC000000000000001;
    v145 = *(_QWORD *)(v0 + 600);
    v143 = *(_QWORD *)(v0 + 496) + 32;
    v149 = v10;
    do
    {
      if (v144)
      {
        v13 = v153;
        v14 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v153[62]);
      }
      else
      {
        v14 = (char *)*(id *)(v143 + 8 * v12);
        v13 = v153;
      }
      v15 = v13[89];
      v16 = v13[88];
      v155 = v13[86];
      v17 = v13[78];
      v18 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
      v19 = *(_QWORD *)&v14[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
      v20 = v19 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v19 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v147, 0, 0);
      sub_1004B8460(v20, v17, type metadata accessor for CRLBoardCRDTData);
      swift_retain(v19);
      v21 = sub_1004B804C(&qword_1013E1A80);
      CRRegister.wrappedValue.getter(v21);
      sub_1004B84A4(v17, type metadata accessor for CRLBoardCRDTData);
      v22 = swift_release(v19);
      v158 = v14;
      v23 = (uint64_t *)(*(_QWORD *)&v14[v18] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      v25 = *v23;
      v24 = v23[1];
      v26 = v155;
      v156 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v161 + 16);
      v156(v16, v15, v26, v22);
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
      v29 = v25 == v27 && v24 == v28;
      if (v29
        || (v30 = v28,
            v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, v27, v28, 0),
            swift_bridgeObjectRetain(v24),
            v32 = swift_bridgeObjectRelease(v30),
            (v31 & 1) != 0))
      {
        v32 = swift_bridgeObjectRelease(v24);
        v25 = 0;
        v24 = 0xE000000000000000;
      }
      v33 = v13[90];
      v34 = v13[89];
      v35 = v13[88];
      v36 = v13[86];
      v37 = v13[85];
      v38 = v13[84];
      v39 = v13[76];
      ((void (*)(uint64_t, uint64_t, __n128))v151)(v34, v36, v32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 32))(v39, v35, v36);
      v40 = (_QWORD *)(v39 + *(int *)(v145 + 20));
      *v40 = v25;
      v40[1] = v24;
      sub_1004B84E0(v39, v38, type metadata accessor for CRLBoardIdentifierStorage);
      sub_1004B84E0(v38, v37, type metadata accessor for CRLBoardIdentifier);
      ((void (*)(uint64_t, uint64_t, uint64_t))v156)(v33, v37, v36);
      v41 = sub_1004B84A4(v37, type metadata accessor for CRLBoardIdentifier);
      v42 = UUID.uuidString.getter(v41);
      v44 = v43;
      v151(v33, v36);

      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_1006006EC(0, *(_QWORD *)&_swiftEmptyArrayStorage[2] + 1, 1);
      v46 = _swiftEmptyArrayStorage[2];
      v45 = _swiftEmptyArrayStorage[3];
      if (*(_QWORD *)&v46 >= *(_QWORD *)&v45 >> 1)
        sub_1006006EC(*(_QWORD *)&v45 > 1uLL, *(_QWORD *)&v46 + 1, 1);
      ++v12;
      *(_QWORD *)&_swiftEmptyArrayStorage[2] = *(_QWORD *)&v46 + 1;
      v47 = &_swiftEmptyArrayStorage[2 * *(_QWORD *)&v46];
      *((_QWORD *)v47 + 4) = v42;
      *((_QWORD *)v47 + 5) = v44;
    }
    while (v149 != v12);
  }
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v48 = v153[74];
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v153 + 34, 0, 0);
  v49 = (void *)static OS_os_log.crlBoardLibrary;
  v50 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v153[96] = v50;
  v51 = swift_initStackObject(v50, v153 + 2);
  *(_OWORD *)(v51 + 16) = xmmword_100EF5A10;
  v52 = _swiftEmptyArrayStorage[2];
  *(_QWORD *)(v51 + 56) = &type metadata for Int;
  *(_QWORD *)(v51 + 64) = &protocol witness table for Int;
  *(double *)(v51 + 32) = v52;
  v153[55] = _swiftEmptyArrayStorage;
  v53 = v49;
  v54 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  v55 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
  v56 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v54, v55);
  v58 = v57;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  *(_QWORD *)(v51 + 96) = &type metadata for String;
  v59 = sub_1004CFC2C();
  v153[97] = v59;
  *(_QWORD *)(v51 + 104) = v59;
  *(_QWORD *)(v51 + 72) = v56;
  *(_QWORD *)(v51 + 80) = v58;
  v61 = static os_log_type_t.default.getter(v60);
  sub_100A06EBC((uint64_t)v53, &_mh_execute_header, v61, "Duplicating %d board(s): %@", 27, 2, v51);
  swift_setDeallocating(v51);
  v62 = sub_1004B804C(&qword_1013E0190);
  v153[98] = v62;
  swift_arrayDestroy(v51 + 32, 2, v62);

  sub_100CB80C0();
  v153[59] = &_swiftEmptySetSingleton;
  v153[60] = &_swiftEmptySetSingleton;
  v153[57] = &_swiftEmptySetSingleton;
  v153[58] = &_swiftEmptySetSingleton;
  v153[61] = &_swiftEmptySetSingleton;
  v63 = *(_QWORD *)(v139 + v142);
  v64 = sub_1004B804C(&qword_1013E1790);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v48, 1, 5, v64);
  v65 = swift_task_alloc(32);
  *(_QWORD *)(v65 + 16) = v48;
  swift_bridgeObjectRetain(v63);
  sub_1007C2808(1, (uint64_t (*)(id))sub_100CED894, v65, v63);
  v67 = v66;
  swift_bridgeObjectRelease(v63);
  swift_task_dealloc(v65);
  sub_1004B84A4(v48, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  sub_100CB8834(v67);
  v69 = v68;

  v153[56] = v69;
  v70 = v153[62];
  v71 = v153;
  if (v140)
  {
    if (v141 < 0)
      v90 = v153[62];
    else
      v90 = v141 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v70);
    v91 = _CocoaArrayWrapper.endIndex.getter(v90);
    v153[99] = v91;
    if (v91)
      goto LABEL_25;
LABEL_32:
    swift_bridgeObjectRelease(v153[62]);
    v153[119] = _swiftEmptyArrayStorage;
    v153[118] = &_swiftEmptySetSingleton;
    v92 = (_QWORD *)swift_task_alloc(dword_10140E1EC);
    v153[120] = v92;
    *v92 = v153;
    v92[1] = sub_100CBAFA8;
    return sub_100CA6AF8((uint64_t)&_swiftEmptySetSingleton);
  }
  v72 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v70);
  v153[99] = v72;
  if (!v72)
    goto LABEL_32;
LABEL_25:
  v73 = (unsigned __int8 *)(v153 + 134);
  v74 = v153[62];
  v153[100] = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store;
  v153[101] = _swiftEmptyArrayStorage;
  if ((v74 & 0xC000000000000001) != 0)
    v75 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v74);
  else
    v75 = (char *)*(id *)(v74 + 32);
  v93 = v75;
  v153[102] = v75;
  v153[103] = 1;
  v94 = *v73;
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v153[69] + 56);
  v95(v153[73], 1, 1, v153[68]);
  if (v94 == 1)
  {
    v96 = v153[90];
    v97 = v153[83];
    v98 = v153[78];
    v159 = v153[72];
    v99 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
    v100 = *(_QWORD *)&v93[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
    v101 = v100 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v100 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v153 + 40, 0, 0);
    sub_1004B8460(v101, v98, type metadata accessor for CRLBoardCRDTData);
    v102 = v93;
    swift_retain(v100);
    v103 = sub_1004B804C(&qword_1013E1A80);
    CRRegister.wrappedValue.getter(v103);
    sub_1004B84A4(v98, type metadata accessor for CRLBoardCRDTData);
    swift_release(v100);
    v104 = (uint64_t *)(*(_QWORD *)&v93[v99] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v105 = *v104;
    v106 = v104[1];
    swift_bridgeObjectRetain(v106);
    sub_10067AFD0(v96, v105, v106, v97);

    sub_100C9F8F8(v97, v159);
    v107 = v153[73];
    v108 = v153[72];
    v109 = v153[68];
    sub_1004B84A4(v153[83], type metadata accessor for CRLBoardIdentifier);
    sub_1004CB800(v107, &qword_1013E4690);
    v95(v108, 0, 1, v109);
    sub_1004C4938(v108, v107, &qword_1013E4690);
    v71 = v153;
    v73 = (unsigned __int8 *)(v153 + 134);
  }
  v110 = v71[78];
  v111 = v73[1];
  v162 = v71[63];
  v112 = *(void **)&v93[OBJC_IVAR____TtC8Freeform8CRLBoard_store];
  v71[104] = v112;
  v113 = (void *)v71[56];
  v71[105] = v113;
  v114 = *(_QWORD *)&v93[OBJC_IVAR____TtC8Freeform8CRLBoard_data] + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v114, v71 + 37, 0, 0);
  sub_1004B8460(v114, v110, type metadata accessor for CRLBoardCRDTData);
  swift_bridgeObjectRetain(v113);
  v115 = v93;
  v116 = v112;
  v117 = sub_1004B804C(&qword_1013E1980);
  CRRegister.wrappedValue.getter(v117);
  v118 = v153[53];
  v119 = v153[54];
  sub_1004B84A4(v110, type metadata accessor for CRLBoardCRDTData);

  sub_1006326BC(v118, v119, v162, (v111 & 1) == 0, (uint64_t)v116, v113);
  v153[106] = v120;
  v153[107] = v121;
  v131 = v153[91];
  v132 = v153[90];
  v133 = v153[82];
  swift_bridgeObjectRelease(v119);
  UUID.init()(v134);
  v135 = sub_10067AFD0(v132, 0, 0xE000000000000000, v133);
  v153[108] = static MainActor.shared.getter(v135);
  v136 = dispatch thunk of Actor.unownedExecutor.getter(v131, &protocol witness table for MainActor);
  v153[109] = v136;
  v153[110] = v137;
  return swift_task_switch(sub_100CB9DC8, v136, v137);
}

uint64_t sub_100CB9DC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t **v10;

  v1 = v0[98];
  v2 = v0[97];
  v3 = (void *)static OS_os_log.crlBoardLibrary;
  inited = swift_initStackObject(v0[96], v0 + 25);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v5 = v3;
  v6 = UUID.uuidString.getter(v5);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v7;
  v9 = static os_log_type_t.default.getter(v8);
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v9, "Creating new board with Board UUID (%@).", 40, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, v1);

  v10 = (uint64_t **)swift_task_alloc(dword_10140E154);
  v0[111] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = (uint64_t *)sub_100CB9ED4;
  return sub_100CB0070(v0[82], v0[63], v0[106], v0[107], 0);
}

uint64_t sub_100CB9ED4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 888);
  *(_QWORD *)(*(_QWORD *)v2 + 896) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[110];
    v7 = v4[109];
    v8 = sub_100CB9F50;
  }
  else
  {
    v4[113] = a1;
    v6 = v4[110];
    v7 = v4[109];
    v8 = sub_100CBA180;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_100CB9F50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[107];
  v2 = v0[101];
  v3 = v0[62];
  swift_release(v0[108]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v0[61]);
  swift_bridgeObjectRelease(v0[57]);
  swift_bridgeObjectRelease(v0[58]);
  swift_bridgeObjectRelease(v0[59]);
  swift_bridgeObjectRelease(v0[60]);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_100CB9FE0, v0[93], v0[94]);
}

uint64_t sub_100CB9FE0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 840);
  v2 = *(void **)(v0 + 816);
  v3 = *(void **)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 736);
  v5 = *(_QWORD *)(v0 + 656);
  v6 = *(_QWORD *)(v0 + 584);

  swift_release(v4);
  swift_bridgeObjectRelease(v1);
  sub_1004B84A4(v5, type metadata accessor for CRLBoardIdentifier);
  sub_1004CB800(v6, &qword_1013E4690);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  sub_100CCA858();

  v7 = *(_QWORD *)(v0 + 712);
  v8 = *(_QWORD *)(v0 + 704);
  v9 = *(_QWORD *)(v0 + 680);
  v10 = *(_QWORD *)(v0 + 672);
  v11 = *(_QWORD *)(v0 + 664);
  v12 = *(_QWORD *)(v0 + 656);
  v13 = *(_QWORD *)(v0 + 648);
  v14 = *(_QWORD *)(v0 + 640);
  v15 = *(_QWORD *)(v0 + 624);
  v17 = *(_QWORD *)(v0 + 608);
  v18 = *(_QWORD *)(v0 + 592);
  v19 = *(_QWORD *)(v0 + 584);
  v20 = *(_QWORD *)(v0 + 576);
  v21 = *(_QWORD *)(v0 + 568);
  v22 = *(_QWORD *)(v0 + 560);
  v23 = *(_QWORD *)(v0 + 536);
  v24 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBA180()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[113];
  swift_release(v0[108]);

  return swift_task_switch(sub_100CBA1C4, v0[93], v0[94]);
}

uint64_t sub_100CBA1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  char *v16;
  id v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);

  if (*(_BYTE *)(v0 + 1072) == 1)
  {
    v1 = *(_QWORD *)(v0 + 568);
    v2 = *(_QWORD *)(v0 + 552);
    v3 = *(_QWORD *)(v0 + 544);
    sub_1004CB7BC(*(_QWORD *)(v0 + 584), v1, &qword_1013E4690);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
    {
      sub_1004CB800(*(_QWORD *)(v0 + 568), &qword_1013E4690);
    }
    else
    {
      v4 = *(_QWORD *)(v0 + 656);
      v5 = *(_QWORD *)(v0 + 560);
      v6 = *(int **)(v0 + 544);
      v7 = *(_QWORD *)(v0 + 536);
      v8 = *(_QWORD *)(v0 + 528);
      v9 = *(_QWORD *)(v0 + 520);
      sub_1004B84E0(*(_QWORD *)(v0 + 568), v5, type metadata accessor for CRLBoardViewModelMetadata);
      sub_1004B8460(v4, v8, type metadata accessor for CRLBoardIdentifier);
      *(_BYTE *)(v8 + *(int *)(v9 + 20)) = *(_BYTE *)(v5 + 1);
      sub_100AD9768(v7, v8);
      sub_1004B84A4(v7, type metadata accessor for CRLBoardIdentifierAndValue);
      sub_1004B8460(v4, v8, type metadata accessor for CRLBoardIdentifier);
      *(_BYTE *)(v8 + *(int *)(v9 + 20)) = *(_BYTE *)(v5 + v6[13]);
      sub_100AD9768(v7, v8);
      sub_1004B84A4(v7, type metadata accessor for CRLBoardIdentifierAndValue);
      sub_1004B8460(v4, v8, type metadata accessor for CRLBoardIdentifier);
      *(_BYTE *)(v8 + *(int *)(v9 + 20)) = *(_BYTE *)(v5 + v6[14]);
      sub_100AD9768(v7, v8);
      sub_1004B84A4(v7, type metadata accessor for CRLBoardIdentifierAndValue);
      sub_1004B8460(v4, v8, type metadata accessor for CRLBoardIdentifier);
      *(_BYTE *)(v8 + *(int *)(v9 + 20)) = *(_BYTE *)(v5 + v6[15]);
      sub_100AD9768(v7, v8);
      sub_1004B84A4(v7, type metadata accessor for CRLBoardIdentifierAndValue);
      sub_1004B8460(v4, v8, type metadata accessor for CRLBoardIdentifier);
      *(_BYTE *)(v8 + *(int *)(v9 + 20)) = *(_BYTE *)(v5 + v6[12]);
      sub_100AD9768(v7, v8);
      sub_1004B84A4(v7, type metadata accessor for CRLBoardIdentifierAndValue);
      sub_1004B84A4(v5, type metadata accessor for CRLBoardViewModelMetadata);
    }
  }
  v10 = *(void **)(v0 + 816);
  v11 = *(_QWORD *)(v0 + 800);
  v12 = *(_QWORD *)(v0 + 656);
  v13 = *(_QWORD *)(v0 + 648);
  v14 = *(_QWORD *)(v0 + 512);
  v15 = (objc_class *)type metadata accessor for CRLCommandDuplicateBoard();
  v16 = (char *)objc_allocWithZone(v15);
  *(_QWORD *)&v16[OBJC_IVAR____TtC8Freeform24CRLCommandDuplicateBoard_boardToDuplicate] = v10;
  *(_QWORD *)(v0 + 392) = v16;
  *(_QWORD *)(v0 + 400) = v15;
  v17 = v10;
  *(_QWORD *)(v0 + 912) = objc_msgSendSuper2((objc_super *)(v0 + 392), "init");
  sub_1004B8460(v12, v13, type metadata accessor for CRLBoardIdentifier);
  v18 = unk_1013EF4DC;
  v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1013EF4D8 + dword_1013EF4D8);
  v19 = *(id *)(v14 + v11);
  v20 = (_QWORD *)swift_task_alloc(v18);
  *(_QWORD *)(v0 + 920) = v20;
  *v20 = v0;
  v20[1] = sub_100CBA4B4;
  return v22(*(_QWORD *)(v0 + 648), (uint64_t)v19, 0);
}

uint64_t sub_100CBA4B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 920);
  v3[116] = a1;
  v3[117] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[101];
    v6 = v3[62];
    swift_bridgeObjectRelease(v3[107]);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v3[61]);
    swift_bridgeObjectRelease(v3[57]);
    swift_bridgeObjectRelease(v3[58]);
    swift_bridgeObjectRelease(v3[59]);
    swift_bridgeObjectRelease(v3[60]);
    swift_bridgeObjectRelease(v5);
    v7 = v3[94];
    v8 = v3[93];
    v9 = sub_100CBAE00;
  }
  else
  {
    v7 = v3[94];
    v8 = v3[93];
    v9 = sub_100CBA57C;
  }
  return swift_task_switch(v9, v8, v7);
}

char *sub_100CBA57C()
{
  uint64_t v0;
  void *v1;
  char *v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *result;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  char *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;

  v1 = *(void **)(v0 + 912);
  v2 = *(char **)(*(_QWORD *)(v0 + 928) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController);
  v3 = &v2[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue];
  swift_beginAccess(&v2[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue], v0 + 344, 33, 0);
  v4 = *(_QWORD **)v3;
  v5 = v2;
  v6 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *(_QWORD *)v3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_100D0F980(0, v4[2] + 1, 1, v4);
    *(_QWORD *)v3 = v4;
  }
  v9 = v4[2];
  v8 = v4[3];
  if (v9 >= v8 >> 1)
  {
    v4 = sub_100D0F980((_QWORD *)(v8 > 1), v9 + 1, 1, v4);
    *(_QWORD *)v3 = v4;
  }
  v10 = *(_QWORD *)(v0 + 928);
  v11 = *(_QWORD *)(v0 + 912);
  v12 = *(_QWORD *)(v0 + 808);
  v13 = *(_QWORD *)(v0 + 656);
  v14 = *(_QWORD *)(v0 + 640);
  v4[2] = v9 + 1;
  v15 = &v4[2 * v9];
  v15[4] = v11;
  *((_BYTE *)v15 + 40) = 1;
  swift_endAccess(v0 + 344);
  sub_1006A8ED4();

  objc_msgSend(*(id *)(v10 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard), "savePendingChanges");
  sub_1004B8460(v13, v14, type metadata accessor for CRLBoardIdentifier);
  v16 = swift_isUniquelyReferenced_nonNull_native(v12);
  v17 = *(_QWORD *)(v0 + 808);
  if ((v16 & 1) == 0)
    v17 = sub_100D104C0(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
  v19 = *(_QWORD *)(v17 + 16);
  v18 = *(_QWORD *)(v17 + 24);
  if (v19 >= v18 >> 1)
    v17 = sub_100D104C0(v18 > 1, v19 + 1, 1, v17);
  v20 = *(_QWORD *)(v0 + 640);
  v21 = *(_QWORD *)(v0 + 632);
  *(_QWORD *)(v17 + 16) = v19 + 1;
  v103 = v17;
  sub_1004B84E0(v20, v17+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v19, type metadata accessor for CRLBoardIdentifier);
  v22 = *(void **)(v0 + 928);
  v23 = *(void **)(v0 + 912);
  v24 = *(_QWORD *)(v0 + 856);
  if (*(_QWORD *)(v0 + 448))
  {
    v25 = *(_QWORD *)(v0 + 840);
    v26 = *(void **)(v0 + 832);
    v27 = *(void **)(v0 + 816);
    v28 = *(_QWORD *)(v0 + 656);
    v29 = *(_QWORD *)(v0 + 584);
    sub_100AD8690((uint64_t *)(v0 + 408), *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856));

    swift_bridgeObjectRelease(v25);
    sub_1004B84A4(v28, type metadata accessor for CRLBoardIdentifier);
    sub_1004CB800(v29, &qword_1013E4690);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 416));
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 840);
    v31 = *(void **)(v0 + 816);
    v32 = *(_QWORD *)(v0 + 656);
    v33 = *(_QWORD *)(v0 + 584);

    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v30);
    sub_1004B84A4(v32, type metadata accessor for CRLBoardIdentifier);
    sub_1004CB800(v33, &qword_1013E4690);
  }
  v34 = *(_QWORD *)(v0 + 824);
  if (v34 == *(_QWORD *)(v0 + 792))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 496));
    v35 = *(_QWORD *)(v0 + 480);
    *(_QWORD *)(v0 + 952) = v103;
    *(_QWORD *)(v0 + 944) = v35;
    v36 = (_QWORD *)swift_task_alloc(dword_10140E1EC);
    *(_QWORD *)(v0 + 960) = v36;
    *v36 = v0;
    v36[1] = sub_100CBAFA8;
    return (char *)sub_100CA6AF8(v35);
  }
  v38 = *(_QWORD *)(v0 + 936);
  *(_QWORD *)(v0 + 808) = v103;
  v39 = *(_QWORD *)(v0 + 496);
  if ((v39 & 0xC000000000000001) != 0)
    result = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v39);
  else
    result = (char *)*(id *)(v39 + 8 * v34 + 32);
  v40 = result;
  *(_QWORD *)(v0 + 816) = result;
  *(_QWORD *)(v0 + 824) = v34 + 1;
  if (__OFADD__(v34, 1))
  {
    __break(1u);
  }
  else
  {
    v41 = *(unsigned __int8 *)(v0 + 1072);
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 552) + 56);
    v42(*(_QWORD *)(v0 + 584), 1, 1, *(_QWORD *)(v0 + 544));
    if (v41 == 1)
    {
      v43 = *(_QWORD *)(v0 + 720);
      v44 = *(_QWORD *)(v0 + 664);
      v45 = *(_QWORD *)(v0 + 624);
      v97 = v42;
      v99 = *(_QWORD *)(v0 + 576);
      v46 = v38;
      v47 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
      v48 = *(_QWORD *)&v40[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
      v49 = v48 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v48 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 320, 0, 0);
      sub_1004B8460(v49, v45, type metadata accessor for CRLBoardCRDTData);
      v50 = v40;
      swift_retain(v48);
      v51 = sub_1004B804C(&qword_1013E1A80);
      CRRegister.wrappedValue.getter(v51);
      sub_1004B84A4(v45, type metadata accessor for CRLBoardCRDTData);
      swift_release(v48);
      v52 = (uint64_t *)(*(_QWORD *)&v40[v47] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      v54 = *v52;
      v53 = v52[1];
      swift_bridgeObjectRetain(v53);
      sub_10067AFD0(v43, v54, v53, v44);

      sub_100C9F8F8(v44, v99);
      if (v46)
      {
        v55 = *(void **)(v0 + 760);
        v56 = *(_QWORD *)(v0 + 664);
        v57 = *(_QWORD *)(v0 + 584);
        v58 = *(_QWORD *)(v0 + 496);
        swift_release(*(_QWORD *)(v0 + 736));

        sub_1004B84A4(v56, type metadata accessor for CRLBoardIdentifier);
        sub_1004CB800(v57, &qword_1013E4690);
        swift_bridgeObjectRelease(v58);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 488));
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 456));
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 464));
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 472));
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 480));
        swift_bridgeObjectRelease(v103);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
LABEL_24:
        sub_100CCA858();

        v76 = *(_QWORD *)(v0 + 712);
        v77 = *(_QWORD *)(v0 + 704);
        v78 = *(_QWORD *)(v0 + 680);
        v79 = *(_QWORD *)(v0 + 672);
        v80 = *(_QWORD *)(v0 + 664);
        v81 = *(_QWORD *)(v0 + 656);
        v82 = *(_QWORD *)(v0 + 648);
        v83 = *(_QWORD *)(v0 + 640);
        v84 = *(_QWORD *)(v0 + 624);
        v92 = *(_QWORD *)(v0 + 608);
        v93 = *(_QWORD *)(v0 + 592);
        v94 = *(_QWORD *)(v0 + 584);
        v95 = *(_QWORD *)(v0 + 576);
        v96 = *(_QWORD *)(v0 + 568);
        v98 = *(_QWORD *)(v0 + 560);
        v101 = *(_QWORD *)(v0 + 536);
        v104 = *(_QWORD *)(v0 + 528);
        swift_task_dealloc(*(_QWORD *)(v0 + 720));
        swift_task_dealloc(v76);
        swift_task_dealloc(v77);
        swift_task_dealloc(v78);
        swift_task_dealloc(v79);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v82);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v92);
        swift_task_dealloc(v93);
        swift_task_dealloc(v94);
        swift_task_dealloc(v95);
        swift_task_dealloc(v96);
        swift_task_dealloc(v98);
        swift_task_dealloc(v101);
        swift_task_dealloc(v104);
        return (char *)(*(uint64_t (**)(void))(v0 + 8))();
      }
      v59 = *(_QWORD *)(v0 + 584);
      v60 = *(_QWORD *)(v0 + 576);
      v61 = *(_QWORD *)(v0 + 544);
      sub_1004B84A4(*(_QWORD *)(v0 + 664), type metadata accessor for CRLBoardIdentifier);
      sub_1004CB800(v59, &qword_1013E4690);
      v97(v60, 0, 1, v61);
      sub_1004C4938(v60, v59, &qword_1013E4690);
      v38 = 0;
    }
    v62 = *(_QWORD *)(v0 + 624);
    v100 = *(_BYTE *)(v0 + 1073);
    v102 = *(_QWORD *)(v0 + 504);
    v63 = *(void **)&v40[OBJC_IVAR____TtC8Freeform8CRLBoard_store];
    *(_QWORD *)(v0 + 832) = v63;
    v64 = *(void **)(v0 + 448);
    *(_QWORD *)(v0 + 840) = v64;
    v65 = *(_QWORD *)&v40[OBJC_IVAR____TtC8Freeform8CRLBoard_data] + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v65, v0 + 296, 0, 0);
    sub_1004B8460(v65, v62, type metadata accessor for CRLBoardCRDTData);
    swift_bridgeObjectRetain(v64);
    v66 = v40;
    v67 = v63;
    v68 = sub_1004B804C(&qword_1013E1980);
    CRRegister.wrappedValue.getter(v68);
    v69 = *(_QWORD *)(v0 + 424);
    v70 = *(_QWORD *)(v0 + 432);
    sub_1004B84A4(v62, type metadata accessor for CRLBoardCRDTData);

    sub_1006326BC(v69, v70, v102, (v100 & 1) == 0, (uint64_t)v67, v64);
    *(_QWORD *)(v0 + 848) = v71;
    *(_QWORD *)(v0 + 856) = v72;
    if (v38)
    {
      v55 = *(void **)(v0 + 760);
      v73 = *(_QWORD *)(v0 + 736);
      v74 = *(_QWORD *)(v0 + 584);
      v75 = *(_QWORD *)(v0 + 496);
      swift_bridgeObjectRelease(v70);

      swift_bridgeObjectRelease(v64);
      swift_release(v73);

      sub_1004CB800(v74, &qword_1013E4690);
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 488));
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 456));
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 464));
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 472));
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 480));
      swift_bridgeObjectRelease(v103);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
      goto LABEL_24;
    }
    v85 = *(_QWORD *)(v0 + 728);
    v86 = *(_QWORD *)(v0 + 720);
    v87 = *(_QWORD *)(v0 + 656);
    swift_bridgeObjectRelease(v70);
    UUID.init()(v88);
    v89 = sub_10067AFD0(v86, 0, 0xE000000000000000, v87);
    *(_QWORD *)(v0 + 864) = static MainActor.shared.getter(v89);
    v90 = dispatch thunk of Actor.unownedExecutor.getter(v85, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 872) = v90;
    *(_QWORD *)(v0 + 880) = v91;
    return (char *)swift_task_switch(sub_100CB9DC8, v90, v91);
  }
  return result;
}

uint64_t sub_100CBAE00()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 840);
  v3 = *(void **)(v0 + 816);
  v4 = *(void **)(v0 + 760);
  v5 = *(_QWORD *)(v0 + 736);
  v6 = *(_QWORD *)(v0 + 656);
  v7 = *(_QWORD *)(v0 + 584);

  swift_release(v5);
  swift_bridgeObjectRelease(v2);
  sub_1004B84A4(v6, type metadata accessor for CRLBoardIdentifier);
  sub_1004CB800(v7, &qword_1013E4690);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  sub_100CCA858();

  v8 = *(_QWORD *)(v0 + 712);
  v9 = *(_QWORD *)(v0 + 704);
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 672);
  v12 = *(_QWORD *)(v0 + 664);
  v13 = *(_QWORD *)(v0 + 656);
  v14 = *(_QWORD *)(v0 + 648);
  v15 = *(_QWORD *)(v0 + 640);
  v16 = *(_QWORD *)(v0 + 624);
  v18 = *(_QWORD *)(v0 + 608);
  v19 = *(_QWORD *)(v0 + 592);
  v20 = *(_QWORD *)(v0 + 584);
  v21 = *(_QWORD *)(v0 + 576);
  v22 = *(_QWORD *)(v0 + 568);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 536);
  v25 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBAFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 960);
  v3 = *(_QWORD **)v1;
  v3[121] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[119];
    swift_bridgeObjectRelease(v3[118]);
    swift_bridgeObjectRelease(v3[61]);
    swift_bridgeObjectRelease(v3[57]);
    swift_bridgeObjectRelease(v3[58]);
    swift_bridgeObjectRelease(v3[59]);
    swift_bridgeObjectRelease(v4);
    return swift_task_switch(sub_100CBB4E4, v3[93], v3[94]);
  }
  else
  {
    swift_bridgeObjectRelease(v3[118]);
    v6 = v3[59];
    v3[122] = v6;
    v7 = (_QWORD *)swift_task_alloc(dword_10140E164);
    v3[123] = v7;
    *v7 = v3;
    v7[1] = sub_100CBB088;
    return sub_100CA6CEC(v6);
  }
}

uint64_t sub_100CBB088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 984);
  v3 = *(_QWORD **)v1;
  v3[124] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[119];
    swift_bridgeObjectRelease(v3[122]);
    swift_bridgeObjectRelease(v3[61]);
    swift_bridgeObjectRelease(v3[57]);
    swift_bridgeObjectRelease(v3[58]);
    swift_bridgeObjectRelease(v4);
    return swift_task_switch(sub_100CBB63C, v3[93], v3[94]);
  }
  else
  {
    swift_bridgeObjectRelease(v3[122]);
    v6 = v3[58];
    v3[125] = v6;
    v7 = (_QWORD *)swift_task_alloc(dword_10140E15C);
    v3[126] = v7;
    *v7 = v3;
    v7[1] = sub_100CBB160;
    return sub_100CA6ED8(v6);
  }
}

uint64_t sub_100CBB160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1008);
  v3 = *(_QWORD **)v1;
  v3[127] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[119];
    swift_bridgeObjectRelease(v3[125]);
    swift_bridgeObjectRelease(v3[61]);
    swift_bridgeObjectRelease(v3[57]);
    swift_bridgeObjectRelease(v4);
    return swift_task_switch(sub_100CBB794, v3[93], v3[94]);
  }
  else
  {
    swift_bridgeObjectRelease(v3[125]);
    v6 = v3[57];
    v3[128] = v6;
    v7 = (_QWORD *)swift_task_alloc(dword_10140E16C);
    v3[129] = v7;
    *v7 = v3;
    v7[1] = sub_100CBB230;
    return sub_100CAC1BC(v6);
  }
}

uint64_t sub_100CBB230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1032);
  v3 = *(_QWORD **)v1;
  v3[130] = v0;
  swift_task_dealloc(v2);
  v4 = v3[128];
  if (v0)
  {
    v5 = v3[119];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v3[61]);
    swift_bridgeObjectRelease(v5);
    return swift_task_switch(sub_100CBB8EC, v3[93], v3[94]);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    v7 = v3[61];
    v3[131] = v7;
    v8 = (_QWORD *)swift_task_alloc(dword_10140E1F4);
    v3[132] = v8;
    *v8 = v3;
    v8[1] = sub_100CBB2F4;
    return sub_100CBBF3C(v7);
  }
}

uint64_t sub_100CBB2F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1056);
  *(_QWORD *)(*(_QWORD *)v1 + 1064) = v0;
  swift_task_dealloc(v3);
  v4 = v2[131];
  if (v0)
  {
    swift_bridgeObjectRelease(v2[119]);
    swift_bridgeObjectRelease(v4);
    v5 = v2[94];
    v6 = v2[93];
    v7 = sub_100CBBA44;
  }
  else
  {
    swift_bridgeObjectRelease(v2[131]);
    v5 = v2[94];
    v6 = v2[93];
    v7 = sub_100CBB384;
  }
  return swift_task_switch(v7, v6, v5);
}

uint64_t sub_100CBB384()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 760);
  v2 = *(_QWORD *)(v0 + 720);
  v3 = *(_QWORD *)(v0 + 712);
  v4 = *(_QWORD *)(v0 + 704);
  v5 = *(_QWORD *)(v0 + 680);
  v6 = *(_QWORD *)(v0 + 672);
  v7 = *(_QWORD *)(v0 + 664);
  v8 = *(_QWORD *)(v0 + 656);
  v10 = *(_QWORD *)(v0 + 648);
  v11 = *(_QWORD *)(v0 + 640);
  v12 = *(_QWORD *)(v0 + 624);
  v13 = *(_QWORD *)(v0 + 608);
  v14 = *(_QWORD *)(v0 + 592);
  v15 = *(_QWORD *)(v0 + 584);
  v16 = *(_QWORD *)(v0 + 576);
  v17 = *(_QWORD *)(v0 + 568);
  v18 = *(_QWORD *)(v0 + 560);
  v19 = *(_QWORD *)(v0 + 536);
  v20 = *(_QWORD *)(v0 + 528);
  swift_release(*(_QWORD *)(v0 + 736));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  sub_100CCA858();

  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 952));
}

uint64_t sub_100CBB4E4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 760);
  swift_release(*(_QWORD *)(v0 + 736));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  sub_100CCA858();

  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 656);
  v8 = *(_QWORD *)(v0 + 648);
  v9 = *(_QWORD *)(v0 + 640);
  v10 = *(_QWORD *)(v0 + 624);
  v12 = *(_QWORD *)(v0 + 608);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 576);
  v16 = *(_QWORD *)(v0 + 568);
  v17 = *(_QWORD *)(v0 + 560);
  v18 = *(_QWORD *)(v0 + 536);
  v19 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBB63C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 760);
  swift_release(*(_QWORD *)(v0 + 736));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  sub_100CCA858();

  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 656);
  v8 = *(_QWORD *)(v0 + 648);
  v9 = *(_QWORD *)(v0 + 640);
  v10 = *(_QWORD *)(v0 + 624);
  v12 = *(_QWORD *)(v0 + 608);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 576);
  v16 = *(_QWORD *)(v0 + 568);
  v17 = *(_QWORD *)(v0 + 560);
  v18 = *(_QWORD *)(v0 + 536);
  v19 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBB794()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 760);
  swift_release(*(_QWORD *)(v0 + 736));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  sub_100CCA858();

  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 656);
  v8 = *(_QWORD *)(v0 + 648);
  v9 = *(_QWORD *)(v0 + 640);
  v10 = *(_QWORD *)(v0 + 624);
  v12 = *(_QWORD *)(v0 + 608);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 576);
  v16 = *(_QWORD *)(v0 + 568);
  v17 = *(_QWORD *)(v0 + 560);
  v18 = *(_QWORD *)(v0 + 536);
  v19 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBB8EC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 760);
  swift_release(*(_QWORD *)(v0 + 736));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  sub_100CCA858();

  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 656);
  v8 = *(_QWORD *)(v0 + 648);
  v9 = *(_QWORD *)(v0 + 640);
  v10 = *(_QWORD *)(v0 + 624);
  v12 = *(_QWORD *)(v0 + 608);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 576);
  v16 = *(_QWORD *)(v0 + 568);
  v17 = *(_QWORD *)(v0 + 560);
  v18 = *(_QWORD *)(v0 + 536);
  v19 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBBA44()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 760);
  swift_release(*(_QWORD *)(v0 + 736));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
  sub_100CCA858();

  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 656);
  v8 = *(_QWORD *)(v0 + 648);
  v9 = *(_QWORD *)(v0 + 640);
  v10 = *(_QWORD *)(v0 + 624);
  v12 = *(_QWORD *)(v0 + 608);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 576);
  v16 = *(_QWORD *)(v0 + 568);
  v17 = *(_QWORD *)(v0 + 560);
  v18 = *(_QWORD *)(v0 + 536);
  v19 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBBB9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v6 + 169) = a5;
  *(_BYTE *)(v6 + 168) = a4;
  *(_QWORD *)(v6 + 72) = a3;
  *(_QWORD *)(v6 + 80) = v5;
  *(_QWORD *)(v6 + 56) = a1;
  *(_QWORD *)(v6 + 64) = a2;
  v7 = sub_1004B804C(&qword_1013E0270);
  *(_QWORD *)(v6 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 96) = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  *(_QWORD *)(v6 + 104) = v9;
  *(_QWORD *)(v6 + 112) = v10;
  return swift_task_switch(sub_100CBBC38, v9, v10);
}

uint64_t sub_100CBBC38()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v9;

  v1 = sub_100B2C820(*(void **)(v0 + 64));
  *(_QWORD *)(v0 + 120) = v1;
  v2 = v1;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_QWORD *)(v0 + 128) = inited;
  *(_OWORD *)(inited + 16) = xmmword_100EEF400;
  *(_QWORD *)(inited + 32) = v2;
  v9 = inited;
  specialized Array._endMutation()(inited);
  *(_QWORD *)(v0 + 136) = v9;
  v5 = dword_10140E1E4;
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 144) = v7;
  *v7 = v0;
  v7[1] = sub_100CBBD2C;
  return sub_100CB8DC0(v9, *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 168), *(_BYTE *)(v0 + 169));
}

uint64_t sub_100CBBD2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[13];
    v6 = v3[14];
    v7 = sub_100CBBEEC;
  }
  else
  {
    swift_bridgeObjectRelease(v3[17]);
    v5 = v3[13];
    v6 = v3[14];
    v7 = sub_100CBBDA0;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_100CBBDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  int v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  __n128 v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 96));
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for CRLBoardIdentifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_1004B8460(*(_QWORD *)(v0 + 152)+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 88), type metadata accessor for CRLBoardIdentifier);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v7, v5, 1, v3);
  v8 = swift_bridgeObjectRelease(v6);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v4 + 48))(v7, 1, v3, v8);
  v10 = *(void **)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 88);
  if (v9 == 1)
  {
    sub_1004CB800(*(_QWORD *)(v0 + 88), &qword_1013E0270);
    v12 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v12, 0, 0);
    *v13 = 0;
    swift_willThrow(v14);

    swift_task_dealloc(*(_QWORD *)(v0 + 88));
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 56);

    sub_1004B84E0(v11, v15, type metadata accessor for CRLBoardIdentifier);
    swift_task_dealloc(v11);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBBEEC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(v1);

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBBF3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100CBBFA8, v4, v5);
}

uint64_t sub_100CBBFA8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CBBFD0, 0, 0);
}

uint64_t sub_100CBBFD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[7];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[8] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_100CA6E24;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000020, 0x8000000100FCADF0, sub_10071BD90, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CBC074(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_1004B804C(&qword_1013E0210);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100CBC0F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  _BYTE *v35;
  _BYTE v37[12];
  int v38;
  uint64_t v39;
  _BYTE v40[24];

  v3 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v3);
  v5 = &v37[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6);
  v8 = &v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (int *)type metadata accessor for CRLBoardViewModelMetadata(0);
  v10 = *((_QWORD *)v9 - 1);
  __chkstk_darwin(v9);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v15 = &v37[-v14];
  __chkstk_darwin(v16);
  v18 = &v37[-v17];
  v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata, v40, 32, 0);
  v20 = *v19;
  if (!*(_QWORD *)(*v19 + 16))
    return swift_endAccess(v40);
  v21 = sub_100843264(a1);
  if ((v22 & 1) == 0)
    return swift_endAccess(v40);
  sub_1004B8460(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v10 + 72) * v21, (uint64_t)v15, type metadata accessor for CRLBoardViewModelMetadata);
  sub_1004B84E0((uint64_t)v15, (uint64_t)v18, type metadata accessor for CRLBoardViewModelMetadata);
  swift_endAccess(v40);
  v39 = a1;
  v23 = *v18;
  v38 = v18[1];
  v24 = v9[6];
  v25 = &v18[v24];
  v26 = &v12[v24];
  v27 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, v25, v27);
  sub_1004CB7BC((uint64_t)&v18[v9[7]], (uint64_t)&v12[v9[7]], &qword_1013F5478);
  v28 = v9[8];
  v29 = v18[v28];
  v30 = v18[v9[9]];
  v31 = v18[v9[12]];
  v32 = v18[v9[13]];
  v33 = v18[v9[14]];
  v34 = v18[v9[15]];
  *v12 = v23;
  v12[1] = v38;
  v12[v28] = v29;
  v12[v9[9]] = v30;
  v12[v9[10]] = 0;
  v35 = &v12[v9[11]];
  *(_QWORD *)v35 = 0;
  v35[8] = 1;
  v12[v9[12]] = v31;
  v12[v9[13]] = v32;
  v12[v9[14]] = v33;
  v12[v9[15]] = v34;
  sub_1004B8460(v39, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
  sub_1004B8460((uint64_t)v12, (uint64_t)v5, type metadata accessor for CRLBoardViewModelMetadata);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v10 + 56))(v5, 0, 1, v9);
  swift_beginAccess(v19, v40, 33, 0);
  sub_10083F150((uint64_t)v5, (uint64_t)v8);
  swift_endAccess(v40);
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardViewModelMetadata);
  return sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLBoardViewModelMetadata);
}

double sub_100CBC3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  _QWORD v64[3];
  uint64_t v65;
  char *v66;
  NSString *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char v80[32];

  v64[2] = a4;
  v73 = a3;
  v5 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v5);
  v72 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v7);
  v71 = (uint64_t)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v79 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v78 = (char *)v64 - v12;
  v13 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v13);
  v15 = (char *)v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)v64 - v17;
  __chkstk_darwin(v19);
  v70 = (uint64_t)v64 - v20;
  *(_QWORD *)&result = __chkstk_darwin(v21).n128_u64[0];
  v24 = (char *)v64 - v23;
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
  {
    v67 = CKCurrentUserDefaultName;
    swift_bridgeObjectRetain(a1);
    v64[1] = a1;
    v26 = (void **)(a1 + 56);
    v65 = v9;
    v66 = v15;
    v68 = v18;
    v74 = v24;
    while (1)
    {
      v28 = v5;
      v29 = (uint64_t)*(v26 - 3);
      v30 = (uint64_t)*(v26 - 2);
      v32 = (uint64_t)*(v26 - 1);
      v31 = *v26;
      v33 = v29 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v29 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v80, 0, 0);
      v34 = v33;
      v35 = v71;
      sub_1004B8460(v34, v71, type metadata accessor for CRLBoardCRDTData);
      v76 = v31;
      swift_retain_n(v29, 2);
      v77 = v30;
      swift_retain(v30);
      v75 = v32;
      swift_retain(v32);
      v36 = sub_1004B804C(&qword_1013E1A80);
      v37 = v78;
      CRRegister.wrappedValue.getter(v36);
      sub_1004B84A4(v35, type metadata accessor for CRLBoardCRDTData);
      v39 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      v38 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8);
      v40 = v9;
      v41 = *(void (**)(char *, char *))(v9 + 16);
      v42 = v69;
      v41(v79, v37);
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v45 = v39 == v43 && v38 == v44;
      if (v45
        || (v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v38, v43, v44, 0),
            swift_bridgeObjectRetain(v38),
            v47 = swift_bridgeObjectRelease(),
            (v46 & 1) != 0))
      {
        v47 = swift_bridgeObjectRelease();
        v39 = 0;
        v38 = 0xE000000000000000;
      }
      v48 = v28;
      v49 = v42;
      v50 = v40;
      v51 = (uint64_t)v66;
      (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v78, v49, v47);
      v52 = (uint64_t)v72;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v72, v79, v49);
      v53 = (_QWORD *)(v52 + *(int *)(v48 + 20));
      *v53 = v39;
      v53[1] = v38;
      v54 = v70;
      sub_1004B84E0(v52, v70, type metadata accessor for CRLBoardIdentifierStorage);
      v55 = (uint64_t)v74;
      sub_1004B84E0(v54, (uint64_t)v74, type metadata accessor for CRLBoardIdentifier);
      swift_release(v29);
      v56 = v73;
      LOBYTE(v54) = static UUID.== infix(_:_:)(v55);
      v57 = (uint64_t)v68;
      sub_1004B8460(v55, (uint64_t)v68, type metadata accessor for CRLBoardIdentifier);
      sub_1004B8460(v56, v51, type metadata accessor for CRLBoardIdentifier);
      if ((v54 & 1) != 0)
      {
        v5 = v48;
        v58 = *(int *)(v48 + 20);
        v59 = *(_QWORD *)(v57 + v58);
        v60 = *(_QWORD *)(v57 + v58 + 8);
        v61 = (_QWORD *)(v51 + v58);
        v62 = v61[1];
        if (v59 == *v61 && v60 == v62)
        {
          sub_1004B84A4(v51, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v57, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v74, type metadata accessor for CRLBoardIdentifier);
          v9 = v65;
          v27 = v75;
LABEL_16:
          *(_QWORD *)(v29 + 24) = sub_1001E9730();
          sub_100CBC0F4(v73);
          goto LABEL_4;
        }
        v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, *v61, v62, 0);
        sub_1004B84A4(v51, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v57, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4((uint64_t)v74, type metadata accessor for CRLBoardIdentifier);
        v9 = v65;
        v27 = v75;
        if ((v63 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        v5 = v48;
        sub_1004B84A4(v51, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v57, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v55, type metadata accessor for CRLBoardIdentifier);
        v9 = v65;
        v27 = v75;
      }
LABEL_4:
      swift_release(v77);
      swift_release(v29);

      swift_release(v27);
      v26 += 5;
      if (!--v25)
      {
        *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_100CBC8C8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_10140DF14);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_1004E1A78;
  return sub_100CB3574(3, (uint64_t)&_swiftEmptySetSingleton);
}

uint64_t sub_100CBC9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_100CBCA10, v6, v7);
}

uint64_t sub_100CBCA10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t ObjectType;
  int *v5;
  uint64_t **v6;
  uint64_t **v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v1 = v0[5] + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_realTimeCollaborationDelegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  v0[9] = Strong;
  v3 = *(_QWORD *)(v1 + 8);
  v0[10] = v3;
  if (Strong)
  {
    ObjectType = swift_getObjectType(Strong);
    v0[11] = ObjectType;
    v5 = *(int **)(v3 + 8);
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    v6 = (uint64_t **)swift_task_alloc(v5[1]);
    v0[12] = (uint64_t)v6;
    *v6 = v0;
    v6[1] = (uint64_t *)sub_100CBCAF0;
    return v9(v0[4], ObjectType, v3);
  }
  else
  {
    v8 = (uint64_t **)swift_task_alloc(dword_10140E20C);
    v0[15] = (uint64_t)v8;
    *v8 = v0;
    v8[1] = (uint64_t *)sub_100CBCC9C;
    return sub_100CBCD6C(v0[4]);
  }
}

uint64_t sub_100CBCAF0(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_BYTE *)(*v1 + 136) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100CBCB48, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100CBCB48()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  _QWORD *v4;
  int *v5;

  if (*(_BYTE *)(v0 + 136) == 1)
  {
    v1 = *(int **)(*(_QWORD *)(v0 + 80) + 16);
    v5 = (int *)((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 104) = v2;
    *v2 = v0;
    v2[1] = sub_100CBCC00;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v5)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 80));
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
    v4 = (_QWORD *)swift_task_alloc(dword_10140E20C);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_100CBCC9C;
    return sub_100CBCD6C(*(_QWORD *)(v0 + 32));
  }
}

uint64_t sub_100CBCC00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CBCCFC;
  else
    v4 = sub_100CBCC60;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100CBCC60()
{
  uint64_t v0;
  __n128 v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  v1 = swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CBCC9C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CBCD38;
  else
    v4 = sub_100590EA8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100CBCCFC()
{
  uint64_t v0;
  __n128 v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  v1 = swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CBCD38()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CBCD6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[55] = a1;
  v2[56] = v1;
  v3 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  v2[57] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  v2[58] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[59] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v2[60] = v6;
  v2[61] = v7;
  return swift_task_switch(sub_100CBCE18, v6, v7);
}

uint64_t sub_100CBCE18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 456);
  (*(void (**)(void))(**(_QWORD **)(v0 + 440) + 192))();
  sub_1004BB5A4((_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 328));
  sub_10098EB14(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_10140F0BC);
  *(_QWORD *)(v0 + 496) = v2;
  *v2 = v0;
  v2[1] = sub_100CBCEB0;
  return sub_100D2B0D0(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 456));
}

uint64_t sub_100CBCEB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = v0;
  swift_task_dealloc(v3);
  sub_1004B84A4(v2[57], type metadata accessor for CRLGloballyScopedBoardIdentifier);
  if (v0)
  {
    v4 = v2[60];
    v5 = v2[61];
    v6 = sub_100CBD598;
  }
  else
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v2 + 38);
    v4 = v2[60];
    v5 = v2[61];
    v6 = sub_100CBCF40;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100CBCF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  __n128 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  _BYTE *v43;
  void *v44;
  uint64_t v45;
  uint64_t inited;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v58;
  _QWORD *v59;

  v1 = (uint64_t)sub_100CAEB70(*(_QWORD *)(v0 + 464));
  if ((unint64_t)v1 >> 62)
  {
    if (v1 >= 0)
      v1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = _CocoaArrayWrapper.endIndex.getter(v1);
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v2)
  {
    swift_release(*(_QWORD *)(v0 + 472));
    if (qword_1013DD888 != -1)
      swift_once(&qword_1013DD888, sub_100A05DE4);
    v23 = *(_QWORD *)(v0 + 464);
    swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 416, 0, 0);
    v44 = (void *)static OS_os_log.realTimeSync;
    v45 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v45, v0 + 232);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v47 = v44;
    v48 = UUID.uuidString.getter(v47);
    v50 = v49;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v48;
    *(_QWORD *)(inited + 40) = v50;
    v52 = static os_log_type_t.default.getter(v51);
    sub_100A06EBC((uint64_t)v47, &_mh_execute_header, v52, "Cannot accept collaboration because the board is not open. Board %{public}@", 75, 2, inited);
    swift_setDeallocating(inited);
    v53 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v53);

    v54 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v54, 0, 0);
    *v55 = 2;
    goto LABEL_14;
  }
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  v3 = *(_QWORD *)(v0 + 448);
  swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 392, 0, 0);
  v4 = (void *)static OS_os_log.realTimeSync;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v6 = swift_initStackObject(v5, v0 + 160);
  *(_OWORD *)(v6 + 16) = xmmword_100EF5E40;
  v7 = v4;
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  v11 = sub_1004CFC2C();
  *(_QWORD *)(v6 + 64) = v11;
  *(_QWORD *)(v6 + 32) = v8;
  v12 = v6 + 32;
  *(_QWORD *)(v6 + 40) = v10;
  v14 = static os_log_type_t.default.getter(v13);
  sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v14, "Start real time collaboration for board %{public}@", 50, 2, v6);
  swift_setDeallocating(v6);
  v15 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v12, 1, v15);

  v16 = (uint64_t *)(v3 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos, v0 + 344, 32, 0);
  v17 = *v16;
  if (!*(_QWORD *)(v17 + 16) || (v18 = sub_100843264(*(_QWORD *)(v0 + 464)), (v19 & 1) == 0))
  {
    v23 = *(_QWORD *)(v0 + 464);
    v34 = *(_QWORD *)(v0 + 472);
    swift_endAccess(v0 + 344);
    swift_release(v34);
    v35 = (void *)static OS_os_log.realTimeSync;
    v36 = swift_initStackObject(v5, v0 + 16);
    *(_OWORD *)(v36 + 16) = xmmword_100EF5E40;
    v37 = v35;
    v38 = UUID.uuidString.getter(v37);
    *(_QWORD *)(v36 + 56) = &type metadata for String;
    *(_QWORD *)(v36 + 64) = v11;
    *(_QWORD *)(v36 + 32) = v38;
    *(_QWORD *)(v36 + 40) = v39;
    v40 = static os_log_type_t.error.getter(v38);
    sub_100A06EBC((uint64_t)v37, &_mh_execute_header, v40, "Cannot accept collaboration because the board info corresponding the given board identifier was not found. Board %{public}@", 123, 2, v36);
    swift_setDeallocating(v36);
    swift_arrayDestroy(v36 + 32, 1, v15);

    v41 = sub_100619D10();
    swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v41, 0, 0);
    *v43 = 0;
LABEL_14:
    swift_willThrow(v42);
    goto LABEL_15;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
  *(_QWORD *)(v0 + 512) = v20;
  swift_endAccess(v0 + 344);
  v21 = (_QWORD *)(v20 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession);
  swift_beginAccess(v20 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession, v0 + 368, 0, 0);
  if (*v21)
  {
    v23 = *(_QWORD *)(v0 + 464);
    v22 = *(_QWORD *)(v0 + 472);
    swift_retain(v20);
    swift_release(v22);
    v24 = (void *)static OS_os_log.realTimeSync;
    v25 = swift_initStackObject(v5, v0 + 88);
    *(_OWORD *)(v25 + 16) = xmmword_100EF5E40;
    v26 = v24;
    v27 = UUID.uuidString.getter(v26);
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = v11;
    *(_QWORD *)(v25 + 32) = v27;
    *(_QWORD *)(v25 + 40) = v28;
    v30 = static os_log_type_t.default.getter(v29);
    sub_100A06EBC((uint64_t)v26, &_mh_execute_header, v30, "Not activating standard real-time session because a real-time session already exists for board %{public}@", 105, 2, v25);
    swift_setDeallocating(v25);
    swift_arrayDestroy(v25 + 32, 1, v15);

    v31 = sub_1006E6E94();
    swift_allocError(&type metadata for CRLRealTimeSyncError, v31, 0, 0);
    *v32 = 1;
    swift_willThrow(v33);
    swift_release(v20);
LABEL_15:
    sub_1004B84A4(v23, type metadata accessor for CRLBoardIdentifier);
    v56 = *(_QWORD *)(v0 + 456);
    swift_task_dealloc(*(_QWORD *)(v0 + 464));
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v58 = dword_10140DB44;
  swift_retain(v20);
  v59 = (_QWORD *)swift_task_alloc(v58);
  *(_QWORD *)(v0 + 520) = v59;
  *v59 = v0;
  v59[1] = sub_100CBD4CC;
  return sub_100CC5148(*(_QWORD *)(v0 + 440));
}

uint64_t sub_100CBD4CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CBD5E8;
  else
    v4 = sub_100CBD52C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 480), *(_QWORD *)(v2 + 488));
}

uint64_t sub_100CBD52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 456);
  swift_release(*(_QWORD *)(v0 + 472));
  swift_release(v1);
  sub_1004B84A4(v2, type metadata accessor for CRLBoardIdentifier);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBD598()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 472));
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 456);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBD5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(v0 + 464);
  swift_release(*(_QWORD *)(v0 + 472));
  swift_release(v1);
  sub_1004B84A4(v2, type metadata accessor for CRLBoardIdentifier);
  v3 = *(_QWORD *)(v0 + 456);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBD648(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v25[72];
  _BYTE v26[24];
  _BYTE v27[24];

  v4 = v3;
  v8 = v3 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos;
  swift_beginAccess(v8, v27, 32, 0);
  if (*(_QWORD *)(*(_QWORD *)v8 + 16) && (sub_100843264(a1), (v9 & 1) != 0))
  {
    swift_endAccess(v27);
    v10 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_opportunisticGroupSessionManager);
    swift_beginAccess(v10 + 88, v27, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v10 + 88) + 16)
      || (swift_bridgeObjectRetain(*(_QWORD *)(v10 + 88)),
          sub_100843584(a2),
          v12 = v11,
          swift_bridgeObjectRelease(),
          (v12 & 1) == 0))
    {
      v23 = sub_100990528(a2, a3 & 1) ^ 1;
      return v23 & 1;
    }
    if (qword_1013DD888 != -1)
      swift_once(&qword_1013DD888, sub_100A05DE4);
    swift_beginAccess(&static OS_os_log.realTimeSync, v26, 0, 0);
    v13 = (void *)static OS_os_log.realTimeSync;
    v14 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v14, v25);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v16 = v13;
    v17 = UUID.uuidString.getter(v16);
    v19 = v18;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v17;
    *(_QWORD *)(inited + 40) = v19;
    v21 = static os_log_type_t.default.getter(v20);
    sub_100A06EBC((uint64_t)v16, &_mh_execute_header, v21, "Currently leaving activtiy for %{public}@, should not activate new one.", 71, 2, inited);
    swift_setDeallocating(inited);
    v22 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v22);

  }
  else
  {
    swift_endAccess(v27);
  }
  v23 = 0;
  return v23 & 1;
}

uint64_t sub_100CBD838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[35] = a4;
  v5[36] = a5;
  v6 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  v5[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v5[38] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v5[39] = v8;
  v5[40] = v9;
  return swift_task_switch(sub_100CBD8C4, v8, v9);
}

void sub_100CBD8C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _BYTE *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t inited;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 280) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v1, v0 + 208, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_100843264(*(_QWORD *)(v0 + 288)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    *(_QWORD *)(v0 + 328) = v5;
    swift_endAccess(v0 + 208);
    v6 = *(void **)(v5 + 16);
    v7 = (void *)objc_opt_self(UIApplication);
    swift_retain(v5);
    v8 = v6;
    v9 = objc_msgSend(v7, "sharedApplication");
    v10 = objc_msgSend(v9, "delegate");

    if (v10)
    {
      v11 = type metadata accessor for CRLiOSAppDelegate();
      v12 = *(_QWORD *)(swift_dynamicCastClassUnconditional(v10, v11, 0, 0, 0)
                      + OBJC_IVAR____TtC8Freeform17CRLiOSAppDelegate_iCloudStatus);
      swift_retain(v12);
      swift_unknownObjectRelease(v10);
      v13 = *(_QWORD *)(v12 + 48);
      swift_release(v12);
      v8[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_realTimeSessionNeedsAccountUpgrade] = (v13 & 2) == 0;

      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard)
                      + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState);
      *(_QWORD *)(v0 + 336) = v14;
      v15 = dword_10140F0C4;
      swift_retain(v14);
      v16 = (_QWORD *)swift_task_alloc(v15);
      *(_QWORD *)(v0 + 344) = v16;
      *v16 = v0;
      v16[1] = sub_100CBDBB8;
      sub_100D2B440(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 288));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 304);
    swift_endAccess(v0 + 208);
    swift_release(v17);
    if (qword_1013DD888 != -1)
      swift_once(&qword_1013DD888, sub_100A05DE4);
    swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 160, 0, 0);
    v18 = (void *)static OS_os_log.realTimeSync;
    v19 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v19, v0 + 88);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v21 = v18;
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v25 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v25;
    *(_QWORD *)(inited + 32) = v22;
    *(_QWORD *)(inited + 40) = v24;
    v26 = static os_log_type_t.error.getter(v25);
    sub_100A06EBC((uint64_t)v21, &_mh_execute_header, v26, "Cannot start opportunistic activity. Did not find the board with id %{public}@", 78, 2, inited);
    swift_setDeallocating(inited);
    v27 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v27);

    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100CBDBB8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  *(_QWORD *)(*v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100CBE0BC;
  else
    v4 = sub_100CBDC18;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 312), *(_QWORD *)(v2 + 320));
}

uint64_t sub_100CBDC18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t inited;
  BOOL v14;
  uint64_t v15;
  void *v16;
  id v17;
  Swift::String v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0 + 336);
  if ((sub_100CBD648(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v1 + 16) != 0) & 1) != 0)
  {
    v2 = (_QWORD *)(*(_QWORD *)(v0 + 328) + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession);
    swift_beginAccess(v2, v0 + 232, 0, 0);
    if (*v2)
    {
      if (qword_1013DD888 != -1)
        swift_once(&qword_1013DD888, sub_100A05DE4);
      swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 256, 0, 0);
      v3 = (id)static OS_os_log.realTimeSync;
      v5 = static os_log_type_t.default.getter(v4);
      sub_100A06EBC((uint64_t)v3, &_mh_execute_header, v5, "hasOngoingRealTimeSyncSession meaning we are switching between Me-to-Me and CKShare, will deactivateOpportunisticRealTimeCollaboration() and exitRealTimeSync() current session.", 176, 2, (uint64_t)_swiftEmptyArrayStorage);

      v6 = (_QWORD *)swift_task_alloc(dword_1013FEAA4);
      *(_QWORD *)(v0 + 360) = v6;
      *v6 = v0;
      v6[1] = sub_100CBDF5C;
      return sub_1009905F0(*(_QWORD *)(v0 + 296), 1);
    }
    else
    {
      v22 = *(void **)(v1 + 16);
      *(_QWORD *)(v0 + 368) = v22;
      v23 = dword_1013FEAAC;
      v24 = v22;
      v25 = (_QWORD *)swift_task_alloc(v23);
      *(_QWORD *)(v0 + 376) = v25;
      *v25 = v0;
      v25[1] = sub_100CBE00C;
      return sub_1009912AC(*(_QWORD *)(v0 + 296), (uint64_t)v22);
    }
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 304));
    v8 = *(_QWORD *)(v1 + 16);
    if (qword_1013DD888 != -1)
      swift_once(&qword_1013DD888, sub_100A05DE4);
    v9 = *(_QWORD *)(v0 + 328);
    v10 = *(_QWORD *)(v0 + 336);
    swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 184, 0, 0);
    v11 = (void *)static OS_os_log.realTimeSync;
    v12 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v12, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v14 = v8 == 0;
    if (v8)
      v15 = 0x65736C6166;
    else
      v15 = 1702195828;
    if (v14)
      v16 = (void *)0xE400000000000000;
    else
      v16 = (void *)0xE500000000000000;
    v17 = v11;
    v18._countAndFlagsBits = v15;
    v18._object = v16;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = 0xE000000000000000;
    v20 = static os_log_type_t.default.getter(v19);
    sub_100A06EBC((uint64_t)v17, &_mh_execute_header, v20, "GroupActivity already exists for isMeToMe: %{public}@, should not activate.", 75, 2, inited);
    swift_setDeallocating(inited);
    v21 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v21);

    swift_release(v10);
    swift_release(v9);
    sub_1004B84A4(*(_QWORD *)(v0 + 296), type metadata accessor for CRLGloballyScopedBoardIdentifier);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100CBDF5C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 360));
  return swift_task_switch(sub_100CBDFA8, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_100CBDFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 328);
  v1 = *(_QWORD *)(v0 + 336);
  swift_release(*(_QWORD *)(v0 + 304));
  sub_100CC7570();
  swift_release(v1);
  swift_release(v2);
  sub_1004B84A4(*(_QWORD *)(v0 + 296), type metadata accessor for CRLGloballyScopedBoardIdentifier);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBE00C()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;

  v1 = *v0;
  v2 = *(void **)(*v0 + 368);
  swift_task_dealloc(*(_QWORD *)(*v0 + 376));

  return swift_task_switch(sub_100CBE05C, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_100CBE05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  swift_release(*(_QWORD *)(v0 + 304));
  swift_release(v2);
  swift_release(v1);
  sub_1004B84A4(*(_QWORD *)(v0 + 296), type metadata accessor for CRLGloballyScopedBoardIdentifier);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBE0BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 296);
  swift_release(*(_QWORD *)(v0 + 304));
  swift_release(v2);
  swift_release(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBE114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  v5[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v5[5] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v5[6] = v8;
  v5[7] = v9;
  return swift_task_switch(sub_100CBE1A0, v8, v9);
}

uint64_t sub_100CBE1A0()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10140F0C4);
  v0[8] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100CBE1FC;
  return sub_100D2B440(v0[4], v0[3]);
}

uint64_t sub_100CBE1FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100BE68B4;
  else
    v4 = sub_100CBE25C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100CBE25C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1013FEAA4);
  *(_QWORD *)(v0 + 80) = v1;
  *v1 = v0;
  v1[1] = sub_100CBE2BC;
  return sub_1009905F0(*(_QWORD *)(v0 + 32), 0);
}

uint64_t sub_100CBE2BC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  return swift_task_switch(sub_100CBE308, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_100CBE308()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 40));
  sub_1004B84A4(v1, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t (*sub_100CBE354(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession, a1, 33, 0);
  return j__swift_endAccess_0;
}

uint64_t sub_100CBE398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[26] = a3;
  v4[27] = v3;
  v4[24] = a1;
  v4[25] = a2;
  v5 = type metadata accessor for CRLBoardCRDTData(0);
  v4[28] = v5;
  v4[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v4[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100CBE418, 0, 0);
}

uint64_t sub_100CBE418()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);

  v1 = v0[30];
  v2 = v0[26];
  v3 = v0[27];
  v4 = v0[24];
  v5 = (void *)v0[25];
  *(_QWORD *)(v3 + 24) = objc_msgSend((id)objc_opt_self(NSHashTable), "weakObjectsHashTable");
  *(_QWORD *)(v3 + 32) = objc_msgSend((id)objc_opt_self(NSHashTable), "weakObjectsHashTable");
  *(_QWORD *)(v3 + 40) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v3 + 48) = 0;
  *(_WORD *)(v3 + 56) = 0;
  v6 = type metadata accessor for CRLUnfairLock();
  v7 = swift_allocObject(v6, 24, 7);
  v8 = (_DWORD *)swift_slowAlloc(4, -1);
  *v8 = 0;
  *(_QWORD *)(v7 + 16) = v8;
  atomic_thread_fence(memory_order_acq_rel);
  *(_QWORD *)(v3 + 64) = v7;
  v9 = sub_1004B804C(&qword_10140E000);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = PassthroughSubject.init()();
  *(_QWORD *)(v3 + 72) = v10;
  *(_BYTE *)(v3 + 80) = 0;
  v0[31] = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo__unsafe_lastActivityTime;
  Date.init()(v10);
  *(_BYTE *)(v3 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_hasPausedIncomingDatabaseUpdate) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_didLockOnPausingOutgoingRealTimeChanges) = 0;
  v11 = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync;
  v0[32] = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync;
  *(_QWORD *)(v3 + v11) = 0;
  v12 = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession;
  v0[33] = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession;
  v13 = (_OWORD *)(v3 + v12);
  *v13 = 0u;
  v13[1] = 0u;
  v14 = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_onlyShowJoinLeavePlacardsAfterThisTime;
  v0[34] = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_onlyShowJoinLeavePlacardsAfterThisTime;
  v15 = v3 + v14;
  v16 = type metadata accessor for Date(0);
  v0[35] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v0[36] = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  *(_QWORD *)(v3
            + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_cloudQuotaExceededAlertMinimumLastShowDateInterval) = 0x408C200000000000;
  *(_QWORD *)(v3 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_promptCloudQuotaExceededTask) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_reloadBoardTask) = 0;
  v18 = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_syncPriorityProvider;
  v0[37] = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_syncPriorityProvider;
  *(_QWORD *)(v3 + v18) = v2;
  sub_1004B8460(v4, v1, type metadata accessor for CRLBoardIdentifier);
  v19 = unk_1013EF4DC;
  v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1013EF4D8 + dword_1013EF4D8);
  swift_retain(v2);
  v20 = v5;
  v21 = (_QWORD *)swift_task_alloc(v19);
  v0[38] = v21;
  *v21 = v0;
  v21[1] = sub_100CBE644;
  return v23(v0[30], v0[25], 0);
}

uint64_t sub_100CBE644(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 304);
  *(_QWORD *)(*v2 + 312) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100CBE914;
  }
  else
  {
    *(_QWORD *)(v4 + 320) = a1;
    v6 = sub_100CBE6B8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100CBE6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 320);
  if (qword_1013DD6B8 != -1)
    swift_once(&qword_1013DD6B8, sub_100A00A6C);
  v2 = *(_QWORD *)(v0 + 232);
  v24 = *(void **)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 208);
  swift_beginAccess(&static OS_os_log.crlDefault, v0 + 128, 0, 0);
  v3 = (void *)static OS_os_log.crlDefault;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v4, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v6 = v3;
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v10 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v9;
  v11 = *(char **)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v12 = *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform8CRLBoard_data] + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v12, v0 + 152, 0, 0);
  sub_1004B8460(v12, v2, type metadata accessor for CRLBoardCRDTData);
  v13 = v11;
  v14 = sub_1004B804C(&qword_1013E1980);
  CRRegister.wrappedValue.getter(v14);
  v15 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 184);
  sub_1004B84A4(v2, type metadata accessor for CRLBoardCRDTData);

  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v10;
  *(_QWORD *)(inited + 72) = v15;
  *(_QWORD *)(inited + 80) = v16;
  v18 = static os_log_type_t.default.getter(v17);
  sub_100A06EBC((uint64_t)v6, &_mh_execute_header, v18, "Created BoardInfo for %{public}@ : '%@'", 39, 2, inited);
  swift_setDeallocating(inited);
  v19 = *(_QWORD *)(inited + 16);
  v20 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, v19, v20);

  swift_release(v23);
  sub_1004B84A4(v22, type metadata accessor for CRLBoardIdentifier);
  swift_task_dealloc(v25);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 216));
}

uint64_t sub_100CBE914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(void **)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 208));

  sub_1004B84A4(v8, type metadata accessor for CRLBoardIdentifier);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 40));
  swift_unknownObjectRelease(*(_QWORD *)(v7 + 48));
  swift_release(*(_QWORD *)(v7 + 64));
  v10 = swift_release(*(_QWORD *)(v7 + 72));
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 8))(v7 + v6, v3, v10);
  swift_unknownObjectRelease(*(_QWORD *)(v7 + v5));
  sub_10066BEC4(*(_QWORD *)(v7 + v4), *(_QWORD *)(v7 + v4 + 8), *(_QWORD *)(v7 + v4 + 16), *(_QWORD *)(v7 + v4 + 24));
  sub_1004CB800(v7 + v2, &qword_1013E04F0);
  swift_release(*(_QWORD *)(v7 + v13));
  swift_release(*(_QWORD *)(v7 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_promptCloudQuotaExceededTask));
  swift_release(*(_QWORD *)(v7 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_reloadBoardTask));
  v11 = type metadata accessor for CRLBoardLibrary.BoardInfo(0);
  swift_deallocPartialClassInstance(v7, v11, *(unsigned int *)(*(_QWORD *)v7 + 48), *(unsigned __int16 *)(*(_QWORD *)v7 + 52));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBEA68()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[40] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013E04F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[41] = swift_task_alloc(v2);
  v1[42] = swift_task_alloc(v2);
  v3 = type metadata accessor for CRLBoardCRDTData(0);
  v1[43] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v1[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v1[45] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v1[46] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[47] = swift_task_alloc(v7);
  v1[48] = swift_task_alloc(v7);
  v8 = sub_1004B804C(&qword_10140E0C8);
  v1[49] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[50] = v9;
  v1[51] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100CBEB78, 0, 0);
}

void sub_100CBEB78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[40];
  if (*(_BYTE *)(v1 + 56) == 1)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"setUp()", 7, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2049, "Duplicate call to setUp()", 25, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setUp()", 7, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2049, (uint64_t)"Duplicate call to setUp()", 25, 2u);
    v1 = v0[40];
  }
  v2 = *(_QWORD *)(v1 + 16);
  v0[52] = v2;
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_suspendResumeCoordinator);
  v0[53] = v3;
  if (v3)
  {
    v4 = type metadata accessor for MainActor(0);
    swift_retain(v3);
    v0[54] = static MainActor.shared.getter(v5);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    swift_task_switch(sub_100CBECC0, v6, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100CBECC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[53];
  swift_release(v0[54]);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v3 = Strong;
    sub_100757E04(&_mh_execute_header, (uint64_t)"setObserver(_:)", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLSuspendResumeCoordinator.swift", 102, 2, 71, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setObserver(_:)", 15, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLSuspendResumeCoordinator.swift", 102, 2u, 71, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
    swift_unknownObjectRelease(v3);
  }
  v4 = v0[53];
  v5 = v0[40];
  *(_QWORD *)(v1 + 24) = &off_10129F428;
  swift_unknownObjectWeakAssign(v1 + 16, v5);
  swift_release(v4);
  return swift_task_switch(sub_100CBEDE4, 0, 0);
}

uint64_t sub_100CBEDE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  *(_QWORD *)(v0 + 440) = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  v74 = v3;
  v75 = v1;
  v4 = *(char **)(v1 + v3);
  *(_QWORD *)(v0 + 448) = v4;
  v5 = *(_QWORD *)&v4[OBJC_IVAR____TtC8Freeform8CRLBoard_uncommittedChangeAvailablePublisher];
  v6 = (void *)objc_opt_self(NSRunLoop);
  v7 = v4;
  v8 = objc_msgSend(v6, "mainRunLoop", swift_retain(v5).n128_f64[0]);
  *(_QWORD *)(v0 + 16) = 0x3FB999999999999ALL;
  *(_QWORD *)(v0 + 24) = v5;
  *(_QWORD *)(v0 + 32) = v8;
  *(_QWORD *)(v0 + 40) = NSRunLoopCommonModes;
  *(_QWORD *)(v0 + 48) = sub_100CBF874;
  *(_QWORD *)(v0 + 56) = 0;
  v9 = swift_allocObject(&unk_10129FB00, 24, 7);
  swift_unknownObjectWeakInit(v9 + 16, v7);
  v10 = swift_allocObject(&unk_10129F9C0, 24, 7);
  swift_weakInit(v10 + 16, v2);
  v11 = swift_allocObject(&unk_10129FB28, 32, 7);
  *(_QWORD *)(v11 + 16) = v9;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = NSRunLoopCommonModes;
  v70 = sub_1004B804C(&qword_10140E0D0);
  v13 = sub_1004CBA30(&qword_10140E0D8, &qword_10140E0D0, (uint64_t)&unk_100EFFB28);
  v14 = Publisher<>.sink(receiveValue:)(sub_100CEC9A8, v11, v70, v13);
  swift_release(v11);
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 56));
  v15 = v2;
  v16 = v2 + 40;
  swift_beginAccess(v2 + 40, v0 + 280, 33, 0);
  AnyCancellable.store(in:)(v2 + 40);
  swift_endAccess(v0 + 280);
  swift_release(v14);
  v17 = *(_QWORD *)&v7[OBJC_IVAR____TtC8Freeform8CRLBoard_uncommittedRealTimeChangesAvailablePublisher];
  v18 = objc_msgSend(v6, "mainRunLoop", swift_retain(v17).n128_f64[0]);
  *(_QWORD *)(v0 + 112) = 0x3F847AE147AE147BLL;
  v72 = v0 + 232;
  *(_QWORD *)(v0 + 120) = v17;
  *(_QWORD *)(v0 + 128) = v18;
  v19 = v12;
  *(_QWORD *)(v0 + 136) = v12;
  *(_QWORD *)(v0 + 144) = CRLWPShapeLayout.descendersCannotClip.getter;
  *(_QWORD *)(v0 + 152) = 0;
  v20 = swift_allocObject(&unk_10129F9C0, 24, 7);
  v21 = v15;
  swift_weakInit(v20 + 16, v15);
  v22 = swift_allocObject(&unk_10129FB50, 32, 7);
  *(_QWORD *)(v22 + 16) = v20;
  *(_QWORD *)(v22 + 24) = v7;
  v73 = v7;
  v23 = v19;
  v24 = Publisher<>.sink(receiveValue:)(sub_100CEC9DC, v22, v70, v13);
  swift_release(v22);
  swift_release(*(_QWORD *)(v0 + 120));

  swift_release(*(_QWORD *)(v0 + 152));
  swift_beginAccess(v16, v0 + 160, 33, 0);
  AnyCancellable.store(in:)(v16);
  swift_endAccess(v0 + 160);
  swift_release(v24);
  v25 = *(_QWORD *)(v21 + 72);
  *(_QWORD *)(v0 + 304) = v25;
  v26 = qword_1013DDAD8;
  swift_retain(v25);
  if (v26 != -1)
    swift_once(&qword_1013DDAD8, sub_100B030C8);
  v27 = *(_QWORD *)(v0 + 408);
  v66 = *(_QWORD *)(v0 + 392);
  v67 = *(_QWORD *)(v0 + 400);
  v69 = *(_QWORD *)(v0 + 352);
  v71 = *(_QWORD *)(v0 + 384);
  v68 = *(_QWORD *)(v0 + 344);
  v65 = *(_QWORD *)(v0 + 320);
  v28 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v29 = sub_1004F2A1C(v28, (uint64_t)qword_101480AD8);
  v30 = objc_msgSend(v6, "mainRunLoop");
  *(_QWORD *)(v0 + 312) = v30;
  v31 = sub_1004B804C(&qword_10140E000);
  v32 = sub_1004B8930(0, &qword_10140B9F0, NSRunLoop_ptr);
  v33 = sub_1004CBA30(&qword_10140E0E0, &qword_10140E000, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v34 = sub_1005A15B8(&qword_10140BA00, &qword_10140B9F0, NSRunLoop_ptr, (uint64_t)&protocol conformance descriptor for NSRunLoop);
  Publisher.throttle<A>(for:scheduler:latest:)(v29, v0 + 312, 0, v31, v32, v33, v34);

  swift_release(*(_QWORD *)(v0 + 304));
  v35 = swift_allocObject(&unk_10129FB00, 24, 7);
  swift_unknownObjectWeakInit(v35 + 16, v73);
  v36 = swift_allocObject(&unk_10129F9C0, 24, 7);
  swift_weakInit(v36 + 16, v65);
  v37 = swift_allocObject(&unk_10129FB78, 32, 7);
  *(_QWORD *)(v37 + 16) = v35;
  *(_QWORD *)(v37 + 24) = v36;
  v38 = sub_1004CBA30(&qword_10140E0E8, &qword_10140E0C8, (uint64_t)&protocol conformance descriptor for Publishers.Throttle<A, B>);
  v39 = Publisher<>.sink(receiveValue:)(sub_100CEC9F0, v37, v66, v38);
  v40 = swift_release(v37);
  (*(void (**)(uint64_t, uint64_t, __n128))(v67 + 8))(v27, v66, v40);
  swift_beginAccess(v16, v72, 33, 0);
  AnyCancellable.store(in:)(v16);
  swift_endAccess(v72);
  swift_release(v39);
  v41 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v42 = *(_QWORD *)&v73[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v43 = v42 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v42 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 184, 0, 0);
  sub_1004B8460(v43, v68, type metadata accessor for CRLBoardCRDTData);
  swift_retain(v42);
  v44 = sub_1004B804C(&qword_1013E1A80);
  *(_QWORD *)(v0 + 456) = v44;
  CRRegister.wrappedValue.getter(v44);
  sub_1004B84A4(v68, type metadata accessor for CRLBoardCRDTData);
  swift_release(v42);
  v45 = (uint64_t *)(*(_QWORD *)&v73[v41] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v47 = *v45;
  v46 = v45[1];
  swift_bridgeObjectRetain(v46);
  sub_10067AFD0(v69, v47, v46, v71);
  v48 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1013DD4A8 != -1)
    swift_once(&qword_1013DD4A8, sub_1008F5A8C);
  v50 = *(_QWORD *)(v0 + 376);
  v49 = *(_QWORD *)(v0 + 384);
  v52 = *(_QWORD *)(v0 + 360);
  v51 = *(_QWORD *)(v0 + 368);
  v53 = *(_QWORD *)(v0 + 320);
  v54 = qword_10147FEB8;
  v55 = swift_allocObject(&unk_10129F9C0, 24, 7);
  swift_weakInit(v55 + 16, v53);
  sub_1004B8460(v49, v50, type metadata accessor for CRLBoardIdentifier);
  v56 = *(unsigned __int8 *)(v52 + 80);
  v57 = (v56 + 24) & ~v56;
  v58 = swift_allocObject(&unk_10129FBA0, v57 + v51, v56 | 7);
  *(_QWORD *)(v58 + 16) = v55;
  sub_1004B84E0(v50, v58 + v57, type metadata accessor for CRLBoardIdentifier);
  *(_QWORD *)(v0 + 96) = sub_100CEC9FC;
  *(_QWORD *)(v0 + 104) = v58;
  *(_QWORD *)(v0 + 64) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 72) = *(_QWORD *)"";
  *(_QWORD *)(v0 + 80) = sub_100568280;
  *(_QWORD *)(v0 + 88) = &unk_10129FBB8;
  v59 = _Block_copy((const void *)(v0 + 64));
  v60 = objc_msgSend(v48, "addObserverForName:object:queue:usingBlock:", v54, 0, 0, v59, swift_release(*(_QWORD *)(v0 + 104)).n128_f64[0]);
  _Block_release(v59);

  v61 = *(_QWORD *)(v53 + 48);
  *(_QWORD *)(v53 + 48) = v60;
  swift_unknownObjectRelease(v61);
  v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 + v74) + OBJC_IVAR____TtC8Freeform8CRLBoard_store)
                  + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_assetUploadTracker);
  *(_QWORD *)(v0 + 464) = v62;
  v63 = *(_QWORD *)(v62 + 16);
  *(_QWORD *)(v0 + 472) = v63;
  swift_retain(v62);
  return swift_task_switch(sub_100CBF5D0, v63, 0);
}

uint64_t sub_100CBF5D0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[58];
  objc_msgSend(*(id *)(v0[59] + 112), "addObject:", v0[40]);
  swift_release(v1);
  return swift_task_switch(sub_100CBF624, 0, 0);
}

uint64_t sub_100CBF624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 456);
  v19 = *(void **)(v0 + 448);
  v22 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v20 = *(_QWORD *)(v0 + 328);
  v21 = *(_QWORD *)(v0 + 320);
  v17 = *(_QWORD *)(v0 + 336);
  v5 = *(char **)(*(_QWORD *)(v0 + 416) + *(_QWORD *)(v0 + 440));
  v6 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v8 = v7 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v7 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 256, 0, 0);
  sub_1004B8460(v8, v3, type metadata accessor for CRLBoardCRDTData);
  v9 = v5;
  swift_retain(v7);
  CRRegister.wrappedValue.getter(v1);
  sub_1004B84A4(v3, type metadata accessor for CRLBoardCRDTData);
  swift_release(v7);
  v10 = (uint64_t *)(*(_QWORD *)&v5[v6] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v12 = *v10;
  v11 = v10[1];
  swift_bridgeObjectRetain(v11);
  sub_10067AFD0(v4, v12, v11, v2);

  sub_100580CD0(v2);
  v13 = sub_1004B84A4(v2, type metadata accessor for CRLBoardIdentifier);
  Date.init(timeIntervalSinceNow:)(v13, 15.0);

  sub_1004B84A4(v18, type metadata accessor for CRLBoardIdentifier);
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v17, 0, 1, v14);
  sub_1004C4938(v17, v20, &qword_1013E04F0);
  v15 = v21 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_onlyShowJoinLeavePlacardsAfterThisTime;
  swift_beginAccess(v21 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_onlyShowJoinLeavePlacardsAfterThisTime, v0 + 208, 33, 0);
  sub_100582338(v20, v15, &qword_1013E04F0);
  swift_endAccess(v0 + 208);
  *(_BYTE *)(v21 + 56) = 1;
  swift_task_dealloc(v22);
  swift_task_dealloc(v18);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v17);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CBF874(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v38[12];
  unsigned int v39;
  _BYTE v40[72];
  _BYTE v41[72];
  _BYTE v42[32];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v38[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1004B804C(&qword_101405D18);
  v7 = __chkstk_darwin(v6);
  v9 = &v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(int *)(v7 + 48);
  sub_1004B8460(a1, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
  v11 = *(unsigned __int8 *)(a1 + v10);
  v9[v10] = v11;
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
  v39 = v11;
  if (v11 == 1)
  {
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v42, 0, 0);
    v12 = (void *)static OS_os_log.boardStore;
    v13 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v13, v40);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v15 = *(int *)(v6 + 48);
    sub_1004B8460(a1, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    v9[v15] = *(_BYTE *)(a1 + v10);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v5, v9, v2);
    v16 = v12;
    v17 = sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v21 = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v18;
    v22 = inited + 32;
    *(_QWORD *)(inited + 64) = v21;
    *(_QWORD *)(inited + 40) = v20;
    v23 = static os_log_type_t.info.getter();
    v24 = "Observed a significant change in board %@. Saving immediately.";
    v25 = (uint64_t)v16;
    v26 = 62;
  }
  else
  {
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v42, 0, 0);
    v27 = (void *)static OS_os_log.boardStore;
    v28 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v28, v41);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v29 = *(int *)(v6 + 48);
    sub_1004B8460(a1, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    v9[v29] = *(_BYTE *)(a1 + v10);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v5, v9, v2);
    v16 = v27;
    v30 = sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    v31 = UUID.uuidString.getter(v30);
    v33 = v32;
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v34 = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v31;
    v22 = inited + 32;
    *(_QWORD *)(inited + 64) = v34;
    *(_QWORD *)(inited + 40) = v33;
    v23 = static os_log_type_t.info.getter();
    v24 = "Observed a change in board %@. Saving soon";
    v25 = (uint64_t)v16;
    v26 = 42;
  }
  sub_100A06EBC(v25, &_mh_execute_header, v23, v24, v26, 2, inited);
  swift_setDeallocating(inited);
  v35 = *(_QWORD *)(inited + 16);
  v36 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v22, v35, v36);

  return v39;
}

void sub_100CBFBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;
  _BYTE v32[24];
  _BYTE v33[24];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v33, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v14 = (void *)Strong;
    v15 = a3 + 16;
    swift_beginAccess(v15, v32, 0, 0);
    v16 = swift_weakLoadStrong(v15);
    if (v16)
    {
      v17 = v16;
      sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
      v28 = static OS_dispatch_queue.main.getter();
      v18 = swift_allocObject(&unk_10129FC68, 32, 7);
      *(_QWORD *)(v18 + 16) = v14;
      *(_QWORD *)(v18 + 24) = v17;
      aBlock[4] = sub_100CECB98;
      v31 = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = *(_QWORD *)"";
      aBlock[2] = sub_1005D2FC0;
      aBlock[3] = &unk_10129FC80;
      v19 = _Block_copy(aBlock);
      v27 = v6;
      v20 = v19;
      v26 = v14;
      v21 = swift_retain(v17);
      static DispatchQoS.unspecified.getter(v21);
      v29 = _swiftEmptyArrayStorage;
      v22 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v23 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
      v24 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v5, v22);
      v25 = (void *)v28;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v20);
      _Block_release(v20);

      swift_release(v17);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_release(v31);
    }
    else
    {

    }
  }
}

double sub_100CBFE54(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39[24];
  char v40[72];
  char v41[24];

  v38 = a2;
  v3 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v41, 0, 0);
  v12 = (void *)static OS_os_log.boardStore;
  v13 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v13, v40);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v15 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v16 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v17 = v16 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v16 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v39, 0, 0);
  sub_1004B8460(v17, (uint64_t)v5, type metadata accessor for CRLBoardCRDTData);
  v18 = v12;
  swift_retain(v16);
  v19 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v19);
  sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardCRDTData);
  swift_release(v16);
  v20 = (uint64_t *)(*(_QWORD *)&a1[v15] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v21 = *v20;
  v22 = v20[1];
  swift_bridgeObjectRetain(v22);
  sub_10067AFD0((uint64_t)v8, v21, v22, (uint64_t)v11);
  v23 = v36;
  v24 = v37;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v8, v11, v37);
  v25 = sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
  v26 = UUID.uuidString.getter(v25);
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v26;
  *(_QWORD *)(inited + 40) = v28;
  v29 = static os_log_type_t.info.getter();
  sub_100A06EBC((uint64_t)v18, &_mh_execute_header, v29, "Autosaving %{public}@", 21, 2, inited);
  swift_setDeallocating(inited);
  v30 = *(_QWORD *)(inited + 16);
  v31 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, v30, v31);

  v32 = swift_allocObject(&unk_10129FCB8, 32, 7);
  v33 = v38;
  *(_QWORD *)(v32 + 16) = a1;
  *(_QWORD *)(v32 + 24) = v33;
  v34 = a1;
  swift_retain(v33);
  sub_100B238A0((void (*)(_QWORD, _QWORD))sub_100CECBA4, v32);
  *(_QWORD *)&result = swift_release(v32).n128_u64[0];
  return result;
}

uint64_t sub_100CC0168(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE v55[24];
  char v56[24];
  char v57[72];
  char v58[32];

  v53 = a3;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v54 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLBoardIdentifier(0);
  result = __chkstk_darwin(v17);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0 && (a1 & 1) != 0)
  {
    v49 = v13;
    v50 = v8;
    v51 = v7;
    v52 = a4;
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v58, 0, 0);
    v21 = (void *)static OS_os_log.boardStore;
    v22 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v22, v57);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v24 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
    v25 = v53;
    v26 = *(_QWORD *)(v53 + OBJC_IVAR____TtC8Freeform8CRLBoard_data);
    v27 = v26 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v26 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v56, 0, 0);
    sub_1004B8460(v27, (uint64_t)v12, type metadata accessor for CRLBoardCRDTData);
    v28 = v21;
    swift_retain(v26);
    v29 = sub_1004B804C(&qword_1013E1A80);
    CRRegister.wrappedValue.getter(v29);
    sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardCRDTData);
    swift_release(v26);
    v30 = (uint64_t *)(*(_QWORD *)(v25 + v24) + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v31 = *v30;
    v32 = v30[1];
    swift_bridgeObjectRetain(v32);
    sub_10067AFD0((uint64_t)v16, v31, v32, (uint64_t)v20);
    v33 = v49;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, v49);
    v34 = sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v33);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v35;
    *(_QWORD *)(inited + 40) = v37;
    v38 = static os_log_type_t.info.getter();
    sub_100A06EBC((uint64_t)v28, &_mh_execute_header, v38, "Success autosaving %{public}@", 29, 2, inited);
    swift_setDeallocating(inited);
    v39 = *(_QWORD *)(inited + 16);
    v40 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, v39, v40);

    v41 = v52;
    v42 = *(_QWORD *)(v52 + 64);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v42 + 16));
    *(_BYTE *)(v41 + 80) = 1;
    v43 = v54;
    Date.init()(v44);
    v45 = v41 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo__unsafe_lastActivityTime;
    swift_beginAccess(v41 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo__unsafe_lastActivityTime, v55, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 40))(v45, v43, v51);
    swift_endAccess(v55);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 16));
    v46 = sub_1004B804C(&qword_10140E000);
    v47 = sub_1004CBA30(&qword_10140E118, &qword_10140E000, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    return Subject<>.send()(v46, v47);
  }
  return result;
}

double sub_100CC0554(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double result;
  _BYTE v18[24];

  v5 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = a2 + 16;
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  v10 = swift_allocObject(&unk_10129F9C0, 24, 7);
  swift_beginAccess(v8, v18, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  swift_weakInit(v10 + 16, Strong);
  swift_release(Strong);
  type metadata accessor for MainActor(0);
  swift_retain(v10);
  v12 = a3;
  v13 = static MainActor.shared.getter(v12);
  v14 = (_QWORD *)swift_allocObject(&unk_10129FBF0, 48, 7);
  v14[2] = v13;
  v14[3] = &protocol witness table for MainActor;
  v14[4] = v10;
  v14[5] = v12;
  swift_release(v10);
  v15 = sub_100521B98((uint64_t)v7, (uint64_t)&unk_10140E0F8, (uint64_t)v14);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_100CC06AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[32] = a4;
  v5[33] = a5;
  v6 = sub_1004B804C(&qword_1013E01F0);
  v5[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardCRDTData(0);
  v5[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v5[36] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[37] = v9;
  v5[38] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  v5[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013F7360) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[40] = swift_task_alloc(v11);
  v5[41] = swift_task_alloc(v11);
  v12 = type metadata accessor for MainActor(0);
  v5[42] = v12;
  v5[43] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CC07DC, v13, v14);
}

uint64_t sub_100CC07DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 344));
  v1 += 16;
  swift_beginAccess(v1, v0 + 208, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = (uint64_t *)(Strong + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession);
    swift_beginAccess(Strong + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession, v0 + 88, 0, 0);
    v5 = *v4;
    v6 = v4[1];
    v7 = v4[2];
    v8 = v4[3];
    sub_10066BE78(v5, v6, v7, v8);
    swift_release(v3);
    if (v5)
    {
      swift_retain(v5);
      sub_10066BEC4(v9, v6, v7, v8);
      v10 = *(_QWORD *)(v5 + 32);
      swift_retain(v10);
      swift_release(v5);
      if (v10)
      {
        v11 = *(_QWORD *)(v0 + 256) + 16;
        swift_beginAccess(v11, v0 + 112, 0, 0);
        v12 = swift_weakLoadStrong(v11);
        if (!v12)
          goto LABEL_17;
        v13 = v12;
        v14 = (uint64_t *)(v12 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession);
        swift_beginAccess(v12 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession, v0 + 136, 0, 0);
        v15 = *v14;
        v16 = v14[1];
        v17 = v14[2];
        v18 = v14[3];
        sub_10066BE78(v15, v16, v17, v18);
        swift_release(v13);
        if (!v15)
          goto LABEL_17;
        swift_retain(v15);
        sub_10066BEC4(v19, v16, v17, v18);
        v20 = sub_1004B804C(&qword_1013FEE80);
        v21 = swift_dynamicCastClass(v15, v20);
        if (!v21)
        {
          swift_release(v15);
LABEL_17:
          v53 = *(_QWORD *)(v0 + 272);
          v54 = type metadata accessor for TaskPriority(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 1, 1, v54);
          swift_retain(v10);
          v56 = static MainActor.shared.getter(v55);
          v57 = (_QWORD *)swift_allocObject(&unk_10129FC18, 40, 7);
          v57[2] = v56;
          v57[3] = &protocol witness table for MainActor;
          v57[4] = v10;
          v58 = sub_100521B98(v53, (uint64_t)&unk_10140E108, (uint64_t)v57);
          swift_release(v10);
          swift_release(v58);
          goto LABEL_18;
        }
        v22 = *(_QWORD *)(v0 + 328);
        v23 = v21 + *(_QWORD *)(*(_QWORD *)v21 + 280);
        swift_beginAccess(v23, v0 + 160, 0, 0);
        sub_1004CB7BC(v23, v22, &qword_1013F7360);
        v24 = sub_1004B804C(&qword_1013FED60);
        v25 = *(_QWORD *)(v24 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24) == 1)
        {
          swift_release(v15);
        }
        else
        {
          v26 = *(_QWORD *)(v0 + 320);
          sub_1004CB7BC(*(_QWORD *)(v0 + 328), v26, &qword_1013F7360);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v25 + 88))(v26, v24) == enum case for GroupSession.State.waiting<A>(_:))
          {
            v27 = qword_1013DD888;
            swift_retain(v15);
            if (v27 != -1)
              swift_once(&qword_1013DD888, sub_100A05DE4);
            v28 = *(_QWORD *)(v0 + 304);
            v66 = *(_QWORD *)(v0 + 312);
            v67 = *(_QWORD *)(v0 + 296);
            v29 = *(_QWORD *)(v0 + 280);
            v68 = *(_QWORD *)(v0 + 288);
            v69 = *(_QWORD *)(v0 + 328);
            v30 = *(_QWORD *)(v0 + 264);
            swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 184, 0, 0);
            v65 = (void *)static OS_os_log.realTimeSync;
            v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            inited = swift_initStackObject(v31, v0 + 16);
            *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
            v33 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
            v34 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform8CRLBoard_data);
            v35 = v34 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
            swift_beginAccess(v34 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 232, 0, 0);
            sub_1004B8460(v35, v29, type metadata accessor for CRLBoardCRDTData);
            v36 = v65;
            swift_retain(v34);
            v37 = sub_1004B804C(&qword_1013E1A80);
            CRRegister.wrappedValue.getter(v37);
            sub_1004B84A4(v29, type metadata accessor for CRLBoardCRDTData);
            swift_release(v34);
            v38 = (uint64_t *)(*(_QWORD *)(v30 + v33) + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
            v39 = *v38;
            v40 = v38[1];
            swift_bridgeObjectRetain(v40);
            sub_10067AFD0(v28, v39, v40, v66);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v28, v66, v68);
            v41 = sub_1004B84A4(v66, type metadata accessor for CRLBoardIdentifier);
            v42 = UUID.uuidString.getter(v41);
            v44 = v43;
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v28, v68);
            *(_QWORD *)(inited + 56) = &type metadata for String;
            *(_QWORD *)(inited + 64) = sub_1004CFC2C();
            *(_QWORD *)(inited + 32) = v42;
            *(_QWORD *)(inited + 40) = v44;
            v46 = static os_log_type_t.default.getter(v45);
            v47.n128_f64[0] = sub_100A06EBC((uint64_t)v36, &_mh_execute_header, v46, "Tried to send real-time changes but state is .waiting, so fast sync changes will not be transferred %{public}@", 110, 2, inited);
            swift_release_n(v15, 2, v47);
            swift_setDeallocating(inited);
            v48 = *(_QWORD *)(inited + 16);
            v49 = sub_1004B804C(&qword_1013E0190);
            swift_arrayDestroy(inited + 32, v48, v49);

            v50 = v69;
            goto LABEL_16;
          }
          v51 = *(_QWORD *)(v0 + 320);
          v52 = swift_release(v15);
          (*(void (**)(uint64_t, uint64_t, __n128))(v25 + 8))(v51, v24, v52);
        }
        v50 = *(_QWORD *)(v0 + 328);
LABEL_16:
        sub_1004CB800(v50, &qword_1013F7360);
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v59 = *(_QWORD *)(v0 + 320);
  v61 = *(_QWORD *)(v0 + 304);
  v60 = *(_QWORD *)(v0 + 312);
  v63 = *(_QWORD *)(v0 + 272);
  v62 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CC0D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a4;
  v6 = sub_1004B804C(&qword_1013E01F0);
  v4[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[4] = v7;
  v4[5] = static MainActor.shared.getter(v7);
  return swift_task_switch(sub_100CC0DDC, a4, 0);
}

uint64_t sub_100CC0DDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[4];
  v3 = v0[2];
  v2 = v0[3];
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = sub_1004B7878((unint64_t *)&qword_1013FEE90, (uint64_t (*)(uint64_t))type metadata accessor for CRLGroupSessionSyncController, (uint64_t)&unk_100F2ECA0);
  v6 = (_QWORD *)swift_allocObject(&unk_10129FC40, 40, 7);
  v6[2] = v3;
  v6[3] = v5;
  v6[4] = v3;
  swift_retain_n(v3, 2);
  v7 = sub_100521B98(v2, (uint64_t)&unk_10140E110, (uint64_t)v6);
  swift_release(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CC0EC8, v8, v9);
}

uint64_t sub_100CC0EC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100CC0F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[24];
  char v71[24];
  char v72[24];
  char v73[32];

  v5 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v8 - 8);
  v66 = (char *)v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v73, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v19 = (char *)Strong;
    v20 = a3 + 16;
    swift_beginAccess(v20, v72, 0, 0);
    v21 = swift_weakLoadStrong(v20);
    if (v21)
    {
      v22 = v21;
      v23 = *(os_unfair_lock_s **)(*(_QWORD *)(v21 + 64) + 16);
      os_unfair_lock_lock(v23);
      v63 = v22;
      v24 = v22 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo__unsafe_lastActivityTime;
      swift_beginAccess(v24, v71, 0, 0);
      v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v64 = v17;
      v25(v17, v24, v14);
      os_unfair_lock_unlock(v23);
      v61 = v15;
      v62 = v14;
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, v70, 0, 0);
      v26 = (void *)static OS_os_log.boardStore;
      v27 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v27, &v69);
      *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
      v29 = *(_QWORD *)&v19[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
      v30 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
      v59 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
      v31 = v29 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v29 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, &v68, 0, 0);
      sub_1004B8460(v31, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
      v58 = v26;
      swift_retain(v29);
      v60 = sub_1004B804C(&qword_1013E1A80);
      CRRegister.wrappedValue.getter(v60);
      sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
      swift_release(v29);
      v32 = (uint64_t *)(*(_QWORD *)&v19[v30] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      v33 = *v32;
      v34 = v32[1];
      swift_bridgeObjectRetain(v34);
      sub_10067AFD0((uint64_t)v10, v33, v34, (uint64_t)v13);
      v36 = v65;
      v35 = (uint64_t)v66;
      (*(void (**)(char *, char *, char *))(v65 + 16))(v10, v13, v66);
      v37 = sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
      v38 = UUID.uuidString.getter(v37);
      v40 = v39;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v35);
      v66 = v13;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v41 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v41;
      *(_QWORD *)(inited + 32) = v38;
      *(_QWORD *)(inited + 40) = v40;
      v42 = Date.description.getter(v41);
      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 104) = v41;
      *(_QWORD *)(inited + 72) = v42;
      *(_QWORD *)(inited + 80) = v43;
      v44 = static os_log_type_t.info.getter();
      v45 = v58;
      sub_100A06EBC((uint64_t)v58, &_mh_execute_header, v44, "Updating activity time for %{public}@ to %{public}@", 51, 2, inited);
      swift_setDeallocating(inited);
      v46 = *(_QWORD *)(inited + 16);
      v47 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, v46, v47);

      v48 = v63;
      v49 = *(os_unfair_lock_s **)(*(_QWORD *)(v63 + 64) + 16);
      os_unfair_lock_lock(v49);
      *(_BYTE *)(v48 + 80) = 0;
      os_unfair_lock_unlock(v49);
      v50 = v59;
      v51 = *(_QWORD *)&v19[v59];
      v52 = v51 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
      swift_beginAccess(v51 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, &v67, 0, 0);
      sub_1004B8460(v52, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
      swift_retain(v51);
      CRRegister.wrappedValue.getter(v60);
      sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
      swift_release(v51);
      v53 = (uint64_t *)(*(_QWORD *)&v19[v50] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      v54 = *v53;
      v55 = v53[1];
      swift_bridgeObjectRetain(v55);
      v56 = (uint64_t)v66;
      sub_10067AFD0((uint64_t)v10, v54, v55, (uint64_t)v66);
      v57 = (uint64_t)v64;
      sub_100A9F170(v56, (uint64_t)v64, 0, 0);
      swift_release(v48);
      sub_1004B84A4(v56, type metadata accessor for CRLBoardIdentifier);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v57, v62);
    }

  }
}

void sub_100CC1404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[5];
  __int128 v35;
  __int128 v36;
  _BYTE v37[24];

  v5 = sub_1004B804C(&qword_1013F20B0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLZoneSyncResultScenarios(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v37, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v13 = Strong;
    v14 = Notification.userInfo.getter(Strong);
    if (v14)
    {
      v15 = v14;
      v32 = 0xD000000000000026;
      v33 = 0x8000000100FDF0B0;
      AnyHashable.init<A>(_:)(&v32, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v15 + 16) && (v16 = sub_1008432BC((uint64_t)v34), (v17 & 1) != 0))
      {
        sub_1004CB6E8(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v35);
      }
      else
      {
        v35 = 0u;
        v36 = 0u;
      }
      swift_bridgeObjectRelease(v15);
      sub_1004B89A4((uint64_t)v34);
      if (*((_QWORD *)&v36 + 1))
      {
        v18 = sub_1004B804C(&qword_1013F9CD8);
        if ((swift_dynamicCast(v34, &v35, (char *)&type metadata for Any + 8, v18, 6) & 1) == 0)
        {
LABEL_30:
          swift_release(v13);
          return;
        }
        v19 = v34[0];
        if (*(_QWORD *)(v34[0] + 16) && (v20 = sub_100843264(a3), (v21 & 1) != 0))
        {
          sub_1004B8460(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v9 + 72) * v20, (uint64_t)v7, type metadata accessor for CRLZoneSyncResultScenarios);
          v22 = 0;
        }
        else
        {
          v22 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v22, 1, v8);
        v23 = swift_bridgeObjectRelease(v19);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v9 + 48))(v7, 1, v8, v23) == 1)
        {
          swift_release(v13);
          sub_1004CB800((uint64_t)v7, &qword_1013F20B0);
          return;
        }
        v24 = sub_1004B84E0((uint64_t)v7, (uint64_t)v11, type metadata accessor for CRLZoneSyncResultScenarios);
        if (*v11 == 1)
          sub_100CC3F30();
        if (v11[1] == 1)
          sub_100CC3888();
        v25 = Notification.userInfo.getter(v24);
        if (v25)
        {
          v26 = v25;
          v32 = 0xD000000000000029;
          v33 = 0x8000000100FDF0E0;
          AnyHashable.init<A>(_:)(&v32, &type metadata for String, &protocol witness table for String);
          if (*(_QWORD *)(v26 + 16) && (v27 = sub_1008432BC((uint64_t)v34), (v28 & 1) != 0))
          {
            sub_1004CB6E8(*(_QWORD *)(v26 + 56) + 32 * v27, (uint64_t)&v35);
          }
          else
          {
            v35 = 0u;
            v36 = 0u;
          }
          swift_bridgeObjectRelease(v26);
          sub_1004B89A4((uint64_t)v34);
          if (*((_QWORD *)&v36 + 1))
          {
            if ((swift_dynamicCast(v34, &v35, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
            {
              if ((v34[0] & 1) != 0)
              {
                sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLZoneSyncResultScenarios);
                goto LABEL_30;
              }
              v29 = *(_QWORD *)&v11[*(int *)(v8 + 40)];
              swift_bridgeObjectRetain(v29);
              sub_100CC8218(v30);
              swift_release(v13);
              swift_bridgeObjectRelease(v29);
            }
            else
            {
              swift_release(v13);
            }
            goto LABEL_35;
          }
        }
        else
        {
          v35 = 0u;
          v36 = 0u;
        }
        swift_release(v13);
        sub_1004CB800((uint64_t)&v35, &qword_1013E0230);
LABEL_35:
        sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLZoneSyncResultScenarios);
        return;
      }
    }
    else
    {
      v35 = 0u;
      v36 = 0u;
    }
    swift_release(v13);
    sub_1004CB800((uint64_t)&v35, &qword_1013E0230);
  }
}

void sub_100CC17D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t inited;
  id v48;
  __n128 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  __n128 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  __n128 v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  id v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  void (*v82)(char *, uint64_t, __n128);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93[72];
  uint64_t v94;
  _BYTE v95[40];
  __int128 v96;
  __int128 v97;

  v1 = v0;
  v2 = sub_1004B804C(&qword_1013E04F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v82 - v10;
  v13 = Notification.userInfo.getter(v12);
  if (!v13)
    return;
  v14 = v13;
  v89 = v1;
  if (qword_1013DCB90 != -1)
    swift_once(&qword_1013DCB90, sub_100638740);
  v15 = (void *)qword_10147ECF8;
  v94 = qword_10147ECF8;
  type metadata accessor for Name(0);
  v17 = v16;
  v18 = sub_1004B7878(&qword_1013DE6C0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_100EF1E3C);
  v19 = v15;
  AnyHashable.init<A>(_:)(&v94, v17, v18);
  if (*(_QWORD *)(v14 + 16) && (v20 = sub_1008432BC((uint64_t)v95), (v21 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(v14 + 56) + 32 * v20, (uint64_t)&v96);
  }
  else
  {
    v96 = 0u;
    v97 = 0u;
  }
  sub_1004B89A4((uint64_t)v95);
  if (!*((_QWORD *)&v97 + 1))
    goto LABEL_22;
  v88 = v11;
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8BE0);
  if ((swift_dynamicCast(&v94, &v96, (char *)&type metadata for Any + 8, v22, 6) & 1) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  v87 = v94;
  if (qword_1013DCB98 != -1)
    swift_once(&qword_1013DCB98, sub_100638774);
  v94 = qword_10147ED00;
  v23 = (id)qword_10147ED00;
  AnyHashable.init<A>(_:)(&v94, v17, v18);
  if (*(_QWORD *)(v14 + 16) && (v24 = sub_1008432BC((uint64_t)v95), (v25 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(v14 + 56) + 32 * v24, (uint64_t)&v96);
  }
  else
  {
    v96 = 0u;
    v97 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1004B89A4((uint64_t)v95);
  if (!*((_QWORD *)&v97 + 1))
  {
LABEL_22:
    swift_bridgeObjectRelease();
    sub_1004CB800((uint64_t)&v96, &qword_1013E0230);
    return;
  }
  if ((swift_dynamicCast(&v94, &v96, (char *)&type metadata for Any + 8, v22, 6) & 1) == 0)
    goto LABEL_16;
  v26 = v94;
  v27 = v89 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_onlyShowJoinLeavePlacardsAfterThisTime;
  swift_beginAccess(v89 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_onlyShowJoinLeavePlacardsAfterThisTime, v95, 0, 0);
  sub_1004CB7BC(v27, (uint64_t)v4, &qword_1013E04F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    v28 = v88;
    v29.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v6 + 32))(v88, v4, v5);
    static Date.now.getter(v29);
    v30 = static Date.> infix(_:_:)(v8, v28);
    v31 = *(void (**)(char *, uint64_t))(v6 + 8);
    v31(v8, v5);
    if ((v30 & 1) == 0)
    {
      v31(v28, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    v82 = (void (*)(char *, uint64_t, __n128))v31;
    v32 = v87;
    swift_bridgeObjectRetain(v87);
    sub_100AF8F2C(v33);
    v35 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v26);
    sub_100AF8F2C(v36);
    v38 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v35);
    v39 = sub_100CDE944(v38, v35);
    v40 = sub_100DB0170(v39, v38);
    v41 = sub_100DB0170(v39, v35);
    v83 = v26;
    v42 = (uint64_t)v41;
    swift_release(v39);
    v43 = sub_1006005DC((uint64_t)v40);
    swift_bridgeObjectRelease();
    v44 = sub_1006005DC(v42);
    swift_bridgeObjectRelease();
    if (qword_1013DD7D0 != -1)
      swift_once(&qword_1013DD7D0, sub_100A03C1C);
    swift_beginAccess(&static OS_os_log.crlJoinLeave, &v96, 0, 0);
    v45 = (void *)static OS_os_log.crlJoinLeave;
    v46 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v85 = v46;
    inited = swift_initStackObject(v46, v93);
    v86 = xmmword_100EF5E40;
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    *(_QWORD *)(inited + 56) = v22;
    v84 = sub_1004CBA30((unint64_t *)&qword_1013E8E90, (uint64_t *)&unk_1013E8BE0, (uint64_t)&protocol conformance descriptor for [A]);
    *(_QWORD *)(inited + 64) = v84;
    *(_QWORD *)(inited + 32) = v32;
    v48 = v45;
    v50 = static os_log_type_t.default.getter(v49);
    sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v50, "Notification received: oldList: %@", 34, 2, inited);
    swift_setDeallocating(inited);
    v87 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v87);

    v51 = (void *)static OS_os_log.crlJoinLeave;
    v52 = swift_initStackObject(v46, &v92);
    *(_OWORD *)(v52 + 16) = v86;
    v53 = v83;
    v54 = v84;
    *(_QWORD *)(v52 + 56) = v22;
    *(_QWORD *)(v52 + 64) = v54;
    *(_QWORD *)(v52 + 32) = v53;
    v55 = v51;
    v57 = static os_log_type_t.default.getter(v56);
    sub_100A06EBC((uint64_t)v55, &_mh_execute_header, v57, "Notification received: newList: %@", 34, 2, v52);
    swift_setDeallocating(v52);
    swift_arrayDestroy(v52 + 32, 1, v87);

    v58 = (void *)static OS_os_log.crlJoinLeave;
    v59 = swift_initStackObject(v85, &v91);
    *(_OWORD *)(v59 + 16) = v86;
    *(_QWORD *)(v59 + 56) = v22;
    *(_QWORD *)(v59 + 64) = v54;
    *(_QWORD *)(v59 + 32) = v43;
    v60 = v58;
    v61 = swift_retain(v43);
    v62 = static os_log_type_t.default.getter(v61);
    sub_100A06EBC((uint64_t)v60, &_mh_execute_header, v62, "Notification received: addedCollaborators: %@", 45, 2, v59);
    swift_setDeallocating(v59);
    v63 = v87;
    swift_arrayDestroy(v59 + 32, 1, v87);

    v64 = (void *)static OS_os_log.crlJoinLeave;
    v65 = swift_initStackObject(v85, &v90);
    *(_OWORD *)(v65 + 16) = v86;
    v66 = v84;
    *(_QWORD *)(v65 + 56) = v22;
    *(_QWORD *)(v65 + 64) = v66;
    *(_QWORD *)(v65 + 32) = v44;
    v67 = v64;
    v68 = swift_retain(v44);
    v69 = static os_log_type_t.default.getter(v68);
    sub_100A06EBC((uint64_t)v67, &_mh_execute_header, v69, "Notification received: removedCollaborators: %@", 47, 2, v65);
    swift_setDeallocating(v65);
    swift_arrayDestroy(v65 + 32, 1, v63);

    v70 = objc_msgSend(*(id *)(v89 + 24), "allObjects");
    v71 = type metadata accessor for CRLiOSBoardViewController(0);
    v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v70, v71);

    if ((unint64_t)v72 >> 62)
    {
      if (v72 < 0)
        v80 = v72;
      else
        v80 = v72 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v72);
      v73 = _CocoaArrayWrapper.endIndex.getter(v80);
      swift_bridgeObjectRelease();
      if (!v73)
        goto LABEL_44;
    }
    else
    {
      v73 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v73)
        goto LABEL_44;
    }
    if (v73 < 1)
    {
      __break(1u);
      return;
    }
    v74 = 0;
    do
    {
      if ((v72 & 0xC000000000000001) != 0)
        v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, v72);
      else
        v75 = *(id *)(v72 + 8 * v74 + 32);
      v76 = v75;
      ++v74;
      sub_100C3B484((uint64_t)v43);
      sub_100C3BCDC((uint64_t)v44);

    }
    while (v73 != v74);
LABEL_44:
    swift_release(v44);
    swift_release(v43);
    v81 = swift_bridgeObjectRelease();
    v82(v88, v5, v81);
    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1004CB800((uint64_t)v4, &qword_1013E04F0);
LABEL_37:
  if (qword_1013DD7D0 != -1)
    swift_once(&qword_1013DD7D0, sub_100A03C1C);
  swift_beginAccess(&static OS_os_log.crlJoinLeave, &v96, 0, 0);
  v77 = (id)static OS_os_log.crlJoinLeave;
  v79 = static os_log_type_t.default.getter(v78);
  sub_100A06EBC((uint64_t)v77, &_mh_execute_header, v79, "Skipping activeParticipantListChangedNotification: Still in quiet time.", 71, 2, (uint64_t)_swiftEmptyArrayStorage);

}

void sub_100CC20E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  char **v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  __n128 v70;
  uint64_t v71;
  id v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  uint64_t inited;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  _QWORD *v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  os_unfair_lock_s *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  char *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  os_unfair_lock_s *v156;
  char *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  char *v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  void (*v174)(uint64_t, uint64_t, uint64_t);
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD v200[3];
  _QWORD v201[3];
  char v202[24];
  char v203[24];
  char v204[24];
  _QWORD v205[6];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v172 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v172 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C((uint64_t *)&unk_101405E90);
  __chkstk_darwin(v8);
  v191 = (uint64_t *)((char *)&v172 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v172 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v172 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLBoardIdentifier(0);
  v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  if ((*(_BYTE *)(v0 + 57) & 1) != 0)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"tearDown()", 10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2208, "Duplicate call to tearDown()", 28, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"tearDown()", 10, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2208, (uint64_t)"Duplicate call to tearDown()", 28, 2u);
    return;
  }
  v175 = (uint64_t)v7;
  v176 = v14;
  v177 = v22;
  v178 = v21;
  v180 = v1;
  v181 = v13;
  v183 = v20;
  v184 = v4;
  v179 = v2;
  v23 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_syncPriorityProvider);
  v189 = v0;
  v190 = v23;
  v24 = *(_QWORD *)(v0 + 16);
  v25 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  v26 = *(char **)(v24 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v27 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v28 = *(_QWORD *)&v26[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v29 = v28 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  v30 = (char *)&v172 - v19;
  swift_beginAccess(v28 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v204, 0, 0);
  sub_1004B8460(v29, (uint64_t)v12, type metadata accessor for CRLBoardCRDTData);
  v31 = (uint64_t)v12;
  v32 = v26;
  swift_retain(v28);
  v187 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v187);
  v185 = v31;
  sub_1004B84A4(v31, type metadata accessor for CRLBoardCRDTData);
  swift_release(v28);
  v33 = (uint64_t *)(*(_QWORD *)&v26[v27] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  v182 = v16;
  sub_10067AFD0((uint64_t)v16, v34, v35, (uint64_t)v30);

  sub_100580E30((uint64_t)v30);
  v186 = v30;
  sub_1004B84A4((uint64_t)v30, type metadata accessor for CRLBoardIdentifier);
  v36 = *(_QWORD *)(v24 + v25) + OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo;
  swift_beginAccess(v36, v203, 0, 0);
  v37 = v191;
  sub_1004CB7BC(v36, (uint64_t)v191, (uint64_t *)&unk_101405E90);
  v38 = type metadata accessor for CRLBoard.RealTimeSessionInfo(0);
  if ((*(unsigned int (**)(id, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38) != 1)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"tearDown()", 10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2214, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"tearDown()", 10, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2214, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
  }
  v190 = v25;
  sub_1004CB800((uint64_t)v37, (uint64_t *)&unk_101405E90);
  v39 = v189;
  v40 = *(_QWORD *)(v189 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_reloadBoardTask);
  if (v40)
  {
    swift_retain(*(_QWORD *)(v189 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_reloadBoardTask));
    Task.cancel()();
    swift_release(v40);
  }
  v174 = (void (*)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  swift_beginAccess(v39 + 40, v202, 1, 0);
  v41 = *(_QWORD *)(v39 + 40);
  v188 = v24;
  if ((v41 & 0xC000000000000001) != 0)
  {
    if (v41 < 0)
      v42 = v41;
    else
      v42 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v41);
    v43 = __CocoaSet.makeIterator()(v42);
    v44 = type metadata accessor for AnyCancellable(0);
    v45 = sub_1004B7878(&qword_1013E4A10, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v46 = Set.Iterator.init(_cocoa:)(v205, v43, v44, v45);
    v41 = v205[0];
    v191 = (_QWORD *)v205[1];
    v47 = v205[2];
    v48 = v205[3];
    v49 = v205[4];
  }
  else
  {
    v50 = -1 << *(_BYTE *)(v41 + 32);
    v51 = *(_QWORD *)(v41 + 56);
    v191 = (_QWORD *)(v41 + 56);
    v47 = ~v50;
    v52 = -v50;
    if (v52 < 64)
      v53 = ~(-1 << v52);
    else
      v53 = -1;
    v49 = v53 & v51;
    swift_bridgeObjectRetain(v41);
    v48 = 0;
  }
  v173 = (void (*)(uint64_t, uint64_t))v47;
  v54 = (unint64_t)(v47 + 64) >> 6;
  v55 = (char **)((char *)&type metadata for Swift.AnyObject + 8);
  if (v41 < 0)
    goto LABEL_19;
  while (1)
  {
    if (v49)
    {
      v56 = (v49 - 1) & v49;
      v57 = __clz(__rbit64(v49)) | (v48 << 6);
      v58 = v48;
      goto LABEL_36;
    }
    v62 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v62 >= v54)
      goto LABEL_39;
    v63 = v191[v62];
    v58 = v48 + 1;
    if (!v63)
    {
      v58 = v48 + 2;
      if (v48 + 2 >= v54)
        goto LABEL_39;
      v63 = v191[v58];
      if (!v63)
      {
        v58 = v48 + 3;
        if (v48 + 3 >= v54)
          goto LABEL_39;
        v63 = v191[v58];
        if (!v63)
        {
          v58 = v48 + 4;
          if (v48 + 4 >= v54)
            goto LABEL_39;
          v63 = v191[v58];
          if (!v63)
            break;
        }
      }
    }
LABEL_35:
    v56 = (v63 - 1) & v63;
    v57 = __clz(__rbit64(v63)) + (v58 << 6);
LABEL_36:
    v47 = *(_QWORD *)(*(_QWORD *)(v41 + 48) + 8 * v57);
    swift_retain(v47);
    if (!v47)
      goto LABEL_39;
    while (1)
    {
      AnyCancellable.cancel()();
      swift_release(v47);
      v48 = v58;
      v49 = v56;
      if ((v41 & 0x8000000000000000) == 0)
        break;
LABEL_19:
      v59 = __CocoaSet.Iterator.next()(v46);
      if (v59)
      {
        v60 = v59;
        v200[0] = v59;
        v61 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v60);
        swift_dynamicCast(v201, v200, (char *)&type metadata for Swift.AnyObject + 8, v61, 7);
        v47 = v201[0];
        swift_unknownObjectRelease(v60);
        v58 = v48;
        v56 = v49;
        if (v47)
          continue;
      }
      goto LABEL_39;
    }
  }
  v64 = v48 + 5;
  while (v54 != v64)
  {
    v63 = v191[v64++];
    if (v63)
    {
      v58 = v64 - 1;
      goto LABEL_35;
    }
  }
LABEL_39:
  sub_1004D284C(v41);
  v65 = *(_QWORD *)v174;
  *(_QWORD *)v174 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v65);
  v47 = objc_opt_self(NSNotificationCenter);
  v55 = &selRef_crlwp_characterSetWithCharactersInArray_length_;
  v41 = (uint64_t)objc_msgSend((id)v47, "defaultCenter");
  if (qword_1013DCB80 == -1)
    goto LABEL_40;
LABEL_55:
  swift_once(&qword_1013DCB80, sub_1006386D8);
LABEL_40:
  v66 = v189;
  objc_msgSend((id)v41, "removeObserver:name:object:", v189, qword_10147ECE8, 0);

  v67 = v185;
  v68 = v188;
  if (qword_1013DD7D0 != -1)
    swift_once(&qword_1013DD7D0, sub_100A03C1C);
  swift_beginAccess(&static OS_os_log.crlJoinLeave, v201, 0, 0);
  v69 = (id)static OS_os_log.crlJoinLeave;
  v71 = static os_log_type_t.default.getter(v70);
  sub_100A06EBC((uint64_t)v69, &_mh_execute_header, v71, "BoardLibrary teardown CRLBoardRealTimeParticipantsDidChange observer", 68, 2, (uint64_t)_swiftEmptyArrayStorage);

  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v200, 0, 0);
  v72 = (id)static OS_os_log.realTimeSync;
  v74 = static os_log_type_t.default.getter(v73);
  sub_100A06EBC((uint64_t)v72, &_mh_execute_header, v74, "BoardInfo teared down", 21, 2, (uint64_t)_swiftEmptyArrayStorage);

  v75 = *(_QWORD *)(v66 + 48);
  if (v75)
  {
    swift_unknownObjectRetain(*(_QWORD *)(v66 + 48));
    v76 = objc_msgSend((id)v47, v55[174]);
    objc_msgSend(v76, "removeObserver:", v75);

    swift_unknownObjectRelease(v75);
  }
  v77 = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync;
  v78 = *(_QWORD *)(v66 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync);
  if (v78)
  {
    swift_unknownObjectRetain(*(_QWORD *)(v66
                                        + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync));
    v79 = objc_msgSend((id)v47, v55[174]);
    objc_msgSend(v79, "removeObserver:", v78);
    swift_unknownObjectRelease(v78);

    v80 = *(_QWORD *)(v66 + v77);
    *(_QWORD *)(v66 + v77) = 0;
    swift_unknownObjectRelease(v80);
  }
  v81 = type metadata accessor for TaskPriority(0);
  v82 = v175;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v175, 1, 1, v81);
  v83 = (_QWORD *)swift_allocObject(&unk_10129FAB0, 40, 7);
  v83[2] = 0;
  v83[3] = 0;
  v83[4] = v66;
  swift_retain(v66);
  v84 = sub_100521B98(v82, (uint64_t)&unk_10140E0B0, (uint64_t)v83);
  swift_release(v84);
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, &v199, 0, 0);
  v85 = (void *)static OS_os_log.boardStore;
  v175 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v175, &v198);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v87 = *(char **)(v68 + v190);
  v88 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v89 = *(_QWORD *)&v87[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v90 = v89 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v89 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, &v197, 0, 0);
  sub_1004B8460(v90, v67, type metadata accessor for CRLBoardCRDTData);
  v191 = v85;
  v91 = v67;
  v92 = v87;
  swift_retain(v89);
  v93 = (uint64_t)v182;
  CRRegister.wrappedValue.getter(v187);
  sub_1004B84A4(v91, type metadata accessor for CRLBoardCRDTData);
  swift_release(v89);
  v94 = (uint64_t *)(*(_QWORD *)&v87[v88] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v95 = *v94;
  v96 = v94[1];
  swift_bridgeObjectRetain(v96);
  v97 = (uint64_t)v186;
  sub_10067AFD0(v93, v95, v96, (uint64_t)v186);

  v98 = v176;
  v99 = v181;
  v174 = *(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 16);
  v174(v93, v97, v181);
  v100 = sub_1004B84A4(v97, type metadata accessor for CRLBoardIdentifier);
  v101 = UUID.uuidString.getter(v100);
  v103 = v102;
  v173 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
  v173(v93, v99);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v176 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v176;
  *(_QWORD *)(inited + 32) = v101;
  *(_QWORD *)(inited + 40) = v103;
  v104 = static os_log_type_t.info.getter();
  v105 = v191;
  sub_100A06EBC((uint64_t)v191, &_mh_execute_header, v104, "Saving %{public}@ for tearDown", 30, 2, inited);
  swift_setDeallocating(inited);
  v106 = *(_QWORD *)(inited + 16);
  v172 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, v106, v172);

  v107 = v188;
  v108 = *(char **)(v188 + v190);
  v109 = *(void **)&v108[OBJC_IVAR____TtC8Freeform8CRLBoard_store];
  v110 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v111 = *(_QWORD *)&v108[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v112 = v111 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v111 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, &v196, 0, 0);
  sub_1004B8460(v112, v91, type metadata accessor for CRLBoardCRDTData);
  v191 = v109;
  v113 = v108;
  swift_retain(v111);
  CRRegister.wrappedValue.getter(v187);
  sub_1004B84A4(v91, type metadata accessor for CRLBoardCRDTData);
  swift_release(v111);
  v114 = (uint64_t *)(*(_QWORD *)&v108[v110] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v115 = *v114;
  v116 = v114[1];
  swift_bridgeObjectRetain(v116);
  v117 = v183;
  sub_10067AFD0(v93, v115, v116, v183);

  v118 = *(void **)(v107 + v190);
  sub_1004B8460(v117, v97, type metadata accessor for CRLBoardIdentifier);
  v119 = *(unsigned __int8 *)(v177 + 80);
  v120 = (v119 + 24) & ~v119;
  v121 = swift_allocObject(&unk_10129FAD8, v120 + v178, v119 | 7);
  v122 = v191;
  *(_QWORD *)(v121 + 16) = v191;
  sub_1004B84E0(v97, v121 + v120, type metadata accessor for CRLBoardIdentifier);
  v123 = v122;
  v124 = v118;
  sub_100B238A0((void (*)(_QWORD, _QWORD))sub_100CEC930, v121);

  swift_release(v121);
  v125 = v189;
  v126 = *(_QWORD *)(v189 + 64);
  v127 = *(os_unfair_lock_s **)(v126 + 16);
  os_unfair_lock_lock(v127);
  LODWORD(v120) = *(unsigned __int8 *)(v125 + 80);
  os_unfair_lock_unlock(v127);
  if ((_DWORD)v120 == 1)
  {
    os_unfair_lock_lock(v127);
    v178 = v126;
    v128 = v125 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo__unsafe_lastActivityTime;
    swift_beginAccess(v125 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo__unsafe_lastActivityTime, &v195, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v184, v128, v180);
    os_unfair_lock_unlock(v127);
    v129 = (void *)static OS_os_log.boardStore;
    v130 = swift_initStackObject(v175, &v194);
    *(_OWORD *)(v130 + 16) = xmmword_100EF5A10;
    v131 = *(char **)(v188 + v190);
    v191 = v123;
    v132 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
    v133 = *(_QWORD *)&v131[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
    v134 = v133 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v133 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, &v193, 0, 0);
    v135 = v134;
    v136 = v185;
    sub_1004B8460(v135, v185, type metadata accessor for CRLBoardCRDTData);
    v137 = v129;
    v138 = v131;
    swift_retain(v133);
    v139 = (uint64_t)v182;
    CRRegister.wrappedValue.getter(v187);
    sub_1004B84A4(v136, type metadata accessor for CRLBoardCRDTData);
    swift_release(v133);
    v140 = (uint64_t *)(*(_QWORD *)&v131[v132] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v141 = *v140;
    v142 = v140[1];
    swift_bridgeObjectRetain(v142);
    v143 = (uint64_t)v186;
    sub_10067AFD0(v139, v141, v142, (uint64_t)v186);

    v144 = v143;
    v145 = v143;
    v146 = v181;
    v174(v139, v145, v181);
    v147 = sub_1004B84A4(v144, type metadata accessor for CRLBoardIdentifier);
    v148 = UUID.uuidString.getter(v147);
    v150 = v149;
    v151 = ((uint64_t (*)(uint64_t, uint64_t))v173)(v139, v146);
    v152 = v176;
    *(_QWORD *)(v130 + 56) = &type metadata for String;
    *(_QWORD *)(v130 + 64) = v152;
    *(_QWORD *)(v130 + 32) = v148;
    *(_QWORD *)(v130 + 40) = v150;
    v153 = Date.description.getter(v151);
    *(_QWORD *)(v130 + 96) = &type metadata for String;
    *(_QWORD *)(v130 + 104) = v152;
    *(_QWORD *)(v130 + 72) = v153;
    *(_QWORD *)(v130 + 80) = v154;
    v155 = static os_log_type_t.info.getter();
    sub_100A06EBC((uint64_t)v137, &_mh_execute_header, v155, "Updating activity time for %{public}@ for tearDown to %{public}@", 64, 2, v130);
    swift_setDeallocating(v130);
    v125 = v189;
    swift_arrayDestroy(v130 + 32, *(_QWORD *)(v130 + 16), v172);

    v156 = *(os_unfair_lock_s **)(v178 + 16);
    os_unfair_lock_lock(v156);
    *(_BYTE *)(v125 + 80) = 0;
    os_unfair_lock_unlock(v156);
    v157 = *(char **)(v188 + v190);
    v158 = *(void **)&v157[OBJC_IVAR____TtC8Freeform8CRLBoard_store];
    v159 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
    v160 = *(_QWORD *)&v157[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
    v161 = v160 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v160 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, &v192, 0, 0);
    v162 = v185;
    sub_1004B8460(v161, v185, type metadata accessor for CRLBoardCRDTData);
    v163 = v158;
    v164 = v157;
    swift_retain(v160);
    CRRegister.wrappedValue.getter(v187);
    sub_1004B84A4(v162, type metadata accessor for CRLBoardCRDTData);
    swift_release(v160);
    v165 = (uint64_t *)(*(_QWORD *)&v157[v159] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v166 = *v165;
    v167 = v165[1];
    swift_bridgeObjectRetain(v167);
    v168 = (uint64_t)v186;
    sub_10067AFD0(v139, v166, v167, (uint64_t)v186);

    v169 = v168;
    v170 = v168;
    v171 = (uint64_t)v184;
    sub_100A9F170(v169, (uint64_t)v184, 0, 0);

    sub_1004B84A4(v170, type metadata accessor for CRLBoardIdentifier);
    (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v171, v180);
    sub_1004B84A4(v183, type metadata accessor for CRLBoardIdentifier);
  }
  else
  {
    sub_1004B84A4(v117, type metadata accessor for CRLBoardIdentifier);

  }
  *(_BYTE *)(v125 + 57) = 1;
}

uint64_t sub_100CC31F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100CC320C, 0, 0);
}

uint64_t sub_100CC320C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0[2] + 16)
                                         + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard)
                             + OBJC_IVAR____TtC8Freeform8CRLBoard_store)
                 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_assetUploadTracker);
  v0[3] = v1;
  v2 = *(_QWORD *)(v1 + 16);
  v0[4] = v2;
  swift_retain(v1);
  return swift_task_switch(sub_100CC3288, v2, 0);
}

uint64_t sub_100CC3288()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(_QWORD *)(v0 + 24);
  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 32) + 112), "removeObject:", *(_QWORD *)(v0 + 16));
  v2 = swift_release(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_100CC32D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(v0 + 57) & 1) == 0 && *(_BYTE *)(v0 + 56) == 1)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"deinit", 6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2261, "Board info deallocated without calling tearDown()!", 50, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"deinit", 6, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2261, (uint64_t)"Board info deallocated without calling tearDown()!", 50, 2u);
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  v1 = v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo__unsafe_lastActivityTime;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync));
  sub_10066BEC4(*(_QWORD *)(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession + 24));
  sub_1004CB800(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_onlyShowJoinLeavePlacardsAfterThisTime, &qword_1013E04F0);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_syncPriorityProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_promptCloudQuotaExceededTask));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_reloadBoardTask));
  return v0;
}

uint64_t sub_100CC3478()
{
  uint64_t v0;

  sub_100CC32D0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100CC349C()
{
  return type metadata accessor for CRLBoardLibrary.BoardInfo(0);
}

uint64_t type metadata accessor for CRLBoardLibrary.BoardInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_10140DB18;
  if (!qword_10140DB18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLBoardLibrary.BoardInfo);
  return result;
}

uint64_t sub_100CC34E0@<X0>(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend(v2, "objectForKey:", CFSTR("CRLCloudQuotaExceededAlertLastShownDate"));

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v8, v3);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1004C4938((uint64_t)v8, (uint64_t)v9, &qword_1013E0230);
  if (v10)
  {
    v4 = type metadata accessor for Date(0);
    v5 = swift_dynamicCast(a1, v9, (char *)&type metadata for Any + 8, v4, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, v5 ^ 1u, 1, v4);
  }
  else
  {
    sub_1004CB800((uint64_t)v9, &qword_1013E0230);
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 1, 1, v7);
  }
}

uint64_t sub_100CC3614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  Swift::String v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38[24];

  v1 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("CRLCloudQuotaExceededAlertWasShown-"));
  v35 = v10;
  v12 = v11;
  v13 = *(char **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v14 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v15 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v16 = v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v38, 0, 0);
  sub_1004B8460(v16, (uint64_t)v3, type metadata accessor for CRLBoardCRDTData);
  v17 = v13;
  swift_retain(v15);
  v18 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v18);
  sub_1004B84A4((uint64_t)v3, type metadata accessor for CRLBoardCRDTData);
  swift_release(v15);
  v19 = (uint64_t *)(*(_QWORD *)&v13[v14] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v20 = *v19;
  v21 = v19[1];
  swift_bridgeObjectRetain(v21);
  sub_10067AFD0((uint64_t)v6, v20, v21, (uint64_t)v9);

  v36 = UUID.uuidString.getter(v22);
  v37 = v23;
  swift_bridgeObjectRetain(v23);
  v24._countAndFlagsBits = 58;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25 = v36;
  v26 = v37;
  v27 = (uint64_t *)&v9[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
  v28 = *v27;
  v29 = (void *)v27[1];
  v36 = v25;
  v37 = v26;
  swift_bridgeObjectRetain(v26);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31 = v36;
  v32 = v37;
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
  v36 = v35;
  v37 = v12;
  swift_bridgeObjectRetain(v12);
  v33._countAndFlagsBits = v31;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v36;
}

double sub_100CC3888()
{
  return sub_100CC3F4C(&OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_promptCloudQuotaExceededTask, (uint64_t)&unk_10129FA88, (uint64_t)&unk_10140E0A0);
}

uint64_t sub_100CC38A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5[23] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[24] = v6;
  v5[25] = static MainActor.shared.getter(v6);
  v7 = (_QWORD *)swift_task_alloc(dword_10140DB34);
  v5[26] = v7;
  *v7 = v5;
  v7[1] = sub_100CC390C;
  return sub_100CC3B20();
}

uint64_t sub_100CC390C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_100CC3994;
  else
    v6 = sub_100CED880;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_100CC3994()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 200));
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v1 = *(_QWORD *)(v0 + 216);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 128, 0, 0);
  v2 = (void *)static OS_os_log.crlBoardLibrary;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v5 = v2;
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v9 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v8;
  swift_getErrorValue(v1, v0 + 176, v0 + 152);
  v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v9;
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 80) = v11;
  v12 = static os_log_type_t.error.getter(v10);
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v12, "Failed to prompt cloud quota exceeded for board with UUID %@, error %@", 70, 2, inited);
  swift_setDeallocating(inited);
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v13);

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CC3B20()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[2] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013E04F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[3] = swift_task_alloc(v2);
  v1[4] = swift_task_alloc(v2);
  v3 = type metadata accessor for Date(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v5);
  v1[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for MainActor(0);
  v1[9] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CC3BF8, v7, v8);
}

void sub_100CC3BF8()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  swift_release(*(_QWORD *)(v0 + 72));
  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  sub_100CC3614();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "BOOLForKey:", v3, swift_bridgeObjectRelease().n128_f64[0]);

  if ((v4 & 1) != 0)
    goto LABEL_18;
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);
  sub_100CC34E0(v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    v8 = sub_1004CB800(*(_QWORD *)(v0 + 32), &qword_1013E04F0);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 40);
    v12 = *(_QWORD *)(v0 + 48);
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v12 + 32))(v10, *(_QWORD *)(v0 + 32), v11);
    Date.init()(v13);
    v14 = Date.timeIntervalSince(_:)(v10);
    v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v15(v9, v11);
    v8 = ((uint64_t (*)(uint64_t, uint64_t))v15)(v10, v11);
    if (v14 < 900.0)
    {
LABEL_18:
      v30 = *(_QWORD *)(v0 + 56);
      v32 = *(_QWORD *)(v0 + 24);
      v31 = *(_QWORD *)(v0 + 32);
      swift_task_dealloc(*(_QWORD *)(v0 + 64));
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
  }
  v16 = *(_QWORD *)(v0 + 40);
  v17 = *(_QWORD *)(v0 + 48);
  v18 = *(_QWORD *)(v0 + 16);
  v19 = *(_QWORD *)(v0 + 24);
  Date.init()(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
  sub_100CEC088(v19);
  v20 = objc_msgSend(v1, "standardUserDefaults");
  sub_100CC3614();
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "setBool:forKey:", 1, v21, swift_bridgeObjectRelease().n128_f64[0]);

  v22 = objc_msgSend(*(id *)(v18 + 24), "allObjects");
  v23 = type metadata accessor for CRLiOSBoardViewController(0);
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

  if (!((unint64_t)v24 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_7;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (v24 < 0)
    v29 = v24;
  else
    v29 = v24 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v24);
  v25 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease();
  if (!v25)
    goto LABEL_17;
LABEL_7:
  if (v25 >= 1)
  {
    for (i = 0; i != v25; ++i)
    {
      if ((v24 & 0xC000000000000001) != 0)
        v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v24);
      else
        v27 = *(id *)(v24 + 8 * i + 32);
      v28 = v27;
      sub_100C2D578();

    }
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_100CC3EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 16) = a6;
  return swift_task_switch(sub_100CC3ED8, a6, 0);
}

uint64_t sub_100CC3ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8Freeform33CRLBoardRealTimeChangeCoordinator_incomingSuspendedCache;
  *(_BYTE *)v1 = 0;
  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v2);
  v3 = sub_100C6AFEC();
  return (*(uint64_t (**)(double))(v0 + 8))(v3);
}

double sub_100CC3F30()
{
  return sub_100CC3F4C(&OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_reloadBoardTask, (uint64_t)&unk_10129FA60, (uint64_t)&unk_10140E090);
}

double sub_100CC3F4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  double result;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47[24];

  v46 = a3;
  v44 = a2;
  v42 = a1;
  v4 = v3;
  v5 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v5);
  v45 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLBoardIdentifier(0);
  v43 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v43 + 64);
  v15 = __chkstk_darwin(v13);
  v41 = (uint64_t)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v40 - v16;
  v18 = *(char **)(*(_QWORD *)(v4 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v19 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v20 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v21 = v20 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v20 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v47, 0, 0);
  sub_1004B8460(v21, (uint64_t)v9, type metadata accessor for CRLBoardCRDTData);
  v22 = v18;
  swift_retain(v20);
  v23 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v23);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardCRDTData);
  swift_release(v20);
  v24 = (uint64_t *)(*(_QWORD *)&v18[v19] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v25 = *v24;
  v26 = v24[1];
  swift_bridgeObjectRetain(v26);
  sub_10067AFD0((uint64_t)v12, v25, v26, (uint64_t)v17);

  v27 = *v42;
  v28 = *(_QWORD *)(v4 + *v42);
  if (v28)
  {
    swift_retain(*(_QWORD *)(v4 + *v42));
    Task.cancel()();
    swift_release(v28);
  }
  v29 = type metadata accessor for TaskPriority(0);
  v30 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v45, 1, 1, v29);
  v31 = v41;
  sub_1004B8460((uint64_t)v17, v41, type metadata accessor for CRLBoardIdentifier);
  type metadata accessor for MainActor(0);
  swift_retain(v4);
  v33 = static MainActor.shared.getter(v32);
  v34 = *(unsigned __int8 *)(v43 + 80);
  v35 = (v34 + 40) & ~v34;
  v36 = (_QWORD *)swift_allocObject(v44, v35 + v14, v34 | 7);
  v36[2] = v33;
  v36[3] = &protocol witness table for MainActor;
  v36[4] = v4;
  sub_1004B84E0(v31, (uint64_t)v36 + v35, type metadata accessor for CRLBoardIdentifier);
  v37 = sub_100521B98(v30, v46, (uint64_t)v36);
  sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
  v38 = *(_QWORD *)(v4 + v27);
  *(_QWORD *)(v4 + v27) = v37;
  *(_QWORD *)&result = swift_release(v38).n128_u64[0];
  return result;
}

uint64_t sub_100CC4274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5[23] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[24] = v6;
  v5[25] = static MainActor.shared.getter(v6);
  v7 = (_QWORD *)swift_task_alloc(dword_10140DB3C);
  v5[26] = v7;
  *v7 = v5;
  v7[1] = sub_100CC42DC;
  return sub_100CC4520();
}

uint64_t sub_100CC42DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_100CC4394;
  else
    v6 = sub_100CC4364;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_100CC4364()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CC4394()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 200));
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v1 = *(_QWORD *)(v0 + 216);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 128, 0, 0);
  v2 = (void *)static OS_os_log.crlBoardLibrary;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v5 = v2;
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v9 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v8;
  swift_getErrorValue(v1, v0 + 176, v0 + 152);
  v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v9;
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 80) = v11;
  v12 = static os_log_type_t.error.getter(v10);
  sub_100A06EBC((uint64_t)v5, &_mh_execute_header, v12, "Failed to reload a board with UUID %@, error %@", 47, 2, inited);
  swift_setDeallocating(inited);
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v13);

  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CC4520()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[29] = v0;
  v2 = type metadata accessor for CRLBoardCRDTData(0);
  v1[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v1[32] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[33] = swift_task_alloc(v5);
  v1[34] = swift_task_alloc(v5);
  v1[35] = swift_task_alloc(v5);
  v6 = type metadata accessor for MainActor(0);
  v1[36] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v1[37] = v7;
  v1[38] = v8;
  return swift_task_switch(sub_100CC460C, v7, v8);
}

void sub_100CC460C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 232) + 16);
  *(_QWORD *)(v0 + 312) = v1;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_suspendResumeCoordinator);
  if (!v2)
  {
    __break(1u);
    return;
  }
  v3 = *(_QWORD *)(v2 + 48);
  if ((*(_BYTE *)(v2 + 40) & 1) == 0)
  {
    if (v3 <= 0)
    {
      swift_beginAccess(v2 + 72, v0 + 16, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v2 + 72) + 16))
        goto LABEL_9;
    }
LABEL_7:
    swift_release(*(_QWORD *)(v0 + 288));
    *(_BYTE *)(*(_QWORD *)(v0 + 232)
             + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_hasPausedIncomingDatabaseUpdate) = 1;
LABEL_8:
    v4 = *(_QWORD *)(v0 + 272);
    v5 = *(_QWORD *)(v0 + 264);
    v7 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (v3 > 0)
    goto LABEL_7;
LABEL_9:
  v8 = *(char **)(v1 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  *(_QWORD *)(v0 + 320) = v8;
  v9 = OBJC_IVAR____TtC8Freeform8CRLBoard_store;
  if (*(double *)&v8[OBJC_IVAR____TtC8Freeform8CRLBoard_lastSaveChangesTime] > *(double *)(*(_QWORD *)&v8[OBJC_IVAR____TtC8Freeform8CRLBoard_store]
                                                                                          + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_lastFetchResultsTime))
  {
    swift_release(*(_QWORD *)(v0 + 288));
    goto LABEL_8;
  }
  v27 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 240);
  v13 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  *(_QWORD *)(v0 + 328) = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v14 = *(_QWORD *)&v8[v13];
  v15 = v14 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v14 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 40, 0, 0);
  sub_1004B8460(v15, v12, type metadata accessor for CRLBoardCRDTData);
  v16 = v8;
  swift_retain(v14);
  v17 = sub_1004B804C(&qword_1013E1A80);
  *(_QWORD *)(v0 + 336) = v17;
  CRRegister.wrappedValue.getter(v17);
  sub_1004B84A4(v12, type metadata accessor for CRLBoardCRDTData);
  swift_release(v14);
  v18 = (uint64_t *)(*(_QWORD *)&v8[v13] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  sub_10067AFD0(v10, v19, v20, v27);
  v21 = sub_1004B804C(&qword_1013E7870);
  v22 = *(unsigned __int8 *)(v11 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v21, v23 + *(_QWORD *)(v11 + 72), v22 | 7);
  *(_QWORD *)(v0 + 344) = v24;
  *(_OWORD *)(v24 + 16) = xmmword_100EF5E40;
  sub_1004B84E0(v27, v24 + v23, type metadata accessor for CRLBoardIdentifier);
  v25 = *(void **)&v8[v9];
  *(_QWORD *)(v0 + 352) = v25;
  v26 = v25;
  swift_task_switch(sub_100CC48B4, 0, 0);
}

uint64_t sub_100CC48B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = v0[43];
  v1 = v0[44];
  v3 = swift_task_alloc(48);
  v0[45] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = 1;
  *(_BYTE *)(v3 + 40) = 1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[46] = v4;
  v5 = type metadata accessor for CRLBoardDatabaseFetchResult();
  *v4 = v0;
  v4[1] = sub_100CC496C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 28, 0, 0, 0x3A5F286863746566, 0xE900000000000029, sub_100619AE8, v3, v5);
}

uint64_t sub_100CC496C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  *(_QWORD *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CC4F94;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 360));
    v4 = sub_100CC49D8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CC49D8()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[44];
  swift_bridgeObjectRelease();

  v0[48] = v0[28];
  return swift_task_switch(sub_100CC4A1C, v0[37], v0[38]);
}

uint64_t sub_100CC4A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  objc_class *v36;
  char *v37;
  double v38;
  id v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 320);
  v70 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v4 + v2);
  v8 = v7 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v7 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 88, 0, 0);
  sub_1004B8460(v8, v6, type metadata accessor for CRLBoardCRDTData);
  swift_retain(v7);
  CRRegister.wrappedValue.getter(v3);
  sub_1004B84A4(v6, type metadata accessor for CRLBoardCRDTData);
  swift_release(v7);
  v9 = (uint64_t *)(*(_QWORD *)(v4 + v2) + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  sub_10067AFD0(v5, v10, v11, v70);
  swift_beginAccess(v1 + 24, v0 + 112, 0, 0);
  v12 = *(_QWORD *)(v1 + 24);
  if (!*(_QWORD *)(v12 + 16))
  {
    v15 = *(_QWORD *)(v0 + 384);
    v61 = *(void **)(v0 + 320);
    v62 = *(_QWORD *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 272);
LABEL_14:
    sub_1004B84A4(v16, type metadata accessor for CRLBoardIdentifier);
    swift_release(v62);
    swift_release(v15);

    v63 = *(_QWORD *)(v0 + 272);
    v64 = *(_QWORD *)(v0 + 264);
    v66 = *(_QWORD *)(v0 + 240);
    v65 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
  v14 = sub_100843264(v13);
  v15 = *(_QWORD *)(v0 + 384);
  v16 = *(_QWORD *)(v0 + 272);
  if ((v17 & 1) == 0)
  {
    v61 = *(void **)(v0 + 320);
    v62 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(v0 + 328);
  v68 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 320);
  v71 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 248);
  v22 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v14);
  swift_retain(v22);
  swift_bridgeObjectRelease();
  sub_1004B84A4(v16, type metadata accessor for CRLBoardIdentifier);
  swift_release(v22);
  v23 = *(_QWORD *)(v19 + v18);
  v24 = v23 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v23 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 136, 0, 0);
  sub_1004B8460(v24, v21, type metadata accessor for CRLBoardCRDTData);
  swift_retain(v23);
  CRRegister.wrappedValue.getter(v68);
  sub_1004B84A4(v21, type metadata accessor for CRLBoardCRDTData);
  swift_release(v23);
  v25 = (uint64_t *)(*(_QWORD *)(v19 + v18) + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v26 = *v25;
  v27 = v25[1];
  swift_bridgeObjectRetain(v27);
  sub_10067AFD0(v20, v26, v27, v71);
  swift_beginAccess(v15 + 32, v0 + 160, 0, 0);
  v28 = *(_QWORD *)(v15 + 32);
  if (!*(_QWORD *)(v28 + 16))
  {
LABEL_13:
    v15 = *(_QWORD *)(v0 + 384);
    v61 = *(void **)(v0 + 320);
    v62 = *(_QWORD *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 264);
    goto LABEL_14;
  }
  v29 = *(_QWORD *)(v0 + 264);
  swift_bridgeObjectRetain(v28);
  v30 = sub_100843264(v29);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v32 = *(_QWORD *)(v0 + 384);
  v33 = *(_QWORD *)(v0 + 312);
  v34 = *(_QWORD *)(v0 + 264);
  v35 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v30);
  swift_retain(v35);
  swift_bridgeObjectRelease();
  sub_1004B84A4(v34, type metadata accessor for CRLBoardIdentifier);
  swift_release(v35);
  v36 = (objc_class *)type metadata accessor for CRLCommandMergeDatabaseChanges();
  v37 = (char *)objc_allocWithZone(v36);
  *(_QWORD *)&v37[OBJC_IVAR____TtC8Freeform30CRLCommandMergeDatabaseChanges_fetchResult] = v32;
  *(_QWORD *)(v0 + 208) = v37;
  *(_QWORD *)(v0 + 216) = v36;
  *(_QWORD *)&v38 = swift_retain(v32).n128_u64[0];
  v39 = objc_msgSendSuper2((objc_super *)(v0 + 208), "init", v38);
  *(_QWORD *)(v0 + 392) = v39;
  v40 = *(char **)(v33 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController);
  v41 = &v40[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue];
  swift_beginAccess(&v40[OBJC_IVAR____TtC8Freeform20CRLCommandController_nonUserCommandQueue], v0 + 184, 33, 0);
  v42 = *(_QWORD **)v41;
  v43 = v40;
  v69 = v39;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v41 = v42;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v42 = sub_100D0F980(0, v42[2] + 1, 1, v42);
    *(_QWORD *)v41 = v42;
  }
  v46 = v42[2];
  v45 = v42[3];
  v47 = v46 + 1;
  if (v46 >= v45 >> 1)
  {
    v67 = sub_100D0F980((_QWORD *)(v45 > 1), v46 + 1, 1, v42);
    v47 = v46 + 1;
    v42 = v67;
    *(_QWORD *)v41 = v67;
  }
  v48 = *(_QWORD *)(v0 + 328);
  v49 = *(_QWORD *)(v0 + 336);
  v50 = *(_QWORD *)(v0 + 320);
  v72 = *(_QWORD *)(v0 + 280);
  v52 = *(_QWORD *)(v0 + 240);
  v51 = *(_QWORD *)(v0 + 248);
  v42[2] = v47;
  v53 = &v42[2 * v46];
  v53[4] = v69;
  *((_BYTE *)v53 + 40) = 2;
  swift_endAccess(v0 + 184);
  sub_1006A8ED4();

  v54 = *(_QWORD *)(v50 + v48);
  v55 = v54 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v54 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 64, 0, 0);
  sub_1004B8460(v55, v52, type metadata accessor for CRLBoardCRDTData);
  swift_retain(v54);
  CRRegister.wrappedValue.getter(v49);
  sub_1004B84A4(v52, type metadata accessor for CRLBoardCRDTData);
  swift_release(v54);
  v56 = (uint64_t *)(*(_QWORD *)(v50 + v48) + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v58 = *v56;
  v57 = v56[1];
  swift_bridgeObjectRetain(v57);
  sub_10067AFD0(v51, v58, v57, v72);
  v59 = (_QWORD *)swift_task_alloc(dword_1013EF46C);
  *(_QWORD *)(v0 + 400) = v59;
  *v59 = v0;
  v59[1] = sub_100CC5064;
  return sub_100719D88();
}

uint64_t sub_100CC4F94()
{
  _QWORD *v0;

  swift_task_dealloc(v0[45]);
  return swift_task_switch(sub_100CC4FCC, v0[37], v0[38]);
}

uint64_t sub_100CC4FCC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(void **)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);

  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CC5064()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 280);
  swift_task_dealloc(*(_QWORD *)(*v0 + 400));
  sub_1004B84A4(v2, type metadata accessor for CRLBoardIdentifier);
  return swift_task_switch(sub_100CC50C4, *(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 304));
}

uint64_t sub_100CC50C4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(void **)(v0 + 392);
  v3 = *(void **)(v0 + 320);
  swift_release(*(_QWORD *)(v0 + 288));

  swift_release(v2);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CC5148(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2[75] = v1;
  v2[74] = a1;
  v3 = type metadata accessor for CRLBoardCRDTData(0);
  v2[76] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v2[77] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[78] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[79] = swift_task_alloc(v6);
  v2[80] = swift_task_alloc(v6);
  v7 = type metadata accessor for CRLCollaboratorCursorColor(0);
  v2[81] = v7;
  v2[82] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLRealTimeEnter(0);
  v2[83] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[84] = swift_task_alloc(v9);
  v2[85] = swift_task_alloc(v9);
  v10 = type metadata accessor for UUID(0);
  v2[86] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[87] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[88] = swift_task_alloc(v12);
  v2[89] = swift_task_alloc(v12);
  v2[90] = swift_task_alloc(v12);
  v2[91] = swift_task_alloc(v12);
  v13 = type metadata accessor for CRLBoard.RealTimeSessionInfo(0);
  v2[92] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[93] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[94] = swift_task_alloc(v15);
  v2[95] = swift_task_alloc(v15);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C((uint64_t *)&unk_101405E90) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[96] = swift_task_alloc(v16);
  v2[97] = swift_task_alloc(v16);
  v2[98] = swift_task_alloc(v16);
  v2[99] = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CRLGloballyScopedBoardIdentifier(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[100] = swift_task_alloc(v17);
  v2[101] = swift_task_alloc(v17);
  v18 = type metadata accessor for MainActor(0);
  v2[102] = static MainActor.shared.getter(v18);
  v19 = dispatch thunk of Actor.unownedExecutor.getter(v18, &protocol witness table for MainActor);
  v2[103] = v19;
  v2[104] = v20;
  return swift_task_switch(sub_100CC5370, v19, v20);
}

void sub_100CC5370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t inited;
  id v18;
  int v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 600);
  v2 = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession;
  *(_QWORD *)(v0 + 840) = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession;
  v3 = (uint64_t *)(v1 + v2);
  v5 = swift_beginAccess(v1 + v2, v0 + 464, 1, 0);
  v6 = *v3;
  if (*v3)
  {
    v8 = v3[2];
    v7 = v3[3];
    v9 = v3[1];
    swift_retain(v6);
    swift_retain(v9);
    swift_retain(v8);
    swift_bridgeObjectRetain(v7);
    sub_100757E04(&_mh_execute_header, (uint64_t)"enterRealTimeSync(groupSession:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2426, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enterRealTimeSync(groupSession:)", 32, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2426, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
    v4 = sub_10066BEC4(v6, v9, v8, v7);
  }
  v10 = *(void (**)(void))(**(_QWORD **)(v0 + 592) + 192);
  *(_QWORD *)(v0 + 848) = v10;
  ((void (*)(uint64_t, __n128))v10)(v4, v5);
  if ((*(_BYTE *)(*sub_1004BB5A4((_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 232))
                 + OBJC_IVAR____TtC8Freeform29CRLOpportunisticGroupActivity_isMeToMe) & 1) == 0)
  {
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 600) + 16)
                                           + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard)
                               + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState)
                   + 16);
    if (!v11
      || (v12 = objc_msgSend(v11, "owner"),
          v13 = objc_msgSend(v12, "userIdentity"),
          v12,
          v14 = objc_msgSend(v13, "userRecordID"),
          v13,
          !v14))
    {
      v31 = *(_QWORD *)(v0 + 816);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 208));
      swift_release(v31);
      v32 = sub_100619D10();
      swift_allocError(&type metadata for CRLBoardLibrary.BoardError, v32, 0, 0);
      *v33 = 6;
      swift_willThrow(v34);
      v35 = *(_QWORD *)(v0 + 800);
      v36 = *(_QWORD *)(v0 + 792);
      v37 = *(_QWORD *)(v0 + 784);
      v38 = *(_QWORD *)(v0 + 776);
      v39 = *(_QWORD *)(v0 + 768);
      v40 = *(_QWORD *)(v0 + 760);
      v41 = *(_QWORD *)(v0 + 752);
      v42 = *(_QWORD *)(v0 + 728);
      v43 = *(_QWORD *)(v0 + 720);
      v44 = *(_QWORD *)(v0 + 712);
      v45 = *(_QWORD *)(v0 + 704);
      v46 = *(_QWORD *)(v0 + 680);
      v47 = *(_QWORD *)(v0 + 672);
      v48 = *(_QWORD *)(v0 + 656);
      v49 = *(_QWORD *)(v0 + 640);
      v50 = *(_QWORD *)(v0 + 632);
      v51 = *(_QWORD *)(v0 + 608);
      swift_task_dealloc(*(_QWORD *)(v0 + 808));
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      (*(void (**)(void))(v0 + 8))();
      return;
    }

  }
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 208));
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 440, 0, 0);
  v15 = (void *)static OS_os_log.realTimeSync;
  v16 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  *(_QWORD *)(v0 + 856) = v16;
  inited = swift_initStackObject(v16, v0 + 88);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v18 = v15;
  v10();
  v19 = *(unsigned __int8 *)(*sub_1004BB5A4((_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 272))
                           + OBJC_IVAR____TtC8Freeform29CRLOpportunisticGroupActivity_isMeToMe);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 248));
  v20 = sub_1004CFC2C();
  v22 = 28494;
  if (v19)
    v22 = 7562585;
  v23 = 0xE200000000000000;
  if (v19)
    v23 = 0xE300000000000000;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v20;
  *(_QWORD *)(inited + 32) = v22;
  *(_QWORD *)(inited + 40) = v23;
  v24 = static os_log_type_t.debug.getter(v21);
  sub_100A06EBC((uint64_t)v18, &_mh_execute_header, v24, "enterRealTimeSync() is MeToME: %@", 33, 2, inited);
  swift_setDeallocating(inited);
  v25 = *(_QWORD *)(inited + 16);
  v26 = sub_1004B804C(&qword_1013E0190);
  *(_QWORD *)(v0 + 864) = v26;
  swift_arrayDestroy(inited + 32, v25, v26);

  v27 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v28 = objc_msgSend(v27, "delegate");

  if (v28)
  {
    v29 = type metadata accessor for CRLiOSAppDelegate();
    v30 = *(_QWORD *)(swift_dynamicCastClassUnconditional(v28, v29, 0, 0, 0)
                    + OBJC_IVAR____TtC8Freeform17CRLiOSAppDelegate_iCloudStatus);
    *(_QWORD *)(v0 + 872) = v30;
    swift_retain(v30);
    swift_unknownObjectRelease(v28);
    swift_task_switch(sub_100CC58B4, 0, 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100CC58B4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[109];
  if (*(_QWORD *)(v1 + 40))
  {
    swift_release(v1);
    v0[112] = 0;
    return swift_task_switch(sub_100CC5B94, v0[103], v0[104]);
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    v0[110] = v3;
    v4 = sub_1004B8930(0, &qword_1013E8810, CKRecordID_ptr);
    *v3 = v0;
    v3[1] = sub_100CC5984;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 73, 0, 0, 0xD00000000000001DLL, 0x800000010100A200, sub_100CEC6B8, v0[109], v4);
  }
}

uint64_t sub_100CC5984()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 880);
  *(_QWORD *)(*v1 + 888) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CC5A34;
  }
  else
  {

    v4 = sub_100CC59F0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CC59F0()
{
  _QWORD *v0;

  swift_release(v0[109]);
  v0[112] = v0[111];
  return swift_task_switch(sub_100CC5B94, v0[103], v0[104]);
}

uint64_t sub_100CC5A34()
{
  uint64_t v0;

  return swift_task_switch(sub_100CC5A48, *(_QWORD *)(v0 + 824), *(_QWORD *)(v0 + 832));
}

uint64_t sub_100CC5A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 872);
  swift_release(*(_QWORD *)(v0 + 816));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 800);
  v3 = *(_QWORD *)(v0 + 792);
  v4 = *(_QWORD *)(v0 + 784);
  v5 = *(_QWORD *)(v0 + 776);
  v6 = *(_QWORD *)(v0 + 768);
  v7 = *(_QWORD *)(v0 + 760);
  v8 = *(_QWORD *)(v0 + 752);
  v9 = *(_QWORD *)(v0 + 728);
  v10 = *(_QWORD *)(v0 + 720);
  v12 = *(_QWORD *)(v0 + 712);
  v13 = *(_QWORD *)(v0 + 704);
  v14 = *(_QWORD *)(v0 + 680);
  v15 = *(_QWORD *)(v0 + 672);
  v16 = *(_QWORD *)(v0 + 656);
  v17 = *(_QWORD *)(v0 + 640);
  v18 = *(_QWORD *)(v0 + 632);
  v19 = *(_QWORD *)(v0 + 608);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CC5B94()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  Class v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  int *v77;
  uint64_t v78;
  id v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  __n128 v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int *v124;
  void (*v125)(char *, uint64_t, uint64_t);
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  __n128 v134;
  void (*v135)(uint64_t, uint64_t);
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  int *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;

  v1 = *(void (**)(void))(v0 + 848);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 800);
  v4 = *(_QWORD *)(v0 + 600);
  v1();
  sub_1004BB5A4((_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 312));
  sub_10098EB14(v2);
  v176 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v5 = (uint64_t *)(v2 + *(int *)(v176 + 20));
  v6 = *v5;
  v7 = v5[1];
  swift_bridgeObjectRetain(v7);
  sub_1004B84A4(v2, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 288));
  sub_100A6A908(v6, v7, 0, 0xE000000000000000, &_mh_execute_header, (uint64_t)"enterRealTimeSync(groupSession:)", 32, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2455);
  v8 = swift_bridgeObjectRelease();
  ((void (*)(__n128))v1)(v8);
  sub_1004BB5A4((_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 352));
  sub_10098EB14(v3);
  result = _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 328));
  v10 = *(char **)(v4 + 16);
  *(_QWORD *)(v0 + 904) = v10;
  v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_suspendResumeCoordinator];
  if (!v11)
  {
    __break(1u);
    return result;
  }
  v12 = *(_QWORD *)(v0 + 808);
  v167 = *(_QWORD *)(v0 + 792);
  v170 = *(_QWORD *)(v0 + 744);
  v173 = *(_QWORD *)(v0 + 736);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = (uint64_t *)(*(_QWORD *)(v0 + 600) + *(_QWORD *)(v0 + 840));
  v15 = sub_1004B8460(*(_QWORD *)(v0 + 800), v12, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 208))(v15);
  v17 = type metadata accessor for CRLBoardRealTimeChangeCoordinator(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = v10;
  swift_retain(v11);
  v20 = sub_100CE2B2C((uint64_t)v19, v11, v12, v16 & 1, v18);
  *(_QWORD *)(v0 + 912) = v20;

  swift_release(v11);
  v21 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v22 = objc_msgSend(v21, "BOOLForKey:", CFSTR("CRLEncryptSharePlayData"));

  v23 = type metadata accessor for CRLBoardRealTimeSyncDataSource();
  v24 = swift_allocObject(v23, 145, 15);
  swift_retain(v20);
  v26 = sub_100CE3194(v25, (uint64_t)v22, v24);
  *(_QWORD *)(v0 + 920) = v26;
  swift_release(v20);
  v27 = *v14;
  v28 = v14[1];
  v29 = v14[2];
  v30 = v14[3];
  *v14 = v13;
  v14[1] = v26;
  v14[2] = v20;
  v14[3] = (uint64_t)&_swiftEmptySetSingleton;
  v31 = v19;
  swift_retain(v20);
  swift_retain(v13);
  swift_retain(v26);
  sub_10066BEC4(v27, v28, v29, v30);
  v163 = v26;
  v19[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_realTimeSessionUsesEncryption] = *(_BYTE *)(v26 + 144);
  v32 = v13 + OBJC_IVAR____TtC8Freeform20CRLBoardGroupSession_localParticipantUUID;
  v33 = (uint64_t *)(v20
                  + OBJC_IVAR____TtC8Freeform33CRLBoardRealTimeChangeCoordinator_globallyScopedBoardIdentifier
                  + *(int *)(v176 + 20));
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  sub_100B17AD0(v34, v35, v32);
  swift_bridgeObjectRelease();
  v36 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  *(_QWORD *)(v0 + 928) = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  v37 = *(_QWORD *)&v19[v36] + OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo;
  swift_beginAccess(v37, v0 + 368, 0, 0);
  sub_1004CB7BC(v37, v167, (uint64_t *)&unk_101405E90);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 48);
  v39 = v38(v167, 1, v173);
  v40 = *(_QWORD *)(v0 + 792);
  if (v39)
  {
    sub_1004CB800(*(_QWORD *)(v0 + 792), (uint64_t *)&unk_101405E90);
  }
  else
  {
    v177 = v19;
    v41 = *(_QWORD *)(v0 + 760);
    v42 = *(_QWORD *)(v0 + 736);
    sub_1004B8460(v40, v41, type metadata accessor for CRLBoard.RealTimeSessionInfo);
    sub_1004CB800(v40, (uint64_t *)&unk_101405E90);
    v43 = *(_QWORD *)(v41 + *(int *)(v42 + 24));
    swift_retain(v43);
    sub_1004B84A4(v41, type metadata accessor for CRLBoard.RealTimeSessionInfo);
    v44 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1013DCB80 != -1)
      swift_once(&qword_1013DCB80, sub_1006386D8);
    objc_msgSend(v44, "addObserver:selector:name:object:", *(_QWORD *)(v0 + 600), "activeParticipantListChangedNotification:", qword_10147ECE8, v43);

    if (qword_1013DD7D0 != -1)
      swift_once(&qword_1013DD7D0, sub_100A03C1C);
    swift_beginAccess(&static OS_os_log.crlJoinLeave, v0 + 560, 0, 0);
    v45 = (id)static OS_os_log.crlJoinLeave;
    v47 = static os_log_type_t.default.getter(v46);
    sub_100A06EBC((uint64_t)v45, &_mh_execute_header, v47, "CRLBoardLibrary now observing CRLBoardRealTimeParticipantsDidChange notifications", 81, 2, (uint64_t)_swiftEmptyArrayStorage);
    swift_release(v43);

    v31 = v177;
  }
  v48 = *(_QWORD *)&v31[v36];
  v49 = *(void **)(*(_QWORD *)(v48 + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState) + 16);
  if (v49)
  {
    v50 = v49;
    v51 = objc_msgSend(v50, "currentUserParticipant");
    if (v51)
    {
      v52 = v51;
      v53 = *(_QWORD *)(v0 + 776);
      v54 = *(_QWORD *)(v0 + 736);
      v55 = v48 + OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo;
      swift_beginAccess(v55, v0 + 512, 0, 0);
      sub_1004CB7BC(v55, v53, (uint64_t *)&unk_101405E90);
      if (v38(v53, 1, v54) == 1)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"enterRealTimeSync(groupSession:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2480, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enterRealTimeSync(groupSession:)", 32, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2480, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
      }
      v56 = *(_QWORD *)(v0 + 784);
      v57 = *(_QWORD *)(v0 + 736);
      sub_1004C4938(*(_QWORD *)(v0 + 776), v56, (uint64_t *)&unk_101405E90);
      if (v38(v56, 1, v57) != 1)
      {
        v81 = *(_QWORD *)(v0 + 896);
        v82 = *(_QWORD *)(v0 + 728);
        sub_1004B84E0(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 752), type metadata accessor for CRLBoard.RealTimeSessionInfo);
        sub_10071B48C(v82);
        if (v81)
        {
          v83 = *(_QWORD *)(v0 + 816);
          v84 = *(_QWORD *)(v0 + 800);
          v85 = *(_QWORD *)(v0 + 752);
          swift_release(v20);
          swift_release(v163);

          swift_release(v83);
        }
        else
        {
          v171 = v52;
          v86 = *(_QWORD *)(v0 + 768);
          v87 = *(_QWORD *)(v0 + 736);
          v88 = *(_QWORD *)&v31[v36] + OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo;
          swift_beginAccess(v88, v0 + 536, 0, 0);
          sub_1004CB7BC(v88, v86, (uint64_t *)&unk_101405E90);
          v89 = v38(v86, 1, v87);
          v90 = *(_QWORD *)(v0 + 728);
          if (v89)
          {
            v91 = *(_QWORD *)(v0 + 816);
            v84 = *(_QWORD *)(v0 + 800);
            v85 = *(_QWORD *)(v0 + 752);
            v92 = *(_QWORD *)(v0 + 696);
            v93 = *(_QWORD *)(v0 + 688);
            sub_1004CB800(*(_QWORD *)(v0 + 768), (uint64_t *)&unk_101405E90);
            v94 = sub_100510DAC();
            swift_allocError(&type metadata for CRLEditingCoordinator.CollaborationAccessError, v94, 0, 0);
            *v95 = 1;
            swift_willThrow(v96);
            swift_release(v20);
            swift_release(v163);

            v97 = swift_release(v91);
            (*(void (**)(uint64_t, uint64_t, __n128))(v92 + 8))(v90, v93, v97);
          }
          else
          {
            v169 = v50;
            v180 = v31;
            v107 = *(_QWORD *)(v0 + 768);
            v108 = *(_QWORD *)(v0 + 760);
            v109 = *(uint64_t **)(v0 + 752);
            v110 = *(_QWORD *)(v0 + 736);
            v111 = *(_QWORD *)(v0 + 696);
            v159 = *(_QWORD *)(v0 + 688);
            v161 = *(_QWORD *)(v0 + 720);
            sub_1004B8460(v107, v108, type metadata accessor for CRLBoard.RealTimeSessionInfo);
            sub_1004CB800(v107, (uint64_t *)&unk_101405E90);
            v112 = *(_QWORD *)(v108 + *(int *)(v110 + 24));
            swift_retain(v112);
            sub_1004B84A4(v108, type metadata accessor for CRLBoard.RealTimeSessionInfo);
            v166 = (char *)sub_10063DAEC(v171, v90, (uint64_t)v109 + *(int *)(v110 + 28), 1, 1);
            swift_release(v112);
            v113 = *v109;
            v114 = objc_msgSend(v171, "userIdentity", swift_retain(*v109).n128_f64[0]);
            v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 16);
            v116 = v115(v161, v90, v159);
            v117 = Date.timeIntervalSince1970.getter(v116);
            if (v114)
            {
              v118 = v117;
              v162 = v113;
              v119 = *(_QWORD *)(v0 + 720);
              v120 = *(_QWORD *)(v0 + 696);
              v121 = *(_QWORD *)(v0 + 688);
              v122 = *(_QWORD *)(v0 + 680);
              v123 = *(char **)(v0 + 672);
              v124 = *(int **)(v0 + 664);
              *(_QWORD *)v123 = v114;
              v125 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 32);
              v125(&v123[v124[5]], v119, v121);
              *(double *)&v123[v124[6]] = v118;
              v123[v124[7]] = 1;
              sub_1004B84E0((uint64_t)v123, v122, type metadata accessor for CRLRealTimeEnter);
              v126 = sub_10078F194();
              v174 = *(_QWORD *)(v0 + 728);
              v137 = *(_QWORD *)(v0 + 712);
              v138 = *(_QWORD *)(v0 + 688);
              v139 = v126;
              v140 = v127;
              sub_1004BE310(v126, v127);
              v157 = v139;
              sub_100CE15BC(2, v139, v140, v162);
              v115(v137, v174, v138);
              v141 = *(_QWORD *)&v166[OBJC_IVAR____TtC8Freeform23CRLCollaboratorPresence_collaboratorColorIndex];
              if ((v141 & 0x8000000000000000) != 0)
              {
                v151 = "Negative value is not representable";
                v152 = 35;
                v153 = 3451;
              }
              else
              {
                if (!HIDWORD(v141))
                {
                  v142 = *(char **)(v0 + 656);
                  v143 = *(_QWORD *)(v0 + 648);
                  v125(v142, *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 688));
                  *(_DWORD *)&v142[*(int *)(v143 + 20)] = v141;
                  v144 = sub_100971718();
                  v146 = v145;
                  v175 = *(_QWORD *)(v0 + 752);
                  v155 = *(_QWORD *)(v0 + 728);
                  v147 = *(_QWORD *)(v0 + 696);
                  v148 = *(_QWORD *)(v0 + 688);
                  v149 = *(_QWORD *)(v0 + 680);
                  v150 = *(_QWORD *)(v0 + 656);
                  sub_1004BE310(v144, v145);
                  sub_1004BE310(v144, v146);
                  sub_100CE15BC(4, v144, v146, v162);
                  swift_release(v162);

                  sub_1004BBBC8(v144, v146);
                  sub_1004BBBC8(v144, v146);
                  sub_1004BBBC8(v157, v140);
                  sub_1004BBBC8(v157, v140);
                  sub_1004B84A4(v150, type metadata accessor for CRLCollaboratorCursorColor);
                  sub_1004B84A4(v149, type metadata accessor for CRLRealTimeEnter);
                  (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v155, v148);
                  sub_1004B84A4(v175, type metadata accessor for CRLBoard.RealTimeSessionInfo);
                  sub_1004BBBC8(v144, v146);
                  v31 = v180;
                  goto LABEL_16;
                }
                v151 = "Not enough bits to represent the passed value";
                v152 = 45;
                v153 = 3455;
              }
              LOBYTE(v154) = 2;
              return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v151, v152, 2, "Swift/Integers.swift", 20, v154, v153, 0);
            }
            v128 = *(_QWORD *)(v0 + 816);
            v84 = *(_QWORD *)(v0 + 800);
            v85 = *(_QWORD *)(v0 + 752);
            v181 = *(_QWORD *)(v0 + 728);
            v129 = *(_QWORD *)(v0 + 720);
            v130 = *(_QWORD *)(v0 + 696);
            v131 = *(_QWORD *)(v0 + 688);
            v132 = sub_100577444();
            swift_allocError(&type metadata for CRLSerializationError, v132, 0, 0);
            *v133 = 0;
            swift_willThrow(v134);
            v135 = *(void (**)(uint64_t, uint64_t))(v130 + 8);
            v135(v129, v131);
            swift_release(v20);
            swift_release(v163);
            swift_release(v113);

            v136 = swift_release(v128);
            ((void (*)(uint64_t, uint64_t, __n128))v135)(v181, v131, v136);
          }
        }
        sub_1004B84A4(v85, type metadata accessor for CRLBoard.RealTimeSessionInfo);
        sub_1004B84A4(v84, type metadata accessor for CRLGloballyScopedBoardIdentifier);
        v98 = *(_QWORD *)(v0 + 800);
        v99 = *(_QWORD *)(v0 + 792);
        v100 = *(_QWORD *)(v0 + 784);
        v101 = *(_QWORD *)(v0 + 776);
        v102 = *(_QWORD *)(v0 + 768);
        v103 = *(_QWORD *)(v0 + 760);
        v104 = *(_QWORD *)(v0 + 752);
        v105 = *(_QWORD *)(v0 + 728);
        v106 = *(_QWORD *)(v0 + 720);
        v156 = *(_QWORD *)(v0 + 712);
        v158 = *(_QWORD *)(v0 + 704);
        v160 = *(_QWORD *)(v0 + 680);
        v164 = *(_QWORD *)(v0 + 672);
        v165 = *(_QWORD *)(v0 + 656);
        v168 = *(_QWORD *)(v0 + 640);
        v172 = *(_QWORD *)(v0 + 632);
        v179 = *(_QWORD *)(v0 + 608);
        swift_task_dealloc(*(_QWORD *)(v0 + 808));
        swift_task_dealloc(v98);
        swift_task_dealloc(v99);
        swift_task_dealloc(v100);
        swift_task_dealloc(v101);
        swift_task_dealloc(v102);
        swift_task_dealloc(v103);
        swift_task_dealloc(v104);
        swift_task_dealloc(v105);
        swift_task_dealloc(v106);
        swift_task_dealloc(v156);
        swift_task_dealloc(v158);
        swift_task_dealloc(v160);
        swift_task_dealloc(v164);
        swift_task_dealloc(v165);
        swift_task_dealloc(v168);
        swift_task_dealloc(v172);
        swift_task_dealloc(v179);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v58 = *(_QWORD *)(v0 + 784);

      sub_1004CB800(v58, (uint64_t *)&unk_101405E90);
    }
    else
    {

    }
  }
LABEL_16:
  v59 = *(void **)&v31[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_shareObservers];
  if ((objc_msgSend(v59, "containsObject:", *(_QWORD *)(v0 + 600)) & 1) == 0)
    objc_msgSend(v59, "addObject:", *(_QWORD *)(v0 + 600));
  v60 = *(_QWORD *)(v0 + 704);
  v61 = *(_QWORD *)(v0 + 640);
  v62 = *(_QWORD *)(v0 + 608);
  v63 = *(char **)&v31[v36];
  v64 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v65 = *(_QWORD *)&v63[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v66 = v65 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v65 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 392, 0, 0);
  sub_1004B8460(v66, v62, type metadata accessor for CRLBoardCRDTData);
  v67 = v63;
  swift_retain(v65);
  v68 = sub_1004B804C(&qword_1013E1A80);
  *(_QWORD *)(v0 + 936) = v68;
  CRRegister.wrappedValue.getter(v68);
  sub_1004B84A4(v62, type metadata accessor for CRLBoardCRDTData);
  swift_release(v65);
  v69 = (uint64_t *)(*(_QWORD *)&v63[v64] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v71 = *v69;
  v70 = v69[1];
  swift_bridgeObjectRetain(v70);
  sub_10067AFD0(v60, v71, v70, v61);

  v72 = sub_100B4AD90(v61);
  sub_1004B84A4(v61, type metadata accessor for CRLBoardIdentifier);
  v73 = type metadata accessor for CRLRealTimeDataEncryptor();
  v74 = (_QWORD *)swift_allocObject(v73, 40, 7);
  *(_QWORD *)(v0 + 944) = v74;
  v74[4] = 0;
  if (qword_1013DCB60 != -1)
    swift_once(&qword_1013DCB60, sub_100637218);
  v75 = *(_QWORD *)(v0 + 592);
  v76 = (void *)qword_10147ECC0;
  v74[2] = v72;
  v74[3] = v76;
  v77 = *(int **)(*(_QWORD *)v75 + 240);
  v78 = v77[1];
  v178 = (int *)((char *)v77 + *v77);
  swift_retain(v163);
  v79 = v76;
  v80 = (_QWORD *)swift_task_alloc(v78);
  *(_QWORD *)(v0 + 952) = v80;
  *v80 = v0;
  v80[1] = sub_100CC6B98;
  return ((uint64_t (*)(uint64_t, _UNKNOWN **, _QWORD *))v178)(v163, &off_10129CDB0, v74);
}

uint64_t sub_100CC6B98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 920);
  swift_task_dealloc(*(_QWORD *)(*v0 + 952));
  swift_release(v2);
  return swift_task_switch(sub_100CC6BF4, *(_QWORD *)(v1 + 824), *(_QWORD *)(v1 + 832));
}

uint64_t sub_100CC6BF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t inited;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v1 = v0[117];
  v2 = v0[116];
  v3 = v0[113];
  v4 = v0[88];
  v76 = v0[80];
  v5 = v0[76];
  swift_release(v0[102]);
  v6 = *(char **)(v3 + v2);
  v7 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v8 = *(_QWORD *)&v6[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v9 = v8 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v8 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 52, 0, 0);
  sub_1004B8460(v9, v5, type metadata accessor for CRLBoardCRDTData);
  v10 = v6;
  swift_retain(v8);
  CRRegister.wrappedValue.getter(v1);
  sub_1004B84A4(v5, type metadata accessor for CRLBoardCRDTData);
  swift_release(v8);
  v11 = (uint64_t *)(*(_QWORD *)&v6[v7] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v12 = *v11;
  v13 = v11[1];
  swift_bridgeObjectRetain(v13);
  sub_10067AFD0(v4, v12, v13, v76);

  v14 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1013DDAA8 != -1)
    swift_once(&qword_1013DDAA8, sub_100A74280);
  v54 = v0[117];
  v60 = v0[115];
  v61 = v0[118];
  v49 = v0[113];
  v50 = v0[116];
  v58 = v0[108];
  v59 = v0[114];
  v52 = v0[107];
  v62 = v0[100];
  v63 = v0[101];
  v64 = v0[99];
  v65 = v0[98];
  v66 = v0[97];
  v67 = v0[96];
  v68 = v0[95];
  v69 = v0[94];
  v70 = v0[91];
  v71 = v0[90];
  v72 = v0[89];
  v53 = v0[88];
  v55 = v0[87];
  v56 = v0[86];
  v73 = v0[85];
  v74 = v0[84];
  v75 = v0[82];
  v15 = v0[80];
  v57 = v15;
  v16 = v0[79];
  v17 = *(void **)(*(_QWORD *)(v49 + v50) + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
  v18 = qword_101480A50;
  v19 = v0[78];
  v20 = v0[77];
  v77 = v0[76];
  v21 = v0[75];
  v22 = swift_allocObject(&unk_10129F9C0, 24, 7);
  swift_weakInit(v22 + 16, v21);
  v51 = v16;
  sub_1004B8460(v15, v16, type metadata accessor for CRLBoardIdentifier);
  v23 = *(unsigned __int8 *)(v20 + 80);
  v24 = (v23 + 24) & ~v23;
  v25 = swift_allocObject(&unk_10129F9E8, v24 + v19, v23 | 7);
  *(_QWORD *)(v25 + 16) = v22;
  sub_1004B84E0(v16, v25 + v24, type metadata accessor for CRLBoardIdentifier);
  v0[24] = sub_100CEC6AC;
  v0[25] = v25;
  v0[20] = _NSConcreteStackBlock;
  v0[21] = *(_QWORD *)"";
  v0[22] = sub_100568280;
  v0[23] = &unk_10129FA00;
  v26 = _Block_copy(v0 + 20);
  v27 = v0[25];
  v28 = v17;
  v29 = objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", v18, v28, 0, v26, swift_release(v27).n128_f64[0]);
  _Block_release(v26);

  v30 = *(_QWORD *)(v21 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync);
  *(_QWORD *)(v21 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync) = v29;
  swift_unknownObjectRelease(v30);
  v31 = (void *)static OS_os_log.realTimeSync;
  inited = swift_initStackObject(v52, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v33 = *(char **)(v49 + v50);
  v34 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v35 = *(_QWORD *)&v33[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v36 = v35 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v35 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v0 + 61, 0, 0);
  sub_1004B8460(v36, v77, type metadata accessor for CRLBoardCRDTData);
  v37 = v31;
  v38 = v33;
  swift_retain(v35);
  CRRegister.wrappedValue.getter(v54);
  sub_1004B84A4(v77, type metadata accessor for CRLBoardCRDTData);
  swift_release(v35);
  v39 = (uint64_t *)(*(_QWORD *)&v33[v34] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v41 = *v39;
  v40 = v39[1];
  swift_bridgeObjectRetain(v40);
  sub_10067AFD0(v53, v41, v40, v51);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v53, v51, v56);
  v42 = sub_1004B84A4(v51, type metadata accessor for CRLBoardIdentifier);
  v43 = UUID.uuidString.getter(v42);
  v45 = v44;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v56);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v43;
  *(_QWORD *)(inited + 40) = v45;
  v47 = static os_log_type_t.default.getter(v46);
  sub_100A06EBC((uint64_t)v37, &_mh_execute_header, v47, "Started real time collaboration session on board %{public}@", 59, 2, inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), v58);
  swift_release(v59);
  swift_release(v60);
  swift_release(v61);

  sub_1004B84A4(v57, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(v62, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  swift_task_dealloc(v63);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v53);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v57);
  swift_task_dealloc(v51);
  swift_task_dealloc(v77);
  return ((uint64_t (*)(void))v0[1])();
}

double sub_100CC71EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Strong;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  _BYTE v29[40];
  __int128 v30;
  __int128 v31;
  _BYTE v32[24];

  v5 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v28[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v32, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v10 = Strong;
    v11 = Notification.userInfo.getter(Strong);
    if (v11)
    {
      v12 = v11;
      v28[0] = 0xD00000000000001ALL;
      v28[1] = 0x8000000100FF0310;
      AnyHashable.init<A>(_:)(v28, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v12 + 16) && (v13 = sub_1008432BC((uint64_t)v29), (v14 & 1) != 0))
      {
        sub_1004CB6E8(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)&v30);
      }
      else
      {
        v30 = 0u;
        v31 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1004B89A4((uint64_t)v29);
      if (!*((_QWORD *)&v31 + 1))
      {
        swift_release(v10);
        sub_1004CB800((uint64_t)&v30, &qword_1013E0230);
        return result;
      }
      v15 = sub_1004B804C(&qword_1014053E8);
      if ((swift_dynamicCast(v28, &v30, (char *)&type metadata for Any + 8, v15, 6) & 1) != 0)
      {
        v16 = v28[0];
        if (*(_QWORD *)(v28[0] + 16))
        {
          v17 = sub_100843264(a3);
          if ((v18 & 1) != 0)
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
            swift_bridgeObjectRetain(v19);
            swift_bridgeObjectRelease();
            v20 = type metadata accessor for TaskPriority(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
            v21 = swift_allocObject(&unk_10129F9C0, 24, 7);
            swift_weakInit(v21 + 16, v10);
            type metadata accessor for MainActor(0);
            swift_retain(v21);
            v23 = static MainActor.shared.getter(v22);
            v24 = (_QWORD *)swift_allocObject(&unk_10129FA38, 48, 7);
            v24[2] = v23;
            v24[3] = &protocol witness table for MainActor;
            v24[4] = v21;
            v24[5] = v19;
            swift_release(v21);
            v25 = sub_100521B98((uint64_t)v7, (uint64_t)&unk_10140E080, (uint64_t)v24);
            swift_release(v10);
            v26 = v25;
LABEL_15:
            *(_QWORD *)&result = swift_release(v26).n128_u64[0];
            return result;
          }
        }
        swift_bridgeObjectRelease();
      }
    }
    v26 = v10;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_100CC745C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[9] = a4;
  v5[10] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[11] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CC74C8, v7, v8);
}

uint64_t sub_100CC74C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  __n128 v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 88));
  v1 += 16;
  swift_beginAccess(v1, v0 + 48, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = sub_100CBE354(v0 + 16);
    if (*v6)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
      sub_10051257C(v7);
    }
    ((void (*)(uint64_t, _QWORD))v5)(v0 + 16, 0);
    v3 = swift_release(v4);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

void sub_100CC7570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t inited;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  __n128 v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t);
  double (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE v158[24];
  uint64_t v159;
  char v160[24];
  char v161[24];
  char v162[72];
  char v163[32];

  v1 = v0;
  v2 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoard.RealTimeSessionInfo(0);
  v130 = *(_QWORD *)(v5 - 8);
  v131 = v5;
  __chkstk_darwin(v5);
  v129 = (uint64_t *)((char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1004B804C((uint64_t *)&unk_101405E90);
  __chkstk_darwin(v7);
  v132 = (uint64_t)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLRealTimeLeave(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v12);
  v151 = (uint64_t)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for UUID(0);
  v144 = *(_QWORD *)(v154 - 8);
  v14 = __chkstk_darwin(v154);
  v137 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v153 = (char *)&v129 - v16;
  v17 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v17);
  v152 = (uint64_t)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v0 + 16);
  v20 = *(void **)(v19 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_shareObservers);
  if (objc_msgSend(v20, "containsObject:", v1))
    objc_msgSend(v20, "removeObject:", v1);
  v150 = v1;
  v138 = v11;
  v136 = v4;
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v163, 0, 0);
  v21 = (void *)static OS_os_log.realTimeSync;
  v146 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v146, v162);
  v145 = xmmword_100EF5E40;
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v149 = v19;
  v143 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  v23 = *(char **)(v19 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v24 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v25 = *(_QWORD *)&v23[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v26 = v25 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v25 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v161, 0, 0);
  v27 = v26;
  v28 = v151;
  sub_1004B8460(v27, v151, type metadata accessor for CRLBoardCRDTData);
  v29 = v21;
  v30 = v23;
  swift_retain(v25);
  v31 = sub_1004B804C(&qword_1013E1A80);
  v32 = (uint64_t)v153;
  v140 = v31;
  CRRegister.wrappedValue.getter(v31);
  sub_1004B84A4(v28, type metadata accessor for CRLBoardCRDTData);
  swift_release(v25);
  v33 = (uint64_t *)(*(_QWORD *)&v23[v24] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  v36 = v152;
  sub_10067AFD0(v32, v34, v35, v152);

  v37 = v144;
  v38 = v154;
  v141 = *(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 16);
  v141(v32, v36, v154);
  v39 = sub_1004B84A4(v36, type metadata accessor for CRLBoardIdentifier);
  v40 = UUID.uuidString.getter(v39);
  v42 = v41;
  v142 = *(double (**)(uint64_t, uint64_t))(v37 + 8);
  v142(v32, v38);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v147 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v147;
  *(_QWORD *)(inited + 32) = v40;
  *(_QWORD *)(inited + 40) = v42;
  v44 = static os_log_type_t.default.getter(v43);
  sub_100A06EBC((uint64_t)v29, &_mh_execute_header, v44, "exitRealTimeSync() for board %{public}@", 39, 2, inited);
  swift_setDeallocating(inited);
  v45 = *(_QWORD *)(inited + 16);
  v46 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, v45, v46);

  v47 = OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync;
  v48 = v150;
  v49 = *(_QWORD *)(v150 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_databaseSaveObserverForRealTimeSync);
  if (v49)
  {
    v50 = (void *)objc_opt_self(NSNotificationCenter);
    swift_unknownObjectRetain(v49);
    v51 = objc_msgSend(v50, "defaultCenter");
    objc_msgSend(v51, "removeObserver:", v49);

    swift_unknownObjectRelease(v49);
    v52 = *(_QWORD *)(v48 + v47);
    *(_QWORD *)(v48 + v47) = 0;
    swift_unknownObjectRelease(v52);
  }
  v53 = (uint64_t *)(v48 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession);
  swift_beginAccess(v53, v160, 1, 0);
  v54 = *v53;
  v148 = v46;
  if (v54)
  {
    v55 = v53[2];
    v56 = v53[3];
    v57 = v53[1];
    v58 = qword_1013DD7D0;
    swift_retain(v54);
    v134 = v57;
    swift_retain(v57);
    v139 = v55;
    swift_retain(v55);
    v133 = v56;
    swift_bridgeObjectRetain(v56);
    if (v58 != -1)
      swift_once(&qword_1013DD7D0, sub_100A03C1C);
    swift_beginAccess(&static OS_os_log.crlJoinLeave, v158, 0, 0);
    v59 = (id)static OS_os_log.crlJoinLeave;
    v61 = static os_log_type_t.default.getter(v60);
    sub_100A06EBC((uint64_t)v59, &_mh_execute_header, v61, "BoardLibrary exitRealTimeSync: stop observing CRLBoardRealTimeParticipantsDidChange observer", 92, 2, (uint64_t)_swiftEmptyArrayStorage);

    v62 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v64 = (uint64_t)v137;
    v63 = (uint64_t)v138;
    if (qword_1013DCB80 != -1)
      swift_once(&qword_1013DCB80, sub_1006386D8);
    objc_msgSend(v62, "removeObserver:name:object:", v150, qword_10147ECE8, 0);

    sub_10071B48C(v64);
    v65 = v146;
    v135 = v54;
    v89 = v63;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 32))(v63, v64, v154);
    v120 = sub_10078F6E8();
    v122 = v121;
    v123 = v149;
    v124 = *(_QWORD *)(v149 + v143) + OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo;
    swift_beginAccess(v124, &v155, 0, 0);
    v125 = v132;
    sub_1004CB7BC(v124, v132, (uint64_t *)&unk_101405E90);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v125, 1, v131))
    {
      sub_1004B84A4(v89, type metadata accessor for CRLRealTimeLeave);
      sub_1004BBBC8(v120, v122);
      sub_1004CB800(v125, (uint64_t *)&unk_101405E90);
    }
    else
    {
      v126 = v129;
      sub_1004B8460(v125, (uint64_t)v129, type metadata accessor for CRLBoard.RealTimeSessionInfo);
      sub_1004BE310(v120, v122);
      sub_1004CB800(v125, (uint64_t *)&unk_101405E90);
      v127 = *v126;
      swift_retain(*v126);
      sub_1004B84A4((uint64_t)v126, type metadata accessor for CRLBoard.RealTimeSessionInfo);
      sub_1004BE310(v120, v122);
      sub_100CE15BC(3, v120, v122, v127);
      swift_release(v127);
      sub_1004BBBC8(v120, v122);
      sub_1004BBBC8(v120, v122);
      sub_1004B84A4(v89, type metadata accessor for CRLRealTimeLeave);
      sub_1004BBBC8(v120, v122);
    }
    v128 = (uint64_t)v136;
    v90 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v128, 1, 1, v90);
    v91 = (_QWORD *)swift_allocObject(&unk_10129F920, 40, 7);
    v91[2] = 0;
    v91[3] = 0;
    v92 = v139;
    v91[4] = v139;
    swift_retain(v92);
    v93 = sub_1009880C4(v128, (uint64_t)&unk_10140E070, (uint64_t)v91);
    swift_release(v93);
    sub_1004CB800(v128, &qword_1013E01F0);
    sub_100B1856C();
    v94 = *v53;
    v95 = v53[1];
    v96 = v53[2];
    v97 = v53[3];
    *(_OWORD *)v53 = 0u;
    *((_OWORD *)v53 + 1) = 0u;
    sub_10066BEC4(v94, v95, v96, v97);
    v98 = (void *)static OS_os_log.realTimeSync;
    v99 = swift_initStackObject(v65, &v157);
    *(_OWORD *)(v99 + 16) = v145;
    v100 = *(char **)(v123 + v143);
    v101 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
    v102 = *(_QWORD *)&v100[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
    v103 = v102 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v102 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, &v156, 0, 0);
    v104 = v103;
    v105 = v151;
    sub_1004B8460(v104, v151, type metadata accessor for CRLBoardCRDTData);
    v74 = v98;
    v106 = v100;
    swift_retain(v102);
    v107 = (uint64_t)v153;
    CRRegister.wrappedValue.getter(v140);
    sub_1004B84A4(v105, type metadata accessor for CRLBoardCRDTData);
    swift_release(v102);
    v108 = (uint64_t *)(*(_QWORD *)&v100[v101] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v109 = *v108;
    v110 = v108[1];
    swift_bridgeObjectRetain(v110);
    v111 = v152;
    sub_10067AFD0(v107, v109, v110, v152);

    v112 = v154;
    v141(v107, v111, v154);
    v113 = sub_1004B84A4(v111, type metadata accessor for CRLBoardIdentifier);
    v114 = UUID.uuidString.getter(v113);
    v116 = v115;
    v117.n128_f64[0] = v142(v107, v112);
    v118 = v147;
    *(_QWORD *)(v99 + 56) = &type metadata for String;
    *(_QWORD *)(v99 + 64) = v118;
    *(_QWORD *)(v99 + 32) = v114;
    *(_QWORD *)(v99 + 40) = v116;
    v119 = static os_log_type_t.default.getter(v117);
    sub_100A06EBC((uint64_t)v74, &_mh_execute_header, v119, "Ended real time collaboration session on board %{public}@", 57, 2, v99);
    swift_setDeallocating(v99);
    swift_arrayDestroy(v99 + 32, *(_QWORD *)(v99 + 16), v148);
    swift_bridgeObjectRelease(v133);
    swift_release(v139);
    swift_release(v134);
    swift_release(v135);
  }
  else
  {
    v66 = (void *)static OS_os_log.realTimeSync;
    v67 = swift_initStackObject(v146, &v159);
    *(_OWORD *)(v67 + 16) = v145;
    v68 = *(char **)(v149 + v143);
    v69 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
    v70 = *(_QWORD *)&v68[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
    v71 = v70 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v70 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v158, 0, 0);
    v72 = v71;
    v73 = v151;
    sub_1004B8460(v72, v151, type metadata accessor for CRLBoardCRDTData);
    v74 = v66;
    v75 = v68;
    swift_retain(v70);
    v76 = (uint64_t)v153;
    CRRegister.wrappedValue.getter(v140);
    sub_1004B84A4(v73, type metadata accessor for CRLBoardCRDTData);
    swift_release(v70);
    v77 = (uint64_t *)(*(_QWORD *)&v68[v69] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v78 = *v77;
    v79 = v77[1];
    swift_bridgeObjectRetain(v79);
    v80 = v152;
    sub_10067AFD0(v76, v78, v79, v152);

    v81 = v154;
    v141(v76, v80, v154);
    v82 = sub_1004B84A4(v80, type metadata accessor for CRLBoardIdentifier);
    v83 = UUID.uuidString.getter(v82);
    v85 = v84;
    v86.n128_f64[0] = v142(v76, v81);
    v87 = v147;
    *(_QWORD *)(v67 + 56) = &type metadata for String;
    *(_QWORD *)(v67 + 64) = v87;
    *(_QWORD *)(v67 + 32) = v83;
    *(_QWORD *)(v67 + 40) = v85;
    v88 = static os_log_type_t.default.getter(v86);
    sub_100A06EBC((uint64_t)v74, &_mh_execute_header, v88, "Nothing to do for exiting a real-time session. A real-time sync session object is not associated to the board %{public}@", 120, 2, v67);
    swift_setDeallocating(v67);
    swift_arrayDestroy(v67 + 32, *(_QWORD *)(v67 + 16), v148);
  }

}

void sub_100CC8218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void (*v68)(uint64_t, uint64_t);
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(_QWORD);
  __n128 v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, unint64_t, uint64_t);
  uint64_t v122;
  char *v123;
  _BYTE v124[32];
  void *v125;
  char v126[16];
  char v127[8];

  v108 = a1;
  v2 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v2);
  v110 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRLBoard.RealTimeSessionInfo(0);
  v104 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v109 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C((uint64_t *)&unk_101405E90);
  __chkstk_darwin(v6);
  v105 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v122 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v103 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v123 = (char *)&v98 - v15;
  __chkstk_darwin(v14);
  v120 = (uint64_t)&v98 - v16;
  v17 = type metadata accessor for CRLBoardIdentifier(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v107 = (uint64_t)&v98 - v22;
  v23 = __chkstk_darwin(v21);
  v106 = (uint64_t)&v98 - v24;
  __chkstk_darwin(v23);
  v112 = (uint64_t)&v98 - v25;
  v111 = v1;
  v26 = (uint64_t *)(v1 + OBJC_IVAR____TtCC8Freeform15CRLBoardLibrary9BoardInfo_realTimeSyncSession);
  swift_beginAccess(v26, v127, 0, 0);
  v27 = *v26;
  if (!*v26)
    return;
  v29 = v26[2];
  v28 = v26[3];
  v30 = v26[1];
  sub_10066BE78(*v26, v30, v29, v28);
  swift_bridgeObjectRetain(v28);
  sub_10066BEC4(v27, v30, v29, v28);
  v31 = *(_QWORD *)(v28 + 16);
  swift_bridgeObjectRelease(v28);
  if (!v31)
    return;
  v117 = v26;
  v102 = v20;
  v101 = *(_QWORD *)(v111 + 16);
  v100 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  v32 = *(char **)(v101 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v33 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v34 = *(_QWORD *)&v32[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v35 = v34 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v34 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v126, 0, 0);
  sub_1004B8460(v35, (uint64_t)v10, type metadata accessor for CRLBoardCRDTData);
  v36 = v32;
  swift_retain(v34);
  v37 = sub_1004B804C(&qword_1013E1A80);
  v38 = v120;
  CRRegister.wrappedValue.getter(v37);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardCRDTData);
  swift_release(v34);
  v39 = (uint64_t *)(*(_QWORD *)&v32[v33] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v40 = *v39;
  v41 = v39[1];
  swift_bridgeObjectRetain(v41);
  sub_10067AFD0(v38, v40, v41, v112);

  v125 = &_swiftEmptySetSingleton;
  v42 = v108;
  v43 = *(_QWORD *)(v108 + 16);
  v44 = (uint64_t)v110;
  v45 = v109;
  if (!v43)
    goto LABEL_28;
  v99 = v4;
  v46 = v108 + 32;
  v47 = type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
  swift_bridgeObjectRetain(v42);
  v48 = 0;
  v49 = v117;
  v114 = v46;
  v115 = v43;
  v113 = v47;
  do
  {
    v51 = *(_QWORD *)(v46 + 16 * v48);
    v52 = swift_dynamicCastClass(v51, v47);
    if (v52)
    {
      v53 = *v49;
      if (*v49)
      {
        v54 = v52;
        v56 = v49[2];
        v55 = v49[3];
        v57 = v49[1];
        swift_unknownObjectRetain(v51);
        sub_10066BE78(v53, v57, v56, v55);
        sub_10066BE78(v53, v57, v56, v55);
        v119 = v51;
        swift_unknownObjectRetain(v51);
        swift_bridgeObjectRelease(v55);
        swift_release(v56);
        swift_release(v57);
        swift_release(v53);
        swift_bridgeObjectRetain(v55);
        sub_10066BEC4(v53, v57, v56, v55);
        v118 = v54;
        v58 = *(void (**)(uint64_t, unint64_t, uint64_t))(v122 + 16);
        v116 = v54 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id;
        v121 = v58;
        ((void (*)(char *))v58)(v123);
        if (!*(_QWORD *)(v55 + 16)
          || (v59 = *(_QWORD *)(v55 + 40),
              v60 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v61 = dispatch thunk of Hashable._rawHashValue(seed:)(v59, v11, v60), v62 = -1 << *(_BYTE *)(v55 + 32), v63 = v61 & ~v62, ((*(_QWORD *)(v55 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFF8)) >> v63) & 1) == 0))
        {
LABEL_5:
          v50 = swift_bridgeObjectRelease(v55);
          (*(void (**)(char *, uint64_t, __n128))(v122 + 8))(v123, v11, v50);
          swift_unknownObjectRelease_n(v119, 2);
          v49 = v117;
          v46 = v114;
          v43 = v115;
          v47 = v113;
          goto LABEL_6;
        }
        v64 = ~v62;
        v65 = *(_QWORD *)(v122 + 72);
        while (1)
        {
          v66 = v120;
          v121(v120, *(_QWORD *)(v55 + 48) + v65 * v63, v11);
          sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v67 = dispatch thunk of static Equatable.== infix(_:_:)(v66, v123);
          v68 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
          v68(v66, v11);
          if ((v67 & 1) != 0)
            break;
          v63 = (v63 + 1) & v64;
          if (((*(_QWORD *)(v55 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFF8)) >> v63) & 1) == 0)
            goto LABEL_5;
        }
        v69 = swift_bridgeObjectRelease(v55);
        ((void (*)(char *, uint64_t, __n128))v68)(v123, v11, v69);
        v70 = v106;
        sub_1004B8460(v118 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier, v106, type metadata accessor for CRLBoardIdentifier);
        v71 = v112;
        v72 = static UUID.== infix(_:_:)(v70);
        v73 = v107;
        sub_1004B8460(v70, v107, type metadata accessor for CRLBoardIdentifier);
        v74 = v71;
        v75 = (uint64_t)v102;
        sub_1004B8460(v74, (uint64_t)v102, type metadata accessor for CRLBoardIdentifier);
        if ((v72 & 1) != 0)
        {
          v76 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
          v77 = *(_QWORD *)(v73 + v76);
          v78 = *(_QWORD *)(v73 + v76 + 8);
          v79 = (_QWORD *)(v75 + v76);
          v80 = v79[1];
          if (v77 == *v79 && v78 == v80)
          {
            sub_1004B84A4(v75, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4(v73, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4(v70, type metadata accessor for CRLBoardIdentifier);
            v47 = v113;
            v83 = v119;
LABEL_25:
            v84 = (uint64_t)v103;
            v121((uint64_t)v103, v116, v11);
            v85 = v120;
            sub_100AD569C(v120, v84);
            swift_unknownObjectRelease_n(v83, 2);
            v68(v85, v11);
            goto LABEL_26;
          }
          v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v78, *v79, v80, 0);
          sub_1004B84A4(v75, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v73, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v70, type metadata accessor for CRLBoardIdentifier);
          v47 = v113;
          v83 = v119;
          if ((v82 & 1) != 0)
            goto LABEL_25;
        }
        else
        {
          sub_1004B84A4(v75, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v73, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v70, type metadata accessor for CRLBoardIdentifier);
          v47 = v113;
          v83 = v119;
        }
        swift_unknownObjectRelease_n(v83, 2);
LABEL_26:
        v49 = v117;
        v46 = v114;
        v43 = v115;
      }
    }
LABEL_6:
    ++v48;
  }
  while (v48 != v43);
  swift_bridgeObjectRelease(v108);
  v44 = (uint64_t)v110;
  v45 = v109;
  v4 = v99;
LABEL_28:
  v86 = sub_100CBE354((uint64_t)v124);
  if (*v88)
  {
    v89 = v125;
    swift_bridgeObjectRetain(v125);
    sub_100DB6134(v90);
    v87 = swift_bridgeObjectRelease(v89);
  }
  ((void (*)(_BYTE *, _QWORD, __n128))v86)(v124, 0, v87);
  v91 = *(_QWORD *)(v101 + v100) + OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo;
  swift_beginAccess(v91, v124, 0, 0);
  v92 = v105;
  sub_1004CB7BC(v91, v105, (uint64_t *)&unk_101405E90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v92, 1, v4))
  {
    sub_1004CB800(v92, (uint64_t *)&unk_101405E90);
    swift_bridgeObjectRelease(v125);
  }
  else
  {
    sub_1004B8460(v92, (uint64_t)v45, type metadata accessor for CRLBoard.RealTimeSessionInfo);
    sub_1004CB800(v92, (uint64_t *)&unk_101405E90);
    v93 = *v45;
    swift_retain(*v45);
    sub_1004B84A4((uint64_t)v45, type metadata accessor for CRLBoard.RealTimeSessionInfo);
    v94 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v44, 1, 1, v94);
    v95 = v125;
    v96 = (_QWORD *)swift_allocObject(&unk_10129F858, 48, 7);
    v96[2] = 0;
    v96[3] = 0;
    v96[4] = v95;
    v96[5] = v93;
    swift_retain(v93);
    v97 = sub_1009880C4(v44, (uint64_t)&unk_10140E068, (uint64_t)v96);
    swift_release(v93);
    swift_release(v97);
    sub_1004CB800(v44, &qword_1013E01F0);
  }
  sub_1004B84A4(v112, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100CC8BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[29] = a4;
  v5[30] = a5;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E16F0);
  v5[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLProto_Data(0);
  v5[32] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[33] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[34] = swift_task_alloc(v9);
  v5[35] = swift_task_alloc(v9);
  v10 = type metadata accessor for CRLProto_BoardItemIdentifier(0);
  v5[36] = v10;
  v5[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLServerSyncedPeerAddedItemEvent(0);
  v5[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v5[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100CC8D20, 0, 0);
}

uint64_t sub_100CC8D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int64_t v77;

  v1 = *(_QWORD *)(v0 + 272);
  v73 = *(_QWORD *)(v0 + 280);
  v74 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 232);
  v69 = v2 + 56;
  v72 = *(_QWORD *)(v0 + 264);
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 56);
  v70 = (unint64_t)(63 - v4) >> 6;
  v75 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  v68 = _swiftEmptyArrayStorage;
  v71 = v1;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v8 = (v5 - 1) & v5;
      v9 = v7 | (v6 << 6);
      goto LABEL_20;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v10 >= v70)
      goto LABEL_30;
    v11 = *(_QWORD *)(v69 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v70)
        goto LABEL_30;
      v11 = *(_QWORD *)(v69 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v70)
          goto LABEL_30;
        v11 = *(_QWORD *)(v69 + 8 * v6);
        if (!v11)
          break;
      }
    }
LABEL_19:
    v8 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_20:
    v13 = *(_QWORD *)(v0 + 312);
    v14 = *(_QWORD *)(v75 + 48);
    v15 = type metadata accessor for UUID(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v13, v14 + *(_QWORD *)(v16 + 72) * v9, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) == 1)
    {
      v52 = *(_QWORD *)(v0 + 232);
      goto LABEL_31;
    }
    v76 = v8;
    v77 = v6;
    v17 = *(_QWORD *)(v0 + 296);
    v18 = *(_QWORD **)(v0 + 280);
    v20 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 256);
    v21 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v16 + 32))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), v15);
    UnknownStorage.init()(v21);
    v22 = v17 + *(int *)(v74 + 20);
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
    v24 = v23(v22, 1, 1, v19);
    *v18 = 0;
    *(_QWORD *)(v73 + 8) = 0xC000000000000000;
    UnknownStorage.init()(v24);
    sub_1004CB800(v22, (uint64_t *)&unk_1013E16F0);
    sub_1004B84E0((uint64_t)v18, v22, type metadata accessor for CRLProto_Data);
    v25 = v23(v22, 0, 1, v19);
    v26 = UUID.uuid.getter(v25);
    *(_QWORD *)(v0 + 320) = v26;
    *(_BYTE *)(v0 + 328) = v27;
    *(_BYTE *)(v0 + 329) = v28;
    *(_BYTE *)(v0 + 330) = v29;
    *(_BYTE *)(v0 + 331) = v30;
    *(_BYTE *)(v0 + 332) = v31;
    *(_BYTE *)(v0 + 333) = v32;
    *(_BYTE *)(v0 + 334) = v33;
    *(_BYTE *)(v0 + 335) = v34;
    UUID.uuid.getter(v26);
    v35 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v36 = __DataStorage.init(bytes:length:)(v0 + 320, 16);
    sub_1004CB7BC(v22, v20, (uint64_t *)&unk_1013E16F0);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v20, 1, v19);
    v38 = *(_QWORD **)(v0 + 272);
    v39 = *(_QWORD *)(v0 + 248);
    if ((_DWORD)v37 == 1)
    {
      *v38 = 0;
      v40 = v71;
      *(_QWORD *)(v71 + 8) = 0xC000000000000000;
      UnknownStorage.init()(v37);
      sub_1004CB800(v39, (uint64_t *)&unk_1013E16F0);
    }
    else
    {
      sub_1004B84E0(*(_QWORD *)(v0 + 248), (uint64_t)v38, type metadata accessor for CRLProto_Data);
      v40 = v71;
    }
    v41 = *(_QWORD *)(v0 + 288);
    v42 = *(uint64_t **)(v0 + 272);
    v43 = *(_QWORD *)(v0 + 256);
    sub_1004BBBC8(*v42, *(_QWORD *)(v40 + 8));
    *v42 = 0x1000000000;
    *(_QWORD *)(v40 + 8) = v36 | 0x4000000000000000;
    sub_1004CB800(v22, (uint64_t *)&unk_1013E16F0);
    sub_1004B84E0((uint64_t)v42, v22, type metadata accessor for CRLProto_Data);
    v23(v22, 0, 1, v43);
    v44 = sub_1004B7878((unint64_t *)&qword_1013E1538, type metadata accessor for CRLProto_BoardItemIdentifier, (uint64_t)&unk_100F24348);
    v45 = Message.serializedData(partial:)(0, v41, v44);
    v47 = v46;
    sub_1004B84A4(*(_QWORD *)(v0 + 296), type metadata accessor for CRLProto_BoardItemIdentifier);
    sub_1004BE310(v45, v47);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v68 = (double *)sub_100D10C24(0, *((_QWORD *)v68 + 2) + 1, 1, v68);
    v5 = v76;
    v6 = v77;
    v49 = *((_QWORD *)v68 + 2);
    v48 = *((_QWORD *)v68 + 3);
    if (v49 >= v48 >> 1)
      v68 = (double *)sub_100D10C24((_QWORD *)(v48 > 1), v49 + 1, 1, v68);
    v50 = *(_QWORD *)(v0 + 304);
    *(_QWORD *)(v0 + 160) = &type metadata for CRLBoardAuxiliaryRealTimeChange;
    *(_QWORD *)(v0 + 168) = &off_10126E930;
    v51 = swift_allocObject(&unk_10129F8F8, 41, 7);
    *(_QWORD *)(v0 + 136) = v51;
    *(_BYTE *)(v51 + 16) = 8;
    *(_QWORD *)(v51 + 24) = v45;
    *(_QWORD *)(v51 + 32) = v47;
    *(_BYTE *)(v51 + 40) = 1;
    *((_QWORD *)v68 + 2) = v49 + 1;
    sub_1004DB728((__int128 *)(v0 + 136), (uint64_t)&v68[5 * v49 + 4]);
    sub_1004BBBC8(v45, v47);
    sub_1004B84A4(v50, type metadata accessor for CRLServerSyncedPeerAddedItemEvent);
  }
  v12 = v10 + 3;
  if (v12 < v70)
  {
    v11 = *(_QWORD *)(v69 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        v6 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        if (v6 >= v70)
          goto LABEL_30;
        v11 = *(_QWORD *)(v69 + 8 * v6);
        ++v12;
        if (v11)
          goto LABEL_19;
      }
LABEL_37:
      __break(1u);
    }
    v6 = v12;
    goto LABEL_19;
  }
LABEL_30:
  v53 = *(_QWORD *)(v0 + 312);
  v54 = *(_QWORD *)(v0 + 232);
  v55 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v53, 1, 1, v55);
  v52 = v54;
LABEL_31:
  swift_release(v52);
  if (*((_QWORD *)v68 + 2))
  {
    v56 = *(_QWORD *)(v0 + 240);
    v57 = *(NSObject **)(v56 + OBJC_IVAR____TtC8Freeform17CRLBoardChangeSet_accessQueue);
    v58 = swift_allocObject(&unk_10129F880, 32, 7);
    *(_QWORD *)(v58 + 16) = v56;
    *(_QWORD *)(v58 + 24) = v68;
    v59 = swift_allocObject(&unk_10129F8A8, 32, 7);
    *(_QWORD *)(v59 + 16) = sub_100CEC5B8;
    *(_QWORD *)(v59 + 24) = v58;
    *(_QWORD *)(v0 + 120) = sub_1005B71BC;
    *(_QWORD *)(v0 + 128) = v59;
    *(_QWORD *)(v0 + 88) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 96) = *(_QWORD *)"";
    *(_QWORD *)(v0 + 104) = sub_100618D24;
    *(_QWORD *)(v0 + 112) = &unk_10129F8C0;
    v60 = _Block_copy((const void *)(v0 + 88));
    v61 = *(_QWORD *)(v0 + 128);
    swift_retain(v56);
    swift_bridgeObjectRetain(v68);
    swift_retain(v59);
    swift_release(v61);
    dispatch_sync(v57, v60);
    _Block_release(v60);
    LOBYTE(v57) = swift_isEscapingClosureAtFileLocation(v59, "", 89, 588, 26, 1);
    swift_release(v59);
    swift_release(v58);
    swift_bridgeObjectRelease();
    if ((v57 & 1) != 0)
    {
      __break(1u);
      goto LABEL_34;
    }
  }
  else
  {
LABEL_34:
    swift_bridgeObjectRelease();
  }
  v62 = *(_QWORD *)(v0 + 304);
  v63 = *(_QWORD *)(v0 + 296);
  v65 = *(_QWORD *)(v0 + 272);
  v64 = *(_QWORD *)(v0 + 280);
  v66 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CC95C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[24] = a4;
  v5[25] = a5;
  v6 = type metadata accessor for CRLServerSyncedPeerAddedItemEvent(0);
  v5[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100CC961C, 0, 0);
}

uint64_t sub_100CC961C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t result;

  v1 = v0[26];
  v2 = v0[24];
  v3 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, v2, v3);
  v4 = sub_100C92378();
  v6 = v5;
  v7 = v0[25];
  v8 = sub_1004B804C(&qword_10140E2C8);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v9 + 56) = &type metadata for CRLBoardAuxiliaryRealTimeChange;
  *(_QWORD *)(v9 + 64) = &off_10126E930;
  v10 = swift_allocObject(&unk_10129F8F8, 41, 7);
  *(_QWORD *)(v9 + 32) = v10;
  *(_BYTE *)(v10 + 16) = 8;
  *(_QWORD *)(v10 + 24) = v4;
  *(_QWORD *)(v10 + 32) = v6;
  *(_BYTE *)(v10 + 40) = 1;
  v11 = *(NSObject **)(v7 + OBJC_IVAR____TtC8Freeform17CRLBoardChangeSet_accessQueue);
  v12 = swift_allocObject(&unk_1012A0180, 32, 7);
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v9;
  v13 = swift_allocObject(&unk_1012A01A8, 32, 7);
  v0[11] = _NSConcreteStackBlock;
  *(_QWORD *)(v13 + 16) = sub_100CED88C;
  *(_QWORD *)(v13 + 24) = v12;
  v0[15] = sub_1005B72B0;
  v0[16] = v13;
  v0[12] = *(_QWORD *)"";
  v0[13] = sub_100618D24;
  v0[14] = &unk_1012A01C0;
  v14 = _Block_copy(v0 + 11);
  v15 = v0[16];
  sub_1004BE310(v4, v6);
  swift_retain(v7);
  swift_bridgeObjectRetain(v9);
  swift_retain(v13);
  swift_release(v15);
  dispatch_sync(v11, v14);
  _Block_release(v14);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v13, "", 89, 588, 26, 1);
  swift_release(v13);
  swift_release(v12);
  swift_bridgeObjectRelease();
  result = sub_1004BBBC8(v4, v6);
  if ((v7 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1004B84A4(v0[26], type metadata accessor for CRLServerSyncedPeerAddedItemEvent);
    swift_task_dealloc(v0[26]);
    return ((uint64_t (*)(void))v0[1])();
  }
  return result;
}

void sub_100CC9990(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  _BYTE v15[24];

  v3 = type metadata accessor for CRLBoard.RealTimeSessionInfo(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_1004B804C((uint64_t *)&unk_101405E90);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard)
        + OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo;
    swift_beginAccess(v10, v15, 0, 0);
    sub_1004CB7BC(v10, (uint64_t)v9, (uint64_t *)&unk_101405E90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3))
    {
      sub_1004CB800((uint64_t)v9, (uint64_t *)&unk_101405E90);
    }
    else
    {
      sub_1004B8460((uint64_t)v9, (uint64_t)v6, type metadata accessor for CRLBoard.RealTimeSessionInfo);
      v11 = a1;
      sub_1004CB800((uint64_t)v9, (uint64_t *)&unk_101405E90);
      v12 = *(_QWORD *)&v6[*(int *)(v3 + 24)];
      swift_retain(v12);
      sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoard.RealTimeSessionInfo);
      v13 = v11;
      sub_10063D2F4(a1);
      swift_release(v12);

    }
  }
}

void sub_100CC9B70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[20];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[4] = "\b";
  v6[5] = &unk_100F31E58;
  v6[6] = &unk_100F31E58;
  v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[9] = &unk_100F31E58;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[10] = *(_QWORD *)(v2 - 8) + 64;
    v6[11] = &unk_100F31E58;
    v6[12] = &unk_100F31E58;
    v6[13] = "\b";
    v6[14] = &unk_100F31E70;
    sub_10056ACC0(319);
    if (v5 <= 0x3F)
    {
      v6[15] = *(_QWORD *)(v4 - 8) + 64;
      v6[16] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[17] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[18] = "\b";
      v6[19] = "\b";
      swift_updateClassMetadata2(a1, 256, 20, v6, a1 + 80);
    }
  }
}

uint64_t sub_100CC9C6C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[24];

  v42 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v42);
  v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100EF5A10;
  v40 = *(_QWORD *)(v0 + 16);
  v41 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  v11 = *(char **)(v40 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v12 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v13 = *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v14 = v13 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v13 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v47, 0, 0);
  sub_1004B8460(v14, (uint64_t)v2, type metadata accessor for CRLBoardCRDTData);
  v15 = v11;
  swift_retain(v13);
  v16 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v16);
  sub_1004B84A4((uint64_t)v2, type metadata accessor for CRLBoardCRDTData);
  swift_release(v13);
  v17 = (uint64_t *)(*(_QWORD *)&v11[v12] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v18 = *v17;
  v19 = v17[1];
  swift_bridgeObjectRetain(v19);
  sub_10067AFD0((uint64_t)v5, v18, v19, (uint64_t)v8);

  v45 = UUID.uuidString.getter(v20);
  v46 = v21;
  swift_bridgeObjectRetain(v21);
  v22._countAndFlagsBits = 58;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23 = v45;
  v24 = v46;
  v25 = (uint64_t *)&v8[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
  v26 = *v25;
  v27 = (void *)v25[1];
  v45 = v23;
  v46 = v24;
  swift_bridgeObjectRetain(v24);
  v28._countAndFlagsBits = v26;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = v45;
  v30 = v46;
  sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v31 = sub_1004CFC2C();
  *(_QWORD *)(v10 + 64) = v31;
  *(_QWORD *)(v10 + 32) = v29;
  *(_QWORD *)(v10 + 40) = v30;
  v32 = *(char **)(v40 + v41);
  v33 = *(_QWORD *)&v32[OBJC_IVAR____TtC8Freeform8CRLBoard_data] + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v33, &v45, 0, 0);
  sub_1004B8460(v33, (uint64_t)v2, type metadata accessor for CRLBoardCRDTData);
  v34 = v32;
  v35 = sub_1004B804C(&qword_1013E1980);
  CRRegister.wrappedValue.getter(v35);
  v36 = v43;
  v37 = v44;
  sub_1004B84A4((uint64_t)v2, type metadata accessor for CRLBoardCRDTData);

  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v31;
  *(_QWORD *)(v10 + 72) = v36;
  *(_QWORD *)(v10 + 80) = v37;
  return String.init(format:_:)(0x294025203A402528, 0xE800000000000000, v10);
}

Swift::Int sub_100CC9F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  _QWORD v16[9];

  v1 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Hasher.init(_seed:)(v16, 0);
  v8 = *(char **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v9 = *(_QWORD *)&v8[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v10 = v9 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v9 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v15, 0, 0);
  sub_1004B8460(v10, (uint64_t)v3, type metadata accessor for CRLBoardCRDTData);
  v11 = v8;
  swift_retain(v9);
  v12 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v12);
  sub_1004B84A4((uint64_t)v3, type metadata accessor for CRLBoardCRDTData);

  swift_release(v9);
  v13 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v16, v4, v13);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return Hasher._finalize()();
}

Swift::Int sub_100CCA13C()
{
  return sub_100CC9F98();
}

uint64_t sub_100CCA15C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v18[24];

  v3 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v3);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(char **)(*(_QWORD *)(*(_QWORD *)v1 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v12 = v11 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v11 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v18, 0, 0);
  sub_1004B8460(v12, (uint64_t)v5, type metadata accessor for CRLBoardCRDTData);
  v13 = v10;
  swift_retain(v11);
  v14 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v14);
  sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardCRDTData);

  swift_release(v11);
  v15 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int sub_100CCA2F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];
  _QWORD v18[9];

  v3 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Hasher.init(_seed:)(v18, a1);
  v10 = *(char **)(*(_QWORD *)(*(_QWORD *)v1 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v12 = v11 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v11 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v17, 0, 0);
  sub_1004B8460(v12, (uint64_t)v5, type metadata accessor for CRLBoardCRDTData);
  v13 = v10;
  swift_retain(v11);
  v14 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v14);
  sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardCRDTData);

  swift_release(v11);
  v15 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v18, v6, v15);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return Hasher._finalize()();
}

uint64_t sub_100CCA4A0()
{
  return sub_100CC9C6C();
}

uint64_t sub_100CCA4C0(uint64_t *a1, uint64_t *a2)
{
  return sub_100CE1748(*a1, *a2);
}

void sub_100CCA4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  __n128 v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[5];
  __int128 v37;
  __int128 v38;
  _BYTE v39[24];

  v5 = sub_1004B804C(&qword_1013F20B0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLZoneSyncResultScenarios(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v39, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (!Strong)
    return;
  v13 = (char *)Strong;
  v14 = Notification.userInfo.getter(Strong);
  if (!v14)
  {
    v37 = 0u;
    v38 = 0u;
LABEL_13:

    sub_1004CB800((uint64_t)&v37, &qword_1013E0230);
    return;
  }
  v15 = v14;
  v35[0] = 0xD000000000000026;
  v35[1] = 0x8000000100FDF0B0;
  AnyHashable.init<A>(_:)(v35, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v15 + 16) && (v16 = sub_1008432BC((uint64_t)v36), (v17 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  swift_bridgeObjectRelease(v15);
  sub_1004B89A4((uint64_t)v36);
  if (!*((_QWORD *)&v38 + 1))
    goto LABEL_13;
  v18 = sub_1004B804C(&qword_1013F9CD8);
  if ((swift_dynamicCast(v36, &v37, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
  {
    v19 = v36[0];
    if (*(_QWORD *)(v36[0] + 16) && (v20 = sub_100843264(a3), (v21 & 1) != 0))
    {
      sub_1004B8460(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v9 + 72) * v20, (uint64_t)v7, type metadata accessor for CRLZoneSyncResultScenarios);
      v22 = 0;
    }
    else
    {
      v22 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v22, 1, v8);
    v23 = swift_bridgeObjectRelease(v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v9 + 48))(v7, 1, v8, v23) == 1)
    {

      sub_1004CB800((uint64_t)v7, &qword_1013F20B0);
      return;
    }
    sub_1004B84E0((uint64_t)v7, (uint64_t)v11, type metadata accessor for CRLZoneSyncResultScenarios);
    if (v11[2] == 1)
    {
      v24 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v25 = objc_msgSend(v24, "delegate");

      if (!v25)
      {
        __break(1u);
        return;
      }
      v26 = type metadata accessor for CRLiOSAppDelegate();
      swift_dynamicCastClassUnconditional(v25, v26, 0, 0, 0);
      sub_10060A6B8();
      v28 = v27;
      swift_unknownObjectRelease(v25);
      if (v28)
      {
        sub_10090E6E0();

      }
    }
    v29 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_databaseSyncObserver;
    v30 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_databaseSyncObserver];
    if (v30)
    {
      v31 = (void *)objc_opt_self(NSNotificationCenter);
      swift_unknownObjectRetain(v30);
      v32 = objc_msgSend(v31, "defaultCenter");
      objc_msgSend(v32, "removeObserver:", v30);
      swift_unknownObjectRelease(v30);

      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLZoneSyncResultScenarios);
      v33 = *(_QWORD *)&v13[v29];
      *(_QWORD *)&v13[v29] = 0;

      swift_unknownObjectRelease(v33);
      return;
    }
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLZoneSyncResultScenarios);
  }

}

double sub_100CCA858()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  id v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v33[72];
  char v34[24];
  char v35[72];
  _BYTE v36[32];

  v1 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v1);
  v3 = &v33[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pauseSnapshotUpdateCount;
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pauseSnapshotUpdateCount];
  v6 = v5 - 1;
  if (__OFSUB__(v5, 1))
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_1013DD748, sub_100A023E8);
    goto LABEL_9;
  }
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pauseSnapshotUpdateCount] = v6;
  if (v6 < 0)
  {
    v16 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v16, v33);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    *(_QWORD *)(inited + 56) = &type metadata for Int;
    *(_QWORD *)(inited + 64) = &protocol witness table for Int;
    *(_QWORD *)(inited + 32) = v6;
    sub_100757E04(&_mh_execute_header, (uint64_t)"resumeSnapshotUpdates()", 23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 2909, "Invalid pause count: %d", 23, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"resumeSnapshotUpdates()", 23, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 2909, (uint64_t)"Invalid pause count: %d", 23, 2u);
    swift_setDeallocating(inited);
    v18 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v18);
    *(_QWORD *)&v0[v4] = 0;
  }
  else if (v5 != 1)
  {
    if (qword_1013DD748 != -1)
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v36, 0, 0);
    v7 = (void *)static OS_os_log.crlBoardLibrary;
    v8 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v9 = swift_initStackObject(v8, v35);
    *(_OWORD *)(v9 + 16) = xmmword_100EF5E40;
    v10 = *(_QWORD *)&v0[v4];
    *(_QWORD *)(v9 + 56) = &type metadata for Int;
    *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v9 + 32) = v10;
    v11 = v7;
    v13 = static os_log_type_t.default.getter(v12);
    sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v13, "Snapshot update pause counter decremented to: %d", 48, 2, v9);
    swift_setDeallocating(v9);
    v14 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v9 + 32, 1, v14);

    return result;
  }
  if (qword_1013DD748 != -1)
    goto LABEL_14;
LABEL_9:
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v36, 0, 0);
  v19 = (id)static OS_os_log.crlBoardLibrary;
  v21 = static os_log_type_t.default.getter(v20);
  sub_100A06EBC((uint64_t)v19, &_mh_execute_header, v21, "Resuming snapshot updates", 25, 2, (uint64_t)_swiftEmptyArrayStorage);

  v22 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pendingUpdateOptions;
  v23 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pendingUpdateOptions];
  v24 = &v0[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pendingChangedBoards];
  *(_QWORD *)&result = swift_beginAccess(&v0[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_pendingChangedBoards], v34, 1, 0).n128_u64[0];
  v25 = *(_QWORD *)v24;
  if (v23 || *(_QWORD *)(v25 + 16))
  {
    *(_QWORD *)&v0[v22] = 0;
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v26);
    v27 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v3, 1, 1, v27);
    type metadata accessor for MainActor(0);
    v28 = v0;
    v29 = static MainActor.shared.getter(v28);
    v30 = (_QWORD *)swift_allocObject(&unk_10129F688, 56, 7);
    v30[2] = v29;
    v30[3] = &protocol witness table for MainActor;
    v30[4] = v28;
    v30[5] = v23;
    v30[6] = v25;
    v31 = sub_100521B98((uint64_t)v3, (uint64_t)&unk_10140DF40, (uint64_t)v30);
    *(_QWORD *)&result = swift_release(v31).n128_u64[0];
  }
  return result;
}

uint64_t sub_100CCAC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  _QWORD *v10;

  v9 = type metadata accessor for MainActor(0);
  v6[2] = v9;
  v6[3] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10140DF14);
  v6[4] = v10;
  *v10 = v6;
  v10[1] = sub_100CCACBC;
  return sub_100CB3574(a5, a6);
}

uint64_t sub_100CCACBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CCAD2C, v2, v3);
}

void sub_100CCAD2C()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  __n128 v4;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v2 = objc_msgSend(v1, "delegate");

  if (v2)
  {
    v3 = type metadata accessor for CRLiOSAppDelegate();
    swift_dynamicCastClassUnconditional(v2, v3, 0, 0, 0);
    sub_100608978();
    v4 = swift_unknownObjectRelease(v2);
    (*(void (**)(__n128))(v0 + 8))(v4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100CCADD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;

  v6[2] = a4;
  v8 = type metadata accessor for MainActor(0);
  v6[3] = v8;
  v6[4] = static MainActor.shared.getter(v8);
  v9 = (_QWORD *)swift_task_alloc(dword_10140DF34);
  v6[5] = v9;
  *v9 = v6;
  v9[1] = sub_100CCAE4C;
  return sub_100CEA898(a6);
}

uint64_t sub_100CCAE4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v4;
  return swift_task_switch(sub_100CCAEC0, v3, v4);
}

void sub_100CCAEC0()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_snapshotUpdateInterval);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 <= -1.0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v1 >= 1.84467441e19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (is_mul_ok((unint64_t)v1, 0x3B9ACA00uLL))
  {
    v2 = 1000000000 * (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 64) = v3;
    *v3 = v0;
    v3[1] = sub_100CCAF74;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_100CCAF74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1006D8AF8;
  else
    v4 = sub_100CCAFD4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100CCAFD4()
{
  uint64_t v0;
  double v1;

  swift_release(*(_QWORD *)(v0 + 32));
  v1 = sub_100CCA858();
  return (*(uint64_t (**)(double))(v0 + 8))(v1);
}

uint64_t sub_100CCB010(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2[27] = a1;
  v2[28] = v1;
  v3 = sub_1004B804C(&qword_1013F5478);
  v2[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
  v2[30] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[31] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v6);
  v2[33] = swift_task_alloc(v6);
  v7 = sub_1004B804C(&qword_10140DF90);
  v2[34] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[35] = swift_task_alloc(v8);
  v2[36] = swift_task_alloc(v8);
  v2[37] = swift_task_alloc(v8);
  v2[38] = swift_task_alloc(v8);
  v9 = sub_1004B804C(&qword_1013E8798);
  v2[39] = v9;
  v2[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C((uint64_t *)&unk_1013E87A0);
  v2[41] = v10;
  v2[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v2[43] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[44] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[45] = swift_task_alloc(v13);
  v2[46] = swift_task_alloc(v13);
  v2[47] = swift_task_alloc(v13);
  v2[48] = swift_task_alloc(v13);
  v2[49] = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CRLBoardLibraryViewModel.Folder(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[50] = swift_task_alloc(v14);
  v2[51] = swift_task_alloc(v14);
  v2[52] = swift_task_alloc(v14);
  v2[53] = swift_task_alloc(v14);
  v15 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v2[54] = v15;
  v2[55] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CRLBoardCRDTData(0);
  v2[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v2[57] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[58] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[59] = swift_task_alloc(v19);
  v2[60] = swift_task_alloc(v19);
  v2[61] = swift_task_alloc(v19);
  v20 = type metadata accessor for CRLBoardIdentifier(0);
  v2[62] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v2[63] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[64] = swift_task_alloc(v22);
  v2[65] = swift_task_alloc(v22);
  v2[66] = swift_task_alloc(v22);
  v2[67] = swift_task_alloc(v22);
  v2[68] = swift_task_alloc(v22);
  v2[69] = swift_task_alloc(v22);
  v23 = type metadata accessor for MainActor(0);
  v2[70] = static MainActor.shared.getter(v23);
  v24 = dispatch thunk of Actor.unownedExecutor.getter(v23, &protocol witness table for MainActor);
  v2[71] = v24;
  v2[72] = v25;
  return swift_task_switch(sub_100CCB310, v24, v25);
}

uint64_t sub_100CCB310()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 584) = *(_QWORD *)(*(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CCB338, 0, 0);
}

uint64_t sub_100CCB338()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[73];
  v2 = swift_task_alloc(32);
  v0[74] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[75] = v3;
  v4 = sub_1004B804C(&qword_1013E8898);
  *v3 = v0;
  v3[1] = sub_100CCB3E8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 26, 0, 0, 0xD00000000000001DLL, 0x8000000101009530, sub_100CEBBB8, v2, v4);
}

uint64_t sub_100CCB3E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 600);
  *(_QWORD *)(*v1 + 608) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CCB5C8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 592));
    v4 = sub_100CCB454;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CCB454()
{
  _QWORD *v0;

  v0[77] = v0[26];
  return swift_task_switch(sub_100CCB470, v0[71], v0[72]);
}

uint64_t sub_100CCB470()
{
  uint64_t v0;

  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 616));
  return swift_task_switch(sub_100CCB4AC, 0, 0);
}

uint64_t sub_100CCB4AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[73];
  v2 = swift_task_alloc(32);
  v0[78] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[79] = v3;
  v4 = sub_1004B804C(&qword_1013E4980);
  *v3 = v0;
  v3[1] = sub_100CCB55C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 22, 0, 0, 0xD000000000000022, 0x8000000101009580, sub_100CEBBC0, v2, v4);
}

uint64_t sub_100CCB55C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 632);
  *(_QWORD *)(*v1 + 640) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CCD204;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 624));
    v4 = sub_100CCB91C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CCB5C8()
{
  _QWORD *v0;

  swift_task_dealloc(v0[74]);
  return swift_task_switch(sub_100CCB604, v0[71], v0[72]);
}

uint64_t sub_100CCB604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 608);
  swift_release(*(_QWORD *)(v0 + 560));
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v2 = *(_QWORD *)(v0 + 608);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 88, 0, 0);
  v3 = (void *)static OS_os_log.crlBoardLibrary;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v4, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v0 + 200) = v1;
  v6 = v3;
  swift_errorRetain(v1);
  v7 = sub_1004B804C(&qword_1013E0210);
  v8 = String.init<A>(describing:)(v0 + 200, v7);
  v10 = v9;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v11 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v10;
  v12 = static os_log_type_t.error.getter(v11);
  sub_100A06EBC((uint64_t)v6, &_mh_execute_header, v12, "Error updating snapshot from store: %@", 38, 2, inited);
  swift_setDeallocating(inited);
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v13);

  v14 = swift_errorRelease(v1);
  if (!v2)
    swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(v0 + 544);
  v16 = *(_QWORD *)(v0 + 536);
  v17 = *(_QWORD *)(v0 + 528);
  v18 = *(_QWORD *)(v0 + 520);
  v19 = *(_QWORD *)(v0 + 512);
  v21 = *(_QWORD *)(v0 + 480);
  v20 = *(_QWORD *)(v0 + 488);
  v22 = *(_QWORD *)(v0 + 472);
  v25 = *(_QWORD *)(v0 + 448);
  v26 = *(_QWORD *)(v0 + 440);
  v27 = *(_QWORD *)(v0 + 424);
  v28 = *(_QWORD *)(v0 + 416);
  v29 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 400);
  v31 = *(_QWORD *)(v0 + 392);
  v32 = *(_QWORD *)(v0 + 384);
  v33 = *(_QWORD *)(v0 + 376);
  v34 = *(_QWORD *)(v0 + 368);
  v35 = *(_QWORD *)(v0 + 360);
  v36 = *(_QWORD *)(v0 + 336);
  v37 = *(_QWORD *)(v0 + 320);
  v38 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 296);
  v40 = *(_QWORD *)(v0 + 288);
  v41 = *(_QWORD *)(v0 + 280);
  v42 = *(_QWORD *)(v0 + 264);
  v43 = *(_QWORD *)(v0 + 256);
  v44 = *(_QWORD *)(v0 + 232);
  v23 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  *(_QWORD *)(v23 + 32) = 0;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CCB91C()
{
  _QWORD *v0;

  v0[81] = v0[22];
  return swift_task_switch(sub_100CCB938, v0[71], v0[72]);
}

void sub_100CCB938()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  char v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  objc_class *v76;
  char *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  int EnumCaseMultiPayload;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t (*v130)(uint64_t);
  uint64_t v131;
  uint64_t v132;
  Class isa;
  _BOOL8 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL8 *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int64_t v154;
  unint64_t v155;
  int64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  _BOOL8 v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  _BOOL8 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  id v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  int64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  NSString *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  NSString v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void **v244;
  unint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  void *v253;
  uint64_t v254;
  int64_t v255;
  uint64_t v256;
  _QWORD *v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 616);
  swift_release(*(_QWORD *)(v0 + 560));
  swift_bridgeObjectRetain(v2);
  v3 = sub_1008D6464((uint64_t)_swiftEmptyArrayStorage);
  v4 = *(_QWORD *)(v2 + 16);
  v261 = (_QWORD *)v1;
  if (!v4)
    goto LABEL_31;
  v236 = v1 + 112;
  v5 = *(_QWORD *)(v1 + 616);
  v228 = *(_QWORD *)(v1 + 504);
  v256 = *(_QWORD *)(v1 + 464);
  v232 = *(_QWORD *)(v1 + 432);
  v230 = CKCurrentUserDefaultName;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v3);
  v6 = (void **)(v5 + 40);
  v224 = v3;
  while (1)
  {
    v244 = v6;
    v248 = v4;
    v11 = *(_QWORD *)(v1 + 480);
    v10 = *(_QWORD *)(v1 + 488);
    v12 = *(_QWORD *)(v1 + 448);
    v13 = *(_QWORD *)(v1 + 456);
    v15 = (uint64_t)*(v6 - 1);
    v14 = *v6;
    v16 = v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v236, 0, 0);
    sub_1004B8460(v16, v12, type metadata accessor for CRLBoardCRDTData);
    v252 = v14;
    v17 = v14;
    swift_bridgeObjectRetain(v3);
    swift_retain(v15);
    v18 = sub_1004B804C(&qword_1013E1A80);
    CRRegister.wrappedValue.getter(v18);
    sub_1004B84A4(v12, type metadata accessor for CRLBoardCRDTData);
    v240 = v15;
    v19 = v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName;
    v21 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v20 = *(_QWORD *)(v19 + 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 16))(v11, v10, v13);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v24 = v21 == v22 && v20 == v23;
    if (v24
      || (v25 = v23,
          v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v20, v22, v23, 0),
          swift_bridgeObjectRetain(v20),
          v27 = swift_bridgeObjectRelease(v25),
          (v26 & 1) != 0))
    {
      v28 = v3;
      v27 = swift_bridgeObjectRelease(v20);
      v21 = 0;
      v20 = 0xE000000000000000;
    }
    else
    {
      v28 = v3;
    }
    v29 = *(_QWORD *)(v1 + 552);
    v30 = *(_QWORD *)(v1 + 544);
    v32 = *(_QWORD *)(v1 + 480);
    v31 = *(_QWORD *)(v1 + 488);
    v33 = v261[57];
    v34 = v261[55];
    (*(void (**)(uint64_t, uint64_t, __n128))(v256 + 8))(v31, v33, v27);
    v35 = v33;
    v1 = (unint64_t)v261;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 32))(v34, v32, v35);
    v36 = (_QWORD *)(v34 + *(int *)(v232 + 20));
    *v36 = v21;
    v36[1] = v20;
    sub_1004B84E0(v34, v30, type metadata accessor for CRLBoardIdentifierStorage);
    sub_1004B84E0(v30, v29, type metadata accessor for CRLBoardIdentifier);
    v37 = v261[69];
    if (v252)
      break;
    swift_bridgeObjectRetain(v28);
    v49 = sub_100843264(v37);
    v51 = v50;
    swift_bridgeObjectRelease(v28);
    if ((v51 & 1) != 0)
    {
      v264 = (_QWORD *)v28;
      v46 = (_QWORD *)v28;
      if (!swift_isUniquelyReferenced_nonNull_native(v28))
      {
        sub_10082F518();
        v46 = v264;
      }
      sub_1004B84A4(v46[6] + *(_QWORD *)(v228 + 72) * v49, type metadata accessor for CRLBoardIdentifier);
      v52 = *(void **)(v46[7] + 8 * v49);
      sub_10051B744(v49, (uint64_t)v46);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      v52 = 0;
      v46 = (_QWORD *)v28;
    }
    sub_1004B84A4(v261[69], type metadata accessor for CRLBoardIdentifier);

    swift_release(v240);
    v9 = v28;
LABEL_5:
    swift_bridgeObjectRelease(v9);
    v3 = (unint64_t)v46;
    v6 = v244 + 2;
    v4 = v248 - 1;
    if (v248 == 1)
    {
      swift_bridgeObjectRelease(v261[77]);
      swift_bridgeObjectRelease(v224);
LABEL_31:
      v57 = *(_QWORD *)(v1 + 640);
      v58 = *(_QWORD *)(v1 + 616);
      v59 = *(_QWORD *)(v1 + 224);
      swift_bridgeObjectRelease(v58);
      *(_QWORD *)(v1 + 184) = sub_1008D6478((uint64_t)_swiftEmptyArrayStorage);
      v60 = swift_task_alloc(32);
      *(_QWORD *)(v60 + 16) = v59;
      *(_QWORD *)(v60 + 24) = v1 + 184;
      v61 = sub_100CE29C8(v58, (void (*)(__n128))sub_100CEBBC8, v60);
      swift_bridgeObjectRelease(v58);
      swift_task_dealloc(v60);
      v264 = v61;
      swift_bridgeObjectRetain(v61);
      sub_100CD9A28(&v264);
      if (v57)
      {
        swift_release(v264);
        return;
      }
      v62 = *(_QWORD *)(v1 + 424);
      v63 = *(_QWORD *)(v1 + 224);
      swift_bridgeObjectRelease(v61);
      v64 = v264;
      v65 = *(_QWORD *)(v63 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
      v66 = sub_1004B804C(&qword_1013E1790);
      v212 = *(_QWORD *)(v66 - 8);
      v230 = (NSString *)v66;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v212 + 56))(v62, 1, 5);
      v67 = swift_task_alloc(32);
      *(_QWORD *)(v67 + 16) = v62;
      swift_bridgeObjectRetain(v65);
      sub_1007C2808(1, (uint64_t (*)(id))sub_100CED894, v67, v65);
      v69 = v68;
      swift_bridgeObjectRelease(v65);
      swift_task_dealloc(v67);
      sub_1004B84A4(v62, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      v210 = v69;
      if (v69)
      {
        v70 = v64[2];
        v29 = (uint64_t)&OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
        v209 = v3;
        if (v70)
        {
          v71 = *(_QWORD *)(v1 + 352);
          v264 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v70);
          v257 = v64;
          v72 = (uint64_t)v64
              + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
          v73 = *(_QWORD *)(v71 + 72);
          do
          {
            v74 = *(_QWORD *)(v1 + 384);
            v75 = *(_QWORD *)(v1 + 392);
            sub_1004B8460(v72, v75, type metadata accessor for CRLBoardLibraryViewModel.Item);
            sub_1004B8460(v75, v74, type metadata accessor for CRLBoardLibraryViewModel.Item);
            v76 = (objc_class *)type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
            v77 = (char *)objc_allocWithZone(v76);
            *(_QWORD *)&v77[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
            sub_1004B8460(v74, (uint64_t)&v77[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
            *(_QWORD *)(v1 + 160) = v77;
            *(_QWORD *)(v1 + 168) = v76;
            v78 = objc_msgSendSuper2((objc_super *)(v1 + 160), "init");
            sub_1004B84A4(v74, type metadata accessor for CRLBoardLibraryViewModel.Item);
            v79 = sub_1004B84A4(v75, type metadata accessor for CRLBoardLibraryViewModel.Item);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            v80 = v264[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v80);
            v81 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v78);
            specialized ContiguousArray._endMutation()(v81);
            v72 += v73;
            --v70;
          }
          while (v70);
          isUniquelyReferenced_nonNull_native = (uint64_t)v264;
          v82 = swift_release(v257).n128_u64[0];
          v29 = (uint64_t)&OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
        }
        else
        {
          v82 = swift_release(v64).n128_u64[0];
          isUniquelyReferenced_nonNull_native = (uint64_t)_swiftEmptyArrayStorage;
        }
        v84 = objc_msgSend(v210, "children", *(double *)&v82);
        v85 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
        v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v84, v85);

        if ((unint64_t)v28 >> 62)
          goto LABEL_147;
        v233 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
        goto LABEL_43;
      }
      v262 = *(_QWORD *)(v1 + 648);
      v83 = *(_QWORD *)(v1 + 616);
      sub_100757E04(&_mh_execute_header, (uint64_t)"updateAllBoardsAndCKShare()", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 3247, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateAllBoardsAndCKShare()", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 3247, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(v3);
      swift_release(v64);
      swift_bridgeObjectRelease(v262);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 184));
      v197 = 0;
      v198 = 0;
      v229 = 0;
      v209 = 0;
      v199 = 0;
      goto LABEL_98;
    }
  }
  v38 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
  v264 = (_QWORD *)v28;
  v41 = sub_100843264(v37);
  v42 = *(_QWORD *)(v28 + 16);
  v43 = (v40 & 1) == 0;
  v44 = v42 + v43;
  if (!__OFADD__(v42, v43))
  {
    v29 = v40;
    if (*(_QWORD *)(v28 + 24) >= v44)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v46 = (_QWORD *)v28;
      }
      else
      {
        sub_10082F518();
        v46 = v264;
      }
    }
    else
    {
      v45 = v261[69];
      sub_10081A4D4(v44, isUniquelyReferenced_nonNull_native);
      v46 = v264;
      v47 = sub_100843264(v45);
      if ((v29 & 1) != (v48 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v261[62]);
        return;
      }
      v41 = v47;
    }
    if ((v29 & 1) != 0)
    {
      v7 = v46[7];

      *(_QWORD *)(v7 + 8 * v41) = v38;
    }
    else
    {
      v53 = v261[69];
      v46[(v41 >> 6) + 8] |= 1 << v41;
      sub_1004B8460(v53, v46[6] + *(_QWORD *)(v228 + 72) * v41, type metadata accessor for CRLBoardIdentifier);
      *(_QWORD *)(v46[7] + 8 * v41) = v38;
      v54 = v46[2];
      v55 = __OFADD__(v54, 1);
      v56 = v54 + 1;
      if (v55)
        goto LABEL_138;
      v46[2] = v56;
    }
    v8 = v261[69];
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1004B84A4(v8, type metadata accessor for CRLBoardIdentifier);
    swift_release(v240);

    v9 = v28;
    goto LABEL_5;
  }
  __break(1u);
LABEL_138:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_140:
    __break(1u);
    while (2)
    {
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      if (v28 < 0)
        v194 = v28;
      else
        v194 = v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
      v233 = _CocoaArrayWrapper.endIndex.getter(v194);
LABEL_43:
      v196 = v1 + 136;
      if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
      {
        v241 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
        if (isUniquelyReferenced_nonNull_native < 0)
          v195 = isUniquelyReferenced_nonNull_native;
        else
          v195 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
        v249 = _CocoaArrayWrapper.endIndex.getter(v195);
        swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
      }
      else
      {
        v241 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
        v249 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      v86 = 0;
      v1 = 0;
      v200 = v261[54];
      v201 = v28;
      v218 = v28 & 0xFFFFFFFFFFFFFF8;
      v221 = v28 & 0xC000000000000001;
      v216 = v28 + 32;
      v237 = v261[41];
      v245 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      v207 = v261[39];
      v229 = isUniquelyReferenced_nonNull_native;
      v87 = v233;
LABEL_47:
      if (v1 == v87)
      {
        v88 = 0;
        v89 = 0;
        v1 = v87;
        if (v249 == v86)
          goto LABEL_93;
        goto LABEL_56;
      }
      if (v221)
      {
        v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v201);
      }
      else
      {
        if ((v1 & 0x8000000000000000) != 0)
          continue;
        if (v1 >= *(_QWORD *)(v218 + 16))
          goto LABEL_142;
        v90 = *(id *)(v216 + 8 * v1);
      }
      break;
    }
    v88 = v90;
    v55 = __OFADD__(v1++, 1);
    if (v55)
      goto LABEL_143;
    if (v249 != v86)
    {
LABEL_56:
      if (v245)
      {
        v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v86, isUniquelyReferenced_nonNull_native);
      }
      else
      {
        if (v86 >= *(_QWORD *)(v241 + 16))
          continue;
        v91 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v86 + 32);
      }
      v89 = v91;
      if (__OFADD__(v86, 1))
        goto LABEL_140;
      if (!v88)
        goto LABEL_93;
      if (!v91)
      {
        v1 = (unint64_t)v261;
        goto LABEL_87;
      }
      v28 = v261[42];
      v92 = v261[43];
      v253 = v91;
      v258 = v88;
      v93 = (uint64_t)v88 + *(_QWORD *)v29;
      v94 = (uint64_t)v89 + *(_QWORD *)v29;
      v95 = (unsigned __int8 *)(v28 + *(int *)(v237 + 48));
      sub_1004B8460(v93, v28, type metadata accessor for CRLBoardLibraryViewModel.Item);
      sub_1004B8460(v94, (uint64_t)v95, type metadata accessor for CRLBoardLibraryViewModel.Item);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v92);
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v97 = v261;
          v98 = v261[43];
          sub_1004B8460(v261[42], v261[46], type metadata accessor for CRLBoardLibraryViewModel.Item);
          v99 = swift_getEnumCaseMultiPayload(v95, v98);
          v100 = v261[46];
          if (v99 == 1)
          {
            v102 = v261[51];
            v101 = v261[52];
            v103 = v261[40];
            sub_1004B84E0(v100, v101, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            sub_1004B84E0((uint64_t)v95, v102, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v104 = v103 + *(int *)(v207 + 48);
            sub_1004B8460(v101, v103, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            sub_1004B8460(v102, v104, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v105 = (char *)&loc_100CCC470
                 + dword_100CCD1EC[(*(unsigned int (**)(uint64_t, uint64_t, NSString *))(v212 + 48))(v103, 5, v230)];
            __asm { BR              X9 }
          }
          v130 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
LABEL_90:
          sub_1004B84A4(v100, v130);
LABEL_91:
          sub_1004CB800(v97[42], (uint64_t *)&unk_1013E87A0);

          swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease_n(v201, 2);
          v1 = (unint64_t)v97;
LABEL_96:
          v199 = *(_QWORD *)(v1 + 648);
          v132 = *(_QWORD *)(v1 + 616);
          isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v210, "setChildren:", isa);

          swift_bridgeObjectRelease(v132);
          v198 = *(_QWORD *)(v1 + 184);
          v134 = 1;
LABEL_97:
          v197 = v134;
LABEL_98:
          v135 = *(_QWORD *)(v1 + 552);
          v136 = *(_QWORD *)(v1 + 544);
          v137 = *(_QWORD *)(v1 + 536);
          v138 = *(_QWORD *)(v1 + 528);
          v139 = v1;
          v140 = *(_QWORD *)(v1 + 520);
          v141 = *(_QWORD *)(v139 + 512);
          v142 = *(_QWORD *)(v139 + 480);
          v143 = *(_QWORD *)(v139 + 488);
          v144 = *(_QWORD *)(v139 + 472);
          v202 = *(_QWORD *)(v139 + 448);
          v204 = *(_QWORD *)(v139 + 440);
          v206 = *(_QWORD *)(v139 + 424);
          v208 = *(_QWORD *)(v139 + 416);
          v211 = *(id *)(v139 + 408);
          v213 = *(_QWORD *)(v139 + 400);
          v215 = *(_QWORD *)(v139 + 392);
          v217 = *(_QWORD *)(v139 + 384);
          v219 = *(_QWORD *)(v139 + 376);
          v222 = *(_QWORD *)(v139 + 368);
          v226 = *(_QWORD *)(v139 + 360);
          v231 = *(_QWORD *)(v139 + 336);
          v234 = *(_QWORD *)(v139 + 320);
          v238 = *(_QWORD *)(v139 + 304);
          v242 = *(_QWORD *)(v139 + 296);
          v246 = *(_QWORD *)(v139 + 288);
          v250 = *(_QWORD *)(v139 + 280);
          v254 = *(_QWORD *)(v139 + 264);
          v259 = *(_QWORD *)(v139 + 256);
          v263 = *(_QWORD *)(v139 + 232);
          v145 = *(_BOOL8 **)(v139 + 216);
          swift_task_dealloc(v135);
          swift_task_dealloc(v136);
          swift_task_dealloc(v137);
          swift_task_dealloc(v138);
          swift_task_dealloc(v140);
          swift_task_dealloc(v141);
          swift_task_dealloc(v143);
          swift_task_dealloc(v142);
          swift_task_dealloc(v144);
          swift_task_dealloc(v202);
          swift_task_dealloc(v204);
          swift_task_dealloc(v206);
          swift_task_dealloc(v208);
          swift_task_dealloc(v211);
          swift_task_dealloc(v213);
          swift_task_dealloc(v215);
          swift_task_dealloc(v217);
          swift_task_dealloc(v219);
          swift_task_dealloc(v222);
          swift_task_dealloc(v226);
          swift_task_dealloc(v231);
          swift_task_dealloc(v234);
          swift_task_dealloc(v238);
          swift_task_dealloc(v242);
          swift_task_dealloc(v246);
          swift_task_dealloc(v250);
          swift_task_dealloc(v254);
          swift_task_dealloc(v259);
          swift_task_dealloc(v263);
          *v145 = v197;
          v145[1] = v229;
          v145[2] = v209;
          v145[3] = v198;
          v145[4] = v199;
          (*(void (**)(void))(v139 + 8))();
          return;
        }
        v97 = v261;
        v108 = v261[45];
        v109 = v261[43];
        sub_1004B8460(v261[42], v108, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v110 = *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48);
        v111 = v108 + v110;
        v112 = *(_QWORD *)(v108 + v110);
        v225 = *(_QWORD *)(v111 + 8);
        if (swift_getEnumCaseMultiPayload(v95, v109) != 2)
        {
          v131 = v261[45];
          swift_bridgeObjectRelease(v225);
          v130 = type metadata accessor for CRLBoardIdentifier;
          v100 = v131;
          goto LABEL_90;
        }
        v205 = v112;
        v113 = v261[67];
        v114 = v261[66];
        v115 = v261[65];
        v116 = v261[64];
        v203 = *(_QWORD *)&v95[v110];
        v214 = *(_QWORD *)&v95[v110 + 8];
        sub_1004B84E0(v261[45], v113, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84E0((uint64_t)v95, v114, type metadata accessor for CRLBoardIdentifier);
        v117 = static UUID.== infix(_:_:)(v113);
        sub_1004B8460(v113, v115, type metadata accessor for CRLBoardIdentifier);
        sub_1004B8460(v114, v116, type metadata accessor for CRLBoardIdentifier);
        v118 = v261[65];
        v119 = v261[64];
        if ((v117 & 1) != 0)
        {
          v120 = *(int *)(v200 + 20);
          v121 = *(_QWORD *)(v118 + v120);
          v122 = *(_QWORD *)(v118 + v120 + 8);
          v123 = (_QWORD *)(v119 + v120);
          v124 = v123[1];
          v87 = v233;
          if (v121 == *v123 && v122 == v124)
          {
            sub_1004B84A4(v261[64], type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4(v118, type metadata accessor for CRLBoardIdentifier);
            goto LABEL_75;
          }
          v125 = _stringCompareWithSmolCheck(_:_:expecting:)(v121, v122, *v123, v124, 0);
          sub_1004B84A4(v119, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v118, type metadata accessor for CRLBoardIdentifier);
          if ((v125 & 1) != 0)
          {
LABEL_75:
            v126 = v225;
            v127 = v214;
            if (v205 == v203 && v225 == v214)
            {
              v107 = 1;
              v127 = v225;
            }
            else
            {
              v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v205, v225, v203, v214, 0);
              v126 = v225;
              v107 = v128;
            }
LABEL_81:
            v97 = v261;
            v129 = v261[67];
            v28 = v261[66];
            swift_bridgeObjectRelease(v126);
            swift_bridgeObjectRelease(v127);
            sub_1004B84A4(v28, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4(v129, type metadata accessor for CRLBoardIdentifier);
            v29 = (uint64_t)&OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
            isUniquelyReferenced_nonNull_native = v229;
LABEL_46:
            sub_1004B84A4(v97[42], type metadata accessor for CRLBoardLibraryViewModel.Item);

            ++v86;
            if (!v107)
            {
              swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
              swift_bridgeObjectRelease_n(v201, 2);
LABEL_95:
              v1 = (unint64_t)v261;
              goto LABEL_96;
            }
            goto LABEL_47;
          }
          v107 = 0;
        }
        else
        {
          sub_1004B84A4(v261[64], type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v118, type metadata accessor for CRLBoardIdentifier);
          v107 = 0;
          v87 = v233;
        }
        v126 = v225;
        v127 = v214;
        goto LABEL_81;
      }
      v97 = v261;
      v106 = v261[43];
      sub_1004B8460(v261[42], v261[47], type metadata accessor for CRLBoardLibraryViewModel.Item);
      if (swift_getEnumCaseMultiPayload(v95, v106))
        goto LABEL_91;
      v107 = *(unsigned __int8 *)v261[47] == *v95;
      goto LABEL_46;
    }
    break;
  }
  v1 = (unint64_t)v261;
  if (v90)
  {
LABEL_87:
    swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease_n(v201, 2);

    goto LABEL_96;
  }
  v89 = 0;
LABEL_93:
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease_n(v201, 2);
  if (v89)
  {

    goto LABEL_95;
  }
  v1 = (unint64_t)v261;
  v230 = (NSString *)v261[63];
  v227 = v261[34];
  v243 = v261[31];
  v146 = (_QWORD *)(v261[28] + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata);
  swift_beginAccess(v146, v196, 0, 0);
  v147 = *v146;
  swift_bridgeObjectRetain(*v146);
  v247 = (_QWORD *)sub_1008D6478((uint64_t)_swiftEmptyArrayStorage);
  v220 = v147 + 64;
  v148 = -1;
  v149 = -1 << *(_BYTE *)(v147 + 32);
  if (-v149 < 64)
    v148 = ~(-1 << -(char)v149);
  v150 = v148 & *(_QWORD *)(v147 + 64);
  v223 = (unint64_t)(63 - v149) >> 6;
  v235 = v147;
  swift_bridgeObjectRetain(v147);
  v151 = 0;
  while (2)
  {
    if (v150)
    {
      v251 = (v150 - 1) & v150;
      v255 = v151;
      v153 = __clz(__rbit64(v150)) | (v151 << 6);
    }
    else
    {
      v154 = v151 + 1;
      if (__OFADD__(v151, 1))
        goto LABEL_145;
      if (v154 >= v223)
        goto LABEL_135;
      v155 = *(_QWORD *)(v220 + 8 * v154);
      v156 = v151 + 1;
      if (!v155)
      {
        v156 = v151 + 2;
        if (v151 + 2 >= v223)
          goto LABEL_135;
        v155 = *(_QWORD *)(v220 + 8 * v156);
        if (!v155)
        {
          v156 = v151 + 3;
          if (v151 + 3 >= v223)
            goto LABEL_135;
          v155 = *(_QWORD *)(v220 + 8 * v156);
          if (!v155)
          {
            v156 = v151 + 4;
            if (v151 + 4 >= v223)
              goto LABEL_135;
            v155 = *(_QWORD *)(v220 + 8 * v156);
            if (!v155)
            {
              v157 = v151 + 5;
              if (v151 + 5 >= v223)
                goto LABEL_135;
              v155 = *(_QWORD *)(v220 + 8 * v157);
              if (!v155)
              {
                while (1)
                {
                  v156 = v157 + 1;
                  if (__OFADD__(v157, 1))
                  {
                    __break(1u);
                    JUMPOUT(0x100CCD1ECLL);
                  }
                  if (v156 >= v223)
                    break;
                  v155 = *(_QWORD *)(v220 + 8 * v156);
                  ++v157;
                  if (v155)
                    goto LABEL_121;
                }
LABEL_135:
                v199 = *(_QWORD *)(v1 + 648);
                swift_bridgeObjectRelease(*(_QWORD *)(v1 + 616));
                swift_release(v235);
                swift_bridgeObjectRelease(v235);
                v192 = *(_QWORD *)(v1 + 184);
                swift_bridgeObjectRetain(v192);
                v193 = sub_100C9E858((uint64_t)v247, v192);
                swift_bridgeObjectRelease(v247);

                v198 = v192;
                swift_bridgeObjectRelease(v192);
                v134 = (v193 & 1) == 0;
                goto LABEL_97;
              }
              v156 = v151 + 5;
            }
          }
        }
      }
LABEL_121:
      v251 = (v155 - 1) & v155;
      v255 = v156;
      v153 = __clz(__rbit64(v155)) + (v156 << 6);
    }
    v159 = *(_QWORD *)(v1 + 296);
    v158 = *(_QWORD *)(v1 + 304);
    v160 = *(_QWORD *)(v1 + 288);
    v161 = v1;
    v162 = *(_QWORD *)(v1 + 232);
    v260 = *(_QWORD *)(v1 + 240);
    v239 = v230[9];
    sub_1004B8460(*(_QWORD *)(v235 + 48) + (_QWORD)v239 * v153, v158, type metadata accessor for CRLBoardIdentifier);
    v163 = *(_QWORD *)(v235 + 56);
    isUniquelyReferenced_nonNull_native = type metadata accessor for CRLBoardViewModelMetadata(0);
    v164 = v163 + *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native - 8) + 72) * v153;
    v29 = v227;
    sub_1004B8460(v164, v158 + *(int *)(v227 + 48), type metadata accessor for CRLBoardViewModelMetadata);
    sub_1004C4938(v158, v159, &qword_10140DF90);
    v165 = *(int *)(v227 + 48);
    v166 = v160 + v165;
    v167 = v159 + v165;
    sub_1004B8460(v159, v160, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(v167, v166, type metadata accessor for CRLBoardViewModelMetadata);
    v28 = (uint64_t)&qword_1013F5478;
    sub_1004CB7BC(v166 + *(int *)(isUniquelyReferenced_nonNull_native + 28), v162, &qword_1013F5478);
    sub_1004B84A4(v166, type metadata accessor for CRLBoardViewModelMetadata);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v243 + 48))(v162, 1, v260) == 1)
    {
      v152 = *(_QWORD *)(v1 + 288);
      sub_1004CB800(*(_QWORD *)(v1 + 232), &qword_1013F5478);
      sub_1004B84A4(v152, type metadata accessor for CRLBoardIdentifier);
      goto LABEL_103;
    }
    v169 = *(_QWORD *)(v1 + 288);
    v168 = *(_QWORD *)(v1 + 296);
    isUniquelyReferenced_nonNull_native = *(_QWORD *)(v1 + 280);
    v171 = *(_QWORD *)(v1 + 256);
    v170 = *(_QWORD *)(v161 + 264);
    sub_1004B84E0(*(_QWORD *)(v161 + 232), v170, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
    v172 = v169;
    v28 = (uint64_t)type metadata accessor for CRLBoardIdentifier;
    sub_1004B84A4(v172, type metadata accessor for CRLBoardIdentifier);
    v173 = isUniquelyReferenced_nonNull_native + *(int *)(v227 + 48);
    sub_1004B8460(v168, isUniquelyReferenced_nonNull_native, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(v167, v173, type metadata accessor for CRLBoardViewModelMetadata);
    sub_1004B8460(v170, v171, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
    v174 = v247;
    v175 = swift_isUniquelyReferenced_nonNull_native(v247);
    v264 = v247;
    v1 = sub_100843264(isUniquelyReferenced_nonNull_native);
    v177 = v247[2];
    v178 = (v176 & 1) == 0;
    v179 = v177 + v178;
    if (__OFADD__(v177, v178))
      goto LABEL_144;
    v180 = v176;
    v29 = (uint64_t)type metadata accessor for CRLBoardIdentifier;
    if (v247[3] >= v179)
    {
      if ((v175 & 1) != 0)
      {
        if ((v176 & 1) != 0)
          goto LABEL_131;
      }
      else
      {
        sub_100834F68();
        v174 = v264;
        v247 = v264;
        if ((v180 & 1) != 0)
          goto LABEL_131;
      }
LABEL_127:
      v186 = v261[35];
      v187 = v261[32];
      v174[(v1 >> 6) + 8] |= 1 << v1;
      sub_1004B8460(v186, v247[6] + v1 * (_QWORD)v239, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84E0(v187, v247[7] + *(_QWORD *)(v243 + 72) * v1, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
      v188 = v247[2];
      v55 = __OFADD__(v188, 1);
      v189 = v188 + 1;
      if (v55)
        goto LABEL_146;
      v247[2] = v189;
      v1 = (unint64_t)v261;
LABEL_132:
      v191 = *(_QWORD *)(v1 + 280);
      v28 = *(_QWORD *)(v1 + 264);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_1004B84A4(v191, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4(v28, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
      sub_1004B84A4(v173, type metadata accessor for CRLBoardViewModelMetadata);
LABEL_103:
      sub_1004CB800(*(_QWORD *)(v1 + 296), &qword_10140DF90);
      v150 = v251;
      v151 = v255;
      continue;
    }
    break;
  }
  v181 = v261[35];
  sub_100824A30(v179, v175);
  v182 = v181;
  v183 = v264;
  v184 = sub_100843264(v182);
  if ((v180 & 1) == (v185 & 1))
  {
    v1 = v184;
    v174 = v183;
    v247 = v183;
    if ((v180 & 1) == 0)
      goto LABEL_127;
LABEL_131:
    v190 = v174[7] + *(_QWORD *)(v243 + 72) * v1;
    v1 = (unint64_t)v261;
    sub_100836E6C(v261[32], v190, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
    goto LABEL_132;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v261[62]);
}

uint64_t sub_100CCD204()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[78];
  swift_bridgeObjectRelease(v0[77]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100CCD24C, v0[71], v0[72]);
}

uint64_t sub_100CCD24C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 616);
  swift_release(*(_QWORD *)(v0 + 560));
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v3 = *(_QWORD *)(v0 + 608);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 88, 0, 0);
  v4 = (void *)static OS_os_log.crlBoardLibrary;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v5, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v0 + 200) = v1;
  v7 = v4;
  swift_errorRetain(v1);
  v8 = sub_1004B804C(&qword_1013E0210);
  v9 = String.init<A>(describing:)(v0 + 200, v8);
  v11 = v10;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v12 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v12;
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = v11;
  v13 = static os_log_type_t.error.getter(v12);
  sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v13, "Error updating snapshot from store: %@", 38, 2, inited);
  swift_setDeallocating(inited);
  v14 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v14);

  swift_errorRelease(v1);
  if (!v3)
    swift_bridgeObjectRelease(v2);
  v15 = *(_QWORD *)(v0 + 544);
  v16 = *(_QWORD *)(v0 + 536);
  v17 = *(_QWORD *)(v0 + 528);
  v18 = *(_QWORD *)(v0 + 520);
  v19 = *(_QWORD *)(v0 + 512);
  v21 = *(_QWORD *)(v0 + 480);
  v20 = *(_QWORD *)(v0 + 488);
  v22 = *(_QWORD *)(v0 + 472);
  v25 = *(_QWORD *)(v0 + 448);
  v26 = *(_QWORD *)(v0 + 440);
  v27 = *(_QWORD *)(v0 + 424);
  v28 = *(_QWORD *)(v0 + 416);
  v29 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 400);
  v31 = *(_QWORD *)(v0 + 392);
  v32 = *(_QWORD *)(v0 + 384);
  v33 = *(_QWORD *)(v0 + 376);
  v34 = *(_QWORD *)(v0 + 368);
  v35 = *(_QWORD *)(v0 + 360);
  v36 = *(_QWORD *)(v0 + 336);
  v37 = *(_QWORD *)(v0 + 320);
  v38 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 296);
  v40 = *(_QWORD *)(v0 + 288);
  v41 = *(_QWORD *)(v0 + 280);
  v42 = *(_QWORD *)(v0 + 264);
  v43 = *(_QWORD *)(v0 + 256);
  v44 = *(_QWORD *)(v0 + 232);
  v23 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  *(_QWORD *)(v23 + 32) = 0;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CCD56C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  double v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v49;
  id v50;
  id v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int EnumCaseMultiPayload;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  id v91;
  Class isa;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t inited;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[4];
  int v113;
  unint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t, void *);
  char *v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  unint64_t v147;
  uint64_t v148;
  char v149[8];
  char *v150;
  char v151[8];
  uint64_t v152;

  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = __chkstk_darwin(v5);
  v126 = (uint64_t)v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v125 = (uint64_t)v112 - v9;
  v10 = __chkstk_darwin(v8);
  v138 = (uint64_t)v112 - v11;
  __chkstk_darwin(v10);
  v137 = (uint64_t)v112 - v12;
  v121 = type metadata accessor for UUID(0);
  v118 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v112[3] = (char *)v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_1004B804C(&qword_1013E8798);
  __chkstk_darwin(v124);
  v140 = (uint64_t)v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v15 = __chkstk_darwin(v134);
  v129 = (uint64_t)v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v128 = (uint64_t)v112 - v18;
  __chkstk_darwin(v17);
  v127 = (uint64_t)v112 - v19;
  v144 = sub_1004B804C((uint64_t *)&unk_1013E87A0);
  __chkstk_darwin(v144);
  v148 = (uint64_t)v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v123 = (char *)v112 - v26;
  v27 = __chkstk_darwin(v25);
  v136 = (uint64_t)v112 - v28;
  v29 = __chkstk_darwin(v27);
  v135 = (uint64_t)v112 - v30;
  __chkstk_darwin(v29);
  v32 = (char *)v112 - v31;
  v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  v34 = sub_1004B804C(&qword_1013E1790);
  v122 = *(_QWORD *)(v34 - 8);
  v35 = *(_QWORD *)(v122 + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v35)(v32, 2, 5, v34);
  v150 = v32;
  swift_bridgeObjectRetain(v33);
  sub_1007C2808(1, (uint64_t (*)(id))sub_100CED894, (uint64_t)v149, v33);
  v37 = v36;
  swift_bridgeObjectRelease(v33);
  sub_1004B84A4((uint64_t)v32, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  if (!v37)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"updateRecentsFolderNode(allBoardNodes:metadata:)", 48, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 3399, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateRecentsFolderNode(allBoardNodes:metadata:)", 48, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 3399, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return 0;
  }
  if (a1 < 0 || (a1 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a1);
    v38 = (uint64_t)sub_1005FF43C(v111);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v38 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a1);
  }
  v39 = (void *)v34;
  v152 = v38;
  sub_100CE6D20(&v152, a2);
  *(_QWORD *)&v40 = swift_bridgeObjectRelease(a2).n128_u64[0];
  v141 = v152;
  v41 = (uint64_t)&selRef_callStackDescriptionWithAction_callStackSymbols_index_;
  v42 = objc_msgSend(v37, "children", v40);
  v43 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, v43);

  if ((unint64_t)v44 >> 62)
    goto LABEL_75;
  v115 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
  v44 = (uint64_t)objc_msgSend(v37, *(SEL *)(v41 + 2616), swift_bridgeObjectRelease(v44).n128_f64[0]);
  v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v43);

  if ((unint64_t)v45 >> 62)
  {
    if (v45 < 0)
      v44 = v45;
    else
      v44 = v45 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v45);
    v41 = v141;
    swift_retain(v141);
    v142 = _CocoaArrayWrapper.endIndex.getter(v44);
  }
  else
  {
    v142 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v45);
    v41 = v141;
    swift_retain(v141);
  }
  v46 = ((unint64_t)v41 >> 62) & 1;
  if (v41 < 0)
    LODWORD(v46) = 1;
  v117 = v24;
  v119 = v37;
  v116 = (void (*)(char *, uint64_t, uint64_t, void *))v35;
  v114 = v43;
  v113 = v46;
  if ((_DWORD)v46 == 1)
  {
    swift_bridgeObjectRetain(v41);
    v145 = _CocoaArrayWrapper.endIndex.getter(v110);
    swift_release(v41);
  }
  else
  {
    v145 = *(_QWORD *)(v41 + 16);
  }
  v35 = 0;
  v43 = 0;
  v133 = v45 & 0xC000000000000001;
  v132 = v45 & 0xFFFFFFFFFFFFFF8;
  v120 = v45;
  v131 = v45 + 32;
  v143 = v41 & 0xC000000000000001;
  v139 = v39;
  v24 = (char *)v134;
  v47 = v142;
  while (1)
  {
    if (v43 == v47)
    {
      v39 = 0;
      v44 = 0;
      v43 = v47;
      if (v145 == v35)
        goto LABEL_61;
      goto LABEL_28;
    }
    if (v133)
    {
      v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v120);
    }
    else
    {
      if ((v43 & 0x8000000000000000) != 0)
        goto LABEL_72;
      if (v43 >= *(_QWORD *)(v132 + 16))
        goto LABEL_74;
      v50 = *(id *)(v131 + 8 * v43);
    }
    v39 = v50;
    if (__OFADD__(v43++, 1))
      goto LABEL_73;
    if (v145 == v35)
      break;
LABEL_28:
    if (v143)
    {
      v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v41);
    }
    else
    {
      if (v35 >= *(_QWORD *)(v41 + 16))
        goto LABEL_71;
      v52 = *(id *)(v41 + 8 * v35 + 32);
    }
    v44 = (uint64_t)v52;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      if (v44 < 0)
        v109 = v44;
      else
        v109 = v44 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v44);
      v115 = _CocoaArrayWrapper.endIndex.getter(v109);
      swift_bridgeObjectRelease(v44);
      goto LABEL_7;
    }
    if (!v39)
      goto LABEL_61;
    if (!v52)
      goto LABEL_56;
    v147 = v43;
    v53 = v41;
    v54 = v47;
    v55 = v52;
    v56 = (uint64_t)v52 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
    v57 = v24;
    v58 = v148;
    v59 = (unsigned __int8 *)(v148 + *(int *)(v144 + 48));
    sub_1004B8460((uint64_t)v39 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v148, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_1004B8460(v56, (uint64_t)v59, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v60 = v58;
    v24 = v57;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v60, v57);
    if (EnumCaseMultiPayload)
    {
      v146 = v39;
      if (EnumCaseMultiPayload == 1)
      {
        v62 = v128;
        sub_1004B8460(v148, v128, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v63 = swift_getEnumCaseMultiPayload(v59, v57);
        v37 = v55;
        if (v63 == 1)
        {
          v64 = v135;
          sub_1004B84E0(v62, v135, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v65 = v136;
          sub_1004B84E0((uint64_t)v59, v136, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v66 = v140;
          v67 = v140 + *(int *)(v124 + 48);
          v68 = v139;
          sub_1004B8460(v64, v140, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          sub_1004B8460(v65, v67, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v69 = (char *)&loc_100CCDDD4
              + *((int *)qword_100CCE700
                + (*(unsigned int (**)(uint64_t, uint64_t, void *))(v122 + 48))(v66, 5, v68));
          __asm { BR              X9 }
        }
        sub_1004B84A4(v62, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v53 = v141;
        goto LABEL_59;
      }
      v71 = v129;
      sub_1004B8460(v148, v129, type metadata accessor for CRLBoardLibraryViewModel.Item);
      v72 = *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48);
      v73 = *(_QWORD *)(v71 + v72);
      v74 = *(_QWORD *)(v71 + v72 + 8);
      v75 = swift_getEnumCaseMultiPayload(v59, v57);
      v37 = v55;
      if (v75 != 2)
      {
        swift_bridgeObjectRelease(v74);
        sub_1004B84A4(v71, type metadata accessor for CRLBoardIdentifier);
        v53 = v141;
        v39 = v146;
LABEL_59:
        sub_1004CB800(v148, (uint64_t *)&unk_1013E87A0);
        swift_bridgeObjectRelease_n(v120, 2);
        v41 = v53;
        swift_release(v53);

        goto LABEL_63;
      }
      v76 = *(_QWORD *)&v59[v72];
      v130 = *(_QWORD *)&v59[v72 + 8];
      v77 = v137;
      v44 = (uint64_t)type metadata accessor for CRLBoardIdentifier;
      sub_1004B84E0(v71, v137, type metadata accessor for CRLBoardIdentifier);
      v78 = v138;
      sub_1004B84E0((uint64_t)v59, v138, type metadata accessor for CRLBoardIdentifier);
      v79 = static UUID.== infix(_:_:)(v77);
      v80 = v125;
      sub_1004B8460(v77, v125, type metadata accessor for CRLBoardIdentifier);
      v81 = v78;
      v82 = v126;
      sub_1004B8460(v81, v126, type metadata accessor for CRLBoardIdentifier);
      if ((v79 & 1) != 0)
      {
        v83 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
        v84 = *(_QWORD *)(v80 + v83);
        v85 = *(_QWORD *)(v80 + v83 + 8);
        v86 = (_QWORD *)(v82 + v83);
        v87 = v86[1];
        if (v84 == *v86 && v85 == v87)
        {
          sub_1004B84A4(v82, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v80, type metadata accessor for CRLBoardIdentifier);
          v41 = v141;
LABEL_48:
          v88 = v130;
          if (v73 == v76 && v74 == v130)
          {
            v49 = 1;
            v88 = v74;
          }
          else
          {
            v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v74, v76, v130, 0);
          }
          v24 = (char *)v134;
          v47 = v142;
LABEL_17:
          swift_bridgeObjectRelease(v88);
          swift_bridgeObjectRelease(v74);
          sub_1004B84A4(v138, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v137, type metadata accessor for CRLBoardIdentifier);
          v39 = v146;
          goto LABEL_18;
        }
        v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v84, v85, *v86, v87, 0);
        sub_1004B84A4(v82, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v80, type metadata accessor for CRLBoardIdentifier);
        v41 = v141;
        if ((v89 & 1) != 0)
          goto LABEL_48;
        v49 = 0;
        v24 = (char *)v134;
      }
      else
      {
        sub_1004B84A4(v82, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v80, type metadata accessor for CRLBoardIdentifier);
        v49 = 0;
        v24 = (char *)v134;
        v41 = v141;
      }
      v47 = v142;
      v88 = v130;
      goto LABEL_17;
    }
    v44 = v127;
    sub_1004B8460(v148, v127, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v70 = swift_getEnumCaseMultiPayload(v59, v57);
    v37 = v55;
    if (v70)
      goto LABEL_59;
    v49 = *(unsigned __int8 *)v44 == *v59;
    v47 = v54;
    v41 = v53;
LABEL_18:
    sub_1004B84A4(v148, type metadata accessor for CRLBoardLibraryViewModel.Item);

    ++v35;
    v43 = v147;
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRelease_n(v120, 2);
      swift_release(v41);
      goto LABEL_63;
    }
  }
  if (v50)
  {
LABEL_56:
    swift_bridgeObjectRelease_n(v120, 2);
    swift_release(v41);

    goto LABEL_63;
  }
  v44 = 0;
LABEL_61:
  v90 = v120;
  swift_bridgeObjectRelease(v120);
  swift_release(v41);
  if (!v44)
  {
    swift_release(v41);

    swift_bridgeObjectRelease(v90);
    return 0;
  }
  swift_bridgeObjectRelease(v90);

LABEL_63:
  v91 = v119;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v91, "setChildren:", isa);

  v93 = (uint64_t)v117;
  v116(v117, 2, 5, v139);
  if (v113)
  {
    swift_bridgeObjectRetain(v41);
    v95 = _CocoaArrayWrapper.endIndex.getter(v94);
    swift_release(v41);
  }
  else
  {
    v95 = *(_QWORD *)(v41 + 16);
  }
  swift_release(v41);
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, &v152, 0, 0);
  v96 = (void *)static OS_os_log.crlBoardLibrary;
  v97 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v97, v151);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  v99 = v96;
  sub_100BCAD68();
  v101 = v100;
  v103 = v102;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v104 = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v101;
  *(_QWORD *)(inited + 40) = v103;
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  v105 = v115;
  *(_QWORD *)(inited + 64) = v104;
  *(_QWORD *)(inited + 72) = v105;
  *(_QWORD *)(inited + 136) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = &protocol witness table for Int;
  *(_QWORD *)(inited + 112) = v95;
  v107 = static os_log_type_t.default.getter(v106);
  sub_100A06EBC((uint64_t)v99, &_mh_execute_header, v107, "Updated \"%s\" library folder. Before: %d, After: %d", 50, 2, inited);
  swift_setDeallocating(inited);
  v108 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 3, v108);

  sub_1004B84A4(v93, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  return 1;
}

uint64_t sub_100CCE718(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  double v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  id v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int EnumCaseMultiPayload;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char v101;
  uint64_t (*v102)(uint64_t);
  uint64_t v103;
  uint64_t v104;
  Class isa;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t inited;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[3];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t, uint64_t, _QWORD *);
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163[8];
  char *v164;
  char v165[8];
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v7 = __chkstk_darwin(v6);
  v138 = (uint64_t)v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v137 = (uint64_t)v127 - v10;
  v11 = __chkstk_darwin(v9);
  v152 = (uint64_t)v127 - v12;
  __chkstk_darwin(v11);
  v151 = (uint64_t)v127 - v13;
  v130 = type metadata accessor for UUID(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v127[1] = (char *)v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_1004B804C(&qword_1013E8798);
  __chkstk_darwin(v136);
  v154 = (uint64_t)v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v16 = __chkstk_darwin(v148);
  v155 = (char *)v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v140 = (uint64_t)v127 - v19;
  __chkstk_darwin(v18);
  v139 = (unsigned __int8 *)v127 - v20;
  v161 = sub_1004B804C((uint64_t *)&unk_1013E87A0);
  __chkstk_darwin(v161);
  v162 = (uint64_t)v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v23 = __chkstk_darwin(v22);
  v132 = (char *)v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v142 = (char *)v127 - v26;
  v27 = __chkstk_darwin(v25);
  v150 = (uint64_t)v127 - v28;
  v29 = __chkstk_darwin(v27);
  v149 = (uint64_t)v127 - v30;
  __chkstk_darwin(v29);
  v32 = (char *)v127 - v31;
  v33 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  v34 = (_QWORD *)sub_1004B804C(&qword_1013E1790);
  v135 = *(v34 - 1);
  v131 = *(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v135 + 56);
  v131(v32, 4, 5, v34);
  v164 = v32;
  swift_bridgeObjectRetain(v33);
  sub_1007C2808(1, (uint64_t (*)(id))sub_100CED894, (uint64_t)v163, v33);
  v36 = v35;
  swift_bridgeObjectRelease(v33);
  sub_1004B84A4((uint64_t)v32, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  v147 = v36;
  if (!v36)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"updateSharedFolderNode(allBoardNodes:metadata:)", 47, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 3311, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateSharedFolderNode(allBoardNodes:metadata:)", 47, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 3311, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return 0;
  }
  swift_bridgeObjectRetain(a1);
  v37 = 0;
  v39 = sub_100CE1F50(v38, (uint64_t *)a2);
  swift_bridgeObjectRelease(a1);
  v168 = v39;
  v40 = *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController)
                  + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
  if (v40 >> 62)
    goto LABEL_111;
  v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v3
                                                 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController)
                                     + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights));
LABEL_4:
  v42 = v148;
  if (v41)
  {
    sub_1007C37C4(a1);
    v44 = v43;
    v45 = sub_100CE45E4((uint64_t)_swiftEmptyArrayStorage, v40, v43);
    swift_bridgeObjectRelease(v40);
    v40 = (unint64_t)v44;
  }
  else
  {
    v45 = (uint64_t)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v40);
  v40 = sub_1008D6494((uint64_t)_swiftEmptyArrayStorage);
  v166 = v40;
  v167 = v45;
  if ((unint64_t)v45 >> 62)
  {
    if (v45 < 0)
      v124 = v45;
    else
      v124 = v45 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v45, 2);
    swift_bridgeObjectRetain(v40);
    v47 = _CocoaArrayWrapper.endIndex.getter(v124);
    swift_bridgeObjectRelease(v45);
  }
  else
  {
    v47 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v40);
  }
  v153 = v34;
  if (v47)
  {
    a1 = v45;
    while (1)
    {
      v48 = (unint64_t)a1 >> 62;
      if ((unint64_t)a1 >> 62)
      {
        if (a1 < 0)
          v50 = a1;
        else
          v50 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v51 = _CocoaArrayWrapper.endIndex.getter(v50);
        swift_bridgeObjectRelease(a1);
        if (!v51)
        {
          __break(1u);
LABEL_136:
          swift_bridgeObjectRelease(a1);
          swift_bridgeObjectRelease(v166);
          __break(1u);
          JUMPOUT(0x100CCFC38);
        }
        swift_bridgeObjectRetain(a1);
        v34 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v50);
        swift_bridgeObjectRelease(a1);
        if (!v34)
          goto LABEL_103;
      }
      else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        if ((v40 & 0x8000000000000000) != 0)
          v123 = v40;
        else
          v123 = v40 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v40);
        v41 = _CocoaArrayWrapper.endIndex.getter(v123);
        goto LABEL_4;
      }
      if ((a1 & 0xC000000000000001) != 0)
      {
        v34 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        if (v48)
          goto LABEL_25;
      }
      else
      {
        if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_104;
        v34 = *(id *)(a1 + 32);
        if (v48)
        {
LABEL_25:
          if (a1 < 0)
            v52 = a1;
          else
            v52 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v49 = _CocoaArrayWrapper.endIndex.getter(v52);
          swift_bridgeObjectRelease(a1);
          goto LABEL_29;
        }
      }
      v49 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_29:
      if (!v49)
        goto LABEL_105;
      sub_100CFE428(0, 1);
      v53 = objc_msgSend(v34, "children");
      v54 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
      v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, v54);

      sub_10061EABC(v55);
      sub_100CD3DA8((uint64_t)&v166, (uint64_t)v34, v3);

      a1 = v167;
      if (v37)
        goto LABEL_136;
      if ((unint64_t)v167 >> 62)
      {
        if (v167 < 0)
          v56 = v167;
        else
          v56 = v167 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v167);
        v34 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v56);
        swift_bridgeObjectRelease(a1);
        if (!v34)
        {
LABEL_38:
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(a1);
          v40 = v166;
          v42 = v148;
          goto LABEL_40;
        }
      }
      else
      {
        v34 = *(_QWORD **)((v167 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v34)
          goto LABEL_38;
      }
    }
  }
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v45);
LABEL_40:
  swift_bridgeObjectRetain(v45);
  v58 = sub_100CE239C(v57, (uint64_t *)&v168);
  swift_bridgeObjectRelease(v45);
  sub_10061EABC((uint64_t)v58);
  swift_bridgeObjectRelease(v45);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)a2);
  v166 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0x8000000000000000;
  sub_100CD966C(v40, (uint64_t)sub_100CD95F4, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v166);
  v60 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v166;
  *(_QWORD *)&v61 = swift_bridgeObjectRelease(v60).n128_u64[0];
  v62 = objc_msgSend(v147, "children", v61);
  v63 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v62, v63);

  if ((unint64_t)v64 >> 62)
  {
    if (v64 < 0)
      v125 = v64;
    else
      v125 = v64 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v64);
    v128 = _CocoaArrayWrapper.endIndex.getter(v125);
    swift_bridgeObjectRelease(v64);
  }
  else
  {
    v128 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v65 = swift_bridgeObjectRelease(v64).n128_u64[0];
  a2 = (uint64_t)objc_msgSend(v147, "children", v65);
  v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v63);

  a1 = (uint64_t)v168;
  v134 = v66;
  if ((unint64_t)v66 >> 62)
  {
    if (v66 < 0)
      a2 = v66;
    else
      a2 = v66 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v168, 2);
    swift_bridgeObjectRetain(v66);
    v67 = _CocoaArrayWrapper.endIndex.getter(a2);
  }
  else
  {
    v67 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v168, 2);
    swift_bridgeObjectRetain(v66);
  }
  v37 = (uint64_t)v155;
  v127[2] = v63;
  if ((unint64_t)a1 >> 62)
  {
    v158 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      a2 = a1;
    else
      a2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v160 = _CocoaArrayWrapper.endIndex.getter(a2);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v158 = a1 & 0xFFFFFFFFFFFFFF8;
    v160 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v40 = 0;
  v3 = 0;
  v145 = v134 & 0xC000000000000001;
  v144 = v134 & 0xFFFFFFFFFFFFFF8;
  v143 = v134 + 32;
  v159 = a1 & 0xC000000000000001;
  v157 = a1;
  v156 = v67;
  while (1)
  {
    if (v3 == v67)
    {
      v70 = 0;
      v71 = 0;
      v3 = v67;
      if (v160 == v40)
        goto LABEL_94;
      goto LABEL_60;
    }
    if (v145)
    {
      v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v134);
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0)
        goto LABEL_108;
      if (v3 >= *(_QWORD *)(v144 + 16))
        goto LABEL_110;
      v72 = *(id *)(v143 + 8 * v3);
    }
    v70 = v72;
    if (__OFADD__(v3++, 1))
      goto LABEL_109;
    if (v160 == v40)
      break;
LABEL_60:
    if (v159)
    {
      v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, a1);
    }
    else
    {
      if (v40 >= *(_QWORD *)(v158 + 16))
        goto LABEL_106;
      v74 = *(id *)(a1 + 8 * v40 + 32);
    }
    v71 = v74;
    if (__OFADD__(v40, 1))
      goto LABEL_107;
    if (!v70)
      goto LABEL_94;
    if (!v74)
      goto LABEL_88;
    v75 = (uint64_t)v74 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
    v76 = v162;
    v77 = (unsigned __int8 *)(v162 + *(int *)(v161 + 48));
    v34 = type metadata accessor for CRLBoardLibraryViewModel.Item;
    sub_1004B8460((uint64_t)v70 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v162, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_1004B8460(v75, (uint64_t)v77, type metadata accessor for CRLBoardLibraryViewModel.Item);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v76, v42);
    if (!EnumCaseMultiPayload)
    {
      v85 = v139;
      sub_1004B8460(v162, (uint64_t)v139, type metadata accessor for CRLBoardLibraryViewModel.Item);
      v86 = swift_getEnumCaseMultiPayload(v77, v42);
      v67 = v156;
      if (v86)
        goto LABEL_92;
      a2 = *v85 == *v77;
      a1 = v157;
      goto LABEL_50;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v79 = v140;
      sub_1004B8460(v162, v140, type metadata accessor for CRLBoardLibraryViewModel.Item);
      if (swift_getEnumCaseMultiPayload(v77, v42) == 1)
      {
        v80 = v149;
        sub_1004B84E0(v79, v149, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v81 = v150;
        sub_1004B84E0((uint64_t)v77, v150, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v82 = v154;
        v83 = v154 + *(int *)(v136 + 48);
        sub_1004B8460(v80, v154, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        sub_1004B8460(v81, v83, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v84 = (char *)&loc_100CCF230
            + *((int *)qword_100CCFC38
              + (*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v135 + 48))(v82, 5, v153));
        __asm { BR              X9 }
      }
      v102 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
      v103 = v79;
LABEL_91:
      sub_1004B84A4(v103, v102);
LABEL_92:
      sub_1004CB800(v162, (uint64_t *)&unk_1013E87A0);
      swift_bridgeObjectRelease_n(v134, 2);
      swift_bridgeObjectRelease_n(v157, 2);

      goto LABEL_95;
    }
    sub_1004B8460(v162, v37, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v87 = *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48);
    v88 = *(_QWORD *)(v37 + v87);
    v89 = *(_QWORD *)(v37 + v87 + 8);
    if (swift_getEnumCaseMultiPayload(v77, v42) != 2)
    {
      swift_bridgeObjectRelease(v89);
      v102 = type metadata accessor for CRLBoardIdentifier;
      v103 = v37;
      goto LABEL_91;
    }
    v141 = v70;
    v90 = *(_QWORD *)&v77[v87 + 8];
    v133 = *(_QWORD *)&v77[v87];
    v146 = v90;
    v91 = v151;
    sub_1004B84E0(v37, v151, type metadata accessor for CRLBoardIdentifier);
    v92 = v152;
    sub_1004B84E0((uint64_t)v77, v152, type metadata accessor for CRLBoardIdentifier);
    v93 = static UUID.== infix(_:_:)(v91);
    v94 = v137;
    sub_1004B8460(v91, v137, type metadata accessor for CRLBoardIdentifier);
    v95 = v138;
    sub_1004B8460(v92, v138, type metadata accessor for CRLBoardIdentifier);
    if ((v93 & 1) != 0)
    {
      v96 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
      v97 = *(_QWORD *)(v94 + v96);
      v98 = *(_QWORD *)(v94 + v96 + 8);
      v99 = (_QWORD *)(v95 + v96);
      v100 = v99[1];
      if (v97 == *v99 && v98 == v100)
      {
        sub_1004B84A4(v95, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v94, type metadata accessor for CRLBoardIdentifier);
        v37 = (uint64_t)v155;
        a1 = v157;
        v70 = v141;
LABEL_79:
        if (v88 == v133 && v89 == v146)
        {
          a2 = 1;
          v69 = v89;
        }
        else
        {
          v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, v133, v146, 0);
          v69 = v146;
          a2 = v68;
        }
        v42 = v148;
        v34 = type metadata accessor for CRLBoardIdentifier;
        goto LABEL_49;
      }
      v101 = _stringCompareWithSmolCheck(_:_:expecting:)(v97, v98, *v99, v100, 0);
      sub_1004B84A4(v95, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4(v94, type metadata accessor for CRLBoardIdentifier);
      v37 = (uint64_t)v155;
      a1 = v157;
      v70 = v141;
      if ((v101 & 1) != 0)
        goto LABEL_79;
      a2 = 0;
      v42 = v148;
      v34 = type metadata accessor for CRLBoardIdentifier;
    }
    else
    {
      sub_1004B84A4(v95, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4(v94, type metadata accessor for CRLBoardIdentifier);
      a2 = 0;
      v42 = v148;
      v34 = type metadata accessor for CRLBoardIdentifier;
      v37 = (uint64_t)v155;
      a1 = v157;
      v70 = v141;
    }
    v69 = v146;
LABEL_49:
    swift_bridgeObjectRelease(v69);
    swift_bridgeObjectRelease(v89);
    sub_1004B84A4(v152, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v151, type metadata accessor for CRLBoardIdentifier);
    v67 = v156;
LABEL_50:
    sub_1004B84A4(v162, type metadata accessor for CRLBoardLibraryViewModel.Item);

    ++v40;
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRelease_n(v134, 2);
      swift_bridgeObjectRelease_n(a1, 2);
      goto LABEL_96;
    }
  }
  if (v72)
  {
LABEL_88:
    swift_bridgeObjectRelease_n(v134, 2);
    swift_bridgeObjectRelease_n(a1, 2);

    goto LABEL_96;
  }
  v71 = 0;
LABEL_94:
  swift_bridgeObjectRelease_n(v134, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  if (!v71)
  {
    v122 = (uint64_t)v168;

    swift_bridgeObjectRelease(v122);
    return 0;
  }
LABEL_95:

LABEL_96:
  v104 = (uint64_t)v168;
  swift_bridgeObjectRetain(v168);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v106 = swift_bridgeObjectRelease(v104).n128_u64[0];
  objc_msgSend(v147, "setChildren:", isa, v106);

  v107 = (uint64_t)v132;
  v131(v132, 4, 5, v153);
  if ((unint64_t)v104 >> 62)
  {
    if (v104 < 0)
      v126 = v104;
    else
      v126 = v104 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v104);
    v108 = _CocoaArrayWrapper.endIndex.getter(v126);
    swift_bridgeObjectRelease(v104);
  }
  else
  {
    v108 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v109 = v128;
  swift_bridgeObjectRelease(v104);
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, &v166, 0, 0);
  v110 = (void *)static OS_os_log.crlBoardLibrary;
  v111 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v111, v165);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  v113 = v110;
  sub_100BCAD68();
  v115 = v114;
  v117 = v116;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v118 = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v115;
  *(_QWORD *)(inited + 40) = v117;
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  *(_QWORD *)(inited + 64) = v118;
  *(_QWORD *)(inited + 72) = v109;
  *(_QWORD *)(inited + 136) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = &protocol witness table for Int;
  *(_QWORD *)(inited + 112) = v108;
  v120 = static os_log_type_t.default.getter(v119);
  sub_100A06EBC((uint64_t)v113, &_mh_execute_header, v120, "Updated \"%s\" library folder. Before: %d, After: %d", 50, 2, inited);
  swift_setDeallocating(inited);
  v121 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 3, v121);

  sub_1004B84A4(v107, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  return 1;
}

uint64_t sub_100CCFC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v51;
  id v52;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  int EnumCaseMultiPayload;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  id v86;
  Class isa;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t inited;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[3];
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t, uint64_t);
  char *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t);
  uint64_t (*v126)(uint64_t);
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144[8];
  char *v145;
  char v146[8];
  char v147[8];

  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = __chkstk_darwin(v5);
  v121 = (uint64_t)v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t (*)(uint64_t))((char *)v108 - v9);
  v11 = __chkstk_darwin(v8);
  v134 = (uint64_t)v108 - v12;
  __chkstk_darwin(v11);
  v133 = (uint64_t)v108 - v13;
  v14 = type metadata accessor for UUID(0);
  v114 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v108[2] = (char *)v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_1004B804C(&qword_1013E8798);
  __chkstk_darwin(v120);
  v135 = (uint64_t)v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v17 = __chkstk_darwin(v138);
  v124 = (uint64_t)v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v123 = (uint64_t)v108 - v20;
  __chkstk_darwin(v19);
  v122 = (unsigned __int8 *)v108 - v21;
  v141 = sub_1004B804C((uint64_t *)&unk_1013E87A0);
  __chkstk_darwin(v141);
  v130 = (char *)v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v119 = (char *)v108 - v28;
  v29 = __chkstk_darwin(v27);
  v132 = (uint64_t)v108 - v30;
  v31 = __chkstk_darwin(v29);
  v131 = (uint64_t)v108 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)v108 - v33;
  v35 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  v36 = sub_1004B804C(&qword_1013E1790);
  v118 = *(_QWORD *)(v36 - 8);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 56);
  v137 = v36;
  v37(v34, 3, 5);
  v145 = v34;
  swift_bridgeObjectRetain(v35);
  sub_1007C2808(1, (uint64_t (*)(id))sub_100CED894, (uint64_t)v144, v35);
  v39 = v38;
  swift_bridgeObjectRelease(v35);
  sub_1004B84A4((uint64_t)v34, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  if (!v39)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"updateFavoritesFolderNode(allBoardNodes:metadata:)", 50, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 3370, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateFavoritesFolderNode(allBoardNodes:metadata:)", 50, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 3370, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return 0;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a1);
  v136 = sub_100CE262C(v40, a2);
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)&v41 = swift_bridgeObjectRelease(a2).n128_u64[0];
  v42 = (unint64_t)&selRef_callStackDescriptionWithAction_callStackSymbols_index_;
  v43 = objc_msgSend((id)v39, "children", v41);
  v44 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, v44);

  if ((unint64_t)v45 >> 62)
    goto LABEL_74;
  v109 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
  v46 = objc_msgSend((id)v39, *(SEL *)(v42 + 2616), swift_bridgeObjectRelease(v45).n128_f64[0]);
  v111 = v44;
  v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v44);

  v44 = (uint64_t)v136;
  v48 = v138;
  if ((unint64_t)v47 >> 62)
  {
    if (v47 < 0)
      v105 = v47;
    else
      v105 = v47 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v44);
    v45 = _CocoaArrayWrapper.endIndex.getter(v105);
  }
  else
  {
    v45 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v44);
  }
  v126 = v10;
  v108[1] = v14;
  v139 = v45;
  v113 = v26;
  v115 = (id)v39;
  v112 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v37;
  v110 = (unint64_t)v44 >> 62;
  v49 = v47;
  if ((unint64_t)v44 >> 62)
  {
    v143 = v44 & 0xFFFFFFFFFFFFFF8;
    if (v44 < 0)
      v106 = v44;
    else
      v106 = v44 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v44);
    v107 = v106;
    v45 = v139;
    v142 = _CocoaArrayWrapper.endIndex.getter(v107);
    swift_bridgeObjectRelease(v44);
  }
  else
  {
    v143 = v44 & 0xFFFFFFFFFFFFFF8;
    v142 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = 0;
  v42 = 0;
  v129 = v49 & 0xC000000000000001;
  v128 = v49 & 0xFFFFFFFFFFFFFF8;
  v116 = v49;
  v127 = v49 + 32;
  v140 = v44 & 0xC000000000000001;
  v26 = v130;
  while (1)
  {
    if (v42 == v45)
    {
      v51 = 0;
      v37 = 0;
      v42 = v45;
      if (v142 == v14)
        goto LABEL_56;
      goto LABEL_24;
    }
    if (v129)
    {
      v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v116);
    }
    else
    {
      if ((v42 & 0x8000000000000000) != 0)
        goto LABEL_71;
      if (v42 >= *(_QWORD *)(v128 + 16))
        goto LABEL_72;
      v52 = *(id *)(v127 + 8 * v42);
    }
    v51 = v52;
    if (__OFADD__(v42++, 1))
      goto LABEL_73;
    if (v142 == v14)
      break;
LABEL_24:
    if (v140)
    {
      v54 = (void (*)(char *, uint64_t, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v44);
    }
    else
    {
      if (v14 >= *(_QWORD *)(v143 + 16))
      {
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        if (v45 < 0)
          v104 = v45;
        else
          v104 = v45 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v45);
        v109 = _CocoaArrayWrapper.endIndex.getter(v104);
        swift_bridgeObjectRelease(v45);
        goto LABEL_4;
      }
      v54 = (void (*)(char *, uint64_t, uint64_t))*(id *)(v44 + 8 * v14 + 32);
    }
    v37 = v54;
    if (__OFADD__(v14, 1))
      goto LABEL_70;
    if (!v51)
      goto LABEL_56;
    if (!v54)
      goto LABEL_51;
    v55 = (uint64_t)v54 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
    v56 = &v26[*(int *)(v141 + 48)];
    v10 = type metadata accessor for CRLBoardLibraryViewModel.Item;
    sub_1004B8460((uint64_t)v51 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v26, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_1004B8460(v55, (uint64_t)v56, type metadata accessor for CRLBoardLibraryViewModel.Item);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v48);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v58 = v123;
        sub_1004B8460((uint64_t)v26, v123, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (swift_getEnumCaseMultiPayload(v56, v48) == 1)
        {
          v59 = v131;
          sub_1004B84E0(v58, v131, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v60 = v132;
          sub_1004B84E0((uint64_t)v56, v132, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v61 = v135;
          v62 = v135 + *(int *)(v120 + 48);
          sub_1004B8460(v59, v135, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          sub_1004B8460(v60, v62, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v63 = (char *)&loc_100CD0470
              + *((int *)qword_100CD0D98
                + (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v61, 5, v137));
          __asm { BR              X9 }
        }
        sub_1004B84A4(v58, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        goto LABEL_54;
      }
      v65 = v124;
      sub_1004B8460((uint64_t)v26, v124, type metadata accessor for CRLBoardLibraryViewModel.Item);
      v66 = *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48);
      v68 = *(_QWORD *)(v65 + v66);
      v67 = *(uint64_t (**)(uint64_t))(v65 + v66 + 8);
      if (swift_getEnumCaseMultiPayload(v56, v48) != 2)
      {
        swift_bridgeObjectRelease(v67);
        sub_1004B84A4(v65, type metadata accessor for CRLBoardIdentifier);
        v44 = (uint64_t)v136;
        v26 = v130;
LABEL_54:
        sub_1004CB800((uint64_t)v26, (uint64_t *)&unk_1013E87A0);
        swift_bridgeObjectRelease_n(v116, 2);
        swift_bridgeObjectRelease(v44);

        goto LABEL_58;
      }
      v69 = *(uint64_t (**)(uint64_t))&v56[v66 + 8];
      v117 = *(_QWORD *)&v56[v66];
      v125 = v69;
      v70 = v65;
      v71 = v133;
      sub_1004B84E0(v70, v133, type metadata accessor for CRLBoardIdentifier);
      v72 = v134;
      sub_1004B84E0((uint64_t)v56, v134, type metadata accessor for CRLBoardIdentifier);
      v73 = static UUID.== infix(_:_:)(v71);
      v74 = v71;
      v75 = (uint64_t)v126;
      sub_1004B8460(v74, (uint64_t)v126, type metadata accessor for CRLBoardIdentifier);
      v76 = v72;
      v77 = v121;
      sub_1004B8460(v76, v121, type metadata accessor for CRLBoardIdentifier);
      if ((v73 & 1) != 0)
      {
        v78 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
        v79 = *(_QWORD *)(v75 + v78);
        v80 = *(_QWORD *)(v75 + v78 + 8);
        v81 = (_QWORD *)(v77 + v78);
        v82 = v81[1];
        v83 = v77;
        if (v79 == *v81 && v80 == v82)
        {
          sub_1004B84A4(v77, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v126, type metadata accessor for CRLBoardIdentifier);
LABEL_43:
          v10 = v125;
          if (v68 == v117 && v67 == v125)
          {
            v39 = 1;
            v10 = v67;
          }
          else
          {
            v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v67, v117, v125, 0);
          }
          v48 = v138;
LABEL_13:
          swift_bridgeObjectRelease(v10);
          swift_bridgeObjectRelease(v67);
          sub_1004B84A4(v134, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v133, type metadata accessor for CRLBoardIdentifier);
          v44 = (uint64_t)v136;
          v26 = v130;
          goto LABEL_14;
        }
        v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, *v81, v82, 0);
        sub_1004B84A4(v83, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4((uint64_t)v126, type metadata accessor for CRLBoardIdentifier);
        if ((v84 & 1) != 0)
          goto LABEL_43;
      }
      else
      {
        sub_1004B84A4(v77, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v75, type metadata accessor for CRLBoardIdentifier);
      }
      v39 = 0;
      v48 = v138;
      v10 = v125;
      goto LABEL_13;
    }
    v64 = v122;
    sub_1004B8460((uint64_t)v26, (uint64_t)v122, type metadata accessor for CRLBoardLibraryViewModel.Item);
    if (swift_getEnumCaseMultiPayload(v56, v48))
      goto LABEL_54;
    v39 = *v64 == *v56;
LABEL_14:
    v45 = v139;
    sub_1004B84A4((uint64_t)v26, type metadata accessor for CRLBoardLibraryViewModel.Item);

    ++v14;
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRelease_n(v116, 2);
      swift_bridgeObjectRelease(v44);
      goto LABEL_59;
    }
  }
  if (v52)
  {
LABEL_51:
    swift_bridgeObjectRelease_n(v116, 2);
    swift_bridgeObjectRelease(v44);

    goto LABEL_59;
  }
  v37 = 0;
LABEL_56:
  v85 = v116;
  swift_bridgeObjectRelease(v116);
  swift_bridgeObjectRelease(v44);
  if (!v37)
  {
    swift_bridgeObjectRelease(v44);

    swift_bridgeObjectRelease(v85);
    return 0;
  }
  swift_bridgeObjectRelease(v85);
LABEL_58:

LABEL_59:
  v86 = v115;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v86, "setChildren:", isa);

  v88 = (uint64_t)v113;
  v112(v113, 3, 5, v137);
  if (v110)
  {
    if (v44 < 0)
      v90 = v44;
    else
      v90 = v143;
    swift_bridgeObjectRetain(v44);
    v89 = _CocoaArrayWrapper.endIndex.getter(v90);
    swift_bridgeObjectRelease(v44);
  }
  else
  {
    v89 = *(_QWORD *)(v143 + 16);
  }
  swift_bridgeObjectRelease(v44);
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v147, 0, 0);
  v91 = (void *)static OS_os_log.crlBoardLibrary;
  v92 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v92, v146);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  v94 = v91;
  sub_100BCAD68();
  v96 = v95;
  v98 = v97;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v99 = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v96;
  *(_QWORD *)(inited + 40) = v98;
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  v100 = v109;
  *(_QWORD *)(inited + 64) = v99;
  *(_QWORD *)(inited + 72) = v100;
  *(_QWORD *)(inited + 136) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = &protocol witness table for Int;
  *(_QWORD *)(inited + 112) = v89;
  v102 = static os_log_type_t.default.getter(v101);
  sub_100A06EBC((uint64_t)v94, &_mh_execute_header, v102, "Updated \"%s\" library folder. Before: %d, After: %d", 50, 2, inited);
  swift_setDeallocating(inited);
  v103 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 3, v103);

  sub_1004B84A4(v88, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  return 1;
}

uint64_t sub_100CD0DB0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1[49] = v0;
  v2 = sub_1004B804C(&qword_1013E8798);
  v1[50] = v2;
  v1[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1004B804C((uint64_t *)&unk_1013E87A0);
  v1[52] = v3;
  v1[53] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CRLBoardLibraryViewModel.Folder(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[54] = swift_task_alloc(v4);
  v1[55] = swift_task_alloc(v4);
  v1[56] = swift_task_alloc(v4);
  v1[57] = swift_task_alloc(v4);
  v5 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v1[58] = v5;
  v1[59] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[60] = swift_task_alloc(v6);
  v1[61] = swift_task_alloc(v6);
  v1[62] = swift_task_alloc(v6);
  v1[63] = swift_task_alloc(v6);
  v1[64] = swift_task_alloc(v6);
  v7 = type metadata accessor for CRLBoardCRDTData(0);
  v1[65] = v7;
  v1[66] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v1[67] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[68] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[69] = swift_task_alloc(v10);
  v1[70] = swift_task_alloc(v10);
  v1[71] = swift_task_alloc(v10);
  v11 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v1[72] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[73] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[74] = swift_task_alloc(v13);
  v1[75] = swift_task_alloc(v13);
  v1[76] = swift_task_alloc(v13);
  v1[77] = swift_task_alloc(v13);
  v1[78] = swift_task_alloc(v13);
  v1[79] = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  v1[80] = static MainActor.shared.getter(v14);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v1[81] = v15;
  v1[82] = v16;
  return swift_task_switch(sub_100CD1000, v15, v16);
}

uint64_t sub_100CD1000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 392) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  swift_bridgeObjectRetain(v1);
  sub_1007C3F00(1, 0, v1);
  v3 = v2;
  *(_QWORD *)(v0 + 664) = v2;
  swift_bridgeObjectRelease(v1);
  if (v3)
  {
    *(_QWORD *)(v0 + 672) = *(_QWORD *)(*(_QWORD *)(v0 + 392) + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    return swift_task_switch(sub_100CD1280, 0, 0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 640);
    sub_100757E04(&_mh_execute_header, (uint64_t)"updateRecentlyDeletedFolderNode()", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 3439, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateRecentlyDeletedFolderNode()", 33, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 3439, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    swift_release(v5);
    v6 = *(_QWORD *)(v0 + 624);
    v7 = *(_QWORD *)(v0 + 616);
    v8 = *(_QWORD *)(v0 + 608);
    v9 = *(_QWORD *)(v0 + 600);
    v10 = *(_QWORD *)(v0 + 592);
    v11 = *(_QWORD *)(v0 + 568);
    v12 = *(_QWORD *)(v0 + 560);
    v13 = *(_QWORD *)(v0 + 552);
    v14 = *(_QWORD *)(v0 + 528);
    v15 = *(_QWORD *)(v0 + 512);
    v16 = *(_QWORD *)(v0 + 504);
    v17 = *(_QWORD *)(v0 + 496);
    v18 = *(_QWORD *)(v0 + 488);
    v19 = *(_QWORD *)(v0 + 480);
    v20 = *(_QWORD *)(v0 + 472);
    v21 = *(_QWORD *)(v0 + 456);
    v22 = *(_QWORD *)(v0 + 448);
    v23 = *(_QWORD *)(v0 + 440);
    v24 = *(_QWORD *)(v0 + 432);
    v25 = *(_QWORD *)(v0 + 424);
    v26 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 632));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100CD1280()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[84];
  v2 = swift_task_alloc(32);
  v0[85] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = -1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[86] = v3;
  v4 = sub_1004B804C(&qword_10140DF88);
  *v3 = v0;
  v3[1] = sub_100CD1334;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 48, 0, 0, 0xD00000000000002ALL, 0x80000001010092F0, sub_100CEBB98, v2, v4);
}

uint64_t sub_100CD1334()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 688);
  *(_QWORD *)(*v1 + 696) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CD2DE8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 680));
    v4 = sub_100CD13A0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CD13A0()
{
  _QWORD *v0;

  v0[88] = v0[48];
  return swift_task_switch(sub_100CD13BC, v0[81], v0[82]);
}

void sub_100CD13BC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  double v41;
  uint64_t (*v42)(uint64_t);
  id v43;
  objc_class *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  Class isa;
  SEL *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  Class v94;
  void *v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  Class v108;
  void *v109;
  uint64_t (*v110)(uint64_t);
  unint64_t v111;
  SEL *v112;
  uint64_t v113;
  uint64_t v114;
  SEL *v115;
  id v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  id v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  int EnumCaseMultiPayload;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(uint64_t);
  Class v172;
  void *v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t inited;
  id v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  __n128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)(uint64_t);
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  Class v231;
  objc_class *v232;
  Class v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  void (*v248)(uint64_t, uint64_t, uint64_t);
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  unsigned int v254;
  uint64_t v255[3];

  v3 = v0[88];
  swift_release(v0[80]);
  if (v3 >> 62)
  {
    v35 = v0[88];
    if (v35 < 0)
      v36 = v0[88];
    else
      v36 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v0[88]);
    v4 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease(v35);
    v253 = v0;
    if (v4)
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease(v0[88]);
    v31 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v253 = v0;
  if (!v4)
    goto LABEL_24;
LABEL_3:
  v255[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1006008AC(0, v4 & ~(v4 >> 63), 0);
  if (v4 < 0)
    goto LABEL_160;
  v5 = 0;
  v231 = (Class)(v0 + 36);
  v226 = v0[73];
  v250 = v0[68];
  v221 = v0[58];
  v218 = v3 & 0xC000000000000001;
  v216 = v0[88] + 32;
  v217 = v4;
  do
  {
    v234 = v5;
    if (v218)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v0[88]);
    }
    else
    {
      v6 = *(_QWORD *)(v216 + 8 * v5);
      swift_retain(v6);
    }
    v7 = v0[71];
    v8 = v0[70];
    v9 = v0[67];
    v10 = v0[66];
    v11 = v6 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v6 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v231, 0, 0);
    v243 = v11;
    sub_1004B8460(v11, v10, type metadata accessor for CRLBoardCRDTData);
    v12 = sub_1004B804C(&qword_1013E1A80);
    CRRegister.wrappedValue.getter(v12);
    sub_1004B84A4(v10, type metadata accessor for CRLBoardCRDTData);
    v14 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v13 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v250 + 16))(v8, v7, v9);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v17 = v14 == v15 && v13 == v16;
    v247 = v6;
    if (v17
      || (v18 = v16,
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v15, v16, 0),
          swift_bridgeObjectRetain(v13),
          swift_bridgeObjectRelease(v18),
          (v19 & 1) != 0))
    {
      swift_bridgeObjectRelease(v13);
      v14 = 0;
      v13 = 0xE000000000000000;
    }
    v20 = v0[79];
    v240 = v0[72];
    v21 = v0[71];
    v22 = v0[70];
    v23 = v0[67];
    v24 = v0[66];
    v25 = v0[64];
    v26 = v253[59];
    v237 = (_QWORD *)(v20 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48));
    (*(void (**)(uint64_t, uint64_t))(v250 + 8))(v21, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v250 + 32))(v26, v22, v23);
    v27 = (_QWORD *)(v26 + *(int *)(v221 + 20));
    *v27 = v14;
    v27[1] = v13;
    v0 = v253;
    sub_1004B84E0(v26, v25, type metadata accessor for CRLBoardIdentifierStorage);
    sub_1004B84E0(v25, v20, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(v243, v24, type metadata accessor for CRLBoardCRDTData);
    v28 = sub_1004B804C(&qword_1013E1980);
    CRRegister.wrappedValue.getter(v28);
    v30 = v253[45];
    v29 = v253[46];
    sub_1004B84A4(v24, type metadata accessor for CRLBoardCRDTData);
    *v237 = v30;
    v237[1] = v29;
    swift_storeEnumTagMultiPayload(v20, v240, 2);
    swift_release(v247);
    v31 = (_QWORD *)v255[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v255[0]) & 1) == 0)
    {
      sub_1006008AC(0, *(_QWORD *)(v255[0] + 16) + 1, 1);
      v31 = (_QWORD *)v255[0];
    }
    v33 = v31[2];
    v32 = v31[3];
    if (v33 >= v32 >> 1)
    {
      sub_1006008AC(v32 > 1, v33 + 1, 1);
      v31 = (_QWORD *)v255[0];
    }
    v34 = v253[79];
    v5 = v234 + 1;
    v31[2] = v33 + 1;
    sub_1004B84E0(v34, (uint64_t)v31+ ((*(unsigned __int8 *)(v226 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80))+ *(_QWORD *)(v226 + 72) * v33, type metadata accessor for CRLBoardLibraryViewModel.Item);
  }
  while (v217 != v234 + 1);
  swift_bridgeObjectRelease(v253[88]);
LABEL_25:
  v37 = v0;
  v38 = v0[87];
  v255[0] = (uint64_t)v31;
  swift_bridgeObjectRetain(v31);
  sub_100CD9A28(v255);
  if (v38)
  {
    swift_release(v255[0]);
    return;
  }
  v39 = (void *)v0[83];
  v40 = v37[57];
  *(_QWORD *)&v41 = swift_bridgeObjectRelease(v31).n128_u64[0];
  v42 = (uint64_t (*)(uint64_t))v255[0];
  v43 = objc_msgSend(v39, "children", v41);
  v44 = (objc_class *)type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, v44);

  v46 = sub_1004B804C(&qword_1013E1790);
  v219 = *(_QWORD *)(v46 - 8);
  v248 = *(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 56);
  v251 = v46;
  v248(v40, 5, 5);
  v47 = swift_task_alloc(32);
  *(_QWORD *)(v47 + 16) = v40;
  sub_1007C2808(1, (uint64_t (*)(id))sub_1005A1254, v47, v45);
  v49 = v48;
  swift_bridgeObjectRelease(v45);
  swift_task_dealloc(v47);
  sub_1004B84A4(v40, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  v3 = (unint64_t)v37;
  v222 = v42;
  v232 = v44;
  if (!v49)
  {
    if (!*((_QWORD *)v42 + 2))
    {
      v109 = (void *)v37[83];
      v110 = v42;
      goto LABEL_156;
    }
    v215 = 0;
    v67 = v37[78];
    v68 = v37[72];
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v248)(v67, 5, 5, v251);
    swift_storeEnumTagMultiPayload(v67, v68, 1);
    v69 = (char *)objc_allocWithZone(v44);
    v70 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v69[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
    sub_1004B8460(v67, (uint64_t)&v69[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
    v37[41] = v69;
    v37[42] = v44;
    v71 = objc_msgSendSuper2((objc_super *)(v37 + 41), "init");
    sub_1004B84A4(v67, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v72 = *((_QWORD *)v42 + 2);
    if (v72)
    {
      v73 = *(_QWORD *)(v3 + 584);
      v255[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v72);
      v74 = (uint64_t)v42 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
      v75 = *(_QWORD *)(v73 + 72);
      do
      {
        v76 = *(_QWORD *)(v3 + 624);
        v77 = *(_QWORD *)(v3 + 616);
        sub_1004B8460(v74, v76, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B8460(v76, v77, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v78 = (char *)objc_allocWithZone(v232);
        *(_QWORD *)&v78[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
        sub_1004B8460(v77, (uint64_t)&v78[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
        *(_QWORD *)(v3 + 344) = v78;
        *(_QWORD *)(v3 + 352) = v232;
        v79 = objc_msgSendSuper2((objc_super *)(v3 + 344), "init");
        sub_1004B84A4(v77, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v80 = sub_1004B84A4(v76, type metadata accessor for CRLBoardLibraryViewModel.Item);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v80);
        v81 = *(_QWORD *)(v255[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v81);
        v82 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v79);
        specialized ContiguousArray._endMutation()(v82);
        v74 += v75;
        --v72;
      }
      while (v72);
      v70 = (_QWORD *)v255[0];
    }
    v83 = (unint64_t)v253;
    v84 = (void *)v253[83];
    isa = Array._bridgeToObjectiveC()().super.isa;
    v86 = (SEL *)&selRef_setAnchorPointForTexture_;
    objc_msgSend(v71, "setChildren:", isa, swift_bridgeObjectRelease(v70).n128_f64[0]);

    v4 = (uint64_t)v71;
    v87 = objc_msgSend(v84, "children");
    v88 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v87, v232);

    v255[0] = v88;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v89);
    v3 = *(_QWORD *)((v255[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v90 = *(_QWORD *)((v255[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v3 < v90 >> 1)
      goto LABEL_45;
    goto LABEL_184;
  }
  v50 = objc_msgSend(v49, "children");
  v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v50, v44);

  if ((unint64_t)v51 >> 62)
  {
    if (v51 < 0)
      v198 = v51;
    else
      v198 = v51 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v51);
    v214 = _CocoaArrayWrapper.endIndex.getter(v198);
    swift_bridgeObjectRelease(v51);
  }
  else
  {
    v214 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v51);
  v52 = *((_QWORD *)v42 + 2);
  v215 = v49;
  if (v52)
  {
    v53 = v37[73];
    v255[0] = (uint64_t)_swiftEmptyArrayStorage;
    v210 = v49;
    specialized ContiguousArray.reserveCapacity(_:)(v52);
    v54 = (uint64_t)v42 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
    v2 = *(_QWORD *)(v53 + 72);
    do
    {
      v55 = *(_QWORD *)(v3 + 624);
      v56 = *(_QWORD *)(v3 + 616);
      sub_1004B8460(v54, v55, type metadata accessor for CRLBoardLibraryViewModel.Item);
      sub_1004B8460(v55, v56, type metadata accessor for CRLBoardLibraryViewModel.Item);
      v57 = (char *)objc_allocWithZone(v232);
      *(_QWORD *)&v57[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
      sub_1004B8460(v56, (uint64_t)&v57[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
      *(_QWORD *)(v3 + 312) = v57;
      *(_QWORD *)(v3 + 320) = v232;
      v58 = objc_msgSendSuper2((objc_super *)(v3 + 312), "init");
      sub_1004B84A4(v56, type metadata accessor for CRLBoardLibraryViewModel.Item);
      v59 = sub_1004B84A4(v55, type metadata accessor for CRLBoardLibraryViewModel.Item);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v59);
      v60 = *(_QWORD *)(v255[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
      v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
      specialized ContiguousArray._endMutation()(v61);
      v54 += v2;
      --v52;
    }
    while (v52);
    v62 = v255[0];
    v63 = objc_msgSend(v210, "children");
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v63, v232);

    v211 = v4;
    if ((unint64_t)v4 >> 62)
      goto LABEL_173;
    v64 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v4);
    swift_retain(v62);
    goto LABEL_35;
  }
  v95 = (void *)v37[83];
  v96 = v49;
  v97 = objc_msgSend(v95, "children");
  v98 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v97, v44);

  v255[0] = v98;
  v4 = (unint64_t)v98 >> 62;
  v244 = v96;
  if ((unint64_t)v98 >> 62)
  {
    if (v98 < 0)
      v201 = v98;
    else
      v201 = v98 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v98);
    v99 = _CocoaArrayWrapper.endIndex.getter(v201);
    if (v99)
      goto LABEL_48;
LABEL_55:
    swift_bridgeObjectRelease(v98);
    if (v4)
      goto LABEL_195;
    v3 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_57;
  }
  v99 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v98);
  if (!v99)
    goto LABEL_55;
LABEL_48:
  v3 = 0;
  v42 = type metadata accessor for CRLBoardLibraryViewModel.Item;
  while (1)
  {
    v100 = (v98 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v98)
         : *(id *)(v98 + 8 * v3 + 32);
    v1 = (unint64_t)v100;
    v101 = v253[78];
    v102 = v253[72];
    v103 = (uint64_t)v100 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v248)(v101, 5, 5, v251);
    swift_storeEnumTagMultiPayload(v101, v102, 1);
    v2 = sub_100BD121C(v103, v101);
    sub_1004B84A4(v101, type metadata accessor for CRLBoardLibraryViewModel.Item);

    if ((v2 & 1) != 0)
      break;
    v104 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_159;
    ++v3;
    if (v104 == v99)
      goto LABEL_55;
  }
  swift_bridgeObjectRelease(v98);
  v111 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_200:
    if (v98 < 0)
      v204 = v98;
    else
      v204 = v98 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v98);
    v205 = _CocoaArrayWrapper.endIndex.getter(v204);
    swift_bridgeObjectRelease(v98);
    if (v111 == v205)
      goto LABEL_58;
    goto LABEL_65;
  }
  v42 = v222;
  if (v4)
    goto LABEL_200;
  if (v111 == *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_58;
LABEL_65:
  v4 = v3 + 5;
  v42 = type metadata accessor for CRLBoardLibraryViewModel.Item;
  while (1)
  {
    v1 = v4 - 4;
    v83 = v98 & 0xC000000000000001;
    if ((v98 & 0xC000000000000001) != 0)
    {
      v112 = (SEL *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v98);
    }
    else
    {
      if ((v1 & 0x8000000000000000) != 0)
        goto LABEL_164;
      if (v1 >= *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_165;
      v112 = (SEL *)*(id *)(v98 + 8 * v4);
    }
    v86 = v112;
    v62 = v253[78];
    v113 = v253[72];
    v114 = (uint64_t)v112 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
    ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v248)(v62, 5, 5, v251);
    swift_storeEnumTagMultiPayload(v62, v113, 1);
    v2 = sub_100BD121C(v114, v62);
    sub_1004B84A4(v62, type metadata accessor for CRLBoardLibraryViewModel.Item);

    if ((v2 & 1) == 0)
      break;
LABEL_90:
    v123 = v4 - 3;
    if (__OFADD__(v1, 1))
      goto LABEL_166;
    v98 = v255[0];
    if ((unint64_t)v255[0] >> 62)
    {
      if (v255[0] < 0)
        v125 = v255[0];
      else
        v125 = v255[0] & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v255[0]);
      v124 = _CocoaArrayWrapper.endIndex.getter(v125);
      swift_bridgeObjectRelease(v98);
    }
    else
    {
      v124 = *(_QWORD *)((v255[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    ++v4;
    if (v123 == v124)
    {
      while (1)
      {
LABEL_57:
        v42 = v222;
LABEL_58:
        if ((unint64_t)v98 >> 62)
        {
          if (v98 < 0)
            v202 = v98;
          else
            v202 = v98 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v98);
          v105 = _CocoaArrayWrapper.endIndex.getter(v202);
          swift_bridgeObjectRelease(v98);
          if (v105 >= (uint64_t)v3)
          {
LABEL_60:
            v106 = (void *)v253[83];
            sub_100CFE428(v3, v105);
            v107 = v255[0];
            v108 = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v106, "setChildren:", v108, swift_bridgeObjectRelease(v107).n128_f64[0]);

            v3 = (unint64_t)v253;
LABEL_152:
            v4 = v3 + 16;
            v2 = v3;
            v3 += 264;
            ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v248)(*(_QWORD *)(v2 + 456), 5, 5, v251);
            v1 = *((_QWORD *)v42 + 2);
            swift_release(v42);
            if (qword_1013DD748 == -1)
            {
LABEL_153:
              v173 = *(void **)(v2 + 664);
              v174 = *(_QWORD *)(v2 + 456);
              swift_beginAccess(&static OS_os_log.crlBoardLibrary, v3, 0, 0);
              v175 = (void *)static OS_os_log.crlBoardLibrary;
              v176 = sub_1004B804C((uint64_t *)&unk_1013E0180);
              inited = swift_initStackObject(v176, v4);
              *(_OWORD *)(inited + 16) = xmmword_100EF5550;
              v178 = v175;
              sub_100BCAD68();
              v180 = v179;
              v182 = v181;
              *(_QWORD *)(inited + 56) = &type metadata for String;
              v183 = sub_1004CFC2C();
              *(_QWORD *)(inited + 32) = v180;
              *(_QWORD *)(inited + 40) = v182;
              *(_QWORD *)(inited + 96) = &type metadata for Int;
              *(_QWORD *)(inited + 104) = &protocol witness table for Int;
              *(_QWORD *)(inited + 64) = v183;
              *(_QWORD *)(inited + 72) = v214;
              *(_QWORD *)(inited + 136) = &type metadata for Int;
              *(_QWORD *)(inited + 144) = &protocol witness table for Int;
              *(_QWORD *)(inited + 112) = v1;
              v185 = static os_log_type_t.default.getter(v184);
              sub_100A06EBC((uint64_t)v178, &_mh_execute_header, v185, "Updated \"%s\" library folder. Before: %d, After: %d", 50, 2, inited);
              swift_setDeallocating(inited);
              v186 = sub_1004B804C(&qword_1013E0190);
              swift_arrayDestroy(inited + 32, 3, v186);

              sub_1004B84A4(v174, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              v254 = 1;
              v3 = v2;
              goto LABEL_154;
            }
LABEL_167:
            swift_once(&qword_1013DD748, sub_100A023E8);
            goto LABEL_153;
          }
        }
        else
        {
          v105 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v105 >= (uint64_t)v3)
            goto LABEL_60;
        }
        __break(1u);
LABEL_195:
        if (v98 < 0)
          v203 = v98;
        else
          v203 = v98 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v98);
        v3 = _CocoaArrayWrapper.endIndex.getter(v203);
        swift_bridgeObjectRelease(v98);
      }
    }
  }
  if (v1 != v3)
  {
    if (v83)
    {
      v86 = (SEL *)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v98);
      v116 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v98);
LABEL_78:
      v2 = (uint64_t)v116;
      if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v98)
        || v98 < 0
        || (v98 & 0x4000000000000000) != 0)
      {
        v98 = sub_100D14ED8(v98);
        v255[0] = v98;
      }
      v117 = *(void **)((v98 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x20);
      *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x20) = v2;

      specialized Array._endMutation()(v118);
      v119 = v255[0];
      if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v255[0])
        || v119 < 0
        || (v119 & 0x4000000000000000) != 0)
      {
        v119 = sub_100D14ED8(v119);
        v255[0] = v119;
      }
      if ((v1 & 0x8000000000000000) != 0)
        goto LABEL_182;
      v90 = v119 & 0xFFFFFFFFFFFFFF8;
      if (v1 >= *(_QWORD *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_183;
      v120 = *(void **)(v90 + 8 * v4);
      *(_QWORD *)(v90 + 8 * v4) = v86;

      specialized Array._endMutation()(v121);
      goto LABEL_89;
    }
    if ((v3 & 0x8000000000000000) == 0)
    {
      v90 = v98 & 0xFFFFFFFFFFFFF8;
      v62 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v3 >= v62)
        goto LABEL_179;
      v115 = (SEL *)*(id *)(v98 + 8 * v3 + 32);
      if ((v1 & 0x8000000000000000) != 0)
        goto LABEL_180;
      if (v1 >= v62)
        goto LABEL_181;
      v86 = v115;
      v116 = *(id *)(v98 + 8 * v4);
      goto LABEL_78;
    }
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v3 + 1, 1);
LABEL_45:
    v91 = *(void **)(v83 + 664);
    v92 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v4);
    specialized Array._endMutation()(v92);
    v93 = v255[0];
    v94 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v91, v86[99], v94, swift_bridgeObjectRelease(v93).n128_f64[0]);

    v214 = 0;
    v3 = v83;
    goto LABEL_152;
  }
LABEL_89:
  v122 = __OFADD__(v3++, 1);
  if (!v122)
    goto LABEL_90;
  __break(1u);
LABEL_173:
  if (v4 < 0)
    v199 = v4;
  else
    v199 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  swift_retain(v62);
  v64 = _CocoaArrayWrapper.endIndex.getter(v199);
LABEL_35:
  v3 = (unint64_t)v253;
  v65 = v62;
  if ((v62 & 0x8000000000000000) != 0 || (v62 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v62);
    v238 = _CocoaArrayWrapper.endIndex.getter(v200);
    swift_release(v62);
  }
  else
  {
    v238 = *(_QWORD *)(v62 + 16);
  }
  v1 = 0;
  v66 = 0;
  v206 = v253[58];
  v229 = v253[52];
  v235 = v62 & 0xC000000000000001;
  v209 = v253[50];
  v212 = v62;
  v227 = v64;
  while (2)
  {
    if (v66 == v64)
    {
      v4 = 0;
      v127 = 0;
      v66 = v64;
      if (v238 == v1)
        goto LABEL_148;
LABEL_111:
      if (!v235)
      {
        if (v1 < *(_QWORD *)(v65 + 16))
        {
          v129 = *(id *)(v65 + 8 * v1 + 32);
          goto LABEL_114;
        }
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
        goto LABEL_167;
      }
      v129 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v65);
LABEL_114:
      v127 = v129;
      if (__OFADD__(v1, 1))
        goto LABEL_158;
      if (!v4)
        goto LABEL_148;
      if (!v129)
      {
        v42 = v222;
        goto LABEL_141;
      }
      v130 = *(_QWORD *)(v3 + 576);
      v131 = *(_QWORD *)(v3 + 424);
      v241 = (void *)v4;
      v245 = v129;
      v132 = v4 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
      v133 = (uint64_t)v127 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
      v134 = (unsigned __int8 *)(v131 + *(int *)(v229 + 48));
      sub_1004B8460(v132, v131, type metadata accessor for CRLBoardLibraryViewModel.Item);
      sub_1004B8460(v133, (uint64_t)v134, type metadata accessor for CRLBoardLibraryViewModel.Item);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v131, v130);
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v136 = *(_QWORD *)(v3 + 576);
          sub_1004B8460(*(_QWORD *)(v3 + 424), *(_QWORD *)(v3 + 600), type metadata accessor for CRLBoardLibraryViewModel.Item);
          v137 = swift_getEnumCaseMultiPayload(v134, v136);
          v138 = *(_QWORD *)(v3 + 600);
          if (v137 == 1)
          {
            v140 = *(_QWORD *)(v3 + 440);
            v139 = *(_QWORD *)(v3 + 448);
            v141 = *(_QWORD *)(v3 + 408);
            sub_1004B84E0(v138, v139, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            sub_1004B84E0((uint64_t)v134, v140, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v142 = v141 + *(int *)(v209 + 48);
            sub_1004B8460(v139, v141, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            sub_1004B8460(v140, v142, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v143 = (char *)&loc_100CD2388
                 + *((int *)qword_100CD2DD0
                   + (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48))(v141, 5, v251));
            __asm { BR              X9 }
          }
          v171 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
LABEL_144:
          sub_1004B84A4(v138, v171);
LABEL_145:
          sub_1004CB800(*(_QWORD *)(v3 + 424), (uint64_t *)&unk_1013E87A0);

LABEL_146:
          swift_release(v65);
          swift_bridgeObjectRelease_n(v211, 2);
          goto LABEL_150;
        }
        v145 = *(_QWORD *)(v3 + 592);
        v146 = *(_QWORD *)(v3 + 576);
        sub_1004B8460(*(_QWORD *)(v3 + 424), v145, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v147 = *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48);
        v148 = v145 + v147;
        v149 = *(_QWORD *)(v145 + v147);
        v224 = *(_QWORD *)(v148 + 8);
        v150 = swift_getEnumCaseMultiPayload(v134, v146);
        v151 = *(_QWORD *)(v3 + 592);
        if (v150 != 2)
        {
          swift_bridgeObjectRelease(v224);
          v171 = type metadata accessor for CRLBoardIdentifier;
          v138 = v151;
          goto LABEL_144;
        }
        v208 = v149;
        v152 = *(_QWORD *)(v3 + 504);
        v153 = v253[62];
        v154 = v253[61];
        v155 = v253[60];
        v207 = *(_QWORD *)&v134[v147];
        v213 = *(_QWORD *)&v134[v147 + 8];
        sub_1004B84E0(v151, v152, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84E0((uint64_t)v134, v153, type metadata accessor for CRLBoardIdentifier);
        v156 = static UUID.== infix(_:_:)(v152);
        sub_1004B8460(v152, v154, type metadata accessor for CRLBoardIdentifier);
        v157 = v153;
        v3 = (unint64_t)v253;
        sub_1004B8460(v157, v155, type metadata accessor for CRLBoardIdentifier);
        v158 = v253[60];
        v159 = v253[61];
        if ((v156 & 1) != 0)
        {
          v160 = *(int *)(v206 + 20);
          v161 = *(_QWORD *)(v159 + v160);
          v162 = *(_QWORD *)(v159 + v160 + 8);
          v163 = (_QWORD *)(v158 + v160);
          v164 = v163[1];
          if (v161 == *v163 && v162 == v164)
          {
            sub_1004B84A4(v253[60], type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4(v159, type metadata accessor for CRLBoardIdentifier);
            goto LABEL_130;
          }
          v165 = _stringCompareWithSmolCheck(_:_:expecting:)(v161, v162, *v163, v164, 0);
          sub_1004B84A4(v158, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v159, type metadata accessor for CRLBoardIdentifier);
          if ((v165 & 1) != 0)
          {
LABEL_130:
            v4 = (uint64_t)v241;
            v166 = v224;
            v167 = v213;
            if (v208 == v207 && v224 == v213)
            {
              v2 = 1;
              v167 = v224;
            }
            else
            {
              v168 = _stringCompareWithSmolCheck(_:_:expecting:)(v208, v224, v207, v213, 0);
              v166 = v224;
              v2 = v168;
            }
LABEL_136:
            v170 = v253[62];
            v169 = v253[63];
            swift_bridgeObjectRelease(v166);
            swift_bridgeObjectRelease(v167);
            sub_1004B84A4(v170, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4(v169, type metadata accessor for CRLBoardIdentifier);
            v126 = v245;
            v65 = v212;
LABEL_101:
            sub_1004B84A4(*(_QWORD *)(v3 + 424), type metadata accessor for CRLBoardLibraryViewModel.Item);

            ++v1;
            v64 = v227;
            if ((v2 & 1) == 0)
              goto LABEL_146;
            continue;
          }
          v2 = 0;
          v4 = (uint64_t)v241;
        }
        else
        {
          sub_1004B84A4(v253[60], type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v159, type metadata accessor for CRLBoardIdentifier);
          v2 = 0;
          v4 = (uint64_t)v241;
        }
        v166 = v224;
        v167 = v213;
        goto LABEL_136;
      }
      v144 = *(_QWORD *)(v3 + 576);
      sub_1004B8460(*(_QWORD *)(v3 + 424), *(_QWORD *)(v3 + 608), type metadata accessor for CRLBoardLibraryViewModel.Item);
      if (swift_getEnumCaseMultiPayload(v134, v144))
        goto LABEL_145;
      v2 = **(unsigned __int8 **)(v3 + 608) == *v134;
      v4 = (uint64_t)v241;
      v126 = v245;
      goto LABEL_101;
    }
    break;
  }
  if ((v211 & 0xC000000000000001) != 0)
  {
    v128 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v66, v211);
  }
  else
  {
    if ((v66 & 0x8000000000000000) != 0)
      goto LABEL_161;
    if (v66 >= *(_QWORD *)((v211 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_162;
    v128 = *(id *)(v211 + 32 + 8 * v66);
  }
  v4 = (uint64_t)v128;
  v122 = __OFADD__(v66++, 1);
  if (v122)
    goto LABEL_163;
  if (v238 != v1)
    goto LABEL_111;
  v42 = v222;
  if (v128)
  {
LABEL_141:
    swift_release(v65);
    swift_bridgeObjectRelease_n(v211, 2);

LABEL_151:
    v172 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v210, "setChildren:", v172, swift_release(v65).n128_f64[0]);

    goto LABEL_152;
  }
  v127 = 0;
LABEL_148:
  swift_release(v65);
  swift_bridgeObjectRelease(v211);
  if (v127)
  {
    swift_bridgeObjectRelease(v211);

LABEL_150:
    v42 = v222;
    goto LABEL_151;
  }
  v109 = *(void **)(v3 + 664);
  swift_bridgeObjectRelease(v211);
  swift_release(v222);

  v110 = (uint64_t (*)(uint64_t))v65;
LABEL_156:
  swift_release(v110);

  v254 = 0;
LABEL_154:
  v187 = *(_QWORD *)(v3 + 632);
  v188 = *(_QWORD *)(v3 + 624);
  v189 = v3;
  v190 = *(_QWORD *)(v3 + 616);
  v191 = *(_QWORD *)(v189 + 608);
  v192 = *(_QWORD *)(v189 + 600);
  v193 = *(_QWORD *)(v189 + 592);
  v194 = *(_QWORD *)(v189 + 568);
  v195 = *(_QWORD *)(v189 + 560);
  v196 = *(_QWORD *)(v189 + 552);
  v197 = *(_QWORD *)(v189 + 528);
  v220 = *(_QWORD *)(v189 + 512);
  v223 = *(_QWORD *)(v189 + 504);
  v225 = *(_QWORD *)(v189 + 496);
  v228 = *(_QWORD *)(v189 + 488);
  v230 = *(_QWORD *)(v189 + 480);
  v233 = *(Class *)(v189 + 472);
  v236 = *(_QWORD *)(v189 + 456);
  v239 = *(_QWORD *)(v189 + 448);
  v242 = *(_QWORD *)(v189 + 440);
  v246 = *(_QWORD *)(v189 + 432);
  v249 = *(_QWORD *)(v189 + 424);
  v252 = *(_QWORD *)(v189 + 408);
  swift_task_dealloc(v187);
  swift_task_dealloc(v188);
  swift_task_dealloc(v190);
  swift_task_dealloc(v191);
  swift_task_dealloc(v192);
  swift_task_dealloc(v193);
  swift_task_dealloc(v194);
  swift_task_dealloc(v195);
  swift_task_dealloc(v196);
  swift_task_dealloc(v197);
  swift_task_dealloc(v220);
  swift_task_dealloc(v223);
  swift_task_dealloc(v225);
  swift_task_dealloc(v228);
  swift_task_dealloc(v230);
  swift_task_dealloc(v233);
  swift_task_dealloc(v236);
  swift_task_dealloc(v239);
  swift_task_dealloc(v242);
  swift_task_dealloc(v246);
  swift_task_dealloc(v249);
  swift_task_dealloc(v252);
  (*(void (**)(_QWORD))(v189 + 8))(v254);
}

uint64_t sub_100CD2DE8()
{
  _QWORD *v0;

  swift_task_dealloc(v0[85]);
  return swift_task_switch(sub_100CD2E24, v0[81], v0[82]);
}

uint64_t sub_100CD2E24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  swift_release(*(_QWORD *)(v0 + 640));
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(void **)(v0 + 664);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 240, 0, 0);
  v3 = (void *)static OS_os_log.crlBoardLibrary;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v4, v0 + 168);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v0 + 376) = v1;
  v6 = v3;
  swift_errorRetain(v1);
  v7 = sub_1004B804C(&qword_1013E0210);
  v8 = String.init<A>(describing:)(v0 + 376, v7);
  v10 = v9;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v11 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v10;
  v12 = static os_log_type_t.error.getter(v11);
  sub_100A06EBC((uint64_t)v6, &_mh_execute_header, v12, "Error updating Recently Deleted snapshot from store: %@", 55, 2, inited);

  swift_errorRelease(v1);
  swift_setDeallocating(inited);
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v13);

  v14 = *(_QWORD *)(v0 + 624);
  v15 = *(_QWORD *)(v0 + 616);
  v16 = *(_QWORD *)(v0 + 608);
  v17 = *(_QWORD *)(v0 + 600);
  v18 = *(_QWORD *)(v0 + 592);
  v19 = *(_QWORD *)(v0 + 568);
  v20 = *(_QWORD *)(v0 + 560);
  v21 = *(_QWORD *)(v0 + 552);
  v22 = *(_QWORD *)(v0 + 528);
  v24 = *(_QWORD *)(v0 + 512);
  v25 = *(_QWORD *)(v0 + 504);
  v26 = *(_QWORD *)(v0 + 496);
  v27 = *(_QWORD *)(v0 + 488);
  v28 = *(_QWORD *)(v0 + 480);
  v29 = *(_QWORD *)(v0 + 472);
  v30 = *(_QWORD *)(v0 + 456);
  v31 = *(_QWORD *)(v0 + 448);
  v32 = *(_QWORD *)(v0 + 440);
  v33 = *(_QWORD *)(v0 + 432);
  v34 = *(_QWORD *)(v0 + 424);
  v35 = *(_QWORD *)(v0 + 408);
  swift_task_dealloc(*(_QWORD *)(v0 + 632));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

BOOL sub_100CD30C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t *v65;
  uint64_t v66;
  _BYTE v67[24];
  uint64_t v68;

  v61 = a5;
  v63 = a4;
  v65 = a3;
  v8 = sub_1004B804C(&qword_10140DF80);
  __chkstk_darwin(v8);
  v66 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013E4690);
  v11 = __chkstk_darwin(v10);
  v64 = (unsigned __int8 *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v58 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v58 - v16;
  v18 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v19 = *(_QWORD **)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v62 = (unsigned __int8 *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v58 - v23;
  __chkstk_darwin(v22);
  v68 = (uint64_t)&v58 - v25;
  v26 = (uint64_t *)(a2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata);
  swift_beginAccess(v26, v67, 32, 0);
  v27 = *v26;
  if (!*(_QWORD *)(v27 + 16) || (v28 = sub_100843264(a1), (v29 & 1) == 0))
  {
    swift_endAccess(v67);
    return 1;
  }
  v59 = a1;
  v60 = v5;
  v30 = v19[9];
  sub_1004B8460(*(_QWORD *)(v27 + 56) + v30 * v28, (uint64_t)v24, type metadata accessor for CRLBoardViewModelMetadata);
  v31 = v68;
  sub_1004B84E0((uint64_t)v24, v68, type metadata accessor for CRLBoardViewModelMetadata);
  swift_endAccess(v67);
  sub_1004B8460(v31, (uint64_t)v17, type metadata accessor for CRLBoardViewModelMetadata);
  v32 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v19[7];
  v33 = 1;
  v32(v17, 0, 1, v18);
  v34 = *v65;
  if (*(_QWORD *)(*v65 + 16))
  {
    v35 = sub_100843264(v59);
    if ((v36 & 1) != 0)
    {
      sub_1004B8460(*(_QWORD *)(v34 + 56) + v35 * v30, (uint64_t)v15, type metadata accessor for CRLBoardViewModelMetadata);
      v33 = 0;
    }
  }
  v32(v15, v33, 1, v18);
  v37 = *(int *)(v8 + 48);
  v38 = v66;
  v39 = v66 + v37;
  sub_1004CB7BC((uint64_t)v17, v66, &qword_1013E4690);
  sub_1004CB7BC((uint64_t)v15, v39, &qword_1013E4690);
  v40 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v19[6];
  if (v40(v38, 1, v18) == 1)
  {
    sub_1004CB800((uint64_t)v15, &qword_1013E4690);
    sub_1004CB800((uint64_t)v17, &qword_1013E4690);
    if (v40(v39, 1, v18) == 1)
    {
      sub_1004CB800(v38, &qword_1013E4690);
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  v41 = v64;
  sub_1004CB7BC(v38, (uint64_t)v64, &qword_1013E4690);
  if (v40(v39, 1, v18) == 1)
  {
    sub_1004CB800((uint64_t)v15, &qword_1013E4690);
    sub_1004CB800((uint64_t)v17, &qword_1013E4690);
    sub_1004B84A4((uint64_t)v41, type metadata accessor for CRLBoardViewModelMetadata);
LABEL_12:
    sub_1004CB800(v38, &qword_10140DF80);
LABEL_23:
    sub_1004B84A4(v68, type metadata accessor for CRLBoardViewModelMetadata);
    return 1;
  }
  v42 = v62;
  sub_1004B84E0(v39, (uint64_t)v62, type metadata accessor for CRLBoardViewModelMetadata);
  v43 = sub_100BC0CC4(v41, v42);
  sub_1004B84A4((uint64_t)v42, type metadata accessor for CRLBoardViewModelMetadata);
  sub_1004CB800((uint64_t)v15, &qword_1013E4690);
  sub_1004CB800((uint64_t)v17, &qword_1013E4690);
  sub_1004B84A4((uint64_t)v41, type metadata accessor for CRLBoardViewModelMetadata);
  sub_1004CB800(v38, &qword_1013E4690);
  if ((v43 & 1) == 0)
    goto LABEL_23;
LABEL_14:
  v44 = v63;
  v45 = v59;
  if (!*(_QWORD *)(v63 + 16))
    goto LABEL_21;
  v46 = sub_100843264(v59);
  if ((v47 & 1) == 0 || !*(_QWORD *)(v61 + 16))
    goto LABEL_21;
  v48 = (uint64_t *)(*(_QWORD *)(v44 + 56) + 16 * v46);
  v50 = *v48;
  v49 = v48[1];
  swift_bridgeObjectRetain(v49);
  v51 = v61;
  v52 = sub_100843264(v45);
  if ((v53 & 1) == 0 || (v54 = (_QWORD *)(*(_QWORD *)(v51 + 56) + 16 * v52), v55 = v54[1], v50 == *v54) && v49 == v55)
  {
    swift_bridgeObjectRelease(v49);
LABEL_21:
    sub_1004B84A4(v68, type metadata accessor for CRLBoardViewModelMetadata);
    return 0;
  }
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v49, *v54, v55, 0);
  swift_bridgeObjectRelease(v49);
  sub_1004B84A4(v68, type metadata accessor for CRLBoardViewModelMetadata);
  return (v57 & 1) == 0;
}

uint64_t sub_100CD35B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 144) = a4;
  return swift_task_switch(sub_100CD35CC, 0, 0);
}

uint64_t sub_100CD35CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[18];
  v0[19] = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  v3 = swift_task_alloc(32);
  v0[20] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[21] = v4;
  *v4 = v0;
  v4[1] = sub_100CD36A4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 23, 0, 0, 0xD00000000000001DLL, 0x8000000101009B20, sub_100CEC364, v3, &type metadata for CRLBoardDataStore.CRLBoardDataStoreMetadata);
}

uint64_t sub_100CD36A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CD37A8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 160));
    v4 = sub_100CD3710;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CD3710()
{
  uint64_t v0;
  void *v1;
  Class isa;
  Class v3;

  v1 = *(void **)(v0 + 152);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v1, "setValue:forKey:", isa, CFSTR("CRLUserHasDataUserDefault"));

  v3 = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v1, "setValue:forKey:", v3, CFSTR("CRLUserHasUnsyncedDataUserDefault"));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CD37A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Class isa;
  Class v16;

  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v1 = *(_QWORD *)(v0 + 176);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 88, 0, 0);
  v2 = (void *)static OS_os_log.crlBoardLibrary;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v0 + 136, v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = v2;
  v8 = Error.localizedDescription.getter(v5, v6);
  v10 = v9;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v11 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v10;
  v12 = static os_log_type_t.error.getter(v11);
  sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v12, "Error in fetching board datastore metadata: %@", 46, 2, inited);
  swift_setDeallocating(inited);
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v13);

  swift_errorRelease(v1);
  v14 = *(void **)(v0 + 152);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v14, "setValue:forKey:", isa, CFSTR("CRLUserHasDataUserDefault"));

  v16 = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v14, "setValue:forKey:", v16, CFSTR("CRLUserHasUnsyncedDataUserDefault"));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CD3980@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  char v56[24];

  v50 = a2;
  v51 = a4;
  v52 = a5;
  v53 = a3;
  v6 = sub_1004B804C(&qword_1013F5478);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v49 = (uint64_t)&v49 - v10;
  v54 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v54);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CRLBoardIdentifier(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v49 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v49 - v23;
  v25 = a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v56, 0, 0);
  sub_1004B8460(v25, (uint64_t)v12, type metadata accessor for CRLBoardCRDTData);
  v26 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v26);
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardCRDTData);
  v27 = a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName;
  v28 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v29 = *(_QWORD *)(v27 + 8);
  swift_bridgeObjectRetain(v29);
  sub_10067AFD0((uint64_t)v15, v28, v29, (uint64_t)v24);
  v30 = (uint64_t *)(v53 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  swift_beginAccess(v53 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos, v55, 32, 0);
  v31 = *v30;
  if (*(_QWORD *)(*v30 + 16) && (v32 = sub_100843264((uint64_t)v24), (v33 & 1) != 0))
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
    swift_endAccess(v55);
    sub_1004B8460((uint64_t)v24, (uint64_t)v22, type metadata accessor for CRLBoardIdentifier);
    v35 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 16)
                                           + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard)
                               + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState)
                   + 16);
    if (v35)
    {
      swift_retain(v34);
      v36 = v35;
      v37 = v49;
      sub_100BC0994(v36, v49);
      v38 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 0, 1, v38);
    }
    else
    {
      v42 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
      v37 = v49;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v49, 1, 1, v42);
      swift_retain(v34);
    }
    v39 = v52;
    sub_10083F2D0(v37, (uint64_t)v22);
    swift_release(v34);
  }
  else
  {
    swift_endAccess(v55);
    v39 = v52;
    v40 = v50;
    if (v50)
    {
      sub_1004B8460((uint64_t)v24, (uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
      sub_100BC0994(v40, (uint64_t)v9);
      v41 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v9, 0, 1, v41);
      sub_10083F2D0((uint64_t)v9, (uint64_t)v19);
    }
  }
  v43 = (_QWORD *)(v39 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48));
  sub_1004B8460((uint64_t)v24, v39, type metadata accessor for CRLBoardIdentifier);
  sub_1004B8460(v25, (uint64_t)v12, type metadata accessor for CRLBoardCRDTData);
  v44 = sub_1004B804C(&qword_1013E1980);
  CRRegister.wrappedValue.getter(v44);
  v45 = v55[0];
  v46 = v55[1];
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4((uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
  *v43 = v45;
  v43[1] = v46;
  v47 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  return swift_storeEnumTagMultiPayload(v39, v47, 2);
}

uint64_t sub_100CD3DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  v50 = a1;
  v51 = (char *)a3;
  v4 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v4);
  v49 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for CRLBoardViewModelMetadata(0);
  v48 = *((_QWORD *)v6 - 1);
  __chkstk_darwin(v6);
  v8 = (_WORD *)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
  v46 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLBoardIdentifier(0);
  v15 = __chkstk_darwin(v14);
  v47 = (uint64_t)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v42 - v17;
  sub_1004B8460(a2 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v13, type metadata accessor for CRLBoardLibraryViewModel.Item);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 2)
  {
    v19 = sub_1004B804C((uint64_t *)&unk_1013EA630);
    swift_bridgeObjectRelease(*(_QWORD *)&v13[*(int *)(v19 + 48) + 8]);
    v20 = sub_1004B84E0((uint64_t)v13, (uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
    v21 = *(_QWORD *)(*(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController]
                    + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
    __chkstk_darwin(v20);
    *(&v42 - 2) = v18;
    swift_bridgeObjectRetain(v21);
    v22 = (char *)sub_100C9D5E8((uint64_t (*)(id *))sub_100BBC47C, (uint64_t)(&v42 - 4), v21);
    swift_bridgeObjectRelease(v21);
    if (v22)
    {
      v23 = *(_QWORD *)&v22[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_shareString];
      v42 = v10;
      v43 = v23;
      v51 = v18;
      v44 = *(_QWORD *)&v22[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_shareString + 8];
      v24 = v44;
      v25 = &v10[*(int *)(v52 + 28)];
      v26 = &v22[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_shareURL];
      v27 = type metadata accessor for URL(0);
      v45 = v22;
      v28 = *(_QWORD *)(v27 - 8);
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      v30 = (uint64_t)v42;
      v29 = v43;
      *v42 = 0;
      *(_QWORD *)(v30 + 8) = v29;
      *(_QWORD *)(v30 + 16) = v24;
      *(_BYTE *)(v30 + 24) = 0;
      v31 = &v22[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_timeStamp];
      v32 = (char *)v8 + v6[6];
      v33 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32, v31, v33);
      v34 = (uint64_t)v8 + v6[7];
      sub_1004B8460(v30, v34, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v34, 0, 1, v52);
      *v8 = 0;
      *((_BYTE *)v8 + v6[8]) = 1;
      *((_BYTE *)v8 + v6[9]) = 1;
      *((_BYTE *)v8 + v6[10]) = 0;
      v35 = (char *)v8 + v6[11];
      *(_QWORD *)v35 = 0;
      v35[8] = 1;
      *((_BYTE *)v8 + v6[12]) = 0;
      *((_BYTE *)v8 + v6[13]) = 1;
      *((_BYTE *)v8 + v6[14]) = 0;
      *((_BYTE *)v8 + v6[15]) = 0;
      v36 = (uint64_t)v51;
      v37 = v47;
      sub_1004B8460((uint64_t)v51, v47, type metadata accessor for CRLBoardIdentifier);
      v38 = v49;
      sub_1004B8460((uint64_t)v8, v49, type metadata accessor for CRLBoardViewModelMetadata);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v48 + 56))(v38, 0, 1, v6);
      swift_bridgeObjectRetain(v44);
      sub_10083F150(v38, v37);

      sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardViewModelMetadata);
      sub_1004B84A4(v30, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
      v39 = v36;
      v40 = type metadata accessor for CRLBoardIdentifier;
    }
    else
    {
      v40 = type metadata accessor for CRLBoardIdentifier;
      v39 = (uint64_t)v18;
    }
  }
  else
  {
    v40 = type metadata accessor for CRLBoardLibraryViewModel.Item;
    v39 = (uint64_t)v13;
  }
  return sub_1004B84A4(v39, v40);
}

uint64_t sub_100CD4234(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;

  v79 = a3;
  v5 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v5);
  v74 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v7 - 8);
  v77 = v7;
  v78 = v8;
  v9 = __chkstk_darwin(v7);
  v69 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v72 = (uint64_t)&v67 - v11;
  v12 = sub_1004B804C(&qword_1013E04F0);
  v13 = __chkstk_darwin(v12);
  v70 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v73 = (char *)&v67 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v67 - v17;
  v19 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v19 - 8);
  v76 = v19;
  v20 = __chkstk_darwin(v19);
  v68 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v71 = (char *)&v67 - v22;
  v23 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v67 - v27;
  v29 = type metadata accessor for CRLBoardIdentifier(0);
  v30 = __chkstk_darwin(v29);
  v80 = (uint64_t)&v67 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v33 = (char *)&v67 - v32;
  v34 = *a1;
  v35 = *a2;
  sub_1004B8460(v34 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v28, type metadata accessor for CRLBoardLibraryViewModel.Item);
  if (swift_getEnumCaseMultiPayload(v28, v23) != 2)
  {
    v50 = (uint64_t)v28;
LABEL_9:
    sub_1004B84A4(v50, type metadata accessor for CRLBoardLibraryViewModel.Item);
    goto LABEL_10;
  }
  v36 = sub_1004B804C((uint64_t *)&unk_1013EA630);
  swift_bridgeObjectRelease(*(_QWORD *)&v28[*(int *)(v36 + 48) + 8]);
  sub_1004B84E0((uint64_t)v28, (uint64_t)v33, type metadata accessor for CRLBoardIdentifier);
  sub_1004B8460(v35 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v26, type metadata accessor for CRLBoardLibraryViewModel.Item);
  if (swift_getEnumCaseMultiPayload(v26, v23) != 2)
  {
    sub_1004B84A4((uint64_t)v33, type metadata accessor for CRLBoardIdentifier);
    v50 = (uint64_t)v26;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v26[*(int *)(v36 + 48) + 8]);
  sub_1004B84E0((uint64_t)v26, v80, type metadata accessor for CRLBoardIdentifier);
  v37 = v79;
  v38 = *(_QWORD *)(v79 + 16);
  v67 = v33;
  if (!v38 || (v39 = sub_100843264((uint64_t)v33), v37 = v79, (v40 & 1) == 0))
  {
    v46 = v75;
    v44 = v76;
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56);
    v48(v18, 1, 1, v76);
    v45 = v77;
    goto LABEL_12;
  }
  v41 = *((_QWORD *)v78 + 9);
  v42 = v79;
  v43 = v72;
  sub_1004B8460(*(_QWORD *)(v79 + 56) + v41 * v39, v72, type metadata accessor for CRLBoardViewModelMetadata);
  v44 = v76;
  v45 = v77;
  v46 = v75;
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  v47(v18, v43 + *(int *)(v77 + 24), v76);
  sub_1004B84A4(v43, type metadata accessor for CRLBoardViewModelMetadata);
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
  v48(v18, 0, 1, v44);
  v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  if (v49(v18, 1, v44) == 1)
  {
    v37 = v42;
LABEL_12:
    sub_1004CB800((uint64_t)v18, &qword_1013E04F0);
    v53 = (uint64_t)v73;
    v52 = (uint64_t)v74;
    if (*(_QWORD *)(v37 + 16) && (v54 = sub_100843264(v80), (v55 & 1) != 0))
    {
      sub_1004B8460(*(_QWORD *)(v37 + 56) + *((_QWORD *)v78 + 9) * v54, v52, type metadata accessor for CRLBoardViewModelMetadata);
      v56 = 0;
    }
    else
    {
      v56 = 1;
    }
    v57 = v78;
    (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v78 + 7))(v52, v56, 1, v45);
    sub_1004B84A4(v80, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v67, type metadata accessor for CRLBoardIdentifier);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v57 + 6))(v52, 1, v45) == 1)
    {
      sub_1004CB800(v52, &qword_1013E4690);
      v48((char *)v53, 1, 1, v44);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v53, v52 + *(int *)(v45 + 24), v44);
      sub_1004B84A4(v52, type metadata accessor for CRLBoardViewModelMetadata);
      v51 = 1;
      v48((char *)v53, 0, 1, v44);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v53, 1, v44) != 1)
      {
LABEL_20:
        sub_1004CB800(v53, &qword_1013E04F0);
        return v51 & 1;
      }
    }
    v51 = 0;
    goto LABEL_20;
  }
  v74 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v49;
  v78 = v47;
  v59 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v60 = v71;
  v59(v71, v18, v44);
  if (*(_QWORD *)(v42 + 16) && (v61 = sub_100843264(v80), (v62 & 1) != 0))
  {
    v63 = v69;
    sub_1004B8460(*(_QWORD *)(v79 + 56) + v61 * v41, v69, type metadata accessor for CRLBoardViewModelMetadata);
    v64 = (uint64_t)v70;
    v78(v70, v63 + *(int *)(v77 + 24), v44);
    sub_1004B84A4(v63, type metadata accessor for CRLBoardViewModelMetadata);
    v48((char *)v64, 0, 1, v44);
    if (v74(v64, 1, v44) != 1)
    {
      v65 = v68;
      v59(v68, (char *)v64, v44);
      v51 = static Date.> infix(_:_:)(v60, v65);
      v66 = *(void (**)(char *, uint64_t))(v46 + 8);
      v66(v65, v44);
      v66(v60, v44);
      sub_1004B84A4(v80, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v67, type metadata accessor for CRLBoardIdentifier);
      return v51 & 1;
    }
  }
  else
  {
    v64 = (uint64_t)v70;
    v48(v70, 1, 1, v44);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v60, v44);
  sub_1004B84A4(v80, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v67, type metadata accessor for CRLBoardIdentifier);
  sub_1004CB800(v64, &qword_1013E04F0);
LABEL_10:
  v51 = 0;
  return v51 & 1;
}

double sub_100CD4934(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  double *v13;
  double **v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t inited;
  unint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double **v70;
  uint64_t v71;
  char v72[112];
  char v73[72];
  double *v74;

  v3 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v3);
  v5 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v71 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v70 = (double **)((char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v69 = (uint64_t)&v63 - v9;
  v10 = sub_100CEC1AC(a1);
  if (v10)
  {
    v11 = v10;
    v66 = v1;
    v12 = *(_QWORD *)(v10 + 16);
    v13 = _swiftEmptyArrayStorage;
    if (v12)
    {
      v64 = a1;
      v65 = v5;
      v74 = _swiftEmptyArrayStorage;
      v14 = &v74;
      sub_1006006EC(0, v12, 0);
      v5 = sub_100CE048C(v11);
      a1 = v15;
      v17 = v16 & 1;
      v68 = v11 + 56;
      v67 = v11;
      while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v11 + 32))
      {
        if (((*(_QWORD *)(v68 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
          goto LABEL_20;
        if (*(_DWORD *)(v11 + 36) != (_DWORD)a1)
          goto LABEL_21;
        v18 = v69;
        sub_1004B8460(*(_QWORD *)(v11 + 48) + *(_QWORD *)(v71 + 72) * v5, v69, type metadata accessor for CRLBoardIdentifier);
        v14 = v70;
        v19 = sub_1004B84E0(v18, (uint64_t)v70, type metadata accessor for CRLBoardIdentifier);
        v20 = UUID.uuidString.getter(v19);
        v22 = v21;
        sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
        v13 = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v14 = &v74;
          sub_1006006EC(0, *((_QWORD *)v13 + 2) + 1, 1);
          v13 = v74;
        }
        v24 = *((_QWORD *)v13 + 2);
        v23 = *((_QWORD *)v13 + 3);
        if (v24 >= v23 >> 1)
        {
          v14 = &v74;
          sub_1006006EC(v23 > 1, v24 + 1, 1);
          v13 = v74;
        }
        *((_QWORD *)v13 + 2) = v24 + 1;
        v25 = &v13[2 * v24];
        *((_QWORD *)v25 + 4) = v20;
        *((_QWORD *)v25 + 5) = v22;
        v11 = v67;
        v26 = sub_1005C3B08(v5, a1, v17 & 1, v67);
        v5 = v26;
        a1 = v27;
        v17 = v28 & 1;
        if (!--v12)
        {
          sub_100503494(v26, v27, v28 & 1);
          v5 = v65;
          a1 = v64;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    else
    {
LABEL_17:
      v12 = v11;
      v74 = v13;
      v40 = sub_1004B804C((uint64_t *)&unk_1013E4970);
      v41 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
      v14 = (double **)BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v40, v41);
      v17 = v42;
      swift_bridgeObjectRelease();
      if (qword_1013DD748 == -1)
      {
LABEL_18:
        swift_beginAccess(&static OS_os_log.crlBoardLibrary, &v74, 0, 0);
        v43 = (void *)static OS_os_log.crlBoardLibrary;
        v44 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        inited = swift_initStackObject(v44, v72);
        *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
        *(_QWORD *)(inited + 56) = &type metadata for String;
        v46 = sub_1004CFC2C();
        *(_QWORD *)(inited + 64) = v46;
        *(_QWORD *)(inited + 32) = v14;
        *(_QWORD *)(inited + 40) = v17;
        v47 = v43;
        v48 = Notification.description.getter();
        *(_QWORD *)(inited + 96) = &type metadata for String;
        *(_QWORD *)(inited + 104) = v46;
        *(_QWORD *)(inited + 72) = v48;
        *(_QWORD *)(inited + 80) = v49;
        v51 = static os_log_type_t.default.getter(v50);
        sub_100A06EBC((uint64_t)v47, &_mh_execute_header, v51, "Updating metadata for boards (%@) for notification: %@", 54, 2, inited);
        swift_setDeallocating(inited);
        v52 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(inited + 32, 2, v52);

        v53 = v66;
        sub_100CD4F40(a1);
        v54 = type metadata accessor for TaskPriority(0);
        v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56);
        v55(v5, 1, 1, v54);
        v56 = (_QWORD *)swift_allocObject(&unk_10129F7B8, 40, 7);
        v56[2] = 0;
        v56[3] = 0;
        v56[4] = v53;
        v57 = v53;
        v58 = sub_1009880C4(v5, (uint64_t)&unk_1013E7C08, (uint64_t)v56);
        swift_release(v58);
        sub_1004CB800(v5, &qword_1013E01F0);
        v55(v5, 1, 1, v54);
        type metadata accessor for MainActor(0);
        v59 = v57;
        v60 = static MainActor.shared.getter(v59);
        v61 = (_QWORD *)swift_allocObject(&unk_10129F7E0, 48, 7);
        v61[2] = v60;
        v61[3] = &protocol witness table for MainActor;
        v61[4] = v59;
        v61[5] = v12;
        v62 = sub_100521B98(v5, (uint64_t)&unk_10140E038, (uint64_t)v61);
        *(_QWORD *)&result = swift_release(v62).n128_u64[0];
        return result;
      }
    }
    swift_once(&qword_1013DD748, sub_100A023E8);
    goto LABEL_18;
  }
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, &v74, 0, 0);
  v29 = (void *)static OS_os_log.crlBoardLibrary;
  v30 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v31 = swift_initStackObject(v30, v73);
  *(_OWORD *)(v31 + 16) = xmmword_100EF5E40;
  v32 = v29;
  v33 = Notification.description.getter();
  v35 = v34;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  v36 = sub_1004CFC2C();
  *(_QWORD *)(v31 + 64) = v36;
  *(_QWORD *)(v31 + 32) = v33;
  *(_QWORD *)(v31 + 40) = v35;
  v37 = static os_log_type_t.error.getter(v36);
  sub_100A06EBC((uint64_t)v32, &_mh_execute_header, v37, "No board identifier for notification: %@", 40, 2, v31);
  swift_setDeallocating(v31);
  v38 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v31 + 32, 1, v38);

  return result;
}

void sub_100CD4F40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, __n128);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __n128 v26;
  void (*v27)(char *, uint64_t, uint64_t, __n128);
  __n128 v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  __n128 v39;
  void (*v40)(char *, uint64_t, uint64_t, __n128);
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, __n128);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  __n128 v63;
  __n128 v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __n128 v74;
  uint64_t v75;
  char *v76;
  id v77;
  void (*v78)(char *, uint64_t, uint64_t, __n128);
  char *v79;
  char *v80;

  v2 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v2);
  v79 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Notification(0, v4);
  v6 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 - 8);
  v7 = *((_QWORD *)v6 + 8);
  __chkstk_darwin(v5);
  v76 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v80 = (char *)&v75 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v75 - v11;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v75 - v15;
  v17 = (void *)Notification.name.getter(v14);
  if (qword_1013DDAC0 != -1)
    swift_once(&qword_1013DDAC0, sub_100A7431C);
  v18 = qword_101480A68;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;
  v22 = v21;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  if (v20 == v23 && v22 == v24)
    v25 = 1;
  else
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v23, v24, 0);

  swift_bridgeObjectRelease();
  v26 = swift_bridgeObjectRelease();
  v27 = (void (*)(char *, uint64_t, uint64_t, __n128))*((_QWORD *)v6 + 2);
  v27(v16, a1, v5, v26);
  if ((v25 & 1) != 0)
  {
    v29 = 1;
  }
  else
  {
    v78 = v27;
    v30 = (void *)Notification.name.getter(v28);
    if (qword_1013DDAB8 != -1)
      swift_once(&qword_1013DDAB8, sub_100A742E8);
    v31 = qword_101480A60;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;
    v35 = v34;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    if (v33 == v36 && v35 == v37)
      v29 = 1;
    else
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = v78;
  }
  v78 = v6;
  v38 = (void (*)(char *, uint64_t))*((_QWORD *)v6 + 1);
  v38(v16, v5);
  ((void (*)(char *, uint64_t, uint64_t))v27)(v12, a1, v5);
  if ((v29 & 1) != 0)
    goto LABEL_22;
  v40 = v27;
  v41 = (void *)Notification.name.getter(v39);
  if (qword_1013DDAC8 != -1)
    swift_once(&qword_1013DDAC8, sub_100A74350);
  v42 = qword_101480A70;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;
  v46 = v45;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  if (v44 == v47 && v46 == v48)
  {

    swift_bridgeObjectRelease_n(v46, 2);
    v27 = v40;
LABEL_22:
    v38(v12, v5);
    v49 = v80;
    ((void (*)(char *, uint64_t, uint64_t))v27)(v80, a1, v5);
    goto LABEL_23;
  }
  v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v47, v48, 0);

  swift_bridgeObjectRelease();
  v63 = swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, __n128))v38)(v12, v5, v63);
  v49 = v80;
  v27 = v40;
  ((void (*)(char *, uint64_t, uint64_t))v40)(v80, a1, v5);
  if ((v62 & 1) == 0)
  {
    v65 = (void *)Notification.name.getter(v64);
    if (qword_1013DDAA8 != -1)
      swift_once(&qword_1013DDAA8, sub_100A74280);
    v66 = qword_101480A50;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;
    v70 = v69;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    if (v68 != v71 || v70 != v72)
    {
      v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v71, v72, 0);

      swift_bridgeObjectRelease();
      v74 = swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t, __n128))v38)(v49, v5, v74);
      v27 = v40;
      if ((v73 & 1) == 0)
        return;
      goto LABEL_24;
    }

    swift_bridgeObjectRelease_n(v70, 2);
    v27 = v40;
  }
LABEL_23:
  v38(v49, v5);
LABEL_24:
  v50 = sub_100CEC1AC(a1);
  if (v50)
  {
    v51 = v50;
    v52 = type metadata accessor for TaskPriority(0);
    v53 = (uint64_t)v79;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v79, 1, 1, v52);
    v54 = v76;
    ((void (*)(char *, uint64_t, uint64_t))v27)(v76, a1, v5);
    type metadata accessor for MainActor(0);
    v55 = v77;
    v56 = static MainActor.shared.getter(v55);
    v57 = v78;
    v58 = *((unsigned __int8 *)v78 + 80);
    v59 = (v58 + 48) & ~v58;
    v60 = (char *)swift_allocObject(&unk_10129F808, v59 + v7, v58 | 7);
    *((_QWORD *)v60 + 2) = v56;
    *((_QWORD *)v60 + 3) = &protocol witness table for MainActor;
    *((_QWORD *)v60 + 4) = v51;
    *((_QWORD *)v60 + 5) = v55;
    (*((void (**)(char *, char *, uint64_t))v57 + 4))(&v60[v59], v54, v5);
    v61 = sub_100521B98(v53, (uint64_t)&unk_10140E048, (uint64_t)v60);
    swift_release(v61);
  }
}

uint64_t sub_100CD5484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v7 = type metadata accessor for MainActor(0);
  v5[2] = v7;
  v5[3] = static MainActor.shared.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_10140DF14);
  v5[4] = v8;
  *v8 = v5;
  v8[1] = sub_1004DF470;
  return sub_100CB3574(2, a5);
}

uint64_t sub_100CD5598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5[58] = a4;
  v5[59] = a5;
  v6 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v5[60] = v6;
  v5[61] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardCRDTData(0);
  v5[62] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v5[63] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[64] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[65] = swift_task_alloc(v10);
  v5[66] = swift_task_alloc(v10);
  v11 = sub_1004B804C(&qword_1013E01F0);
  v5[67] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v5[68] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[69] = swift_task_alloc(v13);
  v5[70] = swift_task_alloc(v13);
  v5[71] = swift_task_alloc(v13);
  v5[72] = swift_task_alloc(v13);
  v5[73] = swift_task_alloc(v13);
  v5[74] = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  v5[75] = v14;
  v5[76] = static MainActor.shared.getter(v14);
  v15 = (_QWORD *)swift_task_alloc(dword_10140DF14);
  v5[77] = v15;
  *v15 = v5;
  v15[1] = sub_100CD5710;
  return sub_100CB3574(1, (uint64_t)&_swiftEmptySetSingleton);
}

uint64_t sub_100CD5710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 600);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 616));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CD5784, v2, v3);
}

uint64_t sub_100CD5784()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;
  id v26;
  unsigned int v27;
  unint64_t v28;
  id v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  BOOL v69;
  char v70;
  uint64_t v71;
  uint64_t inited;
  uint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  double *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ObjectType;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  char v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  id v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  char v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  int64_t v176;
  uint64_t v177;
  int64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;

  v1 = (_OWORD *)(v0 + 272);
  swift_release(*(_QWORD *)(v0 + 608));
  v3 = Notification.userInfo.getter(v2);
  if (!v3)
  {
    *v1 = 0u;
    *(_OWORD *)(v0 + 288) = 0u;
LABEL_10:
    v8 = sub_1004CB800(v0 + 272, &qword_1013E0230);
    goto LABEL_11;
  }
  v4 = v3;
  *(_QWORD *)(v0 + 400) = 0xD000000000000017;
  *(_QWORD *)(v0 + 408) = 0x8000000100FB5A40;
  AnyHashable.init<A>(_:)(v0 + 400, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1008432BC(v0 + 56), (v6 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(v4 + 56) + 32 * v5, v0 + 272);
  }
  else
  {
    *v1 = 0u;
    *(_OWORD *)(v0 + 288) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1004B89A4(v0 + 56);
  if (!*(_QWORD *)(v0 + 296))
    goto LABEL_10;
  v7 = sub_1004B804C(&qword_1013E4980);
  v8 = swift_dynamicCast(v0 + 456, v0 + 272, (char *)&type metadata for Any + 8, v7, 6);
  if ((_DWORD)v8)
  {
    v9 = *(void **)(v0 + 456);
    goto LABEL_12;
  }
LABEL_11:
  v9 = &_swiftEmptySetSingleton;
LABEL_12:
  v172 = (uint64_t)v9;
  v10 = (_OWORD *)(v0 + 208);
  v11 = Notification.userInfo.getter(v8);
  if (!v11)
  {
    *v10 = 0u;
    *(_OWORD *)(v0 + 224) = 0u;
LABEL_21:
    v16 = sub_1004CB800(v0 + 208, &qword_1013E0230);
    goto LABEL_22;
  }
  v12 = v11;
  *(_QWORD *)(v0 + 416) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 424) = 0x8000000100FEF910;
  AnyHashable.init<A>(_:)(v0 + 416, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v13 = sub_1008432BC(v0 + 96), (v14 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(v12 + 56) + 32 * v13, v0 + 208);
  }
  else
  {
    *v10 = 0u;
    *(_OWORD *)(v0 + 224) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1004B89A4(v0 + 96);
  if (!*(_QWORD *)(v0 + 232))
    goto LABEL_21;
  v15 = sub_1004B804C(&qword_1013E4980);
  v16 = swift_dynamicCast(v0 + 448, v0 + 208, (char *)&type metadata for Any + 8, v15, 6);
  if ((_DWORD)v16)
  {
    v17 = *(void **)(v0 + 448);
    goto LABEL_23;
  }
LABEL_22:
  v17 = &_swiftEmptySetSingleton;
LABEL_23:
  v18 = (_OWORD *)(v0 + 240);
  v19 = Notification.userInfo.getter(v16);
  if (v19)
  {
    v20 = v19;
    *(_QWORD *)(v0 + 432) = 0x446C61636F4C7369;
    *(_QWORD *)(v0 + 440) = 0xEF6E6F6974656C65;
    AnyHashable.init<A>(_:)(v0 + 432, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v20 + 16) && (v21 = sub_1008432BC(v0 + 16), (v22 & 1) != 0))
    {
      sub_1004CB6E8(*(_QWORD *)(v20 + 56) + 32 * v21, v0 + 240);
    }
    else
    {
      *v18 = 0u;
      *(_OWORD *)(v0 + 256) = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1004B89A4(v0 + 16);
    if (*(_QWORD *)(v0 + 264))
    {
      v23 = swift_dynamicCast(v0 + 624, v0 + 240, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
      v24 = *(_BYTE *)(v0 + 624);
      if (!v23)
        v24 = 2;
      goto LABEL_33;
    }
  }
  else
  {
    *v18 = 0u;
    *(_OWORD *)(v0 + 256) = 0u;
  }
  sub_1004CB800(v0 + 240, &qword_1013E0230);
  v24 = 2;
LABEL_33:
  v169 = v24;
  v158 = v0 + 136;
  v25 = v0 + 328;
  v170 = v0 + 376;
  v171 = v0 + 352;
  v26 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v27 = objc_msgSend(v26, "BOOLForKey:", CFSTR("CRLAllowInteractionWithUnsupportedBoardAndBoardItemsUserDefault"));

  if (v27)
  {
    v28 = v0 + 304;
    swift_bridgeObjectRelease();
    if (qword_1013DD748 != -1)
LABEL_139:
      swift_once(&qword_1013DD748, sub_100A023E8);
    swift_beginAccess(&static OS_os_log.crlBoardLibrary, v28, 0, 0);
    v29 = (id)static OS_os_log.crlBoardLibrary;
    v31 = static os_log_type_t.default.getter(v30);
    sub_100A06EBC((uint64_t)v29, &_mh_execute_header, v31, "CRLAllowInteractionWithUnsupportedBoardAndBoardItemsUserDefault set to true, ignoring boardIdentifiersToClose with unsupported identifiers.", 139, 2, (uint64_t)_swiftEmptyArrayStorage);

    v32 = v172;
    swift_bridgeObjectRetain(v172);
  }
  else
  {
    swift_bridgeObjectRetain(v172);
    v32 = sub_100CA0AB8((uint64_t)v17, v172, type metadata accessor for CRLBoardIdentifier, (void (*)(char *, char *))sub_100AD7844);
  }
  v33 = 0;
  v165 = (_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 544);
  v175 = v32 + 56;
  v35 = -1;
  v36 = -1 << *(_BYTE *)(v32 + 32);
  v174 = *(_QWORD *)(v0 + 512);
  v177 = *(_QWORD *)(v0 + 480);
  if (-v36 < 64)
    v35 = ~(-1 << -(char)v36);
  v28 = v35 & *(_QWORD *)(v32 + 56);
  v160 = *(_QWORD *)(v0 + 464);
  v37 = (uint64_t *)(v160 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  v176 = (unint64_t)(63 - v36) >> 6;
  v159 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController;
  v166 = v32;
  v167 = v25;
  v168 = *(_QWORD *)(v0 + 544);
  v173 = (uint64_t *)(v160 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  while (1)
  {
    if (v28)
    {
      v182 = (v28 - 1) & v28;
      v38 = __clz(__rbit64(v28)) | (v33 << 6);
      goto LABEL_55;
    }
    if (__OFADD__(v33++, 1))
      goto LABEL_137;
    if (v33 >= v176)
      break;
    v40 = *(_QWORD *)(v175 + 8 * v33);
    if (!v40)
    {
      v41 = v33 + 1;
      if (v33 + 1 >= v176)
        break;
      v40 = *(_QWORD *)(v175 + 8 * v41);
      if (!v40)
      {
        v41 = v33 + 2;
        if (v33 + 2 >= v176)
          break;
        v40 = *(_QWORD *)(v175 + 8 * v41);
        if (!v40)
        {
          v41 = v33 + 3;
          if (v33 + 3 >= v176)
            break;
          v40 = *(_QWORD *)(v175 + 8 * v41);
          if (!v40)
          {
            while (1)
            {
              v33 = v41 + 1;
              if (__OFADD__(v41, 1))
                break;
              if (v33 >= v176)
                goto LABEL_134;
              v40 = *(_QWORD *)(v175 + 8 * v33);
              ++v41;
              if (v40)
                goto LABEL_54;
            }
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }
        }
      }
      v33 = v41;
    }
LABEL_54:
    v182 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v33 << 6);
LABEL_55:
    v42 = *(_QWORD *)(v0 + 592);
    v43 = *(_QWORD *)(v0 + 584);
    sub_1004B8460(*(_QWORD *)(v32 + 48) + *(_QWORD *)(v34 + 72) * v38, v42, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84E0(v42, v43, type metadata accessor for CRLBoardIdentifier);
    swift_beginAccess(v37, v25, 32, 0);
    v44 = *v37;
    if (!*(_QWORD *)(*v37 + 16) || (v45 = sub_100843264(*(_QWORD *)(v0 + 584)), (v46 & 1) == 0))
    {
      swift_endAccess(v25);
      goto LABEL_41;
    }
    v47 = *(_QWORD *)(v0 + 584);
    v48 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v45);
    swift_endAccess(v25);
    v49 = *(id *)(*(_QWORD *)(v48 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
    v178 = v33;
    v50 = sub_100622DD8(v47, v172);
    if ((v50 & 1) != 0)
    {
      v51 = *(_QWORD *)(v160 + v159);
      v161 = OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights;
      v162 = v51;
      v52 = *(_QWORD *)(v51 + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
      if ((unint64_t)v52 >> 62)
      {
        v78 = v49;
        if (v52 < 0)
          v79 = *(_QWORD *)(v51 + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
        else
          v79 = v52 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*(_QWORD *)(v51 + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights), 2);
        v80 = v79;
        v49 = v78;
        v28 = _CocoaArrayWrapper.endIndex.getter(v80);
        if (v28)
        {
LABEL_60:
          v163 = v49;
          v164 = v50;
          v53 = 0;
          v180 = v52;
          v181 = v52 & 0xC000000000000001;
          v179 = v28;
          while (1)
          {
            if (v181)
            {
              v54 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v53, v52);
              v55 = v53 + 1;
              if (__OFADD__(v53, 1))
                goto LABEL_135;
            }
            else
            {
              v54 = (char *)*(id *)(v52 + 8 * v53 + 32);
              v55 = v53 + 1;
              if (__OFADD__(v53, 1))
              {
LABEL_135:
                __break(1u);
                goto LABEL_136;
              }
            }
            v56 = *(_QWORD *)(v0 + 584);
            v57 = *(_QWORD *)(v0 + 576);
            v58 = *(_QWORD *)(v0 + 568);
            v59 = v54;
            v60 = (uint64_t)&v54[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_boardIdentifier];
            v61 = static UUID.== infix(_:_:)(&v54[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_boardIdentifier]);
            sub_1004B8460(v60, v57, type metadata accessor for CRLBoardIdentifier);
            sub_1004B8460(v56, v58, type metadata accessor for CRLBoardIdentifier);
            v62 = *(_QWORD *)(v0 + 576);
            v25 = v0;
            v63 = *(_QWORD *)(v0 + 568);
            if ((v61 & 1) != 0)
            {
              v64 = *(int *)(v177 + 20);
              v65 = *(_QWORD *)(v62 + v64);
              v66 = *(_QWORD *)(v62 + v64 + 8);
              v67 = (_QWORD *)(v63 + v64);
              v68 = v67[1];
              v69 = v65 == *v67 && v66 == v68;
              if (v69)
              {
                sub_1004B84A4(v63, type metadata accessor for CRLBoardIdentifier);
                sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
                v52 = v180;
LABEL_81:
                swift_bridgeObjectRelease_n(v52, 2);
                v71 = sub_1004B804C((uint64_t *)&unk_1013E4180);
                inited = swift_initStackObject(v71, v158);
                *(_OWORD *)(inited + 16) = xmmword_100EEF400;
                *(_QWORD *)(inited + 32) = v59;
                v184 = inited;
                specialized Array._endMutation()(inited);
                v0 = v25;
                if ((unint64_t)v184 >> 62)
                {
                  if (v184 < 0)
                    v145 = v184;
                  else
                    v145 = v184 & 0xFFFFFFFFFFFFFF8;
                  v146 = v59;
                  swift_bridgeObjectRetain(v184);
                  v147 = _CocoaArrayWrapper.endIndex.getter(v145);
                  swift_bridgeObjectRelease();
                  if (v147)
                  {
LABEL_83:
                    v75 = *(_QWORD *)(v162 + v161);
                    swift_bridgeObjectRetain(v184);
                    swift_bridgeObjectRetain(v75);
                    v77 = sub_100CE1CA8(v76, v184);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1004DED08((uint64_t)v77);
                  }
                }
                else
                {
                  v73 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFF8) + 0x10);
                  v74 = v59;
                  if (v73)
                    goto LABEL_83;
                }
                swift_bridgeObjectRelease();

LABEL_85:
                v50 = v164;
                v49 = v163;
                goto LABEL_91;
              }
              v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, *v67, v68, 0);
              sub_1004B84A4(v63, type metadata accessor for CRLBoardIdentifier);
              sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
              v52 = v180;
              if ((v70 & 1) != 0)
                goto LABEL_81;
            }
            else
            {
              sub_1004B84A4(v63, type metadata accessor for CRLBoardIdentifier);
              sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
              v52 = v180;
            }

            ++v53;
            v28 = v179;
            v0 = v25;
            if (v55 == v179)
            {
              swift_bridgeObjectRelease_n(v52, 2);
              goto LABEL_85;
            }
          }
        }
      }
      else
      {
        v28 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(*(_QWORD *)(v51 + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights), 2);
        if (v28)
          goto LABEL_60;
      }
      swift_bridgeObjectRelease_n(v52, 2);
    }
LABEL_91:
    v81 = *(_QWORD *)(v0 + 536);
    v82 = *(void **)(v0 + 464);
    v83 = type metadata accessor for TaskPriority(0);
    v84 = *(_QWORD *)(v83 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v81, 1, 1, v83);
    v85 = (char *)v49;
    v86 = v82;
    v87 = static MainActor.shared.getter(v86);
    v88 = swift_allocObject(&unk_10129F728, 56, 7);
    *(_QWORD *)(v88 + 16) = v87;
    *(_QWORD *)(v88 + 24) = &protocol witness table for MainActor;
    *(_QWORD *)(v88 + 32) = v85;
    *(_BYTE *)(v88 + 40) = v50 & 1;
    *(_BYTE *)(v88 + 41) = v169;
    *(_QWORD *)(v88 + 48) = v86;
    v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v81, 1, v83);
    v91 = *(_QWORD *)(v0 + 536);
    if (v89 == 1)
    {
      sub_1004CB800(*(_QWORD *)(v0 + 536), &qword_1013E01F0);
      v92 = 0;
      v93 = *(_QWORD *)(v88 + 16);
      if (v93)
        goto LABEL_93;
    }
    else
    {
      v99 = TaskPriority.rawValue.getter(v90);
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v91, v83);
      v92 = v99;
      v93 = *(_QWORD *)(v88 + 16);
      if (v93)
      {
LABEL_93:
        v94 = *(_QWORD *)(v88 + 24);
        ObjectType = swift_getObjectType(v93);
        swift_unknownObjectRetain(v93);
        v96 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v94);
        v98 = v97;
        swift_unknownObjectRelease(v93);
        goto LABEL_96;
      }
    }
    v96 = 0;
    v98 = 0;
LABEL_96:
    v100 = swift_allocObject(&unk_10129F750, 32, 7);
    *(_QWORD *)(v100 + 16) = &unk_10140E020;
    *(_QWORD *)(v100 + 24) = v88;
    if (v98 | v96)
    {
      v101 = v165;
      *v165 = 0;
      v165[1] = 0;
      *(_QWORD *)(v0 + 192) = v96;
      *(_QWORD *)(v0 + 200) = v98;
    }
    else
    {
      v101 = 0;
    }
    v102 = *(_QWORD *)(v0 + 528);
    v103 = *(_QWORD *)(v0 + 520);
    v104 = *(_QWORD *)(v0 + 496);
    v105 = *(_QWORD *)(v0 + 504);
    v106 = swift_task_create(v92 | 0x1C00, v101, (char *)&type metadata for () + 8, &unk_1013FE730);
    swift_release(v106);
    v107 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
    v108 = *(_QWORD *)&v85[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
    v109 = v108 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess(v108 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v171, 0, 0);
    sub_1004B8460(v109, v104, type metadata accessor for CRLBoardCRDTData);
    swift_retain(v108);
    v110 = sub_1004B804C(&qword_1013E1A80);
    CRRegister.wrappedValue.getter(v110);
    sub_1004B84A4(v104, type metadata accessor for CRLBoardCRDTData);
    v111 = swift_release(v108);
    v112 = (uint64_t *)(*(_QWORD *)&v85[v107] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
    v113 = *v112;
    v114 = v112[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v174 + 16))(v103, v102, v105, v111);
    static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v117 = v113 == v115 && v114 == v116;
    if (v117
      || (v118 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v114, v115, v116, 0),
          swift_bridgeObjectRetain(v114),
          v119 = swift_bridgeObjectRelease(),
          (v118 & 1) != 0))
    {
      v119 = swift_bridgeObjectRelease();
      v113 = 0;
      v114 = 0xE000000000000000;
    }
    v120 = *(_QWORD *)(v0 + 560);
    v121 = *(_QWORD *)(v0 + 552);
    v122 = *(_QWORD *)(v0 + 520);
    v123 = *(_QWORD *)(v0 + 504);
    v124 = *(_QWORD *)(v0 + 488);
    (*(void (**)(_QWORD, uint64_t, __n128))(v174 + 8))(*(_QWORD *)(v0 + 528), v123, v119);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v174 + 32))(v124, v122, v123);
    v125 = (_QWORD *)(v124 + *(int *)(v177 + 20));
    *v125 = v113;
    v125[1] = v114;
    sub_1004B84E0(v124, v121, type metadata accessor for CRLBoardIdentifierStorage);
    sub_1004B84E0(v121, v120, type metadata accessor for CRLBoardIdentifier);
    v37 = v173;
    swift_beginAccess(v173, v170, 32, 0);
    v126 = *v173;
    if (*(_QWORD *)(*v173 + 16) && (v127 = sub_100843264(*(_QWORD *)(v0 + 560)), (v128 & 1) != 0))
    {
      v129 = *(_QWORD *)(*(_QWORD *)(v126 + 56) + 8 * v127);
      swift_endAccess(v170);
      v130 = objc_msgSend(*(id *)(v129 + 32), "allObjects");
      v131 = type metadata accessor for CRLBoardLibraryHeadlessController();
      v132 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v130, v131);

    }
    else
    {
      swift_endAccess(v170);
      v132 = (uint64_t)_swiftEmptyArrayStorage;
    }
    v33 = v178;
    v133 = *(void **)(v0 + 464);
    if ((unint64_t)v132 >> 62)
    {
      if (v132 < 0)
        v141 = v132;
      else
        v141 = v132 & 0xFFFFFFFFFFFFFF8;
      v142 = v133;
      swift_bridgeObjectRetain(v132);
      v134 = _CocoaArrayWrapper.endIndex.getter(v141);
      if (v134)
      {
LABEL_111:
        if ((v132 & 0xC000000000000001) != 0)
          v136 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v132);
        else
          v136 = (char *)*(id *)(v132 + 32);
        v137 = v136;
        sub_100CA2F0C(v136);

        if (v134 != 1)
        {
          v25 = 5;
          while (1)
          {
            v28 = v25 - 4;
            v138 = (v132 & 0xC000000000000001) != 0
                 ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v132)
                 : (char *)*(id *)(v132 + 8 * v25);
            v139 = v138;
            v140 = v25 - 3;
            if (__OFADD__(v28, 1))
              break;
            sub_100CA2F0C(v138);

            ++v25;
            v69 = v140 == v134;
            v33 = v178;
            if (v69)
              goto LABEL_122;
          }
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
LABEL_122:
        swift_bridgeObjectRelease();
        v32 = v166;
        v25 = v167;
        v37 = v173;
        goto LABEL_128;
      }
    }
    else
    {
      v134 = *(_QWORD *)((v132 & 0xFFFFFFFFFFFFF8) + 0x10);
      v135 = v133;
      swift_bridgeObjectRetain(v132);
      if (v134)
        goto LABEL_111;
    }
    swift_bridgeObjectRelease();
    v32 = v166;
    v25 = v167;
LABEL_128:
    v143 = *(_QWORD *)(v0 + 560);
    v144 = *(void **)(v0 + 464);
    swift_bridgeObjectRelease();
    sub_1004B84A4(v143, type metadata accessor for CRLBoardIdentifier);

    v34 = v168;
LABEL_41:
    v28 = v182;
    sub_1004B84A4(*(_QWORD *)(v0 + 584), type metadata accessor for CRLBoardIdentifier);
  }
LABEL_134:
  swift_release(v32);
  swift_bridgeObjectRelease();
  v148 = *(_QWORD *)(v0 + 584);
  v149 = *(_QWORD *)(v0 + 576);
  v150 = *(_QWORD *)(v0 + 568);
  v151 = *(_QWORD *)(v0 + 560);
  v152 = *(_QWORD *)(v0 + 552);
  v153 = *(_QWORD *)(v0 + 536);
  v154 = *(_QWORD *)(v0 + 528);
  v155 = *(_QWORD *)(v0 + 520);
  v156 = *(_QWORD *)(v0 + 496);
  v183 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 592));
  swift_task_dealloc(v148);
  swift_task_dealloc(v149);
  swift_task_dealloc(v150);
  swift_task_dealloc(v151);
  swift_task_dealloc(v152);
  swift_task_dealloc(v153);
  swift_task_dealloc(v154);
  swift_task_dealloc(v155);
  swift_task_dealloc(v156);
  swift_task_dealloc(v183);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CD685C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  v7 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v6[23] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[24] = swift_task_alloc(v8);
  v6[25] = swift_task_alloc(v8);
  v9 = type metadata accessor for MainActor(0);
  v6[26] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100CD6900, v10, v11);
}

void sub_100CD6900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  int64_t v7;
  uint64_t (*v8)(uint64_t);
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t inited;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  id v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  id v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = v0 + 112;
  v56 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 208));
  v53 = v1 + 56;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v1 + 56);
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_boardInfos);
  v54 = (unint64_t)(63 - v4) >> 6;
  v55 = v1;
  swift_bridgeObjectRetain(v1);
  v7 = 0;
  v8 = type metadata accessor for CRLBoardIdentifier;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_22;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v54)
      goto LABEL_37;
    v12 = *(_QWORD *)(v53 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v54)
        goto LABEL_37;
      v12 = *(_QWORD *)(v53 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v54)
          goto LABEL_37;
        v12 = *(_QWORD *)(v53 + 8 * v7);
        if (!v12)
          break;
      }
    }
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_22:
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    sub_1004B8460(*(_QWORD *)(v55 + 48) + *(_QWORD *)(v56 + 72) * v10, v15, v8);
    v16 = v8;
    sub_1004B84E0(v15, v14, v8);
    if (qword_1013DD8C8 != -1)
      swift_once(&qword_1013DD8C8, sub_100A069BC);
    swift_beginAccess(&static OS_os_log.shareState, v0 + 88, 0, 0);
    v17 = (void *)static OS_os_log.shareState;
    v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v18, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v20 = v17;
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v21;
    *(_QWORD *)(inited + 40) = v23;
    v25 = static os_log_type_t.default.getter(v24);
    sub_100A06EBC((uint64_t)v20, &_mh_execute_header, v25, "Did sync a CKShare change for board identifier: %@", 50, 2, inited);
    swift_setDeallocating(inited);
    v26 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v26);

    swift_beginAccess(v6, v57, 32, 0);
    v27 = *v6;
    if (!*(_QWORD *)(*v6 + 16) || (v28 = sub_100843264(*(_QWORD *)(v0 + 192)), (v29 & 1) == 0))
    {
      swift_endAccess(v57);
      goto LABEL_5;
    }
    v30 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
    swift_endAccess(v57);
    v31 = swift_retain(v30);
    v32 = (void *)Notification.name.getter(v31);
    if (qword_1013DDAC8 != -1)
      swift_once(&qword_1013DDAC8, sub_100A74350);
    v33 = qword_101480A70;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;
    v37 = v36;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    if (v35 == v38 && v37 == v39)
    {
      swift_bridgeObjectRelease_n(v37, 2);

LABEL_32:
      v41 = (id)static OS_os_log.shareState;
      v43 = static os_log_type_t.default.getter(v42);
      sub_100A06EBC((uint64_t)v41, &_mh_execute_header, v43, "Received a CRLBoardDataStoreDidSyncCKShareDeletion notification.", 64, 2, (uint64_t)_swiftEmptyArrayStorage);

      v44 = *(char **)(*(_QWORD *)(v30 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
      v45 = *(_QWORD *)&v44[OBJC_IVAR____TtC8Freeform8CRLBoard_shareState];
      if (*(_QWORD *)(v45 + 16))
      {
        v46 = v44;
        swift_retain(v45);
        sub_100D2C2C0(0);
        swift_release(v45);

      }
      goto LABEL_34;
    }
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v38, v39, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((v40 & 1) != 0)
      goto LABEL_32;
LABEL_34:
    if (qword_1013DD888 != -1)
      swift_once(&qword_1013DD888, sub_100A05DE4);
    v47 = *(_QWORD *)(v0 + 192);
    swift_beginAccess(&static OS_os_log.realTimeSync, v0 + 136, 0, 0);
    v48 = (id)static OS_os_log.realTimeSync;
    v50 = static os_log_type_t.default.getter(v49);
    sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v50, "Ensure that we are in an activity, and switch between Me-to-Me and CKShare if necessary.", 88, 2, (uint64_t)_swiftEmptyArrayStorage);

    sub_100CABEF4(v47);
    swift_release(v30);
LABEL_5:
    v8 = v16;
    sub_1004B84A4(*(_QWORD *)(v0 + 192), v16);
  }
  v13 = v11 + 3;
  if (v13 >= v54)
  {
LABEL_37:
    v51 = *(_QWORD *)(v0 + 192);
    v52 = *(_QWORD *)(v0 + 200);
    swift_release(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v52);
    swift_task_dealloc(v51);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v53 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v54)
      goto LABEL_37;
    v12 = *(_QWORD *)(v53 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
}

void sub_100CD6E50(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t Strong;
  char *v10;
  id v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  char *v19;
  __n128 v20;
  uint64_t v21;
  _BYTE v22[24];
  char v23[24];

  v5 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *a1;
  a3 += 16;
  swift_beginAccess(a3, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (Strong)
  {
    v10 = (char *)Strong;
    if (objc_msgSend(v8, "BOOLForKey:", CFSTR("CRLEnsureOwnershipOfDataUserDefault")))
    {
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, v22, 0, 0);
      v11 = (id)static OS_os_log.boardStore;
      v13 = static os_log_type_t.default.getter(v12);
      sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v13, "Observed change to dataclass. About to ensure ownership of data after some delay.", 81, 2, (uint64_t)_swiftEmptyArrayStorage);

      v14 = type metadata accessor for TaskPriority(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
      v15 = *(void **)&v10[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store];
      v16 = (_QWORD *)swift_allocObject(&unk_1012A0130, 40, 7);
      v16[2] = 0;
      v16[3] = 0;
      v16[4] = v15;
      v17 = v15;
      v18 = sub_1009880C4((uint64_t)v7, (uint64_t)&unk_10140E2A8, (uint64_t)v16);
      swift_release(v18);
      sub_1004CB800((uint64_t)v7, &qword_1013E01F0);
      objc_msgSend(v8, "removeObjectForKey:", CFSTR("CRLEnsureOwnershipOfDataUserDefault"));
    }
    else
    {
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, v22, 0, 0);
      v19 = (char *)(id)static OS_os_log.boardStore;
      v21 = static os_log_type_t.default.getter(v20);
      sub_100A06EBC((uint64_t)v19, &_mh_execute_header, v21, "Observed change to dataclass. But no need to ensure ownership of data.", 70, 2, (uint64_t)_swiftEmptyArrayStorage);

      v10 = v19;
    }

  }
}

uint64_t sub_100CD70A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 248) = a4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(_QWORD *)(v4 + 256) = v5;
  *v5 = v4;
  v5[1] = sub_100CD70FC;
  return static Task<>.sleep(nanoseconds:)(2000000000);
}

uint64_t sub_100CD70FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = sub_100CD747C;
  }
  else
  {
    v3 = sub_100CD7168;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100CD7168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CKRecordID v21;
  Swift::String v22;

  v1 = *(_QWORD *)(v0 + 264);
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  v2 = *(_QWORD *)(v0 + 248);
  swift_beginAccess(&static OS_os_log.boardStore, v0 + 184, 0, 0);
  v3 = (id)static OS_os_log.boardStore;
  v5 = static os_log_type_t.default.getter(v4);
  sub_100A06EBC((uint64_t)v3, &_mh_execute_header, v5, "Observed change to dataclass. Ensuring ownership of data now.", 61, 2, (uint64_t)_swiftEmptyArrayStorage);

  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v2;
  OS_dispatch_queue.sync<A>(execute:)(sub_100CED504, v6, (char *)&type metadata for () + 8);
  swift_task_dealloc(v6);
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v7 = (void *)static OS_os_log.boardStore;
  v8 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v8, v0 + 88);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v0 + 232, v0 + 160);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 176);
  v12 = v7;
  v13 = Error.localizedDescription.getter(v10, v11);
  v15 = v14;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v16 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v16;
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v15;
  v17 = static os_log_type_t.error.getter(v16);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v17, "Failed to ensure ownership of data: %@", 38, 2, inited);
  swift_bridgeObjectRelease();

  v18 = swift_initStackObject(v8, v0 + 16);
  *(_OWORD *)(v18 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v0 + 240, v0 + 208);
  v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = v16;
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v20;
  sub_100757E04(&_mh_execute_header, (uint64_t)"startWatchingForUserDataDeletionRequest()", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 3629, "Failed to ensure ownership of data: %@", 38, 2u, v18);
  sub_100518FC0(v18, (uint64_t)"Failed to ensure ownership of data: %@");
  sub_100519194(v18, (uint64_t)"startWatchingForUserDataDeletionRequest()", 41, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 3629, (uint64_t)"Failed to ensure ownership of data: %@", 38, 2u);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v21, v22);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
}

uint64_t sub_100CD747C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  v1 = *(_QWORD *)(v0 + 248);
  swift_beginAccess(&static OS_os_log.boardStore, v0 + 184, 0, 0);
  v2 = (id)static OS_os_log.boardStore;
  v4 = static os_log_type_t.default.getter(v3);
  sub_100A06EBC((uint64_t)v2, &_mh_execute_header, v4, "Observed change to dataclass. Ensuring ownership of data now.", 61, 2, (uint64_t)_swiftEmptyArrayStorage);

  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v1;
  OS_dispatch_queue.sync<A>(execute:)(sub_100CED504, v5, (char *)&type metadata for () + 8);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t destroy for CRLBoardLibrary.BoardInfo.RealTimeSyncSession(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for CRLBoardLibrary.BoardInfo.RealTimeSyncSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for CRLBoardLibrary.BoardInfo.RealTimeSyncSession(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for CRLBoardLibrary.BoardInfo.RealTimeSyncSession(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for CRLBoardLibrary.BoardInfo.RealTimeSyncSession()
{
  return &type metadata for CRLBoardLibrary.BoardInfo.RealTimeSyncSession;
}

ValueMetadata *type metadata accessor for CRLBoardLibrary.UpdateOptions()
{
  return &type metadata for CRLBoardLibrary.UpdateOptions;
}

unint64_t sub_100CD7A00()
{
  unint64_t result;

  result = qword_10140DEC8;
  if (!qword_10140DEC8)
  {
    result = swift_getWitnessTable(&unk_100F31EE4, &type metadata for CRLBoardLibrary.UpdateOptions);
    atomic_store(result, (unint64_t *)&qword_10140DEC8);
  }
  return result;
}

unint64_t sub_100CD7A48()
{
  unint64_t result;

  result = qword_10140DED0;
  if (!qword_10140DED0)
  {
    result = swift_getWitnessTable(&unk_100F31EB4, &type metadata for CRLBoardLibrary.UpdateOptions);
    atomic_store(result, (unint64_t *)&qword_10140DED0);
  }
  return result;
}

unint64_t sub_100CD7A90()
{
  unint64_t result;

  result = qword_10140DED8;
  if (!qword_10140DED8)
  {
    result = swift_getWitnessTable(&unk_100F31F0C, &type metadata for CRLBoardLibrary.UpdateOptions);
    atomic_store(result, (unint64_t *)&qword_10140DED8);
  }
  return result;
}

unint64_t sub_100CD7AD8()
{
  unint64_t result;

  result = qword_10140DEE0;
  if (!qword_10140DEE0)
  {
    result = swift_getWitnessTable(&unk_100F31F44, &type metadata for CRLBoardLibrary.UpdateOptions);
    atomic_store(result, (unint64_t *)&qword_10140DEE0);
  }
  return result;
}

uint64_t sub_100CD7B1C()
{
  return sub_1004B7878(&qword_10140DEE8, type metadata accessor for CRLBoardLibrary.BoardInfo, (uint64_t)&unk_100F32044);
}

Swift::Int sub_100CD7B48(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  void (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[9];

  v8 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  __chkstk_darwin(v8);
  v41 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1004B804C(&qword_1014053A0);
  result = static _SetStorage.allocate(capacity:)(a3);
  v10 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v12 = 0;
  else
    v12 = *a1;
  v13 = 0;
  v14 = result + 56;
  v40 = a4;
  v15 = v41;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v44 = v13;
      v17 = v16 | (v13 << 6);
    }
    else
    {
      v18 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_40;
      if (v18 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v10;
      }
      v19 = v38[v18];
      v20 = v13 + 1;
      if (!v19)
      {
        v20 = v13 + 2;
        if (v13 + 2 >= v39)
          goto LABEL_37;
        v19 = v38[v20];
        if (!v19)
        {
          v20 = v13 + 3;
          if (v13 + 3 >= v39)
            goto LABEL_37;
          v19 = v38[v20];
          if (!v19)
          {
            v21 = v13 + 4;
            if (v13 + 4 >= v39)
              goto LABEL_37;
            v19 = v38[v21];
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v20 >= v39)
                  goto LABEL_37;
                v19 = v38[v20];
                ++v21;
                if (v19)
                  goto LABEL_24;
              }
            }
            v20 = v13 + 4;
          }
        }
      }
LABEL_24:
      v12 = (v19 - 1) & v19;
      v44 = v20;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v17);
    Hasher.init(_seed:)(v45, *(_QWORD *)(v10 + 40));
    v23 = *(_QWORD *)(v22 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v22 + 16));
    v25 = *(void (**)(uint64_t, uint64_t, __n128))(v23 + 32);
    v26 = swift_retain(v22);
    v25(ObjectType, v23, v26);
    v27 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = v43;
    dispatch thunk of Hashable.hash(into:)(v45, v43, v27);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v28);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v10 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v32) = v22;
    ++*(_QWORD *)(v10 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v40;
    v13 = v44;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100CD7E7C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CD939C(a1, a2, a3, a4, (uint64_t *)&unk_1013DE800);
}

uint64_t sub_100CD7E88(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CD8E14(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1014052F8, (unint64_t *)&qword_1013DE630, (uint64_t)&protocol conformance descriptor for UUID);
}

Swift::Int sub_100CD7EAC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_1004B804C(&qword_1013DE6B8);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100CD8140(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CD939C(a1, a2, a3, a4, &qword_1013DEA38);
}

Swift::Int sub_100CD814C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  Swift::Int result;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  Swift::Int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[9];

  v40 = a1;
  v7 = type metadata accessor for CRLBoardIdentifier(0);
  v42 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1004B804C(&qword_1013DE628);
  result = static _SetStorage.allocate(capacity:)(a3);
  v10 = result;
  v39 = a2;
  if (a2 < 1)
    v12 = 0;
  else
    v12 = *v40;
  v13 = 0;
  v14 = type metadata accessor for CRLBoardIdentifier;
  v15 = result + 56;
  v41 = a4;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v13 << 6);
    }
    else
    {
      v18 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_40;
      if (v18 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v10;
      }
      v19 = v40[v18];
      ++v13;
      if (!v19)
      {
        v13 = v18 + 1;
        if (v18 + 1 >= v39)
          goto LABEL_37;
        v19 = v40[v13];
        if (!v19)
        {
          v13 = v18 + 2;
          if (v18 + 2 >= v39)
            goto LABEL_37;
          v19 = v40[v13];
          if (!v19)
          {
            v20 = v18 + 3;
            if (v20 >= v39)
              goto LABEL_37;
            v19 = v40[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v39)
                  goto LABEL_37;
                v19 = v40[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
      }
LABEL_24:
      v12 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v13 << 6);
    }
    v21 = *(_QWORD *)(v42 + 72);
    v22 = *(_QWORD *)(a4 + 48) + v21 * v17;
    v23 = v14;
    sub_1004B8460(v22, (uint64_t)v9, v14);
    Hasher.init(_seed:)(v43, *(_QWORD *)(v10 + 40));
    v24 = type metadata accessor for UUID(0);
    v25 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v43, v24, v25);
    v26 = &v9[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v27 = *(_QWORD *)v26;
    v28 = *((_QWORD *)v26 + 1);
    swift_bridgeObjectRetain(v28);
    String.hash(into:)(v43, v27, v28);
    swift_bridgeObjectRelease(v28);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v10 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v14 = v23;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      v14 = v23;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v15 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    result = sub_1004B84E0((uint64_t)v9, *(_QWORD *)(v10 + 48) + v32 * v21, v14);
    ++*(_QWORD *)(v10 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v41;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100CD84B0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CD939C(a1, a2, a3, a4, (uint64_t *)&unk_1013DE990);
}

Swift::Int sub_100CD84BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  uint64_t v29[9];

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_1004B804C(&qword_1013DEA28);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)(v29, v9[5]);
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *((_BYTE *)v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(v9[6] + 8 * v22) = v18;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100CD8724(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  unint64_t *v30;
  _QWORD v31[9];
  _OWORD v32[2];
  __int128 v33;

  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1004B804C(&qword_101405448);
  result = static _SetStorage.allocate(capacity:)(v5);
  v6 = result;
  v30 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
      {
LABEL_37:
        swift_release(a4);
        return v6;
      }
      v16 = v30[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          goto LABEL_37;
        v16 = v30[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            goto LABEL_37;
          v16 = v30[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              goto LABEL_37;
            v16 = v30[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  goto LABEL_37;
                v16 = v30[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    sub_10051FDDC(*(_QWORD *)(a4 + 48) + 48 * v14, (uint64_t)v32);
    Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
    AnyHashable.hash(into:)(v31);
    Hasher._combine(_:)(*((Swift::UInt64 *)&v33 + 1));
    result = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v6 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v12 + 8 * v20);
      }
      while (v25 == -1);
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(_QWORD *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v26 = (_OWORD *)(*(_QWORD *)(v6 + 48) + 48 * v21);
    v27 = v32[0];
    v28 = v33;
    v26[1] = v32[1];
    v26[2] = v28;
    *v26 = v27;
    ++*(_QWORD *)(v6 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100CD89C0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CD939C(a1, a2, a3, a4, &qword_101405608);
}

Swift::Int sub_100CD89CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Swift::Int v16;
  Swift::Int result;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  Swift::Int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[9];

  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  __chkstk_darwin(v11);
  v51 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - v14;
  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1004B804C(&qword_1014055D8);
  result = static _SetStorage.allocate(capacity:)(a3);
  v16 = result;
  v48 = a1;
  v49 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = type metadata accessor for CRLSpotlightManager.ChangeType;
  v21 = result + 56;
  v50 = a4;
  while (1)
  {
    if (v18)
    {
      v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v54 = v19;
      v23 = v22 | (v19 << 6);
    }
    else
    {
      v24 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v24 >= v49)
      {
LABEL_37:
        swift_release(a4);
        return v16;
      }
      v25 = v48[v24];
      v26 = v19 + 1;
      if (!v25)
      {
        v26 = v19 + 2;
        if (v19 + 2 >= v49)
          goto LABEL_37;
        v25 = v48[v26];
        if (!v25)
        {
          v26 = v19 + 3;
          if (v19 + 3 >= v49)
            goto LABEL_37;
          v25 = v48[v26];
          if (!v25)
          {
            v27 = v19 + 4;
            if (v19 + 4 >= v49)
              goto LABEL_37;
            v25 = v48[v27];
            if (!v25)
            {
              while (1)
              {
                v26 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_41;
                if (v26 >= v49)
                  goto LABEL_37;
                v25 = v48[v26];
                ++v27;
                if (v25)
                  goto LABEL_24;
              }
            }
            v26 = v19 + 4;
          }
        }
      }
LABEL_24:
      v18 = (v25 - 1) & v25;
      v54 = v26;
      v23 = __clz(__rbit64(v25)) + (v26 << 6);
    }
    v28 = *(_QWORD *)(v52 + 72);
    sub_1004B8460(*(_QWORD *)(a4 + 48) + v28 * v23, (uint64_t)v15, v20);
    Hasher.init(_seed:)(v55, *(_QWORD *)(v16 + 40));
    v29 = v15;
    v30 = (uint64_t)v15;
    v31 = v51;
    v32 = v20;
    sub_1004B8460(v30, v51, v20);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v53);
    sub_1004B84E0(v31, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    Hasher._combine(_:)(EnumCaseMultiPayload == 1);
    v34 = type metadata accessor for UUID(0);
    v35 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v55, v34, v35);
    v36 = &v10[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v38 = *(_QWORD *)v36;
    v37 = *((_QWORD *)v36 + 1);
    swift_bridgeObjectRetain(v37);
    String.hash(into:)(v55, v38, v37);
    swift_bridgeObjectRelease();
    sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    result = Hasher._finalize()();
    v39 = -1 << *(_BYTE *)(v16 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      v42 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      v20 = v32;
      v15 = v29;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v39) >> 6;
      v20 = v32;
      v15 = v29;
      do
      {
        if (++v41 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v45 = v41 == v44;
        if (v41 == v44)
          v41 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v21 + 8 * v41);
      }
      while (v46 == -1);
      v42 = __clz(__rbit64(~v46)) + (v41 << 6);
    }
    *(_QWORD *)(v21 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    result = sub_1004B84E0((uint64_t)v15, *(_QWORD *)(v16 + 48) + v42 * v28, v20);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v50;
    v19 = v54;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100CD8DF0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CD8E14(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_101405478, &qword_101405480, (uint64_t)&protocol conformance descriptor for IndexPath);
}

uint64_t sub_100CD8E14(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a7;
  v44 = a8;
  v42 = a5;
  v13 = a5(0);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - v14;
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1004B804C(a6);
  result = static _SetStorage.allocate(capacity:)(a3);
  v16 = result;
  v40 = a1;
  v41 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v23 >= v41)
      {
LABEL_37:
        swift_release(a4);
        return v16;
      }
      v24 = v40[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v41)
          goto LABEL_37;
        v24 = v40[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v41)
            goto LABEL_37;
          v24 = v40[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v41)
              goto LABEL_37;
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v41)
                  goto LABEL_37;
                v24 = v40[v19];
                ++v25;
                if (v24)
                  goto LABEL_24;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_24:
      v18 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v15, v27 + v28 * v22, v13);
    v29 = *(_QWORD *)(v16 + 40);
    v30 = sub_1004B7878(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v13, v30);
    v31 = -1 << *(_BYTE *)(v16 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6))) != 0)
    {
      v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v37 = v33 == v36;
        if (v33 == v36)
          v33 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v33);
      }
      while (v38 == -1);
      v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }
    *(_QWORD *)(v20 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v16 + 48) + v34 * v28, v15, v13);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v26;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100CD9104(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CD939C(a1, a2, a3, a4, &qword_1013DE780);
}

Swift::Int sub_100CD9110(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t *v30;
  _OWORD v31[2];
  uint64_t v32;

  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1004B804C(&qword_1013DEA18);
  result = static _SetStorage.allocate(capacity:)(v5);
  v6 = result;
  v30 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
      {
LABEL_37:
        swift_release(a4);
        return v6;
      }
      v16 = v30[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          goto LABEL_37;
        v16 = v30[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            goto LABEL_37;
          v16 = v30[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              goto LABEL_37;
            v16 = v30[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  goto LABEL_37;
                v16 = v30[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    sub_1004B8968(*(_QWORD *)(a4 + 48) + 40 * v14, (uint64_t)v31);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v18 = -1 << *(_BYTE *)(v6 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v12 + 8 * v20);
      }
      while (v25 == -1);
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(_QWORD *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v26 = *(_QWORD *)(v6 + 48) + 40 * v21;
    v27 = v31[0];
    v28 = v31[1];
    *(_QWORD *)(v26 + 32) = v32;
    *(_OWORD *)v26 = v27;
    *(_OWORD *)(v26 + 16) = v28;
    ++*(_QWORD *)(v6 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100CD9390(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CD939C(a1, a2, a3, a4, &qword_101405430);
}

Swift::Int sub_100CD939C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;

  v5 = a4;
  if (!a3)
  {
    v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v5);
    return (Swift::Int)v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  sub_1004B804C(a5);
  result = static _SetStorage.allocate(capacity:)(v6);
  v10 = (_QWORD *)result;
  v30 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v30[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v30[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = v10[5];
    v20 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *((_BYTE *)v10 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v30[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v30[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100CD95F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(sub_1004B804C(&qword_10140DF90) + 48);
  v5 = a2 + *(int *)(sub_1004B804C(&qword_1013F9138) + 48);
  sub_1004B8460(a1, a2, type metadata accessor for CRLBoardIdentifier);
  return sub_1004B8460(v4, v5, type metadata accessor for CRLBoardViewModelMetadata);
}

void sub_100CD966C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v10 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v56 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v48 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - v13;
  v44 = type metadata accessor for CRLBoardIdentifier(0);
  v47 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1004B804C(&qword_10140DF98);
  __chkstk_darwin(v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = -1 << *(_BYTE *)(a1 + 32);
  v21 = ~v20;
  v22 = *(_QWORD *)(a1 + 64);
  v23 = -v20;
  v49 = a1;
  v50 = a1 + 64;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v51 = v21;
  v52 = 0;
  v53 = v24 & v22;
  v54 = a2;
  v55 = a3;
  v46 = a1;
  swift_bridgeObjectRetain(a1);
  v45 = a3;
  swift_retain(a3);
  sub_100CE08A0((uint64_t)v19);
  v25 = sub_1004B804C(&qword_1013F9138);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v19, 1, v25) == 1)
  {
LABEL_5:
    swift_release(v45);
    swift_bridgeObjectRelease(v46);
    sub_1004D284C(v49);
    swift_release(v55);
    return;
  }
  v26 = type metadata accessor for CRLBoardIdentifier;
  while (1)
  {
    v28 = (uint64_t)&v19[*(int *)(v25 + 48)];
    v29 = v26;
    sub_1004B84E0((uint64_t)v19, (uint64_t)v16, v26);
    sub_1004B84E0(v28, (uint64_t)v14, type metadata accessor for CRLBoardViewModelMetadata);
    v30 = *a5;
    v32 = sub_100843264((uint64_t)v16);
    v33 = *(_QWORD *)(v30 + 16);
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (*(_QWORD *)(v30 + 24) >= v35)
    {
      if ((a4 & 1) != 0)
      {
        if ((v31 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_10082F52C();
        if ((v36 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_10081A4E0(v35, a4 & 1);
      v37 = sub_100843264((uint64_t)v16);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_22;
      v32 = v37;
      if ((v36 & 1) != 0)
      {
LABEL_7:
        v27 = v48;
        sub_1004B8460((uint64_t)v14, v48, type metadata accessor for CRLBoardViewModelMetadata);
        sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardViewModelMetadata);
        v26 = v29;
        sub_1004B84A4((uint64_t)v16, v29);
        sub_100836E6C(v27, *(_QWORD *)(*a5 + 56) + *(_QWORD *)(v56 + 72) * v32, type metadata accessor for CRLBoardViewModelMetadata);
        goto LABEL_8;
      }
    }
    v39 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v32 >> 6) + 64) |= 1 << v32;
    v26 = v29;
    sub_1004B84E0((uint64_t)v16, v39[6] + *(_QWORD *)(v47 + 72) * v32, v29);
    sub_1004B84E0((uint64_t)v14, v39[7] + *(_QWORD *)(v56 + 72) * v32, type metadata accessor for CRLBoardViewModelMetadata);
    v40 = v39[2];
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
      goto LABEL_21;
    v39[2] = v42;
LABEL_8:
    sub_100CE08A0((uint64_t)v19);
    v25 = sub_1004B804C(&qword_1013F9138);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v19, 1, v25) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v44);
  __break(1u);
}

void sub_100CD9A28(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for CRLBoardLibraryViewModel.Item(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_100D16724(v3);
  v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100CD9AA8(v5);
  *a1 = v3;
}

double sub_100CD9AA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  Swift::Int v50;
  double result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  Swift::Int v57;
  char *v58;
  unint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  int EnumCaseMultiPayload;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t (*v73)(uint64_t);
  Swift::Int v74;
  id v75;
  NSString v76;
  NSString v77;
  uint64_t v78;
  uint64_t *v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t);
  id v92;
  NSString v93;
  NSString v94;
  uint64_t *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  id v109;
  NSString v110;
  NSString v111;
  uint64_t v112;
  uint64_t *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  id v124;
  NSString v125;
  NSString v126;
  uint64_t v127;
  uint64_t *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  Swift::Int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  Swift::Int v144;
  uint64_t v145;
  Swift::Int v146;
  Swift::Int v147;
  uint64_t v148;
  Swift::Int v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  id v158;
  NSString v159;
  NSString v160;
  uint64_t v161;
  uint64_t *v162;
  id v163;
  NSString v164;
  NSString v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  id v176;
  NSString v177;
  NSString v178;
  uint64_t v179;
  uint64_t *v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  Swift::Int v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  BOOL v207;
  unint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  BOOL v217;
  uint64_t v218;
  char v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  unint64_t v249;
  _QWORD *v250;
  unint64_t v251;
  _QWORD *v252;
  Swift::Int v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  Swift::Int v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  Swift::Int v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  _BYTE *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;

  v2 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v3 = __chkstk_darwin(v2);
  v276 = (uint64_t)&v251 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v278 = (uint64_t)&v251 - v6;
  v7 = __chkstk_darwin(v5);
  v275 = (uint64_t)&v251 - v8;
  v9 = __chkstk_darwin(v7);
  v277 = (uint64_t)&v251 - v10;
  v11 = __chkstk_darwin(v9);
  v261 = (uint64_t)&v251 - v12;
  v13 = __chkstk_darwin(v11);
  v263 = (uint64_t)&v251 - v14;
  v15 = __chkstk_darwin(v13);
  v260 = (uint64_t)&v251 - v16;
  v17 = __chkstk_darwin(v15);
  v262 = (uint64_t)&v251 - v18;
  __chkstk_darwin(v17);
  v256 = (uint64_t)&v251 - v19;
  v292 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v272 = *(_QWORD *)(v292 - 8);
  v20 = __chkstk_darwin(v292);
  v264 = (uint64_t)&v251 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v282 = (uint64_t)&v251 - v23;
  v24 = __chkstk_darwin(v22);
  v285 = (uint64_t)&v251 - v25;
  v26 = __chkstk_darwin(v24);
  v284 = (char *)&v251 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v251 - v29;
  v31 = __chkstk_darwin(v28);
  v283 = (uint64_t)&v251 - v32;
  v33 = __chkstk_darwin(v31);
  v270 = (uint64_t)&v251 - v34;
  v35 = __chkstk_darwin(v33);
  v269 = (uint64_t)&v251 - v36;
  v37 = __chkstk_darwin(v35);
  v273 = (uint64_t)&v251 - v38;
  v39 = __chkstk_darwin(v37);
  v268 = (uint64_t)&v251 - v40;
  v41 = __chkstk_darwin(v39);
  v43 = (char *)&v251 - v42;
  v44 = __chkstk_darwin(v41);
  v258 = (char *)&v251 - v45;
  v46 = __chkstk_darwin(v44);
  v259 = (uint64_t)&v251 - v47;
  __chkstk_darwin(v46);
  v257 = (uint64_t)&v251 - v48;
  v287 = a1;
  v49 = a1[1];
  v50 = _minimumMergeRunLength(_:)(v49);
  if (v50 >= v49)
  {
    if (v49 < 0)
      goto LABEL_178;
    if (v49)
      sub_100CDC464(0, v49, 1, v287);
    return result;
  }
  if (v49 >= 0)
    v52 = v49;
  else
    v52 = v49 + 1;
  if (v49 < -1)
  {
LABEL_186:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    JUMPOUT(0x100CDC404);
  }
  v254 = v43;
  v253 = v50;
  if (v49 < 2)
  {
    v56 = _swiftEmptyArrayStorage;
    v271 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v272 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v272 + 80));
    if (v49 != 1)
    {
      v59 = _swiftEmptyArrayStorage[2];
      v58 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_144;
    }
    v252 = _swiftEmptyArrayStorage;
  }
  else
  {
    v53 = v52 >> 1;
    v54 = static Array._allocateBufferUninitialized(minimumCapacity:)(v52 >> 1, v292);
    *(_QWORD *)(v54 + 16) = v53;
    v55 = *(unsigned __int8 *)(v272 + 80);
    v252 = (_QWORD *)v54;
    v271 = v54 + ((v55 + 32) & ~v55);
  }
  v57 = 0;
  v58 = (char *)_swiftEmptyArrayStorage;
  v267 = "serveCRDTMetadata";
  v251 = 0x8000000100FFDFB0;
  v281 = v30;
  do
  {
    v60 = v57 + 1;
    v266 = v57;
    if (v57 + 1 >= v49)
    {
      v74 = v57 + 1;
      goto LABEL_94;
    }
    v61 = *v287;
    v62 = *(_QWORD *)(v272 + 72);
    v63 = v257;
    sub_1004B8460(*v287 + v62 * v60, v257, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v286 = v62;
    sub_1004B8460(v61 + v62 * v57, v259, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v64 = v63;
    v65 = v258;
    sub_1004B8460(v64, (uint64_t)v258, type metadata accessor for CRLBoardLibraryViewModel.Item);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v65, v292);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v67 = v256;
        sub_1004B84E0((uint64_t)v258, v256, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        sub_100BCAD68();
        v69 = v68;
        v71 = v70;
        v72 = (_BYTE *)v67;
        v73 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
      }
      else
      {
        v78 = *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48);
        v72 = v258;
        v79 = (uint64_t *)&v258[v78];
        v69 = *v79;
        v71 = v79[1];
        v73 = type metadata accessor for CRLBoardIdentifier;
      }
      sub_1004B84A4((uint64_t)v72, v73);
    }
    else
    {
      if (*v258)
      {
        v75 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      }
      else
      {
        v80 = (void *)objc_opt_self(NSBundle);
        v75 = objc_msgSend(v80, "mainBundle", v251);
      }
      v76 = String._bridgeToObjectiveC()();
      v77 = String._bridgeToObjectiveC()();
      v81 = objc_msgSend(v75, "localizedStringForKey:value:table:", v76, v77, 0);

      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v71 = v82;

    }
    v290 = v69;
    v291 = v71;
    v83 = (uint64_t)v254;
    sub_1004B8460(v259, (uint64_t)v254, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v84 = swift_getEnumCaseMultiPayload(v83, v292);
    if (v84)
    {
      if (v84 == 1)
      {
        v85 = v256;
        sub_1004B84E0(v83, v256, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        sub_100BCAD68();
        v87 = v86;
        v89 = v88;
        v90 = v85;
        v91 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
      }
      else
      {
        v95 = (uint64_t *)(v83 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48));
        v90 = v83;
        v87 = *v95;
        v89 = v95[1];
        v91 = type metadata accessor for CRLBoardIdentifier;
      }
      sub_1004B84A4(v90, v91);
    }
    else
    {
      v92 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v93 = String._bridgeToObjectiveC()();
      v94 = String._bridgeToObjectiveC()();
      v96 = objc_msgSend(v92, "localizedStringForKey:value:table:", v93, v94, 0);

      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      v89 = v97;

    }
    v288 = v87;
    v289 = v89;
    v265 = sub_1004D292C();
    v279 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v288, &type metadata for String, &type metadata for String, v265, v265);
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease(v291);
    sub_1004B84A4(v259, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_1004B84A4(v257, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v74 = v57 + 2;
    if (v57 + 2 < v49)
    {
      v255 = v58;
      v98 = v286 * v60;
      v99 = v61;
      v100 = v286 * v74;
      while (1)
      {
        v280 = v74;
        v101 = v268;
        sub_1004B8460(v99 + v100, v268, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B8460(v99 + v98, v273, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v102 = v101;
        v103 = v269;
        sub_1004B8460(v102, v269, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v104 = swift_getEnumCaseMultiPayload(v103, v292);
        if (v104)
        {
          if (v104 == 1)
          {
            v105 = v262;
            sub_1004B84E0(v269, v262, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v106 = v260;
            sub_1004B8460(v105, v260, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v107 = sub_1004B804C(&qword_1013E1790);
            v108 = (char *)&loc_100CDA5B8
                 + dword_100CDC404[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8)
                                                                                             + 48))(v106, 5, v107)];
            __asm { BR              X9 }
          }
          v112 = *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48);
          v113 = (uint64_t *)(v269 + v112);
          v115 = *v113;
          v117 = v113[1];
          sub_1004B84A4(v269, type metadata accessor for CRLBoardIdentifier);
        }
        else
        {
          v109 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v110 = String._bridgeToObjectiveC()();
          v111 = String._bridgeToObjectiveC()();
          v114 = objc_msgSend(v109, "localizedStringForKey:value:table:", v110, v111, 0);

          v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
          v117 = v116;

        }
        v290 = v115;
        v291 = v117;
        v118 = v270;
        sub_1004B8460(v273, v270, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v119 = swift_getEnumCaseMultiPayload(v118, v292);
        if (v119)
        {
          if (v119 == 1)
          {
            v120 = v263;
            sub_1004B84E0(v270, v263, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v121 = v261;
            sub_1004B8460(v120, v261, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v122 = sub_1004B804C(&qword_1013E1790);
            v123 = (char *)&loc_100CDAAD0
                 + dword_100CDC41C[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8)
                                                                                             + 48))(v121, 5, v122)];
            __asm { BR              X9 }
          }
          v127 = *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48);
          v128 = (uint64_t *)(v270 + v127);
          v130 = *v128;
          v132 = v128[1];
          sub_1004B84A4(v270, type metadata accessor for CRLBoardIdentifier);
        }
        else
        {
          v124 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v125 = String._bridgeToObjectiveC()();
          v126 = String._bridgeToObjectiveC()();
          v129 = objc_msgSend(v124, "localizedStringForKey:value:table:", v125, v126, 0);

          v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
          v132 = v131;

        }
        v133 = v279 == -1;
        v288 = v130;
        v289 = v132;
        v134 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v288, &type metadata for String, &type metadata for String, v265, v265);
        swift_bridgeObjectRelease(v132);
        swift_bridgeObjectRelease(v291);
        sub_1004B84A4(v273, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B84A4(v268, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (v133 == (v134 != -1))
          break;
        v74 = v280 + 1;
        v99 += v286;
        if (v49 == v280 + 1)
        {
          v74 = v49;
          v58 = v255;
          v57 = v266;
          goto LABEL_49;
        }
      }
      v58 = v255;
      v57 = v266;
      v74 = v280;
    }
    if (v279 != -1)
      goto LABEL_62;
LABEL_49:
    if (v74 < v57)
      goto LABEL_181;
    if (v57 < v74)
    {
      v255 = v58;
      v135 = 0;
      v136 = v286 * (v74 - 1);
      v137 = v74 * v286;
      v138 = v57;
      v139 = v57 * v286;
      v279 = v61;
      do
      {
        if (v138 != v74 + v135 - 1)
        {
          if (!v61)
            goto LABEL_184;
          v142 = v61 + v139;
          v280 = v61 + v136;
          sub_1004B84E0(v61 + v139, v264, type metadata accessor for CRLBoardLibraryViewModel.Item);
          if (v139 < v136 || v142 >= v61 + v137)
          {
            v140 = v61 + v139;
            v141 = v280;
            swift_arrayInitWithTakeFrontToBack(v140, v280, 1, v292);
          }
          else
          {
            v141 = v280;
            if (v139 != v136)
              swift_arrayInitWithTakeBackToFront(v142);
          }
          sub_1004B84E0(v264, v141, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v61 = v279;
        }
        ++v138;
        --v135;
        v136 -= v286;
        v137 -= v286;
        v139 += v286;
      }
      while (v138 < v74 + v135);
      v143 = (uint64_t)v281;
      v58 = v255;
      v57 = v266;
      if (v74 >= v49)
        goto LABEL_94;
    }
    else
    {
LABEL_62:
      v143 = (uint64_t)v281;
      if (v74 >= v49)
        goto LABEL_94;
    }
    if (__OFSUB__(v74, v57))
      goto LABEL_177;
    if (v74 - v57 >= v253)
      goto LABEL_94;
    if (__OFADD__(v57, v253))
      goto LABEL_179;
    if (v57 + v253 >= v49)
      v144 = v49;
    else
      v144 = v57 + v253;
    if (v144 < v57)
    {
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
    if (v74 != v144)
    {
      v255 = v58;
      v145 = *(_QWORD *)(v272 + 72);
      v286 = v145 * (v74 - 1);
      v279 = v145;
      v146 = v74 * v145;
      v265 = v144;
      do
      {
        v148 = 0;
        v149 = v57;
        v280 = v74;
        while (1)
        {
          v150 = *v287;
          v151 = v283;
          sub_1004B8460(v146 + v148 + *v287, v283, type metadata accessor for CRLBoardLibraryViewModel.Item);
          sub_1004B8460(v286 + v148 + v150, v143, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v152 = v284;
          sub_1004B8460(v151, (uint64_t)v284, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v153 = swift_getEnumCaseMultiPayload(v152, v292);
          if (v153)
          {
            if (v153 == 1)
            {
              v154 = v277;
              sub_1004B84E0((uint64_t)v284, v277, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              v155 = v275;
              sub_1004B8460(v154, v275, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              v156 = sub_1004B804C(&qword_1013E1790);
              v157 = (char *)&loc_100CDB40C
                   + dword_100CDC434[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8)
                                                                                               + 48))(v155, 5, v156)];
              __asm { BR              X9 }
            }
            v161 = sub_1004B804C((uint64_t *)&unk_1013EA630);
            v162 = (uint64_t *)&v284[*(int *)(v161 + 48)];
            v167 = *v162;
            v169 = v162[1];
            sub_1004B84A4((uint64_t)v284, type metadata accessor for CRLBoardIdentifier);
          }
          else
          {
            if (*v284)
            {
              v158 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
              v159 = String._bridgeToObjectiveC()();
              v160 = String._bridgeToObjectiveC()();
              v166 = objc_msgSend(v158, "localizedStringForKey:value:table:", v159, v160, 0);

            }
            else
            {
              v163 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
              v164 = String._bridgeToObjectiveC()();
              v165 = String._bridgeToObjectiveC()();
              v166 = objc_msgSend(v163, "localizedStringForKey:value:table:", v164, v165, 0);

            }
            v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
            v169 = v168;

            v143 = (uint64_t)v281;
          }
          v290 = v167;
          v291 = v169;
          v170 = v285;
          sub_1004B8460(v143, v285, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v171 = swift_getEnumCaseMultiPayload(v170, v292);
          if (v171)
          {
            if (v171 == 1)
            {
              v172 = v278;
              sub_1004B84E0(v285, v278, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              v173 = v276;
              sub_1004B8460(v172, v276, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              v174 = sub_1004B804C(&qword_1013E1790);
              v175 = (char *)&loc_100CDB948
                   + dword_100CDC44C[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v174 - 8)
                                                                                               + 48))(v173, 5, v174)];
              __asm { BR              X9 }
            }
            v179 = sub_1004B804C((uint64_t *)&unk_1013EA630);
            v180 = (uint64_t *)(v285 + *(int *)(v179 + 48));
            v182 = *v180;
            v184 = v180[1];
            sub_1004B84A4(v285, type metadata accessor for CRLBoardIdentifier);
          }
          else
          {
            v176 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v177 = String._bridgeToObjectiveC()();
            v178 = String._bridgeToObjectiveC()();
            v181 = objc_msgSend(v176, "localizedStringForKey:value:table:", v177, v178, 0);

            v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v181);
            v184 = v183;

            v143 = (uint64_t)v281;
          }
          v288 = v182;
          v289 = v184;
          v185 = sub_1004D292C();
          v186 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v288, &type metadata for String, &type metadata for String, v185, v185);
          swift_bridgeObjectRelease(v184);
          swift_bridgeObjectRelease(v291);
          sub_1004B84A4(v143, type metadata accessor for CRLBoardLibraryViewModel.Item);
          sub_1004B84A4(v283, type metadata accessor for CRLBoardLibraryViewModel.Item);
          if (v186 != -1)
            break;
          v187 = *v287;
          if (!*v287)
            goto LABEL_182;
          v188 = v187 + v146 + v148;
          v189 = v187 + v286 + v148;
          sub_1004B84E0(v188, v282, type metadata accessor for CRLBoardLibraryViewModel.Item);
          swift_arrayInitWithTakeFrontToBack(v188, v189, 1, v292);
          sub_1004B84E0(v282, v189, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v147 = v280;
          v148 -= v279;
          if (v280 == ++v149)
            goto LABEL_73;
        }
        v147 = v280;
LABEL_73:
        v74 = v147 + 1;
        v286 += v279;
        v146 += v279;
        v57 = v266;
      }
      while (v74 != v265);
      v74 = v265;
      v58 = v255;
    }
LABEL_94:
    if (v74 < v57)
      goto LABEL_172;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
    v280 = v74;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v58 = sub_100D15FCC(0, *((_QWORD *)v58 + 2) + 1, 1, v58);
    v192 = *((_QWORD *)v58 + 2);
    v191 = *((_QWORD *)v58 + 3);
    v59 = v192 + 1;
    if (v192 >= v191 >> 1)
      v58 = sub_100D15FCC((char *)(v191 > 1), v192 + 1, 1, v58);
    *((_QWORD *)v58 + 2) = v59;
    v193 = v58 + 32;
    v194 = &v58[16 * v192 + 32];
    v195 = v280;
    *(_QWORD *)v194 = v57;
    *((_QWORD *)v194 + 1) = v195;
    if (v192)
    {
      while (1)
      {
        v196 = v59 - 1;
        if (v59 >= 4)
        {
          v201 = &v193[16 * v59];
          v202 = *((_QWORD *)v201 - 8);
          v203 = *((_QWORD *)v201 - 7);
          v207 = __OFSUB__(v203, v202);
          v204 = v203 - v202;
          if (v207)
            goto LABEL_161;
          v206 = *((_QWORD *)v201 - 6);
          v205 = *((_QWORD *)v201 - 5);
          v207 = __OFSUB__(v205, v206);
          v199 = v205 - v206;
          v200 = v207;
          if (v207)
            goto LABEL_162;
          v208 = v59 - 2;
          v209 = &v193[16 * v59 - 32];
          v211 = *(_QWORD *)v209;
          v210 = *((_QWORD *)v209 + 1);
          v207 = __OFSUB__(v210, v211);
          v212 = v210 - v211;
          if (v207)
            goto LABEL_164;
          v207 = __OFADD__(v199, v212);
          v213 = v199 + v212;
          if (v207)
            goto LABEL_167;
          if (v213 >= v204)
          {
            v231 = &v193[16 * v196];
            v233 = *(_QWORD *)v231;
            v232 = *((_QWORD *)v231 + 1);
            v207 = __OFSUB__(v232, v233);
            v234 = v232 - v233;
            if (v207)
              goto LABEL_171;
            v224 = v199 < v234;
            goto LABEL_131;
          }
        }
        else
        {
          if (v59 != 3)
          {
            v225 = *((_QWORD *)v58 + 4);
            v226 = *((_QWORD *)v58 + 5);
            v207 = __OFSUB__(v226, v225);
            v218 = v226 - v225;
            v219 = v207;
            goto LABEL_125;
          }
          v198 = *((_QWORD *)v58 + 4);
          v197 = *((_QWORD *)v58 + 5);
          v207 = __OFSUB__(v197, v198);
          v199 = v197 - v198;
          v200 = v207;
        }
        if ((v200 & 1) != 0)
          goto LABEL_163;
        v208 = v59 - 2;
        v214 = &v193[16 * v59 - 32];
        v216 = *(_QWORD *)v214;
        v215 = *((_QWORD *)v214 + 1);
        v217 = __OFSUB__(v215, v216);
        v218 = v215 - v216;
        v219 = v217;
        if (v217)
          goto LABEL_166;
        v220 = &v193[16 * v196];
        v222 = *(_QWORD *)v220;
        v221 = *((_QWORD *)v220 + 1);
        v207 = __OFSUB__(v221, v222);
        v223 = v221 - v222;
        if (v207)
          goto LABEL_169;
        if (__OFADD__(v218, v223))
          goto LABEL_170;
        if (v218 + v223 >= v199)
        {
          v224 = v199 < v223;
LABEL_131:
          if (v224)
            v196 = v208;
          goto LABEL_133;
        }
LABEL_125:
        if ((v219 & 1) != 0)
          goto LABEL_165;
        v227 = &v193[16 * v196];
        v229 = *(_QWORD *)v227;
        v228 = *((_QWORD *)v227 + 1);
        v207 = __OFSUB__(v228, v229);
        v230 = v228 - v229;
        if (v207)
          goto LABEL_168;
        if (v230 < v218)
          goto LABEL_15;
LABEL_133:
        v235 = v196 - 1;
        if (v196 - 1 >= v59)
        {
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
          goto LABEL_180;
        }
        if (!*v287)
          goto LABEL_183;
        v236 = v58;
        v237 = &v193[16 * v235];
        v238 = *(_QWORD *)v237;
        v239 = &v193[16 * v196];
        v240 = *((_QWORD *)v239 + 1);
        v241 = v274;
        sub_100CDD354(*v287 + *(_QWORD *)(v272 + 72) * *(_QWORD *)v237, *v287 + *(_QWORD *)(v272 + 72) * *(_QWORD *)v239, *v287 + *(_QWORD *)(v272 + 72) * v240, v271);
        v274 = v241;
        if (v241)
          goto LABEL_155;
        if (v240 < v238)
          goto LABEL_158;
        if (v196 > *((_QWORD *)v236 + 2))
          goto LABEL_159;
        *(_QWORD *)v237 = v238;
        *(_QWORD *)&v193[16 * v235 + 8] = v240;
        v242 = *((_QWORD *)v236 + 2);
        if (v196 >= v242)
          goto LABEL_160;
        v58 = v236;
        v59 = v242 - 1;
        memmove(&v193[16 * v196], v239 + 16, 16 * (v242 - 1 - v196));
        *((_QWORD *)v236 + 2) = v242 - 1;
        if (v242 <= 2)
          goto LABEL_15;
      }
    }
    v59 = 1;
LABEL_15:
    v49 = v287[1];
    v57 = v280;
  }
  while (v280 < v49);
  v56 = v252;
LABEL_144:
  v236 = v58;
  v252 = v56;
  v243 = v274;
  if (v59 >= 2)
  {
    v244 = *v287;
    do
    {
      v245 = v59 - 2;
      if (v59 < 2)
        goto LABEL_173;
      if (!v244)
        goto LABEL_185;
      v246 = *(_QWORD *)&v236[16 * v245 + 32];
      v247 = *(_QWORD *)&v236[16 * v59 + 24];
      sub_100CDD354(v244 + *(_QWORD *)(v272 + 72) * v246, v244 + *(_QWORD *)(v272 + 72) * *(_QWORD *)&v236[16 * v59 + 16], v244 + *(_QWORD *)(v272 + 72) * v247, v271);
      if (v243)
        break;
      if (v247 < v246)
        goto LABEL_174;
      if ((swift_isUniquelyReferenced_nonNull_native(v236) & 1) == 0)
        v236 = sub_100D1664C((uint64_t)v236);
      if (v245 >= *((_QWORD *)v236 + 2))
        goto LABEL_175;
      v248 = &v236[16 * v245 + 32];
      *(_QWORD *)v248 = v246;
      *((_QWORD *)v248 + 1) = v247;
      v249 = *((_QWORD *)v236 + 2);
      if (v59 > v249)
        goto LABEL_176;
      memmove(&v236[16 * v59 + 16], &v236[16 * v59 + 32], 16 * (v249 - v59));
      *((_QWORD *)v236 + 2) = v249 - 1;
      v59 = v249 - 1;
    }
    while (v249 > 2);
  }
LABEL_155:
  swift_bridgeObjectRelease(v236);
  v250 = v252;
  v252[2] = 0;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v250).n128_u64[0];
  return result;
}

uint64_t sub_100CDC464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  NSString v40;
  NSString v41;
  uint64_t *v42;
  id v43;
  NSString v44;
  NSString v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  id v57;
  NSString v58;
  NSString v59;
  uint64_t *v60;
  id v61;
  NSString v62;
  NSString v63;
  id v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];
  uint64_t v93;
  uint64_t v94;

  v89 = a4;
  v77 = a1;
  v6 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v7 = __chkstk_darwin(v6);
  v79 = (uint64_t)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v81 = (uint64_t)v75 - v10;
  v11 = __chkstk_darwin(v9);
  v78 = (uint64_t)v75 - v12;
  __chkstk_darwin(v11);
  v80 = (uint64_t)v75 - v13;
  v14 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v15 = __chkstk_darwin(v14);
  v86 = (uint64_t)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v75 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)v75 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)v75 - v24;
  result = __chkstk_darwin(v23);
  v90 = (uint64_t)v75 - v28;
  v83 = a3;
  v76 = a2;
  if (a3 != a2)
  {
    v29 = *(_QWORD *)(v27 + 72);
    v94 = v29 * (v83 - 1);
    v82 = v29;
    v91 = v29 * v83;
    v75[2] = "serveCRDTMetadata";
    v75[1] = 0x8000000100FFDFB0;
    v84 = v14;
    v85 = v25;
    do
    {
      v30 = 0;
      v31 = v77;
      do
      {
        v32 = v90;
        v33 = *v89;
        v88 = v91 + v30;
        sub_1004B8460(v91 + v30 + v33, v90, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v87 = v94 + v30;
        sub_1004B8460(v94 + v30 + v33, (uint64_t)v25, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B8460(v32, (uint64_t)v22, type metadata accessor for CRLBoardLibraryViewModel.Item);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v14);
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            v35 = v80;
            sub_1004B84E0((uint64_t)v22, v80, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v36 = v78;
            sub_1004B8460(v35, v78, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v37 = sub_1004B804C(&qword_1013E1790);
            v38 = (char *)&loc_100CDC7AC
                + dword_100CDD324[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 5, v37)];
            __asm { BR              X9 }
          }
          v42 = (uint64_t *)&v22[*(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48)];
          v49 = *v42;
          v51 = v42[1];
          sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLBoardIdentifier);
        }
        else if (*v22)
        {
          v39 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v40 = String._bridgeToObjectiveC()();
          v41 = String._bridgeToObjectiveC()();
          v48 = objc_msgSend(v39, "localizedStringForKey:value:table:", v40, v41, 0);

          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          v51 = v50;

          v14 = v84;
          v25 = v85;
        }
        else
        {
          v43 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v44 = String._bridgeToObjectiveC()();
          v45 = String._bridgeToObjectiveC()();
          v46 = objc_msgSend(v43, "localizedStringForKey:value:table:", v44, v45, 0);

          v25 = v85;
          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
          v51 = v47;

          v14 = v84;
        }
        v92[2] = v49;
        v93 = v51;
        sub_1004B8460((uint64_t)v25, (uint64_t)v19, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v52 = swift_getEnumCaseMultiPayload(v19, v14);
        if (v52)
        {
          if (v52 == 1)
          {
            v53 = v81;
            sub_1004B84E0((uint64_t)v19, v81, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v54 = v79;
            sub_1004B8460(v53, v79, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            v55 = sub_1004B804C(&qword_1013E1790);
            v56 = (char *)&loc_100CDCD64
                + dword_100CDD33C[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v54, 5, v55)];
            __asm { BR              X9 }
          }
          v60 = (uint64_t *)&v19[*(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48)];
          v67 = *v60;
          v69 = v60[1];
          sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
        }
        else if (*v19)
        {
          v57 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v58 = String._bridgeToObjectiveC()();
          v59 = String._bridgeToObjectiveC()();
          v66 = objc_msgSend(v57, "localizedStringForKey:value:table:", v58, v59, 0);

          v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
          v69 = v68;

          v14 = v84;
          v25 = v85;
        }
        else
        {
          v61 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v62 = String._bridgeToObjectiveC()();
          v63 = String._bridgeToObjectiveC()();
          v64 = objc_msgSend(v61, "localizedStringForKey:value:table:", v62, v63, 0);

          v25 = v85;
          v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          v69 = v65;

          v14 = v84;
        }
        v92[0] = v67;
        v92[1] = v69;
        v70 = sub_1004D292C();
        v71 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(v92, &type metadata for String, &type metadata for String, v70, v70);
        swift_bridgeObjectRelease(v69);
        swift_bridgeObjectRelease(v93);
        sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLBoardLibraryViewModel.Item);
        result = sub_1004B84A4(v90, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (v71 != -1)
          break;
        v72 = *v89;
        if (!*v89)
        {
          __break(1u);
          JUMPOUT(0x100CDD324);
        }
        v73 = v72 + v91 + v30;
        v74 = v72 + v94 + v30;
        sub_1004B84E0(v73, v86, type metadata accessor for CRLBoardLibraryViewModel.Item);
        swift_arrayInitWithTakeFrontToBack(v73, v74, 1, v14);
        result = sub_1004B84E0(v86, v74, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v30 -= v82;
        ++v31;
      }
      while (v83 != v31);
      v94 += v82;
      v91 += v82;
      ++v83;
    }
    while (v83 != v76);
  }
  return result;
}

uint64_t sub_100CDD354(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  id v44;
  NSString v45;
  NSString v46;
  uint64_t *v47;
  id v48;
  NSString v49;
  NSString v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  id v63;
  NSString v64;
  NSString v65;
  uint64_t *v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int EnumCaseMultiPayload;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  id v89;
  NSString v90;
  NSString v91;
  uint64_t *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t);
  id v105;
  NSString v106;
  NSString v107;
  uint64_t *v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t result;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;

  v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v8);
  v121 = (uint64_t)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  v13 = __chkstk_darwin(v12);
  v126 = (unint64_t)&v118 - v14;
  v15 = __chkstk_darwin(v13);
  v123 = (uint64_t)&v118 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v118 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v118 - v21;
  v23 = __chkstk_darwin(v20);
  v125 = (uint64_t)&v118 - v24;
  __chkstk_darwin(v23);
  v122 = (uint64_t)&v118 - v27;
  v124 = *(_QWORD *)(v28 + 72);
  if (!v124)
  {
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (a2 - a1 == 0x8000000000000000 && v124 == -1)
    goto LABEL_87;
  v29 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v124 == -1)
    goto LABEL_88;
  v30 = (uint64_t)(a2 - a1) / v124;
  v133 = a1;
  v132 = a4;
  v31 = v29 / v124;
  v120 = v10;
  if (v30 >= v29 / v124)
  {
    if ((v31 & 0x8000000000000000) == 0)
    {
      v122 = v26;
      v33 = v31 * v124;
      v125 = v25;
      if (a4 < a2 || a2 + v33 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v31, v10);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v74 = a4 + v33;
      v131 = a4 + v33;
      v133 = a2;
      if (v33 >= 1 && a1 < a2)
      {
        v76 = -v124;
        v124 = a1;
        v119 = v76;
        do
        {
          v77 = v123;
          sub_1004B8460(v74 + v76, v123, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v78 = a2 + v76;
          sub_1004B8460(a2 + v76, v126, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v79 = v122;
          sub_1004B8460(v77, v122, type metadata accessor for CRLBoardLibraryViewModel.Item);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v79, v10);
          if (EnumCaseMultiPayload)
          {
            if (EnumCaseMultiPayload == 1)
            {
              v81 = v79;
              v82 = v121;
              sub_1004B84E0(v81, v121, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              sub_100BCAD68();
              v84 = v83;
              v86 = v85;
              v87 = v82;
              v88 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
              v76 = v119;
            }
            else
            {
              v92 = (uint64_t *)(v79 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48));
              v84 = *v92;
              v86 = v92[1];
              v87 = v79;
              v88 = type metadata accessor for CRLBoardIdentifier;
            }
            sub_1004B84A4(v87, v88);
          }
          else
          {
            v89 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v90 = String._bridgeToObjectiveC()();
            v91 = String._bridgeToObjectiveC()();
            v93 = objc_msgSend(v89, "localizedStringForKey:value:table:", v90, v91, 0);

            v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
            v86 = v94;

            v10 = v120;
          }
          v95 = v125;
          v129 = v84;
          v130 = v86;
          sub_1004B8460(v126, v125, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v96 = swift_getEnumCaseMultiPayload(v95, v10);
          if (v96)
          {
            if (v96 == 1)
            {
              v97 = v95;
              v98 = v121;
              sub_1004B84E0(v97, v121, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              sub_100BCAD68();
              v100 = v99;
              v102 = v101;
              v103 = v98;
              v104 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
              v76 = v119;
            }
            else
            {
              v108 = (uint64_t *)(v95 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48));
              v100 = *v108;
              v102 = v108[1];
              v103 = v95;
              v104 = type metadata accessor for CRLBoardIdentifier;
            }
            sub_1004B84A4(v103, v104);
          }
          else
          {
            v105 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v106 = String._bridgeToObjectiveC()();
            v107 = String._bridgeToObjectiveC()();
            v109 = objc_msgSend(v105, "localizedStringForKey:value:table:", v106, v107, 0);

            v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
            v102 = v110;

            v10 = v120;
          }
          v111 = a3 + v76;
          v127 = v100;
          v128 = v102;
          v112 = sub_1004D292C();
          v113 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v127, &type metadata for String, &type metadata for String, v112, v112);
          swift_bridgeObjectRelease(v102);
          swift_bridgeObjectRelease(v130);
          sub_1004B84A4(v126, type metadata accessor for CRLBoardLibraryViewModel.Item);
          sub_1004B84A4(v123, type metadata accessor for CRLBoardLibraryViewModel.Item);
          if (v113 == -1)
          {
            v116 = v124;
            if (a3 < a2 || v111 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v76, v78, 1, v10);
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v76);
            }
            v133 += v76;
          }
          else
          {
            v114 = v131;
            v115 = v131 + v76;
            v131 += v76;
            v116 = v124;
            if (a3 < v114 || v111 >= v114)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v76, v115, 1, v10);
            }
            else if (a3 != v114)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v76);
            }
            v78 = a2;
          }
          v74 = v131;
          if (v131 <= a4)
            break;
          a2 = v78;
          a3 += v76;
        }
        while (v78 > v116);
      }
      goto LABEL_85;
    }
  }
  else if ((v30 & 0x8000000000000000) == 0)
  {
    v32 = v30 * v124;
    if (a4 < a1 || a1 + v32 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v30, v10);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v126 = a4 + v32;
    v131 = a4 + v32;
    if (v32 >= 1 && a2 < a3)
    {
      do
      {
        v35 = v122;
        sub_1004B8460(a2, v122, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B8460(a4, v125, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B8460(v35, (uint64_t)v22, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v36 = swift_getEnumCaseMultiPayload(v22, v10);
        if (v36)
        {
          if (v36 == 1)
          {
            v37 = v121;
            sub_1004B84E0((uint64_t)v22, v121, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            sub_100BCAD68();
            v39 = v38;
            v41 = v40;
            v42 = v37;
            v43 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
          }
          else
          {
            v47 = (uint64_t *)&v22[*(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48)];
            v39 = *v47;
            v41 = v47[1];
            v42 = (uint64_t)v22;
            v43 = type metadata accessor for CRLBoardIdentifier;
          }
          sub_1004B84A4(v42, v43);
        }
        else if (*v22)
        {
          v44 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v45 = String._bridgeToObjectiveC()();
          v46 = String._bridgeToObjectiveC()();
          v53 = objc_msgSend(v44, "localizedStringForKey:value:table:", v45, v46, 0);

          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v41 = v54;

          v10 = v120;
        }
        else
        {
          v48 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v49 = String._bridgeToObjectiveC()();
          v50 = String._bridgeToObjectiveC()();
          v51 = objc_msgSend(v48, "localizedStringForKey:value:table:", v49, v50, 0);

          v10 = v120;
          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          v41 = v52;

        }
        v129 = v39;
        v130 = v41;
        sub_1004B8460(v125, (uint64_t)v19, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v55 = swift_getEnumCaseMultiPayload(v19, v10);
        if (v55)
        {
          if (v55 == 1)
          {
            v56 = v121;
            sub_1004B84E0((uint64_t)v19, v121, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            sub_100BCAD68();
            v58 = v57;
            v60 = v59;
            v61 = v56;
            v62 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
          }
          else
          {
            v66 = (uint64_t *)&v19[*(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48)];
            v58 = *v66;
            v60 = v66[1];
            v61 = (uint64_t)v19;
            v62 = type metadata accessor for CRLBoardIdentifier;
          }
          sub_1004B84A4(v61, v62);
        }
        else
        {
          v63 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v64 = String._bridgeToObjectiveC()();
          v65 = String._bridgeToObjectiveC()();
          v67 = objc_msgSend(v63, "localizedStringForKey:value:table:", v64, v65, 0);

          v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
          v60 = v68;

          v10 = v120;
        }
        v127 = v58;
        v128 = v60;
        v69 = sub_1004D292C();
        v70 = StringProtocol.localizedCaseInsensitiveCompare<A>(_:)(&v127, &type metadata for String, &type metadata for String, v69, v69);
        swift_bridgeObjectRelease(v60);
        swift_bridgeObjectRelease(v130);
        sub_1004B84A4(v125, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B84A4(v122, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v71 = v133;
        if (v70 == -1)
        {
          v73 = a2 + v124;
          if (v133 < a2 || v133 >= v73)
          {
            swift_arrayInitWithTakeFrontToBack(v133, a2, 1, v10);
          }
          else if (v133 == a2)
          {
            v71 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v133);
          }
        }
        else
        {
          v72 = v132 + v124;
          if (v133 < v132 || v133 >= v72)
          {
            swift_arrayInitWithTakeFrontToBack(v133, v132, 1, v10);
          }
          else if (v133 != v132)
          {
            swift_arrayInitWithTakeBackToFront(v133);
          }
          v132 = v72;
          v73 = a2;
        }
        v133 = v71 + v124;
        a4 = v132;
        if (v132 >= v126)
          break;
        a2 = v73;
      }
      while (v73 < a3);
    }
LABEL_85:
    sub_100D162E8(&v133, &v132, (uint64_t *)&v131);
    return 1;
  }
LABEL_89:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CDE2DC(uint64_t *__src, id *a2, unint64_t a3, uint64_t *__dst, uint64_t a5, __n128 a6, __n128 a7)
{
  uint64_t *v7;
  id *v9;
  id *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id *v18;
  uint64_t *v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  char v24;
  id *v25;
  id *v26;
  uint64_t *v27;
  id *v28;
  id *v29;
  unint64_t v30;
  uint64_t *v31;
  void *v32;
  id v33;
  id v34;
  char v35;
  char v36;
  id *v37;
  uint64_t *v38;
  uint64_t result;
  uint64_t *v40;
  id *v41;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t *v46;
  uint64_t *v47;
  id *v48;

  v7 = __dst;
  v9 = a2;
  v10 = (id *)__src;
  v11 = (char *)a2 - (char *)__src;
  v12 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v12 = (char *)a2 - (char *)__src;
  v13 = v12 >> 3;
  v14 = a3 - (_QWORD)a2;
  v15 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v15 = a3 - (_QWORD)a2;
  v16 = v15 >> 3;
  v48 = (id *)__src;
  v47 = __dst;
  if (v13 >= v15 >> 3)
  {
    if (v14 >= -7)
    {
      if (__dst != (uint64_t *)a2 || &a2[v16] <= (id *)__dst)
        memmove(__dst, a2, 8 * v16);
      v27 = &v7[v16];
      v46 = v27;
      v48 = v9;
      if (v10 < v9 && v14 >= 8)
      {
        v28 = (id *)(a3 - 8);
        v29 = v9;
        v40 = v7;
        v41 = v10;
        while (1)
        {
          v30 = (unint64_t)v27;
          v31 = v27 - 1;
          v45 = (id)*(v27 - 1);
          v32 = *--v29;
          v44 = v32;
          v33 = v45;
          v34 = v32;
          v35 = sub_100CD4234((uint64_t *)&v45, (uint64_t *)&v44, a5);
          if (v43)
            break;
          v36 = v35;
          v43 = 0;
          v37 = v28 + 1;

          if ((v36 & 1) != 0)
          {
            if (v37 != v9 || v28 >= v9)
              *v28 = *v29;
            v48 = v29;
            v38 = v40;
            v27 = (uint64_t *)v30;
            if (v29 <= v41)
              goto LABEL_48;
          }
          else
          {
            v46 = v31;
            if ((unint64_t)v37 < v30 || (unint64_t)v28 >= v30 || v37 != (id *)v30)
              *v28 = (id)*v31;
            v29 = v9;
            v27 = v31;
            v38 = v40;
            if (v9 <= v41)
              goto LABEL_48;
          }
          --v28;
          v9 = v29;
          if (v27 <= v38)
            goto LABEL_48;
        }

      }
      goto LABEL_48;
    }
  }
  else if (v11 >= -7)
  {
    if (__dst != __src || &__src[v13] <= __dst)
      memmove(__dst, __src, 8 * v13);
    v17 = &v7[v13];
    v46 = v17;
    if ((unint64_t)v9 < a3 && v11 >= 8)
    {
      while (1)
      {
        v18 = v10;
        v45 = *v9;
        v19 = v7;
        v44 = (void *)*v7;
        v20 = v44;
        v21 = v45;
        v22 = v20;
        v23 = sub_100CD4234((uint64_t *)&v45, (uint64_t *)&v44, a5);
        if (v43)
          break;
        v24 = v23;

        if ((v24 & 1) != 0)
        {
          v25 = v9 + 1;
          v26 = v18;
          if (v18 < v9 || v18 >= v25 || v18 != v9)
            *v18 = *v9;
          v7 = v19;
        }
        else
        {
          v26 = v18;
          if (v18 != (id *)v19)
            *v18 = (id)*v19;
          v7 = v19 + 1;
          v47 = v19 + 1;
          v25 = v9;
        }
        v43 = 0;
        v10 = v26 + 1;
        v48 = v10;
        if (v7 < v17)
        {
          v9 = v25;
          if ((unint64_t)v25 < a3)
            continue;
        }
        goto LABEL_48;
      }

    }
LABEL_48:
    sub_100D162E4(&v48, &v47, &v46, a6, a7);
    swift_bridgeObjectRelease(a5);
    return 1;
  }
  swift_bridgeObjectRelease(a5);
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100CDE63C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD *v22;
  unint64_t v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;

  v2 = a2;
  v4 = a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (v4)
      return sub_1008DE5C8(a1, a2);
    return sub_100CDECD4(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100CDFA34);
  }
  if (!v4)
  {
    v8 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
    v9 = &_swiftEmptySetSingleton;
    v36 = &_swiftEmptySetSingleton;
    if (v2 < 0)
      v10 = v2;
    else
      v10 = v2 & 0xFFFFFFFFFFFFFF8;
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      v13 = a1 + 56;
      while (1)
      {
        v34 = v12;
        swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        if (*(_QWORD *)(a1 + 16))
        {
          v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a1 + 40));
          v15 = -1 << *(_BYTE *)(a1 + 32);
          v16 = v14 & ~v15;
          if (((*(_QWORD *)(v13 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
          {
            v17 = v35;
            v18 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v16);
            LOBYTE(v17) = static NSObject.== infix(_:_:)(v18, v17);

            if ((v17 & 1) != 0)
            {
LABEL_21:
              v22 = v36;
              v23 = v36[2];
              if (v36[3] <= v23)
              {
                sub_100AE1048(v23 + 1);
                v22 = v36;
              }
              v24 = v35;
              result = NSObject._rawHashValue(seed:)(v22[5]);
              v25 = v22 + 7;
              v26 = -1 << *((_BYTE *)v22 + 32);
              v27 = result & ~v26;
              v28 = v27 >> 6;
              if (((-1 << v27) & ~v22[(v27 >> 6) + 7]) != 0)
              {
                v29 = __clz(__rbit64((-1 << v27) & ~v22[(v27 >> 6) + 7])) | v27 & 0x7FFFFFFFFFFFFFC0;
              }
              else
              {
                v30 = 0;
                v31 = (unint64_t)(63 - v26) >> 6;
                do
                {
                  if (++v28 == v31 && (v30 & 1) != 0)
                  {
                    __break(1u);
                    return result;
                  }
                  v32 = v28 == v31;
                  if (v28 == v31)
                    v28 = 0;
                  v30 |= v32;
                  v33 = v25[v28];
                }
                while (v33 == -1);
                v29 = __clz(__rbit64(~v33)) + (v28 << 6);
              }
              *(_QWORD *)((char *)v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
              *(_QWORD *)(v22[6] + 8 * v29) = v24;
              ++v22[2];
              goto LABEL_14;
            }
            v19 = ~v15;
            while (1)
            {
              v16 = (v16 + 1) & v19;
              if (((*(_QWORD *)(v13 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
                break;
              v20 = v35;
              v21 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v16);
              LOBYTE(v20) = static NSObject.== infix(_:_:)(v21, v20);

              if ((v20 & 1) != 0)
                goto LABEL_21;
            }
          }
        }

LABEL_14:
        v12 = __CocoaSet.Iterator.next()(result);
        if (!v12)
        {
          v9 = v36;
          break;
        }
      }
    }
    swift_release(v11);
    return (Swift::Int)v9;
  }
  if (a2 >= 0)
    v2 = a2 & 0xFFFFFFFFFFFFFF8;
  v5 = __CocoaSet.count.getter(v2);
  v6 = sub_100ADC940(v2, v5);
  return sub_1008DE5C8(a1, v6);
}

Swift::Int sub_100CDE944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD *v22;
  unint64_t v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;

  v2 = a2;
  v4 = a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (v4)
      return sub_1008DE614(a1, a2);
    return sub_100CDECD4(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100CDFF6C);
  }
  if (!v4)
  {
    v8 = type metadata accessor for CRLCollaborationParticipant(0);
    v9 = &_swiftEmptySetSingleton;
    v36 = &_swiftEmptySetSingleton;
    if (v2 < 0)
      v10 = v2;
    else
      v10 = v2 & 0xFFFFFFFFFFFFFF8;
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      v13 = a1 + 56;
      while (1)
      {
        v34 = v12;
        swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        if (*(_QWORD *)(a1 + 16))
        {
          v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a1 + 40));
          v15 = -1 << *(_BYTE *)(a1 + 32);
          v16 = v14 & ~v15;
          if (((*(_QWORD *)(v13 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
          {
            v17 = v35;
            v18 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v16);
            LOBYTE(v17) = static NSObject.== infix(_:_:)(v18, v17);

            if ((v17 & 1) != 0)
            {
LABEL_21:
              v22 = v36;
              v23 = v36[2];
              if (v36[3] <= v23)
              {
                sub_100ADF528(v23 + 1);
                v22 = v36;
              }
              v24 = v35;
              result = NSObject._rawHashValue(seed:)(v22[5]);
              v25 = v22 + 7;
              v26 = -1 << *((_BYTE *)v22 + 32);
              v27 = result & ~v26;
              v28 = v27 >> 6;
              if (((-1 << v27) & ~v22[(v27 >> 6) + 7]) != 0)
              {
                v29 = __clz(__rbit64((-1 << v27) & ~v22[(v27 >> 6) + 7])) | v27 & 0x7FFFFFFFFFFFFFC0;
              }
              else
              {
                v30 = 0;
                v31 = (unint64_t)(63 - v26) >> 6;
                do
                {
                  if (++v28 == v31 && (v30 & 1) != 0)
                  {
                    __break(1u);
                    return result;
                  }
                  v32 = v28 == v31;
                  if (v28 == v31)
                    v28 = 0;
                  v30 |= v32;
                  v33 = v25[v28];
                }
                while (v33 == -1);
                v29 = __clz(__rbit64(~v33)) + (v28 << 6);
              }
              *(_QWORD *)((char *)v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
              *(_QWORD *)(v22[6] + 8 * v29) = v24;
              ++v22[2];
              goto LABEL_14;
            }
            v19 = ~v15;
            while (1)
            {
              v16 = (v16 + 1) & v19;
              if (((*(_QWORD *)(v13 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
                break;
              v20 = v35;
              v21 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v16);
              LOBYTE(v20) = static NSObject.== infix(_:_:)(v21, v20);

              if ((v20 & 1) != 0)
                goto LABEL_21;
            }
          }
        }

LABEL_14:
        v12 = __CocoaSet.Iterator.next()(result);
        if (!v12)
        {
          v9 = v36;
          break;
        }
      }
    }
    swift_release(v11);
    return (Swift::Int)v9;
  }
  if (a2 >= 0)
    v2 = a2 & 0xFFFFFFFFFFFFFF8;
  v5 = __CocoaSet.count.getter(v2);
  v6 = sub_100ADC314(v2, v5);
  return sub_1008DE614(a1, v6);
}

uint64_t sub_100CDEC3C(uint64_t a1, uint64_t a2)
{
  return sub_100CDECD4(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100CDEE60);
}

uint64_t sub_100CDEC88(uint64_t a1, uint64_t a2)
{
  return sub_100CDECD4(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100CDF538);
}

uint64_t sub_100CDECD4(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = isStackAllocationSafe;
  v6 = *(_BYTE *)(a2 + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = a3((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a2, v5);
    swift_release(a2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v10, -1);
    bzero(v12, v10);
    v11 = a3((char *)v12, v9, a2, v5);
    swift_release(a2);
    swift_slowDealloc(v12, -1, -1);
  }
  return v11;
}

void sub_100CDEE60(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, unint64_t, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t i;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, unint64_t, uint64_t, __n128);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v70 = a2;
  v73 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v70 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v70 - v14;
  v18 = __chkstk_darwin(v16);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(a4 + 16);
  v79 = a4;
  v80 = a3;
  v81 = v7;
  if (v20 >= v19)
  {
    v75 = 0;
    v45 = 0;
    v46 = *(_QWORD *)(a3 + 56);
    v71 = a3 + 56;
    v47 = 1 << *(_BYTE *)(a3 + 32);
    if (v47 < 64)
      v48 = ~(-1 << v47);
    else
      v48 = -1;
    v49 = v48 & v46;
    v72 = (unint64_t)(v47 + 63) >> 6;
    v78 = a4 + 56;
    if (v49)
      goto LABEL_38;
LABEL_39:
    v51 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v51 < v72)
    {
      v52 = *(_QWORD *)(v71 + 8 * v51);
      v53 = v45 + 1;
      if (v52)
        goto LABEL_52;
      v53 = v45 + 2;
      if (v45 + 2 < v72)
      {
        v52 = *(_QWORD *)(v71 + 8 * v53);
        if (v52)
          goto LABEL_52;
        v53 = v45 + 3;
        if (v45 + 3 < v72)
        {
          v52 = *(_QWORD *)(v71 + 8 * v53);
          if (v52)
            goto LABEL_52;
          v54 = v45 + 4;
          if (v45 + 4 < v72)
          {
            v52 = *(_QWORD *)(v71 + 8 * v54);
            if (!v52)
            {
              while (1)
              {
                v53 = v54 + 1;
                if (__OFADD__(v54, 1))
                  goto LABEL_67;
                if (v53 >= v72)
                  goto LABEL_61;
                v52 = *(_QWORD *)(v71 + 8 * v53);
                ++v54;
                if (v52)
                  goto LABEL_52;
              }
            }
            v53 = v45 + 4;
LABEL_52:
            v76 = (v52 - 1) & v52;
            v77 = v53;
            for (i = __clz(__rbit64(v52)) + (v53 << 6); ; i = __clz(__rbit64(v49)) | (v45 << 6))
            {
              v55 = *(_QWORD *)(a3 + 48);
              v56 = *(_QWORD *)(v7 + 72);
              v74 = i;
              v57 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
              v57(v9, v55 + v56 * i, v6, v18);
              v58 = *(_QWORD *)(a4 + 40);
              v59 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v60 = v7;
              v61 = v9;
              v62 = dispatch thunk of Hashable._rawHashValue(seed:)(v58, v6, v59);
              v63 = -1 << *(_BYTE *)(a4 + 32);
              v64 = v62 & ~v63;
              if (((*(_QWORD *)(v78 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) != 0)
              {
                v65 = ~v63;
                while (1)
                {
                  ((void (*)(char *, unint64_t, uint64_t))v57)(v12, *(_QWORD *)(v79 + 48) + v64 * v56, v6);
                  sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                  v66 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v61);
                  v67 = *(void (**)(char *, uint64_t))(v81 + 8);
                  v67(v12, v6);
                  if ((v66 & 1) != 0)
                    break;
                  v64 = (v64 + 1) & v65;
                  if (((*(_QWORD *)(v78 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) == 0)
                    goto LABEL_59;
                }
                v9 = v61;
                v67(v61, v6);
                *(unint64_t *)((char *)v73 + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v74;
                v49 = v76;
                v26 = __OFADD__(v75++, 1);
                a4 = v79;
                a3 = v80;
                v7 = v81;
                v45 = v77;
                if (v26)
                  goto LABEL_65;
                if (!v76)
                  goto LABEL_39;
              }
              else
              {
                v67 = *(void (**)(char *, uint64_t))(v60 + 8);
LABEL_59:
                v9 = v61;
                v67(v61, v6);
                a4 = v79;
                a3 = v80;
                v7 = v81;
                v49 = v76;
                v45 = v77;
                if (!v76)
                  goto LABEL_39;
              }
LABEL_38:
              v76 = (v49 - 1) & v49;
              v77 = v45;
            }
          }
        }
      }
    }
LABEL_61:
    v68 = v70;
    v69 = v75;
    swift_retain(a3);
    sub_100CD8E14(v73, v68, v69, a3, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1014052F8, (unint64_t *)&qword_1013DE630, (uint64_t)&protocol conformance descriptor for UUID);
    return;
  }
  v74 = (unint64_t)&v70 - v17;
  v75 = 0;
  v21 = 0;
  v22 = *(_QWORD *)(a4 + 56);
  v71 = a4 + 56;
  v23 = 1 << *(_BYTE *)(a4 + 32);
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v25 = v24 & v22;
  v72 = (unint64_t)(v23 + 63) >> 6;
  v78 = a3 + 56;
  do
  {
    v27 = v74;
    if (v25)
    {
LABEL_8:
      v76 = (v25 - 1) & v25;
      v77 = v21;
      v28 = __clz(__rbit64(v25)) | (v21 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v29 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        goto LABEL_63;
      }
      if (v29 >= v72)
        goto LABEL_61;
      v30 = *(_QWORD *)(v71 + 8 * v29);
      v31 = v21 + 1;
      if (!v30)
      {
        v31 = v21 + 2;
        if (v21 + 2 >= v72)
          goto LABEL_61;
        v30 = *(_QWORD *)(v71 + 8 * v31);
        if (!v30)
        {
          v31 = v21 + 3;
          if (v21 + 3 >= v72)
            goto LABEL_61;
          v30 = *(_QWORD *)(v71 + 8 * v31);
          if (!v30)
          {
            v32 = v21 + 4;
            if (v21 + 4 >= v72)
              goto LABEL_61;
            v30 = *(_QWORD *)(v71 + 8 * v32);
            if (!v30)
            {
              while (1)
              {
                v31 = v32 + 1;
                if (__OFADD__(v32, 1))
                  goto LABEL_66;
                if (v31 >= v72)
                  goto LABEL_61;
                v30 = *(_QWORD *)(v71 + 8 * v31);
                ++v32;
                if (v30)
                  goto LABEL_22;
              }
            }
            v31 = v21 + 4;
          }
        }
      }
LABEL_22:
      v76 = (v30 - 1) & v30;
      v77 = v31;
      v28 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_23:
      v33 = *(_QWORD *)(v7 + 72);
      v34 = *(void (**)(unint64_t, unint64_t, uint64_t, __n128))(v7 + 16);
      v34(v27, *(_QWORD *)(a4 + 48) + v33 * v28, v6, v18);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v15, v27, v6);
      v35 = *(_QWORD *)(v80 + 40);
      v36 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = v7;
      v38 = v15;
      v39 = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v6, v36);
      a3 = v80;
      v40 = -1 << *(_BYTE *)(v80 + 32);
      v41 = v39 & ~v40;
      if (((*(_QWORD *)(v78 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
        break;
      v44 = *(void (**)(char *, uint64_t))(v37 + 8);
LABEL_29:
      v15 = v38;
      v44(v38, v6);
      a4 = v79;
      v7 = v81;
      v27 = v74;
      v25 = v76;
      v21 = v77;
      if (v76)
        goto LABEL_8;
    }
    v42 = ~v40;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v34)(v12, *(_QWORD *)(a3 + 48) + v41 * v33, v6);
      sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v43 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v38);
      v44 = *(void (**)(char *, uint64_t))(v81 + 8);
      v44(v12, v6);
      if ((v43 & 1) != 0)
        break;
      v41 = (v41 + 1) & v42;
      a3 = v80;
      if (((*(_QWORD *)(v78 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
        goto LABEL_29;
    }
    v15 = v38;
    v44(v38, v6);
    *(unint64_t *)((char *)v73 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v25 = v76;
    v26 = __OFADD__(v75++, 1);
    a4 = v79;
    a3 = v80;
    v7 = v81;
    v21 = v77;
  }
  while (!v26);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
}

unint64_t *sub_100CDF538(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  Swift::UInt64 v43[2];
  _QWORD v44[5];
  uint64_t v45;
  _OWORD v46[2];
  __int128 v47;
  int64_t v48;

  v39 = result;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v7 = 0;
    v40 = a4 + 56;
    v8 = 1 << *(_BYTE *)(a4 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(a4 + 56);
    v48 = (unint64_t)(v8 + 63) >> 6;
    v11 = a3 + 56;
    do
    {
      while (1)
      {
        if (v10)
        {
          v12 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          v13 = v12 | (v7 << 6);
        }
        else
        {
          v14 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
            __break(1u);
LABEL_64:
            __break(1u);
            goto LABEL_65;
          }
          if (v14 >= v48)
            goto LABEL_60;
          v15 = *(_QWORD *)(v40 + 8 * v14);
          ++v7;
          if (!v15)
          {
            v7 = v14 + 1;
            if (v14 + 1 >= v48)
              goto LABEL_60;
            v15 = *(_QWORD *)(v40 + 8 * v7);
            if (!v15)
            {
              v7 = v14 + 2;
              if (v14 + 2 >= v48)
                goto LABEL_60;
              v15 = *(_QWORD *)(v40 + 8 * v7);
              if (!v15)
              {
                v16 = v14 + 3;
                if (v16 >= v48)
                {
LABEL_60:
                  v36 = a2;
LABEL_62:
                  swift_retain(a3);
                  return (unint64_t *)sub_100CD8724(v39, v36, v6, a3);
                }
                v15 = *(_QWORD *)(v40 + 8 * v16);
                if (!v15)
                {
                  while (1)
                  {
                    v7 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      break;
                    if (v7 >= v48)
                      goto LABEL_60;
                    v15 = *(_QWORD *)(v40 + 8 * v7);
                    ++v16;
                    if (v15)
                      goto LABEL_22;
                  }
LABEL_65:
                  __break(1u);
                  goto LABEL_66;
                }
                v7 = v16;
              }
            }
          }
LABEL_22:
          v10 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v7 << 6);
        }
        sub_10051FDDC(*(_QWORD *)(a4 + 48) + 48 * v13, (uint64_t)v46);
        v42[0] = v46[0];
        v42[1] = v46[1];
        *(_OWORD *)v43 = v47;
        Hasher.init(_seed:)(v44, *(_QWORD *)(a3 + 40));
        AnyHashable.hash(into:)(v44);
        Hasher._combine(_:)(v43[1]);
        v17 = Hasher._finalize()();
        v18 = -1 << *(_BYTE *)(a3 + 32);
        v19 = v17 & ~v18;
        if (((*(_QWORD *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          break;
LABEL_6:
        result = sub_10051FE18(v42);
      }
      v20 = ~v18;
      while (1)
      {
        sub_10051FDDC(*(_QWORD *)(a3 + 48) + 48 * v19, (uint64_t)v44);
        if ((static AnyHashable.== infix(_:_:)(v44, v42) & 1) != 0 && v45 == v43[1])
          break;
        sub_10051FE18(v44);
        v19 = (v19 + 1) & v20;
        if (((*(_QWORD *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          goto LABEL_6;
      }
      sub_10051FE18(v44);
      result = sub_10051FE18(v42);
      *(unint64_t *)((char *)v39 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v21 = __OFADD__(v6++, 1);
    }
    while (!v21);
    __break(1u);
  }
  v38 = 0;
  v22 = 0;
  v41 = a3 + 56;
  v23 = 1 << *(_BYTE *)(a3 + 32);
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v25 = v24 & *(_QWORD *)(a3 + 56);
  v48 = (unint64_t)(v23 + 63) >> 6;
  v26 = a4 + 56;
  v6 = 48;
  while (v25)
  {
    v27 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    v28 = v27 | (v22 << 6);
LABEL_52:
    sub_10051FDDC(*(_QWORD *)(a3 + 48) + 48 * v28, (uint64_t)v46);
    Hasher.init(_seed:)(v44, *(_QWORD *)(a4 + 40));
    AnyHashable.hash(into:)(v44);
    Hasher._combine(_:)(*((Swift::UInt64 *)&v47 + 1));
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(a4 + 32);
    v34 = v32 & ~v33;
    if (((*(_QWORD *)(v26 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) != 0)
    {
      v35 = ~v33;
      while (1)
      {
        sub_10051FDDC(*(_QWORD *)(a4 + 48) + 48 * v34, (uint64_t)v44);
        if ((static AnyHashable.== infix(_:_:)(v44, v46) & 1) != 0 && v45 == *((_QWORD *)&v47 + 1))
          break;
        sub_10051FE18(v44);
        v34 = (v34 + 1) & v35;
        if (((*(_QWORD *)(v26 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
          goto LABEL_35;
      }
      sub_10051FE18(v44);
      result = sub_10051FE18(v46);
      *(unint64_t *)((char *)v39 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      v21 = __OFADD__(v38++, 1);
      if (v21)
      {
        __break(1u);
        goto LABEL_60;
      }
    }
    else
    {
LABEL_35:
      result = sub_10051FE18(v46);
    }
  }
  v29 = v22 + 1;
  if (__OFADD__(v22, 1))
    goto LABEL_64;
  if (v29 >= v48)
  {
LABEL_61:
    v36 = a2;
    v6 = v38;
    goto LABEL_62;
  }
  v30 = *(_QWORD *)(v41 + 8 * v29);
  ++v22;
  if (v30)
    goto LABEL_51;
  v22 = v29 + 1;
  if (v29 + 1 >= v48)
    goto LABEL_61;
  v30 = *(_QWORD *)(v41 + 8 * v22);
  if (v30)
    goto LABEL_51;
  v22 = v29 + 2;
  if (v29 + 2 >= v48)
    goto LABEL_61;
  v30 = *(_QWORD *)(v41 + 8 * v22);
  if (v30)
  {
LABEL_51:
    v25 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v22 << 6);
    goto LABEL_52;
  }
  v31 = v29 + 3;
  if (v31 >= v48)
    goto LABEL_61;
  v30 = *(_QWORD *)(v41 + 8 * v31);
  if (v30)
  {
    v22 = v31;
    goto LABEL_51;
  }
  while (1)
  {
    v22 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v22 >= v48)
      goto LABEL_61;
    v30 = *(_QWORD *)(v41 + 8 * v22);
    ++v31;
    if (v30)
      goto LABEL_51;
  }
LABEL_66:
  __break(1u);
  return result;
}

void sub_100CDFA34(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  Swift::Int v16;
  id v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  unint64_t i;
  unint64_t v28;
  id v29;
  char v30;
  BOOL v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  Swift::Int v43;
  id v44;
  Swift::Int v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  char v49;
  uint64_t v50;
  id v51;
  char v52;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  int64_t v64;

  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v55 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v56 = (unint64_t)(v7 + 63) >> 6;
    v58 = 0;
    v63 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v59 = (v9 - 1) & v9;
          v61 = v6;
          v10 = __clz(__rbit64(v9)) | (v6 << 6);
          v11 = a4;
        }
        else
        {
          v12 = v6 + 1;
          v11 = a4;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_65;
          }
          if (v12 >= v56)
            goto LABEL_63;
          v13 = *(_QWORD *)(v55 + 8 * v12);
          v14 = v6 + 1;
          if (!v13)
          {
            v14 = v12 + 1;
            if (v12 + 1 >= v56)
              goto LABEL_63;
            v13 = *(_QWORD *)(v55 + 8 * v14);
            if (!v13)
            {
              v14 = v12 + 2;
              if (v12 + 2 >= v56)
                goto LABEL_63;
              v13 = *(_QWORD *)(v55 + 8 * v14);
              if (!v13)
              {
                v15 = v12 + 3;
                if (v15 >= v56)
                  goto LABEL_63;
                v13 = *(_QWORD *)(v55 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      goto LABEL_67;
                    if (v14 >= v56)
                      goto LABEL_63;
                    v13 = *(_QWORD *)(v55 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_22;
                  }
                }
                v14 = v15;
              }
            }
          }
LABEL_22:
          v59 = (v13 - 1) & v13;
          v61 = v14;
          v10 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        v16 = *(_QWORD *)(v5 + 40);
        v17 = *(id *)(*(_QWORD *)(v11 + 48) + 8 * v10);
        v18 = NSObject._rawHashValue(seed:)(v16);
        v19 = v5;
        v20 = -1 << *(_BYTE *)(v5 + 32);
        v21 = v18 & ~v20;
        v22 = v21 >> 6;
        v23 = 1 << v21;
        if (((1 << v21) & *(_QWORD *)(v63 + 8 * (v21 >> 6))) != 0)
          break;
LABEL_6:

        v5 = v19;
        v9 = v59;
        v6 = v61;
      }
      sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
      v24 = *(id *)(*(_QWORD *)(v19 + 48) + 8 * v21);
      v25 = static NSObject.== infix(_:_:)(v24, v17);

      if ((v25 & 1) == 0)
      {
        v26 = ~v20;
        for (i = v21 + 1; ; i = v28 + 1)
        {
          v28 = i & v26;
          if (((*(_QWORD *)(v63 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0)
            break;
          v5 = v19;
          v29 = *(id *)(*(_QWORD *)(v19 + 48) + 8 * v28);
          v30 = static NSObject.== infix(_:_:)(v29, v17);

          if ((v30 & 1) != 0)
          {

            v22 = v28 >> 6;
            v23 = 1 << v28;
            goto LABEL_30;
          }
        }
        goto LABEL_6;
      }

      v5 = v19;
LABEL_30:
      v9 = v59;
      v6 = v61;
      a1[v22] |= v23;
      v31 = __OFADD__(v58++, 1);
      if (v31)
        goto LABEL_66;
    }
  }
  v32 = 0;
  v57 = a3 + 56;
  v58 = 0;
  v33 = 1 << *(_BYTE *)(a3 + 32);
  if (v33 < 64)
    v34 = ~(-1 << v33);
  else
    v34 = -1;
  v35 = v34 & *(_QWORD *)(a3 + 56);
  v60 = (unint64_t)(v33 + 63) >> 6;
  v36 = a4 + 56;
  while (1)
  {
    if (v35)
    {
      v37 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v64 = v32;
      v38 = v37 | (v32 << 6);
      goto LABEL_55;
    }
    v39 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v39 >= v60)
      goto LABEL_63;
    v40 = *(_QWORD *)(v57 + 8 * v39);
    v41 = v32 + 1;
    if (!v40)
    {
      v41 = v32 + 2;
      if (v32 + 2 >= v60)
        goto LABEL_63;
      v40 = *(_QWORD *)(v57 + 8 * v41);
      if (!v40)
      {
        v41 = v32 + 3;
        if (v32 + 3 >= v60)
          goto LABEL_63;
        v40 = *(_QWORD *)(v57 + 8 * v41);
        if (!v40)
          break;
      }
    }
LABEL_54:
    v35 = (v40 - 1) & v40;
    v64 = v41;
    v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_55:
    v62 = v38;
    v43 = *(_QWORD *)(v4 + 40);
    v44 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v38);
    v45 = NSObject._rawHashValue(seed:)(v43);
    v46 = -1 << *(_BYTE *)(v4 + 32);
    v47 = v45 & ~v46;
    if (((*(_QWORD *)(v36 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
      goto LABEL_38;
    sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
    v48 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v47);
    v49 = static NSObject.== infix(_:_:)(v48, v44);

    if ((v49 & 1) != 0)
    {
LABEL_60:

      v32 = v64;
      *(unint64_t *)((char *)a1 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
      v31 = __OFADD__(v58++, 1);
      v4 = a4;
      if (v31)
      {
        __break(1u);
LABEL_63:
        swift_retain(v5);
        sub_100CD939C(a1, a2, v58, v5, (uint64_t *)&unk_1013DE990);
        return;
      }
    }
    else
    {
      v50 = ~v46;
      while (1)
      {
        v47 = (v47 + 1) & v50;
        v4 = a4;
        if (((*(_QWORD *)(v36 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
          break;
        v51 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v47);
        v52 = static NSObject.== infix(_:_:)(v51, v44);

        if ((v52 & 1) != 0)
          goto LABEL_60;
      }
LABEL_38:

      v32 = v64;
    }
  }
  v42 = v32 + 4;
  if (v32 + 4 >= v60)
    goto LABEL_63;
  v40 = *(_QWORD *)(v57 + 8 * v42);
  if (v40)
  {
    v41 = v32 + 4;
    goto LABEL_54;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v60)
      goto LABEL_63;
    v40 = *(_QWORD *)(v57 + 8 * v41);
    ++v42;
    if (v40)
      goto LABEL_54;
  }
LABEL_68:
  __break(1u);
}

void sub_100CDFF6C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  Swift::Int v16;
  id v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  unint64_t i;
  unint64_t v27;
  id v28;
  char v29;
  BOOL v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  Swift::Int v43;
  id v44;
  Swift::Int v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  unint64_t v60;

  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v53 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v54 = (unint64_t)(v7 + 63) >> 6;
    v56 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v57 = (v9 - 1) & v9;
          v59 = v6;
          v11 = __clz(__rbit64(v9)) | (v6 << 6);
        }
        else
        {
          v12 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_65;
          }
          if (v12 >= v54)
            goto LABEL_63;
          v13 = *(_QWORD *)(v53 + 8 * v12);
          v14 = v6 + 1;
          if (!v13)
          {
            v14 = v6 + 2;
            if (v6 + 2 >= v54)
              goto LABEL_63;
            v13 = *(_QWORD *)(v53 + 8 * v14);
            if (!v13)
            {
              v14 = v6 + 3;
              if (v6 + 3 >= v54)
                goto LABEL_63;
              v13 = *(_QWORD *)(v53 + 8 * v14);
              if (!v13)
              {
                v15 = v6 + 4;
                if (v6 + 4 >= v54)
                  goto LABEL_63;
                v13 = *(_QWORD *)(v53 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      goto LABEL_67;
                    if (v14 >= v54)
                      goto LABEL_63;
                    v13 = *(_QWORD *)(v53 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_22;
                  }
                }
                v14 = v6 + 4;
              }
            }
          }
LABEL_22:
          v57 = (v13 - 1) & v13;
          v59 = v14;
          v11 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        v16 = *(_QWORD *)(v5 + 40);
        v17 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
        v18 = NSObject._rawHashValue(seed:)(v16);
        v19 = -1 << *(_BYTE *)(v5 + 32);
        v20 = v18 & ~v19;
        v21 = v20 >> 6;
        v22 = 1 << v20;
        if (((1 << v20) & *(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
          break;
LABEL_6:

        v4 = a4;
        v9 = v57;
        v6 = v59;
      }
      type metadata accessor for CRLCollaborationParticipant(0);
      v23 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v24 = static NSObject.== infix(_:_:)(v23, v17);

      if ((v24 & 1) == 0)
      {
        v25 = ~v19;
        for (i = v20 + 1; ; i = v27 + 1)
        {
          v27 = i & v25;
          v5 = a3;
          if (((*(_QWORD *)(v10 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
            break;
          v28 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v27);
          v29 = static NSObject.== infix(_:_:)(v28, v17);

          if ((v29 & 1) != 0)
          {

            v21 = v27 >> 6;
            v22 = 1 << v27;
            goto LABEL_30;
          }
        }
        goto LABEL_6;
      }

LABEL_30:
      v6 = v59;
      v5 = a3;
      a1[v21] |= v22;
      v9 = v57;
      v30 = __OFADD__(v56++, 1);
      v4 = a4;
      if (v30)
        goto LABEL_66;
    }
  }
  v31 = 0;
  v55 = a3 + 56;
  v56 = 0;
  v32 = 1 << *(_BYTE *)(a3 + 32);
  if (v32 < 64)
    v33 = ~(-1 << v32);
  else
    v33 = -1;
  v34 = v33 & *(_QWORD *)(a3 + 56);
  v58 = (unint64_t)(v32 + 63) >> 6;
  v35 = a4 + 56;
  while (1)
  {
    if (v34)
    {
      v36 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v37 = v31;
      v38 = v36 | (v31 << 6);
      v5 = a3;
      goto LABEL_55;
    }
    v39 = v31 + 1;
    v5 = a3;
    if (__OFADD__(v31, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v39 >= v58)
      goto LABEL_63;
    v40 = *(_QWORD *)(v55 + 8 * v39);
    v41 = v31 + 1;
    if (!v40)
    {
      v41 = v31 + 2;
      if (v31 + 2 >= v58)
        goto LABEL_63;
      v40 = *(_QWORD *)(v55 + 8 * v41);
      if (!v40)
      {
        v41 = v31 + 3;
        if (v31 + 3 >= v58)
          goto LABEL_63;
        v40 = *(_QWORD *)(v55 + 8 * v41);
        if (!v40)
          break;
      }
    }
LABEL_54:
    v34 = (v40 - 1) & v40;
    v37 = v41;
    v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_55:
    v60 = v38;
    v43 = *(_QWORD *)(v4 + 40);
    v44 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v38);
    v45 = NSObject._rawHashValue(seed:)(v43);
    v46 = -1 << *(_BYTE *)(v4 + 32);
    v47 = v45 & ~v46;
    if (((*(_QWORD *)(v35 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
      goto LABEL_38;
    type metadata accessor for CRLCollaborationParticipant(0);
    v48 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v47);
    v5 = static NSObject.== infix(_:_:)(v48, v44);

    if ((v5 & 1) != 0)
    {
LABEL_60:

      *(unint64_t *)((char *)a1 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
      v30 = __OFADD__(v56++, 1);
      v4 = a4;
      v31 = v37;
      if (v30)
      {
        __break(1u);
LABEL_63:
        swift_retain(v5);
        sub_100CD939C(a1, a2, v56, v5, &qword_101405430);
        return;
      }
    }
    else
    {
      v49 = ~v46;
      while (1)
      {
        v47 = (v47 + 1) & v49;
        if (((*(_QWORD *)(v35 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
          break;
        v50 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v47);
        v5 = static NSObject.== infix(_:_:)(v50, v44);

        if ((v5 & 1) != 0)
          goto LABEL_60;
      }
LABEL_38:

      v4 = a4;
      v31 = v37;
    }
  }
  v42 = v31 + 4;
  if (v31 + 4 >= v58)
    goto LABEL_63;
  v40 = *(_QWORD *)(v55 + 8 * v42);
  if (v40)
  {
    v41 = v31 + 4;
    goto LABEL_54;
  }
  while (1)
  {
    v41 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v41 >= v58)
      goto LABEL_63;
    v40 = *(_QWORD *)(v55 + 8 * v41);
    ++v42;
    if (v40)
      goto LABEL_54;
  }
LABEL_68:
  __break(1u);
}

uint64_t sub_100CE048C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100CE052C@<X0>(uint64_t a1@<X8>)
{
  return sub_100CE0F58(&qword_101405F50, &qword_10140E0B8, (uint64_t *)&unk_101405F40, a1);
}

uint64_t sub_100CE0548@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;

  v3 = sub_1004B804C((uint64_t *)&unk_1013F13C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F13B8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v39 - v11);
  v14 = *v1;
  v13 = v1[1];
  v16 = v1[2];
  v15 = v1[3];
  v17 = v15;
  v18 = v1[4];
  v40 = v6;
  v46 = v16;
  if (v18)
  {
    v44 = a1;
    v45 = v15;
    v41 = v13;
    v42 = v4;
    v43 = v10;
    v19 = v3;
    v20 = (v18 - 1) & v18;
    v21 = __clz(__rbit64(v18)) | (v15 << 6);
LABEL_3:
    v22 = *(_QWORD *)(v14 + 56);
    v23 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * v21);
    v24 = v14;
    v26 = *v23;
    v25 = v23[1];
    v27 = v22 + *(_QWORD *)(*(_QWORD *)(sub_1004B804C((uint64_t *)&unk_1013E1A50) - 8) + 72) * v21;
    v3 = v19;
    sub_1004CB7BC(v27, (uint64_t)v12 + *(int *)(v19 + 48), (uint64_t *)&unk_1013E1A50);
    *v12 = v26;
    v12[1] = v25;
    v14 = v24;
    v4 = v42;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v12, 0, 1, v19);
    swift_bridgeObjectRetain(v25);
    v10 = v43;
    a1 = v44;
    v13 = v41;
    goto LABEL_25;
  }
  v28 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
LABEL_23:
    v17 = v11;
    goto LABEL_24;
  }
  v29 = (unint64_t)(v16 + 64) >> 6;
  if (v28 < v29)
  {
    v30 = *(_QWORD *)(v13 + 8 * v28);
    if (v30)
    {
LABEL_7:
      v41 = v13;
      v42 = v4;
      v43 = v10;
      v44 = a1;
      v19 = v3;
      v20 = (v30 - 1) & v30;
      v21 = __clz(__rbit64(v30)) + (v28 << 6);
      v45 = v28;
      goto LABEL_3;
    }
    v31 = v15 + 2;
    v17 = v15 + 1;
    if (v15 + 2 < v29)
    {
      v30 = *(_QWORD *)(v13 + 8 * v31);
      if (v30)
      {
LABEL_10:
        v28 = v31;
        goto LABEL_7;
      }
      v17 = v15 + 2;
      if (v15 + 3 < v29)
      {
        v30 = *(_QWORD *)(v13 + 8 * (v15 + 3));
        if (v30)
        {
          v28 = v15 + 3;
          goto LABEL_7;
        }
        v31 = v15 + 4;
        v17 = v15 + 3;
        if (v15 + 4 < v29)
        {
          v30 = *(_QWORD *)(v13 + 8 * v31);
          if (v30)
            goto LABEL_10;
          v28 = v15 + 5;
          v17 = v15 + 4;
          if (v15 + 5 < v29)
          {
            v30 = *(_QWORD *)(v13 + 8 * v28);
            if (v30)
              goto LABEL_7;
            v11 = v29 - 1;
            v32 = v15 + 6;
            while (v29 != v32)
            {
              v30 = *(_QWORD *)(v13 + 8 * v32++);
              if (v30)
              {
                v28 = v32 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  v45 = v17;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
  v20 = 0;
LABEL_25:
  *v1 = v14;
  v1[1] = v13;
  v33 = v45;
  v1[2] = v46;
  v1[3] = v33;
  v1[4] = v20;
  v34 = (void (*)(uint64_t))v1[5];
  sub_1004C4938((uint64_t)v12, (uint64_t)v10, &qword_1013F13B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v35 = sub_1004B804C(&qword_101405DE0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(a1, 1, 1, v35);
  }
  else
  {
    v37 = (uint64_t)v40;
    sub_1004C4938((uint64_t)v10, (uint64_t)v40, (uint64_t *)&unk_1013F13C0);
    v34(v37);
    sub_1004CB800(v37, (uint64_t *)&unk_1013F13C0);
    v38 = sub_1004B804C(&qword_101405DE0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a1, 0, 1, v38);
  }
}

uint64_t sub_100CE08A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v3 = sub_1004B804C(&qword_10140DF90);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_10140DFA0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v37 - v12;
  v14 = *v1;
  v15 = v1[1];
  v16 = v1[2];
  v17 = v1[3];
  v18 = v1[4];
  v37 = v6;
  v40 = v16;
  if (v18)
  {
    v38 = v10;
    v39 = v15;
    v19 = v4;
    v20 = a1;
    v21 = (v18 - 1) & v18;
    v22 = __clz(__rbit64(v18)) | (v17 << 6);
LABEL_3:
    v23 = *(_QWORD *)(v14 + 48);
    v24 = type metadata accessor for CRLBoardIdentifier(0);
    sub_1004B8460(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    v25 = *(_QWORD *)(v14 + 56);
    v26 = type metadata accessor for CRLBoardViewModelMetadata(0);
    sub_1004B8460(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v22, (uint64_t)&v13[*(int *)(v3 + 48)], type metadata accessor for CRLBoardViewModelMetadata);
    v27 = 0;
    a1 = v20;
    v4 = v19;
    v10 = v38;
    v15 = v39;
    goto LABEL_4;
  }
  v32 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    return result;
  }
  v33 = (unint64_t)(v16 + 64) >> 6;
  if (v32 >= v33)
  {
    v21 = 0;
    v27 = 1;
    goto LABEL_4;
  }
  v34 = *(_QWORD *)(v15 + 8 * v32);
  if (v34)
  {
LABEL_11:
    v38 = v10;
    v39 = v15;
    v19 = v4;
    v20 = a1;
    v21 = (v34 - 1) & v34;
    v22 = __clz(__rbit64(v34)) + (v32 << 6);
    v17 = v32;
    goto LABEL_3;
  }
  v35 = v17 + 2;
  if (v17 + 2 >= v33)
    goto LABEL_27;
  v34 = *(_QWORD *)(v15 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v32 = v35;
    goto LABEL_11;
  }
  if (v17 + 3 >= v33)
    goto LABEL_28;
  v34 = *(_QWORD *)(v15 + 8 * (v17 + 3));
  if (v34)
  {
    v32 = v17 + 3;
    goto LABEL_11;
  }
  v35 = v17 + 4;
  if (v17 + 4 < v33)
  {
    v34 = *(_QWORD *)(v15 + 8 * v35);
    if (v34)
      goto LABEL_15;
    v32 = v17 + 5;
    if (v17 + 5 < v33)
    {
      v34 = *(_QWORD *)(v15 + 8 * v32);
      if (v34)
        goto LABEL_11;
      v32 = v33 - 1;
      v36 = v17 + 6;
      while (v33 != v36)
      {
        v34 = *(_QWORD *)(v15 + 8 * v36++);
        if (v34)
        {
          v32 = v36 - 1;
          goto LABEL_11;
        }
      }
LABEL_27:
      v21 = 0;
      v27 = 1;
      v17 = v32;
      goto LABEL_4;
    }
LABEL_28:
    v21 = 0;
    v27 = 1;
    v17 = v35;
    goto LABEL_4;
  }
  v21 = 0;
  v27 = 1;
  v17 += 3;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, v27, 1, v3);
  *v1 = v14;
  v1[1] = v15;
  v1[2] = v40;
  v1[3] = v17;
  v1[4] = v21;
  v28 = (void (*)(uint64_t))v1[5];
  sub_1004C4938((uint64_t)v13, (uint64_t)v10, &qword_10140DFA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v29 = sub_1004B804C(&qword_1013F9138);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a1, 1, 1, v29);
  }
  else
  {
    v30 = (uint64_t)v37;
    sub_1004C4938((uint64_t)v10, (uint64_t)v37, &qword_10140DF90);
    v28(v30);
    sub_1004CB800(v30, &qword_10140DF90);
    v31 = sub_1004B804C(&qword_1013F9138);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a1, 0, 1, v31);
  }
}

uint64_t sub_100CE0BF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  uint64_t v42;

  v3 = sub_1004B804C(&qword_1013E7568);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_10140E2B0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v37 - v12;
  v14 = *v1;
  v15 = v1[1];
  v17 = v1[2];
  v16 = v1[3];
  v18 = v16;
  v19 = v1[4];
  v38 = v6;
  v42 = v17;
  if (v19)
  {
    v39 = v15;
    v40 = v10;
    v20 = v4;
    v21 = a1;
    v22 = (v19 - 1) & v19;
    v23 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
    v24 = *(_QWORD *)(v14 + 48);
    v25 = v14;
    v26 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v13, v24 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, v26);
    v27 = *(int *)(v3 + 48);
    v41 = *(_OWORD *)(*(_QWORD *)(v25 + 56) + 16 * v23);
    *(_OWORD *)&v13[v27] = v41;
    v4 = v20;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v3);
    swift_unknownObjectRetain(v41);
    a1 = v21;
    v15 = v39;
    v10 = v40;
    goto LABEL_23;
  }
  v28 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    return result;
  }
  v29 = (unint64_t)(v17 + 64) >> 6;
  if (v28 < v29)
  {
    v30 = *(_QWORD *)(v15 + 8 * v28);
    if (v30)
    {
LABEL_7:
      v39 = v15;
      v40 = v10;
      v20 = v4;
      v21 = a1;
      v22 = (v30 - 1) & v30;
      v23 = __clz(__rbit64(v30)) + (v28 << 6);
      v18 = v28;
      goto LABEL_3;
    }
    v31 = v16 + 2;
    v18 = v16 + 1;
    if (v16 + 2 < v29)
    {
      v30 = *(_QWORD *)(v15 + 8 * v31);
      if (v30)
      {
LABEL_10:
        v28 = v31;
        goto LABEL_7;
      }
      v18 = v16 + 2;
      if (v16 + 3 < v29)
      {
        v30 = *(_QWORD *)(v15 + 8 * (v16 + 3));
        if (v30)
        {
          v28 = v16 + 3;
          goto LABEL_7;
        }
        v31 = v16 + 4;
        v18 = v16 + 3;
        if (v16 + 4 < v29)
        {
          v30 = *(_QWORD *)(v15 + 8 * v31);
          if (v30)
            goto LABEL_10;
          v28 = v16 + 5;
          v18 = v16 + 4;
          if (v16 + 5 < v29)
          {
            v30 = *(_QWORD *)(v15 + 8 * v28);
            if (v30)
              goto LABEL_7;
            v18 = v29 - 1;
            v32 = v16 + 6;
            while (v29 != v32)
            {
              v30 = *(_QWORD *)(v15 + 8 * v32++);
              if (v30)
              {
                v28 = v32 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v25 = v14;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
  v22 = 0;
LABEL_23:
  *v1 = v25;
  v1[1] = v15;
  v1[2] = v42;
  v1[3] = v18;
  v1[4] = v22;
  v33 = (void (*)(uint64_t))v1[5];
  sub_1004C4938((uint64_t)v13, (uint64_t)v10, &qword_10140E2B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v34 = sub_1004B804C(&qword_1013E7570);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a1, 1, 1, v34);
  }
  else
  {
    v35 = (uint64_t)v38;
    sub_1004C4938((uint64_t)v10, (uint64_t)v38, &qword_1013E7568);
    v33(v35);
    sub_1004CB800(v35, &qword_1013E7568);
    v36 = sub_1004B804C(&qword_1013E7570);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a1, 0, 1, v36);
  }
}

uint64_t sub_100CE0F3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100CE0F58(&qword_1013E7540, &qword_10140E0C0, &qword_1013E7548, a1);
}

uint64_t sub_100CE0F58@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  v49 = a3;
  v8 = sub_1004B804C(a1);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C(a2);
  v13 = __chkstk_darwin(v12);
  v50 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v13);
  v17 = (char *)&v43 - v16;
  v18 = *v4;
  v19 = v4[1];
  v21 = v4[2];
  v20 = v4[3];
  v22 = v20;
  v23 = v4[4];
  v44 = v11;
  v45 = a1;
  v48 = v21;
  if (v23)
  {
    v46 = a2;
    v47 = v19;
    v24 = a4;
    v25 = (v23 - 1) & v23;
    v26 = __clz(__rbit64(v23)) | (v20 << 6);
LABEL_3:
    v27 = *(_QWORD *)(v18 + 48);
    v28 = v18;
    v29 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v17, v27 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v26, v29);
    v30 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v26);
    *(_QWORD *)&v17[*(int *)(v8 + 48)] = v30;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
    swift_retain(v30);
    a4 = v24;
    a2 = v46;
    v19 = v47;
    goto LABEL_23;
  }
  v31 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    return result;
  }
  v32 = (unint64_t)(v21 + 64) >> 6;
  if (v31 < v32)
  {
    v33 = *(_QWORD *)(v19 + 8 * v31);
    if (v33)
    {
LABEL_7:
      v46 = a2;
      v47 = v19;
      v24 = a4;
      v25 = (v33 - 1) & v33;
      v26 = __clz(__rbit64(v33)) + (v31 << 6);
      v22 = v31;
      goto LABEL_3;
    }
    v34 = v20 + 2;
    v22 = v20 + 1;
    if (v20 + 2 < v32)
    {
      v33 = *(_QWORD *)(v19 + 8 * v34);
      if (v33)
      {
LABEL_10:
        v31 = v34;
        goto LABEL_7;
      }
      v22 = v20 + 2;
      if (v20 + 3 < v32)
      {
        v33 = *(_QWORD *)(v19 + 8 * (v20 + 3));
        if (v33)
        {
          v31 = v20 + 3;
          goto LABEL_7;
        }
        v34 = v20 + 4;
        v22 = v20 + 3;
        if (v20 + 4 < v32)
        {
          v33 = *(_QWORD *)(v19 + 8 * v34);
          if (v33)
            goto LABEL_10;
          v31 = v20 + 5;
          v22 = v20 + 4;
          if (v20 + 5 < v32)
          {
            v33 = *(_QWORD *)(v19 + 8 * v31);
            if (v33)
              goto LABEL_7;
            v22 = v32 - 1;
            v35 = v20 + 6;
            while (v32 != v35)
            {
              v33 = *(_QWORD *)(v19 + 8 * v35++);
              if (v33)
              {
                v31 = v35 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v28 = v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  v25 = 0;
LABEL_23:
  *v4 = v28;
  v4[1] = v19;
  v4[2] = v48;
  v4[3] = v22;
  v4[4] = v25;
  v36 = (void (*)(uint64_t))v4[5];
  v37 = v50;
  sub_1004C4938((uint64_t)v17, v50, a2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v37, 1, v8) == 1)
  {
    v38 = sub_1004B804C(v49);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a4, 1, 1, v38);
  }
  else
  {
    v39 = v37;
    v41 = (uint64_t)v44;
    v40 = v45;
    sub_1004C4938(v39, (uint64_t)v44, v45);
    v36(v41);
    sub_1004CB800(v41, v40);
    v42 = sub_1004B804C(v49);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a4, 0, 1, v42);
  }
}

void sub_100CE1280()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease(v9);
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

void sub_100CE140C(char a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;
  __int128 v18[2];
  _QWORD v19[5];

  v19[3] = &type metadata for CRLBoardAuxiliaryRealTimeChange;
  v19[4] = &off_10126E930;
  v10 = swift_allocObject(&unk_10129F8F8, 41, 7);
  v19[0] = v10;
  *(_BYTE *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = a3;
  *(_BYTE *)(v10 + 40) = a4;
  v11 = *(NSObject **)(a5 + OBJC_IVAR____TtC8Freeform17CRLBoardChangeSet_accessQueue);
  sub_1004E90B0((uint64_t)v19, (uint64_t)v18);
  v12 = swift_allocObject(&unk_10129FD08, 64, 7);
  *(_QWORD *)(v12 + 16) = a5;
  sub_1004DB728(v18, v12 + 24);
  v13 = swift_allocObject(&unk_10129FD30, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_100CED918;
  *(_QWORD *)(v13 + 24) = v12;
  v16[4] = sub_1005B72B0;
  v17 = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = *(_QWORD *)"";
  v16[2] = sub_100618D24;
  v16[3] = &unk_10129FD48;
  v14 = _Block_copy(v16);
  v15 = v17;
  sub_1004BE310(a2, a3);
  swift_retain(a5);
  swift_retain(v13);
  swift_release(v15);
  dispatch_sync(v11, v14);
  _Block_release(v14);
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation(v13, "", 89, 579, 26, 1);
  swift_release(v12);
  swift_release(v13);
  if ((a5 & 1) != 0)
    __break(1u);
  else
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v19);
}

void sub_100CE15BC(char a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;
  __int128 v14[2];
  _QWORD v15[5];

  v4 = a4;
  v15[3] = &type metadata for CRLBoardAuxiliaryRealTimeChangeLegacy;
  v15[4] = &off_10129A960;
  LOBYTE(v15[0]) = a1;
  v15[1] = a2;
  v15[2] = a3;
  v7 = *(NSObject **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardChangeSet_accessQueue);
  sub_1004E90B0((uint64_t)v15, (uint64_t)v14);
  v8 = swift_allocObject(&unk_10129F948, 64, 7);
  *(_QWORD *)(v8 + 16) = v4;
  sub_1004DB728(v14, v8 + 24);
  v9 = swift_allocObject(&unk_10129F970, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100CEC668;
  *(_QWORD *)(v9 + 24) = v8;
  v12[4] = sub_1005B72B0;
  v13 = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = *(_QWORD *)"";
  v12[2] = sub_100618D24;
  v12[3] = &unk_10129F988;
  v10 = _Block_copy(v12);
  v11 = v13;
  sub_1004BE310(a2, a3);
  swift_retain(v4);
  swift_retain(v9);
  swift_release(v11);
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v9, "", 89, 579, 26, 1);
  swift_release(v8);
  swift_release(v9);
  if ((v4 & 1) != 0)
    __break(1u);
  else
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v15);
}

uint64_t sub_100CE1748(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26[24];
  char v27[24];

  v25 = a2;
  v3 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  v13 = *(char **)(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v15 = v14 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v14 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v27, 0, 0);
  sub_1004B8460(v15, v5, type metadata accessor for CRLBoardCRDTData);
  v16 = v13;
  swift_retain(v14);
  v17 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v17);
  sub_1004B84A4(v5, type metadata accessor for CRLBoardCRDTData);

  swift_release(v14);
  v18 = *(char **)(*(_QWORD *)(v25 + 16) + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v20 = v19 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v19 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v26, 0, 0);
  sub_1004B8460(v20, v5, type metadata accessor for CRLBoardCRDTData);
  v21 = v18;
  swift_retain(v19);
  CRRegister.wrappedValue.getter(v17);
  sub_1004B84A4(v5, type metadata accessor for CRLBoardCRDTData);

  swift_release(v19);
  LOBYTE(v5) = static UUID.== infix(_:_:)(v12);
  v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v9, v6);
  v22(v12, v6);
  return v5 & 1;
}

_QWORD *sub_100CE1978(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  objc_class *v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  void *v25;
  uint64_t v26;
  void *v27;
  Class isa;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t (*v42)(_QWORD, _QWORD);
  void *v43;
  _BYTE *v44;
  objc_super v45;
  _BYTE v46[24];
  char v47[24];
  unint64_t v48;

  v5 = v4;
  v40 = a2;
  v9 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v9);
  v39 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter(v34))
  {
    v12 = a1 & 0xC000000000000001;
    v43 = v5;
    v44 = (_BYTE *)(v40 + 16);
    swift_beginAccess(v40 + 16, v47, 0, 0);
    v13 = 4;
    v37 = a1;
    v38 = a4;
    v42 = a3;
    v35 = a1 & 0xC000000000000001;
    v36 = v11;
    while (1)
    {
      v14 = v12 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, a1) : *(id *)(a1 + 8 * v13);
      v5 = v14;
      v15 = v13 - 3;
      v16 = v44;
      if (__OFADD__(v13 - 4, 1))
        break;
      if (*v44 == 1
        || (swift_beginAccess(v44, v46, 33, 0), v17 = a3(v5, v16), swift_endAccess(v46), (v17 & 1) == 0))
      {

      }
      else
      {
        v18 = v39;
        sub_1004B8460((uint64_t)v5 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v39, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v19 = (objc_class *)type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
        v20 = (char *)objc_allocWithZone(v19);
        *(_QWORD *)&v20[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
        sub_1004B8460(v18, (uint64_t)&v20[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
        v45.receiver = v20;
        v45.super_class = v19;
        v41 = objc_msgSendSuper2(&v45, "init");
        sub_1004B84A4(v18, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v21 = objc_msgSend(v5, "children");
        v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v19);

        v23 = v40;
        v24 = swift_retain(v40);
        v25 = v43;
        v26 = sub_100CE1978(v22, v23, v42, a4, v24);
        v43 = v25;
        swift_bridgeObjectRelease(v22);
        swift_release(v23);
        v27 = v41;
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v27, "setChildren:", isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
        v31 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v30 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v31 >= v30 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v27);
        specialized Array._endMutation()(v32);
        a1 = v37;
        a4 = v38;
        a3 = v42;
        v12 = v35;
        v11 = v36;
      }
      ++v13;
      if (v15 == v11)
      {
        swift_bridgeObjectRelease(a1);
        return (_QWORD *)v48;
      }
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v34 = a1;
    else
      v34 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

double *sub_100CE1CA8(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v11;
  id v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;

  v3 = a1;
  v36 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_41;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v28))
  {
    v30 = v3;
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    v34 = v3 + 32;
    v35 = v3 & 0xFFFFFFFFFFFFFF8;
    v7 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v7 = a2;
    v29 = v7;
    v32 = i;
    v33 = a2 & 0xC000000000000001;
    v31 = v3 & 0xC000000000000001;
    while (1)
    {
      if (v6)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v30);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v35 + 16))
          goto LABEL_38;
        v8 = *(id *)(v34 + 8 * v5);
      }
      v9 = v8;
      if (__OFADD__(v5++, 1))
        goto LABEL_39;
      if ((unint64_t)a2 >> 62)
      {
        swift_bridgeObjectRetain(a2);
        v11 = _CocoaArrayWrapper.endIndex.getter(v29);
        if (!v11)
          goto LABEL_18;
      }
      else
      {
        v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a2);
        if (!v11)
          goto LABEL_18;
      }
      v12 = v33 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2) : *(id *)(a2 + 32);
      v13 = v12;
      v3 = type metadata accessor for CRLSharedHighlight(0);
      v14 = static NSObject.== infix(_:_:)(v13, v9);

      if ((v14 & 1) == 0)
        break;

      swift_bridgeObjectRelease();
LABEL_7:
      if (v5 == i)
        return v36;
    }
    if (v11 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease();
LABEL_19:
      v3 = (uint64_t)&v36;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v16 = *((_QWORD *)v36 + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v9);
      specialized ContiguousArray._endMutation()(v17);
      goto LABEL_7;
    }
    if (v33)
    {
      v18 = 1;
      while (1)
      {
        v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a2);
        v20 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        v21 = v19;
        v22 = static NSObject.== infix(_:_:)(v19, v9);
        swift_unknownObjectRelease(v21);
        if ((v22 & 1) != 0)
          goto LABEL_31;
        ++v18;
        if (v20 == v11)
          goto LABEL_30;
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = 5;
    while (1)
    {
      v24 = v23 - 3;
      if (__OFADD__(v23 - 4, 1))
        break;
      v25 = *(id *)(a2 + 8 * v23);
      v26 = static NSObject.== infix(_:_:)(v25, v9);

      if ((v26 & 1) != 0)
      {
LABEL_31:

        swift_bridgeObjectRelease();
        v6 = v31;
        i = v32;
        goto LABEL_7;
      }
      ++v23;
      if (v24 == v11)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        v6 = v31;
        i = v32;
        goto LABEL_19;
      }
    }
LABEL_40:
    __break(1u);
LABEL_41:
    if (v3 < 0)
      v28 = v3;
    else
      v28 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100CE1F50(unint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v3 = v2;
  v43 = a2;
  v5 = sub_1004B804C(&qword_1013F5478);
  __chkstk_darwin(v5);
  v39 = (uint64_t)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)type metadata accessor for CRLBoardViewModelMetadata(0);
  v45 = *(v7 - 1);
  __chkstk_darwin(v7);
  v38 = (uint64_t)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v9);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v12);
  v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v15);
  v48 = (uint64_t)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = _swiftEmptyArrayStorage;
  v49 = a1;
  if (a1 >> 62)
    goto LABEL_25;
  v44 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v44)
  {
    while (1)
    {
      v37[1] = v3;
      v17 = 0;
      v41 = v14 + 8;
      v42 = v7;
      v46 = v49 & 0xFFFFFFFFFFFFFF8;
      v47 = v49 & 0xC000000000000001;
      v40 = v12;
      v3 = v44;
      while (v47)
      {
        v18 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v49);
LABEL_9:
        v7 = v18;
        v19 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_24;
        sub_1004B8460((uint64_t)v18 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v14, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (swift_getEnumCaseMultiPayload(v14, v12) == 2)
        {
          v20 = sub_1004B804C((uint64_t *)&unk_1013EA630);
          swift_bridgeObjectRelease(*(_QWORD *)&v41[*(int *)(v20 + 48)]);
          v21 = v48;
          sub_1004B84E0((uint64_t)v14, v48, type metadata accessor for CRLBoardIdentifier);
          v22 = *v43;
          if (*(_QWORD *)(*v43 + 16) && (v23 = sub_100843264(v21), (v24 & 1) != 0))
          {
            sub_1004B8460(*(_QWORD *)(v22 + 56) + *(_QWORD *)(v45 + 72) * v23, (uint64_t)v11, type metadata accessor for CRLBoardViewModelMetadata);
            v25 = 0;
          }
          else
          {
            v25 = 1;
          }
          v26 = v45;
          v27 = v42;
          (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v45 + 56))(v11, v25, 1, v42);
          if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v26 + 48))(v11, 1, v27))
          {
            sub_1004B84A4(v48, type metadata accessor for CRLBoardIdentifier);
            sub_1004CB800((uint64_t)v11, &qword_1013E4690);
            goto LABEL_18;
          }
          v28 = v38;
          sub_1004B8460((uint64_t)v11, v38, type metadata accessor for CRLBoardViewModelMetadata);
          sub_1004CB800((uint64_t)v11, &qword_1013E4690);
          v29 = v39;
          sub_1004CB7BC(v28 + *((int *)v27 + 7), v39, &qword_1013F5478);
          v30 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30);
          sub_1004CB800(v29, &qword_1013F5478);
          sub_1004B84A4(v28, type metadata accessor for CRLBoardViewModelMetadata);
          v32 = sub_1004B84A4(v48, type metadata accessor for CRLBoardIdentifier);
          if (v31 == 1)
          {
LABEL_18:

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
            v33 = v50[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
            v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v7);
            specialized ContiguousArray._endMutation()(v34);
          }
          v12 = v40;
          v3 = v44;
          goto LABEL_5;
        }
        sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardLibraryViewModel.Item);

LABEL_5:
        ++v17;
        if (v19 == v3)
          return v50;
      }
      if (v17 < *(_QWORD *)(v46 + 16))
        break;
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      if (v49 < 0)
        v36 = v49;
      else
        v36 = v49 & 0xFFFFFFFFFFFFFF8;
      v44 = _CocoaArrayWrapper.endIndex.getter(v36);
      if (!v44)
        return _swiftEmptyArrayStorage;
    }
    v18 = *(id *)(v49 + 8 * v17 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100CE239C(unint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v34;

  v2 = a1;
  v34 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_40;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v27))
  {
    v28 = v2;
    v4 = 0;
    v31 = v2 & 0xFFFFFFFFFFFFFF8;
    v32 = v2 & 0xC000000000000001;
    v29 = i;
    v30 = v2 + 32;
    while (1)
    {
      if (v32)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v28);
      }
      else
      {
        if (v4 >= *(_QWORD *)(v31 + 16))
          goto LABEL_37;
        v8 = *(id *)(v30 + 8 * v4);
      }
      v9 = v8;
      if (__OFADD__(v4++, 1))
        goto LABEL_38;
      v11 = *a2;
      if ((unint64_t)*a2 >> 62)
      {
        if (v11 < 0)
          v25 = *a2;
        else
          v25 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*a2, 2);
        v12 = _CocoaArrayWrapper.endIndex.getter(v25);
        if (!v12)
          goto LABEL_4;
      }
      else
      {
        v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(*a2, 2);
        if (!v12)
          goto LABEL_4;
      }
      if ((v11 & 0xC000000000000001) != 0)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
      else
        v13 = *(id *)(v11 + 32);
      v14 = v13;
      v2 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
      v15 = static NSObject.== infix(_:_:)(v14, v9);

      if ((v15 & 1) != 0)
      {
LABEL_15:

        swift_bridgeObjectRelease_n(v11, 2);
        goto LABEL_5;
      }
      if (v12 != 1)
        break;
LABEL_4:
      v5 = swift_bridgeObjectRelease_n(v11, 2);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      v6 = v34[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v9);
      v2 = (uint64_t)&v34;
      specialized ContiguousArray._endMutation()(v7);
LABEL_5:
      if (v4 == v29)
        return v34;
    }
    if ((v11 & 0xC000000000000001) != 0)
    {
      v16 = 1;
      while (1)
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v11);
        v18 = v16 + 1;
        if (__OFADD__(v16, 1))
          break;
        v19 = v17;
        v20 = static NSObject.== infix(_:_:)(v17, v9);
        swift_unknownObjectRelease(v19);
        if ((v20 & 1) != 0)
          goto LABEL_15;
        ++v16;
        if (v18 == v12)
          goto LABEL_4;
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v21 = 5;
    while (1)
    {
      v22 = v21 - 3;
      if (__OFADD__(v21 - 4, 1))
        break;
      v23 = *(id *)(v11 + 8 * v21);
      v24 = static NSObject.== infix(_:_:)(v23, v9);

      if ((v24 & 1) != 0)
        goto LABEL_15;
      ++v21;
      if (v22 == v12)
        goto LABEL_4;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    if (v2 < 0)
      v27 = v2;
    else
      v27 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100CE262C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;

  v3 = v2;
  v39 = a2;
  v5 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v14)
  {
    while (1)
    {
      v33 = v3;
      v34 = v7;
      v3 = 0;
      v36 = v10;
      v37 = v13 + 8;
      v41 = a1 & 0xFFFFFFFFFFFFFF8;
      v42 = a1 & 0xC000000000000001;
      v40 = v14;
      v35 = a1;
      v38 = v11;
      while (v42)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
LABEL_9:
        v16 = v15;
        v17 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_25;
        sub_1004B8460((uint64_t)v15 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v13, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (swift_getEnumCaseMultiPayload(v13, v11) == 2)
        {
          v18 = sub_1004B804C((uint64_t *)&unk_1013EA630);
          swift_bridgeObjectRelease(*(_QWORD *)&v37[*(int *)(v18 + 48)]);
          sub_1004B84E0((uint64_t)v13, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
          if (*(_QWORD *)(v39 + 16))
          {
            v19 = sub_100843264((uint64_t)v10);
            if ((v20 & 1) != 0)
            {
              v21 = v19;
              v22 = *(_QWORD *)(v39 + 56);
              v23 = type metadata accessor for CRLBoardViewModelMetadata(0);
              v24 = *(_QWORD *)(v23 - 8);
              v25 = v22 + *(_QWORD *)(v24 + 72) * v21;
              v7 = v34;
              sub_1004B8460(v25, (uint64_t)v34, type metadata accessor for CRLBoardViewModelMetadata);
              a1 = v35;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, v23);
            }
            else
            {
              v23 = type metadata accessor for CRLBoardViewModelMetadata(0);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 1, 1, v23);
            }
            v10 = v36;
          }
          else
          {
            v23 = type metadata accessor for CRLBoardViewModelMetadata(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 1, 1, v23);
          }
          sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
          type metadata accessor for CRLBoardViewModelMetadata(0);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v7, 1, v23) == 1)
          {
            sub_1004CB800((uint64_t)v7, &qword_1013E4690);
LABEL_21:

            v11 = v38;
            goto LABEL_5;
          }
          v26 = v7[1];
          v27 = sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardViewModelMetadata);
          if ((v26 & 1) == 0)
            goto LABEL_21;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
          v28 = v43[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
          v29 = v28;
          v10 = v36;
          v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v16);
          specialized ContiguousArray._endMutation()(v30);
          v11 = v38;
        }
        else
        {
          sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardLibraryViewModel.Item);

        }
LABEL_5:
        ++v3;
        if (v17 == v40)
          return v43;
      }
      if (v3 < *(_QWORD *)(v41 + 16))
        break;
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      if (a1 < 0)
        v32 = a1;
      else
        v32 = a1 & 0xFFFFFFFFFFFFFF8;
      v14 = _CocoaArrayWrapper.endIndex.getter(v32);
      if (!v14)
        return _swiftEmptyArrayStorage;
    }
    v15 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100CE29C8(uint64_t a1, void (*a2)(__n128), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  id *v12;
  uint64_t v13;
  id v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  _QWORD *v20;

  v19[1] = a3;
  v6 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v19[0] = v3;
    v20 = _swiftEmptyArrayStorage;
    sub_1006008AC(0, v10, 0);
    v11 = v20;
    v12 = (id *)(a1 + 40);
    do
    {
      v13 = (uint64_t)*(v12 - 1);
      v14 = *v12;
      v15 = swift_retain(v13);
      a2(v15);

      swift_release(v13);
      v20 = v11;
      v17 = v11[2];
      v16 = v11[3];
      if (v17 >= v16 >> 1)
      {
        sub_1006008AC(v16 > 1, v17 + 1, 1);
        v11 = v20;
      }
      v12 += 2;
      v11[2] = v17 + 1;
      sub_1004B84E0((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17, type metadata accessor for CRLBoardLibraryViewModel.Item);
      --v10;
    }
    while (v10);
  }
  return v11;
}

uint64_t sub_100CE2B2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t inited;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  id v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69[24];
  char v70[112];
  char v71[32];

  v68 = a3;
  v63 = a2;
  v66 = a1;
  v7 = type metadata accessor for CRLGloballyScopedBoardIdentifier(0);
  __chkstk_darwin(v7);
  v67 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v9);
  v61 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for UUID(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v13);
  v62 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(a5, v15);
  swift_unknownObjectWeakInit(a5 + 112);
  v16 = a5 + OBJC_IVAR____TtC8Freeform33CRLBoardRealTimeChangeCoordinator_incomingSuspendedCache;
  *(_BYTE *)v16 = 0;
  *(_QWORD *)(v16 + 8) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v16 + 16) = 0;
  *(_BYTE *)(v16 + 24) = 1;
  *(_QWORD *)(a5 + OBJC_IVAR____TtC8Freeform33CRLBoardRealTimeChangeCoordinator_pushCommandToCommandControllerTask) = 0;
  *(_BYTE *)(a5 + 136) = a4;
  if ((a4 & 1) == 0)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"init(editingCoordinator:suspendResumeCoordinatorState:globallyScopedBoardIdentifier:enforceParticipantCKShareWritePermission:)", 126, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/RealTime/CRLBoardRealTimeChangeCoordinator.swift", 107, 2, 201, "enforceParticipantCKShareWritePermission must always be true on iOS and macOS", 77, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(editingCoordinator:suspendResumeCoordinatorState:globallyScopedBoardIdentifier:enforceParticipantCKShareWritePermission:)", 126, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/RealTime/CRLBoardRealTimeChangeCoordinator.swift", 107, 2u, 201, (uint64_t)"enforceParticipantCKShareWritePermission must always be true on iOS and macOS", 77, 2u);
  }
  if (qword_1013DD888 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v71, 0, 0);
  v17 = (void *)static OS_os_log.realTimeSync;
  v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v18, v70);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v20 = sub_1004CFC2C();
  v21 = v20;
  v22 = 1702195828;
  if ((a4 & 1) == 0)
    v22 = 0x65736C6166;
  v23 = 0xE500000000000000;
  if ((a4 & 1) != 0)
    v23 = 0xE400000000000000;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v20;
  *(_QWORD *)(inited + 32) = v22;
  *(_QWORD *)(inited + 40) = v23;
  v24 = v17;
  v25 = v68;
  v26 = UUID.uuidString.getter(v24);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v21;
  *(_QWORD *)(inited + 72) = v26;
  *(_QWORD *)(inited + 80) = v27;
  v29 = static os_log_type_t.default.getter(v28);
  sub_100A06EBC((uint64_t)v24, &_mh_execute_header, v29, "CRLBoardRealTimeChangeCoordinator was instantiated with enforceParticipantCKShareWritePermission = %{public}@ for boardUUID: %{public}@", 135, 2, inited);
  swift_setDeallocating(inited);
  v30 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v30);

  v31 = v66;
  swift_unknownObjectWeakAssign(a5 + 112, v66);
  v32 = *(char **)(v31 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  *(_QWORD *)(a5 + 120) = v32;
  v33 = (_QWORD *)(a5 + OBJC_IVAR____TtC8Freeform33CRLBoardRealTimeChangeCoordinator_suspendResumeCoordinatorState);
  v34 = v63;
  *v33 = v63;
  v33[1] = &off_101274AA0;
  sub_1004B8460(v25, a5 + OBJC_IVAR____TtC8Freeform33CRLBoardRealTimeChangeCoordinator_globallyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  v35 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v36 = *(_QWORD *)&v32[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v37 = v36 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v36 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v69, 0, 0);
  v38 = v37;
  v39 = v61;
  sub_1004B8460(v38, v61, type metadata accessor for CRLBoardCRDTData);
  v40 = v32;
  swift_retain(v34);
  swift_retain(v36);
  v41 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v41);
  sub_1004B84A4(v39, type metadata accessor for CRLBoardCRDTData);
  swift_release(v36);
  v42 = (uint64_t *)(*(_QWORD *)&v32[v35] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v43 = *v42;
  v44 = v42[1];
  swift_bridgeObjectRetain(v44);
  v45 = v62;
  sub_10067AFD0((uint64_t)v12, v43, v44, v62);
  v46 = v64;
  v47 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v12, v45, v65);
  sub_1004B84A4(v45, type metadata accessor for CRLBoardIdentifier);
  sub_100588DA4((uint64_t)v12, v25, &_mh_execute_header, (uint64_t)"init(editingCoordinator:suspendResumeCoordinatorState:globallyScopedBoardIdentifier:enforceParticipantCKShareWritePermission:)", 126, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/RealTime/CRLBoardRealTimeChangeCoordinator.swift", 107, 2u, 210);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
  v48 = *(void **)(*(_QWORD *)(*(_QWORD *)(a5 + 120) + OBJC_IVAR____TtC8Freeform8CRLBoard_shareState) + 16);
  v49 = type metadata accessor for CRLChangeCoordinatorCachedShareState();
  v50 = (_QWORD *)swift_allocObject(v49, 40, 7);
  v50[4] = &_swiftEmptySetSingleton;
  v50[2] = v48;
  v51 = v48;
  v52 = sub_1008D5D50((uint64_t)_swiftEmptyArrayStorage);

  v50[3] = v52;
  *(_QWORD *)(a5 + 128) = v50;
  v53 = *(void **)(v31 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_shareObservers);
  if ((objc_msgSend(v53, "containsObject:", v50, swift_retain(v50).n128_f64[0]) & 1) == 0)
    objc_msgSend(v53, "addObject:", v50);
  swift_release(v50);
  *(_QWORD *)(a5 + OBJC_IVAR____TtC8Freeform33CRLBoardRealTimeChangeCoordinator_queuedIncomingUpdates) = _swiftEmptyArrayStorage;
  v54 = v68;
  v55 = v67;
  sub_1004B8460(v68, v67, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  v56 = type metadata accessor for CRLBoardRealTimeChangeCoordinator.CRLRealTimeChangeProcessor(0);
  v57 = swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
  swift_defaultActor_initialize(v57, v58);
  sub_1004B84E0(v55, v57+ OBJC_IVAR____TtCC8Freeform33CRLBoardRealTimeChangeCoordinator26CRLRealTimeChangeProcessor_globallyScopedBoardIdentifier, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  sub_1004B84A4(v54, type metadata accessor for CRLGloballyScopedBoardIdentifier);
  *(_QWORD *)(a5 + OBJC_IVAR____TtC8Freeform33CRLBoardRealTimeChangeCoordinator_processor) = v57;
  return a5;
}

uint64_t sub_100CE3194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE v22[24];

  v4 = a2;
  swift_defaultActor_initialize(a3, a2);
  *(_QWORD *)(a3 + 112) = a1;
  *(_QWORD *)(a3 + 120) = &off_10129D9E0;
  *(_BYTE *)(a3 + 144) = v4;
  v6 = qword_1013DD888;
  swift_unknownObjectRetain(a1);
  if (v6 != -1)
    swift_once(&qword_1013DD888, sub_100A05DE4);
  swift_beginAccess(&static OS_os_log.realTimeSync, v22, 0, 0);
  v7 = (void *)static OS_os_log.realTimeSync;
  v8 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v8, &v21);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v10 = sub_1004CFC2C();
  v11 = 0x64656C6261736964;
  if ((v4 & 1) != 0)
    v11 = 0x656C62616E65;
  v12 = 0xE800000000000000;
  if ((v4 & 1) != 0)
    v12 = 0xE600000000000000;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 32) = v11;
  *(_QWORD *)(inited + 40) = v12;
  v13 = v7;
  v15 = static os_log_type_t.default.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Board real-time sync additional message encryption (CloudKit share encryption) state: %{public}@", 96, 2, inited);
  swift_setDeallocating(inited);
  v16 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v16);

  v17 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = PropertyListEncoder.init()();
  *(_QWORD *)(a3 + 128) = v18;
  swift_retain(v18);
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  swift_release(v18);
  v19 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  *(_QWORD *)(a3 + 136) = PropertyListDecoder.init()();
  return a3;
}

uint64_t sub_100CE3358(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v3[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v5);
  v3[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for MainActor(0);
  v3[9] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v3[10] = v7;
  v3[11] = v8;
  return swift_task_switch(sub_100CE33FC, v7, v8);
}

uint64_t sub_100CE33FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 96) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 16) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 104) = type metadata accessor for CRLImmutableBoard(0);
    v5 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
    *(_QWORD *)(v0 + 112) = v5;
    v6 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 200) = v6;
    *(_QWORD *)(v0 + 120) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 128) = 0;
    v8 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 64);
    v9 = v1 + ((v6 + 32) & ~(unint64_t)v6);
    swift_bridgeObjectRetain(v1);
    sub_1004B8460(v9, v7, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(v7, v8, type metadata accessor for CRLBoardIdentifier);
    v10 = type metadata accessor for CRLBoardActor(0);
    v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    *(_QWORD *)(v0 + 136) = v11;
    v12 = v5;
    swift_defaultActor_initialize(v11, v13);
    sub_1004B84E0(v8, v11 + OBJC_IVAR____TtC8Freeform13CRLBoardActor_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
    *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform13CRLBoardActor_store) = v12;
    return swift_task_switch(sub_100CE3564, v11, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 72));
    v15 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(double *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100CE3564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform13CRLBoardActor_store);
  v3 = v1 + OBJC_IVAR____TtC8Freeform13CRLBoardActor_boardIdentifier;
  v4 = (_QWORD *)swift_task_alloc(dword_1013E8364);
  *(_QWORD *)(v0 + 144) = v4;
  *v4 = v0;
  v4[1] = sub_100CE35E0;
  return sub_100618D44(v2, v3, 1);
}

uint64_t sub_100CE35E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 144);
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[17];
    v6 = sub_100CE3820;
    v7 = 0;
  }
  else
  {
    v5 = v3[10];
    v7 = v3[11];
    v6 = sub_100CE3650;
  }
  return swift_task_switch(v6, v5, v7);
}

uint64_t sub_100CE3650()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(*(id *)(v0 + 152));
  v2 = *(_QWORD *)((*(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v1 = *(_QWORD *)((*(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v2 >= v1 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v1 > 1, v2 + 1, 1);
  v3 = *(void **)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 128) + 1;
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v3);
  specialized Array._endMutation()(v8);
  swift_release(v4);

  sub_1004B84A4(v6, type metadata accessor for CRLBoardIdentifier);
  if (v7 == v5)
  {
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 168) = v9;
    v10 = (_QWORD *)swift_task_alloc(dword_10140E1E4);
    *(_QWORD *)(v0 + 176) = v10;
    *v10 = v0;
    v10[1] = sub_100CE38C0;
    return sub_100CB8DC0(v9, *(_QWORD *)(v0 + 32), 1, 0);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 128) + 1;
    *(_QWORD *)(v0 + 128) = v13;
    v14 = *(void **)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 56);
    v16 = *(_QWORD *)(v0 + 64);
    sub_1004B8460(*(_QWORD *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 200) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 200))+ v12 * v13, v16, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(v16, v15, type metadata accessor for CRLBoardIdentifier);
    v17 = type metadata accessor for CRLBoardActor(0);
    v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    *(_QWORD *)(v0 + 136) = v18;
    v19 = v14;
    swift_defaultActor_initialize(v18, v20);
    sub_1004B84E0(v15, v18 + OBJC_IVAR____TtC8Freeform13CRLBoardActor_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
    *(_QWORD *)(v18 + OBJC_IVAR____TtC8Freeform13CRLBoardActor_store) = v19;
    return swift_task_switch(sub_100CE3564, v18, 0);
  }
}

uint64_t sub_100CE3820()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100CE3860, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_100CE3860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v2);
  sub_1004B84A4(v1, type metadata accessor for CRLBoardIdentifier);
  v3 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CE38C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  *(_QWORD *)(*(_QWORD *)v2 + 184) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[10];
    v7 = v4[11];
    v8 = sub_100CE3988;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4[24] = a1;
    v6 = v4[10];
    v7 = v4[11];
    v8 = sub_100CE393C;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100CE393C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100CE3988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100CE39D8(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t inited;
  unint64_t v15;
  id v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[112];
  _BYTE v21[24];

  v2 = objc_msgSend(a1, "title");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0xE000000000000000;
  }
  v7 = objc_msgSend(a1, "message");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0xE000000000000000;
  }
  if (qword_1013DD6B8 != -1)
    swift_once(&qword_1013DD6B8, sub_100A00A6C);
  swift_beginAccess(&static OS_os_log.crlDefault, v21, 0, 0);
  v12 = (void *)static OS_os_log.crlDefault;
  v13 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v13, v20);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v15 = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v15;
  *(_QWORD *)(inited + 64) = v15;
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 80) = v11;
  v16 = v12;
  swift_bridgeObjectRetain(v6);
  v17 = swift_bridgeObjectRetain(v11);
  v18 = static os_log_type_t.default.getter(v17);
  sub_100A06EBC((uint64_t)v16, &_mh_execute_header, v18, "Alert: %@ - %@", 14, 2, inited);
  swift_setDeallocating(inited);
  v19 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v19);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v11);

}

uint64_t sub_100CE3B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1004B804C(&qword_1013EF328);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100CE3BFC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CE3C20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

double sub_100CE3C54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100CE3C64(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double sub_100CE3C6C(uint64_t a1)
{
  uint64_t v1;

  return sub_100AA57C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_100CE3C80(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10140DF24);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1004CFD00;
  return sub_100CCADD4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100CE3D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  _QWORD v57[3];
  _BYTE v58[4];
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;

  v64 = a6;
  v68 = a7;
  v65 = a5;
  v62 = a4;
  v72 = a1;
  v9 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v9);
  v71 = &v58[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1004B804C(&qword_1013F5478);
  __chkstk_darwin(v11);
  v74 = &v58[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v69 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v14 = &v58[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v73 = &v58[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v76 = &v58[-v18];
  v19 = sub_1004B804C(&qword_10140DFB0);
  __chkstk_darwin(v19);
  v21 = &v58[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = type metadata accessor for CRLBoardIdentifier(0);
  v23 = __chkstk_darwin(v22);
  v66 = &v58[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  v26 = &v58[-v25];
  v27 = *(int *)(v19 + 48);
  sub_1004B8460(a2, (uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
  v28 = *(_QWORD *)(a2 + v27);
  sub_1004B84E0((uint64_t)v21, (uint64_t)v26, type metadata accessor for CRLBoardIdentifier);
  v29 = *(int *)(v19 + 48);
  sub_1004B8460(a2, (uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
  *(_QWORD *)&v21[v29] = v28;
  swift_retain(v28);
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
  if (*(_QWORD *)(a3 + 16) && (v30 = sub_100843264((uint64_t)v26), (v31 & 1) != 0))
  {
    v32 = Date.init(timeIntervalSinceReferenceDate:)(v30, *(double *)(*(_QWORD *)(a3 + 56) + 8 * v30));
  }
  else
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"makeViewModelMetadata(allBoardsAndCKResult:)", 44, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2, 3184, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"makeViewModelMetadata(allBoardsAndCKResult:)", 44, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardLibrary.swift", 87, 2u, 3184, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    v32 = static Date.distantPast.getter();
  }
  v33 = *(_QWORD *)(*(_QWORD *)(v62 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_sharedHighlightController)
                  + OBJC_IVAR____TtC8Freeform28CRLSharedHighlightController_sharedHighlights);
  __chkstk_darwin(v32);
  v57[2] = v26;
  swift_bridgeObjectRetain(v33);
  v34 = v63;
  v35 = sub_100C9D5E8((uint64_t (*)(id *))sub_100BBC47C, (uint64_t)v57, v33);
  v63 = v34;
  swift_bridgeObjectRelease(v33);
  v36 = v74;
  if (v35)

  LODWORD(v64) = sub_100622DD8((uint64_t)v26, v64);
  LODWORD(v62) = *(unsigned __int8 *)(v28 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isFavorite);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v75 + 16))(v73, v76, v15);
  v37 = v65;
  v38 = *(_QWORD *)(v65 + 16);
  v70 = v15;
  if (v38 && (v39 = sub_100843264((uint64_t)v26), (v40 & 1) != 0))
  {
    v41 = v39;
    v42 = *(_QWORD *)(v37 + 56);
    v43 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
    v44 = *(_QWORD *)(v43 - 8);
    sub_1004B8460(v42 + *(_QWORD *)(v44 + 72) * v41, (uint64_t)v36, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v36, 0, 1, v43);
  }
  else
  {
    v45 = type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v36, 1, 1, v45);
  }
  LODWORD(v65) = v35 != 0;
  v61 = sub_100622DD8((uint64_t)v26, v68);
  v60 = *(unsigned __int8 *)(v28 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_enableCollaboratorCursors);
  v59 = *(unsigned __int8 *)(v28 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isCanvasDotGridEnabled);
  v46 = *(_QWORD *)(v28 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion);
  v47 = *(_BYTE *)(v28 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isConnectorModeEnabled);
  v48 = *(_BYTE *)(v28 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion + 8);
  v49 = *(_BYTE *)(v28 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isScenesNavigatorOpen);
  *v14 = v64 & 1;
  v14[1] = v62;
  v68 = v28;
  v50 = (int *)v67;
  v51 = v75;
  v52 = v70;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v75 + 32))(&v14[*(int *)(v67 + 24)], v73, v70);
  sub_1004C4938((uint64_t)v74, (uint64_t)&v14[v50[7]], &qword_1013F5478);
  v14[v50[8]] = 0;
  v14[v50[9]] = v65;
  v14[v50[10]] = v61 & 1;
  v53 = &v14[v50[11]];
  *(_QWORD *)v53 = v46;
  v53[8] = v48;
  v14[v50[12]] = v60;
  v14[v50[13]] = v59;
  v14[v50[14]] = v47;
  v14[v50[15]] = v49;
  v54 = v66;
  sub_1004B8460((uint64_t)v26, (uint64_t)v66, type metadata accessor for CRLBoardIdentifier);
  v55 = v71;
  sub_1004B8460((uint64_t)v14, (uint64_t)v71, type metadata accessor for CRLBoardViewModelMetadata);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v69 + 56))(v55, 0, 1, v50);
  sub_10083F150((uint64_t)v55, (uint64_t)v54);
  swift_release(v68);
  sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardViewModelMetadata);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v76, v52);
  return sub_1004B84A4((uint64_t)v26, type metadata accessor for CRLBoardIdentifier);
}

void sub_100CE4334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a6;
  v36 = a7;
  v33 = a4;
  v34 = a5;
  v32 = a3;
  v10 = sub_1004B804C(&qword_10140DFB0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  v37 = a1;
  v16 = *(_QWORD *)(a2 + 64);
  v30 = a2 + 64;
  v17 = 1 << *(_BYTE *)(a2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v31 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v20 = 0;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v21 | (v20 << 6); ; i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    v26 = *(_QWORD *)(a2 + 48);
    v27 = type metadata accessor for CRLBoardIdentifier(0);
    sub_1004B8460(v26 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * i, (uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
    v28 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    *(_QWORD *)&v15[*(int *)(v10 + 48)] = v28;
    sub_1004C4938((uint64_t)v15, (uint64_t)v13, &qword_10140DFB0);
    swift_retain(v28);
    sub_100CE3D00((uint64_t)&v37, (uint64_t)v13, v32, v33, v34, v35, v36);
    if (v7)
    {
      swift_bridgeObjectRelease(v37);
      sub_1004CB800((uint64_t)v13, &qword_10140DFB0);
      swift_release(a2);
      return;
    }
    sub_1004CB800((uint64_t)v13, &qword_10140DFB0);
    if (v19)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v31)
      goto LABEL_26;
    v24 = *(_QWORD *)(v30 + 8 * v20);
    if (!v24)
      break;
LABEL_17:
    v19 = (v24 - 1) & v24;
  }
  v25 = v20 + 1;
  if (v20 + 1 >= v31)
    goto LABEL_26;
  v24 = *(_QWORD *)(v30 + 8 * v25);
  if (v24)
    goto LABEL_16;
  v25 = v20 + 2;
  if (v20 + 2 >= v31)
    goto LABEL_26;
  v24 = *(_QWORD *)(v30 + 8 * v25);
  if (v24)
    goto LABEL_16;
  v25 = v20 + 3;
  if (v20 + 3 >= v31)
    goto LABEL_26;
  v24 = *(_QWORD *)(v30 + 8 * v25);
  if (v24)
    goto LABEL_16;
  v25 = v20 + 4;
  if (v20 + 4 >= v31)
  {
LABEL_26:
    swift_release(a2);
    return;
  }
  v24 = *(_QWORD *)(v30 + 8 * v25);
  if (v24)
  {
LABEL_16:
    v20 = v25;
    goto LABEL_17;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v31)
      goto LABEL_26;
    v24 = *(_QWORD *)(v30 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100CE45E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  objc_class *v49;
  char *v50;
  double v51;
  id v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  objc_super v74;
  _QWORD v75[10];
  uint64_t v76;

  v4 = v3;
  v73 = a3;
  v64 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v7 = __chkstk_darwin(v64);
  v63 = (uint64_t)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v62 = (uint64_t)v59 - v9;
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  v60 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v71 = (uint64_t)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v59 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)v59 - v16;
  v76 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_30;
  v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  while (v18)
  {
    v59[1] = v4;
    a1 = 0;
    v4 = a2 & 0xC000000000000001;
    v61 = a2 + 32;
    v72 = v73 + 7;
    v66 = v18;
    v67 = a2;
    v65 = a2 & 0xC000000000000001;
    while (1)
    {
      if (v4)
      {
        v19 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, a2);
        v20 = __OFADD__(a1++, 1);
        if (v20)
          break;
        goto LABEL_12;
      }
      v19 = (char *)*(id *)(v61 + 8 * a1);
      v20 = __OFADD__(a1++, 1);
      if (v20)
        break;
LABEL_12:
      if ((v19[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_accepted] & 1) != 0)
        goto LABEL_6;
      v68 = a1;
      v69 = v19;
      v21 = (uint64_t)&v19[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_boardIdentifier];
      if (!v73[2])
        goto LABEL_25;
      v22 = v73;
      Hasher.init(_seed:)(v75, v73[5]);
      v23 = type metadata accessor for UUID(0);
      v24 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v75, v23, v24);
      v70 = type metadata accessor for CRLBoardIdentifierStorage(0);
      v25 = (uint64_t *)(v21 + *(int *)(v70 + 20));
      v27 = *v25;
      v26 = v25[1];
      swift_bridgeObjectRetain(v26);
      String.hash(into:)(v75, v27, v26);
      swift_bridgeObjectRelease(v26);
      v28 = Hasher._finalize()();
      v29 = -1 << *((_BYTE *)v22 + 32);
      v30 = v28 & ~v29;
      if (((*(_QWORD *)((char *)v72 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
      {
LABEL_25:
        v44 = *(_QWORD *)&v69[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_boardTitle];
        v43 = *(_QWORD *)&v69[OBJC_IVAR____TtC8Freeform18CRLSharedHighlight_boardTitle + 8];
        v45 = sub_1004B804C((uint64_t *)&unk_1013EA630);
        v46 = v62;
        v47 = (_QWORD *)(v62 + *(int *)(v45 + 48));
        sub_1004B8460(v21, v62, type metadata accessor for CRLBoardIdentifier);
        *v47 = v44;
        v47[1] = v43;
        swift_storeEnumTagMultiPayload(v46, v64, 2);
        v48 = v63;
        sub_1004B8460(v46, v63, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v49 = (objc_class *)type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
        v50 = (char *)objc_allocWithZone(v49);
        *(_QWORD *)&v50[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
        sub_1004B8460(v48, (uint64_t)&v50[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
        v74.receiver = v50;
        v74.super_class = v49;
        *(_QWORD *)&v51 = swift_bridgeObjectRetain(v43).n128_u64[0];
        v52 = objc_msgSendSuper2(&v74, "init", v51);
        sub_1004B84A4(v48, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B84A4(v46, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v53 = (char *)v52;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
        v55 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v54 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v55 >= v54 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
        v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v53);
        specialized Array._endMutation()(v56);

        v19 = v53;
        v18 = v66;
        a2 = v67;
        a1 = v68;
        v4 = v65;
        goto LABEL_6;
      }
      v31 = ~v29;
      v32 = *(_QWORD *)(v60 + 72);
      while (1)
      {
        sub_1004B8460(v73[6] + v32 * v30, (uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
        v33 = static UUID.== infix(_:_:)(v17);
        sub_1004B8460((uint64_t)v17, (uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
        v34 = (uint64_t)v15;
        v35 = v71;
        sub_1004B8460(v21, v71, type metadata accessor for CRLBoardIdentifier);
        if ((v33 & 1) == 0)
        {
          sub_1004B84A4(v35, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v34, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
          v15 = (char *)v34;
          goto LABEL_17;
        }
        v36 = *(int *)(v70 + 20);
        v37 = *(_QWORD *)(v34 + v36);
        v38 = *(_QWORD *)(v34 + v36 + 8);
        v39 = (_QWORD *)(v35 + v36);
        v40 = v39[1];
        if (v37 == *v39 && v38 == v40)
        {
          sub_1004B84A4(v35, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4(v34, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
          a2 = v67;
          v15 = (char *)v34;
          goto LABEL_5;
        }
        v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, *v39, v40, 0);
        sub_1004B84A4(v35, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v34, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
        v15 = (char *)v34;
        if ((v42 & 1) != 0)
          break;
LABEL_17:
        v30 = (v30 + 1) & v31;
        if (((*(_QWORD *)((char *)v72 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
          goto LABEL_25;
      }
      a2 = v67;
LABEL_5:
      v4 = v65;
      v18 = v66;
      a1 = v68;
      v19 = v69;
LABEL_6:

      if (a1 == v18)
      {
        swift_bridgeObjectRelease(a2);
        return v76;
      }
    }
    __break(1u);
LABEL_30:
    if (a2 < 0)
      v57 = a2;
    else
      v57 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v18 = _CocoaArrayWrapper.endIndex.getter(v57);
  }
  swift_bridgeObjectRelease(a2);
  return a1;
}

uint64_t sub_100CE4B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[24];
  char v71[24];

  v3 = v2;
  v69 = a2;
  v62 = a1;
  v4 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v4);
  v63 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for CRLBoard.RealTimeSessionInfo(0);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v59 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1004B804C((uint64_t *)&unk_101405E90);
  __chkstk_darwin(v7);
  v67 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v12 - 8);
  v61 = v12;
  __chkstk_darwin(v12);
  v58 = v13;
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v58 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v58 - v22;
  v24 = *(_QWORD *)(v3 + 16);
  v64 = OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard;
  v65 = v24;
  v25 = *(char **)(v24 + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_mainBoard);
  v26 = OBJC_IVAR____TtC8Freeform8CRLBoard_data;
  v27 = *(_QWORD *)&v25[OBJC_IVAR____TtC8Freeform8CRLBoard_data];
  v28 = v27 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(v27 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v71, 0, 0);
  sub_1004B8460(v28, (uint64_t)v11, type metadata accessor for CRLBoardCRDTData);
  v29 = v25;
  swift_retain(v27);
  v30 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v30);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardCRDTData);
  swift_release(v27);
  v31 = (uint64_t *)(*(_QWORD *)&v25[v26] + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v32 = *v31;
  v33 = v31[1];
  swift_bridgeObjectRetain(v33);
  sub_10067AFD0((uint64_t)v14, v32, v33, (uint64_t)v23);

  v34 = v69;
  LOBYTE(v32) = static UUID.== infix(_:_:)(v23);
  sub_1004B8460((uint64_t)v23, (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
  sub_1004B8460(v34, (uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
  if ((v32 & 1) == 0)
  {
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
    return sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
  }
  v35 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  v36 = *(_QWORD *)&v20[v35];
  v37 = *(_QWORD *)&v20[v35 + 8];
  v38 = &v17[v35];
  v39 = *((_QWORD *)v38 + 1);
  if (v36 == *(_QWORD *)v38 && v37 == v39)
  {
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
  }
  else
  {
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, *(_QWORD *)v38, v39, 0);
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
    result = sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardIdentifier);
    if ((v41 & 1) == 0)
      return result;
  }
  v42 = *(_QWORD *)(v65 + v64) + OBJC_IVAR____TtC8Freeform8CRLBoard_realTimeSessionInfo;
  swift_beginAccess(v42, v70, 0, 0);
  v43 = v42;
  v44 = v67;
  sub_1004CB7BC(v43, v67, (uint64_t *)&unk_101405E90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v44, 1, v68))
  {
    v45 = (uint64_t *)&unk_101405E90;
    v46 = v44;
  }
  else
  {
    v47 = v59;
    sub_1004B8460(v44, (uint64_t)v59, type metadata accessor for CRLBoard.RealTimeSessionInfo);
    sub_1004CB800(v44, (uint64_t *)&unk_101405E90);
    v48 = *v47;
    swift_retain(*v47);
    sub_1004B84A4((uint64_t)v47, type metadata accessor for CRLBoard.RealTimeSessionInfo);
    v49 = type metadata accessor for TaskPriority(0);
    v50 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v63, 1, 1, v49);
    v52 = v60;
    v51 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v14, v62, v61);
    v53 = *(unsigned __int8 *)(v52 + 80);
    v54 = (v53 + 32) & ~v53;
    v55 = (v58 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = swift_allocObject(&unk_1012A0158, v55 + 8, v53 | 7);
    *(_QWORD *)(v56 + 16) = 0;
    *(_QWORD *)(v56 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v56 + v54, v14, v51);
    *(_QWORD *)(v56 + v55) = v48;
    swift_retain(v48);
    v57 = sub_1009880C4(v50, (uint64_t)&unk_10140E2C0, v56);
    swift_release(v48);
    swift_release(v57);
    v45 = &qword_1013E01F0;
    v46 = v50;
  }
  return sub_1004CB800(v46, v45);
}

uint64_t sub_100CE50D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - v9;
  v16 = a2;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v13 = *(_QWORD *)(v8 + 72);
    do
    {
      sub_1004B8460(v12, (uint64_t)v6, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      sub_100AD9B64((uint64_t)v10, (uint64_t)v6);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      v12 += v13;
      --v11;
    }
    while (v11);
    return v16;
  }
  return a2;
}

uint64_t sub_100CE51CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v19 = *(_QWORD *)(v5 + 72);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v16(v13, v15, v4);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v17(v13, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v13, v4);
      sub_100AD569C((uint64_t)v10, (uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v15 += v19;
      if (!--v14)
        goto LABEL_7;
    }
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_7:
    v17(v13, 1, 1, v4);
  }
  return v20;
}

uint64_t sub_100CE5370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[13] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[14] = v7;
  v5[15] = v8;
  return swift_task_switch(sub_100CE53E4, v7, v8);
}

uint64_t sub_100CE53E4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  __n128 v3;
  uint64_t v4;

  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v1 = *(_QWORD *)(v0 + 96);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 16, 0, 0);
  v2 = (id)static OS_os_log.crlBoardLibrary;
  v4 = static os_log_type_t.default.getter(v3);
  sub_100A06EBC((uint64_t)v2, &_mh_execute_header, v4, "Building metadata from the database", 35, 2, (uint64_t)_swiftEmptyArrayStorage);

  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_store);
  return swift_task_switch(sub_100CE54B0, 0, 0);
}

uint64_t sub_100CE54B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[16];
  v2 = swift_task_alloc(32);
  v0[17] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[18] = v3;
  v4 = sub_1004B804C(&qword_10140DFA8);
  *v3 = v0;
  v3[1] = sub_100CE5560;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000027, 0x8000000101009480, sub_100CEBBA0, v2, v4);
}

uint64_t sub_100CE5560()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CE5704;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 136));
    v4 = sub_100CE55CC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CE55CC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 40);
  return swift_task_switch(sub_100CE55E8, 0, 0);
}

uint64_t sub_100CE55E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[16];
  v2 = swift_task_alloc(32);
  v0[21] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[22] = v3;
  v4 = sub_1004B804C(&qword_1013E4980);
  *v3 = v0;
  v3[1] = sub_100CE5698;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000022, 0x80000001010094B0, sub_100CEBBA8, v2, v4);
}

uint64_t sub_100CE5698()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CE58A8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 168));
    v4 = sub_100CE5770;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CE5704()
{
  _QWORD *v0;

  swift_task_dealloc(v0[17]);
  return swift_task_switch(sub_100CE573C, v0[14], v0[15]);
}

uint64_t sub_100CE573C()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CE5770()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 48);
  return swift_task_switch(sub_100CE578C, 0, 0);
}

uint64_t sub_100CE578C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[16];
  v2 = swift_task_alloc(32);
  v0[25] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[26] = v3;
  v4 = sub_1004B804C(&qword_1013FE180);
  *v3 = v0;
  v3[1] = sub_100CE583C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000019, 0x80000001010094E0, sub_100CEBBB0, v2, v4);
}

uint64_t sub_100CE583C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100CE591C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 200));
    v4 = sub_100CE599C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CE58A8()
{
  _QWORD *v0;

  swift_task_dealloc(v0[21]);
  return swift_task_switch(sub_100CE58E0, v0[14], v0[15]);
}

uint64_t sub_100CE58E0()
{
  uint64_t v0;
  __n128 v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  v1 = swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_100CE591C()
{
  _QWORD *v0;

  swift_task_dealloc(v0[25]);
  return swift_task_switch(sub_100CE5954, v0[14], v0[15]);
}

uint64_t sub_100CE5954()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  swift_bridgeObjectRelease(v1);
  v2 = swift_release(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_100CE599C()
{
  _QWORD *v0;

  v0[28] = v0[7];
  return swift_task_switch(sub_100CE59B4, v0[14], v0[15]);
}

uint64_t sub_100CE59B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(void **)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 104));
  v9 = sub_1008D6494((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v1);
  v10 = v4;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v2);
  sub_100CE4334(v9, v3, v1, (uint64_t)v10, v6, v5, v2);
  v12 = v11;
  swift_bridgeObjectRelease_n(v2, 2);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);

  swift_bridgeObjectRelease_n(v1, 2);
  v13 = swift_bridgeObjectRelease(v3);
  return (*(uint64_t (**)(uint64_t, __n128))(v0 + 8))(v12, v13);
}

void sub_100CE5AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t *v19;
  void *v20;
  void *v21;

  if (a3 != a2)
  {
    v7 = a3;
    v8 = a1;
    v9 = *a4;
    v10 = (uint64_t *)(*a4 + 8 * a3 - 8);
LABEL_4:
    v11 = *(void **)(v9 + 8 * v7);
    v19 = v10;
    while (1)
    {
      v21 = v11;
      v20 = (void *)*v10;
      v12 = v20;
      v13 = v11;
      v14 = v12;
      v15 = sub_100CD4234((uint64_t *)&v21, (uint64_t *)&v20, a5);

      if (v5)
        break;
      if ((v15 & 1) != 0)
      {
        if (!v9)
        {
          __break(1u);
          return;
        }
        v16 = *v10;
        v11 = (void *)v10[1];
        *v10 = (uint64_t)v11;
        v10[1] = v16;
        --v10;
        if (v7 != ++v8)
          continue;
      }
      ++v7;
      v10 = v19 + 1;
      v8 = a1;
      if (v7 != a2)
        goto LABEL_4;
      return;
    }
  }
}

void sub_100CE5BD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  id *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  void **v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  uint64_t *v58;
  id *v59;
  id *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  id *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void (*v86)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  void *v99;
  void (*v100)(char *, uint64_t, uint64_t);
  unint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  char v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  __n128 v165;
  uint64_t *v166;
  uint64_t v167;
  __n128 v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  __n128 v182;
  __n128 v183;
  char *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  Swift::Int v194;
  char *v195;
  id *v196;
  char *v197;
  uint64_t v198;
  id *v199;
  id *v200;
  unsigned int (*v201)(uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t, uint64_t);
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id *v220;
  id *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  id *v226;
  uint64_t v227;
  void *v228;
  void *v229;
  uint64_t v230;

  v5 = sub_1004B804C(&qword_1013E4690);
  __chkstk_darwin(v5);
  v219 = (uint64_t)&v189 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v217 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v198 = (uint64_t)&v189 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v204 = (uint64_t)&v189 - v10;
  v11 = sub_1004B804C(&qword_1013E04F0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v209 = (char *)&v189 - v16;
  __chkstk_darwin(v15);
  v215 = (char *)&v189 - v17;
  v223 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v223 - 8);
  v19 = __chkstk_darwin(v223);
  v197 = (char *)&v189 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v203 = (char *)&v189 - v21;
  v22 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v23 = __chkstk_darwin(v22);
  v212 = (uint64_t)&v189 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v213 = (char *)&v189 - v25;
  v26 = type metadata accessor for CRLBoardIdentifier(0);
  v27 = __chkstk_darwin(v26);
  v225 = (uint64_t)&v189 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v226 = (id *)((char *)&v189 - v29);
  v227 = a2;
  v30 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3);
  v31 = _minimumMergeRunLength(_:)(v30);
  if (v31 >= v30)
  {
    if (v30 < 0)
      goto LABEL_165;
    if (v30)
    {
      v37 = v227;
      swift_bridgeObjectRetain(v227);
      sub_100CE5AD8(0, v30, 1, a1, v37);
      swift_bridgeObjectRelease_n(v37, 4);
    }
    else
    {
      swift_bridgeObjectRelease_n(v227, 3);
    }
  }
  else
  {
    v194 = v31;
    if (v30 >= 0)
      v32 = v30;
    else
      v32 = v30 + 1;
    if (v30 >= -1)
    {
      v222 = v18;
      v214 = v7;
      v199 = (id *)v30;
      v191 = a1;
      if (v30 < 2)
      {
        v38 = (char *)_swiftEmptyArrayStorage;
        v230 = (uint64_t)_swiftEmptyArrayStorage;
        v205 = (uint64_t *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
        v36 = v213;
        if (v30 != 1)
        {
          v171 = v2;
          v114 = _swiftEmptyArrayStorage[2];
          if (v114 < 2)
            goto LABEL_144;
          goto LABEL_129;
        }
      }
      else
      {
        v33 = v32 >> 1;
        v34 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
        v35 = static Array._allocateBufferUninitialized(minimumCapacity:)(v33, v34);
        *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) = v33;
        v205 = (uint64_t *)((v35 & 0xFFFFFFFFFFFFFF8) + 32);
        v230 = v35;
        v36 = v213;
      }
      v208 = v2;
      v39 = 0;
      v40 = *a1;
      v210 = v212 + 8;
      v211 = v36 + 8;
      v193 = v40 + 16;
      v192 = v40 - 8;
      v38 = (char *)_swiftEmptyArrayStorage;
      v41 = v219;
      v195 = v14;
      v42 = v215;
      v43 = v22;
      v218 = v22;
      v44 = (uint64_t)v199;
      v216 = v40;
      while (1)
      {
        v45 = (uint64_t)v39;
        v39 = (id *)((char *)v39 + 1);
        v200 = (id *)v45;
        if ((uint64_t)v39 < v44)
        {
          v46 = v42;
          v47 = v41;
          v48 = *(void **)(v40 + 8 * (_QWORD)v39);
          v228 = *(void **)(v40 + 8 * v45);
          v49 = v228;
          v229 = v48;
          v50 = v48;
          v51 = v49;
          v52 = v208;
          LODWORD(v224) = sub_100CD4234((uint64_t *)&v229, (uint64_t *)&v228, v227);
          if (v52)
          {
            swift_bridgeObjectRelease(v38);

LABEL_142:
            *(_QWORD *)((v230 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()(v170);
            v186 = v230;
            swift_bridgeObjectRelease_n(v227, 3);
            swift_bridgeObjectRelease(v186);
            return;
          }

          v39 = (id *)(v45 + 2);
          if (v45 + 2 >= (uint64_t)v199)
          {
            v208 = 0;
          }
          else
          {
            v53 = (void **)(v193 + 8 * v45);
            while (1)
            {
              v54 = *v53;
              v228 = *(v53 - 1);
              v55 = v228;
              v229 = v54;
              v56 = v54;
              v57 = v55;
              LODWORD(v55) = sub_100CD4234((uint64_t *)&v229, (uint64_t *)&v228, v227);

              if (((v224 ^ v55) & 1) != 0)
                break;
              v39 = (id *)((char *)v39 + 1);
              ++v53;
              if (v199 == v39)
              {
                v208 = 0;
                v39 = v199;
                goto LABEL_22;
              }
            }
            v208 = 0;
LABEL_22:
            v45 = (uint64_t)v200;
          }
          v40 = v216;
          v41 = v47;
          if ((v224 & 1) != 0)
          {
            if ((uint64_t)v39 < v45)
              goto LABEL_169;
            v42 = v46;
            v43 = v218;
            if (v45 < (uint64_t)v39)
            {
              v58 = (uint64_t *)(v192 + 8 * (_QWORD)v39);
              v59 = v39;
              v60 = (id *)v45;
              v61 = (uint64_t *)(v216 + 8 * v45);
              do
              {
                v59 = (id *)((char *)v59 - 1);
                if (v60 != v59)
                {
                  if (!v40)
                    goto LABEL_172;
                  v62 = *v61;
                  *v61 = *v58;
                  *v58 = v62;
                }
                v60 = (id *)((char *)v60 + 1);
                --v58;
                ++v61;
              }
              while ((uint64_t)v60 < (uint64_t)v59);
            }
          }
          else
          {
            v42 = v46;
            v43 = v218;
          }
        }
        if ((uint64_t)v39 >= (uint64_t)v199)
          goto LABEL_75;
        if (__OFSUB__(v39, v45))
          goto LABEL_166;
        v63 = (uint64_t)v213;
        if ((uint64_t)v39 - v45 >= v194)
        {
LABEL_40:
          v41 = v219;
          goto LABEL_74;
        }
        v64 = (id *)((char *)v200 + v194);
        if (__OFADD__(v200, v194))
          goto LABEL_167;
        if ((uint64_t)v64 >= (uint64_t)v199)
          v64 = v199;
        if ((uint64_t)v64 < (uint64_t)v200)
          break;
        if (v39 == v64)
          goto LABEL_40;
        v196 = v64;
        v190 = v38;
        v65 = v192 + 8 * (_QWORD)v39;
        while (2)
        {
          v68 = *(void **)(v40 + 8 * (_QWORD)v39);
          v69 = v200;
          v202 = v65;
          v220 = v39;
          while (1)
          {
            v70 = *(void **)v65;
            sub_1004B8460((uint64_t)v68 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v63, type metadata accessor for CRLBoardLibraryViewModel.Item);
            if (swift_getEnumCaseMultiPayload(v63, v43) != 2)
              break;
            v221 = v69;
            v71 = v227;
            v72 = v63;
            v73 = sub_1004B804C((uint64_t *)&unk_1013EA630);
            v74 = *(_QWORD *)&v211[*(int *)(v73 + 48)];
            v224 = v68;
            v75 = v70;
            swift_bridgeObjectRelease(v74);
            sub_1004B84E0(v72, (uint64_t)v226, type metadata accessor for CRLBoardIdentifier);
            v76 = v212;
            sub_1004B8460((uint64_t)v75 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v212, type metadata accessor for CRLBoardLibraryViewModel.Item);
            if (swift_getEnumCaseMultiPayload(v76, v43) != 2)
            {
              sub_1004B84A4((uint64_t)v226, type metadata accessor for CRLBoardIdentifier);
              sub_1004B84A4(v76, type metadata accessor for CRLBoardLibraryViewModel.Item);
              goto LABEL_72;
            }
            swift_bridgeObjectRelease(*(_QWORD *)(v210 + *(int *)(v73 + 48)));
            sub_1004B84E0(v76, v225, type metadata accessor for CRLBoardIdentifier);
            if (!*(_QWORD *)(v71 + 16) || (v77 = sub_100843264((uint64_t)v226), (v78 & 1) == 0))
            {
              v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v222 + 56);
              v80 = (uint64_t)v215;
              v86(v215, 1, 1, v223);
LABEL_55:
              sub_1004CB800(v80, &qword_1013E04F0);
              if (*(_QWORD *)(v227 + 16) && (v88 = sub_100843264(v225), (v89 & 1) != 0))
              {
                sub_1004B8460(*(_QWORD *)(v227 + 56) + *(_QWORD *)(v217 + 72) * v88, v219, type metadata accessor for CRLBoardViewModelMetadata);
                v90 = 0;
              }
              else
              {
                v90 = 1;
              }
              v91 = v214;
              v92 = v217;
              v93 = v219;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v217 + 56))(v219, v90, 1, v214);
              sub_1004B84A4(v225, type metadata accessor for CRLBoardIdentifier);
              sub_1004B84A4((uint64_t)v226, type metadata accessor for CRLBoardIdentifier);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v93, 1, v91) == 1)
              {
                sub_1004CB800(v93, &qword_1013E4690);
                v109 = (uint64_t)v209;
                v86(v209, 1, 1, v223);
                sub_1004CB800(v109, &qword_1013E04F0);
LABEL_72:

LABEL_45:
                v63 = (uint64_t)v213;
                v40 = v216;
                v39 = v220;
                goto LABEL_46;
              }
              v94 = v93 + *(int *)(v91 + 24);
              v96 = v222;
              v95 = v223;
              v97 = (uint64_t)v209;
              (*(void (**)(char *, uint64_t, uint64_t))(v222 + 16))(v209, v94, v223);
              sub_1004B84A4(v93, type metadata accessor for CRLBoardViewModelMetadata);
              v86((char *)v97, 0, 1, v95);
              v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1, v95);
              sub_1004CB800(v97, &qword_1013E04F0);

              if (v98 == 1)
                goto LABEL_44;
              goto LABEL_61;
            }
            v79 = *(_QWORD *)(v227 + 56);
            v80 = (uint64_t)v215;
            v81 = v227;
            v206 = *(_QWORD *)(v217 + 72);
            v82 = v204;
            sub_1004B8460(v79 + v206 * v77, v204, type metadata accessor for CRLBoardViewModelMetadata);
            v83 = v82 + *(int *)(v214 + 24);
            v85 = (_QWORD *)v222;
            v84 = v223;
            v207 = *(void (**)(uint64_t, uint64_t, uint64_t))(v222 + 16);
            v207(v80, v83, v223);
            sub_1004B84A4(v82, type metadata accessor for CRLBoardViewModelMetadata);
            v86 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v85[7];
            v86((char *)v80, 0, 1, v84);
            v87 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v85[6];
            if (v87(v80, 1, v84) == 1)
            {
              v43 = v218;
              goto LABEL_55;
            }
            v201 = v87;
            v100 = (void (*)(char *, uint64_t, uint64_t))v85[4];
            v100(v203, v80, v84);
            if (!*(_QWORD *)(v81 + 16) || (v101 = sub_100843264(v225), (v102 & 1) == 0))
            {
              v66 = (uint64_t)v195;
              v67 = v223;
              v86(v195, 1, 1, v223);
LABEL_43:
              (*(void (**)(char *, uint64_t))(v222 + 8))(v203, v67);
              sub_1004B84A4(v225, type metadata accessor for CRLBoardIdentifier);
              sub_1004B84A4((uint64_t)v226, type metadata accessor for CRLBoardIdentifier);
              sub_1004CB800(v66, &qword_1013E04F0);

LABEL_44:
              v43 = v218;
              goto LABEL_45;
            }
            v103 = *(_QWORD *)(v81 + 56) + v101 * v206;
            v104 = v198;
            sub_1004B8460(v103, v198, type metadata accessor for CRLBoardViewModelMetadata);
            v66 = (uint64_t)v195;
            v67 = v223;
            v207((uint64_t)v195, v104 + *(int *)(v214 + 24), v223);
            sub_1004B84A4(v104, type metadata accessor for CRLBoardViewModelMetadata);
            v86((char *)v66, 0, 1, v67);
            if (v201(v66, 1, v67) == 1)
              goto LABEL_43;
            v105 = v197;
            v100(v197, v66, v67);
            v106 = v203;
            v107 = static Date.> infix(_:_:)(v203, v105);
            v108 = *(void (**)(char *, uint64_t))(v222 + 8);
            v108(v105, v67);
            v108(v106, v67);
            sub_1004B84A4(v225, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4((uint64_t)v226, type metadata accessor for CRLBoardIdentifier);

            if ((v107 & 1) == 0)
              goto LABEL_44;
LABEL_61:
            v43 = v218;
            v63 = (uint64_t)v213;
            v40 = v216;
            v39 = v220;
            if (!v216)
              goto LABEL_170;
            v99 = *(void **)v65;
            v68 = *(void **)(v65 + 8);
            *(_QWORD *)v65 = v68;
            *(_QWORD *)(v65 + 8) = v99;
            v65 -= 8;
            v69 = (id *)((char *)v221 + 1);
            if (v39 == (id *)((char *)v221 + 1))
              goto LABEL_46;
          }
          sub_1004B84A4(v63, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v40 = v216;
LABEL_46:
          v39 = (id *)((char *)v39 + 1);
          v65 = v202 + 8;
          if (v39 != v196)
            continue;
          break;
        }
        v39 = v196;
        v38 = v190;
        v41 = v219;
        v42 = v215;
LABEL_74:
        v45 = (uint64_t)v200;
LABEL_75:
        if ((uint64_t)v39 < v45)
          goto LABEL_164;
        v110 = v43;
        v111 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
          v38 = sub_100D15FCC(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
        v113 = *((_QWORD *)v38 + 2);
        v112 = *((_QWORD *)v38 + 3);
        v114 = v113 + 1;
        if (v113 >= v112 >> 1)
          v38 = sub_100D15FCC((char *)(v112 > 1), v113 + 1, 1, v38);
        *((_QWORD *)v38 + 2) = v114;
        v115 = v38 + 32;
        v116 = &v38[16 * v113 + 32];
        *(_QWORD *)v116 = v200;
        *((_QWORD *)v116 + 1) = v39;
        if (v113)
        {
          v42 = v111;
          v220 = v39;
          v224 = v38 + 32;
          while (1)
          {
            v117 = v114 - 1;
            if (v114 >= 4)
            {
              v122 = &v115[16 * v114];
              v123 = *((_QWORD *)v122 - 8);
              v124 = *((_QWORD *)v122 - 7);
              v128 = __OFSUB__(v124, v123);
              v125 = v124 - v123;
              if (v128)
                goto LABEL_149;
              v127 = *((_QWORD *)v122 - 6);
              v126 = *((_QWORD *)v122 - 5);
              v128 = __OFSUB__(v126, v127);
              v120 = v126 - v127;
              v121 = v128;
              if (v128)
                goto LABEL_150;
              v129 = v114 - 2;
              v130 = &v115[16 * v114 - 32];
              v132 = *(_QWORD *)v130;
              v131 = *((_QWORD *)v130 + 1);
              v128 = __OFSUB__(v131, v132);
              v133 = v131 - v132;
              if (v128)
                goto LABEL_152;
              v128 = __OFADD__(v120, v133);
              v134 = v120 + v133;
              if (v128)
                goto LABEL_155;
              if (v134 >= v125)
              {
                v152 = &v115[16 * v117];
                v154 = *(_QWORD *)v152;
                v153 = *((_QWORD *)v152 + 1);
                v128 = __OFSUB__(v153, v154);
                v155 = v153 - v154;
                if (v128)
                  goto LABEL_159;
                v145 = v120 < v155;
                goto LABEL_113;
              }
            }
            else
            {
              if (v114 != 3)
              {
                v146 = *((_QWORD *)v38 + 4);
                v147 = *((_QWORD *)v38 + 5);
                v128 = __OFSUB__(v147, v146);
                v139 = v147 - v146;
                v140 = v128;
                goto LABEL_107;
              }
              v119 = *((_QWORD *)v38 + 4);
              v118 = *((_QWORD *)v38 + 5);
              v128 = __OFSUB__(v118, v119);
              v120 = v118 - v119;
              v121 = v128;
            }
            if ((v121 & 1) != 0)
              goto LABEL_151;
            v129 = v114 - 2;
            v135 = &v115[16 * v114 - 32];
            v137 = *(_QWORD *)v135;
            v136 = *((_QWORD *)v135 + 1);
            v138 = __OFSUB__(v136, v137);
            v139 = v136 - v137;
            v140 = v138;
            if (v138)
              goto LABEL_154;
            v141 = &v115[16 * v117];
            v143 = *(_QWORD *)v141;
            v142 = *((_QWORD *)v141 + 1);
            v128 = __OFSUB__(v142, v143);
            v144 = v142 - v143;
            if (v128)
              goto LABEL_157;
            if (__OFADD__(v139, v144))
              goto LABEL_158;
            if (v139 + v144 >= v120)
            {
              v145 = v120 < v144;
LABEL_113:
              if (v145)
                v117 = v129;
              goto LABEL_115;
            }
LABEL_107:
            if ((v140 & 1) != 0)
              goto LABEL_153;
            v148 = &v115[16 * v117];
            v150 = *(_QWORD *)v148;
            v149 = *((_QWORD *)v148 + 1);
            v128 = __OFSUB__(v149, v150);
            v151 = v149 - v150;
            if (v128)
              goto LABEL_156;
            if (v151 < v139)
              goto LABEL_124;
LABEL_115:
            v156 = v117 - 1;
            if (v117 - 1 >= v114)
            {
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
              goto LABEL_168;
            }
            if (!v40)
              goto LABEL_171;
            v157 = v38;
            v158 = &v115[16 * v156];
            v159 = *(_QWORD *)v158;
            v160 = v117;
            v161 = &v115[16 * v117];
            v162 = *((_QWORD *)v161 + 1);
            v163 = (uint64_t *)(v40 + 8 * *(_QWORD *)v158);
            v221 = (id *)(v40 + 8 * *(_QWORD *)v161);
            v164 = v227;
            v165 = swift_bridgeObjectRetain(v227);
            v166 = v163;
            v167 = v208;
            sub_100CDE2DC(v166, v221, v40 + 8 * v162, v205, v164, v165, v168);
            v208 = v167;
            if (v167)
            {
              swift_bridgeObjectRelease(v157);
              goto LABEL_142;
            }
            if (v162 < v159)
              goto LABEL_146;
            if (v160 > *((_QWORD *)v157 + 2))
              goto LABEL_147;
            *(_QWORD *)v158 = v159;
            *(_QWORD *)&v224[16 * v156 + 8] = v162;
            v169 = *((_QWORD *)v157 + 2);
            if (v160 >= v169)
              goto LABEL_148;
            v38 = v157;
            v114 = v169 - 1;
            memmove(v161, v161 + 16, 16 * (v169 - 1 - v160));
            v115 = v224;
            *((_QWORD *)v38 + 2) = v169 - 1;
            v145 = v169 > 2;
            v110 = v218;
            v41 = v219;
            v42 = v215;
            v40 = v216;
            v39 = v220;
            if (!v145)
              goto LABEL_124;
          }
        }
        v114 = 1;
        v42 = v111;
LABEL_124:
        v44 = (uint64_t)v199;
        v43 = v110;
        if ((uint64_t)v39 >= (uint64_t)v199)
        {
          v171 = v208;
          if (v114 < 2)
          {
LABEL_144:
            swift_bridgeObjectRelease(v38);
            *(_QWORD *)((v230 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()(v187);
            v188 = v230;
            swift_bridgeObjectRelease_n(v227, 3);
            swift_bridgeObjectRelease(v188);
            return;
          }
LABEL_129:
          v172 = *v191;
          v225 = *v191;
          while (1)
          {
            v173 = v114 - 2;
            if (v114 < 2)
              goto LABEL_160;
            if (!v172)
              goto LABEL_173;
            v174 = v171;
            v175 = (uint64_t)v38;
            v176 = *(_QWORD *)&v38[16 * v173 + 32];
            v177 = *(_QWORD *)&v38[16 * v114 + 24];
            v178 = *(_QWORD *)&v38[16 * v114 + 16];
            v179 = (uint64_t *)(v172 + 8 * v176);
            v226 = (id *)(v172 + 8 * v178);
            v180 = v172 + 8 * v177;
            v181 = v227;
            v182 = swift_bridgeObjectRetain(v227);
            sub_100CDE2DC(v179, v226, v180, v205, v181, v182, v183);
            v171 = v174;
            if (v174)
            {
              swift_bridgeObjectRelease(v175);
              goto LABEL_142;
            }
            if (v177 < v176)
              goto LABEL_161;
            v38 = (char *)v175;
            if ((swift_isUniquelyReferenced_nonNull_native(v175) & 1) == 0)
              v38 = sub_100D1664C(v175);
            if (v173 >= *((_QWORD *)v38 + 2))
              goto LABEL_162;
            v184 = &v38[16 * v173 + 32];
            *(_QWORD *)v184 = v176;
            *((_QWORD *)v184 + 1) = v177;
            v185 = *((_QWORD *)v38 + 2);
            if (v114 > v185)
              goto LABEL_163;
            memmove(&v38[16 * v114 + 16], &v38[16 * v114 + 32], 16 * (v185 - v114));
            *((_QWORD *)v38 + 2) = v185 - 1;
            v114 = v185 - 1;
            v172 = v225;
            if (v185 <= 2)
              goto LABEL_144;
          }
        }
      }
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      swift_bridgeObjectRelease_n(v227, 3);
      __break(1u);
LABEL_171:
      swift_bridgeObjectRelease_n(v227, 3);
      __break(1u);
LABEL_172:
      swift_bridgeObjectRelease_n(v227, 3);
      __break(1u);
LABEL_173:
      swift_bridgeObjectRelease_n(v227, 3);
      __break(1u);
    }
    swift_bridgeObjectRelease_n(v227, 4);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
}

uint64_t sub_100CE6D20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_100D19694(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  swift_bridgeObjectRetain(a2);
  sub_100CE5BD0(v9, a2);
  swift_bridgeObjectRelease(a2);
  specialized ContiguousArray._endMutation()(v7);
  return swift_bridgeObjectRelease_n(a2, 2);
}

Swift::Int sub_100CE6DC8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  Swift::Int result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  int64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a7;
  v34 = a5;
  v35 = a6;
  v33 = a4;
  v28 = a2;
  v29 = a1;
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = __chkstk_darwin(v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = a3;
  v16 = *(_QWORD *)(a3 + 56);
  v30 = 0;
  v31 = a3 + 56;
  v17 = 1 << *(_BYTE *)(a3 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v32 = (unint64_t)(v17 + 63) >> 6;
  while (v19)
  {
    v20 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    v21 = v20 | (v14 << 6);
LABEL_17:
    sub_1004B8460(*(_QWORD *)(v15 + 48) + *(_QWORD *)(v10 + 72) * v21, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    v25 = sub_100CD30C8((uint64_t)v13, v33, v34, v35, v36);
    result = sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    if (v7)
      return result;
    if (v25)
    {
      *(unint64_t *)((char *)v29 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      v22 = __OFADD__(v30++, 1);
      if (v22)
        goto LABEL_30;
    }
  }
  v22 = __OFADD__(v14++, 1);
  if (v22)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v14 >= v32)
    goto LABEL_27;
  v23 = *(_QWORD *)(v31 + 8 * v14);
  if (v23)
  {
LABEL_16:
    v19 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v14 << 6);
    goto LABEL_17;
  }
  v24 = v14 + 1;
  if (v14 + 1 >= v32)
    goto LABEL_27;
  v23 = *(_QWORD *)(v31 + 8 * v24);
  if (v23)
    goto LABEL_15;
  v24 = v14 + 2;
  if (v14 + 2 >= v32)
    goto LABEL_27;
  v23 = *(_QWORD *)(v31 + 8 * v24);
  if (v23)
    goto LABEL_15;
  v24 = v14 + 3;
  if (v14 + 3 >= v32)
  {
LABEL_27:
    v26 = v28;
    v27 = v30;
    swift_retain(v15);
    return sub_100CD814C(v29, v26, v27, v15);
  }
  v23 = *(_QWORD *)(v31 + 8 * v24);
  if (v23)
  {
LABEL_15:
    v14 = v24;
    goto LABEL_16;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v32)
      goto LABEL_27;
    v23 = *(_QWORD *)(v31 + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100CE7020(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v10;
  unsigned int v11;
  unint64_t v12;
  id v13;
  uint64_t isStackAllocationSafe;
  char *v15;
  id v16;
  Swift::Int v17;
  __n128 v18;
  void *v19;
  id v20;
  id v22;

  v10 = *(_BYTE *)(a1 + 32);
  v11 = v10 & 0x3F;
  v12 = (unint64_t)((1 << v10) + 63) >> 6;
  v13 = a2;
  swift_bridgeObjectRetain_n(a4, 2);
  swift_bridgeObjectRetain_n(a5, 2);
  isStackAllocationSafe = (uint64_t)v13;
  v22 = (id)isStackAllocationSafe;
  if (v11 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v12, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v15 = (char *)&v22 - ((8 * v12 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v15, 8 * v12);
    v16 = v22;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    v17 = sub_100CE6DC8((unint64_t *)v15, v12, a1, (uint64_t)v16, a3, a4, a5);
    swift_release(a1);

    swift_bridgeObjectRelease(a4);
    v18 = swift_bridgeObjectRelease(a5);
    if (v5)
      swift_willThrow(v18);
    swift_bridgeObjectRelease(a4);

  }
  else
  {
    v19 = (void *)swift_slowAlloc(8 * v12, -1);
    bzero(v19, 8 * v12);
    v20 = v22;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    v17 = sub_100CE6DC8((unint64_t *)v19, v12, a1, (uint64_t)v20, a3, a4, a5);
    swift_release(a1);

    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    swift_slowDealloc(v19, -1, -1);
    swift_bridgeObjectRelease(a4);

  }
  swift_bridgeObjectRelease(a4);

  swift_bridgeObjectRelease_n(a5, 2);
  return v17;
}

uint64_t sub_100CE72A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  _QWORD *v59;

  v4 = type metadata accessor for CRLBoardIdentifier(0);
  v58 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v53 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v48 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v48 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v48 - v14;
  v16 = __chkstk_darwin(v13);
  v51 = (uint64_t)&v48 - v17;
  result = __chkstk_darwin(v16);
  v20 = (char *)&v48 - v19;
  v21 = 0;
  v52 = a1;
  v22 = *(_QWORD *)(a1 + 64);
  v49 = a1 + 64;
  v23 = 1 << *(_BYTE *)(a1 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v54 = _swiftEmptyArrayStorage;
  v59 = _swiftEmptyArrayStorage;
  v25 = v24 & v22;
  v50 = (unint64_t)(v23 + 63) >> 6;
  v55 = a2;
  while (1)
  {
    if (v25)
    {
      v56 = (v25 - 1) & v25;
      v57 = v21;
      v26 = __clz(__rbit64(v25)) | (v21 << 6);
      goto LABEL_24;
    }
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v27 >= v50)
      goto LABEL_41;
    v28 = *(_QWORD *)(v49 + 8 * v27);
    v29 = v21 + 1;
    if (!v28)
    {
      v29 = v21 + 2;
      if (v21 + 2 >= v50)
        goto LABEL_41;
      v28 = *(_QWORD *)(v49 + 8 * v29);
      if (!v28)
      {
        v29 = v21 + 3;
        if (v21 + 3 >= v50)
          goto LABEL_41;
        v28 = *(_QWORD *)(v49 + 8 * v29);
        if (!v28)
        {
          v29 = v21 + 4;
          if (v21 + 4 >= v50)
            goto LABEL_41;
          v28 = *(_QWORD *)(v49 + 8 * v29);
          if (!v28)
          {
            v30 = v21 + 5;
            if (v21 + 5 >= v50)
            {
LABEL_41:
              swift_release(v52);
              return (uint64_t)v54;
            }
            v28 = *(_QWORD *)(v49 + 8 * v30);
            v29 = v21 + 5;
            if (!v28)
              break;
          }
        }
      }
    }
LABEL_23:
    v56 = (v28 - 1) & v28;
    v57 = v29;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_24:
    v31 = v51;
    v32 = *(_QWORD *)(v58 + 72);
    sub_1004B8460(*(_QWORD *)(v52 + 48) + v32 * v26, v51, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84E0(v31, (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
    v33 = *(_QWORD *)(a2 + 16);
    if (v33)
    {
      v34 = a2 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
      swift_bridgeObjectRetain(a2);
      do
      {
        sub_1004B8460(v34, (uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
        v35 = static UUID.== infix(_:_:)(v15);
        sub_1004B8460((uint64_t)v15, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
        sub_1004B8460((uint64_t)v20, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
        if ((v35 & 1) != 0)
        {
          v36 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
          v37 = *(_QWORD *)&v12[v36];
          v38 = *(_QWORD *)&v12[v36 + 8];
          v39 = &v9[v36];
          v40 = *((_QWORD *)v39 + 1);
          if (v37 == *(_QWORD *)v39 && v38 == v40)
          {
            sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
LABEL_5:
            a2 = v55;
            swift_bridgeObjectRelease(v55);
            result = sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
            goto LABEL_6;
          }
          v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, *(_QWORD *)v39, v40, 0);
          sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
          if ((v42 & 1) != 0)
            goto LABEL_5;
        }
        else
        {
          sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
        }
        v34 += v32;
        --v33;
      }
      while (v33);
      swift_bridgeObjectRelease(v55);
    }
    sub_1004B84E0((uint64_t)v20, v53, type metadata accessor for CRLBoardIdentifier);
    v43 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
      sub_100600A18(0, v43[2] + 1, 1);
    v44 = v59;
    v46 = v59[2];
    v45 = v59[3];
    if (v46 >= v45 >> 1)
    {
      sub_100600A18(v45 > 1, v46 + 1, 1);
      v44 = v59;
    }
    v44[2] = v46 + 1;
    v47 = *(unsigned __int8 *)(v58 + 80);
    v54 = v44;
    result = sub_1004B84E0(v53, (uint64_t)v44 + ((v47 + 32) & ~v47) + v46 * v32, type metadata accessor for CRLBoardIdentifier);
    a2 = v55;
LABEL_6:
    v25 = v56;
    v21 = v57;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v50)
      goto LABEL_41;
    v28 = *(_QWORD *)(v49 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100CE7738(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2[105] = v1;
  v2[104] = a1;
  v3 = type metadata accessor for CRLBoardEntity(0);
  v2[106] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[107] = v4;
  v2[108] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013FE140) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[109] = swift_task_alloc(v5);
  v2[110] = swift_task_alloc(v5);
  v2[111] = swift_task_alloc(v5);
  v2[112] = swift_task_alloc(v5);
  v6 = sub_1004B804C(&qword_1013E4690);
  v2[113] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardViewModelMetadata(0);
  v2[114] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[115] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[116] = swift_task_alloc(v9);
  v2[117] = swift_task_alloc(v9);
  v2[118] = swift_task_alloc(v9);
  v2[119] = swift_task_alloc(v9);
  v10 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v2[120] = v10;
  v2[121] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013E0270) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[122] = swift_task_alloc(v11);
  v2[123] = swift_task_alloc(v11);
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  v2[124] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[125] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[126] = swift_task_alloc(v14);
  v2[127] = swift_task_alloc(v14);
  v2[128] = swift_task_alloc(v14);
  v2[129] = swift_task_alloc(v14);
  v2[130] = swift_task_alloc(v14);
  v2[131] = swift_task_alloc(v14);
  v2[132] = swift_task_alloc(v14);
  v2[133] = swift_task_alloc(v14);
  v2[134] = swift_task_alloc(v14);
  v2[135] = swift_task_alloc(v14);
  v2[136] = swift_task_alloc(v14);
  v2[137] = swift_task_alloc(v14);
  v2[138] = swift_task_alloc(v14);
  v15 = type metadata accessor for MainActor(0);
  v2[139] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  v2[140] = v16;
  v2[141] = v17;
  return swift_task_switch(sub_100CE79A8, v16, v17);
}

void sub_100CE79A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v1 = v0[104];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v23 = v0[104];
    else
      v23 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v0[104]);
    v2 = _CocoaArrayWrapper.endIndex.getter(v23);
    if (v2)
      goto LABEL_3;
LABEL_23:
    v5 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v0[104]);
  if (!v2)
    goto LABEL_23;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  v3 = 0;
  v4 = v0[125];
  v31 = v0[121] + 8;
  v32 = v1 & 0xC000000000000001;
  v30 = v0[104] + 32;
  v5 = _swiftEmptyArrayStorage;
  do
  {
    if (v32)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v0[104]);
    else
      v6 = *(id *)(v30 + 8 * v3);
    v7 = v6;
    v8 = v0[121];
    v9 = v0[120];
    sub_1004B8460((uint64_t)v6 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v8, type metadata accessor for CRLBoardLibraryViewModel.Item);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 2)
    {
      v10 = v0[137];
      v11 = v0[122];
      v12 = v0[121];
      v13 = sub_1004B804C((uint64_t *)&unk_1013EA630);
      swift_bridgeObjectRelease(*(_QWORD *)(v31 + *(int *)(v13 + 48)));
      sub_1004B84E0(v12, v10, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84E0(v10, v11, type metadata accessor for CRLBoardIdentifier);
      v14 = 0;
    }
    else
    {
      sub_1004B84A4(v0[121], type metadata accessor for CRLBoardLibraryViewModel.Item);
      v14 = 1;
    }
    v15 = v0[124];
    v16 = v0[123];
    v17 = v0[122];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v17, v14, 1, v15);
    sub_1004C4938(v17, v16, &qword_1013E0270);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v16, 1, v15) == 1)
    {
      sub_1004CB800(v0[123], &qword_1013E0270);
    }
    else
    {
      v18 = v0[138];
      v19 = v0[136];
      sub_1004B84E0(v0[123], v18, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84E0(v18, v19, type metadata accessor for CRLBoardIdentifier);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = (_QWORD *)sub_100D104C0(0, v5[2] + 1, 1, (unint64_t)v5);
      v21 = v5[2];
      v20 = v5[3];
      if (v21 >= v20 >> 1)
        v5 = (_QWORD *)sub_100D104C0(v20 > 1, v21 + 1, 1, (unint64_t)v5);
      v22 = v0[136];
      v5[2] = v21 + 1;
      sub_1004B84E0(v22, (uint64_t)v5+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v21, type metadata accessor for CRLBoardIdentifier);
    }
    ++v3;
  }
  while (v2 != v3);
LABEL_24:
  v0[142] = v5;
  v24 = v0[105];
  swift_bridgeObjectRelease(v0[104]);
  v25 = *(_QWORD *)(v24 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot);
  swift_bridgeObjectRetain(v25);
  sub_1007C3B58(v26);
  v0[143] = v27;
  swift_bridgeObjectRelease(v25);
  v28 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_entityStore;
  v0[144] = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_entityStore;
  v29 = *(_QWORD *)(v24 + v28);
  v0[145] = v29;
  if (v29)
  {
    swift_retain(v29);
    swift_task_switch(sub_100CE7CD4, v29, 0);
    return;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_100CE7CD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[145];
  swift_beginAccess(v1 + 120, v0 + 63, 0, 0);
  v2 = *(_QWORD *)(v1 + 120);
  v0[146] = v2;
  v3 = v0[141];
  v4 = v0[140];
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_100CE7D34, v4, v3);
}

uint64_t sub_100CE7D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  uint64_t (*v73)();
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 1136);
  swift_release(*(_QWORD *)(v0 + 1160));
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  if (v3)
  {
    v92 = *(_QWORD *)(v0 + 1168);
    v4 = *(_QWORD *)(v0 + 1000);
    v5 = *(_QWORD *)(v4 + 72);
    v90 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v6 = *(_QWORD *)(v0 + 1136) + v90;
    do
    {
      sub_1004B8460(v6, *(_QWORD *)(v0 + 1080), type metadata accessor for CRLBoardIdentifier);
      if (*(_QWORD *)(v92 + 16)
        && (v7 = *(_QWORD *)(v0 + 1168),
            v8 = *(_QWORD *)(v0 + 1080),
            swift_bridgeObjectRetain(v7),
            sub_100843264(v8),
            LOBYTE(v8) = v9,
            swift_bridgeObjectRelease(v7),
            (v8 & 1) != 0))
      {
        sub_1004B84A4(*(_QWORD *)(v0 + 1080), type metadata accessor for CRLBoardIdentifier);
      }
      else
      {
        sub_1004B84E0(*(_QWORD *)(v0 + 1080), *(_QWORD *)(v0 + 1072), type metadata accessor for CRLBoardIdentifier);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_100600A18(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v11 = _swiftEmptyArrayStorage[2];
        v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1)
          sub_100600A18(v10 > 1, v11 + 1, 1);
        v12 = *(_QWORD *)(v0 + 1072);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        sub_1004B84E0(v12, (uint64_t)_swiftEmptyArrayStorage + v90 + v11 * v5, type metadata accessor for CRLBoardIdentifier);
      }
      v6 += v5;
      --v3;
    }
    while (v3);
  }
  v13 = *(_QWORD *)(v0 + 1168);
  v14 = *(_QWORD *)(v0 + 1136);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(v0 + 1176) = _swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v15)
  {
    v16 = *(_QWORD *)(v0 + 1168);
    v17 = *(_QWORD *)(v0 + 1000);
    v18 = *(_QWORD *)(v17 + 72);
    v91 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v19 = *(_QWORD *)(v0 + 1136) + v91;
    v93 = v16;
    do
    {
      sub_1004B8460(v19, *(_QWORD *)(v0 + 1064), type metadata accessor for CRLBoardIdentifier);
      if (*(_QWORD *)(v16 + 16)
        && (v20 = *(_QWORD *)(v0 + 1168),
            v21 = *(_QWORD *)(v0 + 1064),
            swift_bridgeObjectRetain(v20),
            sub_100843264(v21),
            LOBYTE(v21) = v22,
            swift_bridgeObjectRelease(v20),
            (v21 & 1) != 0))
      {
        sub_1004B84E0(*(_QWORD *)(v0 + 1064), *(_QWORD *)(v0 + 1056), type metadata accessor for CRLBoardIdentifier);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_100600A18(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v24 = _swiftEmptyArrayStorage[2];
        v23 = _swiftEmptyArrayStorage[3];
        if (v24 >= v23 >> 1)
          sub_100600A18(v23 > 1, v24 + 1, 1);
        v25 = *(_QWORD *)(v0 + 1056);
        _swiftEmptyArrayStorage[2] = v24 + 1;
        sub_1004B84E0(v25, (uint64_t)_swiftEmptyArrayStorage + v91 + v24 * v18, type metadata accessor for CRLBoardIdentifier);
        v16 = v93;
      }
      else
      {
        sub_1004B84A4(*(_QWORD *)(v0 + 1064), type metadata accessor for CRLBoardIdentifier);
      }
      v19 += v18;
      --v15;
    }
    while (v15);
  }
  v26 = *(_QWORD *)(v0 + 1168);
  v27 = *(_QWORD *)(v0 + 1136);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(v0 + 1184) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 1192) = sub_100CE72A4(v26, v27);
  swift_bridgeObjectRelease(v27);
  v28 = _swiftEmptyArrayStorage[2];
  *(_QWORD *)(v0 + 1200) = v28;
  if (v28)
  {
    v29 = 0;
    v30 = *(_QWORD *)(v0 + 1000);
    *(_QWORD *)(v0 + 1208) = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata;
    v31 = *(_DWORD *)(v30 + 80);
    *(_DWORD *)(v0 + 1408) = v31;
    v32 = *(_QWORD *)(v30 + 72);
    *(_QWORD *)(v0 + 1216) = v32;
    while (1)
    {
      *(_QWORD *)(v0 + 1232) = v29;
      *(_QWORD *)(v0 + 1224) = 0;
      v33 = *(_QWORD *)(v0 + 1144);
      sub_1004B8460(*(_QWORD *)(v0 + 1176) + ((v31 + 32) & ~(unint64_t)v31) + v32 * v29, *(_QWORD *)(v0 + 1048), type metadata accessor for CRLBoardIdentifier);
      if (*(_QWORD *)(v33 + 16))
      {
        v34 = sub_100843264(*(_QWORD *)(v0 + 1048));
        if ((v35 & 1) != 0)
        {
          v36 = (uint64_t *)(*(_QWORD *)(v0 + 840) + *(_QWORD *)(v0 + 1208));
          v37 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1144) + 56) + 16 * v34);
          *(_QWORD *)(v0 + 1240) = *v37;
          v38 = v37[1];
          *(_QWORD *)(v0 + 1248) = v38;
          swift_beginAccess(v36, v0 + 600, 32, 0);
          v39 = *v36;
          v40 = *(_QWORD *)(v39 + 16);
          swift_bridgeObjectRetain(v38);
          if (v40)
          {
            v41 = sub_100843264(*(_QWORD *)(v0 + 1048));
            if ((v42 & 1) != 0)
            {
              v79 = *(_QWORD *)(v0 + 1152);
              v80 = *(_QWORD *)(v0 + 952);
              v81 = *(_QWORD *)(v0 + 944);
              v82 = *(_QWORD *)(v0 + 840);
              sub_1004B8460(*(_QWORD *)(v39 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 920) + 72) * v41, v81, type metadata accessor for CRLBoardViewModelMetadata);
              sub_1004B84E0(v81, v80, type metadata accessor for CRLBoardViewModelMetadata);
              result = swift_endAccess(v0 + 600);
              v72 = *(_QWORD *)(v82 + v79);
              *(_QWORD *)(v0 + 1256) = v72;
              if (v72)
              {
                swift_retain(v72);
                v73 = sub_100CE850C;
                return swift_task_switch(v73, v72, 0);
              }
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
              return result;
            }
          }
          swift_endAccess(v0 + 600);
          swift_bridgeObjectRelease(v38);
        }
      }
      v43 = *(_QWORD *)(v0 + 1200);
      v44 = *(_QWORD *)(v0 + 1232) + 1;
      sub_1004B84A4(*(_QWORD *)(v0 + 1048), type metadata accessor for CRLBoardIdentifier);
      if (v44 == v43)
        break;
      v29 = *(_QWORD *)(v0 + 1232) + 1;
      v32 = *(_QWORD *)(v0 + 1216);
      LOBYTE(v31) = *(_BYTE *)(v0 + 1408);
    }
    v45 = *(_QWORD **)(v0 + 1176);
  }
  else
  {
    v45 = _swiftEmptyArrayStorage;
  }
  swift_release(v45);
  v46 = *(_QWORD *)(v0 + 1184);
  v47 = *(_QWORD *)(v46 + 16);
  *(_QWORD *)(v0 + 1272) = v47;
  if (!v47)
  {
LABEL_44:
    v64 = *(_QWORD *)(v0 + 1144);
    swift_release(v46);
    swift_bridgeObjectRelease(v64);
    v65 = *(_QWORD *)(v0 + 1192);
    v66 = *(_QWORD *)(v65 + 16);
    *(_QWORD *)(v0 + 1336) = v66;
    if (v66)
    {
      v67 = *(_QWORD *)(v0 + 1000);
      v68 = *(_DWORD *)(v67 + 80);
      *(_DWORD *)(v0 + 1416) = v68;
      *(_QWORD *)(v0 + 1344) = *(_QWORD *)(v67 + 72);
      *(_QWORD *)(v0 + 1352) = 0;
      v69 = *(_QWORD *)(v0 + 1152);
      v70 = *(_QWORD *)(v0 + 840);
      result = sub_1004B8460(v65 + ((v68 + 32) & ~(unint64_t)v68), *(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
      v72 = *(_QWORD *)(v70 + v69);
      *(_QWORD *)(v0 + 1360) = v72;
      if (v72)
      {
        swift_retain(v72);
        v73 = sub_100CE9C14;
        return swift_task_switch(v73, v72, 0);
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease(v65);
      if (qword_1013DD838 != -1)
        swift_once(&qword_1013DD838, sub_100A04F30);
      v74 = *(_QWORD *)(v0 + 1152);
      v75 = *(_QWORD *)(v0 + 840);
      swift_beginAccess(&static OS_os_log.appIntents, v0 + 480, 0, 0);
      v76 = (void *)static OS_os_log.appIntents;
      *(_QWORD *)(v0 + 1376) = static OS_os_log.appIntents;
      v77 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      result = swift_initStackObject(v77, v0 + 352);
      *(_QWORD *)(v0 + 1384) = result;
      *(_OWORD *)(result + 16) = xmmword_100EF5E40;
      v72 = *(_QWORD *)(v75 + v74);
      *(_QWORD *)(v0 + 1392) = v72;
      if (v72)
      {
        v78 = v76;
        swift_retain(v72);
        v73 = sub_100CEA5DC;
        return swift_task_switch(v73, v72, 0);
      }
    }
    __break(1u);
    goto LABEL_58;
  }
  v48 = 0;
  v49 = *(_QWORD *)(v0 + 1000);
  *(_QWORD *)(v0 + 1280) = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata;
  v50 = *(_DWORD *)(v49 + 80);
  *(_DWORD *)(v0 + 1412) = v50;
  v51 = *(_QWORD *)(v49 + 72);
  *(_QWORD *)(v0 + 1288) = v51;
  while (1)
  {
    *(_QWORD *)(v0 + 1296) = v48;
    v52 = *(_QWORD *)(v0 + 1144);
    sub_1004B8460(v46 + ((v50 + 32) & ~(unint64_t)v50) + v51 * v48, *(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (*(_QWORD *)(v52 + 16))
    {
      v53 = sub_100843264(*(_QWORD *)(v0 + 1040));
      if ((v54 & 1) != 0)
        break;
    }
LABEL_41:
    v62 = *(_QWORD *)(v0 + 1272);
    v63 = *(_QWORD *)(v0 + 1296) + 1;
    sub_1004B84A4(*(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (v63 == v62)
    {
      v46 = *(_QWORD *)(v0 + 1184);
      goto LABEL_44;
    }
    v48 = *(_QWORD *)(v0 + 1296) + 1;
    v51 = *(_QWORD *)(v0 + 1288);
    LOBYTE(v50) = *(_BYTE *)(v0 + 1412);
    v46 = *(_QWORD *)(v0 + 1184);
  }
  v55 = (uint64_t *)(*(_QWORD *)(v0 + 840) + *(_QWORD *)(v0 + 1280));
  v56 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1144) + 56) + 16 * v53);
  *(_QWORD *)(v0 + 1304) = *v56;
  v57 = v56[1];
  *(_QWORD *)(v0 + 1312) = v57;
  swift_beginAccess(v55, v0 + 456, 32, 0);
  v58 = *v55;
  v59 = *(_QWORD *)(v58 + 16);
  swift_bridgeObjectRetain(v57);
  if (!v59 || (v60 = sub_100843264(*(_QWORD *)(v0 + 1040)), (v61 & 1) == 0))
  {
    swift_endAccess(v0 + 456);
    swift_bridgeObjectRelease(v57);
    goto LABEL_41;
  }
  v83 = *(_QWORD *)(v0 + 1152);
  v84 = *(_QWORD *)(v0 + 936);
  v85 = *(_QWORD *)(v0 + 928);
  v86 = *(_QWORD *)(v0 + 840);
  sub_1004B8460(*(_QWORD *)(v58 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 920) + 72) * v60, v85, type metadata accessor for CRLBoardViewModelMetadata);
  sub_1004B84E0(v85, v84, type metadata accessor for CRLBoardViewModelMetadata);
  result = swift_endAccess(v0 + 456);
  v72 = *(_QWORD *)(v86 + v83);
  *(_QWORD *)(v0 + 1320) = v72;
  if (!v72)
    goto LABEL_59;
  v87 = *(_QWORD *)(v0 + 920);
  v88 = *(_QWORD *)(v0 + 912);
  v89 = *(_QWORD *)(v0 + 904);
  sub_1004B8460(*(_QWORD *)(v0 + 936), v89, type metadata accessor for CRLBoardViewModelMetadata);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v87 + 56))(v89, 0, 1, v88);
  swift_retain(v72);
  v73 = sub_100CE912C;
  return swift_task_switch(v73, v72, 0);
}

uint64_t sub_100CE850C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = v0[153];
  sub_100D67334(v0[131], v0[155], v0[156], v0[119]);
  v0[158] = v1;
  v2 = v0[157];
  swift_bridgeObjectRelease(v0[156]);
  swift_release(v2);
  if (v1)
    v3 = sub_100CE8A64;
  else
    v3 = sub_100CE858C;
  return swift_task_switch(v3, v0[140], v0[141]);
}

uint64_t sub_100CE858C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = *(_QWORD *)(v0 + 1264);
  sub_1004B84A4(*(_QWORD *)(v0 + 952), type metadata accessor for CRLBoardViewModelMetadata);
  v2 = *(_QWORD *)(v0 + 1200);
  v3 = *(_QWORD *)(v0 + 1232) + 1;
  sub_1004B84A4(*(_QWORD *)(v0 + 1048), type metadata accessor for CRLBoardIdentifier);
  if (v3 != v2)
  {
    do
    {
      v24 = *(_QWORD *)(v0 + 1232) + 1;
      *(_QWORD *)(v0 + 1232) = v24;
      *(_QWORD *)(v0 + 1224) = v1;
      v25 = *(_QWORD *)(v0 + 1144);
      sub_1004B8460(*(_QWORD *)(v0 + 1176)+ ((*(unsigned __int8 *)(v0 + 1408) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1408))+ *(_QWORD *)(v0 + 1216) * v24, *(_QWORD *)(v0 + 1048), type metadata accessor for CRLBoardIdentifier);
      if (*(_QWORD *)(v25 + 16))
      {
        v26 = sub_100843264(*(_QWORD *)(v0 + 1048));
        if ((v27 & 1) != 0)
        {
          v28 = (uint64_t *)(*(_QWORD *)(v0 + 840) + *(_QWORD *)(v0 + 1208));
          v29 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1144) + 56) + 16 * v26);
          *(_QWORD *)(v0 + 1240) = *v29;
          v30 = v29[1];
          *(_QWORD *)(v0 + 1248) = v30;
          swift_beginAccess(v28, v0 + 600, 32, 0);
          v31 = *v28;
          v32 = *(_QWORD *)(v31 + 16);
          swift_bridgeObjectRetain(v30);
          if (v32)
          {
            v33 = sub_100843264(*(_QWORD *)(v0 + 1048));
            if ((v34 & 1) != 0)
            {
              v35 = *(_QWORD *)(v0 + 1152);
              v36 = *(_QWORD *)(v0 + 952);
              v37 = *(_QWORD *)(v0 + 944);
              v38 = *(_QWORD *)(v0 + 840);
              sub_1004B8460(*(_QWORD *)(v31 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 920) + 72) * v33, v37, type metadata accessor for CRLBoardViewModelMetadata);
              sub_1004B84E0(v37, v36, type metadata accessor for CRLBoardViewModelMetadata);
              result = swift_endAccess(v0 + 600);
              v40 = *(_QWORD *)(v38 + v35);
              *(_QWORD *)(v0 + 1256) = v40;
              if (v40)
              {
                swift_retain(v40);
                v41 = sub_100CE850C;
                return swift_task_switch(v41, v40, 0);
              }
              goto LABEL_34;
            }
          }
          swift_endAccess(v0 + 600);
          swift_bridgeObjectRelease(v30);
        }
      }
      v22 = *(_QWORD *)(v0 + 1200);
      v23 = *(_QWORD *)(v0 + 1232) + 1;
      sub_1004B84A4(*(_QWORD *)(v0 + 1048), type metadata accessor for CRLBoardIdentifier);
    }
    while (v23 != v22);
  }
  swift_release(*(_QWORD *)(v0 + 1176));
  v4 = *(_QWORD *)(v0 + 1184);
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 + 1272) = v5;
  if (!v5)
  {
LABEL_21:
    v42 = *(_QWORD *)(v0 + 1144);
    swift_release(v4);
    swift_bridgeObjectRelease(v42);
    v43 = *(_QWORD *)(v0 + 1192);
    v44 = *(_QWORD *)(v43 + 16);
    *(_QWORD *)(v0 + 1336) = v44;
    if (v44)
    {
      v45 = *(_QWORD *)(v0 + 1000);
      v46 = *(_DWORD *)(v45 + 80);
      *(_DWORD *)(v0 + 1416) = v46;
      *(_QWORD *)(v0 + 1344) = *(_QWORD *)(v45 + 72);
      *(_QWORD *)(v0 + 1352) = 0;
      v47 = *(_QWORD *)(v0 + 1152);
      v48 = *(_QWORD *)(v0 + 840);
      result = sub_1004B8460(v43 + ((v46 + 32) & ~(unint64_t)v46), *(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
      v40 = *(_QWORD *)(v48 + v47);
      *(_QWORD *)(v0 + 1360) = v40;
      if (v40)
      {
        swift_retain(v40);
        v41 = sub_100CE9C14;
        return swift_task_switch(v41, v40, 0);
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease(v43);
      if (qword_1013DD838 != -1)
        swift_once(&qword_1013DD838, sub_100A04F30);
      v49 = *(_QWORD *)(v0 + 1152);
      v50 = *(_QWORD *)(v0 + 840);
      swift_beginAccess(&static OS_os_log.appIntents, v0 + 480, 0, 0);
      v51 = (void *)static OS_os_log.appIntents;
      *(_QWORD *)(v0 + 1376) = static OS_os_log.appIntents;
      v52 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      result = swift_initStackObject(v52, v0 + 352);
      *(_QWORD *)(v0 + 1384) = result;
      *(_OWORD *)(result + 16) = xmmword_100EF5E40;
      v40 = *(_QWORD *)(v50 + v49);
      *(_QWORD *)(v0 + 1392) = v40;
      if (v40)
      {
        v53 = v51;
        swift_retain(v40);
        v41 = sub_100CEA5DC;
        return swift_task_switch(v41, v40, 0);
      }
    }
    __break(1u);
    goto LABEL_33;
  }
  v6 = 0;
  v7 = *(_QWORD *)(v0 + 1000);
  *(_QWORD *)(v0 + 1280) = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata;
  v8 = *(_DWORD *)(v7 + 80);
  *(_DWORD *)(v0 + 1412) = v8;
  v9 = *(_QWORD *)(v7 + 72);
  *(_QWORD *)(v0 + 1288) = v9;
  while (1)
  {
    *(_QWORD *)(v0 + 1296) = v6;
    v10 = *(_QWORD *)(v0 + 1144);
    sub_1004B8460(v4 + ((v8 + 32) & ~(unint64_t)v8) + v9 * v6, *(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (*(_QWORD *)(v10 + 16))
    {
      v11 = sub_100843264(*(_QWORD *)(v0 + 1040));
      if ((v12 & 1) != 0)
        break;
    }
LABEL_9:
    v20 = *(_QWORD *)(v0 + 1272);
    v21 = *(_QWORD *)(v0 + 1296) + 1;
    sub_1004B84A4(*(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (v21 == v20)
    {
      v4 = *(_QWORD *)(v0 + 1184);
      goto LABEL_21;
    }
    v6 = *(_QWORD *)(v0 + 1296) + 1;
    v9 = *(_QWORD *)(v0 + 1288);
    LOBYTE(v8) = *(_BYTE *)(v0 + 1412);
    v4 = *(_QWORD *)(v0 + 1184);
  }
  v13 = (uint64_t *)(*(_QWORD *)(v0 + 840) + *(_QWORD *)(v0 + 1280));
  v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1144) + 56) + 16 * v11);
  *(_QWORD *)(v0 + 1304) = *v14;
  v15 = v14[1];
  *(_QWORD *)(v0 + 1312) = v15;
  swift_beginAccess(v13, v0 + 456, 32, 0);
  v16 = *v13;
  v17 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRetain(v15);
  if (!v17 || (v18 = sub_100843264(*(_QWORD *)(v0 + 1040)), (v19 & 1) == 0))
  {
    swift_endAccess(v0 + 456);
    swift_bridgeObjectRelease(v15);
    goto LABEL_9;
  }
  v54 = *(_QWORD *)(v0 + 1152);
  v55 = *(_QWORD *)(v0 + 936);
  v56 = *(_QWORD *)(v0 + 928);
  v57 = *(_QWORD *)(v0 + 840);
  sub_1004B8460(*(_QWORD *)(v16 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 920) + 72) * v18, v56, type metadata accessor for CRLBoardViewModelMetadata);
  sub_1004B84E0(v56, v55, type metadata accessor for CRLBoardViewModelMetadata);
  result = swift_endAccess(v0 + 456);
  v40 = *(_QWORD *)(v57 + v54);
  *(_QWORD *)(v0 + 1320) = v40;
  if (!v40)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  v58 = *(_QWORD *)(v0 + 920);
  v59 = *(_QWORD *)(v0 + 912);
  v60 = *(_QWORD *)(v0 + 904);
  sub_1004B8460(*(_QWORD *)(v0 + 936), v60, type metadata accessor for CRLBoardViewModelMetadata);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v60, 0, 1, v59);
  swift_retain(v40);
  v41 = sub_100CE912C;
  return swift_task_switch(v41, v40, 0);
}

uint64_t sub_100CE8A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t (*v64)();
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  if (qword_1013DD838 != -1)
    swift_once(&qword_1013DD838, sub_100A04F30);
  v1 = 0xD000000000000012;
  v2 = *(_QWORD *)(v0 + 1048);
  swift_beginAccess(&static OS_os_log.appIntents, v0 + 576, 0, 0);
  v3 = (void *)static OS_os_log.appIntents;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v4, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v6 = (uint64_t *)(v2 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v8 = *v6;
  v7 = (void *)v6[1];
  v9 = (void *)0x8000000100FB4970;
  if (*v6)
    v10 = 0;
  else
    v10 = v7 == (void *)0xE000000000000000;
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, 0, 0xE000000000000000, 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(v7);
    v1 = v8;
    v9 = v7;
  }
  v11 = *(_QWORD *)(v0 + 1264);
  v12 = v3;
  *(_QWORD *)(v0 + 744) = UUID.uuidString.getter(v12);
  *(_QWORD *)(v0 + 752) = v13;
  v14._countAndFlagsBits = 15418;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v1;
  v15._object = v9;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v9);
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17 = *(_QWORD *)(v0 + 744);
  v18 = *(_QWORD *)(v0 + 752);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v19 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v19;
  *(_QWORD *)(inited + 32) = v17;
  *(_QWORD *)(inited + 40) = v18;
  *(_QWORD *)(v0 + 824) = v11;
  swift_errorRetain(v11);
  v20 = sub_1004B804C(&qword_1013E0210);
  v21 = String.init<A>(describing:)(v0 + 824, v20);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v19;
  *(_QWORD *)(inited + 72) = v21;
  *(_QWORD *)(inited + 80) = v22;
  v23 = static os_log_type_t.error.getter(v21);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v23, "Could not create new entity for board identifier %@: %@", 55, 2, inited);
  swift_setDeallocating(inited);
  v24 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v24);

  swift_errorRelease(v11);
  sub_1004B84A4(*(_QWORD *)(v0 + 952), type metadata accessor for CRLBoardViewModelMetadata);
  v25 = *(_QWORD *)(v0 + 1200);
  v26 = *(_QWORD *)(v0 + 1232) + 1;
  sub_1004B84A4(*(_QWORD *)(v0 + 1048), type metadata accessor for CRLBoardIdentifier);
  if (v26 != v25)
  {
    do
    {
      v47 = *(_QWORD *)(v0 + 1232) + 1;
      *(_QWORD *)(v0 + 1232) = v47;
      *(_QWORD *)(v0 + 1224) = 0;
      v48 = *(_QWORD *)(v0 + 1144);
      sub_1004B8460(*(_QWORD *)(v0 + 1176)+ ((*(unsigned __int8 *)(v0 + 1408) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1408))+ *(_QWORD *)(v0 + 1216) * v47, *(_QWORD *)(v0 + 1048), type metadata accessor for CRLBoardIdentifier);
      if (*(_QWORD *)(v48 + 16))
      {
        v49 = sub_100843264(*(_QWORD *)(v0 + 1048));
        if ((v50 & 1) != 0)
        {
          v51 = (uint64_t *)(*(_QWORD *)(v0 + 840) + *(_QWORD *)(v0 + 1208));
          v52 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1144) + 56) + 16 * v49);
          *(_QWORD *)(v0 + 1240) = *v52;
          v53 = v52[1];
          *(_QWORD *)(v0 + 1248) = v53;
          swift_beginAccess(v51, v0 + 600, 32, 0);
          v54 = *v51;
          v55 = *(_QWORD *)(v54 + 16);
          swift_bridgeObjectRetain(v53);
          if (v55)
          {
            v56 = sub_100843264(*(_QWORD *)(v0 + 1048));
            if ((v57 & 1) != 0)
            {
              v58 = *(_QWORD *)(v0 + 1152);
              v59 = *(_QWORD *)(v0 + 952);
              v60 = *(_QWORD *)(v0 + 944);
              v61 = *(_QWORD *)(v0 + 840);
              sub_1004B8460(*(_QWORD *)(v54 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 920) + 72) * v56, v60, type metadata accessor for CRLBoardViewModelMetadata);
              sub_1004B84E0(v60, v59, type metadata accessor for CRLBoardViewModelMetadata);
              result = swift_endAccess(v0 + 600);
              v63 = *(_QWORD *)(v61 + v58);
              *(_QWORD *)(v0 + 1256) = v63;
              if (v63)
              {
                swift_retain(v63);
                v64 = sub_100CE850C;
                return swift_task_switch(v64, v63, 0);
              }
              goto LABEL_42;
            }
          }
          swift_endAccess(v0 + 600);
          swift_bridgeObjectRelease(v53);
        }
      }
      v45 = *(_QWORD *)(v0 + 1200);
      v46 = *(_QWORD *)(v0 + 1232) + 1;
      sub_1004B84A4(*(_QWORD *)(v0 + 1048), type metadata accessor for CRLBoardIdentifier);
    }
    while (v46 != v45);
  }
  swift_release(*(_QWORD *)(v0 + 1176));
  v27 = *(_QWORD *)(v0 + 1184);
  v28 = *(_QWORD *)(v27 + 16);
  *(_QWORD *)(v0 + 1272) = v28;
  if (!v28)
  {
LABEL_29:
    v65 = *(_QWORD *)(v0 + 1144);
    swift_release(v27);
    swift_bridgeObjectRelease(v65);
    v66 = *(_QWORD *)(v0 + 1192);
    v67 = *(_QWORD *)(v66 + 16);
    *(_QWORD *)(v0 + 1336) = v67;
    if (v67)
    {
      v68 = *(_QWORD *)(v0 + 1000);
      v69 = *(_DWORD *)(v68 + 80);
      *(_DWORD *)(v0 + 1416) = v69;
      *(_QWORD *)(v0 + 1344) = *(_QWORD *)(v68 + 72);
      *(_QWORD *)(v0 + 1352) = 0;
      v70 = *(_QWORD *)(v0 + 1152);
      v71 = *(_QWORD *)(v0 + 840);
      result = sub_1004B8460(v66 + ((v69 + 32) & ~(unint64_t)v69), *(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
      v63 = *(_QWORD *)(v71 + v70);
      *(_QWORD *)(v0 + 1360) = v63;
      if (v63)
      {
        swift_retain(v63);
        v64 = sub_100CE9C14;
        return swift_task_switch(v64, v63, 0);
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease(v66);
      if (qword_1013DD838 != -1)
        swift_once(&qword_1013DD838, sub_100A04F30);
      v72 = *(_QWORD *)(v0 + 1152);
      v73 = *(_QWORD *)(v0 + 840);
      swift_beginAccess(&static OS_os_log.appIntents, v0 + 480, 0, 0);
      v74 = (void *)static OS_os_log.appIntents;
      *(_QWORD *)(v0 + 1376) = static OS_os_log.appIntents;
      v75 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      result = swift_initStackObject(v75, v0 + 352);
      *(_QWORD *)(v0 + 1384) = result;
      *(_OWORD *)(result + 16) = xmmword_100EF5E40;
      v63 = *(_QWORD *)(v73 + v72);
      *(_QWORD *)(v0 + 1392) = v63;
      if (v63)
      {
        v76 = v74;
        swift_retain(v63);
        v64 = sub_100CEA5DC;
        return swift_task_switch(v64, v63, 0);
      }
    }
    __break(1u);
    goto LABEL_41;
  }
  v29 = 0;
  v30 = *(_QWORD *)(v0 + 1000);
  *(_QWORD *)(v0 + 1280) = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata;
  v31 = *(_DWORD *)(v30 + 80);
  *(_DWORD *)(v0 + 1412) = v31;
  v32 = *(_QWORD *)(v30 + 72);
  *(_QWORD *)(v0 + 1288) = v32;
  while (1)
  {
    *(_QWORD *)(v0 + 1296) = v29;
    v33 = *(_QWORD *)(v0 + 1144);
    sub_1004B8460(v27 + ((v31 + 32) & ~(unint64_t)v31) + v32 * v29, *(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (*(_QWORD *)(v33 + 16))
    {
      v34 = sub_100843264(*(_QWORD *)(v0 + 1040));
      if ((v35 & 1) != 0)
        break;
    }
LABEL_17:
    v43 = *(_QWORD *)(v0 + 1272);
    v44 = *(_QWORD *)(v0 + 1296) + 1;
    sub_1004B84A4(*(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (v44 == v43)
    {
      v27 = *(_QWORD *)(v0 + 1184);
      goto LABEL_29;
    }
    v29 = *(_QWORD *)(v0 + 1296) + 1;
    v32 = *(_QWORD *)(v0 + 1288);
    LOBYTE(v31) = *(_BYTE *)(v0 + 1412);
    v27 = *(_QWORD *)(v0 + 1184);
  }
  v36 = (uint64_t *)(*(_QWORD *)(v0 + 840) + *(_QWORD *)(v0 + 1280));
  v37 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1144) + 56) + 16 * v34);
  *(_QWORD *)(v0 + 1304) = *v37;
  v38 = v37[1];
  *(_QWORD *)(v0 + 1312) = v38;
  swift_beginAccess(v36, v0 + 456, 32, 0);
  v39 = *v36;
  v40 = *(_QWORD *)(v39 + 16);
  swift_bridgeObjectRetain(v38);
  if (!v40 || (v41 = sub_100843264(*(_QWORD *)(v0 + 1040)), (v42 & 1) == 0))
  {
    swift_endAccess(v0 + 456);
    swift_bridgeObjectRelease(v38);
    goto LABEL_17;
  }
  v77 = *(_QWORD *)(v0 + 1152);
  v78 = *(_QWORD *)(v0 + 936);
  v79 = *(_QWORD *)(v0 + 928);
  v80 = *(_QWORD *)(v0 + 840);
  sub_1004B8460(*(_QWORD *)(v39 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 920) + 72) * v41, v79, type metadata accessor for CRLBoardViewModelMetadata);
  sub_1004B84E0(v79, v78, type metadata accessor for CRLBoardViewModelMetadata);
  result = swift_endAccess(v0 + 456);
  v63 = *(_QWORD *)(v80 + v77);
  *(_QWORD *)(v0 + 1320) = v63;
  if (!v63)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    return result;
  }
  v81 = *(_QWORD *)(v0 + 920);
  v82 = *(_QWORD *)(v0 + 912);
  v83 = *(_QWORD *)(v0 + 904);
  sub_1004B8460(*(_QWORD *)(v0 + 936), v83, type metadata accessor for CRLBoardViewModelMetadata);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v83, 0, 1, v82);
  swift_retain(v63);
  v64 = sub_100CE912C;
  return swift_task_switch(v64, v63, 0);
}

uint64_t sub_100CE912C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0[165] + 120;
  swift_beginAccess(v1, v0 + 81, 32, 0);
  v2 = *(_QWORD *)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16) && (v3 = sub_100843264(v0[130]), (v4 & 1) != 0))
  {
    sub_1004B8460(*(_QWORD *)(v2 + 56) + *(_QWORD *)(v0[107] + 72) * v3, v0[112], type metadata accessor for CRLBoardEntity);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = v0[112];
  v7 = v0[107];
  v8 = v0[106];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, v5, 1, v8);
  swift_endAccess(v0 + 81);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v10 = v9(v6, 1, v8);
  sub_1004CB800(v6, &qword_1013FE140);
  if (v10 == 1)
  {
    v11 = v0[165];
    v12 = v0[164];
    v13 = v0[130];
    v14 = v0[113];
    v15 = type metadata accessor for CRLBoardEntityStore.BoardEntityStoreError(0);
    v16 = sub_1004B7878((unint64_t *)&qword_10140C6A8, type metadata accessor for CRLBoardEntityStore.BoardEntityStoreError, (uint64_t)&unk_100F36E08);
    v17 = swift_allocError(v15, v16, 0, 0);
    v19 = v18;
    v0[166] = v17;
    sub_1004B8460(v13, v18, type metadata accessor for CRLBoardIdentifier);
    swift_storeEnumTagMultiPayload(v19, v15, 0);
    swift_willThrow(v20);
    sub_1004CB800(v14, &qword_1013E4690);
    swift_bridgeObjectRelease(v12);
    swift_release(v11);
    v21 = v0[141];
    v22 = v0[140];
    v23 = sub_100CE93B8;
  }
  else
  {
    v24 = v0[129];
    v25 = v0[106];
    sub_1004B8460(v0[130], v24, type metadata accessor for CRLBoardIdentifier);
    swift_beginAccess(v1, v0 + 90, 33, 0);
    v26 = sub_100CF9C00(v0 + 53, v24);
    if (!v9(v27, 1, v25))
      sub_1006E7644(v0[163], v0[164], v0[113], 0, 0xF000000000000000);
    ((void (*)(_QWORD *, _QWORD))v26)(v0 + 53, 0);
    v28 = v0[165];
    v29 = v0[164];
    v30 = v0[129];
    v31 = v0[113];
    swift_endAccess(v0 + 90);
    sub_1004B84A4(v30, type metadata accessor for CRLBoardIdentifier);
    sub_1004CB800(v31, &qword_1013E4690);
    swift_bridgeObjectRelease(v29);
    swift_release(v28);
    v21 = v0[141];
    v22 = v0[140];
    v23 = sub_100CE98E0;
  }
  return swift_task_switch(v23, v22, v21);
}

uint64_t sub_100CE93B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  id v61;

  if (qword_1013DD838 != -1)
    swift_once(&qword_1013DD838, sub_100A04F30);
  v1 = 0xD000000000000012;
  v2 = *(_QWORD *)(v0 + 1040);
  swift_beginAccess(&static OS_os_log.appIntents, v0 + 672, 0, 0);
  v3 = (void *)static OS_os_log.appIntents;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v4, v0 + 128);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v6 = (uint64_t *)(v2 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v8 = *v6;
  v7 = (void *)v6[1];
  v9 = (void *)0x8000000100FB4970;
  if (*v6)
    v10 = 0;
  else
    v10 = v7 == (void *)0xE000000000000000;
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, 0, 0xE000000000000000, 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(v7);
    v1 = v8;
    v9 = v7;
  }
  v11 = *(_QWORD *)(v0 + 1328);
  v12 = v3;
  *(_QWORD *)(v0 + 760) = UUID.uuidString.getter(v12);
  *(_QWORD *)(v0 + 768) = v13;
  v14._countAndFlagsBits = 15418;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v1;
  v15._object = v9;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v9);
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17 = *(_QWORD *)(v0 + 760);
  v18 = *(_QWORD *)(v0 + 768);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v19 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v19;
  *(_QWORD *)(inited + 32) = v17;
  *(_QWORD *)(inited + 40) = v18;
  *(_QWORD *)(v0 + 816) = v11;
  swift_errorRetain(v11);
  v20 = sub_1004B804C(&qword_1013E0210);
  v21 = String.init<A>(describing:)(v0 + 816, v20);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v19;
  *(_QWORD *)(inited + 72) = v21;
  *(_QWORD *)(inited + 80) = v22;
  v23 = static os_log_type_t.error.getter(v21);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v23, "Could not update entity for board identifier %@: %@", 51, 2, inited);
  swift_setDeallocating(inited);
  v24 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v24);

  swift_errorRelease(v11);
  sub_1004B84A4(*(_QWORD *)(v0 + 936), type metadata accessor for CRLBoardViewModelMetadata);
  v25 = *(_QWORD *)(v0 + 1272);
  v26 = *(_QWORD *)(v0 + 1296) + 1;
  sub_1004B84A4(*(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
  if (v26 == v25)
  {
LABEL_10:
    v27 = *(_QWORD *)(v0 + 1144);
    swift_release(*(_QWORD *)(v0 + 1184));
    swift_bridgeObjectRelease(v27);
    v28 = *(_QWORD *)(v0 + 1192);
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)(v0 + 1336) = v29;
    if (v29)
    {
      v30 = *(_QWORD *)(v0 + 1000);
      v31 = *(_DWORD *)(v30 + 80);
      *(_DWORD *)(v0 + 1416) = v31;
      *(_QWORD *)(v0 + 1344) = *(_QWORD *)(v30 + 72);
      *(_QWORD *)(v0 + 1352) = 0;
      v32 = *(_QWORD *)(v0 + 1152);
      v33 = *(_QWORD *)(v0 + 840);
      result = sub_1004B8460(v28 + ((v31 + 32) & ~(unint64_t)v31), *(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
      v35 = *(_QWORD *)(v33 + v32);
      *(_QWORD *)(v0 + 1360) = v35;
      if (v35)
      {
        swift_retain(v35);
        v36 = sub_100CE9C14;
        return swift_task_switch(v36, v35, 0);
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease(v28);
      if (qword_1013DD838 != -1)
        swift_once(&qword_1013DD838, sub_100A04F30);
      v57 = *(_QWORD *)(v0 + 1152);
      v58 = *(_QWORD *)(v0 + 840);
      swift_beginAccess(&static OS_os_log.appIntents, v0 + 480, 0, 0);
      v59 = (void *)static OS_os_log.appIntents;
      *(_QWORD *)(v0 + 1376) = static OS_os_log.appIntents;
      v60 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      result = swift_initStackObject(v60, v0 + 352);
      *(_QWORD *)(v0 + 1384) = result;
      *(_OWORD *)(result + 16) = xmmword_100EF5E40;
      v35 = *(_QWORD *)(v58 + v57);
      *(_QWORD *)(v0 + 1392) = v35;
      if (v35)
      {
        v61 = v59;
        swift_retain(v35);
        v36 = sub_100CEA5DC;
        return swift_task_switch(v36, v35, 0);
      }
    }
    __break(1u);
    goto LABEL_29;
  }
  while (1)
  {
    v39 = *(_QWORD *)(v0 + 1296) + 1;
    *(_QWORD *)(v0 + 1296) = v39;
    v40 = *(_QWORD *)(v0 + 1144);
    sub_1004B8460(*(_QWORD *)(v0 + 1184)+ ((*(unsigned __int8 *)(v0 + 1412) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1412))+ *(_QWORD *)(v0 + 1288) * v39, *(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (!*(_QWORD *)(v40 + 16))
      goto LABEL_15;
    v41 = sub_100843264(*(_QWORD *)(v0 + 1040));
    if ((v42 & 1) == 0)
      goto LABEL_15;
    v43 = (uint64_t *)(*(_QWORD *)(v0 + 840) + *(_QWORD *)(v0 + 1280));
    v44 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1144) + 56) + 16 * v41);
    *(_QWORD *)(v0 + 1304) = *v44;
    v45 = v44[1];
    *(_QWORD *)(v0 + 1312) = v45;
    swift_beginAccess(v43, v0 + 456, 32, 0);
    v46 = *v43;
    v47 = *(_QWORD *)(v46 + 16);
    swift_bridgeObjectRetain(v45);
    if (v47)
    {
      v48 = sub_100843264(*(_QWORD *)(v0 + 1040));
      if ((v49 & 1) != 0)
        break;
    }
    swift_endAccess(v0 + 456);
    swift_bridgeObjectRelease(v45);
LABEL_15:
    v37 = *(_QWORD *)(v0 + 1272);
    v38 = *(_QWORD *)(v0 + 1296) + 1;
    sub_1004B84A4(*(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (v38 == v37)
      goto LABEL_10;
  }
  v50 = *(_QWORD *)(v0 + 1152);
  v51 = *(_QWORD *)(v0 + 936);
  v52 = *(_QWORD *)(v0 + 928);
  v53 = *(_QWORD *)(v0 + 840);
  sub_1004B8460(*(_QWORD *)(v46 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 920) + 72) * v48, v52, type metadata accessor for CRLBoardViewModelMetadata);
  sub_1004B84E0(v52, v51, type metadata accessor for CRLBoardViewModelMetadata);
  result = swift_endAccess(v0 + 456);
  v35 = *(_QWORD *)(v53 + v50);
  *(_QWORD *)(v0 + 1320) = v35;
  if (v35)
  {
    v54 = *(_QWORD *)(v0 + 920);
    v55 = *(_QWORD *)(v0 + 912);
    v56 = *(_QWORD *)(v0 + 904);
    sub_1004B8460(*(_QWORD *)(v0 + 936), v56, type metadata accessor for CRLBoardViewModelMetadata);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v56, 0, 1, v55);
    swift_retain(v35);
    v36 = sub_100CE912C;
    return swift_task_switch(v36, v35, 0);
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100CE98E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;

  sub_1004B84A4(*(_QWORD *)(v0 + 936), type metadata accessor for CRLBoardViewModelMetadata);
  v1 = *(_QWORD *)(v0 + 1272);
  v2 = *(_QWORD *)(v0 + 1296) + 1;
  sub_1004B84A4(*(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
  if (v2 == v1)
  {
LABEL_2:
    v3 = *(_QWORD *)(v0 + 1144);
    swift_release(*(_QWORD *)(v0 + 1184));
    swift_bridgeObjectRelease(v3);
    v4 = *(_QWORD *)(v0 + 1192);
    v5 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v0 + 1336) = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(v0 + 1000);
      v7 = *(_DWORD *)(v6 + 80);
      *(_DWORD *)(v0 + 1416) = v7;
      *(_QWORD *)(v0 + 1344) = *(_QWORD *)(v6 + 72);
      *(_QWORD *)(v0 + 1352) = 0;
      v8 = *(_QWORD *)(v0 + 1152);
      v9 = *(_QWORD *)(v0 + 840);
      result = sub_1004B8460(v4 + ((v7 + 32) & ~(unint64_t)v7), *(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
      v11 = *(_QWORD *)(v9 + v8);
      *(_QWORD *)(v0 + 1360) = v11;
      if (v11)
      {
        swift_retain(v11);
        v12 = sub_100CE9C14;
        return swift_task_switch(v12, v11, 0);
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease(v4);
      if (qword_1013DD838 != -1)
        swift_once(&qword_1013DD838, sub_100A04F30);
      v33 = *(_QWORD *)(v0 + 1152);
      v34 = *(_QWORD *)(v0 + 840);
      swift_beginAccess(&static OS_os_log.appIntents, v0 + 480, 0, 0);
      v35 = (void *)static OS_os_log.appIntents;
      *(_QWORD *)(v0 + 1376) = static OS_os_log.appIntents;
      v36 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      result = swift_initStackObject(v36, v0 + 352);
      *(_QWORD *)(v0 + 1384) = result;
      *(_OWORD *)(result + 16) = xmmword_100EF5E40;
      v11 = *(_QWORD *)(v34 + v33);
      *(_QWORD *)(v0 + 1392) = v11;
      if (v11)
      {
        v37 = v35;
        swift_retain(v11);
        v12 = sub_100CEA5DC;
        return swift_task_switch(v12, v11, 0);
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  while (1)
  {
    v15 = *(_QWORD *)(v0 + 1296) + 1;
    *(_QWORD *)(v0 + 1296) = v15;
    v16 = *(_QWORD *)(v0 + 1144);
    sub_1004B8460(*(_QWORD *)(v0 + 1184)+ ((*(unsigned __int8 *)(v0 + 1412) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1412))+ *(_QWORD *)(v0 + 1288) * v15, *(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (!*(_QWORD *)(v16 + 16))
      goto LABEL_7;
    v17 = sub_100843264(*(_QWORD *)(v0 + 1040));
    if ((v18 & 1) == 0)
      goto LABEL_7;
    v19 = (uint64_t *)(*(_QWORD *)(v0 + 840) + *(_QWORD *)(v0 + 1280));
    v20 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1144) + 56) + 16 * v17);
    *(_QWORD *)(v0 + 1304) = *v20;
    v21 = v20[1];
    *(_QWORD *)(v0 + 1312) = v21;
    swift_beginAccess(v19, v0 + 456, 32, 0);
    v22 = *v19;
    v23 = *(_QWORD *)(v22 + 16);
    swift_bridgeObjectRetain(v21);
    if (v23)
    {
      v24 = sub_100843264(*(_QWORD *)(v0 + 1040));
      if ((v25 & 1) != 0)
        break;
    }
    swift_endAccess(v0 + 456);
    swift_bridgeObjectRelease(v21);
LABEL_7:
    v13 = *(_QWORD *)(v0 + 1272);
    v14 = *(_QWORD *)(v0 + 1296) + 1;
    sub_1004B84A4(*(_QWORD *)(v0 + 1040), type metadata accessor for CRLBoardIdentifier);
    if (v14 == v13)
      goto LABEL_2;
  }
  v26 = *(_QWORD *)(v0 + 1152);
  v27 = *(_QWORD *)(v0 + 936);
  v28 = *(_QWORD *)(v0 + 928);
  v29 = *(_QWORD *)(v0 + 840);
  sub_1004B8460(*(_QWORD *)(v22 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 920) + 72) * v24, v28, type metadata accessor for CRLBoardViewModelMetadata);
  sub_1004B84E0(v28, v27, type metadata accessor for CRLBoardViewModelMetadata);
  result = swift_endAccess(v0 + 456);
  v11 = *(_QWORD *)(v29 + v26);
  *(_QWORD *)(v0 + 1320) = v11;
  if (v11)
  {
    v30 = *(_QWORD *)(v0 + 920);
    v31 = *(_QWORD *)(v0 + 912);
    v32 = *(_QWORD *)(v0 + 904);
    sub_1004B8460(*(_QWORD *)(v0 + 936), v32, type metadata accessor for CRLBoardViewModelMetadata);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v31);
    swift_retain(v11);
    v12 = sub_100CE912C;
    return swift_task_switch(v12, v11, 0);
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_100CE9C14()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  __n128 v34;
  uint64_t *v35;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = (uint64_t *)(v0[170] + 120);
  swift_beginAccess(v1, v0 + 78, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v3 = sub_100843264(v0[128]);
    v4 = v0[111];
    v5 = v0[107];
    v6 = v0[106];
    if ((v7 & 1) != 0)
    {
      sub_1004B8460(*(_QWORD *)(v2 + 56) + *(_QWORD *)(v5 + 72) * v3, v0[111], type metadata accessor for CRLBoardEntity);
      v8 = *(_QWORD *)(v5 + 56);
      v9 = v4;
      v10 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 56);
      v9 = v0[111];
      v10 = 1;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(v9, v10, 1, v6);
  }
  else
  {
    v8 = *(_QWORD *)(v0[107] + 56);
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v8)(v0[111], 1, 1, v0[106]);
  }
  v11 = v0[111];
  v12 = v0[107];
  v13 = v0[106];
  swift_endAccess(v0 + 78);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v15 = v14(v11, 1, v13);
  sub_1004CB800(v11, &qword_1013FE140);
  v16 = v0[128];
  if (v15 == 1)
  {
    v17 = type metadata accessor for CRLBoardEntityStore.BoardEntityStoreError(0);
    v18 = sub_1004B7878((unint64_t *)&qword_10140C6A8, type metadata accessor for CRLBoardEntityStore.BoardEntityStoreError, (uint64_t)&unk_100F36E08);
    v19 = swift_allocError(v17, v18, 0, 0);
    v21 = v20;
    v0[171] = v19;
    sub_1004B8460(v16, v20, type metadata accessor for CRLBoardIdentifier);
    swift_storeEnumTagMultiPayload(v21, v17, 0);
    swift_willThrow(v22);
    v23 = v0[141];
    v24 = v0[140];
    v25 = sub_100CEA238;
    return swift_task_switch(v25, v24, v23);
  }
  v26 = v0[110];
  v27 = v0[106];
  sub_1004B8460(v0[128], v0[127], type metadata accessor for CRLBoardIdentifier);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(v26, 1, 1, v27);
  swift_beginAccess(v1, v0 + 69, 33, 0);
  v28 = v14(v26, 1, v27);
  v29 = v0[127];
  v30 = v0[110];
  if (v28 == 1)
  {
    sub_1004CB800(v30, &qword_1013FE140);
    v31 = *v1;
    swift_bridgeObjectRetain(*v1);
    v29 = sub_100843264(v29);
    v33 = v32;
    v34 = swift_bridgeObjectRelease(v31);
    if ((v33 & 1) == 0)
    {
      v41 = 1;
      goto LABEL_18;
    }
    v35 = v0 + 100;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    v37 = *v1;
    v0[100] = *v1;
    *v1 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_12:
      v38 = v0[109];
      v39 = v0[107];
      sub_1004B84A4(*(_QWORD *)(v37 + 48) + v0[168] * v29, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84E0(*(_QWORD *)(v37 + 56) + *(_QWORD *)(v39 + 72) * v29, v38, type metadata accessor for CRLBoardEntity);
      sub_10051B750(v29, v37);
      v40 = *v1;
      *v1 = v37;
      v34 = swift_bridgeObjectRelease(v40);
      v41 = 0;
LABEL_18:
      v52 = v0[127];
      v53 = v0[109];
      ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, __n128))v8)(v53, v41, 1, v0[106], v34);
      sub_1004B84A4(v52, type metadata accessor for CRLBoardIdentifier);
      sub_1004CB800(v53, &qword_1013FE140);
LABEL_27:
      v64 = v0[170];
      swift_endAccess(v0 + 69);
      swift_release(v64);
      v23 = v0[141];
      v24 = v0[140];
      v25 = sub_100CEA0C8;
      return swift_task_switch(v25, v24, v23);
    }
LABEL_30:
    sub_10082F548();
    v37 = *v35;
    goto LABEL_12;
  }
  sub_1004B84E0(v30, v0[108], type metadata accessor for CRLBoardEntity);
  v8 = swift_isUniquelyReferenced_nonNull_native(*v1);
  v35 = (uint64_t *)*v1;
  v0[99] = *v1;
  *v1 = 0x8000000000000000;
  v43 = sub_100843264(v29);
  v44 = v35[2];
  v45 = (v42 & 1) == 0;
  v46 = v44 + v45;
  if (__OFADD__(v44, v45))
  {
    __break(1u);
    goto LABEL_30;
  }
  v47 = v42;
  if (v35[3] >= v46)
  {
    if ((v8 & 1) == 0)
      sub_10082F548();
  }
  else
  {
    v48 = v0[127];
    sub_10081A4F4(v46, v8);
    v49 = sub_100843264(v48);
    if ((v47 & 1) != (v50 & 1))
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v0[124]);
    v43 = v49;
  }
  v54 = (_QWORD *)v0[99];
  if ((v47 & 1) != 0)
  {
    sub_100836E6C(v0[108], v54[7] + *(_QWORD *)(v0[107] + 72) * v43, type metadata accessor for CRLBoardEntity);
LABEL_26:
    v62 = v0[127];
    v63 = *v1;
    *v1 = (uint64_t)v54;
    swift_bridgeObjectRelease(v63);
    sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_27;
  }
  v55 = v0[168];
  v56 = v0[127];
  v57 = v0[108];
  v58 = v0[107];
  v54[(v43 >> 6) + 8] |= 1 << v43;
  sub_1004B8460(v56, v54[6] + v55 * v43, type metadata accessor for CRLBoardIdentifier);
  result = sub_1004B84E0(v57, v54[7] + *(_QWORD *)(v58 + 72) * v43, type metadata accessor for CRLBoardEntity);
  v59 = v54[2];
  v60 = __OFADD__(v59, 1);
  v61 = v59 + 1;
  if (!v60)
  {
    v54[2] = v61;
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_100CEA0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 1336);
  v2 = *(_QWORD *)(v0 + 1352) + 1;
  sub_1004B84A4(*(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1192));
    if (qword_1013DD838 != -1)
      swift_once(&qword_1013DD838, sub_100A04F30);
    v3 = *(_QWORD *)(v0 + 1152);
    v4 = *(_QWORD *)(v0 + 840);
    swift_beginAccess(&static OS_os_log.appIntents, v0 + 480, 0, 0);
    v5 = (void *)static OS_os_log.appIntents;
    *(_QWORD *)(v0 + 1376) = static OS_os_log.appIntents;
    v6 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    result = swift_initStackObject(v6, v0 + 352);
    *(_QWORD *)(v0 + 1384) = result;
    *(_OWORD *)(result + 16) = xmmword_100EF5E40;
    v8 = *(_QWORD *)(v4 + v3);
    *(_QWORD *)(v0 + 1392) = v8;
    if (v8)
    {
      v9 = v5;
      swift_retain(v8);
      v10 = sub_100CEA5DC;
      return swift_task_switch(v10, v8, 0);
    }
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 1352) + 1;
    *(_QWORD *)(v0 + 1352) = v11;
    v12 = *(_QWORD *)(v0 + 1152);
    v13 = *(_QWORD *)(v0 + 840);
    result = sub_1004B8460(*(_QWORD *)(v0 + 1192)+ ((*(unsigned __int8 *)(v0 + 1416) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1416))+ *(_QWORD *)(v0 + 1344) * v11, *(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
    v8 = *(_QWORD *)(v13 + v12);
    *(_QWORD *)(v0 + 1360) = v8;
    if (v8)
    {
      swift_retain(v8);
      v10 = sub_100CE9C14;
      return swift_task_switch(v10, v8, 0);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100CEA238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  id v36;
  uint64_t (*v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  swift_release(*(_QWORD *)(v0 + 1360));
  if (qword_1013DD838 != -1)
    swift_once(&qword_1013DD838, sub_100A04F30);
  v1 = 0xD000000000000012;
  v2 = *(_QWORD *)(v0 + 1024);
  v3 = *(_QWORD *)(v0 + 1008);
  swift_beginAccess(&static OS_os_log.appIntents, v0 + 696, 0, 0);
  v4 = (void *)static OS_os_log.appIntents;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v5, v0 + 240);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  sub_1004B8460(v2, v3, type metadata accessor for CRLBoardIdentifier);
  v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v9 = *v7;
  v8 = (void *)v7[1];
  v10 = (void *)0x8000000100FB4970;
  if (*v7)
    v11 = 0;
  else
    v11 = v8 == (void *)0xE000000000000000;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, 0, 0xE000000000000000, 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(v8);
    v1 = v9;
    v10 = v8;
  }
  v12 = *(_QWORD *)(v0 + 1368);
  v13 = *(_QWORD *)(v0 + 1008);
  v14 = v4;
  *(_QWORD *)(v0 + 776) = UUID.uuidString.getter(v14);
  *(_QWORD *)(v0 + 784) = v15;
  v16._countAndFlagsBits = 15418;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v1;
  v17._object = v10;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v10);
  v18._countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19 = *(_QWORD *)(v0 + 776);
  v20 = *(_QWORD *)(v0 + 784);
  sub_1004B84A4(v13, type metadata accessor for CRLBoardIdentifier);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v21 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v21;
  *(_QWORD *)(inited + 32) = v19;
  *(_QWORD *)(inited + 40) = v20;
  *(_QWORD *)(v0 + 808) = v12;
  swift_errorRetain(v12);
  v22 = sub_1004B804C(&qword_1013E0210);
  v23 = String.init<A>(describing:)(v0 + 808, v22);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v21;
  *(_QWORD *)(inited + 72) = v23;
  *(_QWORD *)(inited + 80) = v24;
  v25 = static os_log_type_t.error.getter(v23);
  sub_100A06EBC((uint64_t)v14, &_mh_execute_header, v25, "Could not remove entity for board identifier %@: %@", 51, 2, inited);
  swift_setDeallocating(inited);
  v26 = *(_QWORD *)(inited + 16);
  v27 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, v26, v27);

  swift_errorRelease(v12);
  v28 = *(_QWORD *)(v0 + 1336);
  v29 = *(_QWORD *)(v0 + 1352) + 1;
  sub_1004B84A4(*(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
  if (v29 == v28)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1192));
    if (qword_1013DD838 != -1)
      swift_once(&qword_1013DD838, sub_100A04F30);
    v30 = *(_QWORD *)(v0 + 1152);
    v31 = *(_QWORD *)(v0 + 840);
    swift_beginAccess(&static OS_os_log.appIntents, v0 + 480, 0, 0);
    v32 = (void *)static OS_os_log.appIntents;
    *(_QWORD *)(v0 + 1376) = static OS_os_log.appIntents;
    v33 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    result = swift_initStackObject(v33, v0 + 352);
    *(_QWORD *)(v0 + 1384) = result;
    *(_OWORD *)(result + 16) = xmmword_100EF5E40;
    v35 = *(_QWORD *)(v31 + v30);
    *(_QWORD *)(v0 + 1392) = v35;
    if (v35)
    {
      v36 = v32;
      swift_retain(v35);
      v37 = sub_100CEA5DC;
      return swift_task_switch(v37, v35, 0);
    }
    __break(1u);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 1352) + 1;
    *(_QWORD *)(v0 + 1352) = v38;
    v39 = *(_QWORD *)(v0 + 1152);
    v40 = *(_QWORD *)(v0 + 840);
    result = sub_1004B8460(*(_QWORD *)(v0 + 1192)+ ((*(unsigned __int8 *)(v0 + 1416) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1416))+ *(_QWORD *)(v0 + 1344) * v38, *(_QWORD *)(v0 + 1024), type metadata accessor for CRLBoardIdentifier);
    v35 = *(_QWORD *)(v40 + v39);
    *(_QWORD *)(v0 + 1360) = v35;
    if (v35)
    {
      swift_retain(v35);
      v37 = sub_100CE9C14;
      return swift_task_switch(v37, v35, 0);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100CEA5DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[174];
  swift_beginAccess(v1 + 120, v0 + 66, 0, 0);
  v2 = *(_QWORD *)(v1 + 120);
  v0[175] = v2;
  v3 = v0[141];
  v4 = v0[140];
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_100CEA63C, v4, v3);
}

uint64_t sub_100CEA63C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 1400);
  v2 = *(_QWORD *)(v0 + 1392);
  v3 = *(_QWORD **)(v0 + 1384);
  v4 = *(void **)(v0 + 1376);
  v5 = *(_QWORD *)(v0 + 1104);
  v6 = *(_QWORD *)(v0 + 1096);
  v7 = *(_QWORD *)(v0 + 1088);
  v8 = *(_QWORD *)(v0 + 1080);
  v9 = *(_QWORD *)(v0 + 1072);
  v15 = *(_QWORD *)(v0 + 1064);
  v16 = *(_QWORD *)(v0 + 1056);
  v17 = *(_QWORD *)(v0 + 1048);
  v18 = *(_QWORD *)(v0 + 1040);
  v19 = *(_QWORD *)(v0 + 1032);
  v20 = *(_QWORD *)(v0 + 1024);
  v21 = *(_QWORD *)(v0 + 1016);
  v22 = *(_QWORD *)(v0 + 1008);
  v23 = *(_QWORD *)(v0 + 984);
  v24 = *(_QWORD *)(v0 + 976);
  v25 = *(_QWORD *)(v0 + 968);
  v26 = *(_QWORD *)(v0 + 952);
  v27 = *(_QWORD *)(v0 + 944);
  v28 = *(_QWORD *)(v0 + 936);
  v29 = *(_QWORD *)(v0 + 928);
  v30 = *(_QWORD *)(v0 + 904);
  v31 = *(_QWORD *)(v0 + 896);
  v32 = *(_QWORD *)(v0 + 888);
  v33 = *(_QWORD *)(v0 + 880);
  v34 = *(_QWORD *)(v0 + 872);
  v35 = *(_QWORD *)(v0 + 864);
  swift_release(*(_QWORD *)(v0 + 1112));
  swift_release(v2);
  v3[7] = sub_1004B804C(&qword_10140DF70);
  v3[8] = sub_1004CBA30(&qword_10140DF78, &qword_10140DF70, (uint64_t)&protocol conformance descriptor for [A : B]);
  v3[4] = v1;
  v10 = v3 + 4;
  v11 = static os_log_type_t.debug.getter();
  sub_100A06EBC((uint64_t)v4, &_mh_execute_header, v11, "Updated entities in store: %@", 29, 2, (uint64_t)v3);
  swift_setDeallocating(v3);
  v12 = v3[2];
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v10, v12, v13);

  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CEA898(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[37] = a1;
  v2[38] = v1;
  v3 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v2[39] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v4);
  v2[41] = swift_task_alloc(v4);
  v2[42] = swift_task_alloc(v4);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_1004B804C(&qword_1013E0270) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[43] = swift_task_alloc(v5);
  v2[44] = swift_task_alloc(v5);
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v2[45] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[46] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[47] = swift_task_alloc(v8);
  v2[48] = swift_task_alloc(v8);
  v2[49] = swift_task_alloc(v8);
  v9 = type metadata accessor for MainActor(0);
  v2[50] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v2[51] = v10;
  v2[52] = v11;
  return swift_task_switch(sub_100CEA9BC, v10, v11);
}

uint64_t sub_100CEA9BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  v2 = v0[37];
  v1 = v0[38];
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v0 + 24, 0, 0);
  v3 = (id)static OS_os_log.crlBoardLibrary;
  v5 = static os_log_type_t.default.getter(v4);
  sub_100A06EBC((uint64_t)v3, &_mh_execute_header, v5, "Updating snapshot", 17, 2, (uint64_t)_swiftEmptyArrayStorage);

  v6 = OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeHierarchySnapshot;
  v0[53] = *(_QWORD *)(v2 + 16);
  v0[54] = v6;
  v7 = *(_QWORD *)(v1 + v6);
  swift_bridgeObjectRetain(v7);
  sub_1007C3B58(v8);
  v0[55] = v9;
  swift_bridgeObjectRelease(v7);
  v10 = (_QWORD *)swift_task_alloc(dword_10140DF4C);
  v0[56] = v10;
  *v10 = v0;
  v10[1] = sub_100CEAACC;
  return sub_100CCB010((uint64_t)(v0 + 16));
}

uint64_t sub_100CEAACC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 448));
  return swift_task_switch(sub_100CEAB18, *(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 416));
}

uint64_t sub_100CEAB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_1004C4938(v0 + 128, v0 + 88, &qword_10140DF50);
  v1 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 456) = v1;
  if (!v1)
  {
    v28 = *(_QWORD *)(v0 + 440);
    swift_release(*(_QWORD *)(v0 + 400));
    swift_bridgeObjectRelease(v28);
    v29 = *(_QWORD *)(v0 + 384);
    v30 = *(_QWORD *)(v0 + 376);
    v32 = *(_QWORD *)(v0 + 344);
    v31 = *(_QWORD *)(v0 + 352);
    v34 = *(_QWORD *)(v0 + 328);
    v33 = *(_QWORD *)(v0 + 336);
    v35 = *(_QWORD *)(v0 + 320);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_BYTE *)(v0 + 544) = *(_BYTE *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 464) = v2;
  *(_QWORD *)(v0 + 472) = v3;
  v4 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 480) = v4;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v38 = v1;
    else
      v38 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v1, 2);
    result = _CocoaArrayWrapper.endIndex.getter(v38);
    v5 = result;
  }
  else
  {
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(v1, 2);
  }
  v40 = v3;
  v41 = v2;
  v39 = v4;
  if (!v5)
  {
    v9 = _swiftEmptyArrayStorage;
LABEL_23:
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v1);
    v36 = dword_10140DF5C;
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v39);
    v37 = (_QWORD *)swift_task_alloc(v36);
    *(_QWORD *)(v0 + 488) = v37;
    *v37 = v0;
    v37[1] = sub_100CEAF14;
    return sub_100CE5370(v1, v41, v40, v39);
  }
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(v0 + 368);
    v42 = *(_QWORD *)(v0 + 336) + 8;
    v9 = _swiftEmptyArrayStorage;
    v43 = v5;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v1);
      else
        v11 = *(id *)(v1 + 8 * v7 + 32);
      v12 = v11;
      v13 = *(_QWORD *)(v0 + 336);
      v14 = *(_QWORD *)(v0 + 312);
      sub_1004B8460((uint64_t)v11 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v13, type metadata accessor for CRLBoardLibraryViewModel.Item);
      if (swift_getEnumCaseMultiPayload(v13, v14) == 2)
      {
        v15 = *(_QWORD *)(v0 + 384);
        v16 = *(_QWORD *)(v0 + 336);
        v17 = *(_QWORD *)(v0 + 344);
        v18 = sub_1004B804C((uint64_t *)&unk_1013EA630);
        swift_bridgeObjectRelease(*(_QWORD *)(v42 + *(int *)(v18 + 48)));
        sub_1004B84E0(v16, v15, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84E0(v15, v17, type metadata accessor for CRLBoardIdentifier);
        v19 = 0;
      }
      else
      {
        sub_1004B84A4(*(_QWORD *)(v0 + 336), type metadata accessor for CRLBoardLibraryViewModel.Item);
        v19 = 1;
      }
      v21 = *(_QWORD *)(v0 + 352);
      v20 = *(_QWORD *)(v0 + 360);
      v22 = *(_QWORD *)(v0 + 344);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v22, v19, 1, v20);
      sub_1004C4938(v22, v21, &qword_1013E0270);

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v21, 1, v20) == 1)
      {
        sub_1004CB800(*(_QWORD *)(v0 + 352), &qword_1013E0270);
        v10 = v43;
      }
      else
      {
        v23 = *(_QWORD *)(v0 + 392);
        v24 = *(_QWORD *)(v0 + 376);
        sub_1004B84E0(*(_QWORD *)(v0 + 352), v23, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84E0(v23, v24, type metadata accessor for CRLBoardIdentifier);
        v10 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = (_QWORD *)sub_100D104C0(0, v9[2] + 1, 1, (unint64_t)v9);
        v26 = v9[2];
        v25 = v9[3];
        if (v26 >= v25 >> 1)
          v9 = (_QWORD *)sub_100D104C0(v25 > 1, v26 + 1, 1, (unint64_t)v9);
        v27 = *(_QWORD *)(v0 + 376);
        v9[2] = v26 + 1;
        sub_1004B84E0(v27, (uint64_t)v9+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v26, type metadata accessor for CRLBoardIdentifier);
      }
      ++v7;
    }
    while (v10 != v7);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_100CEAF14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  *(_QWORD *)(*(_QWORD *)v2 + 496) = v1;
  swift_task_dealloc(v5);
  v7 = v4[59];
  v6 = v4[60];
  v8 = v4[57];
  v9 = v4[58];
  if (v1)
  {
    v10 = v4[55];
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease_n(v8, 3);
    v11 = v4[51];
    v12 = v4[52];
    v13 = sub_100CEB6E4;
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v8);
    v4[63] = a1;
    v11 = v4[51];
    v12 = v4[52];
    v13 = sub_100CEAFEC;
  }
  return swift_task_switch(v13, v11, v12);
}

uint64_t sub_100CEAFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 280) = v1;
  swift_bridgeObjectRetain(v1);
  *(_BYTE *)(v0 + 545) = sub_100CCD56C(v2, v1) & 1;
  swift_bridgeObjectRelease(v1);
  *(_BYTE *)(v0 + 546) = sub_100CCE718(v2, v0 + 280) & 1;
  v3 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRetain(v3);
  *(_BYTE *)(v0 + 547) = sub_100CCFC50(v2, v3) & 1;
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_10140DF64);
  *(_QWORD *)(v0 + 512) = v4;
  *v4 = v0;
  v4[1] = sub_100CEB0B8;
  return sub_100CD0DB0();
}

uint64_t sub_100CEB0B8(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 512);
  *(_BYTE *)(*v1 + 548) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100CEB110, *(_QWORD *)(v2 + 408), *(_QWORD *)(v2 + 416));
}

uint64_t sub_100CEB110()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  char *v22;
  objc_super *v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  Class isa;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  _QWORD *v47;
  char *v48;
  __n128 v49;
  uint64_t v50;
  Swift::Int v51;
  char *v52;
  Swift::Int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  objc_super *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _QWORD *v68;

  v60 = v0 + 68;
  v1 = &unk_10140D000;
  v59 = *((_BYTE *)v0 + 548) | *((_BYTE *)v0 + 547) | *((_BYTE *)v0 + 546) | *((_BYTE *)v0 + 545) | *((_BYTE *)v0 + 544) | (v0[53] != 0);
  if (!(((*((_BYTE *)v0 + 548) | *((_BYTE *)v0 + 547)) | (*((_BYTE *)v0 + 546) | *((_BYTE *)v0 + 545))) & 1 | v0[68] & 1 | (v0[53] != 0)))
  {
    v2 = *(_QWORD *)(v0[38] + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeFolderHierarchySnapshot);
    if ((unint64_t)v2 >> 62)
    {
      if (v2 < 0)
        v3 = *(_QWORD *)(v0[38] + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeFolderHierarchySnapshot);
      else
        v3 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0[38]
                                         + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeFolderHierarchySnapshot));
      v4 = _CocoaArrayWrapper.endIndex.getter(v3);
      swift_bridgeObjectRelease(v2);
      if (v4)
        goto LABEL_35;
    }
    else if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_35;
    }
  }
  v5 = *(_QWORD *)(v0[38] + v0[54]);
  v64 = swift_allocObject(&unk_10129F6B0, 17, 7);
  *(_BYTE *)(v64 + 16) = 0;
  v6 = (_BYTE *)(v64 + 16);
  if ((unint64_t)v5 >> 62)
    goto LABEL_27;
  v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v5, 2);
  if (v7)
  {
LABEL_11:
    v62 = (objc_super *)(v0 + 33);
    v8 = v0[41];
    v1 = (_QWORD *)(v5 & 0xC000000000000001);
    swift_beginAccess(v6, v0 + 21, 0, 0);
    v9 = 0;
    v61 = v8 + 8;
    v67 = v6;
    v63 = v5;
    v65 = v7;
    v66 = v5 & 0xC000000000000001;
    v0 = v68;
    while (1)
    {
      if (v1)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v5);
        v11 = v9 + 1;
        if (__OFADD__(v9, 1))
          goto LABEL_26;
      }
      else
      {
        v10 = *(id *)(v5 + 8 * v9 + 32);
        v11 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_26:
          __break(1u);
LABEL_27:
          if (v5 < 0)
            v33 = v5;
          else
            v33 = v5 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v5, 2);
          v7 = _CocoaArrayWrapper.endIndex.getter(v33);
          if (!v7)
            break;
          goto LABEL_11;
        }
      }
      if (*v6 == 1)
      {

      }
      else
      {
        v12 = v5;
        v13 = v68[41];
        v14 = v68[39];
        v15 = (uint64_t)v10 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item;
        v16 = v10;
        sub_1004B8460((uint64_t)v10 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, v13, type metadata accessor for CRLBoardLibraryViewModel.Item);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
        v18 = v68[41];
        if (EnumCaseMultiPayload == 2)
        {
          v19 = sub_1004B804C((uint64_t *)&unk_1013EA630);
          swift_bridgeObjectRelease(*(_QWORD *)(v61 + *(int *)(v19 + 48)));
          sub_1004B84A4(v18, type metadata accessor for CRLBoardIdentifier);

          v7 = v65;
          v1 = (_QWORD *)v66;
          v6 = v67;
          v5 = v12;
        }
        else
        {
          v20 = v68[40];
          sub_1004B84A4(v68[41], type metadata accessor for CRLBoardLibraryViewModel.Item);
          sub_1004B8460(v15, v20, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v21 = (objc_class *)type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
          v22 = (char *)objc_allocWithZone(v21);
          *(_QWORD *)&v22[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
          sub_1004B8460(v20, (uint64_t)&v22[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);
          v68[33] = v22;
          v68[34] = v21;
          v23 = -[objc_super init](v62, "init");
          sub_1004B84A4(v20, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v24 = objc_msgSend(v16, "children");
          v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v21);

          v26 = sub_100CE1978(v25, v64, (uint64_t (*)(_QWORD, _QWORD))sub_1007C36F0, 0);
          swift_bridgeObjectRelease(v25);
          isa = Array._bridgeToObjectiveC()().super.isa;
          -[objc_super setChildren:](v23, "setChildren:", isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
          v30 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v29 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v30 >= v29 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
          v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v23);
          specialized Array._endMutation()(v31);
          v5 = v63;
          v7 = v65;
          v1 = (_QWORD *)v66;
          v6 = v67;
        }
      }
      ++v9;
      if (v11 == v7)
      {
        swift_bridgeObjectRelease(v5);
        v0 = v68;
        v32 = _swiftEmptyArrayStorage;
        v1 = (_QWORD *)&unk_10140D000;
        goto LABEL_32;
      }
    }
  }
  swift_bridgeObjectRelease(v5);
  v32 = _swiftEmptyArrayStorage;
LABEL_32:
  v34 = v0[38];
  swift_release(v64);
  swift_bridgeObjectRelease(v5);
  v35 = v1[312];
  v36 = *(_QWORD *)(v34 + v35);
  swift_bridgeObjectRetain(v36);
  v37 = sub_100548BEC((uint64_t)_swiftEmptyArrayStorage, v36);
  swift_bridgeObjectRelease(v36);
  if ((v37 & 1) == 0)
  {
    v38 = *(_QWORD **)(v34 + v35);
    *(_QWORD *)(v34 + v35) = _swiftEmptyArrayStorage;
    v32 = v38;
  }
  swift_bridgeObjectRelease(v32);
LABEL_35:
  v39 = v0[55];
  v40 = (char *)v0[38];
  v41 = *(_QWORD *)&v40[v0[54]];
  swift_bridgeObjectRetain(v41);
  sub_1007C3B58(v42);
  v44 = v43;
  swift_bridgeObjectRelease(v41);
  v45 = v0[35];
  v46 = swift_bridgeObjectRetain(v45);
  v47 = (_QWORD *)sub_100A65498(v46);
  v48 = &v40[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata];
  swift_beginAccess(&v40[OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_storeBoardMetadata], v0 + 27, 1, 0);
  v49 = swift_bridgeObjectRetain(*(_QWORD *)v48);
  v50 = sub_100A65498(v49);
  swift_bridgeObjectRetain(v47);
  v51 = sub_1005A0C08(v50, v47);
  v68[65] = v51;
  swift_bridgeObjectRelease(v47);
  v52 = v40;
  v53 = sub_100CE7020((uint64_t)v47, v52, v0 + 35, v39, v44);
  v68[66] = v53;
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v39);

  if (*(_QWORD *)(v51 + 16) || *(_QWORD *)(v53 + 16))
  {
    v54 = *(_QWORD *)v48;
    *(_QWORD *)v48 = v45;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRelease(v54);
    v55 = 1;
  }
  else
  {
    v55 = v59;
  }
  *((_BYTE *)v60 + 5) = v55 & 1;
  v56 = v68[57];
  v57 = (_QWORD *)swift_task_alloc(dword_10140DF6C);
  v68[67] = v57;
  *v57 = v68;
  v57[1] = sub_100CEB86C;
  return sub_100CE7738(v56);
}

uint64_t sub_100CEB6E4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 496);
  swift_release(*(_QWORD *)(v0 + 400));
  v2 = (void *)static OS_os_log.crlBoardLibrary;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v0 + 288, v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v7 = v2;
  v8 = Error.localizedDescription.getter(v5, v6);
  v10 = v9;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v11 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v10;
  v12 = static os_log_type_t.error.getter(v11);
  sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v12, "Error updating metadata: %@", 27, 2, inited);
  swift_setDeallocating(inited);
  v13 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v13);

  swift_errorRelease(v1);
  v14 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 376);
  v17 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 352);
  v19 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CEB86C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 472);
  v3 = *(_QWORD *)(*v0 + 480);
  v5 = *(_QWORD *)(*v0 + 456);
  v4 = *(_QWORD *)(*v0 + 464);
  swift_task_dealloc(*(_QWORD *)(*v0 + 536));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return swift_task_switch(sub_100CEB8F0, *(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 416));
}

uint64_t sub_100CEB8F0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_BYTE *)(v0 + 549);
  swift_release(*(_QWORD *)(v0 + 400));
  v2 = *(_QWORD *)(v0 + 304);
  if ((v1 & 1) != 0 || (*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_didStartUpdating) & 1) == 0)
  {
    v4 = *(_QWORD *)(v0 + 528);
    v5 = *(_QWORD *)(v0 + 296);
    sub_100CACFEC();
    *(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform15CRLBoardLibrary_didStartUpdating) = 1;
    v6 = sub_1004B6900((uint64_t)&off_1012649A0);
    swift_bridgeObjectRetain(v5);
    v7 = sub_100CA0AB8(v4, v5, type metadata accessor for CRLBoardIdentifier, (void (*)(char *, char *))sub_100AD7844);
    v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1013DDD68 != -1)
      swift_once(&qword_1013DDD68, sub_100BC0B9C);
    v9 = *(_QWORD *)(v0 + 520);
    v10 = *(_QWORD *)(v0 + 304);
    v11 = qword_101480E38;
    v12 = sub_100BC0BD0(v6, v7, v9);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_release(v9);
    sub_100C9BC14(v12);
    v14 = v13;
    swift_bridgeObjectRelease(v12);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "postNotificationName:object:userInfo:", v11, v10, isa, swift_bridgeObjectRelease(v14).n128_f64[0]);

  }
  else
  {
    v3 = *(_QWORD *)(v0 + 520);
    swift_release(*(_QWORD *)(v0 + 528));
    swift_release(v3);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  v16 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 376);
  v19 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 336);
  v22 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CEBB08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10140DF3C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1004CF80C;
  return sub_100CCAC40(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100CEBB88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

double sub_100CEBB98(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9CF70(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_100CEBBA0(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9BEA4(a1, *(char **)(v1 + 16));
}

double sub_100CEBBA8(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9C714(a1, *(char **)(v1 + 16));
}

double sub_100CEBBB0(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9C634(a1, *(char **)(v1 + 16));
}

double sub_100CEBBB8(uint64_t a1)
{
  return sub_100A9D2B0(a1);
}

double sub_100CEBBC0(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9C738(a1, *(char **)(v1 + 16));
}

uint64_t sub_100CEBBC8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_100CD3980(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

double sub_100CEBBD0(uint64_t a1)
{
  uint64_t v1;

  return sub_100AA4FA8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_100CEBBD8(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9BDF8(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100CEBBE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10140DFD4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1004CFD00;
  return sub_100CBE114(a1, v5, v6, v7, v8);
}

uint64_t sub_100CEBC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for Notification(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 64);
  v8 = v5 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16));

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2 + v6, v3);
  return swift_deallocObject(v2, v7, v8);
}

uint64_t sub_100CEBCF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Notification(0, a2) - 8) + 80);
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (uint64_t)v2 + ((v5 + 40) & ~v5);
  v10 = (_QWORD *)swift_task_alloc(dword_10140E00C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_1004CFD00;
  return sub_100CD5598(a1, v6, v7, v8, v9);
}

uint64_t sub_100CEBD88()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100CEBDBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 41);
  v10 = (_QWORD *)swift_task_alloc(dword_10140E01C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1004CFD00;
  return sub_100CADD20(a1, v4, v5, v6, v7, v9, v8);
}

void sub_100CEBE54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  sub_100C2CAE4(v0 + ((v1 + 24) & ~v1));
}

double sub_100CEBE94(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  uint64_t v7;
  uint64_t inited;
  id v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double result;
  _BYTE v19[72];
  _BYTE v20[24];

  v3 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1013DD748 != -1)
    swift_once(&qword_1013DD748, sub_100A023E8);
  swift_beginAccess(&static OS_os_log.crlBoardLibrary, v20, 0, 0);
  v6 = (void *)static OS_os_log.crlBoardLibrary;
  v7 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v7, v19);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(inited + 56) = sub_1004B804C(&qword_10140E120);
  *(_QWORD *)(inited + 64) = sub_1004CBA30(&qword_10140E128, &qword_10140E120, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(inited + 32) = a1;
  v9 = v6;
  v10 = swift_bridgeObjectRetain(a1);
  v11 = static os_log_type_t.default.getter(v10);
  sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v11, "Updating store snapshot for new highlights. %@", 46, 2, inited);
  swift_setDeallocating(inited);
  v12 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v12);

  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
  type metadata accessor for MainActor(0);
  v14 = v1;
  v15 = static MainActor.shared.getter(v14);
  v16 = (_QWORD *)swift_allocObject(&unk_10129FCE0, 40, 7);
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = v14;
  v17 = sub_100521B98((uint64_t)v5, (uint64_t)&unk_10140E138, (uint64_t)v16);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_100CEC088(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  uint64_t v10;

  v2 = sub_1004B804C(&qword_1013E04F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_1004CB7BC(a1, (uint64_t)v4, &qword_1013E04F0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  objc_msgSend(v5, "setObject:forKey:", isa, CFSTR("CRLCloudQuotaExceededAlertLastShownDate"));

  swift_unknownObjectRelease(isa);
  return sub_1004CB800(a1, &qword_1013E04F0);
}

uint64_t sub_100CEC1AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD v7[5];
  __int128 v8;
  __int128 v9;

  v1 = Notification.userInfo.getter(a1);
  if (!v1)
  {
    v8 = 0u;
    v9 = 0u;
LABEL_11:
    sub_1004CB800((uint64_t)&v8, &qword_1013E0230);
    return 0;
  }
  v2 = v1;
  *(_QWORD *)&v8 = 0xD000000000000010;
  *((_QWORD *)&v8 + 1) = 0x8000000100FB5A20;
  AnyHashable.init<A>(_:)(&v8, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_1008432BC((uint64_t)v7), (v4 & 1) != 0))
  {
    sub_1004CB6E8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v8);
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1004B89A4((uint64_t)v7);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_11;
  v5 = sub_1004B804C(&qword_1013E4980);
  if (swift_dynamicCast(v7, &v8, (char *)&type metadata for Any + 8, v5, 6))
    return v7[0];
  else
    return 0;
}

uint64_t sub_100CEC2B8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100CEC2EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10140E034);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1004CFD00;
  return sub_100CD5484(a1, v4, v5, v7, v6);
}

uint64_t sub_100CEC364(uint64_t a1)
{
  uint64_t v1;

  return sub_100AD42A0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100CEC36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for Notification(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 48) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 64);
  v8 = v5 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 32));

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2 + v6, v3);
  return swift_deallocObject(v2, v7, v8);
}

uint64_t sub_100CEC3F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Notification(0, a2) - 8) + 80);
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = (uint64_t)v2 + ((v5 + 48) & ~v5);
  v11 = (_QWORD *)swift_task_alloc(dword_10140E044);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_1004CFD00;
  return sub_100CD685C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100CEC48C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10140E054);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1004CFD00;
  return sub_100CBD838(a1, v5, v6, v7, v8);
}

uint64_t sub_100CEC520()
{
  return sub_100CEC6D4((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100CEC534(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10140E064);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1004CFD00;
  return sub_100CC8BF8(a1, v4, v5, v7, v6);
}

uint64_t sub_100CEC5AC()
{
  return sub_10054FD0C((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_100CEC5B8()
{
  uint64_t v0;

  sub_1005F68FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100CEC5C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CEC5D0()
{
  uint64_t v0;

  sub_1004BBBC8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100CEC5F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10140C31C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1004CFD00;
  return sub_100C68D6C(a1, v4, v5, v6);
}

void sub_100CEC668()
{
  uint64_t v0;

  sub_1005F6794(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_100CEC674()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CEC684()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CEC6AC(uint64_t a1)
{
  return sub_100CECD1C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100CC71EC);
}

double sub_100CEC6B8(uint64_t a1)
{
  uint64_t v1;

  return sub_100945860(a1, v1);
}

uint64_t sub_100CEC6C0()
{
  return sub_100CEC6D4((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100CEC6D4(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  swift_unknownObjectRelease(v2[2]);
  a1(v2[4]);
  a2(v2[5]);
  return swift_deallocObject(v2, 48, 7);
}

uint64_t sub_100CEC720(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10140E07C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1004CFD00;
  return sub_100CC745C(a1, v4, v5, v7, v6);
}

uint64_t sub_100CEC79C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10140E08C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1004CFD00;
  return sub_100CC4274(a1, v5, v6, v7, v8);
}

uint64_t sub_100CEC834(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10140E09C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1004CFD00;
  return sub_100CC38A4(a1, v5, v6, v7, v8);
}

uint64_t sub_100CEC8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10140E0AC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1004CFD00;
  v3[2] = v2;
  return swift_task_switch(sub_100CC320C, 0, 0);
}

double sub_100CEC930()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  return sub_100A96434(v0 + ((v1 + 24) & ~v1), 0, 0);
}

uint64_t sub_100CEC978()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CEC99C()
{
  return sub_10054FD0C((void (*)(_QWORD))&_swift_release);
}

void sub_100CEC9A8(uint64_t a1)
{
  uint64_t v1;

  sub_100CBFBD0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100CEC9B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

double sub_100CEC9DC(uint64_t a1)
{
  uint64_t v1;

  return sub_100CC0554(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100CEC9E4()
{
  return sub_10054FD0C((void (*)(_QWORD))&_swift_release);
}

void sub_100CEC9F0(uint64_t a1)
{
  uint64_t v1;

  sub_100CC0F04(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100CEC9FC(uint64_t a1)
{
  return sub_100CECD1C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100CC1404);
}

uint64_t sub_100CECA08()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100CECA3C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10140E0F4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1004CFD00;
  return sub_100CC06AC(a1, v4, v5, v7, v6);
}

uint64_t sub_100CECAB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10140E104);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1004CFD00;
  return sub_100CC0D64(a1, v4, v5, v6);
}

uint64_t sub_100CECB28()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10140AC3C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1004CFD00;
  return sub_100C11C5C();
}

double sub_100CECB98()
{
  uint64_t v0;

  return sub_100CBFE54(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100CECBA4(char a1, char a2)
{
  uint64_t v2;

  return sub_100CC0168(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100CECBB4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10140E134);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1004CFD00;
  return sub_100CBC8C8();
}

uint64_t sub_100CECC24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100CECC50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CECC60()
{
  return sub_10054FD0C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100CECC6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CECC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100CECD10(uint64_t a1)
{
  return sub_100CECD1C(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100CCA4CC);
}

uint64_t sub_100CECD1C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

uint64_t sub_100CECD6C()
{
  return sub_10054FD0C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100CECD78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_100CECD88(uint64_t a1)
{
  uint64_t v1;

  return sub_100AA3084(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_100CECD90(uint64_t a1)
{
  uint64_t v1;

  return sub_100AA2828(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_100CECD98(uint64_t a1)
{
  uint64_t v1;

  return sub_100AA38EC(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100CECDA0()
{
  unint64_t result;

  result = qword_10140E178;
  if (!qword_10140E178)
  {
    result = swift_getWitnessTable(&unk_100F32290, &type metadata for CRLBoardLibrary.RenameError);
    atomic_store(result, &qword_10140E178);
  }
  return result;
}

double sub_100CECDE4(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9A084(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100CECDEC(uint64_t a1)
{
  uint64_t v1;

  sub_100AB06F8(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24));
}

double sub_100CECDF4(uint64_t a1)
{
  uint64_t v1;

  return sub_100AAFA3C(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100CECDFC(uint64_t a1)
{
  uint64_t v1;

  sub_100AB0488(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24));
}

double sub_100CECE04(uint64_t a1)
{
  uint64_t v1;

  return sub_100A99F8C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

double sub_100CECE10(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9A180(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100CECE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  v5 = v1 + ((v4 + 40) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_10140E1B4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1004CFD00;
  v6[2] = a1;
  v6[3] = v5;
  v7 = (_QWORD *)swift_task_alloc(dword_10140E1D4);
  v6[4] = v7;
  *v7 = v6;
  v7[1] = sub_100CB757C;
  return sub_100CB7638(v5);
}

uint64_t sub_100CECEB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CECEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10140E1C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1004CFD00;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10140E1C0 + dword_10140E1C0))(a1, v4);
}

double sub_100CECF4C(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9FC1C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_100CECF54(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9B71C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100CECF5C()
{
  return sub_10054FD0C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100CECF68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CECF78(uint64_t a1)
{
  sub_100CECFAC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24));
  return a1;
}

void sub_100CECFAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    swift_release(a1);
    swift_release(a2);
    swift_release(a3);

  }
}

void sub_100CECFF8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1008135B4(v1, a1);
}

const char *sub_100CED010()
{
  return "CRLEnsureOwnershipOfDataUserDefault";
}

id sub_100CED01C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "CRLEnsureOwnershipOfDataUserDefault");
  *a2 = (_BYTE)result;
  return result;
}

void sub_100CED04C(void **a1, uint64_t a2)
{
  uint64_t v2;

  sub_100CD6E50(a1, a2, v2);
}

void sub_100CED054(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_100CB13A0(a1, v1);
}

uint64_t sub_100CED060(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10140E24C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1004CFD00;
  return sub_100CB1688(a1, v4, v5, v6);
}

double sub_100CED0CC(uint64_t a1)
{
  uint64_t v1;

  return sub_100A9C8A0(a1, *(char **)(v1 + 16));
}

double sub_100CED0D4(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100CB4964(a1, a2, a3 & 1, v3, (uint64_t)&unk_1012A00B8, (uint64_t)sub_100CED304, (uint64_t)&unk_1012A00D0, (void (*)(uint64_t, uint64_t, __n128))sub_10059BC74);
}

double sub_100CED110(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100CB4964(a1, a2, a3 & 1, v3, (uint64_t)&unk_1012A0040, (uint64_t)sub_100CED210, (uint64_t)&unk_1012A0058, (void (*)(uint64_t, uint64_t, __n128))sub_100674140);
}

void sub_100CED14C(uint64_t a1)
{
  uint64_t v1;

  sub_100CB5168(a1, v1);
}

uint64_t sub_100CED158(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_10140E26C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1004CFD00;
  return sub_100CB6028(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100CED204()
{
  return sub_100CED2C0((void (*)(_QWORD, _QWORD, __n128))sub_1004E1DFC);
}

uint64_t sub_100CED210()
{
  return sub_100CED310((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100CB4C00);
}

uint64_t sub_100CED220(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10140E27C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1004CFD00;
  return sub_100CB50EC(a1, v5, v6, v7, v8);
}

uint64_t sub_100CED2B4()
{
  return sub_100CED2C0((void (*)(_QWORD, _QWORD, __n128))sub_1004E1E08);
}

uint64_t sub_100CED2C0(void (*a1)(_QWORD, _QWORD, __n128))
{
  uint64_t v1;
  __n128 v3;

  v3 = swift_release(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), v3);

  return swift_deallocObject(v1, 48, 7);
}

uint64_t sub_100CED304()
{
  return sub_100CED310((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100CB42FC);
}

uint64_t sub_100CED310(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100CED328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_100CED3DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_10140E294);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1004CF80C;
  return sub_100CB48E4(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100CED48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10140E2A4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1004CFD00;
  v3[31] = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v3[32] = v4;
  *v4 = v3;
  v4[1] = sub_100CD70FC;
  return static Task<>.sleep(nanoseconds:)(2000000000);
}

void sub_100CED504()
{
  sub_100A74634();
}

uint64_t sub_100CED51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100CED5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10140E2BC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1004CFD00;
  return sub_100CC95C4(a1, v6, v7, v8, v9);
}

uint64_t sub_100CED650()
{
  return sub_10054FD0C((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100CED65C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_100CED66C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006BA770(a1, v1[2], v1[3], v1[4], v1[5]);
}

ValueMetadata *type metadata accessor for CRLDeletedBoardsModel()
{
  return &type metadata for CRLDeletedBoardsModel;
}

uint64_t storeEnumTagSinglePayload for CRLBoardLibrary.RenameError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100CED6C8 + 4 * byte_100F31D70[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100CED6E8 + 4 * byte_100F31D75[v4]))();
}

_BYTE *sub_100CED6C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100CED6E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100CED6F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100CED6F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100CED700(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100CED708(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardLibrary.RenameError()
{
  return &type metadata for CRLBoardLibrary.RenameError;
}

uint64_t storeEnumTagSinglePayload for CRLBoardLibrary.BoardError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100CED770 + 4 * byte_100F31D7F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100CED7A4 + 4 * byte_100F31D7A[v4]))();
}

uint64_t sub_100CED7A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100CED7AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100CED7B4);
  return result;
}

uint64_t sub_100CED7C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100CED7C8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100CED7CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100CED7D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardLibrary.BoardError()
{
  return &type metadata for CRLBoardLibrary.BoardError;
}

unint64_t sub_100CED7F4()
{
  unint64_t result;

  result = qword_10140E2E8;
  if (!qword_10140E2E8)
  {
    result = swift_getWitnessTable(&unk_100F32200, &type metadata for CRLBoardLibrary.BoardError);
    atomic_store(result, (unint64_t *)&qword_10140E2E8);
  }
  return result;
}

unint64_t sub_100CED83C()
{
  unint64_t result;

  result = qword_10140E2F0;
  if (!qword_10140E2F0)
  {
    result = swift_getWitnessTable(&unk_100F32268, &type metadata for CRLBoardLibrary.RenameError);
    atomic_store(result, (unint64_t *)&qword_10140E2F0);
  }
  return result;
}

id CRLRateLimiter.__allocating_init(intervalInSeconds:)(double a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  objc_super v10;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = OBJC_IVAR____TtC8Freeform14CRLRateLimiter_queue;
  sub_100503E34();
  v5 = v3;
  v7 = static OS_dispatch_queue.main.getter(v6);
  *(_QWORD *)&v3[v4] = v7;
  v8 = &v5[OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  static Date.distantPast.getter(v7);
  *(double *)&v5[OBJC_IVAR____TtC8Freeform14CRLRateLimiter_interval] = a1;

  v10.receiver = v5;
  v10.super_class = v1;
  return objc_msgSendSuper2(&v10, "init");
}

id CRLRateLimiter.init(intervalInSeconds:)(double a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  objc_super v9;

  v3 = OBJC_IVAR____TtC8Freeform14CRLRateLimiter_queue;
  sub_100503E34();
  v4 = v1;
  v6 = static OS_dispatch_queue.main.getter(v5);
  *(_QWORD *)&v1[v3] = v6;
  v7 = &v4[OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  static Date.distantPast.getter(v6);
  *(double *)&v4[OBJC_IVAR____TtC8Freeform14CRLRateLimiter_interval] = a1;

  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for CRLRateLimiter(0);
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for CRLRateLimiter(uint64_t a1)
{
  uint64_t result;

  result = qword_10140E340;
  if (!qword_10140E340)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLRateLimiter);
  return result;
}

void CRLRateLimiter.exec(_:)(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  double v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __n128 v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  void *v46;
  __n128 v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  uint64_t v67;
  double *v68;
  _QWORD aBlock[5];
  uint64_t v70;
  char v71[32];

  v66 = a1;
  v67 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v62 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  __chkstk_darwin(v5);
  v59 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchTime(0);
  v58 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v57 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v64 = (char *)&v55 - v9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v55 - v15;
  v17 = objc_msgSend((id)objc_opt_self(NSThread), "isMainThread");
  if ((v17 & 1) == 0)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"exec(_:)", 8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLRateLimiter.swift", 85, 2, 31, "This operation must only be performed on the main thread.", 57, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"exec(_:)", 8, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLRateLimiter.swift", 85, 2u, 31, (uint64_t)"This operation must only be performed on the main thread.", 57, 2u);
    v17 = objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
  }
  Date.init()(v17);
  v18 = v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_lastExecutionTime;
  v19 = swift_beginAccess(v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_lastExecutionTime, v71, 0, 0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v20(v13, v18, v10, v19);
  v21 = Date.timeIntervalSince(_:)(v13);
  v22 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v23 = v22(v13, v10);
  v24 = *(double *)(v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_interval);
  if (v24 <= v21)
  {
    v35 = v66(v23);
    Date.init()(v35);
    v36 = swift_beginAccess(v18, aBlock, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v11 + 40))(v18, v13, v10, v36);
    swift_endAccess(aBlock);
    v37 = (_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
    v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
    v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock + 8);
    *v37 = 0;
    v37[1] = 0;
    goto LABEL_7;
  }
  v25 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
  v26 = v2;
  v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
  v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock + 8);
  if (v28)
  {
    v29 = swift_allocObject(&unk_1012A0540, 32, 7);
    *(_QWORD *)(v29 + 16) = v28;
    *(_QWORD *)(v29 + 24) = v27;
    sub_1004C0F54(v28, v27);
    sub_1004C1024((uint64_t)sub_10054E858, v29);
    v30 = *v25;
    v31 = v25[1];
    v32 = v67;
    *v25 = (uint64_t)v66;
    v25[1] = v32;
    swift_retain(v32);
    v33 = v30;
    v34 = v31;
LABEL_7:
    sub_1004C1024(v33, v34);
    v22(v16, v10);
    return;
  }
  v56 = v26;
  sub_1004C0F54(0, v27);
  sub_1004C1024(0, 0);
  v38 = *v25;
  v39 = v25[1];
  v40 = v67;
  *v25 = (uint64_t)v66;
  v25[1] = v40;
  swift_retain(v40);
  sub_1004C1024(v38, v39);
  v67 = *(_QWORD *)(v56 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_queue);
  v41 = v57;
  static DispatchTime.now()(v42);
  v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v13, v18, v10);
  v44 = Date.timeIntervalSinceNow.getter(v43);
  v22(v13, v10);
  + infix(_:_:)(v41, v24 - v44);
  v66 = *(uint64_t (**)(uint64_t))(v58 + 8);
  ((void (*)(char *, uint64_t))v66)(v41, v65);
  v45 = swift_allocObject(&unk_1012A04F0, 24, 7);
  swift_unknownObjectWeakInit(v45 + 16);
  aBlock[4] = sub_100CEE240;
  v70 = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_1012A0508;
  v46 = _Block_copy(aBlock);
  v47 = swift_retain(v45);
  v48 = v59;
  static DispatchQoS.unspecified.getter(v47);
  v68 = _swiftEmptyArrayStorage;
  v49 = sub_1004CB65C();
  v50 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v51 = sub_100503E88();
  v52 = v62;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v50, v51, v3, v49);
  v53 = v64;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v64, v48, v52, v46);
  _Block_release(v46);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v3);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v61);
  ((void (*)(char *, uint64_t))v66)(v53, v65);
  v22(v16, v10);
  v54 = v70;
  swift_release(v45);
  swift_release(v54);
}

uint64_t sub_100CEE0F0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100CEE114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t Strong;
  char *v7;
  uint64_t *v8;
  void (*v9)(__n128);
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  _BYTE v17[24];
  char v18[24];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v7 = (char *)Strong;
    v8 = (uint64_t *)(Strong + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
    v9 = *(void (**)(__n128))(Strong + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
    if (v9)
    {
      v10 = v8[1];
      v11 = swift_retain(v10);
      v9(v11);
      sub_1004C1024((uint64_t)v9, v10);
      v12 = *v8;
    }
    else
    {
      v12 = 0;
    }
    v13 = v8[1];
    *v8 = 0;
    v8[1] = 0;
    v14 = sub_1004C1024(v12, v13);
    Date.init()(v14);
    v15 = &v7[OBJC_IVAR____TtC8Freeform14CRLRateLimiter_lastExecutionTime];
    v16 = swift_beginAccess(&v7[OBJC_IVAR____TtC8Freeform14CRLRateLimiter_lastExecutionTime], v17, 33, 0);
    (*(void (**)(char *, _BYTE *, uint64_t, __n128))(v3 + 40))(v15, v5, v2, v16);
    swift_endAccess(v17);

  }
}

void sub_100CEE240()
{
  uint64_t v0;

  sub_100CEE114(v0);
}

double sub_100CEE248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100CEE258(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void CRLRateLimiter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Freeform.CRLRateLimiter", 23, "init()", 6, 0);
  __break(1u);
}

id CRLRateLimiter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLRateLimiter(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100CEE3A8()
{
  return type metadata accessor for CRLRateLimiter(0);
}

uint64_t sub_100CEE3B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_100F32320;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100CEE444(uint64_t a1, uint64_t (**a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void (*v22)(char *, uint64_t, uint64_t, __n128);
  double v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  double v26;
  void (*v27)(char *, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __n128 v46;
  uint64_t v47;
  double v48;
  char *v49;
  uint64_t v50;
  void *v51;
  __n128 v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  _QWORD aBlock[5];
  uint64_t v76;
  char v77[32];

  v72 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v69 = *(_QWORD *)(v3 - 8);
  v70 = v3;
  __chkstk_darwin(v3);
  v68 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  __chkstk_darwin(v5);
  v65 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchTime(0);
  v63 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v62 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v64 = (char *)v60 - v9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v60 - v15;
  v73 = swift_allocObject(&unk_1012A0568, 24, 7);
  *(_QWORD *)(v73 + 16) = a2;
  v17 = (void *)objc_opt_self(NSThread);
  _Block_copy(a2);
  v18 = objc_msgSend(v17, "isMainThread");
  if ((v18 & 1) == 0)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"exec(_:)", 8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLRateLimiter.swift", 85, 2, 31, "This operation must only be performed on the main thread.", 57, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"exec(_:)", 8, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLRateLimiter.swift", 85, 2u, 31, (uint64_t)"This operation must only be performed on the main thread.", 57, 2u);
    v18 = objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
  }
  Date.init()(v18);
  v19 = v72;
  v20 = v72 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_lastExecutionTime;
  v21 = swift_beginAccess(v72 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_lastExecutionTime, v77, 0, 0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v22(v13, v20, v10, v21);
  v23 = Date.timeIntervalSince(_:)(v13);
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v13, v10);
  v25 = v19;
  v26 = *(double *)(v19 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_interval);
  if (v26 <= v23)
  {
    v36 = a2[2](a2);
    Date.init()(v36);
    v37 = swift_beginAccess(v20, aBlock, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v11 + 40))(v20, v13, v10, v37);
    swift_endAccess(aBlock);
    v38 = (_QWORD *)(v19 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
    v39 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
    v40 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock + 8);
    *v38 = 0;
    v38[1] = 0;
    sub_1004C1024(v39, v40);
    v24(v16, v10);
    v35 = v73;
  }
  else
  {
    v27 = v24;
    v28 = (uint64_t *)(v25 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
    v30 = *(_QWORD *)(v25 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock);
    v29 = *(_QWORD *)(v25 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock + 8);
    if (v30)
    {
      v31 = swift_allocObject(&unk_1012A05B8, 32, 7);
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = v29;
      sub_1004C0F54(v30, v29);
      sub_1004C1024((uint64_t)sub_1005A46E8, v31);
      v32 = *v28;
      v33 = v28[1];
      v34 = v73;
      *v28 = (uint64_t)sub_100565828;
      v28[1] = v34;
      swift_retain(v34);
      sub_1004C1024(v32, v33);
      v27(v16, v10);
      v35 = v34;
    }
    else
    {
      v41 = v25;
      sub_1004C0F54(0, *(_QWORD *)(v25 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_currentExecBlock + 8));
      sub_1004C1024(0, 0);
      v42 = *v28;
      v43 = v28[1];
      v44 = v73;
      *v28 = (uint64_t)sub_100565828;
      v28[1] = v44;
      swift_retain(v44);
      sub_1004C1024(v42, v43);
      v60[1] = *(_QWORD *)(v41 + OBJC_IVAR____TtC8Freeform14CRLRateLimiter_queue);
      v45 = v62;
      static DispatchTime.now()(v46);
      v47 = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v13, v20, v10);
      v48 = Date.timeIntervalSinceNow.getter(v47);
      v61 = v27;
      v27(v13, v10);
      v49 = v64;
      + infix(_:_:)(v45, v26 - v48);
      v63 = *(_QWORD *)(v63 + 8);
      ((void (*)(char *, uint64_t))v63)(v45, v71);
      v50 = swift_allocObject(&unk_1012A04F0, 24, 7);
      swift_unknownObjectWeakInit(v50 + 16);
      aBlock[4] = sub_100CEE240;
      v76 = v50;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = *(_QWORD *)"";
      aBlock[2] = sub_1005D2FC0;
      aBlock[3] = &unk_1012A0580;
      v51 = _Block_copy(aBlock);
      v52 = swift_retain(v50);
      v53 = v65;
      static DispatchQoS.unspecified.getter(v52);
      v74 = _swiftEmptyArrayStorage;
      v54 = sub_1004CB65C();
      v55 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
      v56 = sub_100503E88();
      v57 = v68;
      v58 = v70;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v55, v56, v70, v54);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v49, v53, v57, v51);
      _Block_release(v51);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v57, v58);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v67);
      ((void (*)(char *, uint64_t))v63)(v49, v71);
      v61(v16, v10);
      v59 = v76;
      swift_release(v73);
      swift_release(v50);
      v35 = v59;
    }
  }
  swift_release(v35);
}

uint64_t sub_100CEEA68()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CEEA8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_100CEEABC()
{
  uint64_t v0;
  id v1;
  CGColorSpace *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  id v7;
  _BYTE v9[128];
  _OWORD v10[5];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  _OWORD v27[5];
  uint64_t v28;
  _BYTE v29[16];
  float v30;
  uint64_t v31;

  sub_1004C4938(v0 + 232, (uint64_t)v9, (uint64_t *)&unk_1013F02D0);
  sub_1004C4938((uint64_t)v9, (uint64_t)&v12, (uint64_t *)&unk_1013F02D0);
  if (sub_1005E3F34((uint64_t)&v12) == 1)
    return 0;
  v24 = v16;
  v25 = v17;
  v26[0] = v18;
  v26[1] = v19;
  v20 = v12;
  v21 = v13;
  v22 = v14;
  v23 = v15;
  sub_1005E40F4();
  v27[2] = v14;
  v27[3] = v15;
  v27[4] = v16;
  v28 = v17;
  v27[0] = v12;
  v27[1] = v13;
  v10[0] = v12;
  v10[1] = v13;
  v10[3] = v15;
  v10[4] = v16;
  v10[2] = v14;
  v11 = v17;
  sub_1005E4130(v27);
  v2 = sub_1006C52C0((uint64_t)v10);
  v3 = *((float *)&v25 + 2);
  v4 = *((float *)&v25 + 3);
  v5 = *(float *)v26;
  v6 = *((float *)v26 + 1);
  sub_1004C4938((uint64_t)v26 + 8, (uint64_t)v29, &qword_1013E6B28);
  sub_1004C4938((uint64_t)v29, (uint64_t)&v30, &qword_1013E6B28);
  if (v31)
    v7 = objc_msgSend(objc_allocWithZone((Class)CRLCurvedShadow), "initWithOffset:angle:radius:curve:opacity:color:enabled:", v2, 1, v4, v3, v5, v30, v6);
  else
    v7 = objc_msgSend(objc_allocWithZone((Class)CRLDropShadow), "initWithAngle:offset:radius:opacity:color:enabled:", v2, 1, v3, v4, v5, v6);
  v1 = v7;

  return v1;
}

uint64_t sub_100CEEC80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v19[29];
  _BYTE v20[128];
  _BYTE v21[240];
  char v22;

  v3 = v1;
  v5 = sub_1004B804C(&qword_10140E3B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1004BB5A4(a1, v9);
  v11 = sub_100CF0C0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLMediaPresetData.CodingKeys, &type metadata for CRLMediaPresetData.CodingKeys, v11, v9, v10);
  sub_1004C4938(v3, (uint64_t)v21, (uint64_t *)&unk_1013F1530);
  sub_1004C4938((uint64_t)v21, (uint64_t)v19, (uint64_t *)&unk_1013F1530);
  v22 = 0;
  v12 = sub_1008BDDE4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v22, v5, &type metadata for CRLStrokeData, v12);
  if (!v2)
  {
    sub_1004C4938(v3 + 232, (uint64_t)v20, (uint64_t *)&unk_1013F02D0);
    sub_1004C4938((uint64_t)v20, (uint64_t)v19, (uint64_t *)&unk_1013F02D0);
    v22 = 1;
    v13 = sub_10080BB28();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v22, v5, &type metadata for CRLShadowData, v13);
    v14 = *(float *)(v3 + 360);
    LOBYTE(v19[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v5, v14);
    v19[0] = *(_QWORD *)(v3 + 368);
    v22 = 3;
    v15 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v16 = sub_1004F31B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v22, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

BOOL sub_100CEEE84(char *a1, char *a2)
{
  return qword_100F32730[*a1] == qword_100F32730[*a2];
}

Swift::Int sub_100CEEEA8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_100F32730[v1]);
  return Hasher._finalize()();
}

void sub_100CEEEF4()
{
  char *v0;

  Hasher._combine(_:)(qword_100F32730[*v0]);
}

Swift::Int sub_100CEEF28(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100F32730[v2]);
  return Hasher._finalize()();
}

void sub_100CEEF70(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100F32730[*v1];
}

uint64_t sub_100CEEF88()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100CEEFBC + 4 * byte_100F32340[*v0]))(0x6144656B6F727473, 0xEA00000000006174);
}

uint64_t sub_100CEEFBC()
{
  return 0x6144776F64616873;
}

uint64_t sub_100CEEFD0()
{
  return 0x615272656E726F63;
}

unint64_t sub_100CEEFF0()
{
  return 0xD000000000000010;
}

uint64_t sub_100CEF00C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100CF0D78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100CEF030()
{
  char *v0;

  return qword_100F32730[*v0];
}

void sub_100CEF048(_QWORD *a1@<X8>)
{
  *a1 = &off_101263E00;
}

uint64_t sub_100CEF058(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100CF0BC4();
  v5 = sub_100CF0C0C();
  return static CodingKey<>.intCases.getter(a1, a2, v4, v5);
}

uint64_t sub_100CEF09C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100CF0C0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100CEF0C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100CF0C0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100CEF0EC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 368));
}

uint64_t sub_100CEF0F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 368));
  *(_QWORD *)(v1 + 368) = a1;
  return result;
}

Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion (__swiftcall *sub_100CEF11C())(CKRecordID recordID, Swift::String recordType)
{
  return SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:);
}

uint64_t sub_100CEF12C(void *__src, const void *a2)
{
  _BYTE v4[376];
  _BYTE __dst[376];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return sub_100CEEC7C(v4, __dst) & 1;
}

void sub_100CEF180(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE __src[376];

  sub_100CF0F5C(a1, __src);
  if (!v2)
    memcpy(a2, __src, 0x178uLL);
}

uint64_t sub_100CEF1D0(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[376];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_100CEEC80(a1);
}

uint64_t sub_100CEF220(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100CF1344();
  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_100CEF260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = sub_100CF0AE4();
  v7 = sub_100CF1388();
  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_100CEF2BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100CF1344();
  return CRExtendableValueStruct.visitReferences(_:)(a1, a2, v4);
}

uint64_t sub_100CEF2F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100CF0D34();
  return CRValueStruct.init(from:)(a1, a2, v4);
}

uint64_t sub_100CEF340(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100CF0D34();
  return CRValueStruct.encode(to:)(a1, a2, v4);
}

uint64_t sub_100CEF384(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100CF0D34();
  return CRValueStruct.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_100CEF3BC(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  _OWORD v8[14];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[8];
  _OWORD v26[8];
  _BYTE v27[128];
  _QWORD v28[16];
  _QWORD v29[16];
  _OWORD v30[8];
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[14];
  uint64_t v34;
  _OWORD v35[14];
  uint64_t v36;
  _QWORD v37[29];
  _QWORD v38[29];
  _BYTE v39[232];

  sub_1004C4938(a1, (uint64_t)v37, (uint64_t *)&unk_1013F1530);
  sub_1004C4938(a2, (uint64_t)v38, (uint64_t *)&unk_1013F1530);
  sub_1004C4938((uint64_t)v37, (uint64_t)v39, (uint64_t *)&unk_1013F1530);
  if (sub_1004F276C((uint64_t)v39) == 1)
  {
    sub_1004C4938((uint64_t)v38, (uint64_t)v30, (uint64_t *)&unk_1013F1530);
    if (sub_1004F276C((uint64_t)v30) == 1)
      goto LABEL_7;
LABEL_5:
    sub_1004C4938((uint64_t)v37, (uint64_t)v30, (uint64_t *)&unk_1013F1530);
    sub_1004C4938((uint64_t)v38, (uint64_t)&v32, (uint64_t *)&unk_1013F1530);
    sub_1008D3994(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C3830);
    sub_1008D3994(v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C3830);
    sub_1004F2784((uint64_t)v30);
    goto LABEL_15;
  }
  sub_1004C4938((uint64_t)v38, (uint64_t)v30, (uint64_t *)&unk_1013F1530);
  if (sub_1004F276C((uint64_t)v30) == 1)
    goto LABEL_5;
  sub_1004C4938((uint64_t)v37, (uint64_t)v8, (uint64_t *)&unk_1013F1530);
  v33[11] = v8[11];
  v33[12] = v8[12];
  v33[13] = v8[13];
  v33[7] = v8[7];
  v33[8] = v8[8];
  v33[9] = v8[9];
  v33[10] = v8[10];
  v33[3] = v8[3];
  v33[4] = v8[4];
  v33[5] = v8[5];
  v33[6] = v8[6];
  v33[0] = v8[0];
  v33[1] = v8[1];
  v34 = v9;
  v33[2] = v8[2];
  sub_1004C4938((uint64_t)v38, (uint64_t)&v10, (uint64_t *)&unk_1013F1530);
  v35[11] = v21;
  v35[12] = v22;
  v35[13] = v23;
  v35[7] = v17;
  v35[8] = v18;
  v35[9] = v19;
  v35[10] = v20;
  v35[3] = v13;
  v35[4] = v14;
  v35[5] = v15;
  v35[6] = v16;
  v35[0] = v10;
  v35[1] = v11;
  v36 = v24;
  v35[2] = v12;
  sub_1008D3994(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C3830);
  sub_1008D3994(v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C3830);
  v4 = sub_1008BD558(v33, v35);
  sub_1008D3994(v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C35DC);
  sub_1008D3994(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C35DC);
  if ((v4 & 1) == 0)
    goto LABEL_15;
LABEL_7:
  sub_1004C4938(a1 + 232, (uint64_t)v28, (uint64_t *)&unk_1013F02D0);
  sub_1004C4938(a2 + 232, (uint64_t)v29, (uint64_t *)&unk_1013F02D0);
  sub_1004C4938((uint64_t)v28, (uint64_t)v8, (uint64_t *)&unk_1013F02D0);
  if (sub_1005E3F34((uint64_t)v8) != 1)
  {
    sub_1004C4938((uint64_t)v29, (uint64_t)v27, (uint64_t *)&unk_1013F02D0);
    if (sub_1005E3F34((uint64_t)v27) == 1)
      goto LABEL_11;
    sub_1004C4938((uint64_t)v28, (uint64_t)v25, (uint64_t *)&unk_1013F02D0);
    v14 = v25[4];
    v15 = v25[5];
    v16 = v25[6];
    v17 = v25[7];
    v10 = v25[0];
    v11 = v25[1];
    v12 = v25[2];
    v13 = v25[3];
    sub_1004C4938((uint64_t)v29, (uint64_t)v26, (uint64_t *)&unk_1013F02D0);
    v30[4] = v26[4];
    v30[5] = v26[5];
    v30[6] = v26[6];
    v30[7] = v26[7];
    v30[0] = v26[0];
    v30[1] = v26[1];
    v30[2] = v26[2];
    v30[3] = v26[3];
    sub_1009351AC(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C396C);
    sub_1009351AC(v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C396C);
    v5 = sub_10080B508(&v10, v30);
    sub_1009351AC(v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C3718);
    sub_1009351AC(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C3718);
    if ((v5 & 1) != 0)
      goto LABEL_13;
LABEL_15:
    v6 = 0;
    return v6 & 1;
  }
  sub_1004C4938((uint64_t)v29, (uint64_t)v30, (uint64_t *)&unk_1013F02D0);
  if (sub_1005E3F34((uint64_t)v30) != 1)
  {
LABEL_11:
    sub_1004C4938((uint64_t)v28, (uint64_t)v30, (uint64_t *)&unk_1013F02D0);
    sub_1004C4938((uint64_t)v29, (uint64_t)&v31, (uint64_t *)&unk_1013F02D0);
    sub_1009351AC(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C396C);
    sub_1009351AC(v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C396C);
    sub_1005E3F4C((uint64_t)v30);
    goto LABEL_15;
  }
LABEL_13:
  if (*(float *)(a1 + 360) != *(float *)(a2 + 360))
    goto LABEL_15;
  v6 = sub_100C9E04C(*(_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368));
  return v6 & 1;
}

unint64_t sub_100CEF7E0(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(__n128);
  char *v12;
  __n128 v13;
  Class isa;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  void (*v25)(__n128);
  char *v26;
  __n128 v27;
  Class v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE v40[232];
  _OWORD v41[14];
  uint64_t v42;
  _OWORD v43[14];
  uint64_t v44;

  v2 = v1;
  v38 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = (unint64_t)_swiftEmptyArrayStorage;
  v37 = a1;
  sub_1004C4938(a1, (uint64_t)v40, (uint64_t *)&unk_1013F1530);
  sub_1004C4938((uint64_t)v40, (uint64_t)v43, (uint64_t *)&unk_1013F1530);
  v7 = 0;
  if (sub_1004F276C((uint64_t)v43) != 1)
  {
    v41[12] = v43[12];
    v41[13] = v43[13];
    v42 = v44;
    v41[8] = v43[8];
    v41[9] = v43[9];
    v41[10] = v43[10];
    v41[11] = v43[11];
    v41[4] = v43[4];
    v41[5] = v43[5];
    v41[6] = v43[6];
    v41[7] = v43[7];
    v41[0] = v43[0];
    v41[1] = v43[1];
    v41[2] = v43[2];
    v41[3] = v43[3];
    v7 = sub_1008BEA4C((uint64_t)v41, 0);
  }
  v8 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetStroke(0));
  v9 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v11 = *(void (**)(__n128))(*(_QWORD *)v10 + 256);
  v12 = v2;
  v13 = swift_retain(v10);
  v11(v13);
  swift_release(v10);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16 = v38;
  v36 = v15;
  v15(v6, v38);
  v17 = objc_msgSend(v8, "initWithId:stroke:", isa, v7);

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
  v20 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v19 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v20 >= v19 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
  v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
  specialized Array._endMutation()(v21);
  v22 = sub_100CEEABC();
  v23 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetShadow(0));
  v24 = *(_QWORD *)&v2[v9];
  v25 = *(void (**)(__n128))(*(_QWORD *)v24 + 256);
  v26 = v12;
  v27 = swift_retain(v24);
  v25(v27);
  swift_release(v24);
  v28 = UUID._bridgeToObjectiveC()().super.isa;
  v36(v6, v16);
  v29 = objc_msgSend(v23, "initWithId:shadow:", v28, v22);

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
  v32 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v31 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v32 >= v31 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
  v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v29);
  specialized Array._endMutation()(v33);
  return v39;
}

uint64_t destroy for CRLMediaPresetData(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[12];
  if (v2)
  {
    swift_bridgeObjectRelease(a1[6]);
    swift_bridgeObjectRelease(a1[9]);
    v3 = a1[11];
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v3);
    v4 = a1[18];
    if (v4)
    {
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(a1[20]);
    }
    swift_bridgeObjectRelease(a1[23]);
    v5 = a1[25];
    if (v5)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(a1[27]);
    }
    swift_bridgeObjectRelease(a1[28]);
  }
  v6 = a1[39];
  if (v6)
  {
    swift_bridgeObjectRelease(a1[33]);
    swift_bridgeObjectRelease(a1[36]);
    v7 = a1[38];
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(a1[43]);
    swift_bridgeObjectRelease(a1[44]);
  }
  return swift_bridgeObjectRelease(a1[46]);
}

uint64_t initializeWithCopy for CRLMediaPresetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 + 96);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    v5 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v6;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    v7 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 96) = v4;
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
    v9 = (_OWORD *)(a2 + 144);
    v8 = *(_QWORD *)(a2 + 144);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v4);
    if (v8)
    {
      *(_QWORD *)(a1 + 144) = v8;
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
      v10 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 160) = v10;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      *(_OWORD *)(a1 + 144) = *v9;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    }
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    v18 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v18;
    v19 = *(_QWORD *)(a2 + 200);
    swift_bridgeObjectRetain(v18);
    if (v19)
    {
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = v19;
      *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
      v20 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 216) = v20;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v21;
    }
    v22 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v22;
    swift_bridgeObjectRetain(v22);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v11;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    v13 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
  }
  v23 = (_DWORD *)(a1 + 232);
  v24 = (_DWORD *)(a2 + 232);
  v25 = *(_QWORD *)(a2 + 312);
  if (v25)
  {
    *v23 = *v24;
    *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    *(_QWORD *)(a1 + 252) = *(_QWORD *)(a2 + 252);
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    v26 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 264) = v26;
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    v27 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 288) = v27;
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
    v28 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 304) = v28;
    *(_QWORD *)(a1 + 312) = v25;
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
    v29 = *(_QWORD *)(a2 + 344);
    v30 = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = v29;
    *(_QWORD *)(a1 + 352) = v30;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v31;
    v32 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v32;
    v33 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(a1 + 248) = v33;
    v34 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v34;
  }
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  v35 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 368) = v35;
  swift_bridgeObjectRetain(v35);
  return a1;
}

uint64_t assignWithCopy for CRLMediaPresetData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _DWORD *v74;
  int *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v4 = a2[12];
  if (*(_QWORD *)(a1 + 96))
  {
    if (v4)
    {
      v5 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 4);
      *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
      *(_DWORD *)(a1 + 16) = v5;
      v6 = a2[3];
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      *(_QWORD *)(a1 + 24) = v6;
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
      *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
      *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
      v7 = a2[6];
      *(_QWORD *)(a1 + 48) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
      *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
      *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
      v8 = a2[9];
      *(_QWORD *)(a1 + 72) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
      v9 = a2[11];
      *(_QWORD *)(a1 + 88) = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease();
      v10 = a2[12];
      *(_QWORD *)(a1 + 96) = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease();
      v11 = (_OWORD *)(a1 + 144);
      v12 = *(_QWORD *)(a1 + 144);
      *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
      v13 = a2[14];
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      *(_QWORD *)(a1 + 112) = v13;
      v14 = a2[16];
      *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
      *(_QWORD *)(a1 + 128) = v14;
      *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
      v16 = a2 + 18;
      v15 = a2[18];
      if (v12)
      {
        if (v15)
        {
          *(_QWORD *)(a1 + 144) = v15;
          swift_bridgeObjectRetain(v15);
          swift_bridgeObjectRelease();
          *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
          v17 = a2[20];
          *(_QWORD *)(a1 + 160) = v17;
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1008BAD90((_QWORD *)(a1 + 144));
          v52 = a2[20];
          *v11 = *v16;
          *(_QWORD *)(a1 + 160) = v52;
        }
      }
      else if (v15)
      {
        *(_QWORD *)(a1 + 144) = v15;
        *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
        v40 = a2[20];
        *(_QWORD *)(a1 + 160) = v40;
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v40);
      }
      else
      {
        v61 = *v16;
        *(_QWORD *)(a1 + 160) = a2[20];
        *v11 = v61;
      }
      v62 = a2[21];
      *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
      *(_QWORD *)(a1 + 168) = v62;
      v63 = a2[23];
      *(_QWORD *)(a1 + 184) = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease();
      v64 = (_OWORD *)(a1 + 192);
      v65 = a2 + 24;
      v66 = a2[25];
      if (*(_QWORD *)(a1 + 200))
      {
        if (v66)
        {
          *(_QWORD *)(a1 + 192) = a2[24];
          v67 = a2[25];
          *(_QWORD *)(a1 + 200) = v67;
          swift_bridgeObjectRetain(v67);
          swift_bridgeObjectRelease();
          *(_DWORD *)(a1 + 208) = *((_DWORD *)a2 + 52);
          *(_BYTE *)(a1 + 212) = *((_BYTE *)a2 + 212);
          v68 = a2[27];
          *(_QWORD *)(a1 + 216) = v68;
          swift_bridgeObjectRetain(v68);
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1008BADC0(a1 + 192);
          v71 = *((_OWORD *)a2 + 13);
          *v64 = *v65;
          *(_OWORD *)(a1 + 208) = v71;
        }
      }
      else if (v66)
      {
        *(_QWORD *)(a1 + 192) = a2[24];
        v69 = a2[25];
        *(_QWORD *)(a1 + 200) = v69;
        *(_DWORD *)(a1 + 208) = *((_DWORD *)a2 + 52);
        *(_BYTE *)(a1 + 212) = *((_BYTE *)a2 + 212);
        v70 = a2[27];
        *(_QWORD *)(a1 + 216) = v70;
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v70);
      }
      else
      {
        v72 = *((_OWORD *)a2 + 13);
        *v64 = *v65;
        *(_OWORD *)(a1 + 208) = v72;
      }
      v73 = a2[28];
      *(_QWORD *)(a1 + 224) = v73;
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1009AF5B4((_QWORD *)a1);
      v30 = *((_OWORD *)a2 + 1);
      v29 = *((_OWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v30;
      *(_OWORD *)(a1 + 32) = v29;
      v31 = *((_OWORD *)a2 + 6);
      v33 = *((_OWORD *)a2 + 3);
      v32 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 96) = v31;
      *(_OWORD *)(a1 + 48) = v33;
      *(_OWORD *)(a1 + 64) = v32;
      v34 = *((_OWORD *)a2 + 10);
      v36 = *((_OWORD *)a2 + 7);
      v35 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 160) = v34;
      *(_OWORD *)(a1 + 112) = v36;
      *(_OWORD *)(a1 + 128) = v35;
      v38 = *((_OWORD *)a2 + 12);
      v37 = *((_OWORD *)a2 + 13);
      v39 = *((_OWORD *)a2 + 11);
      *(_QWORD *)(a1 + 224) = a2[28];
      *(_OWORD *)(a1 + 192) = v38;
      *(_OWORD *)(a1 + 208) = v37;
      *(_OWORD *)(a1 + 176) = v39;
    }
  }
  else if (v4)
  {
    v18 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = v18;
    LODWORD(v18) = *((_DWORD *)a2 + 4);
    *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
    *(_DWORD *)(a1 + 16) = v18;
    v19 = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 24) = v19;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
    v20 = a2[6];
    *(_QWORD *)(a1 + 48) = v20;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 17);
    v21 = a2[9];
    *(_QWORD *)(a1 + 72) = v21;
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    v22 = a2[11];
    *(_QWORD *)(a1 + 88) = v22;
    v23 = a2[12];
    *(_QWORD *)(a1 + 96) = v23;
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    v24 = a2[14];
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_QWORD *)(a1 + 112) = v24;
    v25 = a2[16];
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    *(_QWORD *)(a1 + 128) = v25;
    *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 35);
    v27 = (__int128 *)(a2 + 18);
    v26 = a2[18];
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    if (v26)
    {
      *(_QWORD *)(a1 + 144) = v26;
      *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
      v28 = a2[20];
      *(_QWORD *)(a1 + 160) = v28;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v28);
    }
    else
    {
      v53 = *v27;
      *(_QWORD *)(a1 + 160) = a2[20];
      *(_OWORD *)(a1 + 144) = v53;
    }
    v54 = a2[21];
    *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
    *(_QWORD *)(a1 + 168) = v54;
    v55 = a2[23];
    *(_QWORD *)(a1 + 184) = v55;
    v56 = a2[25];
    swift_bridgeObjectRetain(v55);
    if (v56)
    {
      *(_QWORD *)(a1 + 192) = a2[24];
      v57 = a2[25];
      *(_QWORD *)(a1 + 200) = v57;
      *(_DWORD *)(a1 + 208) = *((_DWORD *)a2 + 52);
      *(_BYTE *)(a1 + 212) = *((_BYTE *)a2 + 212);
      v58 = a2[27];
      *(_QWORD *)(a1 + 216) = v58;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v58);
    }
    else
    {
      v59 = *((_OWORD *)a2 + 13);
      *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
      *(_OWORD *)(a1 + 208) = v59;
    }
    v60 = a2[28];
    *(_QWORD *)(a1 + 224) = v60;
    swift_bridgeObjectRetain(v60);
  }
  else
  {
    v41 = *(_OWORD *)a2;
    v42 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v42;
    *(_OWORD *)a1 = v41;
    v43 = *((_OWORD *)a2 + 3);
    v44 = *((_OWORD *)a2 + 4);
    v45 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v45;
    *(_OWORD *)(a1 + 48) = v43;
    *(_OWORD *)(a1 + 64) = v44;
    v46 = *((_OWORD *)a2 + 7);
    v47 = *((_OWORD *)a2 + 8);
    v48 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v48;
    *(_OWORD *)(a1 + 112) = v46;
    *(_OWORD *)(a1 + 128) = v47;
    v49 = *((_OWORD *)a2 + 11);
    v50 = *((_OWORD *)a2 + 12);
    v51 = *((_OWORD *)a2 + 13);
    *(_QWORD *)(a1 + 224) = a2[28];
    *(_OWORD *)(a1 + 192) = v50;
    *(_OWORD *)(a1 + 208) = v51;
    *(_OWORD *)(a1 + 176) = v49;
  }
  v74 = (_DWORD *)(a1 + 232);
  v75 = (int *)(a2 + 29);
  v76 = a2[39];
  if (*(_QWORD *)(a1 + 312))
  {
    if (v76)
    {
      v77 = *v75;
      *(_BYTE *)(a1 + 236) = *((_BYTE *)a2 + 236);
      *v74 = v77;
      v78 = a2[30];
      *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
      *(_QWORD *)(a1 + 240) = v78;
      *(_DWORD *)(a1 + 252) = *((_DWORD *)a2 + 63);
      *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
      *(_DWORD *)(a1 + 260) = *((_DWORD *)a2 + 65);
      v79 = a2[33];
      *(_QWORD *)(a1 + 264) = v79;
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 68);
      *(_DWORD *)(a1 + 276) = *((_DWORD *)a2 + 69);
      *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
      *(_DWORD *)(a1 + 284) = *((_DWORD *)a2 + 71);
      v80 = a2[36];
      *(_QWORD *)(a1 + 288) = v80;
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 296) = *((_DWORD *)a2 + 74);
      v81 = a2[38];
      *(_QWORD *)(a1 + 304) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease();
      v82 = a2[39];
      *(_QWORD *)(a1 + 312) = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
      *(_DWORD *)(a1 + 324) = *((_DWORD *)a2 + 81);
      *(_DWORD *)(a1 + 328) = *((_DWORD *)a2 + 82);
      *(_DWORD *)(a1 + 332) = *((_DWORD *)a2 + 83);
      *(_DWORD *)(a1 + 336) = *((_DWORD *)a2 + 84);
      v83 = a2[43];
      *(_QWORD *)(a1 + 344) = v83;
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRelease();
      v84 = a2[44];
      *(_QWORD *)(a1 + 352) = v84;
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1009AF5E8((_QWORD *)(a1 + 232));
      v93 = *(_OWORD *)(a2 + 35);
      v95 = *(_OWORD *)v75;
      v94 = *(_OWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
      *(_OWORD *)(a1 + 280) = v93;
      *(_OWORD *)v74 = v95;
      *(_OWORD *)(a1 + 248) = v94;
      v96 = *(_OWORD *)(a2 + 43);
      v98 = *(_OWORD *)(a2 + 37);
      v97 = *(_OWORD *)(a2 + 39);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
      *(_OWORD *)(a1 + 344) = v96;
      *(_OWORD *)(a1 + 296) = v98;
      *(_OWORD *)(a1 + 312) = v97;
    }
  }
  else if (v76)
  {
    v85 = *v75;
    *(_BYTE *)(a1 + 236) = *((_BYTE *)a2 + 236);
    *v74 = v85;
    v86 = a2[30];
    *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
    *(_QWORD *)(a1 + 240) = v86;
    *(_DWORD *)(a1 + 252) = *((_DWORD *)a2 + 63);
    *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
    *(_DWORD *)(a1 + 260) = *((_DWORD *)a2 + 65);
    v87 = a2[33];
    *(_QWORD *)(a1 + 264) = v87;
    *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 68);
    *(_DWORD *)(a1 + 276) = *((_DWORD *)a2 + 69);
    *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
    *(_DWORD *)(a1 + 284) = *((_DWORD *)a2 + 71);
    v88 = a2[36];
    *(_QWORD *)(a1 + 288) = v88;
    *(_DWORD *)(a1 + 296) = *((_DWORD *)a2 + 74);
    v89 = a2[38];
    *(_QWORD *)(a1 + 304) = v89;
    v90 = a2[39];
    *(_QWORD *)(a1 + 312) = v90;
    *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
    *(_DWORD *)(a1 + 324) = *((_DWORD *)a2 + 81);
    *(_DWORD *)(a1 + 328) = *((_DWORD *)a2 + 82);
    *(_DWORD *)(a1 + 332) = *((_DWORD *)a2 + 83);
    *(_DWORD *)(a1 + 336) = *((_DWORD *)a2 + 84);
    v91 = a2[43];
    *(_QWORD *)(a1 + 344) = v91;
    v92 = a2[44];
    *(_QWORD *)(a1 + 352) = v92;
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
  }
  else
  {
    v99 = *(_OWORD *)v75;
    v100 = *(_OWORD *)(a2 + 31);
    v101 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 280) = v101;
    *(_OWORD *)v74 = v99;
    *(_OWORD *)(a1 + 248) = v100;
    v102 = *(_OWORD *)(a2 + 37);
    v103 = *(_OWORD *)(a2 + 39);
    v104 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v104;
    *(_OWORD *)(a1 + 296) = v102;
    *(_OWORD *)(a1 + 312) = v103;
  }
  *(_DWORD *)(a1 + 360) = *((_DWORD *)a2 + 90);
  v105 = a2[46];
  *(_QWORD *)(a1 + 368) = v105;
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for CRLMediaPresetData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x178uLL);
}

uint64_t assignWithTake for CRLMediaPresetData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (!*(_QWORD *)(a1 + 96))
    goto LABEL_7;
  if (!*(_QWORD *)(a2 + 96))
  {
    sub_1009AF5B4((_QWORD *)a1);
LABEL_7:
    v6 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v6;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    v8 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v8;
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    goto LABEL_16;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 144);
  v5 = *(_QWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  if (v5)
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 144) = v4;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    sub_1008BAD90((_QWORD *)(a1 + 144));
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
LABEL_10:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 200))
  {
LABEL_14:
    v14 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v14;
    goto LABEL_15;
  }
  v13 = *(_QWORD *)(a2 + 200);
  if (!v13)
  {
    sub_1008BADC0(a1 + 192);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v13;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRelease();
LABEL_15:
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease();
LABEL_16:
  v15 = (_OWORD *)(a1 + 232);
  v16 = (_OWORD *)(a2 + 232);
  if (!*(_QWORD *)(a1 + 312))
  {
LABEL_20:
    v17 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v17;
    v18 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v18;
    v19 = *(_OWORD *)(a2 + 248);
    *v15 = *v16;
    *(_OWORD *)(a1 + 248) = v19;
    v20 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v20;
    goto LABEL_21;
  }
  if (!*(_QWORD *)(a2 + 312))
  {
    sub_1009AF5E8((_QWORD *)(a1 + 232));
    goto LABEL_20;
  }
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 252) = *(_QWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRelease();
LABEL_21:
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLMediaPresetData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 376))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 368);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLMediaPresetData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 376) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 368) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 376) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLMediaPresetData()
{
  return &type metadata for CRLMediaPresetData;
}

unint64_t sub_100CF0A54()
{
  unint64_t result;

  result = qword_10140E350;
  if (!qword_10140E350)
  {
    result = swift_getWitnessTable(&unk_100F32364, &type metadata for CRLMediaPresetData);
    atomic_store(result, (unint64_t *)&qword_10140E350);
  }
  return result;
}

unint64_t sub_100CF0A9C()
{
  unint64_t result;

  result = qword_10140E358;
  if (!qword_10140E358)
  {
    result = swift_getWitnessTable(&unk_100F323AC, &type metadata for CRLMediaPresetData);
    atomic_store(result, (unint64_t *)&qword_10140E358);
  }
  return result;
}

unint64_t sub_100CF0AE4()
{
  unint64_t result;

  result = qword_10140E360;
  if (!qword_10140E360)
  {
    result = swift_getWitnessTable(&unk_100F3240C, &type metadata for CRLMediaPresetData);
    atomic_store(result, (unint64_t *)&qword_10140E360);
  }
  return result;
}

unint64_t sub_100CF0B34()
{
  unint64_t result;

  result = qword_10140E368;
  if (!qword_10140E368)
  {
    result = swift_getWitnessTable(&unk_100F3248C, &type metadata for CRLMediaPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10140E368);
  }
  return result;
}

unint64_t sub_100CF0B7C()
{
  unint64_t result;

  result = qword_10140E370;
  if (!qword_10140E370)
  {
    result = swift_getWitnessTable(&unk_100F3259C, &type metadata for CRLMediaPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10140E370);
  }
  return result;
}

unint64_t sub_100CF0BC4()
{
  unint64_t result;

  result = qword_10140E378;
  if (!qword_10140E378)
  {
    result = swift_getWitnessTable(&unk_100F32564, &type metadata for CRLMediaPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10140E378);
  }
  return result;
}

unint64_t sub_100CF0C0C()
{
  unint64_t result;

  result = qword_10140E380;
  if (!qword_10140E380)
  {
    result = swift_getWitnessTable(&unk_100F324C4, &type metadata for CRLMediaPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10140E380);
  }
  return result;
}

unint64_t sub_100CF0C54()
{
  unint64_t result;

  result = qword_10140E388;
  if (!qword_10140E388)
  {
    result = swift_getWitnessTable(&unk_100F3253C, &type metadata for CRLMediaPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10140E388);
  }
  return result;
}

unint64_t sub_100CF0C9C()
{
  unint64_t result;

  result = qword_10140E390;
  if (!qword_10140E390)
  {
    result = swift_getWitnessTable(&unk_100F32514, &type metadata for CRLMediaPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10140E390);
  }
  return result;
}

unint64_t sub_100CF0CE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10140E398;
  if (!qword_10140E398)
  {
    v1 = sub_1004CB6A4(&qword_10140E3A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10140E398);
  }
  return result;
}

unint64_t sub_100CF0D34()
{
  unint64_t result;

  result = qword_10140E3A8;
  if (!qword_10140E3A8)
  {
    result = swift_getWitnessTable(&unk_100F32444, &type metadata for CRLMediaPresetData);
    atomic_store(result, (unint64_t *)&qword_10140E3A8);
  }
  return result;
}

uint64_t sub_100CF0D78(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6144656B6F727473 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144656B6F727473, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6144776F64616873 && a2 == 0xEA00000000006174)
  {
    v7 = 0xEA00000000006174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144776F64616873, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x615272656E726F63 && a2 == 0xEC00000073756964)
  {
    v8 = 0xEC00000073756964;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x615272656E726F63, 0xEC00000073756964, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100FAF1E0)
  {
    swift_bridgeObjectRelease(0x8000000100FAF1E0);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100FAF1E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_100CF0F5C(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[47];
  _BYTE v22[383];
  char v23;
  uint64_t v24;
  _QWORD v25[16];
  char v26;
  uint64_t v27;
  _QWORD v28[29];
  char v29;
  uint64_t v30;
  _QWORD v31[48];

  v5 = sub_1004B804C(&qword_10140E3B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[46] = _swiftEmptyDictionarySingleton;
  v9 = a1[3];
  v10 = a1[4];
  v20 = a1;
  sub_1004BB5A4(a1, v9);
  v11 = sub_100CF0C0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLMediaPresetData.CodingKeys, &type metadata for CRLMediaPresetData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = 0;
    v12 = sub_1008BDD9C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for CRLStrokeData, &v29, v5, &type metadata for CRLStrokeData, v12);
    sub_1004C4938((uint64_t)&v30, (uint64_t)v28, (uint64_t *)&unk_1013F1530);
    sub_1004C4938((uint64_t)v28, (uint64_t)v31, (uint64_t *)&unk_1013F1530);
    v26 = 1;
    sub_1008D3994(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C3830);
    v13 = sub_10080BAE0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for CRLShadowData, &v26, v5, &type metadata for CRLShadowData, v13);
    sub_1004C4938((uint64_t)&v27, (uint64_t)v25, (uint64_t *)&unk_1013F02D0);
    sub_1004C4938((uint64_t)v25, (uint64_t)&v31[29], (uint64_t *)&unk_1013F02D0);
    v22[0] = 2;
    sub_1009351AC(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C396C);
    KeyedDecodingContainer.decode(_:forKey:)(v22, v5);
    v15 = v14;
    LODWORD(v31[45]) = v14;
    v16 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v23 = 3;
    v17 = sub_1004F3130();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v23, v5, v16, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease();
    v31[46] = v18;
    sub_1004C4938((uint64_t)v28, (uint64_t)v21, (uint64_t *)&unk_1013F1530);
    sub_1004C4938((uint64_t)v25, (uint64_t)&v21[29], (uint64_t *)&unk_1013F02D0);
    LODWORD(v21[45]) = v15;
    v21[46] = v18;
    sub_1009B0888((uint64_t)v21);
    swift_bridgeObjectRelease();
    sub_1009351AC(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C3718);
    sub_1008D3994(v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C35DC);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v20);
    memcpy(v22, v31, 0x178uLL);
    sub_1009B0994((uint64_t)v22);
    memcpy(a2, v21, 0x178uLL);
  }
}

unint64_t sub_100CF1344()
{
  unint64_t result;

  result = qword_10140E3C0;
  if (!qword_10140E3C0)
  {
    result = swift_getWitnessTable(&unk_100F325EC, &type metadata for CRLMediaPresetData);
    atomic_store(result, (unint64_t *)&qword_10140E3C0);
  }
  return result;
}

unint64_t sub_100CF1388()
{
  unint64_t result;

  result = qword_10140E3C8;
  if (!qword_10140E3C8)
  {
    result = swift_getWitnessTable(&unk_100F325C4, &type metadata for CRLMediaPresetData);
    atomic_store(result, (unint64_t *)&qword_10140E3C8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLMediaPresetData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100CF1418 + 4 * byte_100F32349[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100CF144C + 4 * byte_100F32344[v4]))();
}

uint64_t sub_100CF144C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100CF1454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100CF145CLL);
  return result;
}

uint64_t sub_100CF1468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100CF1470);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100CF1474(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100CF147C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLMediaPresetData.CodingKeys()
{
  return &type metadata for CRLMediaPresetData.CodingKeys;
}

unint64_t sub_100CF149C()
{
  unint64_t result;

  result = qword_10140E3D0;
  if (!qword_10140E3D0)
  {
    result = swift_getWitnessTable(&unk_100F32700, &type metadata for CRLMediaPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10140E3D0);
  }
  return result;
}

uint64_t sub_100CF14E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double v6;
  double v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD v19[31];
  _BYTE v20[256];

  v3 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100479D94(0);
  v8 = objc_msgSend((id)objc_opt_self(CRLPathSource), "pathSourceForShapeType:naturalSize:", 0, v6, v7);
  v9 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(a2);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "initWithString:", v10, swift_bridgeObjectRelease().n128_f64[0]);

  v12 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
  sub_10054F488((uint64_t)v20);
  sub_1004C4938((uint64_t)v20, (uint64_t)v19, &qword_1013E1B50);
  v13 = v8;
  v14 = v11;
  v15 = sub_100CF4294(0, 0, v8, 0, 0, 0, 1, 0, 1, (_QWORD *)1, (void *)1, (void *)1, (void *)1, (char *)v11, v5, v19, 0, 0, 0);

  sub_1004CB800((uint64_t)v5, (uint64_t *)&unk_1013F1500);
  v16 = type metadata accessor for CRLWPShapeItem(0);
  return swift_dynamicCastClassUnconditional(v15, v16, 0, 0, 0);
}

id sub_100CF16DC(uint64_t a1, char a2, void *a3, int a4, uint64_t a5, uint64_t a6, int a7, void *a8, unsigned __int8 a9, _QWORD *a10, void *a11, void *a12, void *a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  id v33;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[248];
  _QWORD v47[32];

  v37 = a7;
  v43 = a4;
  v44 = a3;
  v45 = a1;
  v42 = a13;
  v41 = a12;
  v40 = a11;
  v39 = a10;
  v36 = a9;
  v38 = a2 & 1;
  v18 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = sub_1004B804C(&qword_1013E5380);
  __chkstk_darwin(v21);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AttributedString(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0 || !sub_100CF9A1C(v45))
  {
    sub_1004CB7BC(a14, (uint64_t)v23, &qword_1013E5380);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
    {
      AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
      sub_1004CB800((uint64_t)v23, &qword_1013E5380);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v23, v24);
    }
    v29 = a5;
    v31 = v36;
    v30 = v37;
    sub_1004B8930(0, (unint64_t *)&qword_1013F95A0, NSAttributedString_ptr);
    v28 = (char *)NSAttributedString.init(_:)(v27);
  }
  else
  {
    v28 = 0;
    v29 = a5;
    v31 = v36;
    v30 = v37;
  }
  v32 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v20, 1, 1, v32);
  sub_10054F488((uint64_t)v46);
  sub_1004C4938((uint64_t)v46, (uint64_t)v47, &qword_1013E1B50);
  v33 = sub_100CF4294(v45, v38, v44, v43 & 1, v29, a6, v30 & 1, a8, v31 & 1, v39, v40, v41, v42, v28, v20, v47, 0, 0, 0);

  sub_1004CB800((uint64_t)v20, (uint64_t *)&unk_1013F1500);
  return v33;
}

uint64_t sub_100CF19A8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double v7;
  double v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v15;

  v4 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100479D94(0);
  v9 = objc_msgSend((id)objc_opt_self(CRLPathSource), "pathSourceForShapeType:naturalSize:", 0, v7, v8);
  sub_1004B8460(a1, (uint64_t)v6, type metadata accessor for CRLWPStorageCRDTData);
  v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 0, 1, v10);
  v11 = v9;
  v12 = sub_100CF4294(0, 0, v9, 0, 0, 0, 1, 0, 1, (_QWORD *)1, (void *)1, (void *)1, (void *)1, 0, v6, a2, 0, 0, 0);

  sub_1004CB800((uint64_t)v6, (uint64_t *)&unk_1013F1500);
  v13 = type metadata accessor for CRLWPShapeItem(0);
  return swift_dynamicCastClassUnconditional(v12, v13, 0, 0, 0);
}

uint64_t sub_100CF1B2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, char *, _QWORD, uint64_t);
  id v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board)
                            + OBJC_IVAR____TtC8Freeform8CRLBoard_store)
                + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = type metadata accessor for CRLUUIDRemapHelper();
  v9 = swift_allocObject(v8, 40, 7);
  *(_QWORD *)(v9 + 24) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v9 + 32) = _swiftEmptyDictionarySingleton;
  *(_BYTE *)(v9 + 16) = 1;
  v10 = *(uint64_t (**)(void *, char *, _QWORD, uint64_t))((swift_isaMask & *a1) + 0x1F0);
  v11 = v6;
  v12 = v10(v6, v5, 0, v9);
  sub_1004CB800((uint64_t)v5, (uint64_t *)&unk_1013E1A50);

  swift_release(v9);
  return v12;
}

id sub_100CF1C8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(__n128);
  id v20;
  char *v21;
  __n128 v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v29;

  v7 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - v11;
  v13 = type metadata accessor for UUID(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
  v17 = *(char **)(v16 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
  v18 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v19 = *(void (**)(__n128))(*(_QWORD *)v18 + 256);
  v20 = *(id *)(v16 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
  v21 = v17;
  v22 = swift_retain(v18);
  v19(v22);

  swift_release(v18);
  sub_1004B8460(a1, (uint64_t)v12, type metadata accessor for CRLAssetData);
  sub_1004B8460(a2, (uint64_t)v9, type metadata accessor for CRLAssetData);
  v23 = a3;
  v24 = sub_1008F3EE0((uint64_t)v20, (uint64_t)v15, (uint64_t)v12, (uint64_t)v9, a3);
  v25 = (void *)objc_opt_self(CRLShadow);
  v26 = v24;
  v27 = objc_msgSend(v25, "defaultShadow");
  sub_100776C40(v27);

  return v26;
}

id sub_100CF1E58(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(__n128);
  id v12;
  char *v13;
  __n128 v14;
  id v15;
  id v16;
  Class isa;
  id v18;
  uint64_t v20;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (objc_class *)type metadata accessor for CRLGroupItem(0);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
  v9 = *(char **)(v8 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
  v10 = *(_QWORD *)&v9[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v11 = *(void (**)(__n128))(*(_QWORD *)v10 + 256);
  v12 = *(id *)(v8 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
  v13 = v9;
  v14 = swift_retain(v10);
  v11(v14);

  swift_release(v10);
  v15 = objc_allocWithZone(v7);
  v16 = a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v15, "initWithStore:parentContainerUUID:geometry:", v12, isa, v16);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v18;
}

id sub_100CF1FAC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(__n128);
  id v19;
  char *v20;
  __n128 v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v28;
  uint64_t v29;

  v28 = a2;
  v29 = a3;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C((uint64_t *)&unk_1013E9BE0);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
  v16 = *(char **)(v15 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
  v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v18 = *(void (**)(__n128))(*(_QWORD *)v17 + 256);
  v19 = *(id *)(v15 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
  v20 = v16;
  v21 = swift_retain(v17);
  v18(v21);

  swift_release(v17);
  sub_1004CB7BC(v28, (uint64_t)v11, (uint64_t *)&unk_1013E9BE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v29, v5);
  v22 = a1;
  v23 = sub_10083B4E8((uint64_t)v19, (uint64_t)v14, (uint64_t)v11, (uint64_t)v8, a1);
  v24 = (void *)objc_opt_self(CRLShadow);
  v25 = v23;
  v26 = objc_msgSend(v24, "defaultShadow");
  sub_100776C40(v26);

  return v25;
}

id sub_100CF2198(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(__n128);
  id v21;
  char *v22;
  __n128 v23;
  id v24;
  __n128 v26;
  uint64_t v27;

  v27 = a4;
  v8 = sub_1004B804C((uint64_t *)&unk_1013E9BE0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
  v18 = *(char **)(v17 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
  v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v20 = *(void (**)(__n128))(*(_QWORD *)v19 + 256);
  v21 = *(id *)(v17 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
  v22 = v18;
  v23 = swift_retain(v19);
  v20(v23);

  swift_release(v19);
  sub_1004B8460(a2, (uint64_t)v13, type metadata accessor for CRLAssetData);
  sub_1004CB7BC(a3, (uint64_t)v10, (uint64_t *)&unk_1013E9BE0);
  v26 = (__n128)matrix_identity_float4x4.columns[3];
  v24 = a1;
  return sub_100663020((uint64_t)v21, (uint64_t)v16, a1, (uint64_t)v13, (uint64_t)v10, v27, v26);
}

uint64_t sub_100CF2354(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  double v5;
  double v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD v13[31];
  _BYTE v14[248];

  v2 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100479D94(0);
  v7 = objc_msgSend((id)objc_opt_self(CRLPathSource), "pathSourceForShapeType:naturalSize:", 0, v5, v6);
  v8 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
  sub_10054F488((uint64_t)v14);
  sub_1004C4938((uint64_t)v14, (uint64_t)v13, &qword_1013E1B50);
  v9 = v7;
  v10 = sub_100CF4294(0, 0, v7, 0, 0, 0, 1, 0, 1, (_QWORD *)1, (void *)1, (void *)1, (void *)1, a1, v4, v13, 0, 0, 0);

  sub_1004CB800((uint64_t)v4, (uint64_t *)&unk_1013F1500);
  v11 = type metadata accessor for CRLWPShapeItem(0);
  return swift_dynamicCastClassUnconditional(v10, v11, 0, 0, 0);
}

void *sub_100CF24F0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  double v8;
  double v9;
  id v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(__n128);
  id v21;
  char *v22;
  __n128 v23;
  Swift::String v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  uint64_t Strong;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  CGColorSpace *v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  char *v54;
  id v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  _OWORD v96[14];
  uint64_t v97;
  char v98;
  char v99;
  _QWORD v100[2];
  char v101;
  int v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char v131;
  void *v132;
  _BYTE v133[888];
  _BYTE v134[888];
  _OWORD v135[14];
  uint64_t v136;
  int v137;
  char v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[31];
  _BYTE v149[888];
  _BYTE v150[600];
  _QWORD v151[2];
  unsigned __int8 v152;
  int v153;
  char v154;
  char v155;
  unsigned __int8 v156;
  uint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  uint64_t v177;
  unsigned __int8 v178;
  uint64_t v179;
  unsigned __int8 v180;
  uint64_t v181;
  char v182;
  void *v183;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(CRLPathSource), "pathSourceForShapeType:naturalSize:", 3, 200.0, 200.0);
  objc_msgSend(v7, "naturalSize");
  v10 = objc_msgSend(objc_allocWithZone((Class)CRLCanvasInfoGeometry), "initWithSize:", v8, v9);
  type metadata accessor for CRLBoardInsertStyleData(0);
  v11 = sub_1004B804C(&qword_1013DFA78);
  CRRegister.wrappedValue.getter(v11);
  sub_1004C4938((uint64_t)v134, (uint64_t)v149, &qword_1013DFA70);
  sub_1004C4938((uint64_t)v149, (uint64_t)v150, &qword_1013DFA70);
  v12 = sub_100784BF4((uint64_t)v150);
  v93 = v7;
  v94 = a1;
  v92 = v10;
  if (v12 == 1)
  {
    v64 = 0;
    v62 = 0;
    v66 = 0;
    v68 = 0;
    v69 = 0;
    v83 = 0;
    v84 = 0;
    v81 = 0;
    v82 = 0;
    v79 = 0;
    v80 = 0;
    v77 = 0;
    v78 = 0;
    v75 = 0;
    v76 = 0;
    v73 = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v85 = 0;
    v87 = 0;
    LODWORD(v88) = 0;
    v89 = 0;
    v90 = 0;
    v91 = &_swiftEmptyDictionarySingleton;
    v86 = -1;
    v67 = 255;
    v65 = 2;
    v13 = 1;
    v14 = 5;
    v15 = 1;
    v63 = 255;
    v70 = 2;
    v16 = 1;
  }
  else
  {
    v90 = v181;
    v91 = v183;
    v16 = v182;
    v89 = v179;
    v86 = v177;
    v87 = v178;
    LODWORD(v88) = v180;
    v70 = v175;
    v85 = v176;
    v83 = v162;
    v84 = v161;
    v81 = v164;
    v82 = v163;
    v79 = v166;
    v80 = v165;
    v77 = v168;
    v78 = v167;
    v75 = v170;
    v76 = v169;
    v73 = v172;
    v74 = v171;
    v71 = v174;
    v72 = v173;
    v68 = v157;
    v69 = v159;
    v15 = v155;
    v13 = v154;
    v66 = v153;
    v67 = v158;
    v64 = v151[0];
    v65 = v156;
    v14 = v151[1];
    v62 = v152;
    v63 = v160;
    sub_1005630DC((uint64_t)v151);
  }
  v99 = v13;
  v98 = v16;
  type metadata accessor for CRLWPStickyNoteItem(0);
  v17 = *(char **)(v2 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
  v18 = *(char **)&v17[OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer];
  v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v20 = *(void (**)(__n128))(*(_QWORD *)v19 + 256);
  v21 = *(id *)&v17[OBJC_IVAR____TtC8Freeform8CRLBoard_store];
  v22 = v18;
  v23 = swift_retain(v19);
  v20(v23);

  swift_release(v19);
  v100[0] = v64;
  v100[1] = v14;
  v101 = v62;
  v102 = v66;
  v103 = v99;
  v104 = v15;
  v105 = v65;
  v106 = v68;
  v107 = v67;
  v108 = v69;
  v109 = v63;
  v110 = v84;
  v111 = v83;
  v112 = v82;
  v113 = v81;
  v114 = v80;
  v115 = v79;
  v116 = v78;
  v117 = v77;
  v118 = v76;
  v119 = v75;
  v120 = v74;
  v121 = v73;
  v122 = v72;
  v123 = v71;
  v124 = v70;
  v125 = v85;
  v126 = v86;
  v127 = v87;
  v128 = v89;
  v129 = v88;
  v130 = v90;
  v131 = v98;
  v132 = v91;
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v100, v24);
  sub_1004C4938((uint64_t)v100, (uint64_t)v148, &qword_1013E1B50);
  v25 = v94;
  v26 = v92;
  v27 = v93;
  sub_100D3DCAC(v21, (uint64_t)v6, v25, v26, v27, v148, 3);
  v29 = v28;
  sub_1004C4938((uint64_t)v149, (uint64_t)v133, &qword_1013DFA70);
  if (sub_100784BF4((uint64_t)v133) == 1)
  {
    v30 = objc_msgSend(objc_allocWithZone((Class)CRLColor), "initWithWhite:alpha:", 0.0, 0.35);
    v31 = objc_allocWithZone((Class)CRLCurvedShadow);
    v32 = v29;
    v33 = objc_msgSend(v31, "initWithOffset:angle:radius:curve:opacity:color:enabled:", v30, 1, 1.0, 90.0, 15.0, -0.123095, 1.0);
    Strong = swift_unknownObjectWeakLoadStrong(&v32[OBJC_IVAR____TtC8Freeform12CRLBoardItem__parentItem]);
    if (Strong)
    {
      v35 = (void *)Strong;
      v36 = type metadata accessor for CRLFreehandDrawingItem(0);
      if (objc_msgSend(v35, "isKindOfClass:", swift_getObjCClassFromMetadata(v36, v37)))
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"isFreehandDrawingShape", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 152, "Regular shapes should not be inside freehand drawings.", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isFreehandDrawingShape", 22, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2u, 152, (uint64_t)"Regular shapes should not be inside freehand drawings.", 54, 2u);
      }

    }
    sub_100776C40(v33);

  }
  else
  {
    memcpy(v134, v133, sizeof(v134));
    v38 = *(_QWORD *)&v133[328];
    if (*(_QWORD *)&v133[328])
    {
      v93 = v27;
      v94 = v26;
      v39 = *(_QWORD *)&v133[320];
      v40 = *(_QWORD *)&v133[304];
      v89 = *(_QWORD *)&v133[296];
      v90 = *(_QWORD *)&v133[312];
      v41 = *(_QWORD *)&v133[288];
      v42 = *(_QWORD *)&v133[280];
      v43 = v29;
      v44 = *(_QWORD *)&v133[272];
      v88 = *(_OWORD *)&v133[256];
      v45 = *(_QWORD *)&v133[248];
      v92 = *(id *)&v133[240];
      v91 = (void *)sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
      v137 = v45;
      v138 = BYTE4(v45) & 1;
      v139 = v88;
      v140 = v44;
      v29 = v43;
      v141 = v42;
      v142 = v41;
      v143 = v89;
      v144 = v40;
      v145 = v90;
      v146 = v39;
      v147 = v38;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v38);
      v46 = v17;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v40);
      v47 = sub_1006C52C0((uint64_t)&v137);
      if ((v92 & 1) != 0)
      {
        if (qword_1013DD868 != -1)
          swift_once(&qword_1013DD868, sub_100A05844);
        swift_beginAccess(&static OS_os_log.persistence, &v95, 0, 0);
        v48 = (id)static OS_os_log.persistence;
        v49 = static os_log_type_t.info.getter();
        sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v49, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

      }
      v50 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v47);

      v27 = v93;
      v26 = v94;
    }
    else
    {
      v50 = 0;
    }
    sub_100923950(v50);
    sub_1004C4938((uint64_t)v133, (uint64_t)v96, (uint64_t *)&unk_1013F1530);
    if (sub_1004F276C((uint64_t)v96) == 1)
    {
      v51 = v29;
      v52 = 0;
    }
    else
    {
      v135[11] = v96[11];
      v135[12] = v96[12];
      v135[13] = v96[13];
      v135[7] = v96[7];
      v135[8] = v96[8];
      v135[9] = v96[9];
      v135[10] = v96[10];
      v135[3] = v96[3];
      v135[4] = v96[4];
      v135[5] = v96[5];
      v135[6] = v96[6];
      v135[0] = v96[0];
      v135[1] = v96[1];
      v136 = v97;
      v135[2] = v96[2];
      v53 = v29;
      v52 = sub_1008BEA4C((uint64_t)v135, 0);
    }
    sub_100A14388(v52);

    v54 = v29;
    v55 = sub_100D514DC();
    v56 = swift_unknownObjectWeakLoadStrong(&v54[OBJC_IVAR____TtC8Freeform12CRLBoardItem__parentItem]);
    if (v56)
    {
      v57 = (void *)v56;
      v58 = type metadata accessor for CRLFreehandDrawingItem(0);
      if (objc_msgSend(v57, "isKindOfClass:", swift_getObjCClassFromMetadata(v58, v59)))
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"isFreehandDrawingShape", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2, 152, "Regular shapes should not be inside freehand drawings.", 54, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"isFreehandDrawingShape", 22, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLShapeItem.swift", 83, 2u, 152, (uint64_t)"Regular shapes should not be inside freehand drawings.", 54, 2u);
      }

    }
    sub_100776C40(v55);

    sub_100CF97F0((uint64_t)v149);
    if (v133[864])
      v60 = 0;
    else
      v60 = v133[856];
    sub_10084C27C(v60);

  }
  return v29;
}

id sub_100CF2F10(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(__n128);
  _QWORD *v17;
  __n128 v18;
  void *v19;
  uint64_t v20;
  uint64_t (*v21)(__n128);
  __n128 v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t (*v27)(void);
  void *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  double v34;
  double v35;
  void *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t (*v42)(__n128);
  _QWORD *v43;
  __n128 v44;
  void *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _OWORD v81[15];
  uint64_t v82;
  _QWORD v83[75];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _QWORD v100[32];

  v7 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for CRLWPShapeItem(0);
  v11 = swift_dynamicCastClass(a1, v10);
  if (!v11)
    goto LABEL_6;
  v12 = (char *)v11;
  v63 = v3;
  v64 = a3;
  v13 = a2;
  v14 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  v15 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  v16 = *(uint64_t (**)(__n128))(*(_QWORD *)v15 + 288);
  v17 = a1;
  v18 = swift_retain(v15);
  v19 = (void *)v16(v18);
  LODWORD(v15) = objc_msgSend(v19, "widthValid", swift_release(v15).n128_f64[0]);

  if (!(_DWORD)v15
    || (v20 = *(_QWORD *)&v12[v14],
        v21 = *(uint64_t (**)(__n128))(*(_QWORD *)v20 + 288),
        v22 = swift_retain(v20),
        v23 = (void *)v21(v22),
        LODWORD(v20) = objc_msgSend(v23, "heightValid", swift_release(v20).n128_f64[0]),
        v23,
        !(_DWORD)v20)
    || swift_getObjectType(v12) != v10)
  {

    a3 = v64;
    a2 = v13;
LABEL_6:
    v24 = type metadata accessor for CRLWPStorageCRDTData(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v9, 1, 1, v24);
    sub_10054F488((uint64_t)v100);
    sub_1004C4938((uint64_t)v100, (uint64_t)v83, &qword_1013E1B50);
    v25 = sub_100CF4294(a3, 0, a2, 0, 0, 0, 1, 0, 1, (_QWORD *)1, (void *)1, (void *)1, (void *)1, 0, v9, v83, 0, 0, 0);
    goto LABEL_7;
  }
  v27 = *(uint64_t (**)(void))((swift_isaMask & *v17) + 0xE0);
  v28 = (void *)v27();
  objc_msgSend(v28, "size");
  v30 = v29;
  v32 = v31;

  v33 = v13;
  objc_msgSend(v13, "naturalSize");
  if (sub_100803E94(v30 / v32, v34 / v35))
  {
    v36 = (void *)v27();
    objc_msgSend(v36, "size");
    v38 = v37;
    v40 = v39;

  }
  else
  {
    v41 = *(_QWORD *)&v12[v14];
    v42 = *(uint64_t (**)(__n128))(*(_QWORD *)v41 + 288);
    v43 = v17;
    v44 = swift_retain(v41);
    v45 = (void *)v42(v44);

    objc_msgSend(v45, "size", swift_release(v41).n128_f64[0]);
    v47 = v46;
    v49 = v48;

    v33 = v13;
    objc_msgSend(v13, "naturalSize");
    v52 = sqrt(v47 * v49 / (v50 * v51));
    objc_msgSend(v13, "naturalSize");
    v38 = sub_1000603DC(v53, v54, v52);
    v40 = v55;
  }
  objc_msgSend(v33, "scaleToNaturalSize:", v38, v40);
  v56 = v17;
  sub_100C8E820(v12, 0, (uint64_t)v83);
  v77 = v96;
  v78 = v97;
  v79 = v98;
  v80 = v99;
  v73 = v92;
  v74 = v93;
  v75 = v94;
  v76 = v95;
  v69 = v88;
  v70 = v89;
  v71 = v90;
  v72 = v91;
  v65 = v84;
  v66 = v85;
  v67 = v86;
  v68 = v87;
  sub_1005630DC((uint64_t)&v65);
  sub_100784590((uint64_t)v83);
  v57 = v56;
  v58 = (_QWORD *)sub_100A14240();

  v59 = v57;
  v60 = (void *)sub_100923670();

  v61 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v9, 1, 1, v61);
  v81[12] = v77;
  v81[13] = v78;
  v81[14] = v79;
  v82 = v80;
  v81[8] = v73;
  v81[9] = v74;
  v81[10] = v75;
  v81[11] = v76;
  v81[4] = v69;
  v81[5] = v70;
  v81[6] = v71;
  v81[7] = v72;
  v81[0] = v65;
  v81[1] = v66;
  v81[2] = v67;
  v81[3] = v68;
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v81, v62);
  sub_1004C4938((uint64_t)v81, (uint64_t)v100, &qword_1013E1B50);
  v25 = sub_100CF4294(v64, 0, v33, 1, 0, 0, 1, 0, 1, v58, v60, (void *)1, (void *)1, 0, v9, v100, 0, 0, 0);
  sub_1007844D4((uint64_t)&v65);

LABEL_7:
  sub_1004CB800((uint64_t)v9, (uint64_t *)&unk_1013F1500);
  return v25;
}

id sub_100CF3564(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(__n128);
  id v11;
  char *v12;
  __n128 v13;
  id v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v19;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
  v8 = *(char **)(v7 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
  v9 = *(_QWORD *)&v8[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v10 = *(void (**)(__n128))(*(_QWORD *)v9 + 256);
  v11 = *(id *)(v7 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
  v12 = v8;
  v13 = swift_retain(v9);
  v10(v13);

  swift_release(v9);
  v14 = objc_allocWithZone((Class)type metadata accessor for CRLFreehandDrawingItem(0));
  v15 = a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v14, "initWithStore:parentContainerUUID:geometry:", v11, isa, v15);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v17;
}

void sub_100CF36F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];

  v4 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1013DDE28 != -1)
    swift_once(&qword_1013DDE28, sub_100C88730);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_1004F2A1C(v7, (uint64_t)qword_101481278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v8, v7);
  v9 = (_QWORD *)(a2 + *(int *)(v4 + 20));
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  *(_QWORD *)(a2 + *(int *)(v4 + 24)) = _swiftEmptyDictionarySingleton;
  sub_1004E90B0(a1 + OBJC_IVAR____TtC8Freeform8CRLAsset_storage, (uint64_t)v14);
  v10 = sub_1004B804C(&qword_101400020);
  v11 = type metadata accessor for CRLAssetBackedAssetStorage(0);
  if (swift_dynamicCast(&v13, v14, v10, v11, 6))
  {
    v12 = v13;
    sub_1004B8460(v13 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, (uint64_t)v6, type metadata accessor for CRLAssetData);
    swift_release(v12);
    sub_1004B84A4(a2, type metadata accessor for CRLAssetData);
    sub_1004B84E0((uint64_t)v6, a2, type metadata accessor for CRLAssetData);
  }
  else
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_makeAssetData(from:)", 21, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 476, "Asset needs to be a non-readonly asset!", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeAssetData(from:)", 21, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 476, (uint64_t)"Asset needs to be a non-readonly asset!", 39, 2u);
  }
}

id sub_100CF390C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(__n128);
  id v18;
  char *v19;
  __n128 v20;
  char *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[14];
  uint64_t v37;
  _BYTE v38[384];
  _OWORD v39[14];
  uint64_t v40;
  _BYTE v41[384];
  float v42[100];

  v34 = a2;
  v35 = a3;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E9BE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(char **)(v3 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
  v15 = *(char **)&v14[OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer];
  v16 = *(_QWORD *)&v15[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v17 = *(void (**)(__n128))(*(_QWORD *)v16 + 256);
  v18 = *(id *)&v14[OBJC_IVAR____TtC8Freeform8CRLBoard_store];
  v19 = v15;
  v20 = swift_retain(v16);
  v17(v20);

  swift_release(v16);
  sub_1004B8460(v34, (uint64_t)v10, type metadata accessor for CRLAssetData);
  sub_1004CB7BC(v35, (uint64_t)v7, (uint64_t *)&unk_1013E9BE0);
  v21 = v14;
  v22 = a1;
  v23 = sub_100CF8AE4((uint64_t)v18, (uint64_t)v13, (uint64_t)v10, (uint64_t)v7, a1, v21);
  type metadata accessor for CRLBoardInsertStyleData(0);
  v24 = sub_1004B804C(&qword_1013DFA68);
  CRRegister.wrappedValue.getter(v24);
  sub_1004C4938((uint64_t)v42, (uint64_t)v41, &qword_1013DFA60);
  sub_1004C4938((uint64_t)v41, (uint64_t)v42, &qword_1013DFA60);
  if (sub_100CF9A94((uint64_t)v42) == 1)
  {
    v25 = (void *)objc_opt_self(CRLShadow);
    v26 = v23;
    v27 = objc_msgSend(v25, "defaultShadow");
    sub_100776C40(v27);

    v28 = sub_1008CF5DC(10.0);
    sub_1008D3420(v28);

  }
  else
  {
    memcpy(v38, v42, sizeof(v38));
    sub_1004C4938((uint64_t)v42, (uint64_t)v36, (uint64_t *)&unk_1013F1530);
    if (sub_1004F276C((uint64_t)v36) == 1)
    {
      v29 = 0;
    }
    else
    {
      v39[12] = v36[12];
      v39[13] = v36[13];
      v40 = v37;
      v39[8] = v36[8];
      v39[9] = v36[9];
      v39[10] = v36[10];
      v39[11] = v36[11];
      v39[4] = v36[4];
      v39[5] = v36[5];
      v39[6] = v36[6];
      v39[7] = v36[7];
      v39[0] = v36[0];
      v39[1] = v36[1];
      v39[2] = v36[2];
      v39[3] = v36[3];
      v29 = sub_1008BEA4C((uint64_t)v39, 0);
    }
    sub_100A14388(v29);
    v30 = sub_1009AFB6C();
    sub_100776C40(v30);

    v31 = sub_1008CF5DC(v42[90]);
    sub_1008D3420(v31);

    sub_100CF9AAC((uint64_t)v41);
  }
  return v23;
}

id sub_100CF3DD4(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(__n128);
  id v20;
  char *v21;
  __n128 v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[14];
  uint64_t v36;
  _BYTE v37[384];
  _OWORD v38[14];
  uint64_t v39;
  _BYTE v40[384];
  float v41[100];

  v33 = a2;
  v34 = a3;
  v7 = sub_1004B804C((uint64_t *)&unk_1013E9BE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
  v17 = *(char **)(v16 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
  v18 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v19 = *(void (**)(__n128))(*(_QWORD *)v18 + 256);
  v20 = *(id *)(v16 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
  v21 = v17;
  v22 = swift_retain(v18);
  v19(v22);

  swift_release(v18);
  sub_1004B8460(v33, (uint64_t)v12, type metadata accessor for CRLAssetData);
  sub_1004CB7BC(v34, (uint64_t)v9, (uint64_t *)&unk_1013E9BE0);
  v23 = a1;
  v24 = sub_100A38C80((uint64_t)v20, (uint64_t)v15, (uint64_t)v12, (uint64_t)v9, a1, a4);
  type metadata accessor for CRLBoardInsertStyleData(0);
  v25 = sub_1004B804C(&qword_1013DFA50);
  CRRegister.wrappedValue.getter(v25);
  sub_1004C4938((uint64_t)v41, (uint64_t)v40, &qword_1013DFA48);
  sub_1004C4938((uint64_t)v40, (uint64_t)v41, &qword_1013DFA48);
  if (sub_100CF9A94((uint64_t)v41) == 1)
  {
    v26 = (void *)objc_opt_self(CRLShadow);
    v27 = v24;
    v28 = objc_msgSend(v26, "defaultShadow");
    sub_100776C40(v28);

    sub_100A30408(10.0);
  }
  else
  {
    memcpy(v37, v41, sizeof(v37));
    sub_1004C4938((uint64_t)v41, (uint64_t)v35, (uint64_t *)&unk_1013F1530);
    if (sub_1004F276C((uint64_t)v35) == 1)
    {
      v29 = 0;
    }
    else
    {
      v38[12] = v35[12];
      v38[13] = v35[13];
      v39 = v36;
      v38[8] = v35[8];
      v38[9] = v35[9];
      v38[10] = v35[10];
      v38[11] = v35[11];
      v38[4] = v35[4];
      v38[5] = v35[5];
      v38[6] = v35[6];
      v38[7] = v35[7];
      v38[0] = v35[0];
      v38[1] = v35[1];
      v38[2] = v35[2];
      v38[3] = v35[3];
      v29 = sub_1008BEA4C((uint64_t)v38, 0);
    }
    sub_100A14388(v29);
    v30 = sub_1009AFB6C();
    sub_100776C40(v30);

    sub_100A30408(v41[90]);
    sub_100CF9AAC((uint64_t)v40);
  }
  return v24;
}

id sub_100CF4294(uint64_t a1, int a2, void *a3, char a4, uint64_t a5, uint64_t a6, int a7, void *a8, char a9, _QWORD *a10, void *a11, void *a12, void *a13, char *a14, _QWORD *a15, _QWORD *a16, unsigned __int8 a17, void *a18, void *a19)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjCClassFromMetadata;
  uint64_t v39;
  double v40;
  double v41;
  id v42;
  double v43;
  double v44;
  id v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  BOOL v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v73;
  __int128 *v74;
  id v75;
  id v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  id v86;
  CGColorSpace *v87;
  __n128 v88;
  char v89;
  id v90;
  double v91;
  __n128 v92;
  __n128 v93;
  id v94;
  uint64_t v95;
  __n128 v96;
  void *v97;
  id v98;
  _BOOL4 v99;
  __n128 v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  void (*v104)(__n128);
  id v105;
  char *v106;
  __n128 v107;
  char *v108;
  id v109;
  id v110;
  id v111;
  _QWORD *v112;
  id v113;
  Class isa;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  __n128 v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void *v123;
  void (*v124)(__n128);
  char *v125;
  __n128 v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  Class v133;
  void *v134;
  id v135;
  void *v136;
  id v137;
  id v138;
  __n128 v140;
  float v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  void (*v150)(__n128);
  char *v151;
  __n128 v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  double v157;
  id v158;
  _QWORD *v159;
  _QWORD *v160;
  double v161;
  id v162;
  void *v163;
  uint64_t v164;
  void *v165;
  id v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  void (*v170)(id);
  char *v171;
  id v172;
  char *v173;
  char v174;
  double v175;
  id v176;
  _QWORD *v177;
  _QWORD *v178;
  double v179;
  uint64_t v180;
  void *v181;
  char *v182;
  char *v183;
  void *v184;
  id v185;
  double v186;
  double v187;
  void *v188;
  __n128 v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  id v203;
  _QWORD *v204;
  void *v205;
  char *v206;
  id v207;
  uint64_t v208;
  char *v209;
  id v210;
  double v211;
  uint64_t v212;
  double v213;
  id v214;
  _QWORD *v215;
  double v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  float v234;
  _QWORD v235[31];
  id v236[32];
  __n128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _OWORD v246[15];
  uint64_t v247;
  unsigned __int8 v248;
  char v249;
  _QWORD v250[110];
  _BYTE v251[248];
  _BYTE v252[248];
  _OWORD v253[15];
  uint64_t v254;
  int v255;
  char v256;
  __n128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _OWORD v266[14];
  uint64_t v267;
  _BYTE v268[264];

  v211 = *(double *)&a8;
  LODWORD(v214) = a7;
  v213 = *(double *)&a6;
  LODWORD(v212) = a17;
  v204 = a15;
  v201 = a14;
  v215 = a16;
  sub_1004C4938((uint64_t)a16, (uint64_t)v251, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v251, (uint64_t)v268, &qword_1013E1B50);
  v24 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v24);
  v198 = (uint64_t)&v189 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (_QWORD *)type metadata accessor for CRLWPStorageCRDTData(0);
  v202 = *(v26 - 1);
  v203 = v26;
  v27 = __chkstk_darwin(v26);
  v196 = (uint64_t)&v189 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v197 = (uint64_t)&v189 - v29;
  v30 = type metadata accessor for UUID(0);
  v199 = *(_QWORD *)(v30 - 8);
  v200 = v30;
  v31 = __chkstk_darwin(v30);
  v195 = (char *)&v189 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v194 = (char *)&v189 - v34;
  __chkstk_darwin(v33);
  v206 = (char *)&v189 - v35;
  LODWORD(v210) = a2;
  v216 = *(double *)&a1;
  if (a3)
  {
    if ((a2 & 1) != 0)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 546, "shapeType must be given if pathSource is given.", 47, 2u, (uint64_t)_swiftEmptyArrayStorage);
      LOBYTE(a2) = (_BYTE)v210;
      *(double *)&a1 = v216;
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 546, (uint64_t)"shapeType must be given if pathSource is given.", 47, 2u);
    }
    else if (sub_100CF9A1C(a1))
    {
      v36 = sub_1004B8930(0, (unint64_t *)&unk_1013F62F0, off_101229878);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v36, v37);
      v208 = a3;
      if ((objc_msgSend((id)v208, "isKindOfClass:", ObjCClassFromMetadata) & 1) == 0)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 550, "pathSource must be a connection line path source if shapeType is connection line.", 81, 2u, (uint64_t)_swiftEmptyArrayStorage);
        *(double *)&a1 = v216;
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 550, (uint64_t)"pathSource must be a connection line path source if shapeType is connection line.", 81, 2u);
      }
      if (v201)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 551, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
        *(double *)&a1 = v216;
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 551, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
      }
      if ((*(unsigned int (**)(_QWORD *, uint64_t, id))(v202 + 48))(v204, 1, v203) != 1)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 552, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
        *(double *)&a1 = v216;
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 552, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
      }

    }
  }
  else if ((a2 & 1) == 0 && a1 == 21)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 554, "pathSource must be given for custom shapes.", 43, 2u, (uint64_t)_swiftEmptyArrayStorage);
    *(double *)&a1 = v216;
    LOBYTE(a2) = (_BYTE)v210;
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 554, (uint64_t)"pathSource must be given for custom shapes.", 43, 2u);
  }
  if ((v212 & 1) != 0)
  {
    if (v201)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 558, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
      *(double *)&a1 = v216;
      LOBYTE(a2) = (_BYTE)v210;
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 558, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
    }
    if ((*(unsigned int (**)(_QWORD *, uint64_t, id))(v202 + 48))(v204, 1, v203) != 1)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 559, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
      *(double *)&a1 = v216;
      LOBYTE(a2) = (_BYTE)v210;
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 559, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
    }
  }
  if ((a2 & 1) != 0)
    v39 = 3;
  else
    v39 = a1;
  if ((v214 & 1) != 0)
    v40 = 0.0;
  else
    v40 = v213;
  if ((v214 & 1) != 0)
    v41 = 0.0;
  else
    v41 = *(double *)&a5;
  if (a3)
  {
    v42 = a3;
  }
  else
  {
    v43 = sub_100479D94(v39);
    v42 = objc_msgSend((id)objc_opt_self(CRLPathSource), "pathSourceForShapeType:naturalSize:", v39, v43, v44);
  }
  v45 = a3;
  if ((a4 & 1) != 0)
  {
    objc_msgSend(v42, "naturalSize");
  }
  else
  {
    sub_100CF9574(v39);
    v49 = v48;
    v51 = v50;
    objc_msgSend(v42, "naturalSize");
    v46 = sub_100062B34(1, v49, v51, v52, v53);
  }
  v54 = v46;
  v55 = v47;
  if ((a9 & 1) != 0)
  {
    sub_100CF9574(v39);
    v56 = v57;
  }
  else
  {
    v56 = v211;
  }
  v58 = objc_msgSend(objc_allocWithZone((Class)CRLCanvasInfoGeometry), "initWithPosition:size:widthValid:heightValid:horizontalFlip:verticalFlip:angle:", v39 != 0, v39 != 0, 0, 0, v41, v40, v54, v55, v56);
  v59 = objc_msgSend(v42, "copy");
  _bridgeAnyObjectToAny(_:)(v250, v59);
  swift_unknownObjectRelease(v59);
  v60 = sub_1004B8930(0, (unint64_t *)&qword_1013EC648, off_101229970);
  swift_dynamicCast(v236, v250, (char *)&type metadata for Any + 8, v60, 7);
  v61 = v236[0];
  if ((a4 & 1) == 0)
  {
    objc_msgSend(v58, "size");
    objc_msgSend(v61, "scaleToNaturalSize:");
  }
  objc_msgSend(v58, "size");
  v63 = v62;
  v65 = v64;
  v205 = v61;
  objc_msgSend(v61, "naturalSize");
  v68 = sub_10005FE30(v63, v65, v66, v67, 0.001);
  v213 = *(double *)&v39;
  if (!v68)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 586, "Geometry and path source must have the same size.", 49, 2u, (uint64_t)_swiftEmptyArrayStorage);
    *(double *)&a1 = v216;
    *(double *)&v39 = v213;
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_makeShapeItem(shapeType:pathSource:preservePathSourceSize:position:angleInDegrees:stroke:fill:headLineEnd:tailLineEnd:attributedString:textCRDT:textPresetDataOverride:isForFreehandDrawing:pencilKitStrokePathCompactData:freehandMaskPath:)", 238, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 586, (uint64_t)"Geometry and path source must have the same size.", 49, 2u);
  }
  v214 = v58;
  v207 = v42;
  if (*(double *)&v39 == 0.0 || sub_100CF99E4(v39) || v39 == 17)
  {
    v69 = v209;
    type metadata accessor for CRLBoardInsertStyleData(0);
  }
  else
  {
    v69 = v209;
  }
  v70 = sub_1004B804C((uint64_t *)&unk_1013DFA80);
  CRRegister.wrappedValue.getter(v70);
  sub_1004C4938((uint64_t)v250, (uint64_t)v236, &qword_1013F1540);
  sub_1004C4938((uint64_t)v236, (uint64_t)v250, &qword_1013F1540);
  sub_1004C4938((uint64_t)v215, (uint64_t)v252, &qword_1013E1B50);
  if (sub_100562DF8((uint64_t)v252) == 1)
  {
    sub_1004C4938((uint64_t)v250, (uint64_t)v236, &qword_1013F1540);
    if (sub_100784BF4((uint64_t)v236) == 1)
    {
      sub_1007C8C7C(v39, (uint64_t)v253);
      v231 = v253[13];
      v232 = v253[14];
      v233 = v254;
      v227 = v253[9];
      v228 = v253[10];
      v229 = v253[11];
      v230 = v253[12];
      v222 = v253[4];
      v223 = v253[5];
      v224 = v253[6];
      v225 = v253[7];
      v226 = v253[8];
      v218 = v253[0];
      v219 = v253[1];
      v220 = v253[2];
      v221 = v253[3];
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)&v218, v73);
    }
    else
    {
      v231 = v246[13];
      v232 = v246[14];
      v227 = v246[9];
      v228 = v246[10];
      v229 = v246[11];
      v230 = v246[12];
      v222 = v246[4];
      v223 = v246[5];
      v224 = v246[6];
      v233 = v247;
      v225 = v246[7];
      v226 = v246[8];
      v218 = v246[0];
      v219 = v246[1];
      v220 = v246[2];
      v221 = v246[3];
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)&v218, *(Swift::String *)&v71);
      sub_1005630DC((uint64_t)v246);
    }
    v74 = &v218;
  }
  else
  {
    v74 = (__int128 *)v268;
  }
  sub_1004C4938((uint64_t)v74, (uint64_t)v235, &qword_1013E1B50);
  v75 = a11;
  sub_1004C4938((uint64_t)v235, (uint64_t)v253, &qword_1013E1B50);
  if (a10 == (_QWORD *)1)
  {
    sub_1004C4938((uint64_t)v250, (uint64_t)v236, &qword_1013F1540);
    if (sub_100784BF4((uint64_t)v236) == 1)
    {
      sub_1006A1C78(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
      if (sub_100CF99E4(v39) || v39 == 17)
      {
        *((_QWORD *)&v219 + 1) = &type metadata for CRLFeatureFlags;
        *(_QWORD *)&v220 = sub_1004DB6DC();
        LOBYTE(v218) = 7;
        v89 = isFeatureEnabled(_:)(&v218);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v218);
        v90 = objc_msgSend((id)objc_opt_self(CRLColor), "blackColor");
        if ((v89 & 1) != 0)
          v91 = 3.0;
        else
          v91 = 1.0;
        v215 = objc_msgSend((id)objc_opt_self(CRLStroke), "strokeWithColor:width:", v90, v91);

      }
      else
      {
        v215 = 0;
      }
    }
    else
    {
      sub_1004C4938((uint64_t)v236, (uint64_t)&v218, (uint64_t *)&unk_1013F1530);
      if (sub_1004F276C((uint64_t)&v218) == 1)
      {
        sub_1006A1C78(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
        v215 = 0;
      }
      else
      {
        v266[11] = v229;
        v266[12] = v230;
        v266[13] = v231;
        v266[7] = v225;
        v266[8] = v226;
        v266[9] = v227;
        v266[10] = v228;
        v266[3] = v221;
        v266[4] = v222;
        v266[5] = v223;
        v266[6] = v224;
        v266[0] = v218;
        v266[1] = v219;
        v267 = v232;
        v266[2] = v220;
        sub_1006A1C78(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
        sub_1004C4D78(v250, sub_1004C4F6C, v92);
        v215 = sub_1008BEA4C((uint64_t)v266, 0);
        sub_1004C4D78(v250, sub_1004C497C, v93);
      }
    }
  }
  else
  {
    sub_1006A1C78(v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
    v215 = a10;
  }
  if (a11 == (void *)1)
  {
    sub_1004C4938((uint64_t)v250, (uint64_t)v236, &qword_1013F1540);
    if (sub_100784BF4((uint64_t)v236) == 1)
    {
      sub_1004CB968(a10);
      if (*(double *)&v39 == 0.0 || sub_100CF99E4(v39) || v39 == 17)
      {
        v211 = 0.0;
      }
      else
      {
        if (qword_1013DCE80 != -1)
          swift_once(&qword_1013DCE80, sub_1006B8154);
        v211 = *(double *)&qword_10147F1C0;
        v76 = (id)qword_10147F1C0;
      }
    }
    else
    {
      v77 = v245;
      if (v245)
      {
        v208 = 1;
        v78 = *(void **)&v69[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
        v79 = v244;
        v191 = v243;
        v192 = v78;
        v190 = v242;
        v80 = v241;
        v81 = v240;
        v82 = v239;
        v83 = v238;
        v189 = v237;
        v84 = v236[31];
        v211 = *(double *)&v236[30];
        v193 = sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
        v255 = (int)v84;
        v256 = BYTE4(v84) & 1;
        v257 = v189;
        v258 = v83;
        v259 = v82;
        v260 = v81;
        v261 = v80;
        v85 = v190;
        v262 = v190;
        v263 = v191;
        v264 = v79;
        v265 = v77;
        sub_1004C4D78(v250, sub_1004C4F6C, v189);
        v86 = v192;
        sub_1004CB968(a10);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v77);
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v85);
        v87 = sub_1006C52C0((uint64_t)&v255);
        if ((LOBYTE(v211) & 1) != 0)
        {
          LOBYTE(a2) = (_BYTE)v210;
          *(double *)&a1 = v216;
          v75 = (id)v208;
          if (qword_1013DD868 != -1)
            swift_once(&qword_1013DD868, sub_100A05844);
          swift_beginAccess(&static OS_os_log.persistence, &v217, 0, 0);
          v94 = (id)static OS_os_log.persistence;
          v95 = static os_log_type_t.info.getter();
          sub_100A06EBC((uint64_t)v94, &_mh_execute_header, v95, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

          v211 = COERCE_DOUBLE(objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v87));
          sub_1004C4D78(v250, sub_1004C497C, v96);

          *(double *)&v39 = v213;
          v69 = v209;
        }
        else
        {
          v211 = COERCE_DOUBLE(objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v87));

          sub_1004C4D78(v250, sub_1004C497C, v88);
          LOBYTE(a2) = (_BYTE)v210;
          *(double *)&a1 = v216;
          *(double *)&v39 = v213;
          v75 = (id)v208;
          v69 = v209;
        }
      }
      else
      {
        sub_1004CB968(a10);
        v211 = 0.0;
        *(double *)&a1 = v216;
      }
    }
  }
  else
  {
    sub_1004CB968(a10);
    v211 = *(double *)&a11;
  }
  if (a12 != (void *)1)
  {
    sub_1004CB968(v75);
    v216 = *(double *)&a12;
    if (a13 == (void *)1)
      goto LABEL_89;
LABEL_93:
    sub_1004CB968(a12);
    v98 = a13;
    goto LABEL_95;
  }
  if ((a2 & 1) != 0 || a1 != 15 && a1 != 16)
  {
    sub_1004CB968(v75);
    v216 = 0.0;
    if (a13 == (void *)1)
      goto LABEL_89;
    goto LABEL_93;
  }
  v165 = (void *)objc_opt_self(CRLLineEnd);
  sub_1004CB968(v75);
  v216 = COERCE_DOUBLE(objc_msgSend(v165, "simpleArrow"));
  if (a13 != (void *)1)
    goto LABEL_93;
LABEL_89:
  if ((a2 & 1) != 0 || a1 != 15)
  {
    sub_1004CB968(a12);
    v98 = 0;
  }
  else
  {
    v97 = (void *)objc_opt_self(CRLLineEnd);
    sub_1004CB968(a12);
    v98 = objc_msgSend(v97, "simpleArrow");
  }
LABEL_95:
  sub_1004CB968(a13);
  v99 = sub_100CF9A1C(v39);
  v208 = (uint64_t)v98;
  if (v99)
  {
    sub_1006A1C78(v235, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100562F88);
    sub_1004C4D78(v250, sub_1004C497C, v100);
    v101 = *(_QWORD *)&v69[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
    v102 = *(char **)(v101 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
    v103 = *(_QWORD *)&v102[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
    v104 = *(void (**)(__n128))(*(_QWORD *)v103 + 256);
    v105 = *(id *)(v101 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
    v106 = v102;
    v107 = swift_retain(v103);
    v108 = v206;
    v104(v107);

    swift_release(v103);
    v109 = objc_allocWithZone((Class)type metadata accessor for CRLConnectionLineItem(0));
    v110 = v98;
    v111 = v214;
    v112 = v215;
    v113 = *(id *)&v216;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v115 = v109;
    v116 = v205;
    v117 = objc_msgSend(v115, "initWithStore:parentContainerUUID:geometry:pathSource:stroke:headLineEnd:tailLineEnd:", v105, isa, v111, v205, v112, v113, v110);

    v118 = v116;
    (*(void (**)(char *, uint64_t))(v199 + 8))(v108, v200);
  }
  else if ((v212 & 1) != 0)
  {
    sub_1006A1C78(v235, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100562F88);
    sub_1004C4D78(v250, sub_1004C497C, v119);
    v120 = *(_QWORD *)&v69[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
    v121 = *(char **)(v120 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
    v122 = *(_QWORD *)&v121[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
    v123 = v98;
    v124 = *(void (**)(__n128))(*(_QWORD *)v122 + 256);
    v212 = (uint64_t)*(id *)(v120 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
    v125 = v121;
    v126 = swift_retain(v122);
    v124(v126);

    swift_release(v122);
    v209 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLFreehandDrawingShapeItem(0));
    v127 = a19;
    v210 = v127;
    v128 = v214;
    v204 = v215;
    v129 = *(id *)&v216;
    v203 = v129;
    v130 = v123;
    v131 = *(id *)&v211;
    v132 = a18;
    v133 = UUID._bridgeToObjectiveC()().super.isa;
    v185 = v129;
    v134 = (void *)v212;
    v135 = v204;
    v118 = v205;
    v117 = objc_msgSend(v209, "initWithStore:parentContainerUUID:geometry:pathSource:fill:stroke:headLineEnd:tailLineEnd:pencilKitStrokePathCompactData:maskPath:", v212, v133, v128, v205, v131, v204, v185, v130, v132, v127);

    (*(void (**)(char *, uint64_t))(v199 + 8))(v206, v200);
  }
  else
  {
    sub_1004C4938((uint64_t)v250, (uint64_t)v236, &qword_1013F1540);
    if (sub_100784BF4((uint64_t)v236) == 1)
    {
      if (*(double *)&a1 == 0.0 && (a2 & 1) == 0)
        v142 = 4.0;
      else
        v142 = 10.0;
      v212 = 1;
    }
    else
    {
      sub_1004C4D78(v250, sub_1004C497C, v140);
      if (v249)
        v143 = 0;
      else
        v143 = v248;
      v212 = v143;
      sub_1004C4938((uint64_t)v250, (uint64_t)&v218, &qword_1013F1540);
      v142 = v234;
    }
    v144 = v198;
    sub_1004CB7BC((uint64_t)v204, v198, (uint64_t *)&unk_1013F1500);
    if ((*(unsigned int (**)(uint64_t, uint64_t, id))(v202 + 48))(v144, 1, v203) == 1)
    {
      sub_1004CB800(v144, (uint64_t *)&unk_1013F1500);
      v145 = v201;
      if (v201)
        v206 = v201;
      else
        v206 = (char *)objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
      v166 = v214;
      v167 = *(_QWORD *)&v209[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
      v168 = *(char **)(v167 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
      v169 = *(_QWORD *)&v168[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
      v170 = *(void (**)(id))(*(_QWORD *)v169 + 256);
      v209 = (char *)*(id *)(v167 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
      v171 = v168;
      swift_retain(v169);
      v172 = v145;
      v173 = v195;
      v170(v172);

      swift_release(v169);
      v174 = v210 | (a1 != 0);
      type metadata accessor for CRLWPShapeItem(0);
      v175 = v211;
      v210 = *(id *)&v211;
      v176 = v166;
      v177 = v215;
      v178 = v215;
      v179 = v216;
      v204 = *(id *)&v216;
      v180 = v208;
      v203 = (id)v208;
      v188 = (void *)v180;
      v187 = v179;
      v181 = v209;
      v182 = v173;
      v118 = v205;
      v183 = v206;
      sub_100850E20(v209, v182, v206, v253, v176, v205, v177, *(void **)&v175, v142, *(void **)&v187, v188, v212, v174 & 1);
      v117 = v184;

    }
    else
    {
      v146 = v197;
      sub_1004B84E0(v144, v197, type metadata accessor for CRLWPStorageCRDTData);
      v147 = *(_QWORD *)&v69[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
      v148 = *(char **)(v147 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
      v149 = *(_QWORD *)&v148[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
      v150 = *(void (**)(__n128))(*(_QWORD *)v149 + 256);
      v210 = *(id *)(v147 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
      v151 = v148;
      v152 = swift_retain(v149);
      v153 = v194;
      v150(v152);

      swift_release(v149);
      v154 = v146;
      v155 = v196;
      sub_1004B8460(v154, v196, type metadata accessor for CRLWPStorageCRDTData);
      v156 = a2 | (a1 != 0);
      v203 = (id)type metadata accessor for CRLWPShapeItem(0);
      v157 = v211;
      v209 = (char *)*(id *)&v211;
      v158 = v214;
      v159 = v215;
      v160 = v215;
      v161 = v216;
      v206 = (char *)*(id *)&v216;
      v162 = (id)v208;
      v204 = (id)v208;
      v186 = v161;
      v163 = v210;
      v164 = (uint64_t)v153;
      v118 = v205;
      v117 = sub_100850B64(v210, v164, v155, v253, v158, v205, v159, *(void **)&v157, v142, *(void **)&v186, v162, v212, v156 & 1);

      sub_1004B84A4(v197, type metadata accessor for CRLWPStorageCRDTData);
    }
  }
  v136 = v207;
  if (*(_QWORD *)&v213 == 21)
  {
    v137 = v117;
    sub_100776A8C(1);

    v136 = v137;
  }
  v138 = v214;

  return v117;
}

id sub_100CF63E4(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  NSString v17;
  id v18;
  double v19;
  _QWORD *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[248];
  _QWORD v38[32];

  v36 = a2;
  v9 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (void *)objc_opt_self(CRLColorFill);
  if (qword_1013DCE80 != -1)
    swift_once(&qword_1013DCE80, sub_1006B8154);
  v13 = objc_msgSend((id)qword_10147F1C0, "color");
  v14 = objc_msgSend(v12, "colorWithColor:", v13);

  if (sub_100CF99E4(a1))
  {

    v15 = (void *)objc_opt_self(CRLColor);
    v16 = objc_msgSend(v15, "blackColor");
    v17 = String._bridgeToObjectiveC()();
    v18 = objc_msgSend(v15, "colorNamed:fallbackColor:", v17, v16);

    v38[3] = &type metadata for CRLFeatureFlags;
    v38[4] = sub_1004DB6DC();
    LOBYTE(v38[0]) = 7;
    LOBYTE(v16) = isFeatureEnabled(_:)(v38);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v38);
    if ((v16 & 1) != 0)
      v19 = 3.0;
    else
      v19 = 1.0;
    v20 = objc_msgSend((id)objc_opt_self(CRLStroke), "strokeWithColor:width:", v18, v19);

    v14 = 0;
  }
  else
  {
    v20 = 0;
  }
  v35 = a1;
  if (a1 == 15)
  {
    v23 = (void *)objc_opt_self(CRLLineEnd);
    v21 = objc_msgSend(v23, "openArrow");
    v22 = objc_msgSend(v23, "simpleArrow");
  }
  else if (a1 == 16)
  {
    v21 = objc_msgSend((id)objc_opt_self(CRLLineEnd), "simpleArrow");
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  v32 = *(_QWORD *)&a4;
  v33 = *(_QWORD *)&a3;
  v34 = *(void **)&a5;
  v24 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v11, 1, 1, v24);
  sub_10054F488((uint64_t)v37);
  sub_1004C4938((uint64_t)v37, (uint64_t)v38, &qword_1013E1B50);
  v25 = v22;
  v26 = v20;
  v27 = v14;
  v28 = v21;
  v29 = sub_100CF4294(v35, 0, v36, 1, v33, v32, 0, v34, 0, v20, v14, v21, v22, 0, v11, v38, 0, 0, 0);

  sub_1004CB800((uint64_t)v11, (uint64_t *)&unk_1013F1500);
  return v29;
}

id sub_100CF67F4(void *a1, _QWORD *a2, void *a3, void *a4, void *a5, double a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v19;
  void *v20;
  _BYTE v21[248];
  _QWORD v22[32];

  v20 = a1;
  v13 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a5 && !a4)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"makeShapeItemForFreehandDrawing(pathSource:position:stroke:fill:pencilKitStrokePathCompactData:maskPath:)", 105, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 187, "invalid nil value found", 23, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"makeShapeItemForFreehandDrawing(pathSource:position:stroke:fill:pencilKitStrokePathCompactData:maskPath:)", 105, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 187, (uint64_t)"invalid nil value found", 23, 2u);
  }
  v16 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  sub_10054F488((uint64_t)v21);
  sub_1004C4938((uint64_t)v21, (uint64_t)v22, &qword_1013E1B50);
  v17 = sub_100CF4294(17, 0, v20, 1, *(uint64_t *)&a6, *(uint64_t *)&a7, 0, 0, 0, a2, a3, 0, 0, 0, v15, v22, 1u, a4, a5);
  sub_1004CB800((uint64_t)v15, (uint64_t *)&unk_1013F1500);
  return v17;
}

Class sub_100CF6AD4(void *a1, uint64_t a2, void *a3, SEL *a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  Class isa;
  id v17;
  uint64_t v18;
  Class v19;
  uint64_t v21;

  v9 = type metadata accessor for PKStroke(0, a2);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a3;
  v14 = a1;
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)(a3);

  v15 = (void *)objc_opt_self(CRLBoardItemFactoryObjCHelper);
  isa = PKStroke._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v15, *a4, isa, v14, a5);

  v18 = type metadata accessor for CRLFreehandDrawingShapeItem(0);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v19;
}

void sub_100CF6C78(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CKRecordID v17;
  Swift::String v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  _BYTE v22[24];

  v4 = (const char *)(a1 + OBJC_IVAR____TtC8Freeform20CRLCommandController_openGroupDatas);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform20CRLCommandController_openGroupDatas, v22, 0, 0);
  v5 = *(_QWORD *)v4;
  if (!(*(_QWORD *)v4 >> 62))
  {
    if (*(uint64_t *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) > 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v5 < 0)
    v14 = *(_QWORD *)v4;
  else
    v14 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)v4);
  v15 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease();
  if (v15 <= 0)
  {
LABEL_3:
    sub_100757E04(&_mh_execute_header, (uint64_t)"blockToRunCommandToPostProcess(newBoardItem:shapeType:infosToConnect:commandController:)", 88, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2, 268, "We are enqueueing multiple commands, so there should be an open command group.", 78, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"blockToRunCommandToPostProcess(newBoardItem:shapeType:infosToConnect:commandController:)", 88, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLBoardItemFactory.swift", 86, 2u, 268, (uint64_t)"We are enqueueing multiple commands, so there should be an open command group.", 78, 2u);
  }
LABEL_4:
  v6 = *(_QWORD *)v4;
  if (!(*(_QWORD *)v4 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)v4);
    if (v7)
      goto LABEL_6;
LABEL_32:
    swift_bridgeObjectRelease();
    v6 = 77;
    v4 = "enableProgressiveEnqueuingInCurrentGroup() called without a group being open.";
    a3 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift";
    sub_100757E04(&_mh_execute_header, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2, 680, "enableProgressiveEnqueuingInCurrentGroup() called without a group being open.", 77, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.");
    sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2u, 680, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.", 77, 2u);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v17, v18);
    v8 = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
    __break(1u);
    goto LABEL_33;
  }
  if (v6 < 0)
    v16 = *(_QWORD *)v4;
  else
    v16 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)v4);
  v7 = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!v7)
    goto LABEL_32;
LABEL_6:
  v8 = v7 - 1;
  if (__OFSUB__(v7, 1))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((v6 & 0xC000000000000001) != 0)
  {
LABEL_34:
    v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
    goto LABEL_11;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v8 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *(_QWORD *)(v6 + 8 * v8 + 32);
  swift_retain(v7);
LABEL_11:
  swift_bridgeObjectRelease();
  v9 = *(unsigned __int8 *)(v7 + 16);
  if (v9 == 3 || v9 == 2 || v9 == 1)
  {
    swift_release(v7);
LABEL_42:
    sub_100871170((uint64_t)a3);
    v21 = v20;
    sub_1006A5F54(v20, 0, 0, 4, 0);

    return;
  }
  v6 = *(_QWORD *)v4;
  if (!(*(_QWORD *)v4 >> 62))
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v6, 2);
    if (v10)
      goto LABEL_17;
LABEL_41:
    swift_bridgeObjectRelease_n(v6, 2);
    *(_BYTE *)(v7 + 16) = 1;
    swift_release(v7);
    goto LABEL_42;
  }
LABEL_37:
  if (v6 < 0)
    v19 = v6;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v6, 2);
  v10 = _CocoaArrayWrapper.endIndex.getter(v19);
  if (!v10)
    goto LABEL_41;
LABEL_17:
  if (v10 >= 1)
  {
    v11 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v6);
      }
      else
      {
        v12 = *(_QWORD *)(v6 + 8 * v11 + 32);
        swift_retain(v12);
      }
      ++v11;
      v13 = *(id *)(v12 + 24);
      sub_1006A72F4(v13, 0);
      swift_release(v12);

    }
    while (v10 != v11);
    goto LABEL_41;
  }
  __break(1u);
}

uint64_t sub_100CF7278(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  double v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD v23[31];
  _BYTE v24[256];

  v7 = sub_1004B804C((uint64_t *)&unk_1013F1500);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100479D94(0);
  v12 = objc_msgSend((id)objc_opt_self(CRLPathSource), "pathSourceForShapeType:naturalSize:", 0, v10, v11);
  v13 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(a4);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "initWithString:", v14, swift_bridgeObjectRelease().n128_f64[0]);

  v16 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  sub_10054F488((uint64_t)v24);
  sub_1004C4938((uint64_t)v24, (uint64_t)v23, &qword_1013E1B50);
  v17 = v12;
  v18 = v15;
  v19 = sub_100CF4294(0, 0, v12, 0, *(uint64_t *)&a1, *(uint64_t *)&a2, 0, 0, 1, (_QWORD *)1, (void *)1, (void *)1, (void *)1, (char *)v15, v9, v23, 0, 0, 0);

  sub_1004CB800((uint64_t)v9, (uint64_t *)&unk_1013F1500);
  v20 = type metadata accessor for CRLWPShapeItem(0);
  return swift_dynamicCastClassUnconditional(v19, v20, 0, 0, 0);
}

id sub_100CF77E0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  _BYTE v17[40];

  v6 = sub_1004B804C((uint64_t *)&unk_1013E9BE0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a2
    && (sub_1004E90B0(a2 + OBJC_IVAR____TtC8Freeform8CRLAsset_storage, (uint64_t)v17),
        v9 = sub_1004B804C(&qword_101400020),
        v10 = type metadata accessor for CRLAssetBackedAssetStorage(0),
        swift_dynamicCast(&v16, v17, v9, v10, 6)))
  {
    v11 = v16;
    sub_1004B8460(v16 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, (uint64_t)v8, type metadata accessor for CRLAssetData);
    swift_release(v11);
    v12 = type metadata accessor for CRLAssetData(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  }
  else
  {
    v13 = type metadata accessor for CRLAssetData(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  }
  v14 = sub_100CF1FAC(a1, (uint64_t)v8, a3);
  sub_1004CB800((uint64_t)v8, (uint64_t *)&unk_1013E9BE0);
  return v14;
}

double *sub_100CF7A5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(void *, char *, _QWORD, uint64_t);
  id v16;
  void *v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v3 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (unint64_t)_swiftEmptyArrayStorage;
  v6 = type metadata accessor for CRLUUIDRemapHelper();
  v7 = swift_allocObject(v6, 40, 7);
  *(_QWORD *)(v7 + 24) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v7 + 32) = _swiftEmptyDictionarySingleton;
  v27 = v7;
  *(_BYTE *)(v7 + 16) = 1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board);
    v24 = OBJC_IVAR____TtC8Freeform8CRLBoard_store;
    v26 = a1 & 0xC000000000000001;
    for (i = 4; ; ++i)
    {
      v1 = i - 4;
      v10 = v26
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
          : *(id *)(a1 + 8 * i);
      v11 = v10;
      v12 = i - 3;
      if (__OFADD__(v1, 1))
        break;
      v13 = *(void **)(*(_QWORD *)(v25 + v24) + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
      v14 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 1, 1, v14);
      v15 = *(uint64_t (**)(void *, char *, _QWORD, uint64_t))((swift_isaMask & *v11) + 0x1F0);
      v16 = v13;
      v17 = (void *)v15(v13, v5, 0, v27);
      sub_1004CB800((uint64_t)v5, (uint64_t *)&unk_1013E1A50);

      v18 = v17;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      v20 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v19 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v20 >= v19 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
      specialized Array._endMutation()(v21);

      if (v12 == v8)
      {
        swift_release(v27);
        swift_bridgeObjectRelease();
        return (double *)v28;
      }
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_release(v27);
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100CF7E18()
{
  return type metadata accessor for CRLBoardItemFactory(0);
}

uint64_t type metadata accessor for CRLBoardItemFactory(uint64_t a1)
{
  uint64_t result;

  result = qword_10140E408;
  if (!qword_10140E408)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLBoardItemFactory);
  return result;
}

uint64_t sub_100CF7E5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for CRLBoardInsertStyleData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_100CF7ED8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  objc_super v4;

  *(_QWORD *)&a3[OBJC_IVAR____TtC8Freeform12CRLImageItem__imageAssetAsData] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC8Freeform12CRLImageItem__thumbnailAssetAsData] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC8Freeform12CRLImageItem__maskInfo] = 0;
  a3[OBJC_IVAR____TtC8Freeform12CRLImageItem__isSpatial] = 2;
  a3[OBJC_IVAR____TtC8Freeform12CRLMediaItem_isLooping] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC8Freeform13CRLStyledItem__stroke] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_store] = a1;
  *(_QWORD *)&a3[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData] = a2;
  v4.receiver = a3;
  v4.super_class = (Class)type metadata accessor for CRLBoardItemBase(0);
  return objc_msgSendSuper2(&v4, "init");
}

id sub_100CF7F94(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  void *Strong;
  id result;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t inited;
  unint64_t v25;
  double v26;
  char *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void (*v35)(char *, uint64_t, uint64_t, __n128);
  uint64_t v36;
  void *v37;
  id v38;
  char v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  char v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, __n128);
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  id v73;
  id v74;
  uint64_t v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  id v84;
  __n128 v85;
  uint64_t v86;
  char isUniquelyReferenced_nonNull_native;
  __n128 v88;
  void *v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  double v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  char *v128;
  __n128 v129;
  id v130;
  __int128 v131;
  uint64_t v132;
  char *v133;
  char *v134;
  unint64_t v135;
  id v136;
  void (*v137)(char *, uint64_t, uint64_t, __n128);
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[3];
  uint64_t v151;
  _BYTE v152[24];
  char v153[24];
  char v154[120];

  v145 = a3;
  v147 = a2;
  v5 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for UUID(0);
  v146 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v9 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v142 = (char *)&v131 - v11;
  __chkstk_darwin(v12);
  v144 = (char *)&v131 - v13;
  v14 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8Freeform15CRLAssetManager_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 16));
  v15 = (void (*)(char *, uint64_t, uint64_t, __n128))(a3 + OBJC_IVAR____TtC8Freeform15CRLAssetManager_store);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a3 + OBJC_IVAR____TtC8Freeform15CRLAssetManager_store);

  v137 = v15;
  v138 = v14;
  v133 = v9;
  v134 = v7;
  v141 = a1;
  if (Strong)
  {
    result = (id)swift_unknownObjectWeakLoadStrong(v15);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v18 = result;
    v19 = objc_msgSend(result, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v21 = v20;
    v23 = v22;

  }
  else
  {
    v23 = 0xE300000000000000;
    v21 = 7104878;
  }
  v139 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v139, v154);
  v131 = xmmword_100EF5A10;
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v25 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v25;
  v132 = v21;
  *(_QWORD *)(inited + 32) = v21;
  *(_QWORD *)(inited + 40) = v23;
  v135 = v23;
  *(_QWORD *)&v26 = swift_bridgeObjectRetain(v23).n128_u64[0];
  v27 = v147;
  v28 = objc_msgSend(v147, "store", v26);
  v29 = objc_msgSend(v28, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v31 = v30;
  v33 = v32;

  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v25;
  v140 = v25;
  *(_QWORD *)(inited + 72) = v31;
  *(_QWORD *)(inited + 80) = v33;
  v34 = objc_msgSend(v27, "store");
  v35 = v137;
  v36 = swift_unknownObjectWeakLoadStrong(v137);
  if (!v36)
  {

    goto LABEL_9;
  }
  v37 = (void *)v36;
  type metadata accessor for CRLBoardDataStore(0);
  v38 = v34;
  v39 = static NSObject.== infix(_:_:)(v38, v37);

  if ((v39 & 1) == 0)
  {
LABEL_9:
    sub_100757E04(&_mh_execute_header, (uint64_t)"asset(forAssetData:owner:)", 26, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLAsset.swift", 80, 2, 234, "Unexpected board data store. expected=%{public}@, actual=%{public}@", 67, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"asset(forAssetData:owner:)", 26, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLAsset.swift", 80, 2u, 234, (uint64_t)"Unexpected board data store. expected=%{public}@, actual=%{public}@", 67, 2u);
  }
  v40 = (char *)objc_msgSend(v147, "parentBoard", swift_bridgeObjectRelease().n128_f64[0]);
  v136 = v40;
  if (v40)
  {
    v41 = v40;
    v42 = swift_initStackObject(v139, &v148);
    *(_OWORD *)(v42 + 16) = v131;
    v43 = v140;
    *(_QWORD *)(v42 + 56) = &type metadata for String;
    *(_QWORD *)(v42 + 64) = v43;
    v44 = v135;
    *(_QWORD *)(v42 + 32) = v132;
    *(_QWORD *)(v42 + 40) = v44;
    v45 = OBJC_IVAR____TtC8Freeform8CRLBoard_store;
    v46 = v41;
    v47 = *(id *)&v41[OBJC_IVAR____TtC8Freeform8CRLBoard_store];
    v147 = v46;
    v48 = objc_msgSend(v47, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v50 = v49;
    v52 = v51;

    *(_QWORD *)(v42 + 96) = &type metadata for String;
    *(_QWORD *)(v42 + 104) = v43;
    *(_QWORD *)(v42 + 72) = v50;
    *(_QWORD *)(v42 + 80) = v52;
    v53 = *(void **)&v46[v45];
    v54 = swift_unknownObjectWeakLoadStrong(v35);
    if (!v54
      || (v55 = (void *)v54,
          type metadata accessor for CRLBoardDataStore(0),
          v56 = v53,
          v57 = static NSObject.== infix(_:_:)(v56, v55),
          v56,
          v56,
          v55,
          (v57 & 1) == 0))
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"asset(forAssetData:owner:)", 26, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLAsset.swift", 80, 2, 240, "Unexpected board data store. expected=%{public}@, actual=%{public}@", 67, 2u, v42);
      sub_1004F5394(v42, (uint64_t)"asset(forAssetData:owner:)", 26, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLAsset.swift", 80, 2u, 240, (uint64_t)"Unexpected board data store. expected=%{public}@, actual=%{public}@", 67, 2u);
    }
    v58 = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v58 = swift_unknownObjectRetain(v147);
  }
  v59 = v145;
  v61 = v143;
  v60 = (uint64_t)v144;
  v62 = v141;
  v63 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16);
  v63(v144, v141, v143, v58);
  v64 = (_QWORD *)(v59 + OBJC_IVAR____TtC8Freeform15CRLAssetManager_assets);
  swift_beginAccess(v59 + OBJC_IVAR____TtC8Freeform15CRLAssetManager_assets, v153, 0, 0);
  v65 = *v64;
  if (!*(_QWORD *)(*v64 + 16))
    goto LABEL_21;
  swift_bridgeObjectRetain(*v64);
  v66 = sub_100842EFC(v60);
  if ((v67 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    v137 = v63;
    v71 = (uint64_t)v134;
    sub_1004B8460(v62, (uint64_t)v134, type metadata accessor for CRLAssetData);
    v72 = v147;
    v73 = objc_msgSend(v147, "store");
    v74 = sub_100964AE0(v71, v73);

    v75 = type metadata accessor for CRLAssetManager.AssetInfo();
    v68 = swift_allocObject(v75, 40, 7);
    v76 = (void *)objc_opt_self(NSHashTable);
    v77 = v74;
    v78 = objc_msgSend(v76, "hashTableWithOptions:", 517, swift_unknownObjectRetain(v72).n128_f64[0]);
    *(_QWORD *)(v68 + 24) = v78;
    v79 = objc_msgSend((id)objc_opt_self(NSHashTable), "hashTableWithOptions:", 517);
    *(_QWORD *)(v68 + 32) = v79;
    *(_QWORD *)(v68 + 16) = v77;
    v80 = type metadata accessor for CRLBoard(0);
    v81 = swift_dynamicCastClass(v72, v80);
    v82 = v77;
    if (v81)
    {
      v83 = v78;
      v84 = (id)v81;
    }
    else
    {
      v83 = v79;
      v84 = v147;
    }
    objc_msgSend(v83, "addObject:", v84);
    v63 = v137;

    v85 = swift_unknownObjectRelease(v147);
    v86 = (uint64_t)v142;
    v61 = v143;
    v60 = (uint64_t)v144;
    v63(v142, (uint64_t)v144, v143, v85);
    swift_beginAccess(v64, v152, 33, 0);
    swift_retain(v68);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v150[0] = *v64;
    *v64 = 0x8000000000000000;
    sub_100826404(v68, v86, isUniquelyReferenced_nonNull_native);
    *v64 = v150[0];
    v88 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v146 + 8))(v86, v61, v88);
    swift_endAccess(v152);
    v59 = v145;
    if (qword_1013DD8C0 != -1)
      swift_once(&qword_1013DD8C0, sub_100A0685C);
    swift_beginAccess(&static OS_os_log.assetManagement, v152, 0, 0);
    v89 = (void *)static OS_os_log.assetManagement;
    v90 = swift_initStackObject(v139, &v151);
    *(_OWORD *)(v90 + 16) = xmmword_100EF5E40;
    v91 = v89;
    v92 = UUID.uuidString.getter(v91);
    v93 = v140;
    *(_QWORD *)(v90 + 56) = &type metadata for String;
    *(_QWORD *)(v90 + 64) = v93;
    *(_QWORD *)(v90 + 32) = v92;
    *(_QWORD *)(v90 + 40) = v94;
    v96 = static os_log_type_t.default.getter(v95);
    sub_100A06EBC((uint64_t)v91, &_mh_execute_header, v96, "CRLAssetManager asset(forAssetData:%@, owner:) create new", 57, 2, v90);
    swift_setDeallocating(v90);
    v97 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v90 + 32, 1, v97);

    goto LABEL_31;
  }
  v68 = *(_QWORD *)(*(_QWORD *)(v65 + 56) + 8 * v66);
  swift_retain(v68);
  swift_bridgeObjectRelease();
  v69 = type metadata accessor for CRLBoard(0);
  v70 = swift_dynamicCastClass(v147, v69);
  if (v70)
  {
    objc_msgSend(*(id *)(v68 + 24), "addObject:", v70, swift_retain(v68).n128_f64[0]);
  }
  else
  {
    v98 = *(void **)(v68 + 32);
    *(_QWORD *)&v99 = swift_retain(v68).n128_u64[0];
    objc_msgSend(v98, "addObject:", v147, v99);
  }
  if (qword_1013DD8C0 != -1)
    swift_once(&qword_1013DD8C0, sub_100A0685C);
  swift_beginAccess(&static OS_os_log.assetManagement, v152, 0, 0);
  v100 = (void *)static OS_os_log.assetManagement;
  v101 = swift_initStackObject(v139, &v149);
  *(_OWORD *)(v101 + 16) = xmmword_100EF5E40;
  v91 = v100;
  v102 = UUID.uuidString.getter(v91);
  v103 = v140;
  *(_QWORD *)(v101 + 56) = &type metadata for String;
  *(_QWORD *)(v101 + 64) = v103;
  *(_QWORD *)(v101 + 32) = v102;
  *(_QWORD *)(v101 + 40) = v104;
  v106 = static os_log_type_t.default.getter(v105);
  sub_100A06EBC((uint64_t)v91, &_mh_execute_header, v106, "CRLAssetManager asset(forAssetData:%@, owner:) add owner to existing", 68, 2, v101);
  swift_setDeallocating(v101);
  v107 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v101 + 32, 1, v107);
  swift_release(v68);
LABEL_31:

  v108 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_owners;
  v109 = (char *)objc_msgSend(*(id *)(v59 + OBJC_IVAR____TtC8Freeform15CRLAssetManager_owners), "objectForKeyedSubscript:", v147);
  if (v109)
  {
    v110 = v109;
    v111 = (uint64_t)v133;
    ((void (*)(char *, uint64_t, uint64_t))v63)(v133, v60, v61);
    swift_beginAccess(v110 + 16, v150, 33, 0);
    v112 = (uint64_t)v142;
    sub_100AD569C((uint64_t)v142, v111);
    v113 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
    v113(v112, v61);
    swift_endAccess(v150);
    swift_unknownObjectRelease(v147);

    v114 = (uint64_t)v110;
  }
  else
  {
    v115 = *(void **)(v59 + v108);
    v116 = (uint64_t)v142;
    ((void (*)(char *, uint64_t, uint64_t))v63)(v142, v60, v61);
    v117 = type metadata accessor for CRLAssetManager.OwnerInfo();
    v118 = swift_allocObject(v117, 25, 7);
    *(_BYTE *)(v118 + 24) = 0;
    v119 = sub_1004B804C(&qword_1013E77A8);
    v120 = (void (*)(uint64_t, uint64_t, uint64_t))v63;
    v121 = v146;
    v122 = *(unsigned __int8 *)(v146 + 80);
    v123 = (v122 + 32) & ~v122;
    v124 = swift_allocObject(v119, v123 + *(_QWORD *)(v146 + 72), v122 | 7);
    *(_OWORD *)(v124 + 16) = xmmword_100EF5E40;
    v125 = v124 + v123;
    v120(v125, v116, v61);
    v126 = v115;
    v127 = sub_100AF7994(v124);
    swift_setDeallocating(v124);
    swift_arrayDestroy(v125, 1, v61);
    swift_deallocClassInstance(v124, 32, 7);
    v113 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
    v113(v116, v61);
    *(_QWORD *)(v118 + 16) = v127;
    v60 = (uint64_t)v144;
    v128 = v147;
    objc_msgSend(v126, "setObject:forKeyedSubscript:", v118, v147);
    swift_unknownObjectRelease(v128);

    v114 = v118;
  }
  v129 = swift_release(v114);
  ((void (*)(uint64_t, uint64_t, __n128))v113)(v60, v61, v129);
  v130 = *(id *)(v68 + 16);
  swift_release(v68);
  sub_1009636AC(3600.0);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v138 + 16));
  return v130;
}

id sub_100CF8AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, char *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  id v42;
  double v43;
  float v44;
  double v45;
  float v46;
  double v47;
  float v48;
  double v49;
  float v50;
  double v51;
  float v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  uint64_t v57;
  Class v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  _DWORD *v73;
  uint64_t v74;
  id v75;
  void *v76;
  os_unfair_lock_s *v77;
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  __n128 v103;
  _BYTE *v104;
  id v105;
  uint64_t v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t, uint64_t, uint64_t);
  Class v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  _BYTE v133[24];
  _OWORD v134[8];
  _BYTE v135[232];
  objc_super v136;
  _QWORD v137[5];
  uint64_t v138;
  _BYTE v139[136];

  v122 = a4;
  v112 = a1;
  v10 = sub_1004B804C((uint64_t *)&unk_1013E9BE0);
  __chkstk_darwin(v10);
  v119 = (uint64_t)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v12);
  v118 = (uint64_t)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLImageItemCRDTData(0);
  __chkstk_darwin(v14);
  v120 = (char *)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v121 = (char *)&v107 - v17;
  v127 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v117 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_1004B804C((uint64_t *)&unk_1013F02C0);
  __chkstk_darwin(v110);
  v124 = (uint64_t)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v126 = (uint64_t)&v107 - v22;
  v23 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v23);
  v25 = (char *)&v107 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v107 - v27;
  v115 = (Class)type metadata accessor for CRLBoardItemParentAffinity(0);
  __chkstk_darwin(v115);
  v128 = (char *)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v130 = (uint64_t)&v107 - v31;
  v32 = sub_1004B804C(&qword_1013F8AC0);
  __chkstk_darwin(v32);
  v116 = (uint64_t)&v107 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)&v107 - v35;
  v123 = a3;
  v129 = a6;
  v125 = (uint64_t)&v107 - v35;
  if (a5)
  {
    a5 = a5;
    sub_1008AC6F8(a5, (uint64_t)v36);
    v37 = type metadata accessor for CRLMaskInfoData(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 0, 1, v37);
    v38 = a5;
  }
  else
  {
    v39 = type metadata accessor for CRLMaskInfoData(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v36, 1, 1, v39);
    v38 = objc_msgSend(objc_allocWithZone((Class)CRLCanvasInfoGeometry), "init");
  }
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v113 = a2;
  v41 = v127;
  v40(v28, a2, v127);
  v111 = v18;
  v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v114(v28, 0, 1, v41);
  v109 = a5;
  v42 = v38;
  objc_msgSend(v42, "position");
  v44 = v43;
  v46 = v45;
  objc_msgSend(v42, "size");
  v48 = v47;
  v50 = v49;
  objc_msgSend(v42, "angle");
  v52 = v51;
  v53 = objc_msgSend(v42, "widthValid");
  v54 = objc_msgSend(v42, "heightValid");
  v55 = objc_msgSend(v42, "horizontalFlip");
  v56 = objc_msgSend(v42, "verticalFlip");
  v108 = v42;

  sub_1004CB7BC((uint64_t)v28, (uint64_t)v25, (uint64_t *)&unk_1013E1A50);
  v57 = (uint64_t)v128;
  v114(v128, 1, 1, v41);
  v58 = v115;
  *(_QWORD *)(v57 + *((int *)v115 + 6)) = _swiftEmptyDictionarySingleton;
  sub_1005E388C((uint64_t)v25, v57);
  v59 = v57 + *((int *)v58 + 5);
  *(float *)v59 = v44;
  *(float *)(v59 + 4) = v46;
  *(float *)(v59 + 8) = v48;
  *(float *)(v59 + 12) = v50;
  *(float *)(v59 + 16) = v52;
  *(_BYTE *)(v59 + 20) = v53;
  *(_BYTE *)(v59 + 21) = v54;
  *(_BYTE *)(v59 + 22) = v55;
  *(_BYTE *)(v59 + 23) = v56;
  *(_QWORD *)(v59 + 24) = _swiftEmptyDictionarySingleton;
  sub_1004B84E0(v57, v130, type metadata accessor for CRLBoardItemParentAffinity);
  sub_1004CB800((uint64_t)v28, (uint64_t *)&unk_1013E1A50);
  v60 = v129;
  v61 = (char *)objc_msgSend(v129, "store");
  v62 = *(_QWORD *)&v61[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v62 + 16));
  v63 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager;
  v64 = *(void **)&v61[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  if (v64)
  {
    v65 = *(id *)&v61[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  }
  else
  {
    v115 = (Class)type metadata accessor for CRLAssetManager();
    v66 = (char *)objc_allocWithZone(v115);
    v67 = &v66[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store];
    swift_unknownObjectWeakInit(&v66[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store]);
    v68 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_lock;
    v69 = type metadata accessor for CRLUnfairLock();
    v70 = swift_allocObject(v69, 24, 7);
    v71 = v61;
    v72 = v66;
    v73 = (_DWORD *)swift_slowAlloc(4, -1);
    *v73 = 0;
    *(_QWORD *)(v70 + 16) = v73;
    atomic_thread_fence(memory_order_acq_rel);
    *(_QWORD *)&v66[v68] = v70;
    *(_QWORD *)&v72[OBJC_IVAR____TtC8Freeform15CRLAssetManager_assets] = _swiftEmptyDictionarySingleton;
    v74 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_owners;
    *(_QWORD *)&v72[v74] = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 517, 0);
    *(_QWORD *)&v72[OBJC_IVAR____TtC8Freeform15CRLAssetManager_garbageCollectionWorkItem] = 0;
    swift_unknownObjectWeakAssign(v67, v71);

    v136.receiver = v72;
    v60 = v129;
    v136.super_class = v115;
    v75 = objc_msgSendSuper2(&v136, "init");

    v76 = *(void **)&v61[v63];
    *(_QWORD *)&v61[v63] = v75;
    v65 = v75;

    v64 = 0;
  }
  v77 = *(os_unfair_lock_s **)(v62 + 16);
  v78 = v64;
  os_unfair_lock_unlock(v77);

  v79 = v123;
  v80 = sub_100CF7F94(v123, v60, (uint64_t)v65);

  v81 = sub_1008D3194((uint64_t)v80);
  v82 = (uint64_t)v120;
  v83 = (uint64_t)v121;
  if (v81)
  {
    v84 = swift_allocObject(&unk_1012A0958, 24, 7);
    *(_QWORD *)(v84 + 16) = _swiftEmptyArrayStorage;
    v137[4] = sub_100786C04;
    v138 = v84;
    v137[0] = _NSConcreteStackBlock;
    v137[1] = *(_QWORD *)"";
    v137[2] = sub_100933E14;
    v137[3] = &unk_1012A0970;
    v85 = _Block_copy(v137);
    v86 = v138;
    swift_retain(v84);
    objc_msgSend(v81, "iteratePathElementsWithBlock:", v85, swift_release(v86).n128_f64[0]);

    _Block_release(v85);
    swift_beginAccess(v84 + 16, &v131, 0, 0);
    v81 = *(id *)(v84 + 16);
    swift_bridgeObjectRetain(v81);
    swift_release(v84);
  }
  v87 = (uint64_t)v128;
  sub_1004B8460(v130, (uint64_t)v128, type metadata accessor for CRLBoardItemParentAffinity);
  sub_1004C3A10(v134);
  v88 = sub_1004C4938((uint64_t)v134, (uint64_t)v139, (uint64_t *)&unk_1013F02D0);
  v89 = (uint64_t)v117;
  UUID.init()(v88);
  v90 = v126;
  sub_100D5EF54(v89, v87, 0, 0, 0, 0xE000000000000000, (uint64_t)v139, v126);
  v91 = v118;
  sub_1004B8460(v79, v118, type metadata accessor for CRLAssetData);
  v92 = v122;
  v93 = v119;
  sub_1004CB7BC(v122, v119, (uint64_t *)&unk_1013E9BE0);
  sub_1004C39E8((uint64_t)v135);
  sub_1004C4938((uint64_t)v135, (uint64_t)v137, (uint64_t *)&unk_1013F1530);
  v94 = v116;
  sub_1004CB7BC(v125, v116, &qword_1013F8AC0);
  sub_100BDEE98(v91, v93, (uint64_t)v81, (uint64_t)v137, v94, v83);
  sub_1004CB7BC(v90, v124, (uint64_t *)&unk_1013F02C0);
  sub_1004B8460(v83, v82, type metadata accessor for CRLImageItemCRDTData);
  v95 = type metadata accessor for CRLImageItemData(0);
  v96 = swift_allocObject(v95, *(unsigned int *)(v95 + 48), *(unsigned __int16 *)(v95 + 52));
  sub_1004B8460(v82, v96 + qword_101480ED0, type metadata accessor for CRLImageItemCRDTData);
  v97 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  LODWORD(v93) = objc_msgSend(v97, "BOOLForKey:", CFSTR("CRLNewImageItemsHaveGoodEnoughFidelityVersionSetAboveCurrentDefault"));

  if (!(_DWORD)v93)
    goto LABEL_12;
  v98 = sub_1001E9730();
  v99 = v98 + 1;
  v100 = v129;
  if (v98 == -1)
  {
    __break(1u);
LABEL_12:
    v99 = 0x2000400000000;
    v100 = v129;
  }
  sub_1004B84A4(v82, type metadata accessor for CRLImageItemCRDTData);
  sub_1004C4938(v124, v96 + *(_QWORD *)(*(_QWORD *)v96 + 632), (uint64_t *)&unk_1013F02C0);
  v101 = sub_1005E1000(0x1000000000000, v99, 0x1000000000000, 2);
  swift_beginAccess((char *)v101 + *(_QWORD *)(*v101 + 632), v133, 33, 0);
  v132 = 1;
  v102 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.setter(&v132, v102, v103);
  swift_endAccess(v133);
  v104 = objc_allocWithZone((Class)type metadata accessor for CRLImageItem(0));
  swift_retain(v101);
  v105 = sub_100CF7ED8(v112, (uint64_t)v101, v104);

  swift_release(v101);
  sub_1004CB800(v92, (uint64_t *)&unk_1013E9BE0);
  sub_1004B84A4(v79, type metadata accessor for CRLAssetData);
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v113, v127);
  sub_1004B84A4(v83, type metadata accessor for CRLImageItemCRDTData);
  sub_1004CB800(v126, (uint64_t *)&unk_1013F02C0);
  sub_1004B84A4(v130, type metadata accessor for CRLBoardItemParentAffinity);
  sub_1004CB800(v125, &qword_1013F8AC0);
  return v105;
}

void sub_100CF9574(uint64_t a1)
{
  if (a1 != 17 && (sub_100CF99E4(a1) && !sub_100CF9A1C(a1) || !sub_100CF9A30(a1)))
    sub_100479D94(a1);
}

uint64_t sub_100CF960C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  _BYTE v22[40];

  v6 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v9);
  v11 = &v22[-v10 - 8];
  sub_1004E90B0(a1 + OBJC_IVAR____TtC8Freeform8CRLAsset_storage, (uint64_t)v22);
  v12 = sub_1004B804C(&qword_101400020);
  v13 = type metadata accessor for CRLAssetBackedAssetStorage(0);
  result = swift_dynamicCast(&v21, v22, v12, v13, 6);
  if ((_DWORD)result)
  {
    v15 = v21;
    sub_1004B8460(v21 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, (uint64_t)v11, type metadata accessor for CRLAssetData);
    swift_release(v15);
    sub_1004E90B0(a2 + OBJC_IVAR____TtC8Freeform8CRLAsset_storage, (uint64_t)v22);
    result = swift_dynamicCast(&v21, v22, v12, v13, 6);
    if ((result & 1) != 0)
    {
      v16 = v21;
      sub_1004B8460(v21 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, (uint64_t)v8, type metadata accessor for CRLAssetData);
      swift_release(v16);
      v17 = sub_100CF1C8C((uint64_t)v11, (uint64_t)v8, a3);
      sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLAssetData);
      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLAssetData);
      v18 = (void *)objc_opt_self(CRLShadow);
      v19 = v17;
      v20 = objc_msgSend(v18, "defaultShadow");
      sub_100776C40(v20);

      return (uint64_t)v19;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100CF97F0(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = *(_OWORD *)(a1 + 464);
  v18 = *(_OWORD *)(a1 + 480);
  v15 = *(_OWORD *)(a1 + 432);
  v16 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 416);
  v11 = *(_OWORD *)(a1 + 368);
  v12 = *(_OWORD *)(a1 + 384);
  v10 = *(_OWORD *)(a1 + 352);
  v9 = *(_OWORD *)(a1 + 336);
  v8 = *(_OWORD *)(a1 + 320);
  v7 = *(_OWORD *)(a1 + 304);
  v6 = *(_OWORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 240);
  sub_1004C3D60(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

BOOL sub_100CF99E4(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 0x14 && ((0x8C001u >> (a1 - 1)) & 1) != 0)
    return 1;
  return a1 == 19 || (a1 & 0xFFFFFFFFFFFFFFEFLL) == 2;
}

BOOL sub_100CF9A1C(uint64_t a1)
{
  return a1 == 19 || (a1 & 0xFFFFFFFFFFFFFFEFLL) == 2;
}

BOOL sub_100CF9A30(uint64_t a1)
{
  return a1 == 0;
}

double sub_100CF9A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100CF9A4C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100CF9A54()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100CF9A88()
{
  uint64_t v0;

  sub_100CF6C78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(const char **)(v0 + 32));
}

uint64_t sub_100CF9A94(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 368);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_100CF9AAC(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = *(_OWORD *)(a1 + 336);
  v11 = *(_OWORD *)(a1 + 352);
  v8 = *(_OWORD *)(a1 + 304);
  v9 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  sub_1004C3A28(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    *(_QWORD *)(a1 + 368),
    *(_QWORD *)(a1 + 376));
  return a1;
}

uint64_t sub_100CF9B44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t (*sub_100CF9B70(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_1004B8460(a2, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
  v4[5] = sub_100CFC6A8(v4, (uint64_t)v6);
  return sub_100CF9BFC;
}

uint64_t (*sub_100CF9C00(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_1004B8460(a2, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
  v4[5] = sub_100CFC764(v4, (uint64_t)v6);
  return sub_100CF9BFC;
}

void sub_100CF9C8C(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  sub_1004BBB8C((uint64_t)v2);
  free(v2);
  free(v1);
}

void (*sub_100CF9CCC(_QWORD *a1, void *a2))(_QWORD *)
{
  _QWORD *v4;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  v4[5] = sub_100CFC874(v4, a2);
  return sub_100CF9D24;
}

void (*sub_100CF9D28(_QWORD *a1, char a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_100CFC900(v4, a2 & 1);
  return sub_100501800;
}

void (*sub_100CF9D74(_QWORD *a1, void *a2))(_QWORD *)
{
  _QWORD *v4;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  v4[5] = sub_100CFC9BC(v4, a2);
  return sub_100CF9D24;
}

void (*sub_100CF9DCC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_100CFCA44(v2, (uint64_t)v5);
  return sub_100CF9E5C;
}

void sub_100CF9E5C(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void (*sub_100CF9EB0(_QWORD *a1, void *a2))(_QWORD *)
{
  _QWORD *v4;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  v4[5] = sub_100CFCB70(v4, a2);
  return sub_100CF9D24;
}

void sub_100CF9F08(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t (*sub_100CF9F3C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_topicNumberData, a1, 33, 0);
  return j__swift_endAccess_0;
}

id CRLWPTopicNumbers.__allocating_init(with:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_topicNumberData;
  v5 = v3;
  *(_QWORD *)&v3[v4] = sub_1008D83C0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_invalidCharIndex] = 0;
  v6 = type metadata accessor for CRLWPStorage();
  *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage] = swift_dynamicCastClassUnconditional(a1, v6, 0, 0, 0);
  swift_unknownObjectRetain(a1);

  v9.receiver = v5;
  v9.super_class = v1;
  v7 = objc_msgSendSuper2(&v9, "init");
  swift_unknownObjectRelease(a1);
  return v7;
}

id CRLWPTopicNumbers.init(with:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v3 = OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_topicNumberData;
  v4 = v1;
  *(_QWORD *)&v1[v3] = sub_1008D83C0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v4[OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_invalidCharIndex] = 0;
  v5 = type metadata accessor for CRLWPStorage();
  *(_QWORD *)&v4[OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage] = swift_dynamicCastClassUnconditional(a1, v5, 0, 0, 0);
  swift_unknownObjectRetain(a1);

  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for CRLWPTopicNumbers();
  v6 = objc_msgSendSuper2(&v8, "init");
  swift_unknownObjectRelease(a1);
  return v6;
}

uint64_t type metadata accessor for CRLWPTopicNumbers()
{
  return objc_opt_self(_TtC8Freeform17CRLWPTopicNumbers);
}

Swift::Void __swiftcall CRLWPTopicNumbers.invalidate(from:)(Swift::Int from)
{
  uint64_t v1;
  id v2;
  unint64_t **v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  void (*v29)(_QWORD *);
  int64_t v30;
  uint64_t v31;
  unint64_t *v32;
  id v33;
  unint64_t **v34;
  int64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD v38[4];
  _BYTE v39[32];
  char v40[24];

  v2 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage), "textRangeForParagraphAtIndex:", objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage), "paragraphIndexAtCharIndex:", from));
  v37 = v1;
  v3 = (unint64_t **)(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_topicNumberData);
  swift_beginAccess(v3, v40, 1, 0);
  v34 = v3;
  v4 = *v3;
  v7 = (*v3)[8];
  v6 = (uint64_t)(*v3 + 8);
  v5 = v7;
  v8 = 1 << *((_BYTE *)v4 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(v4);
  v12 = 0;
  v35 = v11;
  v36 = v4;
  while (v10)
  {
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v14 = v13 | (v12 << 6);
LABEL_18:
    v18 = 8 * v14;
    v19 = *(_QWORD *)(v4[7] + v18);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v21 = 0;
      v22 = *(void **)(v4[6] + v18);
      v23 = v19 + 32;
      v24 = v20;
      do
      {
        if (__OFSUB__(v24, v21))
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        v25 = v21 + (uint64_t)(v24 - v21) / 2;
        if (__OFADD__(v21, (uint64_t)(v24 - v21) / 2))
          goto LABEL_39;
        if (v25 >= v20)
          goto LABEL_40;
        if (*(_QWORD *)(v23 + 24 * v25) < (uint64_t)v2)
          v21 = v25 + 1;
        else
          v24 = v21 + (uint64_t)(v24 - v21) / 2;
      }
      while (v21 != v24);
      if (v24 >= v20)
        continue;
      v26 = v22;
      v27 = sub_100CF9F3C((uint64_t)v39);
      v29 = sub_100CF9EB0(v38, v26);
      if (!*(_QWORD *)v28)
      {
LABEL_4:
        ((void (*)(_QWORD *, _QWORD))v29)(v38, 0);
        ((void (*)(_BYTE *, _QWORD))v27)(v39, 0);
        v11 = v35;
        v4 = v36;

        continue;
      }
      v30 = *(_QWORD *)(*(_QWORD *)v28 + 16);
      if (v30 >= v24)
      {
        sub_100CFFE88(v24, v30);
        goto LABEL_4;
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
  }
  if (__OFADD__(v12++, 1))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v12 >= v11)
    goto LABEL_35;
  v16 = *(_QWORD *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_17:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_18;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v11)
    goto LABEL_35;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 2;
  if (v12 + 2 >= v11)
    goto LABEL_35;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    v12 = v17;
    goto LABEL_17;
  }
  v17 = v12 + 3;
  if (v12 + 3 < v11)
  {
    v16 = *(_QWORD *)(v6 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        v12 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_43;
        if (v12 >= v11)
          goto LABEL_35;
        v16 = *(_QWORD *)(v6 + 8 * v12);
        ++v17;
        if (v16)
          goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
LABEL_35:
  swift_release(v4);
  swift_bridgeObjectRetain(*v34);
  v32 = sub_100CFE18C(v31);
  swift_bridgeObjectRelease();
  *v34 = v32;
  swift_bridgeObjectRelease();
  v33 = *(id *)(v37 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_invalidCharIndex);
  if ((uint64_t)v2 < (uint64_t)v33)
    v33 = v2;
  *(_QWORD *)(v37 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_invalidCharIndex) = v33;
}

Swift::UInt __swiftcall CRLWPTopicNumbers.listNumber(for:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  Swift::UInt result;
  uint64_t v10;
  Swift::UInt v11;

  v2 = OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage;
  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage), "paragraphIndexAtCharIndex:", a1);
  if (v3 == (id)NSNotFound.getter(v3))
    return 0;
  v4 = (uint64_t)objc_msgSend(*(id *)(v1 + v2), "paragraphLevelAtParIndex:", v3);
  if (v4 > 8)
    return 0;
  v5 = v4;
  v6 = sub_100CFAD08((uint64_t)v3);
  if (!v6)
    return 0;
  v7 = (void *)v6;
  v8 = objc_msgSend(*(id *)(v1 + v2), "textRangeForParagraphAtIndex:", v3);
  sub_100CFAE70((uint64_t)v8);
  sub_100CFA8C8(v7, (uint64_t)v8);
  if (!v10)
  {

    return 0;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v5 < *(_QWORD *)(v10 + 16))
  {
    v11 = *(_QWORD *)(v10 + 32 * v5 + 32);

    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall CRLWPTopicNumbers.numberedListLabel(for:includeFormatting:)(Swift::Int a1, Swift::Bool includeFormatting)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  void *v27;
  Swift::String result;
  void *v29;

  v4 = OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage;
  v5 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage), "paragraphIndexAtCharIndex:", a1);
  if (v5 != (id)NSNotFound.getter(v5))
  {
    v6 = (uint64_t)objc_msgSend(*(id *)(v2 + v4), "paragraphLevelAtParIndex:", v5);
    if (v6 <= 8)
    {
      v7 = v6;
      v8 = sub_100CFAD08((uint64_t)v5);
      if (v8)
      {
        v9 = (void *)v8;
        v10 = objc_msgSend(*(id *)(v2 + v4), "textRangeForParagraphAtIndex:", v5);
        sub_100CFAE70((uint64_t)v10);
        sub_100CFA8C8(v9, (uint64_t)v10);
        if (v11)
        {
          if ((v7 & 0x8000000000000000) == 0)
          {
            v29 = v9;
            if (*(_QWORD *)(v11 + 16) <= (unint64_t)v7)
              goto LABEL_22;
            v12 = 0;
            v13 = (_BYTE *)(v11 + 32 * v7 + 56);
            v14 = (void *)0xE000000000000000;
            v15 = includeFormatting;
            v16 = v7;
            while (v16 <= v7)
            {
              if (*((_QWORD *)v13 - 2) == 3)
              {
                v17 = *((_QWORD *)v13 - 3);
                if (HIDWORD(v17))
                  goto LABEL_23;
                v18 = *v13;
                v19 = objc_msgSend((id)objc_opt_self(NSString), "crlwp_stringForValue:withListNumberFormat:includeFormatting:", v17, *((_QWORD *)v13 - 1), v15);
                if (v19)
                {
                  v20 = v19;
                  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
                  v22 = v21;
                  v24 = v23;

                }
                else
                {
                  v22 = 0;
                  v24 = 0xE000000000000000;
                }
                swift_bridgeObjectRetain(v24);
                v25._countAndFlagsBits = v12;
                v25._object = v14;
                String.append(_:)(v25);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v12 = v22;
                v14 = (void *)v24;
                if ((v18 & 1) != 0)
                {
                  --v16;
                  v13 -= 32;
                  if (v16 != -1)
                    continue;
                }
              }

              swift_bridgeObjectRelease();
              goto LABEL_19;
            }
            __break(1u);
          }
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          v26 = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
          __break(1u);
          goto LABEL_24;
        }

      }
    }
  }
  v12 = 0;
  v14 = (void *)0xE000000000000000;
LABEL_19:
  v26 = v12;
  v27 = v14;
LABEL_24:
  result._object = v27;
  result._countAndFlagsBits = v26;
  return result;
}

void sub_100CFA8C8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v16[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_topicNumberData);
  swift_beginAccess(v5, v16, 0, 0);
  v6 = *v5;
  if (!*(_QWORD *)(*v5 + 16))
    return;
  v7 = a1;
  swift_bridgeObjectRetain(v6);
  v8 = sub_1008440B0((uint64_t)v7);
  if ((v9 & 1) == 0)
  {

LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
  swift_bridgeObjectRetain(v10);

  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    goto LABEL_17;
  v12 = 0;
  v13 = v10 + 32;
  v14 = *(_QWORD *)(v10 + 16);
  do
  {
    if (__OFSUB__(v14, v12))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      return;
    }
    v15 = v12 + (uint64_t)(v14 - v12) / 2;
    if (__OFADD__(v12, (uint64_t)(v14 - v12) / 2))
      goto LABEL_21;
    if (v15 >= v11)
      goto LABEL_22;
    if (*(_QWORD *)(v13 + 24 * v15) < a2)
      v12 = v15 + 1;
    else
      v14 = v12 + (uint64_t)(v14 - v12) / 2;
  }
  while (v12 != v14);
  if (v14 >= (uint64_t)v11)
    goto LABEL_17;
  if (v14 < 0)
    goto LABEL_23;
  if (*(_QWORD *)(v13 + 24 * v14) > a2)
    goto LABEL_17;
  swift_bridgeObjectRetain(*(_QWORD *)(v13 + 24 * v14 + 16));
  swift_bridgeObjectRelease();
}

uint64_t sub_100CFAA30(void *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_topicNumberData);
  swift_beginAccess(v3, v13, 0, 0);
  v4 = *v3;
  if (!*(_QWORD *)(v4 + 16))
    return 0;
  v5 = a1;
  swift_bridgeObjectRetain(v4);
  v6 = sub_1008440B0((uint64_t)v5);
  if ((v7 & 1) == 0)
  {

    goto LABEL_6;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6);
  swift_bridgeObjectRetain(v8);

  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = v8 + 24 * v9;
  v11 = *(_QWORD *)(v10 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v10 + 24));
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100CFAB18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  id v15;
  uint64_t (*v16)(_QWORD);
  double **v17;
  void (*v18)(_QWORD *);
  double *v19;
  double **v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  double *v24;
  _QWORD v26[4];
  _BYTE v27[32];
  _BYTE v28[24];

  v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_topicNumberData);
  swift_beginAccess(v4 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_topicNumberData, v28, 0, 0);
  v10 = *v9;
  v11 = *(_QWORD *)(*v9 + 16);
  v12 = a4;
  if (v11)
  {
    swift_bridgeObjectRetain(v10);
    sub_1008440B0((uint64_t)v12);
    if ((v13 & 1) != 0)
    {

      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess(v9, v27, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26[0] = *v9;
  *v9 = 0x8000000000000000;
  sub_10082A870((uint64_t)_swiftEmptyArrayStorage, v12, isUniquelyReferenced_nonNull_native);
  *v9 = v26[0];

  swift_bridgeObjectRelease();
  swift_endAccess(v27);
LABEL_6:
  v15 = v12;
  v16 = sub_100CF9F3C((uint64_t)v27);
  v18 = sub_100CF9EB0(v26, v15);
  v19 = *v17;
  if (*v17)
  {
    v20 = v17;
    swift_bridgeObjectRetain(a3);
    v21 = swift_isUniquelyReferenced_nonNull_native();
    *v20 = v19;
    if ((v21 & 1) == 0)
    {
      v19 = sub_100D11F18(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
      *v20 = v19;
    }
    v23 = *((_QWORD *)v19 + 2);
    v22 = *((_QWORD *)v19 + 3);
    if (v23 >= v22 >> 1)
    {
      v19 = sub_100D11F18((double *)(v22 > 1), v23 + 1, 1, v19);
      *v20 = v19;
    }
    *((_QWORD *)v19 + 2) = v23 + 1;
    v24 = &v19[3 * v23];
    *((_QWORD *)v24 + 4) = a1;
    *((_QWORD *)v24 + 5) = a2;
    *((_QWORD *)v24 + 6) = a3;
  }
  ((void (*)(_QWORD *, _QWORD))v18)(v26, 0);

  return ((uint64_t (*)(_BYTE *, _QWORD))v16)(v27, 0);
}

uint64_t sub_100CFAD08(uint64_t a1)
{
  uint64_t v1;

  if (objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage), "listStyleAtParIndex:effectiveRange:", a1, 0))
  {
    __asm { BR              X10 }
  }
  return 0;
}

void sub_100CFAE70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  char *v20;
  id v21;
  char *v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  void *v30;
  CKRecordID v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v2 = OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_invalidCharIndex;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_invalidCharIndex);
  if (v3 > a1)
    return;
  v5 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  v6 = v1;
  v34 = OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage;
  v7 = *(id *)(v1 + OBJC_IVAR____TtC8Freeform17CRLWPTopicNumbers_storage);
  v8 = &selRef_callStackDescriptionWithAction_callStackSymbols_index_;
  v9 = (uint64_t)objc_msgSend(v7, "characterCount");
  if (v9 < 0)
  {
LABEL_35:
    __break(1u);
    JUMPOUT(0x100CFB648);
  }
  v10 = v9;
  if (v9 >= v5)
    v11 = v5 & ~(v5 >> 63);
  else
    v11 = v9;
  if ((uint64_t)objc_msgSend(v7, "characterCount") < v11)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"init(storage:range:)", 20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPParagraphIterator.swift", 88, 2, 31, "Bad range when initializing CRLWPStorage.Paragraphs", 51, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Bad range when initializing CRLWPStorage.Paragraphs");
    sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(storage:range:)", 20, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPParagraphIterator.swift", 88, 2u, 31, (uint64_t)"Bad range when initializing CRLWPStorage.Paragraphs", 51, 2u);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v32, v33);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
    __break(1u);
    JUMPOUT(0x100CFB754);
  }
  if (v10 >= v3)
    v12 = v3;
  else
    v12 = v10;
  if (v3 >= 0)
    v13 = v12;
  else
    v13 = 0;
  v36 = (void *)sub_1005037A0(v7, v13, v11);
  v15 = v14;
  v17 = v16;

  v35 = v15;
  if (v15 >= v17)
  {
    v18 = &selRef_startAnimation;
    do
    {
      v19 = (char *)objc_msgSend(v36, "charIndexForParagraphAtIndex:", v17);
      v20 = (char *)objc_msgSend(v36, v8[293]);
      if ((uint64_t)v20 < (uint64_t)v19)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        JUMPOUT(0x100CFB634);
      }
      NSNotFound.getter(v20);
      v21 = objc_msgSend(v36, "paragraphIndexAtCharIndex:", v19);
      v22 = (char *)objc_msgSend(v36, v18[370], v17);
      if (__OFADD__(v22, v23))
        goto LABEL_30;
      if (__OFADD__(v17++, 1))
        goto LABEL_31;
      if ((uint64_t)&v22[v23] < (uint64_t)v19)
        goto LABEL_32;
      v25 = (char *)objc_msgSend(*(id *)(v6 + v34), v18[370], v21);
      if ((uint64_t)v25 > a1)
        break;
      v27 = v25;
      v28 = v26;
      v29 = objc_msgSend(*(id *)(v6 + v34), "listStyleAtParIndex:effectiveRange:", v21, 0);
      if (v29)
      {
        v30 = v29;
        if (objc_msgSend(*(id *)(v6 + v34), "listStyleAtParIndex:effectiveRange:", v21, 0))
          __asm { BR              X9 }

      }
      if (__OFADD__(v27, v28))
        goto LABEL_33;
      *(_QWORD *)(v6 + v2) = &v27[v28];
      v8 = &selRef_callStackDescriptionWithAction_callStackSymbols_index_;
      v18 = &selRef_startAnimation;
    }
    while (v35 >= v17);
  }

}

void CRLWPTopicNumbers.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Freeform.CRLWPTopicNumbers", 26, "init()", 6, 0);
  __break(1u);
}

id CRLWPTopicNumbers.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLWPTopicNumbers();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100CFB824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = a3;
    v5 = a2;
    v6 = a1;
    v4 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v10 >= a2)
        goto LABEL_4;
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
  }
  if (v4 < 0)
    v35 = v4;
  else
    v35 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v10 = _CocoaArrayWrapper.endIndex.getter(v35);
  swift_bridgeObjectRelease(v4);
  if (v10 < v5)
    goto LABEL_40;
LABEL_4:
  v10 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v9 = (unint64_t)v8 >> 62;
  if (!((unint64_t)v8 >> 62))
  {
    v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v12 = v11 - v10;
    if (!__OFSUB__(v11, v10))
      goto LABEL_7;
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_42:
  if (v8 < 0)
    v36 = v8;
  else
    v36 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v11 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_bridgeObjectRelease(v8);
  v12 = v11 - v10;
  if (__OFSUB__(v11, v10))
    goto LABEL_47;
LABEL_7:
  v7 = *v3;
  v44 = v12;
  if (!((unint64_t)*v3 >> 62))
  {
    v13 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v14 = v13 + v12;
    if (!__OFADD__(v13, v12))
      goto LABEL_9;
LABEL_53:
    __break(1u);
LABEL_54:
    if (v7 < 0)
      v38 = v7;
    else
      v38 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v17 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease(v7);
    v7 = *v3;
    goto LABEL_16;
  }
LABEL_48:
  if (v7 < 0)
    v37 = v7;
  else
    v37 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v13 = _CocoaArrayWrapper.endIndex.getter(v37);
  swift_bridgeObjectRelease(v7);
  v14 = v13 + v44;
  if (__OFADD__(v13, v44))
    goto LABEL_53;
LABEL_9:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v16 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v13 = 1;
  }
  v43 = v6;
  v6 = v10;
  v10 = v5;
  v5 = v11;
  v11 = v9;
  v9 = v8;
  if ((unint64_t)v7 >> 62)
    goto LABEL_54;
  v17 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v17 <= v14)
    v17 = v14;
  swift_bridgeObjectRetain(v7);
  v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v17, 1, v7);
  v19 = *v3;
  *v3 = v18;
  swift_bridgeObjectRelease(v19);
  v16 = *v3 & 0xFFFFFFFFFFFFFF8;
  v8 = v9;
  v9 = v11;
  v11 = v5;
  v5 = v10;
  v10 = v6;
  v6 = v43;
LABEL_19:
  v20 = v16 + 32;
  v21 = v16 + 32 + 8 * v6;
  v22 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  swift_arrayDestroy(v21, v10, v22);
  v23 = v44;
  if (!v44)
  {
LABEL_29:
    if (v11 < 1)
    {
LABEL_34:
      swift_bridgeObjectRelease(v8);
      return specialized Array._endMutation()(v33);
    }
    if (v9)
    {
      swift_bridgeObjectRetain(v8);
      v32 = sub_1005FEE3C(v31);
      swift_bridgeObjectRelease(v8);
      sub_100CFC644((uint64_t)(v32 + 4), v32[2], v11, v21);
      swift_release(v32);
      goto LABEL_34;
    }
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) == v11)
    {
      swift_arrayInitWithCopy(v21);
      goto LABEL_34;
    }
    goto LABEL_70;
  }
  v24 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    v26 = v25 - v5;
    if (!__OFSUB__(v25, v5))
      goto LABEL_22;
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v24 < 0)
    v39 = *v3;
  else
    v39 = v24 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v3);
  v40 = _CocoaArrayWrapper.endIndex.getter(v39);
  swift_bridgeObjectRelease(v24);
  v23 = v44;
  v26 = v40 - v5;
  if (__OFSUB__(v40, v5))
    goto LABEL_63;
LABEL_22:
  if ((v26 & 0x8000000000000000) == 0)
  {
    v27 = (char *)(v21 + 8 * v11);
    v28 = (char *)(v20 + 8 * v5);
    if (v27 != v28 || v27 >= &v28[8 * v26])
    {
      memmove(v27, v28, 8 * v26);
      v23 = v44;
    }
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v29 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      v30 = v29 + v23;
      if (!__OFADD__(v29, v23))
      {
LABEL_28:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v30;
        goto LABEL_29;
      }
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
LABEL_64:
    if (v5 < 0)
      v41 = v5;
    else
      v41 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v42 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v5);
    v30 = v42 + v44;
    if (!__OFADD__(v42, v44))
      goto LABEL_28;
    goto LABEL_69;
  }
LABEL_71:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFBC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100CFBC58(a1, a2, a3, &qword_1013E7880, UIMenuElement_ptr);
}

uint64_t sub_100CFBC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100CFBC58(a1, a2, a3, &qword_1013EFDF0, UIBarButtonItemGroup_ptr);
}

uint64_t sub_100CFBC58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a5;
    v8 = a4;
    v12 = a3;
    v7 = a2;
    v11 = a1;
    v10 = *v6;
    if (!((unint64_t)*v6 >> 62))
    {
      v13 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v10 < 0)
    v28 = v10;
  else
    v28 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v13 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v10);
  if (v13 < v7)
    goto LABEL_34;
LABEL_4:
  v13 = v7 - v11;
  if (__OFSUB__(v7, v11))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v5 = 1 - v13;
  if (__OFSUB__(1, v13))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v10 = *v6;
  v36 = v8;
  if (!((unint64_t)*v6 >> 62))
  {
    v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    v15 = v14 + v5;
    if (!__OFADD__(v14, v5))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v10 < 0)
      v30 = v10;
    else
      v30 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v18 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v10);
    goto LABEL_15;
  }
LABEL_37:
  if (v10 < 0)
    v29 = v10;
  else
    v29 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v14 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v10);
  v15 = v14 + v5;
  if (__OFADD__(v14, v5))
    goto LABEL_42;
LABEL_8:
  v10 = *v6;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v6);
  *v6 = v10;
  v35 = v12;
  v14 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    v17 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v15 <= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v14 = 1;
  }
  if ((unint64_t)v10 >> 62)
    goto LABEL_43;
  v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v18 <= v15)
    v18 = v15;
  swift_bridgeObjectRetain(v10);
  v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14, v18, 1, v10);
  swift_bridgeObjectRelease(*v6);
  *v6 = v10;
  v17 = v10 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v19 = (_QWORD *)(v17 + 32 + 8 * v11);
  v20 = sub_1004B8930(0, v36, v9);
  v21 = (char *)swift_arrayDestroy(v19, v13, v20);
  if (!v5)
  {
LABEL_28:
    *v19 = v35;
    return specialized Array._endMutation()(v21);
  }
  if (!((unint64_t)v10 >> 62))
  {
    v22 = *(_QWORD *)(v17 + 16);
    v23 = v22 - v7;
    if (!__OFSUB__(v22, v7))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v10 < 0)
    v31 = v10;
  else
    v31 = v17;
  swift_bridgeObjectRetain(v10);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v10);
  v23 = v32 - v7;
  if (__OFSUB__(v32, v7))
    goto LABEL_52;
LABEL_21:
  if ((v23 & 0x8000000000000000) == 0)
  {
    v21 = (char *)(v19 + 1);
    v24 = (char *)(v17 + 32 + 8 * v7);
    if (v19 + 1 != (_QWORD *)v24 || v21 >= &v24[8 * v23])
      v21 = (char *)memmove(v21, v24, 8 * v23);
    if (!((unint64_t)v10 >> 62))
    {
      v25 = *(_QWORD *)(v17 + 16);
      v26 = v25 + v5;
      if (!__OFADD__(v25, v5))
      {
LABEL_27:
        *(_QWORD *)(v17 + 16) = v26;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v10 < 0)
      v33 = v10;
    else
      v33 = v17;
    swift_bridgeObjectRetain(v10);
    v34 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(v10);
    v26 = v34 + v5;
    if (!__OFADD__(v34, v5))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFBF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100CFBC58(a1, a2, a3, (unint64_t *)&qword_1013E19A0, UIBarButtonItem_ptr);
}

uint64_t sub_100CFBF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100CFBC58(a1, a2, a3, (unint64_t *)&qword_1013DFC20, UIAction_ptr);
}

uint64_t sub_100CFBF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v26 = v7;
    else
      v26 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = type metadata accessor for CRLCollaboratorPresence(0);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v7);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v29 = v7;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v7);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v7);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFC24C(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  char v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_100D0EC28(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    v28 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
    __break(1u);
    return result;
  }
  v21 = v18 + v17;
  v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v9);
  v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1)
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  return sub_1004CB800(a3, &qword_101401AD0);
}

uint64_t sub_100CFC420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100CFC46C(a1, a2, a3, (uint64_t (*)(void))sub_100D104C0, type metadata accessor for CRLBoardIdentifier, (uint64_t *)&unk_1013E3A80);
}

uint64_t sub_100CFC43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100CFBC58(a1, a2, a3, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
}

uint64_t sub_100CFC450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100CFC46C(a1, a2, a3, (uint64_t (*)(void))sub_100D10470, type metadata accessor for CRLFollowAccessibilityExperienceCoordinator.HistoryBreadcrumb, &qword_1013FF108);
}

uint64_t sub_100CFC46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  char v30;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (__OFADD__(v9, v12))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *v6 = v8;
  if (!isUniquelyReferenced_nonNull_native || v9 + v12 > *(_QWORD *)(v8 + 24) >> 1)
  {
    v8 = a4();
    *v6 = v8;
  }
  v16 = a5(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = v8 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v19 = *(_QWORD *)(v17 + 72);
  v20 = v18 + v19 * a1;
  swift_arrayDestroy(v20, v11, v16);
  if (!v12)
    goto LABEL_22;
  v21 = *(_QWORD *)(v8 + 16);
  v22 = v21 - a2;
  if (__OFSUB__(v21, a2))
    goto LABEL_30;
  if (v22 < 0)
  {
LABEL_32:
    v30 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v30, 1046, 0);
    __break(1u);
    return result;
  }
  v23 = v20 + v19;
  v24 = v18 + v19 * a2;
  if (v20 + v19 < v24 || v23 >= v24 + v22 * v19)
  {
    swift_arrayInitWithTakeFrontToBack(v23, v24, v22, v16);
  }
  else if (v23 != v24)
  {
    swift_arrayInitWithTakeBackToFront(v23);
  }
  v26 = *(_QWORD *)(v8 + 16);
  v27 = __OFADD__(v26, v12);
  v28 = v26 + v12;
  if (v27)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(_QWORD *)(v8 + 16) = v28;
LABEL_22:
  if (v19 >= 1)
    sub_1004B8460(a3, v20, a5);
  return sub_1004CB800(a3, a6);
}

uint64_t sub_100CFC644(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
      return swift_arrayInitWithCopy(a4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*sub_100CFC6A8(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v7 = malloc(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v5[8] = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  sub_1004B8460(a2, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  v5[9] = sub_100CFD764(v5);
  v5[10] = sub_100CFCC44(v5 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return sub_100CFC760;
}

uint64_t (*sub_100CFC764(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v7 = malloc(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v5[8] = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  sub_1004B8460(a2, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  v5[9] = sub_100CFD764(v5);
  v5[10] = sub_100CFCD9C(v5 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return sub_100CFC760;
}

void sub_100CFC81C(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  sub_1004BBB8C((uint64_t)v3);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_100CFC874(_QWORD *a1, void *a2))(uint64_t)
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  id v7;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = a2;
  v5[9] = sub_100CFD764(v5);
  v5[10] = sub_100CFCF34(v5 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return sub_100CFC8FC;
}

void (*sub_100CFC900(_QWORD *a1, char a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = sub_100CFD764(v5);
  v5[9] = sub_100CFD114((uint64_t)(v5 + 4), a2 & 1, isUniquelyReferenced_nonNull_native);
  return sub_100CFC980;
}

void sub_100CFC980(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*sub_100CFC9BC(_QWORD *a1, void *a2))(uint64_t)
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  id v7;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = a2;
  v5[9] = sub_100CFD764(v5);
  v5[10] = sub_100CFD2D4(v5 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return sub_100CFC8FC;
}

void (*sub_100CFCA44(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x68uLL);
  *a1 = v5;
  v6 = type metadata accessor for UUID(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v5[10] = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_100CFD784(v5);
  v5[12] = sub_100CFD40C(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_100CFCB04;
}

void sub_100CFCB04(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_100CFCB70(_QWORD *a1, void *a2))(uint64_t)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  id v6;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = a2;
  v4[9] = sub_100CFD764(v4);
  v4[10] = sub_100CFD5FC(v4 + 4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  return sub_100CFC8FC;
}

void sub_100CFCBF8(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);

  v2(v1, 0);
  free(v1);
}

void (*sub_100CFCC44(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_100843264(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_100CFCD60;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_10082E7C0();
      goto LABEL_7;
    }
    sub_100818D3C(v14, a3 & 1);
    v18 = sub_100843264(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v21 = type metadata accessor for CRLBoardIdentifier(0);
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_100CFCD60(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_100CFD7B0(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

void (*sub_100CFCD9C(_QWORD *a1, uint64_t a2, char a3))(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*result)(_QWORD **, uint64_t);
  uint64_t v26;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = v3;
  v9 = sub_1004B804C(&qword_1013FE140);
  v10 = malloc(*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  v8[2] = v10;
  v11 = *v3;
  v13 = sub_100843264(a2);
  *((_BYTE *)v8 + 32) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v4 + 56);
        v20 = type metadata accessor for CRLBoardEntity(0);
        v21 = *(_QWORD *)(v20 - 8);
        sub_1004B84E0(v19 + *(_QWORD *)(v21 + 72) * v13, (uint64_t)v10, type metadata accessor for CRLBoardEntity);
        v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_100CFCF20;
      }
LABEL_11:
      v20 = type metadata accessor for CRLBoardEntity(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_10082F548();
      goto LABEL_7;
    }
    sub_10081A4F4(v16, a3 & 1);
    v23 = sub_100843264(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v8[3] = v23;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v26 = type metadata accessor for CRLBoardIdentifier(0);
  result = (void (*)(_QWORD **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

void sub_100CFCF20(_QWORD **a1, uint64_t a2)
{
  sub_100CFD5A4(a1, a2, (void (*)(void *, _QWORD, _QWORD, _QWORD, _QWORD))sub_100CFD8A0, &qword_1013FE140);
}

void (*sub_100CFCF34(_QWORD *a1, uint64_t a2, char a3))(void ***a1)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*result)(void ***);
  uint64_t v26;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = v3;
  v9 = sub_1004B804C(&qword_1013F1EF0);
  v10 = malloc(*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  v8[2] = v10;
  v11 = *v3;
  v13 = sub_100843894(a2);
  *((_BYTE *)v8 + 32) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v4 + 56);
        v20 = type metadata accessor for CRLThrottleInfo(0);
        v21 = *(_QWORD *)(v20 - 8);
        sub_1004B84E0(v19 + *(_QWORD *)(v21 + 72) * v13, (uint64_t)v10, type metadata accessor for CRLThrottleInfo);
        v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_100CFD0C8;
      }
LABEL_11:
      v20 = type metadata accessor for CRLThrottleInfo(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_10083128C();
      goto LABEL_7;
    }
    sub_10081E64C(v16, a3 & 1);
    v23 = sub_100843894(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v8[3] = v23;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v26 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  result = (void (*)(void ***))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

void sub_100CFD0C8(void ***a1)
{
  void **v1;
  void *v2;

  v1 = *a1;
  v2 = (*a1)[2];
  sub_100CFDAB8((uint64_t)v2, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[1], (unint64_t)(*a1)[3], **a1);
  sub_1004CB800((uint64_t)v2, &qword_1013F1EF0);
  free(v2);
  free(v1);
}

void (*sub_100CFD114(uint64_t a1, char a2, char a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v4;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*result)(uint64_t);

  v4 = v3;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 24) = a2;
  v7 = a2 & 1;
  v8 = sub_1004B804C(&qword_1013F20E8);
  v9 = malloc(*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  *(_QWORD *)(a1 + 8) = v9;
  v10 = *v3;
  v12 = sub_100843B24(v7);
  *(_BYTE *)(a1 + 25) = v11 & 1;
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a3 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(a1 + 16) = v12;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v18 = *(_QWORD *)(*v4 + 56);
        v19 = type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState(0);
        v20 = *(_QWORD *)(v19 - 8);
        sub_1004B84E0(v18 + *(_QWORD *)(v20 + 72) * v12, (uint64_t)v9, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState);
        v21 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v9, v21, 1, v19);
        return sub_100CFD28C;
      }
LABEL_11:
      v19 = type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = 1;
      goto LABEL_12;
    }
    if (v17 >= v15 && (a3 & 1) == 0)
    {
      sub_1008312A0();
      goto LABEL_7;
    }
    sub_10081E660(v15, a3 & 1);
    v22 = sub_100843B24(v7);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      *(_QWORD *)(a1 + 16) = v22;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLSyncActivityIdentifier);
  __break(1u);
  return result;
}

void sub_100CFD28C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  sub_100CFDCA4((uint64_t)v1, *(_BYTE *)(a1 + 25), *(uint64_t **)a1, *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24) & 1);
  sub_1004CB800((uint64_t)v1, &qword_1013F20E8);
  free(v1);
}

void (*sub_100CFD2D4(_QWORD *a1, uint64_t a2, char a3))(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(_QWORD *, uint64_t);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_100843894(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_100CFD400;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_10083145C();
      goto LABEL_7;
    }
    sub_10081E948(v14, a3 & 1);
    v18 = sub_100843894(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v21 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  result = (void (*)(_QWORD *, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_100CFD400(_QWORD *a1, uint64_t a2)
{
  sub_100CFD724(a1, a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100CFDE44);
}

void (*sub_100CFD40C(_QWORD *a1, uint64_t a2, char a3))(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*result)(_QWORD **, uint64_t);
  uint64_t v26;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = v3;
  v9 = sub_1004B804C(&qword_1013F2768);
  v10 = malloc(*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  v8[2] = v10;
  v11 = *v3;
  v13 = sub_100842EFC(a2);
  *((_BYTE *)v8 + 32) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v4 + 56);
        v20 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
        v21 = *(_QWORD *)(v20 - 8);
        sub_1004B84E0(v19 + *(_QWORD *)(v21 + 72) * v13, (uint64_t)v10, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
        v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_100CFD590;
      }
LABEL_11:
      v20 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1008322CC();
      goto LABEL_7;
    }
    sub_100820144(v16, a3 & 1);
    v23 = sub_100842EFC(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v8[3] = v23;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v26 = type metadata accessor for UUID(0);
  result = (void (*)(_QWORD **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

void sub_100CFD590(_QWORD **a1, uint64_t a2)
{
  sub_100CFD5A4(a1, a2, (void (*)(void *, _QWORD, _QWORD, _QWORD, _QWORD))sub_100CFDEEC, &qword_1013F2768);
}

void sub_100CFD5A4(_QWORD **a1, uint64_t a2, void (*a3)(void *, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t *a4)
{
  _QWORD *v5;
  void *v6;

  v5 = *a1;
  v6 = (void *)(*a1)[2];
  a3(v6, *((unsigned __int8 *)*a1 + 32), (*a1)[1], (*a1)[3], **a1);
  sub_1004CB800((uint64_t)v6, a4);
  free(v6);
  free(v5);
}

void (*sub_100CFD5FC(_QWORD *a1, uint64_t a2, char a3))(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(_QWORD *, uint64_t);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_1008440B0(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_100CFD718;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100834F84();
      goto LABEL_7;
    }
    sub_100824A44(v14, a3 & 1);
    v18 = sub_1008440B0(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v21 = type metadata accessor for CRLWPListStyle();
  result = (void (*)(_QWORD *, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_100CFD718(_QWORD *a1, uint64_t a2)
{
  sub_100CFD724(a1, a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100CFE0F4);
}

void sub_100CFD724(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  v3 = (_QWORD *)*a1;
  a3(*a1, *(unsigned __int8 *)(*a1 + 32), *(_QWORD *)(*a1 + 16), *(_QWORD *)(*a1 + 24), *(_QWORD *)(*a1 + 8));
  swift_bridgeObjectRelease(*v3);
  free(v3);
}

uint64_t (*sub_100CFD764(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100D0001C;
}

uint64_t (*sub_100CFD784(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100CFD7A4;
}

uint64_t sub_100CFD7A4(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

double sub_100CFD7B0(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  double result;
  uint64_t v19;

  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = (char *)&v19 - v14;
  v16 = *a1;
  if (v16)
  {
    v17 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v17[7] + 8 * a4) = v16;
    }
    else
    {
      sub_1004B8460(a5, (uint64_t)&v19 - v14, type metadata accessor for CRLBoardIdentifier);
      sub_10082B3E4(a4, (uint64_t)v15, v16, v17);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v12 + 72) * a4, 1, v11);
    sub_10051B1B8(a4, *a3);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v16).n128_u64[0];
  return result;
}

unint64_t sub_100CFD8A0(uint64_t a1, int a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  unint64_t result;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;

  v26 = a5;
  v27 = a4;
  v28 = a3;
  v29 = a2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013FE140);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLBoardEntity(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v26 - v18;
  sub_1004CB7BC(a1, (uint64_t)v12, &qword_1013FE140);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v20 = v28;
    result = sub_1004CB800((uint64_t)v12, &qword_1013FE140);
    if ((v29 & 1) != 0)
    {
      v22 = v20;
      v23 = *(_QWORD *)(*v20 + 48);
      v24 = v27;
      swift_arrayDestroy(v23 + *(_QWORD *)(v7 + 72) * v27, 1, v6);
      return sub_10051B750(v24, *v22);
    }
  }
  else
  {
    sub_1004B84E0((uint64_t)v12, (uint64_t)v19, type metadata accessor for CRLBoardEntity);
    v25 = (_QWORD *)*v28;
    if ((v29 & 1) != 0)
    {
      return sub_1004B84E0((uint64_t)v19, v25[7] + *(_QWORD *)(v14 + 72) * v27, type metadata accessor for CRLBoardEntity);
    }
    else
    {
      sub_1004B8460(v26, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84E0((uint64_t)v19, (uint64_t)v17, type metadata accessor for CRLBoardEntity);
      return sub_10082B5F0(v27, (uint64_t)v9, (uint64_t)v17, v25);
    }
  }
  return result;
}

void sub_100CFDAB8(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  id v24;

  v24 = a5;
  v9 = sub_1004B804C(&qword_1013F1EF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLThrottleInfo(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v23 - v17;
  sub_1004CB7BC(a1, (uint64_t)v11, &qword_1013F1EF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1004CB800((uint64_t)v11, &qword_1013F1EF0);
    if ((a2 & 1) != 0)
    {
      v19 = *(_QWORD *)(*a3 + 48) + 8 * a4;
      v20 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
      swift_arrayDestroy(v19, 1, v20);
      sub_10051C898(a4, *a3);
    }
  }
  else
  {
    sub_1004B84E0((uint64_t)v11, (uint64_t)v18, type metadata accessor for CRLThrottleInfo);
    v21 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      sub_1004B84E0((uint64_t)v18, v21[7] + *(_QWORD *)(v13 + 72) * a4, type metadata accessor for CRLThrottleInfo);
    }
    else
    {
      sub_1004B84E0((uint64_t)v18, (uint64_t)v15, type metadata accessor for CRLThrottleInfo);
      sub_10082B918(a4, (uint64_t)v24, (uint64_t)v15, v21);
      v22 = v24;
    }
  }
}

unint64_t sub_100CFDCA4(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t result;
  _QWORD *v20;
  char v21;
  _BYTE v22[12];
  int v23;

  v23 = a5;
  v9 = sub_1004B804C(&qword_1013F20E8);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v18 = &v22[-v17];
  sub_1004CB7BC(a1, (uint64_t)v11, &qword_1013F20E8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    result = sub_1004CB800((uint64_t)v11, &qword_1013F20E8);
    if ((a2 & 1) != 0)
      return sub_10051C8A4(a4, *a3);
  }
  else
  {
    sub_1004B84E0((uint64_t)v11, (uint64_t)v18, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState);
    v20 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_1004B84E0((uint64_t)v18, v20[7] + *(_QWORD *)(v13 + 72) * a4, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState);
    }
    else
    {
      v21 = v23 & 1;
      sub_1004B84E0((uint64_t)v18, (uint64_t)v15, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState);
      return sub_10082B924(a4, v21, (uint64_t)v15, v20);
    }
  }
  return result;
}

double sub_100CFDE44(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  double result;

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      sub_10082B930(a4, (uint64_t)a5, v7, v8);
      v12 = a5;
    }
  }
  else if ((a2 & 1) != 0)
  {
    v9 = *(_QWORD *)(*a3 + 48) + 8 * a4;
    v10 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
    swift_arrayDestroy(v9, 1, v10);
    sub_10051AA44(a4, *a3);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

void sub_100CFDEEC(uint64_t a1, int a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;

  v22 = a5;
  v24 = a4;
  v25 = a2;
  v23 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F2768);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v22 - v18;
  sub_1004CB7BC(a1, (uint64_t)v12, &qword_1013F2768);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1004CB800((uint64_t)v12, &qword_1013F2768);
    if ((v25 & 1) != 0)
    {
      v20 = v24;
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v7 + 72) * v24, 1, v23);
      sub_10051CAA0(v20, *a3);
    }
  }
  else
  {
    sub_1004B84E0((uint64_t)v12, (uint64_t)v19, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
    v21 = (_QWORD *)*a3;
    if ((v25 & 1) != 0)
    {
      sub_1004B84E0((uint64_t)v19, v21[7] + *(_QWORD *)(v14 + 72) * v24, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v22, v23);
      sub_1004B84E0((uint64_t)v19, (uint64_t)v16, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
      sub_10082BAF0(v24, (uint64_t)v9, (uint64_t)v16, v21);
    }
  }
}

double sub_100CFE0F4(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  double result;

  v7 = *a1;
  if (*a1)
  {
    v8 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      sub_10082B930(a4, (uint64_t)a5, v7, v8);
      v12 = a5;
    }
  }
  else if ((a2 & 1) != 0)
  {
    v9 = *(_QWORD *)(*a3 + 48) + 8 * a4;
    v10 = type metadata accessor for CRLWPListStyle();
    swift_arrayDestroy(v9, 1, v10);
    sub_10051AA44(a4, *a3);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

unint64_t *sub_100CFE18C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  unint64_t *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  __n128 v9;
  void *v10;
  uint64_t v12;

  v2 = (unint64_t *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_100CFE2DC((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v9);
    else
      return v8;
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v2 = sub_100CFE2DC((unint64_t *)v10, v6, (uint64_t)v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

unint64_t *sub_100CFE2DC(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_100835FF0(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_100835FF0(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_100835FF0(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12) + 16))
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_100835FF0(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_100835FF0(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_100835FF0(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100CFE428(uint64_t a1, uint64_t a2)
{
  return sub_100CFE440(a1, a2, type metadata accessor for CRLBoardLibraryViewModelItemNode);
}

uint64_t sub_100CFE434(uint64_t a1, uint64_t a2)
{
  return sub_100CFE440(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for CRLBoardItemDatabaseResult);
}

uint64_t sub_100CFE440(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v28 = v7;
  else
    v28 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v7 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v9 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v7;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v9 < 0)
      v30 = v9;
    else
      v30 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v14 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v9);
    v9 = *v4;
    goto LABEL_15;
  }
LABEL_37:
  if (v9 < 0)
    v29 = v9;
  else
    v29 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v9);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v9 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v9;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v13 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v9 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v9);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v9);
  v16 = *v4;
  *v4 = v15;
  swift_bridgeObjectRelease(v16);
  v13 = *v4 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v17 = v13 + 32;
  v18 = (char *)(v13 + 32 + 8 * v5);
  v19 = v6(0);
  v20 = (void *)swift_arrayDestroy(v18, v7, v19);
  if (!v8)
    return specialized Array._endMutation()(v20);
  v21 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = v22 - v3;
    if (!__OFSUB__(v22, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v21 < 0)
    v31 = *v4;
  else
    v31 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  v20 = (void *)swift_bridgeObjectRelease(v21);
  v23 = v32 - v3;
  if (__OFSUB__(v32, v3))
    goto LABEL_52;
LABEL_21:
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = (char *)(v17 + 8 * v3);
    if (v5 != v3 || v18 >= &v24[8 * v23])
      v20 = memmove(v18, v24, 8 * v23);
    v3 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v25 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v26 = v25 + v8;
      if (!__OFADD__(v25, v8))
      {
LABEL_27:
        *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v26;
        return specialized Array._endMutation()(v20);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v3 < 0)
      v33 = v3;
    else
      v33 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v34 = _CocoaArrayWrapper.endIndex.getter(v33);
    v20 = (void *)swift_bridgeObjectRelease(v3);
    v26 = v34 + v8;
    if (!__OFADD__(v34, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v35 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v35, 1046, 0);
  __break(1u);
  return result;
}

void *sub_100CFE73C(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100D0F980(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = 16 * a1;
  v13 = (char *)&v4[2 * a1 + 4];
  v14 = sub_1004B804C(&qword_10140E458);
  result = (void *)swift_arrayDestroy(v13, v7, v14);
  if (!v7)
    goto LABEL_20;
  v16 = v4[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (char *)&v4[2 * a2 + 4];
    v20 = 16 * v18;
    if (v12 != 16 * a2 || v13 >= &v19[v20])
      result = memmove(v13, v19, v20);
    v21 = v4[2];
    v17 = __OFADD__(v21, v8);
    v22 = v21 - v7;
    if (!v17)
    {
      v4[2] = v22;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v23 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v23, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFE8B4(uint64_t a1, uint64_t a2)
{
  return sub_100CFE8CC(a1, a2, type metadata accessor for CRLCollaborationParticipant);
}

uint64_t sub_100CFE8C0(uint64_t a1, uint64_t a2)
{
  return sub_100CFE8CC(a1, a2, type metadata accessor for CRLCollaboratorPresence);
}

uint64_t sub_100CFE8CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v9;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v6(0);
  v16 = (void *)swift_arrayDestroy(v13 + 32 + 8 * v5, v9, v15);
  if (!v8)
    return specialized Array._endMutation()(v16);
  if (!((unint64_t)v7 >> 62))
  {
    v17 = *(_QWORD *)(v13 + 16);
    v18 = v17 - v3;
    if (!__OFSUB__(v17, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v13;
  swift_bridgeObjectRetain(v7);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  v16 = (void *)swift_bridgeObjectRelease(v7);
  v18 = v27 - v3;
  if (__OFSUB__(v27, v3))
    goto LABEL_52;
LABEL_21:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v19 + 8 * v18)
      v16 = memmove((void *)(v13 + 32 + 8 * v5), v19, 8 * v18);
    if (!((unint64_t)v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        return specialized Array._endMutation()(v16);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v13;
    swift_bridgeObjectRetain(v7);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    v16 = (void *)swift_bridgeObjectRelease(v7);
    v21 = v29 + v8;
    if (!__OFADD__(v29, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFEB9C(uint64_t a1, uint64_t a2)
{
  return sub_100CFE8CC(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for CRLCommandController.CRLCommandControllerCommandGroup);
}

uint64_t sub_100CFEBA8(uint64_t a1, uint64_t a2)
{
  return sub_100CFED94(a1, a2, &qword_1013E7968);
}

uint64_t sub_100CFEBB4(uint64_t a1, uint64_t a2)
{
  return sub_100CFED94(a1, a2, &qword_1013E7950);
}

uint64_t sub_100CFEBC0(uint64_t a1, uint64_t a2)
{
  return sub_100CFF078(a1, a2, (uint64_t (*)(void))sub_100D10470, type metadata accessor for CRLFollowAccessibilityExperienceCoordinator.HistoryBreadcrumb);
}

void *sub_100CFEBD4(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100D1087C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[5 * a1 + 4], v7, &type metadata for CRLWPStickyNoteShadowCache.CacheKey);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v16[40 * v15])
      result = memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFED48(uint64_t a1, uint64_t a2)
{
  return sub_100CFF078(a1, a2, (uint64_t (*)(void))sub_100D104C0, type metadata accessor for CRLBoardIdentifier);
}

void sub_100CFED5C(uint64_t a1, uint64_t a2)
{
  sub_100CFF23C(a1, a2, (uint64_t (*)(void))sub_100D11628, &qword_1013FA540);
}

uint64_t sub_100CFED70(uint64_t a1, uint64_t a2)
{
  return sub_100CFED94(a1, a2, &qword_1013E7830);
}

uint64_t sub_100CFED7C(uint64_t a1, uint64_t a2)
{
  return sub_100CFED94(a1, a2, &qword_1013E77F0);
}

uint64_t sub_100CFED88(uint64_t a1, uint64_t a2)
{
  return sub_100CFED94(a1, a2, &qword_1013E7848);
}

uint64_t sub_100CFED94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v9;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = sub_1004B804C(v6);
  v16 = (void *)swift_arrayDestroy(v13 + 32 + 8 * v5, v9, v15);
  if (!v8)
    return specialized Array._endMutation()(v16);
  if (!((unint64_t)v7 >> 62))
  {
    v17 = *(_QWORD *)(v13 + 16);
    v18 = v17 - v3;
    if (!__OFSUB__(v17, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v13;
  swift_bridgeObjectRetain(v7);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v7);
  v18 = v27 - v3;
  if (__OFSUB__(v27, v3))
    goto LABEL_52;
LABEL_21:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v19 + 8 * v18)
      v16 = memmove((void *)(v13 + 32 + 8 * v5), v19, 8 * v18);
    if (!((unint64_t)v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        return specialized Array._endMutation()(v16);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v13;
    swift_bridgeObjectRetain(v7);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v7);
    v21 = v29 + v8;
    if (!__OFADD__(v29, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFF064(uint64_t a1, uint64_t a2)
{
  return sub_100CFF078(a1, a2, (uint64_t (*)(void))sub_100D0FAA0, type metadata accessor for CRLBoardLibraryViewModel.Item);
}

uint64_t sub_100CFF078(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = a4(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = v6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v16 * a1;
  v18 = v15 + v16 * a1;
  result = swift_arrayDestroy(v18, v9, v13);
  if (!v9)
    goto LABEL_22;
  v20 = *(_QWORD *)(v6 + 16);
  v21 = v20 - a2;
  if (__OFSUB__(v20, a2))
    goto LABEL_28;
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = v15 + v16 * a2;
    if (v17 < v16 * a2 || v18 >= v22 + v21 * v16)
    {
      result = swift_arrayInitWithTakeFrontToBack(v18, v22, v21, v13);
    }
    else if (v17 != v16 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v18);
    }
    v24 = *(_QWORD *)(v6 + 16);
    v25 = __OFADD__(v24, v10);
    v26 = v24 - v9;
    if (!v25)
    {
      *(_QWORD *)(v6 + 16) = v26;
LABEL_22:
      *v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  v27 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v27, 1046, 0);
  __break(1u);
  return result;
}

void sub_100CFF228(uint64_t a1, uint64_t a2)
{
  sub_100CFF23C(a1, a2, (uint64_t (*)(void))sub_100D11104, &qword_1013EB680);
}

void sub_100CFF23C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = sub_1004B804C(a4);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = v6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v16 * a1;
  v18 = v15 + v16 * a1;
  swift_arrayDestroy(v18, v9, v13);
  if (!v9)
    goto LABEL_22;
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_28;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v15 + v16 * a2;
    if (v17 < v16 * a2 || v18 >= v21 + v20 * v16)
    {
      swift_arrayInitWithTakeFrontToBack(v18, v21, v20, v13);
    }
    else if (v17 != v16 * a2)
    {
      swift_arrayInitWithTakeBackToFront(v18);
    }
    v23 = *(_QWORD *)(v6 + 16);
    v24 = __OFADD__(v23, v10);
    v25 = v23 - v9;
    if (!v24)
    {
      *(_QWORD *)(v6 + 16) = v25;
LABEL_22:
      *v4 = v6;
      return;
    }
    goto LABEL_29;
  }
LABEL_30:
  v26 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
}

uint64_t sub_100CFF3EC(uint64_t a1, uint64_t a2)
{
  return sub_100CFF400(a1, a2, &qword_1013E8810, CKRecordID_ptr);
}

uint64_t sub_100CFF400(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = a4;
    v8 = a3;
    v4 = a2;
    v7 = a1;
    v9 = *v5;
    if (!((unint64_t)*v5 >> 62))
    {
      if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  if (v9 < 0)
    v19 = v9;
  else
    v19 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease();
  if (v20 < v4)
    goto LABEL_18;
LABEL_4:
  v6 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = v7 - v4;
  if (__OFSUB__(0, v6))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    if (v9 < 0)
      v21 = v9;
    else
      v21 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease();
    v13 = v22 + v39;
    if (!__OFADD__(v22, v39))
      goto LABEL_8;
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = *v5;
  v39 = v7 - v4;
  v40 = v7;
  if ((unint64_t)*v5 >> 62)
    goto LABEL_21;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 - v6;
  if (__OFADD__(v12, v11))
    goto LABEL_26;
LABEL_8:
  v9 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v9;
  v15 = 0;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
    goto LABEL_28;
  v16 = v9 & 0xFFFFFFFFFFFFFF8;
  if (v13 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    v17 = v8;
    v18 = v10;
    goto LABEL_33;
  }
LABEL_27:
  v15 = 1;
LABEL_28:
  v17 = v8;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v34 = v9;
    else
      v34 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v23 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = v10;
  if (v23 <= v13)
    v23 = v13;
  swift_bridgeObjectRetain(v9);
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15, v23, 1, v9);
  swift_bridgeObjectRelease();
  *v5 = v9;
  v16 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_33:
  v24 = (char *)(v16 + 32 + 8 * v40);
  v25 = sub_1004B8930(0, v17, v18);
  swift_arrayDestroy(v24, v6, v25);
  v27 = v39;
  if (!v39)
    return specialized Array._endMutation()(v26);
  if (!((unint64_t)v9 >> 62))
  {
    v28 = *(_QWORD *)(v16 + 16);
    v29 = v28 - v4;
    if (!__OFSUB__(v28, v4))
      goto LABEL_36;
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v9 < 0)
    v35 = v9;
  else
    v35 = v16;
  swift_bridgeObjectRetain(v9);
  v36 = _CocoaArrayWrapper.endIndex.getter(v35);
  swift_bridgeObjectRelease();
  v27 = v39;
  v29 = v36 - v4;
  if (__OFSUB__(v36, v4))
    goto LABEL_53;
LABEL_36:
  if ((v29 & 0x8000000000000000) == 0)
  {
    v30 = (char *)(v16 + 32 + 8 * v4);
    if (v40 != v4 || v24 >= &v30[8 * v29])
    {
      v26 = memmove(v24, v30, 8 * v29);
      v27 = v39;
    }
    if (!((unint64_t)v9 >> 62))
    {
      v31 = *(_QWORD *)(v16 + 16);
      v32 = v31 + v27;
      if (!__OFADD__(v31, v27))
      {
LABEL_42:
        *(_QWORD *)(v16 + 16) = v32;
        return specialized Array._endMutation()(v26);
      }
      goto LABEL_59;
    }
LABEL_54:
    if (v9 < 0)
      v37 = v9;
    else
      v37 = v16;
    swift_bridgeObjectRetain(v9);
    v38 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
    v32 = v38 + v39;
    if (!__OFADD__(v38, v39))
      goto LABEL_42;
LABEL_59:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFF710(uint64_t a1, uint64_t a2)
{
  return sub_100CFF400(a1, a2, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
}

char *sub_100CFF724(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= v4[3] >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_100D0EE8C(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = v4[2];
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = (char *)v4 + 2 * a1 + 32;
    v15 = (char *)v4 + 2 * a2 + 32;
    if (a1 != a2 || result >= &v15[2 * v14])
      result = (char *)memmove(result, v15, 2 * v14);
    v16 = v4[2];
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      v4[2] = v17;
LABEL_21:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100CFF87C(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= v4[3] >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_100D0ED80(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = v4[2];
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = (char *)v4 + 4 * a1 + 32;
    v15 = (char *)v4 + 4 * a2 + 32;
    if (a1 != a2 || result >= &v15[4 * v14])
      result = (char *)memmove(result, v15, 4 * v14);
    v16 = v4[2];
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      v4[2] = v17;
LABEL_21:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100CFF9D4(uint64_t a1, uint64_t a2)
{
  return sub_100CFF400(a1, a2, &qword_1013E56E0, off_101229808);
}

uint64_t sub_100CFF9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease();
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease();
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_1004B804C(&qword_1013E79E0);
  swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_100CFFCB8(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = *(_QWORD *)(a3 + 16);
  v10 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v11 = v6 + v10;
  if (__OFADD__(v6, v10))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v28 = v9 - v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v11)
      v13 = v11;
    else
      v13 = v6;
    v5 = sub_100D10734(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = type metadata accessor for CRLBoardItemPeerSyncUpdate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v5 + v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v28)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    v27 = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v27, 1046, 0);
    __break(1u);
    return;
  }
  v21 = v18 + v17 * v9;
  v22 = v5 + v16 + v17 * a2;
  if (v21 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v28);
  v26 = v24 + v28;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v9)
    swift_arrayInitWithCopy(v18);
  *v3 = v5;
}

void sub_100CFFE88(uint64_t a1, int64_t a2)
{
  double **v2;
  double *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  double *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (double *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100D11F18(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  swift_arrayDestroy(&v4[3 * a1 + 4], v7, &type metadata for CRLWPTopicNumberEntry);
  if (!v7)
    goto LABEL_20;
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_26;
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = &v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= &v15[3 * v14])
      memmove(&v4[3 * a1 + 4], v15, 24 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 - v7;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_20:
      *v2 = v4;
      return;
    }
    goto LABEL_27;
  }
LABEL_28:
  v18 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v18, 1046, 0);
  __break(1u);
}

ValueMetadata *type metadata accessor for CRLWPTopicNumberEntry()
{
  return &type metadata for CRLWPTopicNumberEntry;
}

ValueMetadata *type metadata accessor for CRLWPTopicNumber()
{
  return &type metadata for CRLWPTopicNumber;
}

id sub_100D00020()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLMiniFormatterShapeFillDataProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLMiniFormatterShapeFillDataProvider()
{
  return objc_opt_self(_TtC8Freeform37CRLMiniFormatterShapeFillDataProvider);
}

id sub_100D00138()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLCanvasDotGridBackgroundView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLCanvasDotGridBackgroundView()
{
  return objc_opt_self(_TtC8Freeform30CRLCanvasDotGridBackgroundView);
}

void *sub_100D00188(double a1, double a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  id v26;
  void *v28;
  _BYTE v29[64];

  if (qword_1013DCB58 != -1)
    swift_once(&qword_1013DCB58, sub_1006185A4);
  v5 = (void *)qword_10147ECB0;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E8830);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100EF5E40;
  type metadata accessor for CGPoint(0);
  *(_QWORD *)(v7 + 56) = v8;
  *(double *)(v7 + 32) = a1;
  *(double *)(v7 + 40) = a2;
  inited = swift_initStackObject(v6, v29);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(inited + 56) = sub_1004B804C((uint64_t *)&unk_1013E91F0);
  *(_QWORD *)(inited + 32) = v7;
  v10 = v2 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController;
  Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController);
  if (!Strong)
  {
    v26 = v5;
    swift_bridgeObjectRetain(v7);
    goto LABEL_11;
  }
  v12 = (void *)Strong;
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_textStorage);
  v14 = v5;
  v15 = objc_msgSend(v12, "layoutForInfo:", v13, swift_bridgeObjectRetain(v7).n128_f64[0]);

  if (!v15)
  {
LABEL_11:
    swift_release(inited);
LABEL_12:
    v18 = 0;
    goto LABEL_13;
  }
  v16 = type metadata accessor for CRLWPLayout();
  v17 = (void *)swift_dynamicCastClass(v15, v16);
  v18 = v17;
  if (!v17)
  {
    swift_release(inited);

    goto LABEL_13;
  }
  if ((objc_msgSend(v17, "layoutIsValid") & 1) == 0)
    objc_msgSend(v18, "validate");
  v19 = (void *)swift_unknownObjectWeakLoadStrong(v10);
  if (!v19)
  {
    swift_release(inited);

    goto LABEL_12;
  }
  v20 = v19;
  objc_msgSend(v19, "convertBoundsToUnscaledPoint:", a1, a2);
  v22 = v21;
  v24 = v23;
  v25 = (id)qword_10147ECB0;
  sub_100627450(v18, 1, &v28, v22, v24);

  v18 = v28;
  swift_release(inited);

LABEL_13:
  swift_bridgeObjectRelease();
  return v18;
}

void sub_100D003C4()
{
  uint64_t v0;
  _QWORD *v1;
  void (*v2)(void);
  _QWORD *v3;

  v1 = *(_QWORD **)(v0 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_selectionViewController);
  if (v1)
  {
    v2 = *(void (**)(void))((swift_isaMask & *v1) + 0x188);
    v3 = v1;
    v2();

  }
}

uint64_t sub_100D00434(uint64_t a1, uint64_t a2)
{
  return sub_100D0044C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_100627624);
}

uint64_t sub_100D00440(uint64_t a1, uint64_t a2)
{
  return sub_100D0044C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_100627950);
}

uint64_t sub_100D0044C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  void *Strong;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController);
  if (!Strong)
    return 0;
  v8 = Strong;
  v9 = objc_msgSend(Strong, "layoutForInfo:", *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_textStorage));

  if (!v9)
    return 0;
  v10 = type metadata accessor for CRLWPLayout();
  v11 = (void *)swift_dynamicCastClass(v9, v10);
  if (v11)
  {
    v12 = v11;
    if ((objc_msgSend(v11, "layoutIsValid") & 1) == 0)
      objc_msgSend(v12, "validate");
    v13 = a3(a1, a2);
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

char *sub_100D00534(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *Strong;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char *v13;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController);
  if (!Strong)
    return 0;
  v8 = Strong;
  v9 = objc_msgSend(Strong, "layoutForInfo:", *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_textStorage));

  if (!v9)
    return 0;
  v10 = type metadata accessor for CRLWPLayout();
  v11 = (void *)swift_dynamicCastClass(v9, v10);
  if (v11)
  {
    v12 = v11;
    if ((objc_msgSend(v11, "layoutIsValid") & 1) == 0)
      objc_msgSend(v12, "validate");
    v13 = sub_100627BC4(a1, a2, a3);
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_100D00620()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;

  if (qword_1013DCB58 != -1)
    swift_once(&qword_1013DCB58, sub_1006185A4);
  v1 = OBJC_IVAR____TtC8Freeform27CRLWPTextSelectionManager_i_loupeSession;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform27CRLWPTextSelectionManager_i_loupeSession);
  v3 = (id)qword_10147ECB0;
  objc_msgSend(v2, "invalidate");
  v4 = *(id *)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

}

double *sub_100D007CC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  double *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  double *result;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  objc_class *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  uint64_t v57;
  objc_super v58;
  unint64_t v59;
  char v60[72];

  v3 = v1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController);
  if (!Strong)
    return _swiftEmptyArrayStorage;
  v5 = Strong;
  v6 = objc_msgSend(Strong, "layoutForInfo:", *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_textStorage));

  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return v7;
  v8 = type metadata accessor for CRLWPLayout();
  v9 = (void *)swift_dynamicCastClass(v6, v8);
  if (!v9)
    goto LABEL_29;
  v10 = v9;
  if ((objc_msgSend(v9, "layoutIsValid") & 1) == 0)
    objc_msgSend(v10, "validate");
  v11 = swift_unknownObjectWeakLoadStrong(v3);
  if (!v11)
    goto LABEL_29;
  v12 = (void *)v11;
  if (qword_1013DCB58 != -1)
    swift_once(&qword_1013DCB58, sub_1006185A4);
  v13 = (void *)qword_10147ECB0;
  v14 = sub_1004B804C((uint64_t *)&unk_1013E8830);
  v15 = swift_allocObject(v14, 64, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v15 + 56) = type metadata accessor for CRLTextRange();
  *(_QWORD *)(v15 + 32) = a1;
  inited = swift_initStackObject(v14, v60);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(inited + 56) = sub_1004B804C((uint64_t *)&unk_1013E91F0);
  v57 = inited;
  *(_QWORD *)(inited + 32) = v15;
  v17 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100EEF400;
  *(_QWORD *)(v18 + 32) = a1;
  v59 = v18;
  specialized Array._endMutation()(v18);
  v19 = v59;
  v20 = (void *)qword_10147ECB0;
  v21 = a1;
  v22 = v13;
  swift_bridgeObjectRetain(v15);
  v23 = v20;
  swift_bridgeObjectRetain(v59);
  sub_100625FAC((uint64_t)v10, v59, (uint64_t *)&v59);

  swift_bridgeObjectRelease_n(v19, 2);
  v24 = v59;
  if (!(v59 >> 62))
  {
    v25 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_11;
LABEL_35:
    swift_bridgeObjectRelease();
    v51 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_27:
      v52 = swift_bridgeObjectRetain(v51);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v52);
      sub_1005E96D4();
      swift_release(v57);
      v7 = (double *)v51;
LABEL_28:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
LABEL_29:

      return v7;
    }
LABEL_36:
    if (v51 < 0)
      v54 = v51;
    else
      v54 = v51 & 0xFFFFFFFFFFFFFF8;
    v55 = sub_1005E96D4();
    swift_bridgeObjectRetain(v51);
    v7 = (double *)_bridgeCocoaArray<A>(_:)(v54, v55);
    swift_release(v57);
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  if ((v59 & 0x8000000000000000) != 0)
    v53 = v59;
  else
    v53 = v59 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v59);
  v25 = _CocoaArrayWrapper.endIndex.getter(v53);
  swift_bridgeObjectRelease();
  if (!v25)
    goto LABEL_35;
LABEL_11:
  v56 = v6;
  v59 = (unint64_t)_swiftEmptyArrayStorage;
  result = (double *)specialized ContiguousArray.reserveCapacity(_:)(v25);
  if ((v25 & 0x8000000000000000) == 0)
  {
    v27 = 0;
    do
    {
      if ((v24 & 0xC000000000000001) != 0)
        v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v24);
      else
        v33 = *(id *)(v24 + 8 * v27 + 32);
      v34 = v33;
      objc_msgSend(v33, "rect");
      objc_msgSend(v12, "convertUnscaledToBoundsRect:");
      v36 = v35;
      v38 = v37;
      v40 = v39;
      v42 = v41;
      v43 = objc_msgSend(v34, "writingDirection");
      v44 = (objc_class *)type metadata accessor for CRLTextSelectionRect();
      v45 = (char *)objc_allocWithZone(v44);
      v46 = v45;
      v45[OBJC_IVAR____TtC8Freeform20CRLTextSelectionRect__containsStart] = 0;
      v45[OBJC_IVAR____TtC8Freeform20CRLTextSelectionRect__containsEnd] = 0;
      v47 = &v45[OBJC_IVAR____TtC8Freeform20CRLTextSelectionRect__rect];
      *(_QWORD *)v47 = v36;
      *((_QWORD *)v47 + 1) = v38;
      *((_QWORD *)v47 + 2) = v40;
      *((_QWORD *)v47 + 3) = v42;
      if (v43 == (id)1)
      {
        v49 = v45;
        v28 = 1;
      }
      else if (v43)
      {
        v48 = v45;
        if (v43 != (id)-1)
        {
          sub_100757E04(&_mh_execute_header, (uint64_t)"init(_:)", 8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPWritingDirection.swift", 87, 2, 24, "Unknown direction.", 18, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(_:)", 8, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPWritingDirection.swift", 87, 2u, 24, (uint64_t)"Unknown direction.", 18, 2u);
        }
        v28 = -1;
      }
      else
      {
        v50 = v45;
        v28 = 0;
      }
      ++v27;
      *(_QWORD *)&v46[OBJC_IVAR____TtC8Freeform20CRLTextSelectionRect__writingDirection] = v28;

      v58.receiver = v46;
      v58.super_class = v44;
      v29 = objc_msgSendSuper2(&v58, "init");
      objc_msgSend(v29, "setContainsStart:", objc_msgSend(v34, "containsStart"));
      objc_msgSend(v29, "setContainsEnd:", objc_msgSend(v34, "containsEnd"));

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
      v31 = *(_QWORD *)(v59 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
      v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
      specialized ContiguousArray._endMutation()(v32);
    }
    while (v25 != v27);
    v51 = v59;
    swift_bridgeObjectRelease();
    v6 = v56;
    if (!((unint64_t)v51 >> 62))
      goto LABEL_27;
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

double sub_100D00DB4(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double x;
  id v21;
  id v22;
  _BYTE v24[64];

  if (qword_1013DCB58 != -1)
    swift_once(&qword_1013DCB58, sub_1006185A4);
  v3 = (void *)qword_10147ECB0;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E8830);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v5 + 56) = type metadata accessor for CRLTextPosition();
  *(_QWORD *)(v5 + 32) = a1;
  inited = swift_initStackObject(v4, v24);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(inited + 56) = sub_1004B804C((uint64_t *)&unk_1013E91F0);
  *(_QWORD *)(inited + 32) = v5;
  v7 = v1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController);
  if (!Strong)
  {
    v21 = v3;
    v22 = a1;
    swift_bridgeObjectRetain(v5);
    goto LABEL_12;
  }
  v9 = (void *)Strong;
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_textStorage);
  v11 = v3;
  v12 = a1;
  v13 = objc_msgSend(v9, "layoutForInfo:", v10, swift_bridgeObjectRetain(v5).n128_f64[0]);

  if (!v13)
  {
LABEL_12:
    x = CGRectInfinite.origin.x;
    swift_release(inited);
    goto LABEL_13;
  }
  v14 = type metadata accessor for CRLWPLayout();
  v15 = (void *)swift_dynamicCastClass(v13, v14);
  if (!v15)
    goto LABEL_11;
  v16 = v15;
  if ((objc_msgSend(v15, "layoutIsValid") & 1) == 0)
    objc_msgSend(v16, "validate");
  v17 = (void *)swift_unknownObjectWeakLoadStrong(v7);
  if (!v17)
  {
LABEL_11:

    goto LABEL_12;
  }
  v18 = v17;
  objc_msgSend(v17, "convertUnscaledToBoundsRect:", sub_100625E38(v12));
  x = v19;
  swift_release(inited);

LABEL_13:
  swift_bridgeObjectRelease();
  return x;
}

void *sub_100D01144(CGFloat a1, CGFloat a2)
{
  _QWORD *v2;
  uint64_t Strong;
  char *v6;
  uint64_t v7;
  void *v8;
  void *result;
  void *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _BOOL8 v26;
  CGPoint v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  Strong = swift_unknownObjectWeakLoadStrong((char *)v2 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_editor);
  if (!Strong)
    return 0;
  v6 = (char *)Strong;
  v7 = Strong + OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc;
  v8 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc);

  if (!v8)
    goto LABEL_13;
  result = (void *)swift_unknownObjectWeakLoadStrong(v7);
  if (!result)
    goto LABEL_13;
  if (*(_QWORD *)(*(_QWORD *)&v6[OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape]
                 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage))
  {
    v10 = result;
    v11 = (char *)objc_msgSend(result, "layoutForInfo:");

    if (v11)
    {
      v12 = type metadata accessor for CRLWPLayout();
      if (!swift_dynamicCastClass(v11, v12))
        goto LABEL_17;

      v13 = sub_1005E6498();
      if (v13)
      {
        v11 = v13;
        if (objc_msgSend(v13, "isEmpty"))
        {
          v14 = objc_msgSend(v11, "start");
          v15 = (*(double (**)(void))((swift_isaMask & *v2) + 0x1B8))();
          v17 = v16;
          v19 = v18;
          v21 = v20;

          v28.origin.x = v15;
          v28.origin.y = v17;
          v28.size.width = v19;
          v28.size.height = v21;
          v22 = CGRectGetWidth(v28) + 5.0 + 5.0;
          if (v22 > *(double *)((char *)v2
                               + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_minimumCaretHitRegionWidth))
            v23 = v22;
          else
            v23 = *(double *)((char *)v2
                            + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_minimumCaretHitRegionWidth);
          v29.origin.x = v15;
          v29.origin.y = v17;
          v29.size.width = v19;
          v29.size.height = v21;
          CGRectGetHeight(v29);
          v24 = sub_100061400(v15, v17, v19, v21);
          v30.origin.x = sub_10005FD98(v24, v25, v23);
          v27.x = a1;
          v27.y = a2;
          v26 = CGRectContainsPoint(v30, v27);
          goto LABEL_18;
        }
LABEL_17:
        v26 = 0;
LABEL_18:

        v6 = v11;
        goto LABEL_14;
      }
    }
LABEL_13:
    v26 = 0;
LABEL_14:

    return (void *)v26;
  }
  __break(1u);
  return result;
}

void sub_100D01434(uint64_t a1, double a2, double a3)
{
  void *Strong;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  id v15;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController);
  if (Strong)
  {
    v7 = OBJC_IVAR____TtC8Freeform27CRLWPTextSelectionManager_i_loupeSession;
    if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform27CRLWPTextSelectionManager_i_loupeSession))
    {
      v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_selectionViewController);
      if (v8)
      {
        v9 = *(void **)(v8 + OBJC_IVAR____TtC8Freeform26CRLSelectionViewController_rotatedOverlayView);
        if (v9)
        {
          v15 = Strong;
          v10 = v9;
          objc_msgSend(v15, "convertUnscaledToBoundsPoint:", a2, a3);
          v13 = objc_msgSend((id)objc_opt_self(UITextLoupeSession), "beginLoupeSessionAtPoint:fromSelectionWidgetView:inView:", 0, v10, v11, v12);
          v14 = *(void **)(a1 + v7);
          *(_QWORD *)(a1 + v7) = v13;

          Strong = v14;
        }
      }
    }

  }
}

void sub_100D015DC(_QWORD *a1, double a2, double a3)
{
  void *Strong;
  uint64_t v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  id v25;
  id v26;

  Strong = (void *)swift_unknownObjectWeakLoadStrong((char *)a1 + OBJC_IVAR____TtC8Freeform25CRLWPTextSelectionManager_interactiveCanvasController);
  if (Strong)
  {
    v7 = OBJC_IVAR____TtC8Freeform27CRLWPTextSelectionManager_i_loupeSession;
    v25 = Strong;
    if (!*(_QWORD *)((char *)a1 + OBJC_IVAR____TtC8Freeform27CRLWPTextSelectionManager_i_loupeSession))
    {
      if (qword_1013DCB58 != -1)
        swift_once(&qword_1013DCB58, sub_1006185A4);
      v8 = (id)qword_10147ECB0;
      sub_100D01434((uint64_t)a1, a2, a3);

      Strong = v25;
    }
    objc_msgSend(Strong, "convertUnscaledToBoundsPoint:", a2, a3, v25);
    v10 = v9;
    v12 = v11;
    v13 = sub_100D00188(v9, v11);
    if (v13)
    {
      v14 = v13;
      (*(void (**)(void))((swift_isaMask & *a1) + 0x1B8))();
      v19 = *(void **)((char *)a1 + v7);
      if (v19)
      {
        v20 = v15;
        v21 = v16;
        v22 = v17;
        v23 = v18;
        v24 = v19;
        objc_msgSend(v24, "moveToPoint:withCaretRect:trackingCaret:", 1, v10, v12, v20, v21, v22, v23);

      }
    }

  }
}

void sub_100D01824()
{
  uint64_t v0;

}

id sub_100D01834()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLWPTextSelectionManager_i();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLWPTextSelectionManager_i()
{
  return objc_opt_self(_TtC8Freeform27CRLWPTextSelectionManager_i);
}

uint64_t sub_100D01894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v10 + 536) = a4;
  *(_QWORD *)(v10 + 528) = a3;
  *(double *)(v10 + 520) = a10;
  *(double *)(v10 + 504) = a8;
  *(double *)(v10 + 512) = a9;
  *(double *)(v10 + 488) = a6;
  *(double *)(v10 + 496) = a7;
  *(double *)(v10 + 480) = a5;
  *(_QWORD *)(v10 + 464) = a1;
  *(_QWORD *)(v10 + 472) = a2;
  v11 = sub_1004B804C(&qword_1013E04D0);
  *(_QWORD *)(v10 + 544) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  *(_QWORD *)(v10 + 552) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v10 + 560) = v13;
  *(_QWORD *)(v10 + 568) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLUSDRendering.SceneRequest(0);
  *(_QWORD *)(v10 + 576) = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v10 + 584) = swift_task_alloc(v15);
  *(_QWORD *)(v10 + 592) = swift_task_alloc(v15);
  v16 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v10 + 600) = static MainActor.shared.getter(v16);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
  *(_QWORD *)(v10 + 608) = v17;
  *(_QWORD *)(v10 + 616) = v18;
  return swift_task_switch(sub_100D0199C, v17, v18);
}

uint64_t sub_100D0199C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  CGFloat width;
  CGFloat height;
  CGFloat v13;
  CGFloat v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, __n128, __n128);
  void (*v16)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t inited;
  id v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  Swift::String v63;
  Swift::String v64;
  __n128 v65;
  uint64_t v66;
  uint64_t ObjectType;
  int *v68;
  _QWORD *v69;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  simd_float4 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int *v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(double *)(v0 + 520);
  v8 = *(double *)(v0 + 504);
  v7 = *(double *)(v0 + 512);
  v9 = *(double *)(v0 + 496);
  v10 = *(_QWORD *)(v0 + 472);
  *(CGFloat *)(v0 + 392) = v9;
  *(CGFloat *)(v0 + 400) = v8;
  *(CGFloat *)(v0 + 408) = v7;
  *(CGFloat *)(v0 + 416) = v6;
  v79.origin.x = v9;
  v79.origin.y = v8;
  v79.size.width = v7;
  v79.size.height = v6;
  v80 = CGRectIntegral(v79);
  width = v80.size.width;
  height = v80.size.height;
  v80.origin.x = v9;
  v80.origin.y = v8;
  v80.size.width = v7;
  v80.size.height = v6;
  v81 = CGRectIntegral(v80);
  v13 = v81.size.width;
  v14 = v81.size.height;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v3 + 16);
  v15(v2, v10, v4, (__n128)v81.origin, *(__n128 *)&v81.origin.y);
  ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v1, v2, v4);
  ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v5, v2, v4);
  v16 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
  *(_QWORD *)(v0 + 624) = v16;
  v16(v5, 0, 1, v4);
  v17 = URL.bookmarkData(options:includingResourceValuesForKeys:relativeTo:)(0, 0, v5);
  v18 = *(_QWORD *)(v0 + 584);
  v19 = v17;
  v21 = v20;
  v22 = *(_QWORD *)(v0 + 592);
  v23 = *(int **)(v0 + 576);
  v24 = *(_QWORD *)(v0 + 544);
  v25 = *(_QWORD *)(v0 + 520);
  v26 = *(_QWORD *)(v0 + 512);
  v76 = *(_OWORD *)(v0 + 496);
  v27 = *(_QWORD *)(v0 + 480);
  v74 = matrix_identity_float4x4.columns[3];
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 560) + 8))(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 552));
  sub_1005534BC(v24);
  v28 = (uint64_t *)(v18 + v23[5]);
  *v28 = v19;
  v28[1] = v21;
  v29 = v18 + v23[6];
  *(_DWORD *)v29 = 1103626240;
  *(simd_float4 *)(v29 + 16) = v74;
  *(CGFloat *)(v29 + 32) = width;
  *(CGFloat *)(v29 + 40) = height;
  *(CGFloat *)(v29 + 48) = v13;
  *(CGFloat *)(v29 + 56) = v14;
  *(_QWORD *)(v29 + 64) = v27;
  v73 = v23;
  v30 = v18 + v23[7];
  *(_OWORD *)v30 = v76;
  *(_QWORD *)(v30 + 16) = v26;
  *(_QWORD *)(v30 + 24) = v25;
  sub_100D02508(v18, v22);
  if (qword_1013DD7E8 != -1)
    swift_once(&qword_1013DD7E8, sub_100A04074);
  v71 = *(_QWORD *)(v0 + 592);
  v72 = *(_QWORD *)(v0 + 552);
  v77 = *(_QWORD *)(v0 + 536);
  v75 = *(_QWORD *)(v0 + 528);
  v31 = *(double *)(v0 + 520);
  v33 = *(double *)(v0 + 504);
  v32 = *(double *)(v0 + 512);
  v35 = *(_QWORD *)(v0 + 488);
  v34 = *(double *)(v0 + 496);
  v36 = *(_QWORD *)(v0 + 480);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v0 + 424, 0, 0);
  v37 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v38 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v38, v0 + 88);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E30;
  v40 = v37;
  v42 = URL.lastPathComponent.getter(v41);
  v44 = v43;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v45 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v45;
  *(_QWORD *)(inited + 32) = v42;
  v46 = inited + 32;
  *(_QWORD *)(inited + 40) = v44;
  *(_QWORD *)(inited + 96) = &type metadata for CGFloat;
  v47 = sub_1008898AC();
  *(_QWORD *)(inited + 104) = v47;
  *(_QWORD *)(inited + 72) = v36;
  *(_QWORD *)(inited + 136) = &type metadata for CGFloat;
  *(_QWORD *)(inited + 144) = v47;
  *(_QWORD *)(inited + 112) = v35;
  v48 = CGRect.debugDescription.getter(v34, v33, v32, v31);
  *(_QWORD *)(inited + 176) = &type metadata for String;
  *(_QWORD *)(inited + 184) = v45;
  *(_QWORD *)(inited + 152) = v48;
  *(_QWORD *)(inited + 160) = v49;
  v51 = static os_log_type_t.debug.getter(v50);
  sub_100A06EBC((uint64_t)v40, &_mh_execute_header, v51, "(Import) renderImportSnapshot(url: %@, contentsScale: %{public}.2f, canvasViewScale: %{public}.2f, naturalBounds: %{public}@)", 125, 2, inited);
  swift_setDeallocating(inited);
  v52 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v46, 4, v52);

  v53 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v54 = swift_initStackObject(v38, v0 + 280);
  *(_OWORD *)(v54 + 16) = xmmword_100EF5E40;
  v55 = v53;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v56 = sub_10085694C();
  v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v72, v56);
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  v58._countAndFlagsBits = 0x69666E6F63202C3ELL;
  v58._object = (void *)0xEB00000000203A67;
  String.append(_:)(v58);
  v59 = v71 + v73[6];
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v59;
  v60 = *(_OWORD *)(v59 + 16);
  v61 = *(_OWORD *)(v59 + 32);
  v62 = *(_OWORD *)(v59 + 48);
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v59 + 64);
  *(_OWORD *)(v0 + 48) = v61;
  *(_OWORD *)(v0 + 64) = v62;
  *(_OWORD *)(v0 + 32) = v60;
  v63._countAndFlagsBits = sub_1009565D8();
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  v64._countAndFlagsBits = 41;
  v64._object = (void *)0xE100000000000000;
  String.append(_:)(v64);
  *(_QWORD *)(v54 + 56) = &type metadata for String;
  *(_QWORD *)(v54 + 64) = v45;
  *(_QWORD *)(v54 + 32) = 0xD000000000000013;
  *(_QWORD *)(v54 + 40) = 0x8000000100FE34F0;
  v66 = static os_log_type_t.debug.getter(v65);
  sub_100A06EBC((uint64_t)v55, &_mh_execute_header, v66, "(Import) request: %@", 20, 2, v54);
  swift_setDeallocating(v54);
  swift_arrayDestroy(v54 + 32, 1, v52);

  ObjectType = swift_getObjectType(v75);
  *(_QWORD *)(v0 + 632) = ObjectType;
  v68 = *(int **)(v77 + 16);
  v78 = (int *)((char *)v68 + *v68);
  v69 = (_QWORD *)swift_task_alloc(v68[1]);
  *(_QWORD *)(v0 + 640) = v69;
  *v69 = v0;
  v69[1] = sub_100D01F5C;
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v78)(*(_QWORD *)(v0 + 592), ObjectType, *(_QWORD *)(v0 + 536));
}

uint64_t sub_100D01F5C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  float v5;
  int *v6;
  _QWORD *v7;
  int *v8;

  v2 = *(_QWORD *)(*v1 + 640);
  v3 = *v1;
  *(_QWORD *)(v3 + 648) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100D02420, *(_QWORD *)(v3 + 608), *(_QWORD *)(v3 + 616));
  v5 = *(double *)(v3 + 480);
  v6 = *(int **)(*(_QWORD *)(v3 + 536) + 48);
  v8 = (int *)((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v3 + 656) = v7;
  *v7 = v3;
  v7[1] = sub_100D0201C;
  return ((uint64_t (*)(_QWORD, _QWORD, float))v8)(*(_QWORD *)(v3 + 632), *(_QWORD *)(v3 + 536), v5);
}

uint64_t sub_100D0201C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 656);
  v3[83] = a1;
  v3[84] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100D02494;
  else
    v5 = sub_100D0208C;
  return swift_task_switch(v5, v3[76], v3[77]);
}

uint64_t sub_100D0208C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(char *, uint64_t, uint64_t, uint64_t);
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t *v9;
  __CFData *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  objc_class *v21;
  id v22;
  double v23;
  id v24;
  id v25;
  double x;
  double y;
  double width;
  double height;
  _BOOL4 v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CGImage *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CGRect v57;
  CGRect v58;

  v1 = *(_QWORD *)(v0 + 664);
  swift_release(*(_QWORD *)(v0 + 600));
  if (v1)
  {
    v52 = *(CGImage **)(v0 + 664);
    v2 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v0 + 624);
    v3 = *(double *)(v0 + 392);
    v4 = *(double *)(v0 + 400);
    v5 = *(double *)(v0 + 408);
    v6 = *(double *)(v0 + 416);
    v53 = *(_QWORD *)(v0 + 592);
    v54 = *(_QWORD *)(v0 + 584);
    v7 = *(_QWORD *)(v0 + 552);
    v55 = *(_QWORD *)(v0 + 568);
    v56 = *(_QWORD *)(v0 + 544);
    v8 = *(double *)(v0 + 488);
    v9 = *(uint64_t **)(v0 + 464);
    v10 = sub_100435130(v52);
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v14 = type metadata accessor for CRLDataAssetStorage(0);
    v15 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v16 = type metadata accessor for CRLUnfairLock();
    v17 = swift_allocObject(v16, 24, 7);
    sub_1004BE310(v11, v13);
    v18 = (_DWORD *)swift_slowAlloc(4, -1);
    *v18 = 0;
    *(_QWORD *)(v17 + 16) = v18;
    atomic_thread_fence(memory_order_acq_rel);
    *((_QWORD *)v15 + 6) = v17;
    v19 = &v15[OBJC_IVAR____TtC8Freeform19CRLDataAssetStorage__assetUUID];
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    *(_QWORD *)&v15[OBJC_IVAR____TtC8Freeform19CRLDataAssetStorage__temporaryDirectoryForAVAsset] = 0;
    v2(&v15[OBJC_IVAR____TtC8Freeform19CRLDataAssetStorage__temporaryURLForAVAsset], 1, 1, v7);
    *((_QWORD *)v15 + 2) = v11;
    *((_QWORD *)v15 + 3) = v13;
    *((_QWORD *)v15 + 4) = 0x702E74726F706D69;
    *((_QWORD *)v15 + 5) = 0xEA0000000000676ELL;
    *(_QWORD *)(v0 + 376) = v14;
    *(_QWORD *)(v0 + 384) = &off_101279F20;
    *(_QWORD *)(v0 + 352) = v15;
    v21 = (objc_class *)type metadata accessor for CRLAsset();
    v22 = objc_allocWithZone(v21);
    sub_1004E90B0(v0 + 352, (uint64_t)v22 + OBJC_IVAR____TtC8Freeform8CRLAsset_storage);
    *(_QWORD *)(v0 + 448) = v22;
    *(_QWORD *)(v0 + 456) = v21;
    *(_QWORD *)&v23 = swift_retain(v15).n128_u64[0];
    v24 = objc_msgSendSuper2((objc_super *)(v0 + 448), "init", v23);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 352));
    swift_release(v15);
    v25 = objc_msgSend(objc_allocWithZone((Class)CRLUSDZImageHitTestManager), "initWith:naturalBounds:canvasViewScale:", v24, v3, v4, v5, v6, v8);
    objc_msgSend(v25, "visibleBounds");
    x = v57.origin.x;
    y = v57.origin.y;
    width = v57.size.width;
    height = v57.size.height;
    v58.origin.x = CGRectNull.origin.x;
    v58.origin.y = CGRectNull.origin.y;
    v58.size.width = CGRectNull.size.width;
    v58.size.height = CGRectNull.size.height;
    v30 = CGRectEqualToRect(v57, v58);
    if (v30)
      v31 = v3;
    else
      v31 = x;
    if (v30)
      v32 = v4;
    else
      v32 = y;
    if (v30)
      v33 = v5;
    else
      v33 = width;
    if (v30)
      v34 = v6;
    else
      v34 = height;
    sub_100062790(v31, v32, v33, v34);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v42 = v41;

    sub_1006DCE5C(v53);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    *v9 = v11;
    v9[1] = v13;
    v9[2] = v36;
    v9[3] = v38;
    v9[4] = v40;
    v9[5] = v42;
    v43 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v44 = *(_QWORD *)(v0 + 592);
    v45 = sub_100694FA8();
    swift_allocError(&type metadata for CRLUSDRendering.RendererError, v45, 0, 0);
    *(_QWORD *)v46 = 0xD00000000000001DLL;
    *(_QWORD *)(v46 + 8) = 0x800000010100C2C0;
    *(_BYTE *)(v46 + 16) = 5;
    swift_willThrow(v47);
    sub_1006DCE5C(v44);
    v48 = *(_QWORD *)(v0 + 584);
    v49 = *(_QWORD *)(v0 + 568);
    v50 = *(_QWORD *)(v0 + 544);
    swift_task_dealloc(*(_QWORD *)(v0 + 592));
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    v43 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v43();
}

uint64_t sub_100D02420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 592);
  swift_release(*(_QWORD *)(v0 + 600));
  sub_1006DCE5C(v1);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 568);
  v4 = *(_QWORD *)(v0 + 544);
  swift_task_dealloc(*(_QWORD *)(v0 + 592));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100D02494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 592);
  swift_release(*(_QWORD *)(v0 + 600));
  sub_1006DCE5C(v1);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 568);
  v4 = *(_QWORD *)(v0 + 544);
  swift_task_dealloc(*(_QWORD *)(v0 + 592));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100D02508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRLUSDRendering.SceneRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100D0254C(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _BYTE v20[72];
  _BYTE v21[24];

  v4 = a3 & 1;
  v5 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v5 + 16) && (v8 = sub_1008438E0(a3 & 1), (v9 & 1) != 0))
  {
    v19 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v8);
    sub_100797718(a1, a2);

  }
  else
  {
    if (qword_1013DD870 != -1)
      swift_once(&qword_1013DD870, sub_100A059E0);
    swift_beginAccess(&static OS_os_log.dataSync, v21, 0, 0);
    v10 = (void *)static OS_os_log.dataSync;
    v11 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v11, v20);
    v13 = inited;
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    if (v4)
      v14 = 0x5320646572616853;
    else
      v14 = 0x2065746176697250;
    if (v4)
      v15 = 0xEC00000065706F63;
    else
      v15 = 0xED000065706F6353;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 40) = v15;
    v16 = v10;
    v17 = static os_log_type_t.error.getter(v16);
    sub_100A06EBC((uint64_t)v16, &_mh_execute_header, v17, "No syncController for syncScope: <%{public}@>", 45, 2, v13);
    swift_setDeallocating(v13);
    v18 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v13 + 32, 1, v18);

  }
}

uint64_t sub_100D02710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 88) = a4;
  return swift_task_switch(sub_100D02728, 0, 0);
}

void sub_100D02728()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t Strong;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;

  v1 = v0[11] + 16;
  swift_beginAccess(v1, v0 + 8, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = *(_QWORD *)(Strong + 16);
    v22 = Strong;
    v23 = v4 + 64;
    v5 = -1;
    v6 = -1 << *(_BYTE *)(v4 + 32);
    if (-v6 < 64)
      v5 = ~(-1 << -(char)v6);
    v7 = v5 & *(_QWORD *)(v4 + 64);
    v24 = (unint64_t)(63 - v6) >> 6;
    swift_bridgeObjectRetain(v4);
    v8 = 0;
    do
    {
      if (v7)
      {
        v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v10 = v9 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_25;
        if (v19 >= v24)
        {
LABEL_22:
          swift_release(v4);
          v3 = swift_release(v22);
          goto LABEL_23;
        }
        v20 = *(_QWORD *)(v23 + 8 * v19);
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v24)
            goto LABEL_22;
          v20 = *(_QWORD *)(v23 + 8 * v8);
          if (!v20)
          {
            v8 = v19 + 2;
            if (v19 + 2 >= v24)
              goto LABEL_22;
            v20 = *(_QWORD *)(v23 + 8 * v8);
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v24)
                goto LABEL_22;
              v20 = *(_QWORD *)(v23 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  v8 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_26;
                  if (v8 >= v24)
                    goto LABEL_22;
                  v20 = *(_QWORD *)(v23 + 8 * v8);
                  ++v21;
                  if (v20)
                    goto LABEL_21;
                }
              }
              v8 = v21;
            }
          }
        }
LABEL_21:
        v7 = (v20 - 1) & v20;
        v10 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v11 = *(char **)(*(_QWORD *)(v4 + 56) + 8 * v10);
      v12 = *(void **)&v11[OBJC_IVAR____TtC8Freeform17CRLSyncController_queue];
      v13 = swift_allocObject(&unk_1012A0B50, 24, 7);
      *(_QWORD *)(v13 + 16) = v11;
      v14 = swift_allocObject(&unk_1012A0B78, 32, 7);
      *(_QWORD *)(v14 + 16) = sub_100D02A40;
      *(_QWORD *)(v14 + 24) = v13;
      v0[6] = sub_1005B71BC;
      v0[7] = v14;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = *(_QWORD *)"";
      v0[4] = sub_100618D24;
      v0[5] = &unk_1012A0B90;
      v15 = _Block_copy(v0 + 2);
      v16 = v0[7];
      v17 = v11;
      v18 = v12;
      swift_retain(v14);
      swift_release(v16);
      dispatch_sync(v18, v15);

      _Block_release(v15);
      LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v14, "", 82, 570, 25, 1);
      swift_release(v14);
      swift_release(v13);

    }
    while ((v16 & 1) == 0);
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
LABEL_23:
    ((void (*)(__n128))v0[1])(v3);
  }
}

uint64_t type metadata accessor for CRLSyncHelper()
{
  return objc_opt_self(_TtC8Freeform13CRLSyncHelper);
}

uint64_t sub_100D02A1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100D02A40()
{
  uint64_t v0;

  return sub_100797650(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100D02A48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_100D02A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100D02A68(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double sub_100D02A70(uint64_t a1, uint64_t a2)
{
  return sub_100D0C470(a1, a2, type metadata accessor for CRLTweenLayerAnimation);
}

double sub_100D02A7C(uint64_t a1, double a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  _QWORD *v8;
  double v9;
  _QWORD v11[5];
  _QWORD v12[5];

  v12[3] = &type metadata for CRLLayerAnimationFlatGroup;
  v12[4] = &off_10128D670;
  v12[0] = a1;
  *(double *)&v12[1] = a2;
  v3 = sub_1004BB5A4(v12, (uint64_t)&type metadata for CRLLayerAnimationFlatGroup);
  v11[3] = &type metadata for CRLLayerAnimationFlatGroup;
  v11[4] = &off_10128D670;
  v4 = sub_10050D1B0(v11);
  v5 = *v3;
  v6 = *((double *)v3 + 1);
  swift_bridgeObjectRetain(a1);
  v7 = sub_1009A3760(v5);
  swift_bridgeObjectRetain(v5);
  v8 = sub_100756F5C((uint64_t)v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v4 = v8;
  v4[1] = 0;
  v9 = sub_1009A3BB4();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v12);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v11);
  return v9;
}

double sub_100D02B80(uint64_t a1, double a2)
{
  uint64_t *v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double *v8;
  _QWORD *v9;
  double v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  double v15;
  _QWORD v17[3];
  ValueMetadata *v18;
  _UNKNOWN **v19;
  _QWORD v20[5];

  v18 = &type metadata for CRLLayerAnimationSequence;
  v19 = &off_101276610;
  v17[0] = a1;
  *(double *)&v17[1] = a2;
  v3 = sub_1004BB5A4(v17, (uint64_t)&type metadata for CRLLayerAnimationSequence);
  v4 = *v3;
  v5 = *((double *)v3 + 1);
  swift_bridgeObjectRetain(a1);
  v6 = sub_1006A2614(v4, v5);
  v20[3] = &type metadata for CRLLayerAnimationGroup;
  v20[4] = &off_101271D70;
  v20[0] = v7;
  *(double *)&v20[1] = v6;
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v17);
  v8 = (double *)sub_1004BB5A4(v20, (uint64_t)&type metadata for CRLLayerAnimationGroup);
  v18 = &type metadata for CRLLayerAnimationGroup;
  v19 = &off_101271D70;
  v9 = sub_10050D1B0(v17);
  v10 = *v8;
  v11 = v8[1];
  swift_bridgeObjectRetain(*(_QWORD *)v8);
  v13 = sub_100D0C584(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(*(_QWORD *)&v10);
  v14 = sub_100D16A3C((uint64_t)v13, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v9 = v14;
  v9[1] = 0;
  v15 = sub_10060CBB4();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v20);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v17);
  return v15;
}

double sub_100D02CC8(uint64_t a1, double a2, double a3)
{
  double *v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double *v10;
  _QWORD *v11;
  double v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  double v17;
  _QWORD v19[3];
  ValueMetadata *v20;
  _UNKNOWN **v21;
  _QWORD v22[5];

  v20 = &type metadata for CRLLayerAnimationCascade;
  v21 = &off_1012733F0;
  *(double *)v19 = a2;
  v19[1] = a1;
  *(double *)&v19[2] = a3;
  v4 = (double *)sub_1004BB5A4(v19, (uint64_t)&type metadata for CRLLayerAnimationCascade);
  v5 = *v4;
  v6 = *((_QWORD *)v4 + 1);
  v7 = v4[2];
  swift_bridgeObjectRetain(a1);
  v8 = sub_100634DF4(v6, v5, v7);
  v22[3] = &type metadata for CRLLayerAnimationGroup;
  v22[4] = &off_101271D70;
  v22[0] = v9;
  *(double *)&v22[1] = v8;
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v19);
  v10 = (double *)sub_1004BB5A4(v22, (uint64_t)&type metadata for CRLLayerAnimationGroup);
  v20 = &type metadata for CRLLayerAnimationGroup;
  v21 = &off_101271D70;
  v11 = sub_10050D1B0(v19);
  v12 = *v10;
  v13 = v10[1];
  swift_bridgeObjectRetain(*(_QWORD *)v10);
  v15 = sub_100D0C584(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(*(_QWORD *)&v12);
  v16 = sub_100D16A3C((uint64_t)v15, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v11 = v16;
  v11[1] = 0;
  v17 = sub_10060CBB4();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v22);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v19);
  return v17;
}

double sub_100D02E1C(uint64_t a1, double a2)
{
  double *v3;
  _QWORD *v4;
  double v5;
  double v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double v10;
  _QWORD v12[5];
  _QWORD v13[5];

  v13[3] = &type metadata for CRLLayerAnimationGroup;
  v13[4] = &off_101271D70;
  v13[0] = a1;
  *(double *)&v13[1] = a2;
  v3 = (double *)sub_1004BB5A4(v13, (uint64_t)&type metadata for CRLLayerAnimationGroup);
  v12[3] = &type metadata for CRLLayerAnimationGroup;
  v12[4] = &off_101271D70;
  v4 = sub_10050D1B0(v12);
  v5 = *v3;
  v6 = v3[1];
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(*(_QWORD *)&v5);
  v8 = sub_100D0C584(v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v5);
  swift_bridgeObjectRetain(*(_QWORD *)&v5);
  v9 = sub_100D16A3C((uint64_t)v8, v6);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(*(_QWORD *)&v5);
  *v4 = v9;
  v4[1] = 0;
  v10 = sub_10060CBB4();
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v13);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v12);
  return v10;
}

_QWORD *sub_100D02F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _UNKNOWN **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  _UNKNOWN **v23;
  void (*v24)(__int128 *__return_ptr, uint64_t, _UNKNOWN **, __n128);
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _UNKNOWN **v51;
  uint64_t v52;
  _UNKNOWN **v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _UNKNOWN **v58;
  void (*v59)(__int128 *, _QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  _UNKNOWN **v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _UNKNOWN **v71;
  void (*v72)(__int128 *, _QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _UNKNOWN **v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  _UNKNOWN **v84;
  uint64_t (*v85)(__int128 *, uint64_t, _UNKNOWN **);
  CAMediaTimingFillMode v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  _UNKNOWN **v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  _UNKNOWN **v102;
  void (*v103)(__int128 *, _QWORD);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  _UNKNOWN **v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  _UNKNOWN **v115;
  void (*v116)(__int128 *, _QWORD);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(_QWORD, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  _UNKNOWN **v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  _UNKNOWN **v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  _UNKNOWN **v137;
  void (*v138)(__int128 *, _QWORD);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _UNKNOWN **v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  _UNKNOWN **v148;
  void (*v149)(__int128 *, _QWORD);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _UNKNOWN **v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  _UNKNOWN **v162;
  void (*v163)(__int128 *, _QWORD);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _UNKNOWN **v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  _UNKNOWN **v173;
  void (*v174)(__int128 *, _QWORD);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _UNKNOWN **v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  NSString *v183;
  void (*v184)(__int128 *, _QWORD);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(CAMediaTimingFillMode, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  _UNKNOWN **v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  _UNKNOWN **v196;
  void (*v197)(__int128 *, _QWORD);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v204;
  CAMediaTimingFillMode v205;
  CAMediaTimingFillMode v206;
  CAMediaTimingFillMode v207;
  CAMediaTimingFillMode v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD v215[3];
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  double *v224;
  __int128 v225;
  uint64_t v226;
  _UNKNOWN **v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD v231[3];
  uint64_t v232;
  _UNKNOWN **v233;

  v1 = type metadata accessor for CRLTweenLayerAnimation(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v204 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = v4;
  v227 = &off_101268F50;
  v5 = sub_10050D1B0(&v225);
  sub_1004B8460(v0, (uint64_t)v5, type metadata accessor for CRLTweenLayerAnimation);
  v6 = v226;
  v7 = v227;
  v8 = sub_1004BB5A4(&v225, v226);
  v232 = v6;
  v233 = v7;
  v9 = sub_10050D1B0(v231);
  sub_1004B8460((uint64_t)v8, (uint64_t)v9, type metadata accessor for CRLTweenLayerAnimation);
  v10 = (_QWORD *)((uint64_t (*)(uint64_t, _UNKNOWN **))v7[4])(v6, v7);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v231);
  v213 = v10[2];
  if (v213)
  {
    v11 = 0;
    v212 = 0;
    v206 = kCAFillModeRemoved;
    v205 = kCAFillModeForwards;
    v208 = kCAFillModeBackwards;
    v207 = kCAFillModeBoth;
    v209 = v1;
    v210 = v3;
    while (1)
    {
      if (v11 >= v10[2])
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        swift_release(v221);
        __break(1u);
        JUMPOUT(0x100D04770);
      }
      v12 = (uint64_t)(v10 + 4);
      sub_1004E90B0((uint64_t)&v10[5 * v11 + 4], (uint64_t)&v225);
      v13 = sub_1004B804C(&qword_1013E8700);
      if (!swift_dynamicCast(v3, &v225, v13, v1, 6))
        break;
      sub_100D184A8((uint64_t)v3);
LABEL_4:
      if (++v11 == v213)
        return v10;
    }
    if (v11 >= v10[2])
      goto LABEL_72;
    v214 = v10;
    sub_1004E90B0((uint64_t)&v10[5 * v11 + 4], (uint64_t)v231);
    v15 = v232;
    v14 = v233;
    v16 = sub_1004BB5A4(v231, v232);
    v17 = *(_QWORD *)(v15 - 8);
    v18 = __chkstk_darwin(v16);
    v20 = (char *)&v204 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v17 + 16))(v20, v18);
    v21 = (void *)((uint64_t (*)(uint64_t, _UNKNOWN **))v14[8])(v15, v14);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
    if (!v21)
    {
      sub_1004E90B0((uint64_t)v231, (uint64_t)&v225);
      v10 = v214;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_100D14F8C(v10);
      v1 = v209;
      if (v11 >= v10[2])
        goto LABEL_74;
      goto LABEL_69;
    }
    v211 = v11;
    v22 = v232;
    v23 = v233;
    sub_1004BB5A4(v231, v232);
    v24 = (void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **, __n128))v23[11];
    v25 = v214;
    v26 = swift_bridgeObjectRetain(v214);
    v24(&v228, v22, v23, v26);
    v27 = v229;
    v28 = v230;
    sub_1004BB5A4(&v228, v229);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v28 + 56))(&v225, v27, v28);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v228);
    sub_1008A51D4();
    sub_1004EA730(&v225);
    v224 = _swiftEmptyArrayStorage;
    v29 = v25[2];
    swift_bridgeObjectRetain(v25);
    for (i = v21; v29; --v29)
    {
      sub_1004E90B0(v12, (uint64_t)&v221);
      v32 = v222;
      v31 = v223;
      sub_1004BB5A4(&v221, v222);
      v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 64))(v32, v31);
      if (v33)
      {
        v34 = (void *)v33;
        sub_1004EB280();
        v35 = i;
        v36 = static NSObject.== infix(_:_:)(v34, v35);

        sub_1004E90B0((uint64_t)&v221, (uint64_t)&v218);
        if ((v36 & 1) != 0)
        {
          v37 = v219;
          v38 = v220;
          sub_1004BB5A4(&v218, v219);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v38 + 88))(v215, v37, v38);
          v39 = v216;
          v40 = v217;
          sub_1004BB5A4(v215, v216);
          v41 = (char *)&loc_100D0330C
              + *((int *)qword_100D04770 + (*(unsigned __int8 (**)(uint64_t, uint64_t))(v40 + 80))(v39, v40));
          __asm { BR              X9 }
        }
      }
      else
      {
        sub_1004E90B0((uint64_t)&v221, (uint64_t)&v218);
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v218);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
      v12 += 40;
    }
    swift_bridgeObjectRelease();

    v42 = v224;
    *(_QWORD *)&v221 = v224;
    swift_retain(v224);
    v43 = v212;
    sub_100D151BC(&v221);
    if (v43)
      goto LABEL_76;
    swift_bridgeObjectRelease();
    swift_release(v42);
    v44 = v221;
    v45 = *(_QWORD *)(v221 + 16);
    v11 = v211;
    v212 = 0;
    if (v45)
    {
      sub_1004E90B0(v221 + 32, (uint64_t)&v221);
      swift_bridgeObjectRetain(v44);
      v46 = v45 - 1;
      if (v45 != 1)
      {
        v87 = v44 + 72;
        do
        {
          sub_1004E90B0(v87, (uint64_t)&v218);
          v89 = v219;
          v88 = v220;
          sub_1004BB5A4(&v218, v219);
          v90 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v88 + 24) + 8) + 8))(v89);
          v92 = v222;
          v91 = v223;
          sub_1004BB5A4(&v221, v222);
          if (v90 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 24) + 8) + 8))(v92))
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v218);
          }
          else
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
            sub_1004DB728(&v218, (uint64_t)&v221);
          }
          v87 += 40;
          --v46;
        }
        while (v46);
      }
      swift_release(v44);
      sub_1004DB728(&v221, (uint64_t)&v228);
      sub_1004DB728(&v228, (uint64_t)&v225);
      sub_100720998(v44, (uint64_t)&v221);
      swift_release(v44);
      if (v222)
      {
        sub_1004DB728(&v221, (uint64_t)&v228);
        sub_1004E90B0((uint64_t)v231, (uint64_t)&v221);
        v47 = v222;
        v48 = v223;
        sub_1004BB5A4(&v221, v222);
        v49 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v48 + 128))(&v225, v47, v48);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
        v3 = v210;
        if ((v49 & 1) != 0
          && (v50 = v226,
              v51 = v227,
              sub_1004BB5A4(&v225, v226),
              (((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v51[16])(&v228, v50, v51) & 1) != 0))
        {
          v52 = v232;
          v53 = v233;
          sub_1004BB5A4(v231, v232);
          ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v53[11])(&v221, v52, v53);
          v54 = v222;
          v55 = v223;
          sub_1004BB5A4(&v221, v222);
          v56 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v55 + 112))(v54, v55);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
          if (v56 == 2)
          {
            v57 = v232;
            v58 = v233;
            sub_1004CB9AC((uint64_t)v231, v232);
            v59 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v58[13])(&v221, v57, v58);
            v61 = *(_QWORD *)(v60 + 24);
            v62 = *(_QWORD *)(v60 + 32);
            sub_1004CB9AC(v60, v61);
            v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 120);
            v64 = v62;
            v3 = v210;
            v63(1, v61, v64);
            v59(&v221, 0);
          }
          v65 = v232;
          v66 = v233;
          sub_1004BB5A4(v231, v232);
          ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v66[11])(&v221, v65, v66);
          v67 = v222;
          v68 = v223;
          sub_1004BB5A4(&v221, v222);
          v69 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v68 + 136))(v67, v68);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
          if (v69 == 2)
          {
            v70 = v232;
            v71 = v233;
            sub_1004CB9AC((uint64_t)v231, v232);
            v72 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v71[13])(&v221, v70, v71);
            v74 = *(_QWORD *)(v73 + 24);
            v75 = *(_QWORD *)(v73 + 32);
            sub_1004CB9AC(v73, v74);
            v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 144);
            v77 = v75;
            v3 = v210;
            v76(1, v74, v77);
            v72(&v221, 0);
          }
          v78 = v232;
          v79 = v233;
          sub_1004BB5A4(v231, v232);
          ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v79[11])(&v221, v78, v79);
          v80 = v222;
          v81 = v223;
          sub_1004BB5A4(&v221, v222);
          v82 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v81 + 88))(v80, v81);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);

          if (!v82)
          {
            v83 = v232;
            v84 = v233;
            sub_1004CB9AC((uint64_t)v231, v232);
            v85 = (uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v84[13];
            v86 = v207;
LABEL_63:
            v183 = v86;
            v184 = (void (*)(__int128 *, _QWORD))v85(&v221, v83, v84);
            v186 = *(_QWORD *)(v185 + 24);
            v187 = *(_QWORD *)(v185 + 32);
            sub_1004CB9AC(v185, v186);
            v188 = *(void (**)(CAMediaTimingFillMode, uint64_t, uint64_t))(v187 + 96);
            v189 = v187;
            v3 = v210;
            v188(v86, v186, v189);
            v184(&v221, 0);
          }
        }
        else
        {
          sub_1004E90B0((uint64_t)v231, (uint64_t)&v221);
          v93 = v222;
          v94 = v223;
          sub_1004BB5A4(&v221, v222);
          v95 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v94 + 128))(&v225, v93, v94);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
          if ((v95 & 1) != 0)
          {
            v96 = v232;
            v97 = v233;
            sub_1004BB5A4(v231, v232);
            ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v97[11])(&v221, v96, v97);
            v98 = v222;
            v99 = v223;
            sub_1004BB5A4(&v221, v222);
            v100 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v99 + 112))(v98, v99);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
            if (v100 == 2)
            {
              v101 = v232;
              v102 = v233;
              sub_1004CB9AC((uint64_t)v231, v232);
              v103 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v102[13])(&v221, v101, v102);
              v105 = *(_QWORD *)(v104 + 24);
              v106 = *(_QWORD *)(v104 + 32);
              sub_1004CB9AC(v104, v105);
              v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 120);
              v108 = v106;
              v3 = v210;
              v107(1, v105, v108);
              v103(&v221, 0);
            }
            v109 = v232;
            v110 = v233;
            sub_1004BB5A4(v231, v232);
            ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v110[11])(&v221, v109, v110);
            v111 = v222;
            v112 = v223;
            sub_1004BB5A4(&v221, v222);
            v113 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v112 + 136))(v111, v112);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
            if (v113 == 2)
            {
              v114 = v232;
              v115 = v233;
              sub_1004CB9AC((uint64_t)v231, v232);
              v116 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v115[13])(&v221, v114, v115);
              v118 = *(_QWORD *)(v117 + 24);
              v119 = *(_QWORD *)(v117 + 32);
              sub_1004CB9AC(v117, v118);
              v120 = *(void (**)(_QWORD, uint64_t, uint64_t))(v119 + 144);
              v121 = v119;
              v3 = v210;
              v120(0, v118, v121);
              v116(&v221, 0);
            }
            v122 = v232;
            v123 = v233;
            sub_1004BB5A4(v231, v232);
            ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v123[11])(&v221, v122, v123);
            v124 = v222;
            v125 = v223;
            sub_1004BB5A4(&v221, v222);
            v126 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v125 + 88))(v124, v125);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);

            if (!v126)
            {
              v83 = v232;
              v84 = v233;
              sub_1004CB9AC((uint64_t)v231, v232);
              v85 = (uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v84[13];
              v86 = v208;
              goto LABEL_63;
            }
          }
          else
          {
            sub_1004E90B0((uint64_t)v231, (uint64_t)&v221);
            v128 = v222;
            v129 = v223;
            sub_1004BB5A4(&v221, v222);
            v130 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v129 + 128))(&v228, v128, v129);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
            v131 = v232;
            v132 = v233;
            sub_1004BB5A4(v231, v232);
            if ((v130 & 1) != 0)
            {
              ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v132[11])(&v221, v131, v132);
              v133 = v222;
              v134 = v223;
              sub_1004BB5A4(&v221, v222);
              v135 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v134 + 112))(v133, v134);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
              if (v135 == 2)
              {
                v136 = v232;
                v137 = v233;
                sub_1004CB9AC((uint64_t)v231, v232);
                v138 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v137[13])(&v221, v136, v137);
                v140 = *(_QWORD *)(v139 + 24);
                v141 = *(_QWORD *)(v139 + 32);
                sub_1004CB9AC(v139, v140);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v141 + 120))(0, v140, v141);
                v138(&v221, 0);
              }
              v142 = v232;
              v143 = v233;
              sub_1004BB5A4(v231, v232);
              ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v143[11])(&v221, v142, v143);
              v144 = v222;
              v145 = v223;
              sub_1004BB5A4(&v221, v222);
              v146 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v145 + 136))(v144, v145);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
              if (v146 == 2)
              {
                v147 = v232;
                v148 = v233;
                sub_1004CB9AC((uint64_t)v231, v232);
                v149 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v148[13])(&v221, v147, v148);
                v151 = *(_QWORD *)(v150 + 24);
                v152 = *(_QWORD *)(v150 + 32);
                sub_1004CB9AC(v150, v151);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 144))(1, v151, v152);
                v149(&v221, 0);
              }
              v153 = v232;
              v154 = v233;
              sub_1004BB5A4(v231, v232);
              ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v154[11])(&v221, v153, v154);
              v155 = v222;
              v156 = v223;
              sub_1004BB5A4(&v221, v222);
              v157 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v156 + 88))(v155, v156);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);

              v3 = v210;
              if (!v157)
              {
                v83 = v232;
                v84 = v233;
                sub_1004CB9AC((uint64_t)v231, v232);
                v85 = (uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v84[13];
                v86 = v205;
                goto LABEL_63;
              }
            }
            else
            {
              ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v132[11])(&v221, v131, v132);
              v158 = v222;
              v159 = v223;
              sub_1004BB5A4(&v221, v222);
              v160 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v159 + 112))(v158, v159);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
              if (v160 == 2)
              {
                v161 = v232;
                v162 = v233;
                sub_1004CB9AC((uint64_t)v231, v232);
                v163 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v162[13])(&v221, v161, v162);
                v165 = *(_QWORD *)(v164 + 24);
                v166 = *(_QWORD *)(v164 + 32);
                sub_1004CB9AC(v164, v165);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v166 + 120))(0, v165, v166);
                v163(&v221, 0);
              }
              v167 = v232;
              v168 = v233;
              sub_1004BB5A4(v231, v232);
              ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v168[11])(&v221, v167, v168);
              v169 = v222;
              v170 = v223;
              sub_1004BB5A4(&v221, v222);
              v171 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v170 + 136))(v169, v170);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
              if (v171 == 2)
              {
                v172 = v232;
                v173 = v233;
                sub_1004CB9AC((uint64_t)v231, v232);
                v174 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v173[13])(&v221, v172, v173);
                v176 = *(_QWORD *)(v175 + 24);
                v177 = *(_QWORD *)(v175 + 32);
                sub_1004CB9AC(v175, v176);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v177 + 144))(0, v176, v177);
                v174(&v221, 0);
              }
              v178 = v232;
              v179 = v233;
              sub_1004BB5A4(v231, v232);
              ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v179[11])(&v221, v178, v179);
              v180 = v222;
              v181 = v223;
              sub_1004BB5A4(&v221, v222);
              v182 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v181 + 88))(v180, v181);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);

              v3 = v210;
              if (!v182)
              {
                v83 = v232;
                v84 = v233;
                sub_1004CB9AC((uint64_t)v231, v232);
                v85 = (uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v84[13];
                v86 = v206;
                goto LABEL_63;
              }
            }
          }
        }
        v190 = v232;
        v191 = v233;
        sub_1004BB5A4(v231, v232);
        ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v191[11])(&v221, v190, v191);
        v192 = v222;
        v193 = v223;
        sub_1004BB5A4(&v221, v222);
        v194 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v193 + 160))(v192, v193);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v221);
        if (v194 == 2)
        {
          v195 = v232;
          v196 = v233;
          sub_1004CB9AC((uint64_t)v231, v232);
          v197 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, uint64_t, _UNKNOWN **))v196[13])(&v221, v195, v196);
          v199 = *(_QWORD *)(v198 + 24);
          v200 = *(_QWORD *)(v198 + 32);
          sub_1004CB9AC(v198, v199);
          v201 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 168);
          v202 = v200;
          v3 = v210;
          v201(1, v199, v202);
          v197(&v221, 0);
        }

        v1 = v209;
        v10 = v214;
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v228);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
        sub_1004E90B0((uint64_t)v231, (uint64_t)&v225);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_100D14F8C(v10);
        if (v11 >= v10[2])
          goto LABEL_75;
LABEL_69:
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v10[5 * v11 + 4]);
        sub_1004DB728(&v225, (uint64_t)&v10[5 * v11 + 4]);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v231);
        goto LABEL_4;
      }

      sub_1004CB800((uint64_t)&v221, &qword_1013EA650);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
      v3 = v210;
    }
    else
    {
      swift_release(v221);

      v3 = v210;
    }
    sub_1004E90B0((uint64_t)v231, (uint64_t)&v225);
    v10 = v214;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1 = v209;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v10 = sub_100D14F8C(v10);
    if (v11 >= v10[2])
      goto LABEL_73;
    goto LABEL_69;
  }
  return v10;
}

_QWORD *sub_100D04858(uint64_t (*a1)(_QWORD, __n128), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(__int128 *__return_ptr, uint64_t, uint64_t, __n128);
  _QWORD *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(__int128 *, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(__int128 *, _QWORD);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(__int128 *, uint64_t, uint64_t);
  CAMediaTimingFillMode v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(__int128 *, _QWORD);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(__int128 *, _QWORD);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(_QWORD, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(__int128 *, _QWORD);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(__int128 *, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(__int128 *, _QWORD);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(__int128 *, _QWORD);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  NSString *v187;
  void (*v188)(__int128 *, _QWORD);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(CAMediaTimingFillMode, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(__int128 *, _QWORD);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(uint64_t, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v208;
  CAMediaTimingFillMode v209;
  CAMediaTimingFillMode v210;
  CAMediaTimingFillMode v211;
  CAMediaTimingFillMode v212;
  uint64_t v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD v219[3];
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  double *v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[3];
  uint64_t v236;
  uint64_t v237;

  v5 = type metadata accessor for CRLTweenLayerAnimation(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v208 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = a1(0, v6);
  v231 = a2;
  v9 = sub_10050D1B0(&v229);
  sub_1004B8460(v2, (uint64_t)v9, (uint64_t (*)(_QWORD))a1);
  v10 = v230;
  v11 = v231;
  v12 = sub_1004BB5A4(&v229, v230);
  v236 = v10;
  v237 = v11;
  v13 = sub_10050D1B0(v235);
  sub_1004B8460((uint64_t)v12, (uint64_t)v13, (uint64_t (*)(_QWORD))a1);
  v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v229);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v235);
  v217 = v14[2];
  if (v217)
  {
    v15 = 0;
    v216 = 0;
    v210 = kCAFillModeRemoved;
    v209 = kCAFillModeForwards;
    v212 = kCAFillModeBackwards;
    v211 = kCAFillModeBoth;
    v213 = v5;
    v214 = v8;
    while (1)
    {
      if (v15 >= v14[2])
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        swift_release(v225);
        __break(1u);
        JUMPOUT(0x100D060A0);
      }
      v16 = (uint64_t)(v14 + 4);
      sub_1004E90B0((uint64_t)&v14[5 * v15 + 4], (uint64_t)&v229);
      v17 = sub_1004B804C(&qword_1013E8700);
      if (!swift_dynamicCast(v8, &v229, v17, v5, 6))
        break;
      sub_100D184A8((uint64_t)v8);
LABEL_4:
      if (++v15 == v217)
        return v14;
    }
    if (v15 >= v14[2])
      goto LABEL_72;
    v218 = v14;
    sub_1004E90B0((uint64_t)&v14[5 * v15 + 4], (uint64_t)v235);
    v19 = v236;
    v18 = v237;
    v20 = sub_1004BB5A4(v235, v236);
    v21 = *(_QWORD *)(v19 - 8);
    v22 = __chkstk_darwin(v20);
    v24 = (char *)&v208 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v21 + 16))(v24, v22);
    v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 64))(v19, v18);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v19);
    if (!v25)
    {
      sub_1004E90B0((uint64_t)v235, (uint64_t)&v229);
      v14 = v218;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = sub_100D14F8C(v14);
      v5 = v213;
      if (v15 >= v14[2])
        goto LABEL_74;
      goto LABEL_69;
    }
    v215 = v15;
    v26 = v236;
    v27 = v237;
    sub_1004BB5A4(v235, v236);
    v28 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))(v27 + 88);
    v29 = v218;
    v30 = swift_bridgeObjectRetain(v218);
    v28(&v232, v26, v27, v30);
    v31 = v233;
    v32 = v234;
    sub_1004BB5A4(&v232, v233);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v32 + 56))(&v229, v31, v32);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v232);
    sub_1008A51D4();
    sub_1004EA730(&v229);
    v228 = _swiftEmptyArrayStorage;
    v33 = v29[2];
    swift_bridgeObjectRetain(v29);
    for (i = v25; v33; --v33)
    {
      sub_1004E90B0(v16, (uint64_t)&v225);
      v36 = v226;
      v35 = v227;
      sub_1004BB5A4(&v225, v226);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 64))(v36, v35);
      if (v37)
      {
        v38 = (void *)v37;
        sub_1004EB280();
        v39 = i;
        v40 = static NSObject.== infix(_:_:)(v38, v39);

        sub_1004E90B0((uint64_t)&v225, (uint64_t)&v222);
        if ((v40 & 1) != 0)
        {
          v41 = v223;
          v42 = v224;
          sub_1004BB5A4(&v222, v223);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v42 + 88))(v219, v41, v42);
          v43 = v220;
          v44 = v221;
          sub_1004BB5A4(v219, v220);
          v45 = (char *)&loc_100D04C3C
              + *((int *)qword_100D060A0 + (*(unsigned __int8 (**)(uint64_t, uint64_t))(v44 + 80))(v43, v44));
          __asm { BR              X9 }
        }
      }
      else
      {
        sub_1004E90B0((uint64_t)&v225, (uint64_t)&v222);
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v222);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
      v16 += 40;
    }
    swift_bridgeObjectRelease();

    v46 = v228;
    *(_QWORD *)&v225 = v228;
    swift_retain(v228);
    v47 = v216;
    sub_100D151BC(&v225);
    if (v47)
      goto LABEL_76;
    swift_bridgeObjectRelease();
    swift_release(v46);
    v48 = v225;
    v49 = *(_QWORD *)(v225 + 16);
    v15 = v215;
    v216 = 0;
    if (v49)
    {
      sub_1004E90B0(v225 + 32, (uint64_t)&v225);
      swift_bridgeObjectRetain(v48);
      v50 = v49 - 1;
      if (v49 != 1)
      {
        v91 = v48 + 72;
        do
        {
          sub_1004E90B0(v91, (uint64_t)&v222);
          v93 = v223;
          v92 = v224;
          sub_1004BB5A4(&v222, v223);
          v94 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v92 + 24) + 8) + 8))(v93);
          v96 = v226;
          v95 = v227;
          sub_1004BB5A4(&v225, v226);
          if (v94 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v95 + 24) + 8) + 8))(v96))
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v222);
          }
          else
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
            sub_1004DB728(&v222, (uint64_t)&v225);
          }
          v91 += 40;
          --v50;
        }
        while (v50);
      }
      swift_release(v48);
      sub_1004DB728(&v225, (uint64_t)&v232);
      sub_1004DB728(&v232, (uint64_t)&v229);
      sub_100720998(v48, (uint64_t)&v225);
      swift_release(v48);
      if (v226)
      {
        sub_1004DB728(&v225, (uint64_t)&v232);
        sub_1004E90B0((uint64_t)v235, (uint64_t)&v225);
        v51 = v226;
        v52 = v227;
        sub_1004BB5A4(&v225, v226);
        v53 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v52 + 128))(&v229, v51, v52);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
        v8 = v214;
        if ((v53 & 1) != 0
          && (v54 = v230,
              v55 = v231,
              sub_1004BB5A4(&v229, v230),
              ((*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v55 + 128))(&v232, v54, v55) & 1) != 0))
        {
          v56 = v236;
          v57 = v237;
          sub_1004BB5A4(v235, v236);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v57 + 88))(&v225, v56, v57);
          v58 = v226;
          v59 = v227;
          sub_1004BB5A4(&v225, v226);
          v60 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v59 + 112))(v58, v59);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
          if (v60 == 2)
          {
            v61 = v236;
            v62 = v237;
            sub_1004CB9AC((uint64_t)v235, v236);
            v63 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v62 + 104))(&v225, v61, v62);
            v65 = *(_QWORD *)(v64 + 24);
            v66 = *(_QWORD *)(v64 + 32);
            sub_1004CB9AC(v64, v65);
            v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 120);
            v68 = v66;
            v8 = v214;
            v67(1, v65, v68);
            v63(&v225, 0);
          }
          v69 = v236;
          v70 = v237;
          sub_1004BB5A4(v235, v236);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v70 + 88))(&v225, v69, v70);
          v71 = v226;
          v72 = v227;
          sub_1004BB5A4(&v225, v226);
          v73 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v72 + 136))(v71, v72);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
          if (v73 == 2)
          {
            v74 = v236;
            v75 = v237;
            sub_1004CB9AC((uint64_t)v235, v236);
            v76 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v75 + 104))(&v225, v74, v75);
            v78 = *(_QWORD *)(v77 + 24);
            v79 = *(_QWORD *)(v77 + 32);
            sub_1004CB9AC(v77, v78);
            v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 144);
            v81 = v79;
            v8 = v214;
            v80(1, v78, v81);
            v76(&v225, 0);
          }
          v82 = v236;
          v83 = v237;
          sub_1004BB5A4(v235, v236);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v83 + 88))(&v225, v82, v83);
          v84 = v226;
          v85 = v227;
          sub_1004BB5A4(&v225, v226);
          v86 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v85 + 88))(v84, v85);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);

          if (!v86)
          {
            v87 = v236;
            v88 = v237;
            sub_1004CB9AC((uint64_t)v235, v236);
            v89 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v88 + 104);
            v90 = v211;
LABEL_63:
            v187 = v90;
            v188 = (void (*)(__int128 *, _QWORD))v89(&v225, v87, v88);
            v190 = *(_QWORD *)(v189 + 24);
            v191 = *(_QWORD *)(v189 + 32);
            sub_1004CB9AC(v189, v190);
            v192 = *(void (**)(CAMediaTimingFillMode, uint64_t, uint64_t))(v191 + 96);
            v193 = v191;
            v8 = v214;
            v192(v90, v190, v193);
            v188(&v225, 0);
          }
        }
        else
        {
          sub_1004E90B0((uint64_t)v235, (uint64_t)&v225);
          v97 = v226;
          v98 = v227;
          sub_1004BB5A4(&v225, v226);
          v99 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v98 + 128))(&v229, v97, v98);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
          if ((v99 & 1) != 0)
          {
            v100 = v236;
            v101 = v237;
            sub_1004BB5A4(v235, v236);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v101 + 88))(&v225, v100, v101);
            v102 = v226;
            v103 = v227;
            sub_1004BB5A4(&v225, v226);
            v104 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v103 + 112))(v102, v103);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
            if (v104 == 2)
            {
              v105 = v236;
              v106 = v237;
              sub_1004CB9AC((uint64_t)v235, v236);
              v107 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v106 + 104))(&v225, v105, v106);
              v109 = *(_QWORD *)(v108 + 24);
              v110 = *(_QWORD *)(v108 + 32);
              sub_1004CB9AC(v108, v109);
              v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 120);
              v112 = v110;
              v8 = v214;
              v111(1, v109, v112);
              v107(&v225, 0);
            }
            v113 = v236;
            v114 = v237;
            sub_1004BB5A4(v235, v236);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v114 + 88))(&v225, v113, v114);
            v115 = v226;
            v116 = v227;
            sub_1004BB5A4(&v225, v226);
            v117 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v116 + 136))(v115, v116);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
            if (v117 == 2)
            {
              v118 = v236;
              v119 = v237;
              sub_1004CB9AC((uint64_t)v235, v236);
              v120 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v119 + 104))(&v225, v118, v119);
              v122 = *(_QWORD *)(v121 + 24);
              v123 = *(_QWORD *)(v121 + 32);
              sub_1004CB9AC(v121, v122);
              v124 = *(void (**)(_QWORD, uint64_t, uint64_t))(v123 + 144);
              v125 = v123;
              v8 = v214;
              v124(0, v122, v125);
              v120(&v225, 0);
            }
            v126 = v236;
            v127 = v237;
            sub_1004BB5A4(v235, v236);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v127 + 88))(&v225, v126, v127);
            v128 = v226;
            v129 = v227;
            sub_1004BB5A4(&v225, v226);
            v130 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v129 + 88))(v128, v129);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);

            if (!v130)
            {
              v87 = v236;
              v88 = v237;
              sub_1004CB9AC((uint64_t)v235, v236);
              v89 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v88 + 104);
              v90 = v212;
              goto LABEL_63;
            }
          }
          else
          {
            sub_1004E90B0((uint64_t)v235, (uint64_t)&v225);
            v132 = v226;
            v133 = v227;
            sub_1004BB5A4(&v225, v226);
            v134 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v133 + 128))(&v232, v132, v133);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
            v135 = v236;
            v136 = v237;
            sub_1004BB5A4(v235, v236);
            if ((v134 & 1) != 0)
            {
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v136 + 88))(&v225, v135, v136);
              v137 = v226;
              v138 = v227;
              sub_1004BB5A4(&v225, v226);
              v139 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v138 + 112))(v137, v138);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
              if (v139 == 2)
              {
                v140 = v236;
                v141 = v237;
                sub_1004CB9AC((uint64_t)v235, v236);
                v142 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v141 + 104))(&v225, v140, v141);
                v144 = *(_QWORD *)(v143 + 24);
                v145 = *(_QWORD *)(v143 + 32);
                sub_1004CB9AC(v143, v144);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v145 + 120))(0, v144, v145);
                v142(&v225, 0);
              }
              v146 = v236;
              v147 = v237;
              sub_1004BB5A4(v235, v236);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v147 + 88))(&v225, v146, v147);
              v148 = v226;
              v149 = v227;
              sub_1004BB5A4(&v225, v226);
              v150 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v149 + 136))(v148, v149);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
              if (v150 == 2)
              {
                v151 = v236;
                v152 = v237;
                sub_1004CB9AC((uint64_t)v235, v236);
                v153 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v152 + 104))(&v225, v151, v152);
                v155 = *(_QWORD *)(v154 + 24);
                v156 = *(_QWORD *)(v154 + 32);
                sub_1004CB9AC(v154, v155);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v156 + 144))(1, v155, v156);
                v153(&v225, 0);
              }
              v157 = v236;
              v158 = v237;
              sub_1004BB5A4(v235, v236);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v158 + 88))(&v225, v157, v158);
              v159 = v226;
              v160 = v227;
              sub_1004BB5A4(&v225, v226);
              v161 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v160 + 88))(v159, v160);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);

              v8 = v214;
              if (!v161)
              {
                v87 = v236;
                v88 = v237;
                sub_1004CB9AC((uint64_t)v235, v236);
                v89 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v88 + 104);
                v90 = v209;
                goto LABEL_63;
              }
            }
            else
            {
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v136 + 88))(&v225, v135, v136);
              v162 = v226;
              v163 = v227;
              sub_1004BB5A4(&v225, v226);
              v164 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v163 + 112))(v162, v163);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
              if (v164 == 2)
              {
                v165 = v236;
                v166 = v237;
                sub_1004CB9AC((uint64_t)v235, v236);
                v167 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v166 + 104))(&v225, v165, v166);
                v169 = *(_QWORD *)(v168 + 24);
                v170 = *(_QWORD *)(v168 + 32);
                sub_1004CB9AC(v168, v169);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v170 + 120))(0, v169, v170);
                v167(&v225, 0);
              }
              v171 = v236;
              v172 = v237;
              sub_1004BB5A4(v235, v236);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v172 + 88))(&v225, v171, v172);
              v173 = v226;
              v174 = v227;
              sub_1004BB5A4(&v225, v226);
              v175 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v174 + 136))(v173, v174);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
              if (v175 == 2)
              {
                v176 = v236;
                v177 = v237;
                sub_1004CB9AC((uint64_t)v235, v236);
                v178 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v177 + 104))(&v225, v176, v177);
                v180 = *(_QWORD *)(v179 + 24);
                v181 = *(_QWORD *)(v179 + 32);
                sub_1004CB9AC(v179, v180);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v181 + 144))(0, v180, v181);
                v178(&v225, 0);
              }
              v182 = v236;
              v183 = v237;
              sub_1004BB5A4(v235, v236);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v183 + 88))(&v225, v182, v183);
              v184 = v226;
              v185 = v227;
              sub_1004BB5A4(&v225, v226);
              v186 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v185 + 88))(v184, v185);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);

              v8 = v214;
              if (!v186)
              {
                v87 = v236;
                v88 = v237;
                sub_1004CB9AC((uint64_t)v235, v236);
                v89 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v88 + 104);
                v90 = v210;
                goto LABEL_63;
              }
            }
          }
        }
        v194 = v236;
        v195 = v237;
        sub_1004BB5A4(v235, v236);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v195 + 88))(&v225, v194, v195);
        v196 = v226;
        v197 = v227;
        sub_1004BB5A4(&v225, v226);
        v198 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v197 + 160))(v196, v197);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v225);
        if (v198 == 2)
        {
          v199 = v236;
          v200 = v237;
          sub_1004CB9AC((uint64_t)v235, v236);
          v201 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v200 + 104))(&v225, v199, v200);
          v203 = *(_QWORD *)(v202 + 24);
          v204 = *(_QWORD *)(v202 + 32);
          sub_1004CB9AC(v202, v203);
          v205 = *(void (**)(uint64_t, uint64_t, uint64_t))(v204 + 168);
          v206 = v204;
          v8 = v214;
          v205(1, v203, v206);
          v201(&v225, 0);
        }

        v5 = v213;
        v14 = v218;
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v232);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v229);
        sub_1004E90B0((uint64_t)v235, (uint64_t)&v229);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = sub_100D14F8C(v14);
        if (v15 >= v14[2])
          goto LABEL_75;
LABEL_69:
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v14[5 * v15 + 4]);
        sub_1004DB728(&v229, (uint64_t)&v14[5 * v15 + 4]);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v235);
        goto LABEL_4;
      }

      sub_1004CB800((uint64_t)&v225, &qword_1013EA650);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v229);
      v8 = v214;
    }
    else
    {
      swift_release(v225);

      v8 = v214;
    }
    sub_1004E90B0((uint64_t)v235, (uint64_t)&v229);
    v14 = v218;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v5 = v213;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v14 = sub_100D14F8C(v14);
    if (v15 >= v14[2])
      goto LABEL_73;
    goto LABEL_69;
  }
  return v14;
}

_QWORD *sub_100D06188(uint64_t a1, double a2)
{
  return sub_100D092AC(a1, (uint64_t (*)(uint64_t, double))sub_100D02E1C, a2);
}

_QWORD *sub_100D06194(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(__int128 *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(__int128 *, _QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(__int128 *, _QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(__int128 *, uint64_t, uint64_t);
  CAMediaTimingFillMode v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(__int128 *, _QWORD);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(__int128 *, _QWORD);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(__int128 *, _QWORD);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(__int128 *, _QWORD);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(__int128 *, _QWORD);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(__int128 *, _QWORD);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  NSString *v175;
  void (*v176)(__int128 *, _QWORD);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(__int128 *, _QWORD);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v192;
  CAMediaTimingFillMode v193;
  CAMediaTimingFillMode v194;
  CAMediaTimingFillMode v195;
  CAMediaTimingFillMode v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD v203[3];
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  double *v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD v219[3];
  uint64_t v220;
  uint64_t v221;

  v6 = type metadata accessor for CRLTweenLayerAnimation(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100D02CC8(a1, a2, a3);
  v10 = v9;
  v202 = v9[2];
  if (v202)
  {
    v11 = 0;
    v200 = 0;
    v194 = kCAFillModeRemoved;
    v193 = kCAFillModeForwards;
    v196 = kCAFillModeBackwards;
    v195 = kCAFillModeBoth;
    v197 = v8;
    v198 = v6;
    while (1)
    {
      if (v11 >= v10[2])
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        swift_release(v209);
        __break(1u);
        JUMPOUT(0x100D07944);
      }
      v12 = (uint64_t)(v10 + 4);
      sub_1004E90B0((uint64_t)&v10[5 * v11 + 4], (uint64_t)&v213);
      v13 = sub_1004B804C(&qword_1013E8700);
      if (!swift_dynamicCast(v8, &v213, v13, v6, 6))
        break;
      sub_100D184A8((uint64_t)v8);
LABEL_4:
      if (++v11 == v202)
        return v10;
    }
    if (v11 >= v10[2])
      goto LABEL_72;
    sub_1004E90B0((uint64_t)&v10[5 * v11 + 4], (uint64_t)v219);
    v15 = v220;
    v14 = v221;
    v16 = sub_1004BB5A4(v219, v220);
    v17 = *(_QWORD *)(v15 - 8);
    v18 = __chkstk_darwin(v16);
    v20 = (char *)&v192 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v17 + 16))(v20, v18);
    v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(v15, v14);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
    if (!v21)
    {
      sub_1004E90B0((uint64_t)v219, (uint64_t)&v213);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_100D14F8C(v10);
      v8 = v197;
      v6 = v198;
      if (v11 >= v10[2])
        goto LABEL_74;
      goto LABEL_69;
    }
    v199 = v11;
    v22 = v10;
    v23 = v220;
    v24 = v221;
    sub_1004BB5A4(v219, v220);
    v25 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))(v24 + 88);
    v26 = swift_bridgeObjectRetain(v22);
    v25(&v216, v23, v24, v26);
    v27 = v217;
    v28 = v218;
    sub_1004BB5A4(&v216, v217);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v28 + 56))(&v213, v27, v28);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v216);
    sub_1008A51D4();
    sub_1004EA730(&v213);
    v212 = _swiftEmptyArrayStorage;
    v29 = v22[2];
    v201 = v22;
    swift_bridgeObjectRetain(v22);
    for (i = v21; v29; --v29)
    {
      sub_1004E90B0(v12, (uint64_t)&v209);
      v32 = v210;
      v31 = v211;
      sub_1004BB5A4(&v209, v210);
      v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 64))(v32, v31);
      if (v33)
      {
        v34 = (void *)v33;
        sub_1004EB280();
        v35 = i;
        v36 = static NSObject.== infix(_:_:)(v34, v35);

        sub_1004E90B0((uint64_t)&v209, (uint64_t)&v206);
        if ((v36 & 1) != 0)
        {
          v37 = v207;
          v38 = v208;
          sub_1004BB5A4(&v206, v207);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v38 + 88))(v203, v37, v38);
          v39 = v204;
          v40 = v205;
          sub_1004BB5A4(v203, v204);
          v41 = (char *)&loc_100D06510
              + dword_100D07944[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v40 + 80))(v39, v40)];
          __asm { BR              X9 }
        }
      }
      else
      {
        sub_1004E90B0((uint64_t)&v209, (uint64_t)&v206);
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v206);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
      v12 += 40;
    }
    v10 = v201;
    swift_bridgeObjectRelease();

    v42 = v212;
    *(_QWORD *)&v209 = v212;
    swift_retain(v212);
    v43 = v200;
    sub_100D151BC(&v209);
    if (v43)
      goto LABEL_76;
    swift_bridgeObjectRelease();
    swift_release(v42);
    v44 = v209;
    v45 = *(_QWORD *)(v209 + 16);
    v11 = v199;
    v200 = 0;
    if (v45)
    {
      sub_1004E90B0(v209 + 32, (uint64_t)&v209);
      swift_bridgeObjectRetain(v44);
      v46 = v45 - 1;
      if (v45 != 1)
      {
        v83 = v44 + 72;
        do
        {
          sub_1004E90B0(v83, (uint64_t)&v206);
          v85 = v207;
          v84 = v208;
          sub_1004BB5A4(&v206, v207);
          v86 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v84 + 24) + 8) + 8))(v85);
          v88 = v210;
          v87 = v211;
          sub_1004BB5A4(&v209, v210);
          if (v86 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v87 + 24) + 8) + 8))(v88))
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v206);
          }
          else
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
            sub_1004DB728(&v206, (uint64_t)&v209);
          }
          v83 += 40;
          --v46;
        }
        while (v46);
      }
      swift_release(v44);
      sub_1004DB728(&v209, (uint64_t)&v216);
      sub_1004DB728(&v216, (uint64_t)&v213);
      sub_100720998(v44, (uint64_t)&v209);
      swift_release(v44);
      if (v210)
      {
        sub_1004DB728(&v209, (uint64_t)&v216);
        sub_1004E90B0((uint64_t)v219, (uint64_t)&v209);
        v47 = v210;
        v48 = v211;
        sub_1004BB5A4(&v209, v210);
        v49 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v48 + 128))(&v213, v47, v48);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
        if ((v49 & 1) != 0
          && (v50 = v214,
              v51 = v215,
              sub_1004BB5A4(&v213, v214),
              ((*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v51 + 128))(&v216, v50, v51) & 1) != 0))
        {
          v52 = v220;
          v53 = v221;
          sub_1004BB5A4(v219, v220);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v53 + 88))(&v209, v52, v53);
          v54 = v210;
          v55 = v211;
          sub_1004BB5A4(&v209, v210);
          v56 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v55 + 112))(v54, v55);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
          if (v56 == 2)
          {
            v57 = v220;
            v58 = v221;
            sub_1004CB9AC((uint64_t)v219, v220);
            v59 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v58 + 104))(&v209, v57, v58);
            v61 = *(_QWORD *)(v60 + 24);
            v62 = *(_QWORD *)(v60 + 32);
            sub_1004CB9AC(v60, v61);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 120))(1, v61, v62);
            v59(&v209, 0);
          }
          v63 = v220;
          v64 = v221;
          sub_1004BB5A4(v219, v220);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v64 + 88))(&v209, v63, v64);
          v65 = v210;
          v66 = v211;
          sub_1004BB5A4(&v209, v210);
          v67 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v66 + 136))(v65, v66);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
          if (v67 == 2)
          {
            v68 = v220;
            v69 = v221;
            sub_1004CB9AC((uint64_t)v219, v220);
            v70 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v69 + 104))(&v209, v68, v69);
            v72 = *(_QWORD *)(v71 + 24);
            v73 = *(_QWORD *)(v71 + 32);
            sub_1004CB9AC(v71, v72);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 144))(1, v72, v73);
            v70(&v209, 0);
          }
          v74 = v220;
          v75 = v221;
          sub_1004BB5A4(v219, v220);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v75 + 88))(&v209, v74, v75);
          v76 = v210;
          v77 = v211;
          sub_1004BB5A4(&v209, v210);
          v78 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v77 + 88))(v76, v77);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);

          if (!v78)
          {
            v79 = v220;
            v80 = v221;
            sub_1004CB9AC((uint64_t)v219, v220);
            v81 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v80 + 104);
            v82 = v195;
LABEL_63:
            v175 = v82;
            v176 = (void (*)(__int128 *, _QWORD))v81(&v209, v79, v80);
            v178 = *(_QWORD *)(v177 + 24);
            v179 = *(_QWORD *)(v177 + 32);
            sub_1004CB9AC(v177, v178);
            (*(void (**)(CAMediaTimingFillMode, uint64_t, uint64_t))(v179 + 96))(v82, v178, v179);
            v176(&v209, 0);
          }
        }
        else
        {
          sub_1004E90B0((uint64_t)v219, (uint64_t)&v209);
          v89 = v210;
          v90 = v211;
          sub_1004BB5A4(&v209, v210);
          v91 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v90 + 128))(&v213, v89, v90);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
          if ((v91 & 1) != 0)
          {
            v92 = v220;
            v93 = v221;
            sub_1004BB5A4(v219, v220);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v93 + 88))(&v209, v92, v93);
            v94 = v210;
            v95 = v211;
            sub_1004BB5A4(&v209, v210);
            v96 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v95 + 112))(v94, v95);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
            if (v96 == 2)
            {
              v97 = v220;
              v98 = v221;
              sub_1004CB9AC((uint64_t)v219, v220);
              v99 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v98 + 104))(&v209, v97, v98);
              v101 = *(_QWORD *)(v100 + 24);
              v102 = *(_QWORD *)(v100 + 32);
              sub_1004CB9AC(v100, v101);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 120))(1, v101, v102);
              v99(&v209, 0);
            }
            v103 = v220;
            v104 = v221;
            sub_1004BB5A4(v219, v220);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v104 + 88))(&v209, v103, v104);
            v105 = v210;
            v106 = v211;
            sub_1004BB5A4(&v209, v210);
            v107 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v106 + 136))(v105, v106);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
            if (v107 == 2)
            {
              v108 = v220;
              v109 = v221;
              sub_1004CB9AC((uint64_t)v219, v220);
              v110 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v109 + 104))(&v209, v108, v109);
              v112 = *(_QWORD *)(v111 + 24);
              v113 = *(_QWORD *)(v111 + 32);
              sub_1004CB9AC(v111, v112);
              (*(void (**)(_QWORD, uint64_t, uint64_t))(v113 + 144))(0, v112, v113);
              v110(&v209, 0);
            }
            v114 = v220;
            v115 = v221;
            sub_1004BB5A4(v219, v220);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v115 + 88))(&v209, v114, v115);
            v116 = v210;
            v117 = v211;
            sub_1004BB5A4(&v209, v210);
            v118 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v117 + 88))(v116, v117);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);

            if (!v118)
            {
              v79 = v220;
              v80 = v221;
              sub_1004CB9AC((uint64_t)v219, v220);
              v81 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v80 + 104);
              v82 = v196;
              goto LABEL_63;
            }
          }
          else
          {
            sub_1004E90B0((uint64_t)v219, (uint64_t)&v209);
            v120 = v210;
            v121 = v211;
            sub_1004BB5A4(&v209, v210);
            v122 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v121 + 128))(&v216, v120, v121);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
            v123 = v220;
            v124 = v221;
            sub_1004BB5A4(v219, v220);
            if ((v122 & 1) != 0)
            {
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v124 + 88))(&v209, v123, v124);
              v125 = v210;
              v126 = v211;
              sub_1004BB5A4(&v209, v210);
              v127 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v126 + 112))(v125, v126);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
              if (v127 == 2)
              {
                v128 = v220;
                v129 = v221;
                sub_1004CB9AC((uint64_t)v219, v220);
                v130 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v129 + 104))(&v209, v128, v129);
                v132 = *(_QWORD *)(v131 + 24);
                v133 = *(_QWORD *)(v131 + 32);
                sub_1004CB9AC(v131, v132);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v133 + 120))(0, v132, v133);
                v130(&v209, 0);
              }
              v134 = v220;
              v135 = v221;
              sub_1004BB5A4(v219, v220);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v135 + 88))(&v209, v134, v135);
              v136 = v210;
              v137 = v211;
              sub_1004BB5A4(&v209, v210);
              v138 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v137 + 136))(v136, v137);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
              if (v138 == 2)
              {
                v139 = v220;
                v140 = v221;
                sub_1004CB9AC((uint64_t)v219, v220);
                v141 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v140 + 104))(&v209, v139, v140);
                v143 = *(_QWORD *)(v142 + 24);
                v144 = *(_QWORD *)(v142 + 32);
                sub_1004CB9AC(v142, v143);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 144))(1, v143, v144);
                v141(&v209, 0);
              }
              v145 = v220;
              v146 = v221;
              sub_1004BB5A4(v219, v220);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v146 + 88))(&v209, v145, v146);
              v147 = v210;
              v148 = v211;
              sub_1004BB5A4(&v209, v210);
              v149 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v148 + 88))(v147, v148);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);

              if (!v149)
              {
                v79 = v220;
                v80 = v221;
                sub_1004CB9AC((uint64_t)v219, v220);
                v81 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v80 + 104);
                v82 = v193;
                goto LABEL_63;
              }
            }
            else
            {
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v124 + 88))(&v209, v123, v124);
              v150 = v210;
              v151 = v211;
              sub_1004BB5A4(&v209, v210);
              v152 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v151 + 112))(v150, v151);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
              if (v152 == 2)
              {
                v153 = v220;
                v154 = v221;
                sub_1004CB9AC((uint64_t)v219, v220);
                v155 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v154 + 104))(&v209, v153, v154);
                v157 = *(_QWORD *)(v156 + 24);
                v158 = *(_QWORD *)(v156 + 32);
                sub_1004CB9AC(v156, v157);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v158 + 120))(0, v157, v158);
                v155(&v209, 0);
              }
              v159 = v220;
              v160 = v221;
              sub_1004BB5A4(v219, v220);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v160 + 88))(&v209, v159, v160);
              v161 = v210;
              v162 = v211;
              sub_1004BB5A4(&v209, v210);
              v163 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v162 + 136))(v161, v162);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
              if (v163 == 2)
              {
                v164 = v220;
                v165 = v221;
                sub_1004CB9AC((uint64_t)v219, v220);
                v166 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v165 + 104))(&v209, v164, v165);
                v168 = *(_QWORD *)(v167 + 24);
                v169 = *(_QWORD *)(v167 + 32);
                sub_1004CB9AC(v167, v168);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v169 + 144))(0, v168, v169);
                v166(&v209, 0);
              }
              v170 = v220;
              v171 = v221;
              sub_1004BB5A4(v219, v220);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v171 + 88))(&v209, v170, v171);
              v172 = v210;
              v173 = v211;
              sub_1004BB5A4(&v209, v210);
              v174 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v173 + 88))(v172, v173);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);

              if (!v174)
              {
                v79 = v220;
                v80 = v221;
                sub_1004CB9AC((uint64_t)v219, v220);
                v81 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v80 + 104);
                v82 = v194;
                goto LABEL_63;
              }
            }
          }
        }
        v180 = v220;
        v181 = v221;
        sub_1004BB5A4(v219, v220);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v181 + 88))(&v209, v180, v181);
        v182 = v210;
        v183 = v211;
        sub_1004BB5A4(&v209, v210);
        v184 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v183 + 160))(v182, v183);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v209);
        if (v184 == 2)
        {
          v185 = v220;
          v186 = v221;
          sub_1004CB9AC((uint64_t)v219, v220);
          v187 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v186 + 104))(&v209, v185, v186);
          v189 = *(_QWORD *)(v188 + 24);
          v190 = *(_QWORD *)(v188 + 32);
          sub_1004CB9AC(v188, v189);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 168))(1, v189, v190);
          v187(&v209, 0);
        }

        v8 = v197;
        v6 = v198;
        v10 = v201;
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v216);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
        sub_1004E90B0((uint64_t)v219, (uint64_t)&v213);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_100D14F8C(v10);
        if (v11 >= v10[2])
          goto LABEL_75;
LABEL_69:
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v10[5 * v11 + 4]);
        sub_1004DB728(&v213, (uint64_t)&v10[5 * v11 + 4]);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v219);
        goto LABEL_4;
      }

      sub_1004CB800((uint64_t)&v209, &qword_1013EA650);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
      v10 = v201;
    }
    else
    {
      swift_release(v209);

    }
    sub_1004E90B0((uint64_t)v219, (uint64_t)&v213);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = v197;
    v6 = v198;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v10 = sub_100D14F8C(v10);
    if (v11 >= v10[2])
      goto LABEL_73;
    goto LABEL_69;
  }
  return v10;
}

_QWORD *sub_100D07A2C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(__int128 *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(__int128 *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(__int128 *, _QWORD);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(__int128 *, uint64_t, uint64_t);
  CAMediaTimingFillMode v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(__int128 *, _QWORD);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(__int128 *, _QWORD);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(__int128 *, _QWORD);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(__int128 *, _QWORD);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(__int128 *, _QWORD);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(__int128 *, _QWORD);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  NSString *v169;
  void (*v170)(__int128 *, _QWORD);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(__int128 *, _QWORD);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v186;
  CAMediaTimingFillMode v187;
  CAMediaTimingFillMode v188;
  CAMediaTimingFillMode v189;
  CAMediaTimingFillMode v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD v197[3];
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  double *v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD v213[3];
  uint64_t v214;
  uint64_t v215;

  v0 = type metadata accessor for CRLTweenLayerAnimation(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v186 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1009F5EB8();
  v4 = v3;
  v196 = v3[2];
  if (v196)
  {
    v5 = 0;
    v194 = 0;
    v188 = kCAFillModeRemoved;
    v187 = kCAFillModeForwards;
    v190 = kCAFillModeBackwards;
    v189 = kCAFillModeBoth;
    v191 = v2;
    v192 = v0;
    while (1)
    {
      if (v5 >= v4[2])
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        swift_release(v203);
        __break(1u);
        JUMPOUT(0x100D091C4);
      }
      v6 = (uint64_t)(v4 + 4);
      sub_1004E90B0((uint64_t)&v4[5 * v5 + 4], (uint64_t)&v207);
      v7 = sub_1004B804C(&qword_1013E8700);
      if (!swift_dynamicCast(v2, &v207, v7, v0, 6))
        break;
      sub_100D184A8((uint64_t)v2);
LABEL_4:
      if (++v5 == v196)
        return v4;
    }
    if (v5 >= v4[2])
      goto LABEL_72;
    sub_1004E90B0((uint64_t)&v4[5 * v5 + 4], (uint64_t)v213);
    v9 = v214;
    v8 = v215;
    v10 = sub_1004BB5A4(v213, v214);
    v11 = *(_QWORD *)(v9 - 8);
    v12 = __chkstk_darwin(v10);
    v14 = (char *)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v11 + 16))(v14, v12);
    v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v9, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
    if (!v15)
    {
      sub_1004E90B0((uint64_t)v213, (uint64_t)&v207);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_100D14F8C(v4);
      v2 = v191;
      v0 = v192;
      if (v5 >= v4[2])
        goto LABEL_74;
      goto LABEL_69;
    }
    v193 = v5;
    v16 = v4;
    v17 = v214;
    v18 = v215;
    sub_1004BB5A4(v213, v214);
    v19 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))(v18 + 88);
    v20 = swift_bridgeObjectRetain(v16);
    v19(&v210, v17, v18, v20);
    v21 = v211;
    v22 = v212;
    sub_1004BB5A4(&v210, v211);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v22 + 56))(&v207, v21, v22);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v210);
    sub_1008A51D4();
    sub_1004EA730(&v207);
    v206 = _swiftEmptyArrayStorage;
    v23 = v16[2];
    v195 = v16;
    swift_bridgeObjectRetain(v16);
    for (i = v15; v23; --v23)
    {
      sub_1004E90B0(v6, (uint64_t)&v203);
      v26 = v204;
      v25 = v205;
      sub_1004BB5A4(&v203, v204);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 64))(v26, v25);
      if (v27)
      {
        v28 = (void *)v27;
        sub_1004EB280();
        v29 = i;
        v30 = static NSObject.== infix(_:_:)(v28, v29);

        sub_1004E90B0((uint64_t)&v203, (uint64_t)&v200);
        if ((v30 & 1) != 0)
        {
          v31 = v201;
          v32 = v202;
          sub_1004BB5A4(&v200, v201);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v32 + 88))(v197, v31, v32);
          v33 = v198;
          v34 = v199;
          sub_1004BB5A4(v197, v198);
          v35 = (char *)&loc_100D07D90
              + dword_100D091C4[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v34 + 80))(v33, v34)];
          __asm { BR              X9 }
        }
      }
      else
      {
        sub_1004E90B0((uint64_t)&v203, (uint64_t)&v200);
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v200);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
      v6 += 40;
    }
    v4 = v195;
    swift_bridgeObjectRelease();

    v36 = v206;
    *(_QWORD *)&v203 = v206;
    swift_retain(v206);
    v37 = v194;
    sub_100D151BC(&v203);
    if (v37)
      goto LABEL_76;
    swift_bridgeObjectRelease();
    swift_release(v36);
    v38 = v203;
    v39 = *(_QWORD *)(v203 + 16);
    v5 = v193;
    v194 = 0;
    if (v39)
    {
      sub_1004E90B0(v203 + 32, (uint64_t)&v203);
      swift_bridgeObjectRetain(v38);
      v40 = v39 - 1;
      if (v39 != 1)
      {
        v77 = v38 + 72;
        do
        {
          sub_1004E90B0(v77, (uint64_t)&v200);
          v79 = v201;
          v78 = v202;
          sub_1004BB5A4(&v200, v201);
          v80 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v78 + 24) + 8) + 8))(v79);
          v82 = v204;
          v81 = v205;
          sub_1004BB5A4(&v203, v204);
          if (v80 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v81 + 24) + 8) + 8))(v82))
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v200);
          }
          else
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
            sub_1004DB728(&v200, (uint64_t)&v203);
          }
          v77 += 40;
          --v40;
        }
        while (v40);
      }
      swift_release(v38);
      sub_1004DB728(&v203, (uint64_t)&v210);
      sub_1004DB728(&v210, (uint64_t)&v207);
      sub_100720998(v38, (uint64_t)&v203);
      swift_release(v38);
      if (v204)
      {
        sub_1004DB728(&v203, (uint64_t)&v210);
        sub_1004E90B0((uint64_t)v213, (uint64_t)&v203);
        v41 = v204;
        v42 = v205;
        sub_1004BB5A4(&v203, v204);
        v43 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v42 + 128))(&v207, v41, v42);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
        if ((v43 & 1) != 0
          && (v44 = v208,
              v45 = v209,
              sub_1004BB5A4(&v207, v208),
              ((*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v45 + 128))(&v210, v44, v45) & 1) != 0))
        {
          v46 = v214;
          v47 = v215;
          sub_1004BB5A4(v213, v214);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 88))(&v203, v46, v47);
          v48 = v204;
          v49 = v205;
          sub_1004BB5A4(&v203, v204);
          v50 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v49 + 112))(v48, v49);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
          if (v50 == 2)
          {
            v51 = v214;
            v52 = v215;
            sub_1004CB9AC((uint64_t)v213, v214);
            v53 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v52 + 104))(&v203, v51, v52);
            v55 = *(_QWORD *)(v54 + 24);
            v56 = *(_QWORD *)(v54 + 32);
            sub_1004CB9AC(v54, v55);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 120))(1, v55, v56);
            v53(&v203, 0);
          }
          v57 = v214;
          v58 = v215;
          sub_1004BB5A4(v213, v214);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v58 + 88))(&v203, v57, v58);
          v59 = v204;
          v60 = v205;
          sub_1004BB5A4(&v203, v204);
          v61 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v60 + 136))(v59, v60);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
          if (v61 == 2)
          {
            v62 = v214;
            v63 = v215;
            sub_1004CB9AC((uint64_t)v213, v214);
            v64 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v63 + 104))(&v203, v62, v63);
            v66 = *(_QWORD *)(v65 + 24);
            v67 = *(_QWORD *)(v65 + 32);
            sub_1004CB9AC(v65, v66);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 144))(1, v66, v67);
            v64(&v203, 0);
          }
          v68 = v214;
          v69 = v215;
          sub_1004BB5A4(v213, v214);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v69 + 88))(&v203, v68, v69);
          v70 = v204;
          v71 = v205;
          sub_1004BB5A4(&v203, v204);
          v72 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v71 + 88))(v70, v71);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);

          if (!v72)
          {
            v73 = v214;
            v74 = v215;
            sub_1004CB9AC((uint64_t)v213, v214);
            v75 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v74 + 104);
            v76 = v189;
LABEL_63:
            v169 = v76;
            v170 = (void (*)(__int128 *, _QWORD))v75(&v203, v73, v74);
            v172 = *(_QWORD *)(v171 + 24);
            v173 = *(_QWORD *)(v171 + 32);
            sub_1004CB9AC(v171, v172);
            (*(void (**)(CAMediaTimingFillMode, uint64_t, uint64_t))(v173 + 96))(v76, v172, v173);
            v170(&v203, 0);
          }
        }
        else
        {
          sub_1004E90B0((uint64_t)v213, (uint64_t)&v203);
          v83 = v204;
          v84 = v205;
          sub_1004BB5A4(&v203, v204);
          v85 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v84 + 128))(&v207, v83, v84);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
          if ((v85 & 1) != 0)
          {
            v86 = v214;
            v87 = v215;
            sub_1004BB5A4(v213, v214);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v87 + 88))(&v203, v86, v87);
            v88 = v204;
            v89 = v205;
            sub_1004BB5A4(&v203, v204);
            v90 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v89 + 112))(v88, v89);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
            if (v90 == 2)
            {
              v91 = v214;
              v92 = v215;
              sub_1004CB9AC((uint64_t)v213, v214);
              v93 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v92 + 104))(&v203, v91, v92);
              v95 = *(_QWORD *)(v94 + 24);
              v96 = *(_QWORD *)(v94 + 32);
              sub_1004CB9AC(v94, v95);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 120))(1, v95, v96);
              v93(&v203, 0);
            }
            v97 = v214;
            v98 = v215;
            sub_1004BB5A4(v213, v214);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v98 + 88))(&v203, v97, v98);
            v99 = v204;
            v100 = v205;
            sub_1004BB5A4(&v203, v204);
            v101 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v100 + 136))(v99, v100);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
            if (v101 == 2)
            {
              v102 = v214;
              v103 = v215;
              sub_1004CB9AC((uint64_t)v213, v214);
              v104 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v103 + 104))(&v203, v102, v103);
              v106 = *(_QWORD *)(v105 + 24);
              v107 = *(_QWORD *)(v105 + 32);
              sub_1004CB9AC(v105, v106);
              (*(void (**)(_QWORD, uint64_t, uint64_t))(v107 + 144))(0, v106, v107);
              v104(&v203, 0);
            }
            v108 = v214;
            v109 = v215;
            sub_1004BB5A4(v213, v214);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v109 + 88))(&v203, v108, v109);
            v110 = v204;
            v111 = v205;
            sub_1004BB5A4(&v203, v204);
            v112 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v111 + 88))(v110, v111);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);

            if (!v112)
            {
              v73 = v214;
              v74 = v215;
              sub_1004CB9AC((uint64_t)v213, v214);
              v75 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v74 + 104);
              v76 = v190;
              goto LABEL_63;
            }
          }
          else
          {
            sub_1004E90B0((uint64_t)v213, (uint64_t)&v203);
            v114 = v204;
            v115 = v205;
            sub_1004BB5A4(&v203, v204);
            v116 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v115 + 128))(&v210, v114, v115);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
            v117 = v214;
            v118 = v215;
            sub_1004BB5A4(v213, v214);
            if ((v116 & 1) != 0)
            {
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v118 + 88))(&v203, v117, v118);
              v119 = v204;
              v120 = v205;
              sub_1004BB5A4(&v203, v204);
              v121 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v120 + 112))(v119, v120);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
              if (v121 == 2)
              {
                v122 = v214;
                v123 = v215;
                sub_1004CB9AC((uint64_t)v213, v214);
                v124 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v123 + 104))(&v203, v122, v123);
                v126 = *(_QWORD *)(v125 + 24);
                v127 = *(_QWORD *)(v125 + 32);
                sub_1004CB9AC(v125, v126);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v127 + 120))(0, v126, v127);
                v124(&v203, 0);
              }
              v128 = v214;
              v129 = v215;
              sub_1004BB5A4(v213, v214);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v129 + 88))(&v203, v128, v129);
              v130 = v204;
              v131 = v205;
              sub_1004BB5A4(&v203, v204);
              v132 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v131 + 136))(v130, v131);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
              if (v132 == 2)
              {
                v133 = v214;
                v134 = v215;
                sub_1004CB9AC((uint64_t)v213, v214);
                v135 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v134 + 104))(&v203, v133, v134);
                v137 = *(_QWORD *)(v136 + 24);
                v138 = *(_QWORD *)(v136 + 32);
                sub_1004CB9AC(v136, v137);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 144))(1, v137, v138);
                v135(&v203, 0);
              }
              v139 = v214;
              v140 = v215;
              sub_1004BB5A4(v213, v214);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v140 + 88))(&v203, v139, v140);
              v141 = v204;
              v142 = v205;
              sub_1004BB5A4(&v203, v204);
              v143 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v142 + 88))(v141, v142);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);

              if (!v143)
              {
                v73 = v214;
                v74 = v215;
                sub_1004CB9AC((uint64_t)v213, v214);
                v75 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v74 + 104);
                v76 = v187;
                goto LABEL_63;
              }
            }
            else
            {
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v118 + 88))(&v203, v117, v118);
              v144 = v204;
              v145 = v205;
              sub_1004BB5A4(&v203, v204);
              v146 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v145 + 112))(v144, v145);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
              if (v146 == 2)
              {
                v147 = v214;
                v148 = v215;
                sub_1004CB9AC((uint64_t)v213, v214);
                v149 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v148 + 104))(&v203, v147, v148);
                v151 = *(_QWORD *)(v150 + 24);
                v152 = *(_QWORD *)(v150 + 32);
                sub_1004CB9AC(v150, v151);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v152 + 120))(0, v151, v152);
                v149(&v203, 0);
              }
              v153 = v214;
              v154 = v215;
              sub_1004BB5A4(v213, v214);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v154 + 88))(&v203, v153, v154);
              v155 = v204;
              v156 = v205;
              sub_1004BB5A4(&v203, v204);
              v157 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v156 + 136))(v155, v156);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
              if (v157 == 2)
              {
                v158 = v214;
                v159 = v215;
                sub_1004CB9AC((uint64_t)v213, v214);
                v160 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v159 + 104))(&v203, v158, v159);
                v162 = *(_QWORD *)(v161 + 24);
                v163 = *(_QWORD *)(v161 + 32);
                sub_1004CB9AC(v161, v162);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v163 + 144))(0, v162, v163);
                v160(&v203, 0);
              }
              v164 = v214;
              v165 = v215;
              sub_1004BB5A4(v213, v214);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v165 + 88))(&v203, v164, v165);
              v166 = v204;
              v167 = v205;
              sub_1004BB5A4(&v203, v204);
              v168 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v167 + 88))(v166, v167);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);

              if (!v168)
              {
                v73 = v214;
                v74 = v215;
                sub_1004CB9AC((uint64_t)v213, v214);
                v75 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v74 + 104);
                v76 = v188;
                goto LABEL_63;
              }
            }
          }
        }
        v174 = v214;
        v175 = v215;
        sub_1004BB5A4(v213, v214);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v175 + 88))(&v203, v174, v175);
        v176 = v204;
        v177 = v205;
        sub_1004BB5A4(&v203, v204);
        v178 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v177 + 160))(v176, v177);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v203);
        if (v178 == 2)
        {
          v179 = v214;
          v180 = v215;
          sub_1004CB9AC((uint64_t)v213, v214);
          v181 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v180 + 104))(&v203, v179, v180);
          v183 = *(_QWORD *)(v182 + 24);
          v184 = *(_QWORD *)(v182 + 32);
          sub_1004CB9AC(v182, v183);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v184 + 168))(1, v183, v184);
          v181(&v203, 0);
        }

        v2 = v191;
        v0 = v192;
        v4 = v195;
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v210);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
        sub_1004E90B0((uint64_t)v213, (uint64_t)&v207);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = sub_100D14F8C(v4);
        if (v5 >= v4[2])
          goto LABEL_75;
LABEL_69:
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v4[5 * v5 + 4]);
        sub_1004DB728(&v207, (uint64_t)&v4[5 * v5 + 4]);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v213);
        goto LABEL_4;
      }

      sub_1004CB800((uint64_t)&v203, &qword_1013EA650);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
      v4 = v195;
    }
    else
    {
      swift_release(v203);

    }
    sub_1004E90B0((uint64_t)v213, (uint64_t)&v207);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v2 = v191;
    v0 = v192;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v4 = sub_100D14F8C(v4);
    if (v5 >= v4[2])
      goto LABEL_73;
    goto LABEL_69;
  }
  return v4;
}

_QWORD *sub_100D092AC(uint64_t a1, uint64_t (*a2)(uint64_t, double), double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(__int128 *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(__int128 *, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(__int128 *, _QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(__int128 *, uint64_t, uint64_t);
  CAMediaTimingFillMode v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(__int128 *, _QWORD);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(__int128 *, _QWORD);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(__int128 *, _QWORD);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(__int128 *, _QWORD);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(__int128 *, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(__int128 *, _QWORD);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  NSString *v173;
  void (*v174)(__int128 *, _QWORD);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(__int128 *, _QWORD);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v190;
  CAMediaTimingFillMode v191;
  CAMediaTimingFillMode v192;
  CAMediaTimingFillMode v193;
  CAMediaTimingFillMode v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD v201[3];
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD v217[3];
  uint64_t v218;
  uint64_t v219;

  v6 = type metadata accessor for CRLTweenLayerAnimation(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v190 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)a2(a1, a3);
  v200 = v9[2];
  if (v200)
  {
    v10 = 0;
    v198 = 0;
    v192 = kCAFillModeRemoved;
    v191 = kCAFillModeForwards;
    v194 = kCAFillModeBackwards;
    v193 = kCAFillModeBoth;
    v195 = v8;
    v196 = v6;
    while (1)
    {
      if (v10 >= v9[2])
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        swift_release(v207);
        __break(1u);
        JUMPOUT(0x100D0AA58);
      }
      v11 = (uint64_t)(v9 + 4);
      sub_1004E90B0((uint64_t)&v9[5 * v10 + 4], (uint64_t)&v211);
      v12 = sub_1004B804C(&qword_1013E8700);
      if (!swift_dynamicCast(v8, &v211, v12, v6, 6))
        break;
      sub_100D184A8((uint64_t)v8);
LABEL_4:
      if (++v10 == v200)
        return v9;
    }
    if (v10 >= v9[2])
      goto LABEL_72;
    sub_1004E90B0((uint64_t)&v9[5 * v10 + 4], (uint64_t)v217);
    v14 = v218;
    v13 = v219;
    v15 = sub_1004BB5A4(v217, v218);
    v16 = *(_QWORD *)(v14 - 8);
    __chkstk_darwin(v15);
    v18 = (char *)&v190 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v16 + 16))(v18);
    v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 64))(v14, v13);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
    if (!v19)
    {
      sub_1004E90B0((uint64_t)v217, (uint64_t)&v211);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_100D14F8C(v9);
      v8 = v195;
      v6 = v196;
      if (v10 >= v9[2])
        goto LABEL_74;
      goto LABEL_69;
    }
    v197 = v10;
    v20 = v9;
    v21 = v218;
    v22 = v219;
    sub_1004BB5A4(v217, v218);
    v23 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))(v22 + 88);
    v24 = swift_bridgeObjectRetain(v20);
    v23(&v214, v21, v22, v24);
    v25 = v215;
    v26 = v216;
    sub_1004BB5A4(&v214, v215);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v26 + 56))(&v211, v25, v26);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v214);
    sub_1008A51D4();
    sub_1004EA730(&v211);
    v210 = _swiftEmptyArrayStorage;
    v27 = v20[2];
    v199 = v20;
    swift_bridgeObjectRetain(v20);
    for (i = v19; v27; --v27)
    {
      sub_1004E90B0(v11, (uint64_t)&v207);
      v30 = v208;
      v29 = v209;
      sub_1004BB5A4(&v207, v208);
      v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 64))(v30, v29);
      if (v31)
      {
        v32 = (void *)v31;
        sub_1004EB280();
        v33 = i;
        v34 = static NSObject.== infix(_:_:)(v32, v33);

        sub_1004E90B0((uint64_t)&v207, (uint64_t)&v204);
        if ((v34 & 1) != 0)
        {
          v35 = v205;
          v36 = v206;
          sub_1004BB5A4(&v204, v205);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v36 + 88))(v201, v35, v36);
          v37 = v202;
          v38 = v203;
          sub_1004BB5A4(v201, v202);
          v39 = (char *)&loc_100D09624
              + *((int *)qword_100D0AA58 + (*(unsigned __int8 (**)(uint64_t, uint64_t))(v38 + 80))(v37, v38));
          __asm { BR              X9 }
        }
      }
      else
      {
        sub_1004E90B0((uint64_t)&v207, (uint64_t)&v204);
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v204);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
      v11 += 40;
    }
    v9 = v199;
    swift_bridgeObjectRelease(v199);

    v40 = v210;
    *(_QWORD *)&v207 = v210;
    swift_retain(v210);
    v41 = v198;
    sub_100D151BC(&v207);
    if (v41)
      goto LABEL_76;
    swift_bridgeObjectRelease(v9);
    swift_release(v40);
    v42 = v207;
    v43 = *(_QWORD *)(v207 + 16);
    v10 = v197;
    v198 = 0;
    if (v43)
    {
      sub_1004E90B0(v207 + 32, (uint64_t)&v207);
      swift_bridgeObjectRetain(v42);
      v44 = v43 - 1;
      if (v43 != 1)
      {
        v81 = v42 + 72;
        do
        {
          sub_1004E90B0(v81, (uint64_t)&v204);
          v83 = v205;
          v82 = v206;
          sub_1004BB5A4(&v204, v205);
          v84 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v82 + 24) + 8) + 8))(v83);
          v86 = v208;
          v85 = v209;
          sub_1004BB5A4(&v207, v208);
          if (v84 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v85 + 24) + 8) + 8))(v86))
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v204);
          }
          else
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
            sub_1004DB728(&v204, (uint64_t)&v207);
          }
          v81 += 40;
          --v44;
        }
        while (v44);
      }
      swift_release(v42);
      sub_1004DB728(&v207, (uint64_t)&v214);
      sub_1004DB728(&v214, (uint64_t)&v211);
      sub_100720998(v42, (uint64_t)&v207);
      swift_release(v42);
      if (v208)
      {
        sub_1004DB728(&v207, (uint64_t)&v214);
        sub_1004E90B0((uint64_t)v217, (uint64_t)&v207);
        v45 = v208;
        v46 = v209;
        sub_1004BB5A4(&v207, v208);
        v47 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v46 + 128))(&v211, v45, v46);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
        if ((v47 & 1) != 0
          && (v48 = v212,
              v49 = v213,
              sub_1004BB5A4(&v211, v212),
              ((*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v49 + 128))(&v214, v48, v49) & 1) != 0))
        {
          v50 = v218;
          v51 = v219;
          sub_1004BB5A4(v217, v218);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 88))(&v207, v50, v51);
          v52 = v208;
          v53 = v209;
          sub_1004BB5A4(&v207, v208);
          v54 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v53 + 112))(v52, v53);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
          if (v54 == 2)
          {
            v55 = v218;
            v56 = v219;
            sub_1004CB9AC((uint64_t)v217, v218);
            v57 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v56 + 104))(&v207, v55, v56);
            v59 = *(_QWORD *)(v58 + 24);
            v60 = *(_QWORD *)(v58 + 32);
            sub_1004CB9AC(v58, v59);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 120))(1, v59, v60);
            v57(&v207, 0);
          }
          v61 = v218;
          v62 = v219;
          sub_1004BB5A4(v217, v218);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v62 + 88))(&v207, v61, v62);
          v63 = v208;
          v64 = v209;
          sub_1004BB5A4(&v207, v208);
          v65 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v64 + 136))(v63, v64);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
          if (v65 == 2)
          {
            v66 = v218;
            v67 = v219;
            sub_1004CB9AC((uint64_t)v217, v218);
            v68 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v67 + 104))(&v207, v66, v67);
            v70 = *(_QWORD *)(v69 + 24);
            v71 = *(_QWORD *)(v69 + 32);
            sub_1004CB9AC(v69, v70);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 144))(1, v70, v71);
            v68(&v207, 0);
          }
          v72 = v218;
          v73 = v219;
          sub_1004BB5A4(v217, v218);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v73 + 88))(&v207, v72, v73);
          v74 = v208;
          v75 = v209;
          sub_1004BB5A4(&v207, v208);
          v76 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v75 + 88))(v74, v75);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);

          if (!v76)
          {
            v77 = v218;
            v78 = v219;
            sub_1004CB9AC((uint64_t)v217, v218);
            v79 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v78 + 104);
            v80 = v193;
LABEL_63:
            v173 = v80;
            v174 = (void (*)(__int128 *, _QWORD))v79(&v207, v77, v78);
            v176 = *(_QWORD *)(v175 + 24);
            v177 = *(_QWORD *)(v175 + 32);
            sub_1004CB9AC(v175, v176);
            (*(void (**)(CAMediaTimingFillMode, uint64_t, uint64_t))(v177 + 96))(v80, v176, v177);
            v174(&v207, 0);
          }
        }
        else
        {
          sub_1004E90B0((uint64_t)v217, (uint64_t)&v207);
          v87 = v208;
          v88 = v209;
          sub_1004BB5A4(&v207, v208);
          v89 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v88 + 128))(&v211, v87, v88);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
          if ((v89 & 1) != 0)
          {
            v90 = v218;
            v91 = v219;
            sub_1004BB5A4(v217, v218);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v91 + 88))(&v207, v90, v91);
            v92 = v208;
            v93 = v209;
            sub_1004BB5A4(&v207, v208);
            v94 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v93 + 112))(v92, v93);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
            if (v94 == 2)
            {
              v95 = v218;
              v96 = v219;
              sub_1004CB9AC((uint64_t)v217, v218);
              v97 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v96 + 104))(&v207, v95, v96);
              v99 = *(_QWORD *)(v98 + 24);
              v100 = *(_QWORD *)(v98 + 32);
              sub_1004CB9AC(v98, v99);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 120))(1, v99, v100);
              v97(&v207, 0);
            }
            v101 = v218;
            v102 = v219;
            sub_1004BB5A4(v217, v218);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v102 + 88))(&v207, v101, v102);
            v103 = v208;
            v104 = v209;
            sub_1004BB5A4(&v207, v208);
            v105 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v104 + 136))(v103, v104);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
            if (v105 == 2)
            {
              v106 = v218;
              v107 = v219;
              sub_1004CB9AC((uint64_t)v217, v218);
              v108 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v107 + 104))(&v207, v106, v107);
              v110 = *(_QWORD *)(v109 + 24);
              v111 = *(_QWORD *)(v109 + 32);
              sub_1004CB9AC(v109, v110);
              (*(void (**)(_QWORD, uint64_t, uint64_t))(v111 + 144))(0, v110, v111);
              v108(&v207, 0);
            }
            v112 = v218;
            v113 = v219;
            sub_1004BB5A4(v217, v218);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v113 + 88))(&v207, v112, v113);
            v114 = v208;
            v115 = v209;
            sub_1004BB5A4(&v207, v208);
            v116 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v115 + 88))(v114, v115);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);

            if (!v116)
            {
              v77 = v218;
              v78 = v219;
              sub_1004CB9AC((uint64_t)v217, v218);
              v79 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v78 + 104);
              v80 = v194;
              goto LABEL_63;
            }
          }
          else
          {
            sub_1004E90B0((uint64_t)v217, (uint64_t)&v207);
            v118 = v208;
            v119 = v209;
            sub_1004BB5A4(&v207, v208);
            v120 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v119 + 128))(&v214, v118, v119);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
            v121 = v218;
            v122 = v219;
            sub_1004BB5A4(v217, v218);
            if ((v120 & 1) != 0)
            {
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v122 + 88))(&v207, v121, v122);
              v123 = v208;
              v124 = v209;
              sub_1004BB5A4(&v207, v208);
              v125 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v124 + 112))(v123, v124);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
              if (v125 == 2)
              {
                v126 = v218;
                v127 = v219;
                sub_1004CB9AC((uint64_t)v217, v218);
                v128 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v127 + 104))(&v207, v126, v127);
                v130 = *(_QWORD *)(v129 + 24);
                v131 = *(_QWORD *)(v129 + 32);
                sub_1004CB9AC(v129, v130);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v131 + 120))(0, v130, v131);
                v128(&v207, 0);
              }
              v132 = v218;
              v133 = v219;
              sub_1004BB5A4(v217, v218);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v133 + 88))(&v207, v132, v133);
              v134 = v208;
              v135 = v209;
              sub_1004BB5A4(&v207, v208);
              v136 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v135 + 136))(v134, v135);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
              if (v136 == 2)
              {
                v137 = v218;
                v138 = v219;
                sub_1004CB9AC((uint64_t)v217, v218);
                v139 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v138 + 104))(&v207, v137, v138);
                v141 = *(_QWORD *)(v140 + 24);
                v142 = *(_QWORD *)(v140 + 32);
                sub_1004CB9AC(v140, v141);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v142 + 144))(1, v141, v142);
                v139(&v207, 0);
              }
              v143 = v218;
              v144 = v219;
              sub_1004BB5A4(v217, v218);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v144 + 88))(&v207, v143, v144);
              v145 = v208;
              v146 = v209;
              sub_1004BB5A4(&v207, v208);
              v147 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v146 + 88))(v145, v146);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);

              if (!v147)
              {
                v77 = v218;
                v78 = v219;
                sub_1004CB9AC((uint64_t)v217, v218);
                v79 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v78 + 104);
                v80 = v191;
                goto LABEL_63;
              }
            }
            else
            {
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v122 + 88))(&v207, v121, v122);
              v148 = v208;
              v149 = v209;
              sub_1004BB5A4(&v207, v208);
              v150 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v149 + 112))(v148, v149);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
              if (v150 == 2)
              {
                v151 = v218;
                v152 = v219;
                sub_1004CB9AC((uint64_t)v217, v218);
                v153 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v152 + 104))(&v207, v151, v152);
                v155 = *(_QWORD *)(v154 + 24);
                v156 = *(_QWORD *)(v154 + 32);
                sub_1004CB9AC(v154, v155);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v156 + 120))(0, v155, v156);
                v153(&v207, 0);
              }
              v157 = v218;
              v158 = v219;
              sub_1004BB5A4(v217, v218);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v158 + 88))(&v207, v157, v158);
              v159 = v208;
              v160 = v209;
              sub_1004BB5A4(&v207, v208);
              v161 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v160 + 136))(v159, v160);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
              if (v161 == 2)
              {
                v162 = v218;
                v163 = v219;
                sub_1004CB9AC((uint64_t)v217, v218);
                v164 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v163 + 104))(&v207, v162, v163);
                v166 = *(_QWORD *)(v165 + 24);
                v167 = *(_QWORD *)(v165 + 32);
                sub_1004CB9AC(v165, v166);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v167 + 144))(0, v166, v167);
                v164(&v207, 0);
              }
              v168 = v218;
              v169 = v219;
              sub_1004BB5A4(v217, v218);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v169 + 88))(&v207, v168, v169);
              v170 = v208;
              v171 = v209;
              sub_1004BB5A4(&v207, v208);
              v172 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v171 + 88))(v170, v171);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);

              if (!v172)
              {
                v77 = v218;
                v78 = v219;
                sub_1004CB9AC((uint64_t)v217, v218);
                v79 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v78 + 104);
                v80 = v192;
                goto LABEL_63;
              }
            }
          }
        }
        v178 = v218;
        v179 = v219;
        sub_1004BB5A4(v217, v218);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v179 + 88))(&v207, v178, v179);
        v180 = v208;
        v181 = v209;
        sub_1004BB5A4(&v207, v208);
        v182 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v181 + 160))(v180, v181);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v207);
        if (v182 == 2)
        {
          v183 = v218;
          v184 = v219;
          sub_1004CB9AC((uint64_t)v217, v218);
          v185 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v184 + 104))(&v207, v183, v184);
          v187 = *(_QWORD *)(v186 + 24);
          v188 = *(_QWORD *)(v186 + 32);
          sub_1004CB9AC(v186, v187);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v188 + 168))(1, v187, v188);
          v185(&v207, 0);
        }

        v8 = v195;
        v6 = v196;
        v9 = v199;
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v214);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v211);
        sub_1004E90B0((uint64_t)v217, (uint64_t)&v211);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = sub_100D14F8C(v9);
        if (v10 >= v9[2])
          goto LABEL_75;
LABEL_69:
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v9[5 * v10 + 4]);
        sub_1004DB728(&v211, (uint64_t)&v9[5 * v10 + 4]);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v217);
        goto LABEL_4;
      }

      sub_1004CB800((uint64_t)&v207, &qword_1013EA650);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v211);
      v9 = v199;
    }
    else
    {
      swift_release(v207);

    }
    sub_1004E90B0((uint64_t)v217, (uint64_t)&v211);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    v8 = v195;
    v6 = v196;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v9 = sub_100D14F8C(v9);
    if (v10 >= v9[2])
      goto LABEL_73;
    goto LABEL_69;
  }
  return v9;
}

_QWORD *sub_100D0AB40(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _UNKNOWN **v19;
  ValueMetadata *v20;
  _QWORD *v21;
  void (**Description)(char *, __n128);
  __n128 v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  ValueMetadata *v29;
  _UNKNOWN **v30;
  void (*v31)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  ValueMetadata *v56;
  _UNKNOWN **v57;
  ValueMetadata *v58;
  _UNKNOWN **v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  ValueMetadata *v63;
  _UNKNOWN **v64;
  void (*v65)(__int128 *, _QWORD);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  ValueMetadata *v69;
  _UNKNOWN **v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  ValueMetadata *v74;
  _UNKNOWN **v75;
  void (*v76)(__int128 *, _QWORD);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  ValueMetadata *v80;
  _UNKNOWN **v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  ValueMetadata *v85;
  _UNKNOWN **v86;
  uint64_t (*v87)(__int128 *, ValueMetadata *, _UNKNOWN **);
  CAMediaTimingFillMode v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  ValueMetadata *v98;
  _UNKNOWN **v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  ValueMetadata *v103;
  _UNKNOWN **v104;
  void (*v105)(__int128 *, _QWORD);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  ValueMetadata *v109;
  _UNKNOWN **v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  ValueMetadata *v114;
  _UNKNOWN **v115;
  void (*v116)(__int128 *, _QWORD);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  ValueMetadata *v120;
  _UNKNOWN **v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v126;
  uint64_t v127;
  char v128;
  ValueMetadata *v129;
  _UNKNOWN **v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  ValueMetadata *v134;
  _UNKNOWN **v135;
  void (*v136)(__int128 *, _QWORD);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  ValueMetadata *v140;
  _UNKNOWN **v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  ValueMetadata *v145;
  _UNKNOWN **v146;
  void (*v147)(__int128 *, _QWORD);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  ValueMetadata *v151;
  _UNKNOWN **v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  ValueMetadata *v159;
  _UNKNOWN **v160;
  void (*v161)(__int128 *, _QWORD);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  ValueMetadata *v165;
  _UNKNOWN **v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  ValueMetadata *v170;
  _UNKNOWN **v171;
  void (*v172)(__int128 *, _QWORD);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  ValueMetadata *v176;
  _UNKNOWN **v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  NSString *v181;
  void (*v182)(__int128 *, _QWORD);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  ValueMetadata *v186;
  _UNKNOWN **v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  ValueMetadata *v191;
  _UNKNOWN **v192;
  void (*v193)(__int128 *, _QWORD);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  CAMediaTimingFillMode v198;
  CAMediaTimingFillMode v199;
  CAMediaTimingFillMode v200;
  CAMediaTimingFillMode v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  _QWORD v207[3];
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  double *v216;
  __int128 v217;
  ValueMetadata *v218;
  _UNKNOWN **v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD v223[3];
  ValueMetadata *v224;
  _UNKNOWN **v225;

  v4 = type metadata accessor for CRLTweenLayerAnimation(0);
  __chkstk_darwin(v4);
  v203 = (char *)&v198 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = &type metadata for CRLLayerAnimationFlatGroup;
  v219 = &off_10128D670;
  *(_QWORD *)&v217 = a1;
  *((double *)&v217 + 1) = a2;
  v6 = sub_1004BB5A4(&v217, (uint64_t)&type metadata for CRLLayerAnimationFlatGroup);
  v224 = &type metadata for CRLLayerAnimationFlatGroup;
  v225 = &off_10128D670;
  v7 = sub_10050D1B0(v223);
  v8 = *v6;
  v9 = *((double *)v6 + 1);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1009A3760(v8);
  swift_bridgeObjectRetain(v8);
  v11 = sub_100756F5C((uint64_t)v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v7 = v11;
  v7[1] = 0;
  sub_1009A3BB4();
  v13 = v12;
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v217);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v223);
  v14 = v13[2];
  if (v14)
  {
    v15 = 0;
    v199 = kCAFillModeRemoved;
    v198 = kCAFillModeForwards;
    v201 = kCAFillModeBackwards;
    v200 = kCAFillModeBoth;
    v16 = (uint64_t)v203;
    v202 = v4;
    while (1)
    {
      if (v15 >= v13[2])
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        swift_release(v213);
        __break(1u);
        JUMPOUT(0x100D0C37CLL);
      }
      v17 = (uint64_t)(v13 + 4);
      sub_1004E90B0((uint64_t)&v13[5 * v15 + 4], (uint64_t)&v217);
      v18 = sub_1004B804C(&qword_1013E8700);
      if (!swift_dynamicCast(v16, &v217, v18, v4, 6))
        break;
      sub_100D184A8(v16);
LABEL_4:
      if (++v15 == v14)
        return v13;
    }
    if (v15 >= v13[2])
      goto LABEL_73;
    v206 = v15;
    sub_1004E90B0((uint64_t)&v13[5 * v15 + 4], (uint64_t)v223);
    v20 = v224;
    v19 = v225;
    v21 = sub_1004BB5A4(v223, (uint64_t)v224);
    Description = (void (**)(char *, __n128))v20[-1].Description;
    v23 = __chkstk_darwin(v21);
    v25 = (char *)&v198 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    Description[2](v25, v23);
    v26 = (void *)((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v19[8])(v20, v19);
    ((void (*)(char *, ValueMetadata *))Description[1])(v25, v20);
    if (!v26)
    {
      sub_1004E90B0((uint64_t)v223, (uint64_t)&v217);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_100D14F8C(v13);
      v4 = v202;
      v16 = (uint64_t)v203;
      v15 = v206;
      if (v206 >= v13[2])
        goto LABEL_75;
      goto LABEL_70;
    }
    v204 = 0;
    v27 = v14;
    v28 = v13;
    v29 = v224;
    v30 = v225;
    sub_1004BB5A4(v223, (uint64_t)v224);
    v31 = (void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **, __n128))v30[11];
    v32 = swift_bridgeObjectRetain(v28);
    v31(&v220, v29, v30, v32);
    v33 = v221;
    v34 = v222;
    sub_1004BB5A4(&v220, v221);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v34 + 56))(&v217, v33, v34);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v220);
    sub_1008A51D4();
    sub_1004EA730(&v217);
    v216 = _swiftEmptyArrayStorage;
    v35 = v28[2];
    v205 = v28;
    swift_bridgeObjectRetain(v28);
    v36 = v26;
    v14 = v27;
    if (v35)
    {
      v37 = v204;
      do
      {
        sub_1004E90B0(v17, (uint64_t)&v213);
        v39 = v214;
        v38 = v215;
        sub_1004BB5A4(&v213, v214);
        v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 64))(v39, v38);
        if (v40)
        {
          v41 = (void *)v40;
          sub_1004EB280();
          v42 = v36;
          v43 = static NSObject.== infix(_:_:)(v41, v42);

          sub_1004E90B0((uint64_t)&v213, (uint64_t)&v210);
          if ((v43 & 1) != 0)
          {
            v44 = v211;
            v45 = v212;
            sub_1004BB5A4(&v210, v211);
            (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v45 + 88))(v207, v44, v45);
            v46 = v208;
            v47 = v209;
            sub_1004BB5A4(v207, v208);
            v48 = (char *)&loc_100D0AF60
                + dword_100D0C37C[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v47 + 80))(v46, v47)];
            __asm { BR              X9 }
          }
        }
        else
        {
          sub_1004E90B0((uint64_t)&v213, (uint64_t)&v210);
        }
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v210);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
        v17 += 40;
        --v35;
      }
      while (v35);
    }
    else
    {
      v37 = v204;
    }
    v13 = v205;
    swift_bridgeObjectRelease();

    v49 = v216;
    *(_QWORD *)&v213 = v216;
    swift_retain(v216);
    sub_100D151BC(&v213);
    if (v37)
      goto LABEL_77;
    swift_bridgeObjectRelease();
    swift_release(v49);
    v50 = v213;
    v51 = *(_QWORD *)(v213 + 16);
    if (v51)
    {
      sub_1004E90B0(v213 + 32, (uint64_t)&v213);
      swift_bridgeObjectRetain(v50);
      v52 = v51 - 1;
      if (v51 != 1)
      {
        v89 = v50 + 72;
        do
        {
          sub_1004E90B0(v89, (uint64_t)&v210);
          v91 = v211;
          v90 = v212;
          sub_1004BB5A4(&v210, v211);
          v92 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 24) + 8) + 8))(v91);
          v94 = v214;
          v93 = v215;
          sub_1004BB5A4(&v213, v214);
          if (v92 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v93 + 24) + 8) + 8))(v94))
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v210);
          }
          else
          {
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
            sub_1004DB728(&v210, (uint64_t)&v213);
          }
          v89 += 40;
          --v52;
        }
        while (v52);
      }
      swift_release(v50);
      sub_1004DB728(&v213, (uint64_t)&v220);
      sub_1004DB728(&v220, (uint64_t)&v217);
      sub_100720998(v50, (uint64_t)&v213);
      swift_release(v50);
      if (v214)
      {
        sub_1004DB728(&v213, (uint64_t)&v220);
        sub_1004E90B0((uint64_t)v223, (uint64_t)&v213);
        v53 = v214;
        v54 = v215;
        sub_1004BB5A4(&v213, v214);
        v55 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v54 + 128))(&v217, v53, v54);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
        if ((v55 & 1) != 0
          && (v56 = v218,
              v57 = v219,
              sub_1004BB5A4(&v217, (uint64_t)v218),
              (((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v57[16])(&v220, v56, v57) & 1) != 0))
        {
          v58 = v224;
          v59 = v225;
          sub_1004BB5A4(v223, (uint64_t)v224);
          ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v59[11])(&v213, v58, v59);
          v60 = v214;
          v61 = v215;
          sub_1004BB5A4(&v213, v214);
          v62 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v61 + 112))(v60, v61);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
          if (v62 == 2)
          {
            v63 = v224;
            v64 = v225;
            sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
            v65 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v64[13])(&v213, v63, v64);
            v67 = *(_QWORD *)(v66 + 24);
            v68 = *(_QWORD *)(v66 + 32);
            sub_1004CB9AC(v66, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 120))(1, v67, v68);
            v65(&v213, 0);
          }
          v69 = v224;
          v70 = v225;
          sub_1004BB5A4(v223, (uint64_t)v224);
          ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v70[11])(&v213, v69, v70);
          v71 = v214;
          v72 = v215;
          sub_1004BB5A4(&v213, v214);
          v73 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v72 + 136))(v71, v72);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
          if (v73 == 2)
          {
            v74 = v224;
            v75 = v225;
            sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
            v76 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v75[13])(&v213, v74, v75);
            v78 = *(_QWORD *)(v77 + 24);
            v79 = *(_QWORD *)(v77 + 32);
            sub_1004CB9AC(v77, v78);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 144))(1, v78, v79);
            v76(&v213, 0);
          }
          v80 = v224;
          v81 = v225;
          sub_1004BB5A4(v223, (uint64_t)v224);
          ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v81[11])(&v213, v80, v81);
          v82 = v214;
          v83 = v215;
          sub_1004BB5A4(&v213, v214);
          v84 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v83 + 88))(v82, v83);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);

          if (!v84)
          {
            v85 = v224;
            v86 = v225;
            sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
            v87 = (uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v86[13];
            v88 = v200;
LABEL_64:
            v181 = v88;
            v182 = (void (*)(__int128 *, _QWORD))v87(&v213, v85, v86);
            v184 = *(_QWORD *)(v183 + 24);
            v185 = *(_QWORD *)(v183 + 32);
            sub_1004CB9AC(v183, v184);
            (*(void (**)(CAMediaTimingFillMode, uint64_t, uint64_t))(v185 + 96))(v88, v184, v185);
            v182(&v213, 0);
          }
        }
        else
        {
          sub_1004E90B0((uint64_t)v223, (uint64_t)&v213);
          v95 = v214;
          v96 = v215;
          sub_1004BB5A4(&v213, v214);
          v97 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v96 + 128))(&v217, v95, v96);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
          if ((v97 & 1) != 0)
          {
            v98 = v224;
            v99 = v225;
            sub_1004BB5A4(v223, (uint64_t)v224);
            ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v99[11])(&v213, v98, v99);
            v100 = v214;
            v101 = v215;
            sub_1004BB5A4(&v213, v214);
            v102 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v101 + 112))(v100, v101);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
            if (v102 == 2)
            {
              v103 = v224;
              v104 = v225;
              sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
              v105 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v104[13])(&v213, v103, v104);
              v107 = *(_QWORD *)(v106 + 24);
              v108 = *(_QWORD *)(v106 + 32);
              sub_1004CB9AC(v106, v107);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 120))(1, v107, v108);
              v105(&v213, 0);
            }
            v109 = v224;
            v110 = v225;
            sub_1004BB5A4(v223, (uint64_t)v224);
            ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v110[11])(&v213, v109, v110);
            v111 = v214;
            v112 = v215;
            sub_1004BB5A4(&v213, v214);
            v113 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v112 + 136))(v111, v112);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
            if (v113 == 2)
            {
              v114 = v224;
              v115 = v225;
              sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
              v116 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v115[13])(&v213, v114, v115);
              v118 = *(_QWORD *)(v117 + 24);
              v119 = *(_QWORD *)(v117 + 32);
              sub_1004CB9AC(v117, v118);
              (*(void (**)(_QWORD, uint64_t, uint64_t))(v119 + 144))(0, v118, v119);
              v116(&v213, 0);
            }
            v120 = v224;
            v121 = v225;
            sub_1004BB5A4(v223, (uint64_t)v224);
            ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v121[11])(&v213, v120, v121);
            v122 = v214;
            v123 = v215;
            sub_1004BB5A4(&v213, v214);
            v124 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v123 + 88))(v122, v123);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);

            if (!v124)
            {
              v85 = v224;
              v86 = v225;
              sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
              v87 = (uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v86[13];
              v88 = v201;
              goto LABEL_64;
            }
          }
          else
          {
            sub_1004E90B0((uint64_t)v223, (uint64_t)&v213);
            v126 = v214;
            v127 = v215;
            sub_1004BB5A4(&v213, v214);
            v128 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v127 + 128))(&v220, v126, v127);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
            v129 = v224;
            v130 = v225;
            sub_1004BB5A4(v223, (uint64_t)v224);
            if ((v128 & 1) != 0)
            {
              ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v130[11])(&v213, v129, v130);
              v131 = v214;
              v132 = v215;
              sub_1004BB5A4(&v213, v214);
              v133 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v132 + 112))(v131, v132);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
              if (v133 == 2)
              {
                v134 = v224;
                v135 = v225;
                sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
                v136 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v135[13])(&v213, v134, v135);
                v138 = *(_QWORD *)(v137 + 24);
                v139 = *(_QWORD *)(v137 + 32);
                sub_1004CB9AC(v137, v138);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v139 + 120))(0, v138, v139);
                v136(&v213, 0);
              }
              v140 = v224;
              v141 = v225;
              sub_1004BB5A4(v223, (uint64_t)v224);
              ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v141[11])(&v213, v140, v141);
              v142 = v214;
              v143 = v215;
              sub_1004BB5A4(&v213, v214);
              v144 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v143 + 136))(v142, v143);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
              if (v144 == 2)
              {
                v145 = v224;
                v146 = v225;
                sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
                v147 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v146[13])(&v213, v145, v146);
                v149 = *(_QWORD *)(v148 + 24);
                v150 = *(_QWORD *)(v148 + 32);
                sub_1004CB9AC(v148, v149);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v150 + 144))(1, v149, v150);
                v147(&v213, 0);
              }
              v151 = v224;
              v152 = v225;
              sub_1004BB5A4(v223, (uint64_t)v224);
              ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v152[11])(&v213, v151, v152);
              v153 = v214;
              v154 = v215;
              sub_1004BB5A4(&v213, v214);
              v155 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v154 + 88))(v153, v154);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);

              if (!v155)
              {
                v85 = v224;
                v86 = v225;
                sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
                v87 = (uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v86[13];
                v88 = v198;
                goto LABEL_64;
              }
            }
            else
            {
              ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v130[11])(&v213, v129, v130);
              v156 = v214;
              v157 = v215;
              sub_1004BB5A4(&v213, v214);
              v158 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v157 + 112))(v156, v157);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
              if (v158 == 2)
              {
                v159 = v224;
                v160 = v225;
                sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
                v161 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v160[13])(&v213, v159, v160);
                v163 = *(_QWORD *)(v162 + 24);
                v164 = *(_QWORD *)(v162 + 32);
                sub_1004CB9AC(v162, v163);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v164 + 120))(0, v163, v164);
                v161(&v213, 0);
              }
              v165 = v224;
              v166 = v225;
              sub_1004BB5A4(v223, (uint64_t)v224);
              ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v166[11])(&v213, v165, v166);
              v167 = v214;
              v168 = v215;
              sub_1004BB5A4(&v213, v214);
              v169 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v168 + 136))(v167, v168);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
              if (v169 == 2)
              {
                v170 = v224;
                v171 = v225;
                sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
                v172 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v171[13])(&v213, v170, v171);
                v174 = *(_QWORD *)(v173 + 24);
                v175 = *(_QWORD *)(v173 + 32);
                sub_1004CB9AC(v173, v174);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v175 + 144))(0, v174, v175);
                v172(&v213, 0);
              }
              v176 = v224;
              v177 = v225;
              sub_1004BB5A4(v223, (uint64_t)v224);
              ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v177[11])(&v213, v176, v177);
              v178 = v214;
              v179 = v215;
              sub_1004BB5A4(&v213, v214);
              v180 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v179 + 88))(v178, v179);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);

              if (!v180)
              {
                v85 = v224;
                v86 = v225;
                sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
                v87 = (uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v86[13];
                v88 = v199;
                goto LABEL_64;
              }
            }
          }
        }
        v186 = v224;
        v187 = v225;
        sub_1004BB5A4(v223, (uint64_t)v224);
        ((void (*)(__int128 *__return_ptr, ValueMetadata *, _UNKNOWN **))v187[11])(&v213, v186, v187);
        v188 = v214;
        v189 = v215;
        sub_1004BB5A4(&v213, v214);
        v190 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v189 + 160))(v188, v189);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v213);
        if (v190 == 2)
        {
          v191 = v224;
          v192 = v225;
          sub_1004CB9AC((uint64_t)v223, (uint64_t)v224);
          v193 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, ValueMetadata *, _UNKNOWN **))v192[13])(&v213, v191, v192);
          v195 = *(_QWORD *)(v194 + 24);
          v196 = *(_QWORD *)(v194 + 32);
          sub_1004CB9AC(v194, v195);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 168))(1, v195, v196);
          v193(&v213, 0);
        }

        v4 = v202;
        v16 = (uint64_t)v203;
        v13 = v205;
        v15 = v206;
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v220);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v217);
        sub_1004E90B0((uint64_t)v223, (uint64_t)&v217);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_100D14F8C(v13);
        if (v15 >= v13[2])
          goto LABEL_76;
LABEL_70:
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v13[5 * v15 + 4]);
        sub_1004DB728(&v217, (uint64_t)&v13[5 * v15 + 4]);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v223);
        goto LABEL_4;
      }

      sub_1004CB800((uint64_t)&v213, &qword_1013EA650);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v217);
      v13 = v205;
    }
    else
    {
      swift_release(v213);

    }
    sub_1004E90B0((uint64_t)v223, (uint64_t)&v217);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4 = v202;
    v16 = (uint64_t)v203;
    v15 = v206;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v13 = sub_100D14F8C(v13);
    if (v15 >= v13[2])
      goto LABEL_74;
    goto LABEL_70;
  }
  return v13;
}

double sub_100D0C464(uint64_t a1, uint64_t a2)
{
  return sub_100D0C470(a1, a2, type metadata accessor for CRLCanvasLayerAnimation);
}

double sub_100D0C470(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double v10;
  double v11;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v5 = sub_10050D1B0(v14);
  sub_1004B8460(v3, (uint64_t)v5, a3);
  v6 = v15;
  v7 = v16;
  v8 = sub_1004BB5A4(v14, v15);
  v13[3] = v6;
  v13[4] = v7;
  v9 = sub_10050D1B0(v13);
  sub_1004B8460((uint64_t)v8, (uint64_t)v9, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  v11 = v10;
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v14);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v13);
  return v11;
}

_QWORD *sub_100D0C530()
{
  return sub_100D04858((uint64_t (*)(_QWORD, __n128))type metadata accessor for CRLCanvasLayerAnimation, (uint64_t)&off_10126BA70);
}

double sub_100D0C554(uint64_t a1, uint64_t a2)
{
  return sub_100D0C470(a1, a2, type metadata accessor for CRLBasicLayerAnimation);
}

_QWORD *sub_100D0C560()
{
  return sub_100D04858((uint64_t (*)(_QWORD, __n128))type metadata accessor for CRLBasicLayerAnimation, (uint64_t)&off_10126D348);
}

_QWORD *sub_100D0C584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t inited;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[112];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25[3];
  _QWORD v26[6];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    v4 = _swiftEmptyArrayStorage;
    v20 = v1;
    do
    {
      sub_1004E90B0(v3, (uint64_t)v26);
      sub_1004E90B0((uint64_t)v26, (uint64_t)v25);
      v5 = sub_1004B804C(&qword_1013E20A8);
      v6 = sub_1004B804C(&qword_10140E5B0);
      if ((swift_dynamicCast(&v22, v25, v5, v6, 6) & 1) == 0)
      {
        v23 = 0u;
        v24 = 0u;
        v22 = 0u;
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v26);
      if (*((_QWORD *)&v23 + 1))
      {
        sub_1009A3E14(&v22, v25);
        sub_1009A3E14(v25, &v22);
        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
          v4 = sub_100D10318(0, v4[2] + 1, 1, v4, &qword_10140E5C0, &qword_10140E5B0);
        v8 = v4[2];
        v7 = v4[3];
        if (v8 >= v7 >> 1)
          v4 = sub_100D10318((_QWORD *)(v7 > 1), v8 + 1, 1, v4, &qword_10140E5C0, &qword_10140E5B0);
        v4[2] = v8 + 1;
        sub_1009A3E14(&v22, &v4[6 * v8 + 4]);
      }
      else
      {
        sub_1004CB800((uint64_t)&v22, &qword_10140E5B8);
      }
      v3 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease(a1);
    v1 = v20;
  }
  else
  {
    v4 = _swiftEmptyArrayStorage;
  }
  v9 = v4[2];
  v10 = v1 - v9;
  if (v1 != v9)
  {
    if (qword_1013DD808 != -1)
      swift_once(&qword_1013DD808, sub_100A04654);
    swift_beginAccess(&static OS_os_log.crlLayerAnimation, v25, 0, 0);
    v11 = (void *)static OS_os_log.crlLayerAnimation;
    v12 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v12, v21);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    *(_QWORD *)(inited + 56) = &type metadata for Int;
    *(_QWORD *)(inited + 64) = &protocol witness table for Int;
    *(_QWORD *)(inited + 32) = v10;
    v14 = sub_1004CFC2C();
    v15 = 0xEE00657265772073;
    if (v10 == 1)
      v15 = 0xEC00000073617720;
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 104) = v14;
    *(_QWORD *)(inited + 72) = 0x72656469766F7270;
    *(_QWORD *)(inited + 80) = v15;
    v16 = v11;
    v17 = static os_log_type_t.error.getter();
    sub_100A06EBC((uint64_t)v16, &_mh_execute_header, v17, "timingModifiableChildProviders was called, but not all childProviders are timing-modifiable. Non-timing-modifiable providers should only be added after the provider has been fully processed(). %@ non-timing-modifiable %@ dropped on the floor.", 242, 2, inited);
    swift_setDeallocating(inited);
    v18 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 2, v18);

  }
  return v4;
}

double sub_100D0C87C()
{
  uint64_t v0;

  return sub_100D02E1C(*(_QWORD *)v0, *(double *)(v0 + 8));
}

_QWORD *sub_100D0C888()
{
  uint64_t v0;

  return sub_100D092AC(*(_QWORD *)v0, (uint64_t (*)(uint64_t, double))sub_100D02E1C, *(double *)(v0 + 8));
}

double sub_100D0C8AC()
{
  uint64_t v0;

  return sub_100D02CC8(*(_QWORD *)(v0 + 8), *(double *)v0, *(double *)(v0 + 16));
}

_QWORD *sub_100D0C8BC()
{
  uint64_t v0;

  return sub_100D06194(*(_QWORD *)(v0 + 8), *(double *)v0, *(double *)(v0 + 16));
}

void sub_100D0C8CC(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id j;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[3];
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  double *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;

  v133 = a6;
  v134 = a7;
  v132 = a5;
  v130 = a4;
  v128 = a2;
  v127 = a1;
  v11 = sub_1004B804C(&qword_1013E01F0);
  v12 = __chkstk_darwin(v11);
  v131 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a9 + 56))(a8, a9, v12);
  sub_10074E0DC(v14, v15);
  v17 = v16;
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)&v149 = _swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRetain(v17);
  if (v18)
  {
    v19 = 0;
    v20 = v17 + 32;
    do
    {
      if (v19 >= *(_QWORD *)(v17 + 16))
      {
        __break(1u);
LABEL_60:
        __break(1u);
        swift_release(v149);
        __break(1u);
        JUMPOUT(0x100D0DB7CLL);
      }
      sub_1004E90B0(v20, (uint64_t)&v139);
      v22 = *((_QWORD *)&v140 + 1);
      v21 = v141;
      sub_1004BB5A4(&v139, *((uint64_t *)&v140 + 1));
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v21 + 16) + 8))(v22) & 1) != 0)
      {
        sub_1004DB728(&v139, (uint64_t)&v153);
        v23 = v149;
        if ((swift_isUniquelyReferenced_nonNull_native(v149) & 1) == 0)
        {
          sub_10060091C(0, *(_QWORD *)(v23 + 16) + 1, 1);
          v23 = v149;
        }
        v25 = *(_QWORD *)(v23 + 16);
        v24 = *(_QWORD *)(v23 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_10060091C(v24 > 1, v25 + 1, 1);
          v23 = v149;
        }
        *(_QWORD *)(v23 + 16) = v25 + 1;
        sub_1004DB728(&v153, v23 + 40 * v25 + 32);
      }
      else
      {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v139);
      }
      ++v19;
      v20 += 40;
    }
    while (v18 != v19);
  }
  swift_bridgeObjectRelease(v17);
  v129 = v149;
  *(_QWORD *)&v149 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v17);
  if (v18)
  {
    v138 = v18;
    v26 = v17 + 32;
    v135 = v17 + 32;
    for (i = 0; i != v138; ++i)
    {
      if (i >= *(_QWORD *)(v17 + 16))
        goto LABEL_60;
      sub_1004E90B0(v26, (uint64_t)&v139);
      v28 = *((_QWORD *)&v140 + 1);
      v29 = v141;
      sub_1004BB5A4(&v139, *((uint64_t *)&v140 + 1));
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v29 + 88))(&v153, v28, v29);
      v30 = v154;
      v31 = v155;
      sub_1004BB5A4(&v153, v154);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 184))(v30, v31);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v153);
      if ((v32 & 1) != 0)
      {
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v139);
      }
      else
      {
        sub_1004DB728(&v139, (uint64_t)&v153);
        v33 = v149;
        if ((swift_isUniquelyReferenced_nonNull_native(v149) & 1) == 0)
        {
          sub_10060091C(0, *(_QWORD *)(v33 + 16) + 1, 1);
          v33 = v149;
        }
        v35 = *(_QWORD *)(v33 + 16);
        v34 = *(_QWORD *)(v33 + 24);
        if (v35 >= v34 >> 1)
        {
          sub_10060091C(v34 > 1, v35 + 1, 1);
          v33 = v149;
        }
        *(_QWORD *)(v33 + 16) = v35 + 1;
        sub_1004DB728(&v153, v33 + 40 * v35 + 32);
      }
      v26 += 40;
    }
    swift_bridgeObjectRelease(v17);
    v36 = v149;
    if ((a3 & 1) != 0)
    {
      v126 = v149;
      swift_bridgeObjectRetain(v17);
      v37 = 0;
      v38 = v138;
      v39 = v135;
      v136 = v17;
      do
      {
        sub_1004E90B0(v39 + 40 * v37, (uint64_t)&v153);
        v56 = v154;
        v57 = v155;
        sub_1004BB5A4(&v153, v154);
        v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 64))(v56, v57);
        if (v58)
        {
          v59 = (void *)v58;
          v137 = v37;
          v60 = v154;
          v61 = v155;
          sub_1004BB5A4(&v153, v154);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v61 + 88))(&v139, v60, v61);
          v62 = *((_QWORD *)&v140 + 1);
          v63 = v141;
          sub_1004BB5A4(&v139, *((uint64_t *)&v140 + 1));
          (*(void (**)(uint64_t, uint64_t))(v63 + 80))(v62, v63);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v139);
          v152 = _swiftEmptyArrayStorage;
          v64 = v17;
          v65 = *(_QWORD *)(v17 + 16);
          swift_bridgeObjectRetain(v64);
          for (j = v59; v65; --v65)
          {
            sub_1004E90B0(v39, (uint64_t)&v149);
            v72 = *((_QWORD *)&v150 + 1);
            v71 = v151;
            sub_1004BB5A4(&v149, *((uint64_t *)&v150 + 1));
            v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 64))(v72, v71);
            if (v73)
            {
              v74 = (void *)v73;
              sub_1004EB280();
              v75 = j;
              v76 = static NSObject.== infix(_:_:)(v74, v75);

              sub_1004E90B0((uint64_t)&v149, (uint64_t)&v146);
              if ((v76 & 1) != 0)
              {
                v77 = v147;
                v78 = v148;
                sub_1004BB5A4(&v146, v147);
                (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v78 + 88))(v143, v77, v78);
                v79 = v144;
                v80 = v145;
                sub_1004BB5A4(v143, v144);
                v81 = (char *)&loc_100D0CFBC
                    + dword_100D0DB7C[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v80 + 80))(v79, v80)];
                __asm { BR              X9 }
              }
            }
            else
            {
              sub_1004E90B0((uint64_t)&v149, (uint64_t)&v146);
            }
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v146);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v149);
            v39 += 40;
          }
          v17 = v136;
          swift_bridgeObjectRelease(v136);

          v67 = v152;
          *(_QWORD *)&v149 = v152;
          swift_retain(v152);
          sub_100D151BC(&v149);
          swift_release(v67);
          v68 = v149;
          v69 = *(_QWORD *)(v149 + 16);
          if (v69)
          {
            sub_1004E90B0(v149 + 32, (uint64_t)&v149);
            swift_bridgeObjectRetain(v68);
            v70 = v69 - 1;
            if (v69 != 1)
            {
              v100 = v68 + 72;
              do
              {
                sub_1004E90B0(v100, (uint64_t)&v146);
                v102 = v147;
                v101 = v148;
                sub_1004BB5A4(&v146, v147);
                v103 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v101 + 24) + 8) + 8))(v102);
                v105 = *((_QWORD *)&v150 + 1);
                v104 = v151;
                sub_1004BB5A4(&v149, *((uint64_t *)&v150 + 1));
                if (v103 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v104 + 24) + 8) + 8))(v105))
                {
                  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v146);
                }
                else
                {
                  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v149);
                  sub_1004DB728(&v146, (uint64_t)&v149);
                }
                v100 += 40;
                --v70;
              }
              while (v70);
            }
            swift_release(v68);
            sub_1004DB728(&v149, (uint64_t)&v139);
          }
          else
          {
            v139 = 0u;
            v140 = 0u;
            v141 = 0;
          }
          swift_release(v68);
          v82 = *((_QWORD *)&v140 + 1);
          if (*((_QWORD *)&v140 + 1))
          {
            v83 = v141;
            sub_1004BB5A4(&v139, *((uint64_t *)&v140 + 1));
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v83 + 112))(&v149, v82, v83);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v139);
          }
          else
          {
            sub_1004CB800((uint64_t)&v139, &qword_1013EA650);
            v149 = 0u;
            v150 = 0u;
          }
          v84 = (void *)objc_opt_self(CATransaction);
          objc_msgSend(v84, "begin");
          objc_msgSend(v84, "setDisableActions:", 1);
          v85 = v154;
          v86 = v155;
          sub_1004BB5A4(&v153, v154);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v86 + 80))(&v139, v85, v86);
          v87 = v142;
          sub_1004CB800((uint64_t)&v139, (uint64_t *)&unk_1013F04B0);
          if (v87)
          {
            v88 = v154;
            v89 = v155;
            sub_1004BB5A4(&v153, v154);
            v90 = v154;
            v91 = v155;
            sub_1004BB5A4(&v153, v154);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v91 + 80))(&v139, v90, v91);
            v92 = (void *)(*(uint64_t (**)(__int128 *, uint64_t))(*(_QWORD *)(v89 + 8) + 16))(&v139, v88);
            sub_1004CB800((uint64_t)&v139, (uint64_t *)&unk_1013F04B0);
            sub_1004F370C((uint64_t)&v149, (uint64_t)&v139);
            v93 = *((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v94 = sub_1004BB5A4(&v139, *((uint64_t *)&v140 + 1));
              v95 = *(_QWORD *)(v93 - 8);
              v96 = __chkstk_darwin(v94);
              v98 = (char *)&v125 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, __n128))(v95 + 16))(v98, v96);
              v99 = _bridgeAnythingToObjectiveC<A>(_:)(v98, v93);
              (*(void (**)(char *, uint64_t))(v95 + 8))(v98, v93);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v139);
            }
            else
            {
              v99 = 0;
            }
            objc_msgSend(v92, "setFromValue:", v99);
            swift_unknownObjectRelease(v99);
            sub_1004F370C((uint64_t)&v149, (uint64_t)&v139);
            v106 = *((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v40 = sub_1004BB5A4(&v139, *((uint64_t *)&v140 + 1));
              v41 = *(_QWORD *)(v106 - 8);
              v42 = __chkstk_darwin(v40);
              v44 = (char *)&v125 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, __n128))(v41 + 16))(v44, v42);
              v45 = _bridgeAnythingToObjectiveC<A>(_:)(v44, v106);
              (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v106);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v139);
            }
            else
            {
              v45 = 0;
            }
            v17 = v136;
            v38 = v138;
            objc_msgSend(v92, "setToValue:", v45);
            objc_msgSend(v92, "setRemovedOnCompletion:", 0, swift_unknownObjectRelease(v45).n128_f64[0]);
            v46 = v154;
            v47 = v155;
            sub_1004BB5A4(&v153, v154);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v47 + 88))(&v139, v46, v47);
            v48 = *((_QWORD *)&v140 + 1);
            v49 = v141;
            sub_1004BB5A4(&v139, *((uint64_t *)&v140 + 1));
            v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 48))(v48, v49);
            v52 = v51;
            sub_100D0DCB0(v50, v51);
            v54 = v53;
            swift_bridgeObjectRelease(v52);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v139);
            v55 = String._bridgeToObjectiveC()();
            objc_msgSend(j, "addAnimation:forKey:", v92, v55, swift_bridgeObjectRelease(v54).n128_f64[0]);

          }
          objc_msgSend(v84, "commit");

          sub_1004CB800((uint64_t)&v149, &qword_1013E0230);
          v39 = v135;
          v37 = v137;
        }
        ++v37;
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v153);
      }
      while (v37 != v38);
      swift_bridgeObjectRelease(v17);
      v36 = v126;
      goto LABEL_57;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v17);
    v36 = v149;
    if ((a3 & 1) != 0)
    {
LABEL_57:
      v117 = type metadata accessor for TaskPriority(0);
      v108 = (uint64_t)v131;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v131, 1, 1, v117);
      type metadata accessor for MainActor(0);
      v118 = v130;
      v119 = v132;
      sub_1004C0F54(v130, v132);
      v121 = v133;
      v120 = v134;
      v122 = sub_1004C0F54(v133, v134);
      v123 = static MainActor.shared.getter(v122);
      v115 = swift_allocObject(&unk_1012A0C90, 104, 7);
      *(_QWORD *)(v115 + 16) = v123;
      *(_QWORD *)(v115 + 24) = &protocol witness table for MainActor;
      *(_QWORD *)(v115 + 32) = v118;
      *(_QWORD *)(v115 + 40) = v119;
      *(_QWORD *)(v115 + 48) = v129;
      *(_QWORD *)(v115 + 56) = v36;
      *(_QWORD *)(v115 + 64) = v127;
      *(_BYTE *)(v115 + 72) = v128 & 1;
      *(_QWORD *)(v115 + 80) = v121;
      *(_QWORD *)(v115 + 88) = v120;
      *(_QWORD *)(v115 + 96) = v17;
      v116 = &unk_1013F04A8;
      goto LABEL_58;
    }
  }
  swift_release(v129);
  v107 = type metadata accessor for TaskPriority(0);
  v108 = (uint64_t)v131;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v131, 1, 1, v107);
  type metadata accessor for MainActor(0);
  v109 = v130;
  v110 = v132;
  sub_1004C0F54(v130, v132);
  v112 = v133;
  v111 = v134;
  v113 = sub_1004C0F54(v133, v134);
  v114 = static MainActor.shared.getter(v113);
  v115 = swift_allocObject(&unk_1012A0C68, 80, 7);
  *(_QWORD *)(v115 + 16) = v114;
  *(_QWORD *)(v115 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v115 + 32) = v109;
  *(_QWORD *)(v115 + 40) = v110;
  *(_QWORD *)(v115 + 48) = v36;
  *(_QWORD *)(v115 + 56) = v17;
  *(_QWORD *)(v115 + 64) = v112;
  *(_QWORD *)(v115 + 72) = v111;
  v116 = &unk_1013F04A0;
LABEL_58:
  v124 = sub_100521B98(v108, (uint64_t)v116, v115);
  swift_release(v124);
}

double sub_100D0DC64()
{
  uint64_t v0;

  return sub_100D02B80(*(_QWORD *)v0, *(double *)(v0 + 8));
}

_QWORD *sub_100D0DC70()
{
  uint64_t v0;

  return sub_100D092AC(*(_QWORD *)v0, (uint64_t (*)(uint64_t, double))sub_100D02B80, *(double *)(v0 + 8));
}

double sub_100D0DC94()
{
  uint64_t v0;

  return sub_100D02A7C(*(_QWORD *)v0, *(double *)(v0 + 8));
}

_QWORD *sub_100D0DCA0()
{
  uint64_t v0;

  return sub_100D0AB40(*(_QWORD *)v0, *(double *)(v0 + 8));
}

uint64_t sub_100D0DCB0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  NSString v11;
  id v12;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;

  v3 = v2;
  v6 = 0;
  while (1)
  {
    v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v9 = v8;
    swift_bridgeObjectRetain(a2);
    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(v9);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v12 = objc_msgSend(v3, "animationForKey:", v11, a1);

    if (!v12)
      break;
    if (__OFADD__(v6++, 1))
    {
      __break(1u);
      break;
    }
  }
  v14 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v16 = v15;
  swift_bridgeObjectRetain(a2);
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_100D0DDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v14;
  _QWORD *v15;
  char v18;
  uint64_t v19;

  v14 = type metadata accessor for MainActor(0);
  v9[2] = v14;
  v9[3] = static MainActor.shared.getter(v14);
  v15 = (_QWORD *)swift_task_alloc(dword_10140E5DC);
  v9[4] = v15;
  *v15 = v9;
  v15[1] = sub_1004DF470;
  return sub_100D0DEB4(a4, a5, a6, a7, a8, v18 & 1, v19, a9);
}

uint64_t sub_100D0DEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)(v8 + 680) = v13;
  *(_QWORD *)(v8 + 672) = a8;
  *(_QWORD *)(v8 + 664) = a7;
  *(_BYTE *)(v8 + 696) = a6;
  *(_QWORD *)(v8 + 656) = a5;
  *(_QWORD *)(v8 + 648) = a4;
  *(_QWORD *)(v8 + 640) = a3;
  *(_QWORD *)(v8 + 632) = a2;
  *(_QWORD *)(v8 + 624) = a1;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 688) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100D0DF48, v10, v11);
}

uint64_t sub_100D0DF48()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  void *v3;
  void *v4;
  id v5;
  unsigned __int8 v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  double v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSString v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  NSString v105;
  id v107;
  void *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  __int128 *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = swift_release(*(_QWORD *)(v0 + 688));
  if (v1)
    (*(void (**)(__n128))(v0 + 624))(v2);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 640) + 16))
  {
    if (qword_1013DDEA0 != -1)
      swift_once(&qword_1013DDEA0, sub_100D29210);
    v3 = (void *)qword_101481388;
    v4 = *(void **)(qword_101481388 + OBJC_IVAR____TtC8Freeform28CRLLayerAnimationDisplayLink_displayLink);
    if (v4)
    {
      v5 = (id)qword_101481388;
      v6 = objc_msgSend(v4, "paused");
      v7 = v5;
      if ((v6 & 1) == 0)
        sub_100D29604();
    }
    else
    {
      v8 = (id)qword_101481388;
    }
    sub_100D292F0();

  }
  else
  {
    v3 = 0;
  }
  sub_100720998(*(_QWORD *)(v0 + 648), v0 + 312);
  v9 = *(_QWORD *)(v0 + 336);
  if (v9)
  {
    v10 = *(_QWORD *)(v0 + 344);
    sub_1004BB5A4((_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 336));
    v11 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40))(v9);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 312));
  }
  else
  {
    sub_1004CB800(v0 + 312, &qword_1013EA650);
    v11 = 0.0;
  }
  sub_100720998(*(_QWORD *)(v0 + 640), v0 + 152);
  v12 = *(_QWORD *)(v0 + 176);
  if (v12)
  {
    v13 = *(_QWORD *)(v0 + 184);
    sub_1004BB5A4((_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176));
    v14 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40))(v12);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 152));
  }
  else
  {
    sub_1004CB800(v0 + 152, &qword_1013EA650);
    v14 = 0.0;
  }
  v15 = *(_BYTE *)(v0 + 696);
  v16 = CACurrentMediaTime();
  if ((v15 & 1) != 0)
  {
    if (v16 > 0.0)
      v17 = v16;
    else
      v17 = 0.0;
  }
  else
  {
    v17 = *(double *)(v0 + 656);
    if (v16 > v17)
      v17 = v16;
  }
  if (v3)
  {
    v18 = *(_QWORD **)(v0 + 640);
    if (v11 > v14)
      v19 = 0;
    else
      v19 = *(_QWORD *)(v0 + 664);
    if (v11 > v14)
      v20 = 0;
    else
      v20 = *(_QWORD *)(v0 + 672);
    v21 = v3;
    sub_100D29738(v18, v19, v20, v17, v14);

  }
  v22 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v22, "begin");
  objc_msgSend(v22, "setAnimationDuration:", v11);
  objc_msgSend(v22, "setDisableActions:", 1);
  if (v11 > v14)
  {
    v24 = *(_QWORD *)(v0 + 672);
    v25 = *(_QWORD *)(v0 + 664);
    v26 = swift_allocObject(&unk_1012A0BC8, 32, 7);
    *(_QWORD *)(v26 + 16) = v25;
    *(_QWORD *)(v26 + 24) = v24;
    *(_QWORD *)(v0 + 136) = sub_100C4EF48;
    *(_QWORD *)(v0 + 144) = v26;
    *(_QWORD *)(v0 + 104) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 112) = *(_QWORD *)"";
    *(_QWORD *)(v0 + 120) = sub_1005D2FC0;
    *(_QWORD *)(v0 + 128) = &unk_1012A0BE0;
    v27 = _Block_copy((const void *)(v0 + 104));
    v28 = *(_QWORD *)(v0 + 144);
    sub_1004C0F54(v25, v24);
    objc_msgSend(v22, "setCompletionBlock:", v27, swift_release(v28).n128_f64[0]);
    _Block_release(v27);
  }
  v107 = v22;
  v108 = v3;
  v29 = *(_QWORD *)(v0 + 680);
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v31 = (_QWORD *)(v0 + 232);
    v32 = (_QWORD *)(v0 + 512);
    v120 = (id)(v29 + 32);
    swift_bridgeObjectRetain(v29);
    v33 = 0;
    v115 = v30;
    while (1)
    {
      sub_1004E90B0((uint64_t)v120 + 40 * v33, v0 + 192);
      v35 = *(_QWORD *)(v0 + 216);
      v36 = *(_QWORD *)(v0 + 224);
      sub_1004BB5A4((_QWORD *)(v0 + 192), v35);
      (*(void (**)(uint64_t, uint64_t))(v36 + 88))(v35, v36);
      v37 = *(_QWORD *)(v0 + 256);
      v38 = *(_QWORD *)(v0 + 264);
      sub_1004BB5A4(v31, v37);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 112))(v37, v38);
      if (v39 == 2)
      {
        v34 = v31;
      }
      else
      {
        v40 = v39;
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v31);
        if ((v40 & 1) == 0)
          goto LABEL_38;
        v41 = *(_QWORD *)(v0 + 216);
        v42 = *(_QWORD *)(v0 + 224);
        sub_1004BB5A4((_QWORD *)(v0 + 192), v41);
        v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 64))(v41, v42);
        if (!v43)
          goto LABEL_38;
        v44 = (void *)v43;
        v45 = *(_QWORD *)(v0 + 216);
        v46 = *(_QWORD *)(v0 + 224);
        sub_1004BB5A4((_QWORD *)(v0 + 192), v45);
        (*(void (**)(uint64_t, uint64_t))(v46 + 88))(v45, v46);
        v47 = *(_QWORD *)(v0 + 536);
        v48 = *(_QWORD *)(v0 + 544);
        sub_1004BB5A4(v32, v47);
        v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 48))(v47, v48);
        v51 = v50;
        v52 = objc_msgSend(v44, "animationKeys");
        if (v52)
        {
          v53 = v52;
          v54 = (double *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, &type metadata for String);

        }
        else
        {
          v54 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRetain(v51);
        sub_100D180EC((uint64_t)v54, v49, v51);
        v56 = v55;
        v117 = v51;
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v54);
        v57 = *(_QWORD *)(v56 + 16);
        if (v57)
        {
          swift_bridgeObjectRetain(v56);
          v58 = v56;
          v59 = (_QWORD *)(v56 + 40);
          do
          {
            v60 = *v59;
            swift_bridgeObjectRetain(*v59);
            v61 = String._bridgeToObjectiveC()();
            objc_msgSend(v44, "removeAnimationForKey:", v61);

            swift_bridgeObjectRelease(v60);
            v59 += 2;
            --v57;
          }
          while (v57);
          v56 = v58;
          swift_bridgeObjectRelease(v58);
          v31 = (_QWORD *)(v0 + 232);
        }

        swift_bridgeObjectRelease(v117);
        swift_bridgeObjectRelease(v56);
        v32 = (_QWORD *)(v0 + 512);
        v30 = v115;
        v34 = (_QWORD *)(v0 + 512);
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v34);
LABEL_38:
      ++v33;
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 192));
      if (v33 == v30)
      {
        v23 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680)).n128_u64[0];
        break;
      }
    }
  }
  v62 = *(_QWORD *)(v0 + 648);
  v63 = *(_QWORD *)(v62 + 16);
  if (v63)
  {
    v64 = (_QWORD *)(v0 + 272);
    v113 = (_QWORD *)(v0 + 352);
    v114 = v0 + 16;
    v116 = (_QWORD *)(v0 + 392);
    v111 = (_QWORD *)(v0 + 472);
    v112 = (__int128 *)(v0 + 432);
    v109 = (_QWORD *)(v0 + 592);
    v110 = (_QWORD *)(v0 + 552);
    v65 = v62 + 32;
    swift_bridgeObjectRetain(v62);
    do
    {
      sub_1004E90B0(v65, (uint64_t)v64);
      v66 = *(_QWORD *)(v0 + 296);
      v67 = *(_QWORD *)(v0 + 304);
      sub_1004BB5A4(v64, v66);
      v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 64))(v66, v67);
      if (v68)
      {
        v69 = (void *)v68;
        v118 = v63;
        v119 = *(_QWORD *)(v0 + 680);
        v70 = *(_QWORD *)(v0 + 296);
        v71 = *(_QWORD *)(v0 + 304);
        sub_1004BB5A4(v64, v70);
        v72 = *(_QWORD *)(v0 + 296);
        v73 = *(_QWORD *)(v0 + 304);
        sub_1004BB5A4(v64, v72);
        v121 = v69;
        (*(void (**)(uint64_t, uint64_t))(v73 + 80))(v72, v73);
        v74 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)(v71 + 8) + 8))(v114, v70, v17);
        v75 = v69;
        sub_1004CB800(v114, (uint64_t *)&unk_1013F04B0);
        v76 = *(_QWORD *)(v0 + 296);
        v77 = *(_QWORD *)(v0 + 304);
        sub_1004BB5A4(v64, v76);
        (*(void (**)(uint64_t, uint64_t))(v77 + 88))(v76, v77);
        v78 = *(_QWORD *)(v0 + 376);
        v79 = *(_QWORD *)(v0 + 384);
        sub_1004BB5A4(v113, v78);
        v80 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 48))(v78, v79);
        v82 = v81;
        sub_100D0DCB0(v80, v81);
        v84 = v83;
        swift_bridgeObjectRelease(v82);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v113);
        v85 = String._bridgeToObjectiveC()();
        objc_msgSend(v75, "addAnimation:forKey:", v74, v85, swift_bridgeObjectRelease(v84).n128_f64[0]);

        v86 = *(_QWORD *)(v0 + 296);
        v87 = *(_QWORD *)(v0 + 304);
        sub_1004BB5A4(v64, v86);
        (*(void (**)(uint64_t, uint64_t))(v87 + 88))(v86, v87);
        v88 = *(_QWORD *)(v0 + 496);
        v89 = *(_QWORD *)(v0 + 504);
        sub_1004BB5A4(v111, v88);
        v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 80))(v88, v89);
        sub_100720ABC(v90, v75, v119, (uint64_t)v112);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v111);
        if (*(_QWORD *)(v0 + 456))
        {
          sub_1004DB728(v112, (uint64_t)v116);
          v91 = *(_QWORD *)(v0 + 416);
          v92 = *(_QWORD *)(v0 + 424);
          sub_1004BB5A4(v116, v91);
          (*(void (**)(uint64_t, uint64_t))(v92 + 120))(v91, v92);
          v93 = *(_QWORD *)(v0 + 616);
          if (v93)
          {
            v94 = sub_1004BB5A4(v109, *(_QWORD *)(v0 + 616));
            v95 = *(_QWORD *)(v93 - 8);
            v96 = swift_task_alloc((*(_QWORD *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(v95 + 16))(v96, v94, v93);
            v97 = _bridgeAnythingToObjectiveC<A>(_:)(v96, v93);
            (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v93);
            swift_task_dealloc(v96);
            _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v109);
          }
          else
          {
            v97 = 0;
          }
          v63 = v118;
          v98 = *(_QWORD *)(v0 + 296);
          v99 = *(_QWORD *)(v0 + 304);
          sub_1004BB5A4(v64, v98);
          (*(void (**)(uint64_t, uint64_t))(v99 + 88))(v98, v99);
          v100 = *(_QWORD *)(v0 + 576);
          v101 = *(_QWORD *)(v0 + 584);
          sub_1004BB5A4(v110, v100);
          v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 80))(v100, v101);
          sub_1008A4EC8(v102);
          v104 = v103;
          v105 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v104);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v110);
          objc_msgSend(v121, "setValue:forKey:", v97, v105);

          swift_unknownObjectRelease(v97);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v116);
        }
        else
        {

          sub_1004CB800((uint64_t)v112, &qword_1013EA650);
          v63 = v118;
        }
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v64);
      v65 += 40;
      --v63;
    }
    while (v63);
    v23 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 648)).n128_u64[0];
  }
  objc_msgSend(v107, "commit", *(double *)&v23);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100D0E8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8[6] = a8;
  v8[7] = v13;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  v9 = type metadata accessor for MainActor(0);
  v8[8] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100D0E934, v10, v11);
}

uint64_t sub_100D0E934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(void (**)(void))(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_100D0E99C(v6, v5, v4, v3, v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100D0E99C(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33;
  _QWORD aBlock[3];
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;

  if (a1)
    a1();
  v10 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v10, "begin");
  objc_msgSend(v10, "setDisableActions:", 1);
  v11 = *(_QWORD *)(a3 + 16);
  if (v11)
  {
    v28 = a6;
    v12 = a3 + 32;
    swift_bridgeObjectRetain(a3);
    do
    {
      sub_1004E90B0(v12, (uint64_t)aBlock);
      v15 = v35;
      v16 = v36;
      sub_1004BB5A4(aBlock, (uint64_t)v35);
      v17 = (*((uint64_t (**)(void *, uint64_t (*)()))v16 + 8))(v15, v16);
      if (v17)
      {
        v18 = (void *)v17;
        v20 = v35;
        v19 = v36;
        sub_1004BB5A4(aBlock, (uint64_t)v35);
        (*((void (**)(_QWORD *__return_ptr, void *, uint64_t (*)()))v19 + 11))(v29, v20, v19);
        v21 = v30;
        v22 = v31;
        sub_1004BB5A4(v29, v30);
        v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 80))(v21, v22);
        sub_100720ABC(v23, v18, a4, (uint64_t)v32);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v29);
        if (v33)
        {
          sub_1004CB800((uint64_t)v32, &qword_1013EA650);
          v13 = (uint64_t)v35;
          v14 = (uint64_t)v36;
          sub_1004BB5A4(aBlock, (uint64_t)v35);
          sub_1007207E0(v13, v14);

        }
        else
        {

          sub_1004CB800((uint64_t)v32, &qword_1013EA650);
        }
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(aBlock);
      v12 += 40;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease(a3);
    a6 = v28;
  }
  v24 = swift_allocObject(&unk_1012A0C18, 32, 7);
  *(_QWORD *)(v24 + 16) = a5;
  *(_QWORD *)(v24 + 24) = a6;
  v36 = sub_100C4EF48;
  v37 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  v35 = &unk_1012A0C30;
  v25 = _Block_copy(aBlock);
  v26 = v37;
  sub_1004C0F54(a5, a6);
  objc_msgSend(v10, "setCompletionBlock:", v25, swift_release(v26).n128_f64[0]);
  _Block_release(v25);
  return objc_msgSend(v10, "commit");
}

double sub_100D0EBF8(uint64_t a1, uint64_t a2)
{
  return sub_100D0C470(a1, a2, type metadata accessor for CRLSpringLayerAnimation);
}

_QWORD *sub_100D0EC04()
{
  return sub_100D04858((uint64_t (*)(_QWORD, __n128))type metadata accessor for CRLSpringLayerAnimation, (uint64_t)&off_1012A12B8);
}

uint64_t sub_100D0EC28(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013E77A8, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

_QWORD *sub_100D0EC3C(_QWORD *result, int64_t a2, char a3, unint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E5C8);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if ((unint64_t)v11 < a4 || (unint64_t)v13 >= a4 + 32 + 24 * v8)
        {
          swift_arrayInitWithTakeFrontToBack(v13, a4 + 32, v8, &type metadata for CRLRepAnimator);
        }
        else if (v11 != (_QWORD *)a4)
        {
          swift_arrayInitWithTakeBackToFront(v13);
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D16858(0, v8, (unint64_t)v13, a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0ED80(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C((uint64_t *)&unk_1013FF9C0);
      v11 = (_QWORD *)swift_allocObject(v10, 4 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 4 * v8 + 32))
          memmove(v14, a4 + 4, 4 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D17534(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0EE8C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C((uint64_t *)&unk_1013E77B8);
      v11 = (_QWORD *)swift_allocObject(v10, 2 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 31;
      v11[2] = v8;
      v11[3] = v13 & 0xFFFFFFFFFFFFFFFELL;
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 2 * v8 + 32))
          memmove(v14, a4 + 4, 2 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D1744C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0EF94(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C((uint64_t *)&unk_1013DFC30);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D1694C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0F0A0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D0F0B8(a1, a2, a3, a4, &qword_10140E680);
}

_QWORD *sub_100D0F0AC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D0F0B8(a1, a2, a3, a4, &qword_10140E688);
}

_QWORD *sub_100D0F0B8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_1004B804C(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
      v13 = j__malloc_size_1(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v9 + 4])
          memmove(v15, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D16D98(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0F1C0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D0F0B8(a1, a2, a3, a4, &qword_10140E708);
}

_QWORD *sub_100D0F1CC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D0F0B8(a1, a2, a3, a4, &qword_10140E698);
}

_QWORD *sub_100D0F1D8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E6A8);
      v11 = (_QWORD *)swift_allocObject(v10, 112 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 112);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[14 * v8 + 4])
          memmove(v13, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D1780C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0F300(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D0F0B8(a1, a2, a3, a4, &qword_10140E6B0);
}

_QWORD *sub_100D0F30C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D0F0B8(a1, a2, a3, a4, &qword_10140E6C0);
}

_QWORD *sub_100D0F318(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E6D0);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D17728(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0F410(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E910);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D17074(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0F51C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D11358(a1, a2, a3, a4, &qword_10140E6E0, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_100D1761C);
}

_QWORD *sub_100D0F530(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_1013E60D8);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D16E80(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

double *sub_100D0F654(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E8F8);
      v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    sub_100D17EE0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D0F760(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E8B0, type metadata accessor for CRLCommandHistoryItem);
}

uint64_t sub_100D0F774(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1004B804C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size_1(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100D19484(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_100D0F980(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E640);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D17918(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0FA8C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D10C4C(a1, a2, a3, a4, &qword_10140E7C8, &qword_1013E7888);
}

uint64_t sub_100D0FAA0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1014072D0, type metadata accessor for CRLBoardLibraryViewModel.Item);
}

_QWORD *sub_100D0FAB4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D101D8(a1, a2, a3, a4, &qword_1013E89B8, &qword_1013E20A8);
}

uint64_t sub_100D0FAC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013E1910, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

_QWORD *sub_100D0FADC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E5A0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D16D98(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0FBE8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E868);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D17DEC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D0FD0C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D104FC(a1, a2, a3, a4, &qword_1013E79C8, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_100D17074);
}

_QWORD *sub_100D0FD20(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D11664(a1, a2, a3, a4, &qword_10140E860, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_100D17CF8);
}

_QWORD *sub_100D0FD34(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D114D0(a1, a2, a3, a4, &qword_10140E858);
}

uint64_t sub_100D0FD48(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0FD70(a1, a2, a3, a4, &qword_1013F3D98, (uint64_t *)&unk_1013E87B0);
}

uint64_t sub_100D0FD5C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0FD70(a1, a2, a3, a4, &qword_10140E878, (uint64_t *)&unk_1013E87D0);
}

uint64_t sub_100D0FD70(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1004B804C(a5);
  v14 = *(_QWORD *)(sub_1004B804C(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size_1(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_1004B804C(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100D19098(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_100D0FF7C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E748);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D17B14(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D100A0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E740);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D17A20(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D101C4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D101D8(a1, a2, a3, a4, &qword_10140E5A8, &qword_1013E8700);
}

_QWORD *sub_100D101D8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_1004B804C(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size_1(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D186BC(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D10304(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D10318(a1, a2, a3, a4, &qword_10140E5E8, &qword_1013FF110);
}

_QWORD *sub_100D10318(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_1004B804C(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 48 * v12 + 32, 7);
      v15 = j__malloc_size_1(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 48);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[6 * v11 + 4])
          memmove(v16, a4 + 4, 48 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D17344(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D10448(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013E98F8, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

uint64_t sub_100D1045C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013E14A8, (uint64_t (*)(_QWORD))&type metadata accessor for UICellAccessory);
}

uint64_t sub_100D10470(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013E78E0, type metadata accessor for CRLFollowAccessibilityExperienceCoordinator.HistoryBreadcrumb);
}

uint64_t sub_100D10484(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013E79D0, type metadata accessor for CRLBoardEntity);
}

uint64_t sub_100D10498(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E608, type metadata accessor for CRLProto_ObjectMetadata.AssetInfo);
}

uint64_t sub_100D104AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013E45D8, type metadata accessor for CRLBoardPreviewImageCache.Item);
}

uint64_t sub_100D104C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013E7870, type metadata accessor for CRLBoardIdentifier);
}

_QWORD *sub_100D104D4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D104FC(a1, a2, a3, a4, &qword_1013F05B8, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_100D16C94);
}

_QWORD *sub_100D104E8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D104FC(a1, a2, a3, a4, &qword_10140E7D0, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_100D185B4);
}

_QWORD *sub_100D104FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_1004B804C(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size_1(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4])
          memmove(v17, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v17, a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D10610(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140AC48);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D17250(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D10734(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E7A0, type metadata accessor for CRLBoardItemPeerSyncUpdate);
}

_QWORD *sub_100D10748(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D101D8(a1, a2, a3, a4, &qword_10140E7B8, &qword_10140BB50);
}

uint64_t sub_100D1075C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E770, type metadata accessor for CRLProto_Data);
}

_QWORD *sub_100D10770(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_1013F22D0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D187C4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D1087C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E8F0);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D188B4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D1099C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D10AF8(a1, a2, a3, a4, &qword_10140E8E0, &qword_10140E8E8);
}

uint64_t sub_100D109B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E8D8, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
}

_QWORD *sub_100D109C4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C((uint64_t *)&unk_1013F9B80);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D16D98(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D10AD0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D101D8(a1, a2, a3, a4, (uint64_t *)&unk_1013E5700, &qword_1013E56C8);
}

_QWORD *sub_100D10AE4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D10AF8(a1, a2, a3, a4, &qword_10140E8C0, &qword_1013E01E0);
}

_QWORD *sub_100D10AF8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_1004B804C(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
      v15 = j__malloc_size_1(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 17;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 4);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[2 * v11 + 4])
          memmove(v17, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D189A8(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D10C10(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E7C0, type metadata accessor for CRLBoardItemDeltaChange);
}

_QWORD *sub_100D10C24(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D101D8(a1, a2, a3, a4, &qword_10140E2C8, (uint64_t *)&unk_1013E8780);
}

_QWORD *sub_100D10C38(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D10C4C(a1, a2, a3, a4, &qword_1013E7A58, &qword_1013E8850);
}

_QWORD *sub_100D10C4C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_1004B804C(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size_1(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4])
          memmove(v17, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D17FE8(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D10D64(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_1013E7A50);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D16F8C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

double *sub_100D10E70(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C((uint64_t *)&unk_1013E8830);
      v11 = (double *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    sub_100D18AAC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D10F7C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E760, _s13ItemViewModelVMa);
}

uint64_t sub_100D10F90(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_1013F7408, _s15FilterViewModelVMa);
}

uint64_t sub_100D10FA4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E848, type metadata accessor for CRLSELibraryViewModeItemNode);
}

uint64_t sub_100D10FB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0FD70(a1, a2, a3, a4, &qword_1013E9900, (uint64_t *)&unk_1013EA630);
}

uint64_t sub_100D10FCC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E908, type metadata accessor for CRLiOSBoardEntity);
}

double *sub_100D10FE0(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E890);
      v11 = (double *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D18BA0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D11104(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0FD70(a1, a2, a3, a4, &qword_10140E658, &qword_1013EB680);
}

_QWORD *sub_100D11118(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D10AF8(a1, a2, a3, a4, &qword_10140E8A0, &qword_10140E8A8);
}

double *sub_100D1112C(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E800);
      v11 = (double *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (double *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D17728(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D11224(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E7E8, (uint64_t (*)(_QWORD))&type metadata accessor for IndexPath);
}

double *sub_100D11238(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_1013EFDA8);
      v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    sub_100D17074(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D11344(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D11358(a1, a2, a3, a4, &qword_10140E920, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_100D18CAC);
}

_QWORD *sub_100D11358(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_1004B804C(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 24 * v12 + 32, 7);
      v15 = j__malloc_size_1(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[3 * v11 + 4])
          memmove(v16, a4 + 4, 24 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a6(0, v11, v16, a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D11480(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E768, (uint64_t (*)(_QWORD))&type metadata accessor for GridItem);
}

_QWORD *sub_100D11494(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D10AF8(a1, a2, a3, a4, &qword_10140E838, (uint64_t *)&unk_1013E87C0);
}

_QWORD *sub_100D114A8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D101D8(a1, a2, a3, a4, &qword_10140E880, &qword_101405648);
}

_QWORD *sub_100D114BC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D114D0(a1, a2, a3, a4, &qword_10140E870);
}

_QWORD *sub_100D114D0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_1004B804C(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 24 * v10 + 32, 7);
      v13 = j__malloc_size_1(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v9 + 4])
          memmove(v14, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D17C08(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D11600(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E808, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
}

uint64_t sub_100D11614(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0FD70(a1, a2, a3, a4, &qword_1013F81D8, &qword_1013F81B8);
}

uint64_t sub_100D11628(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0FD70(a1, a2, a3, a4, &qword_10140E830, &qword_1013FA540);
}

uint64_t sub_100D1163C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E840, (uint64_t (*)(_QWORD))&type metadata accessor for AttributedString);
}

_QWORD *sub_100D11650(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D11664(a1, a2, a3, a4, &qword_10140E738, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_100D18D98);
}

_QWORD *sub_100D11664(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_1004B804C(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 56 * v12 + 32, 7);
      v15 = j__malloc_size_1(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 56);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[7 * v11 + 4])
          memmove(v16, a4 + 4, 56 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a6(0, v11, v16, a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D11790(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E750, type metadata accessor for CRLProto_Path.Element);
}

uint64_t sub_100D117A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E818, type metadata accessor for CRLSpotlightManager.ChangeType);
}

uint64_t sub_100D117B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E758, type metadata accessor for CRLProto_PKStrokePathData.StrokePoint);
}

uint64_t sub_100D117CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E7F8, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

_QWORD *sub_100D117E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E648);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100D18E84(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100D118EC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E5F8);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D18F8C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D11A08(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E8B8, type metadata accessor for CRLAssetAddress);
}

uint64_t sub_100D11A1C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E628, (uint64_t (*)(_QWORD))&type metadata accessor for PKStroke);
}

double *sub_100D11A30(double *a1, int64_t a2, char a3, double *a4)
{
  return sub_100D11CCC(a1, a2, a3, a4, &qword_1013E7878);
}

uint64_t sub_100D11A44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0FD70(a1, a2, a3, a4, &qword_10140E7E0, &qword_101407308);
}

uint64_t sub_100D11A58(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E7D8, (uint64_t (*)(_QWORD))&type metadata accessor for Notification);
}

double *sub_100D11A6C(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E720);
      v11 = (double *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D1715C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

double *sub_100D11B94(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E7B0);
      v11 = (double *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D1929C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

double *sub_100D11CB8(double *a1, int64_t a2, char a3, double *a4)
{
  return sub_100D11CCC(a1, a2, a3, a4, &qword_10140E7A8);
}

double *sub_100D11CCC(double *result, int64_t a2, char a3, double *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  int64_t v13;
  uint64_t v14;
  double *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_1004B804C(a5);
      v12 = (double *)swift_allocObject(v11, 32 * v10 + 32, 7);
      v13 = j__malloc_size_1(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 1;
      *((_QWORD *)v12 + 2) = v9;
      *((_QWORD *)v12 + 3) = 2 * (v14 >> 5);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[4 * v9 + 4])
          memmove(v15, a4 + 4, 32 * v9);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    sub_100D191B0(0, v9, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

double *sub_100D11DE4(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_1013E7788);
      v11 = (double *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D19390(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D11F04(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100D0F774(a1, a2, a3, a4, &qword_10140E798, type metadata accessor for CRLSyncActivity);
}

double *sub_100D11F18(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  double *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E788);
      v11 = (double *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0.0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100D1959C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

double *sub_100D1203C(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_10140E918);
      v11 = (double *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    sub_100D16F8C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

double *sub_100D12148(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1004B804C(&qword_1013EC948);
      v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size_1(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    sub_100D17074(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100D12254(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C((uint64_t *)&unk_1013DFC30);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D123BC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_1013E77A8, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100D123D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_1013EC948);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D1252C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_1013E79C8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D12688(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100D14674(a1, a2, a3, a4, &qword_10140E690);
}

uint64_t sub_100D12694(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100D126C4(a1, a2, a3, a4, &qword_10140E710);
}

uint64_t sub_100D126A0(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100D126C4(a1, a2, a3, a4, &qword_10140E6A0);
}

uint64_t sub_100D126AC(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100D126C4(a1, a2, a3, a4, &qword_10140E6B8);
}

uint64_t sub_100D126B8(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100D126C4(a1, a2, a3, a4, &qword_10140E6C8);
}

uint64_t sub_100D126C4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_1004B804C(a5);
    v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7);
    v13 = j__malloc_size_1(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v9])
      memmove(v15, v16, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v9] || v15 >= &v16[8 * v9])
  {
    memcpy(v15, v16, 8 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D1281C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_10140E6D8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D12968(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C((uint64_t *)&unk_1013FF9C0);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D12AC4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D149D8(a1, a2, a3, a4, &qword_10140E820, &qword_10140E828);
}

uint64_t sub_100D12AD8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D149D8(a1, a2, a3, a4, &qword_10140E718, &qword_1013E41F0);
}

uint64_t sub_100D12AEC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_1013FF100);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_1004B804C((uint64_t *)&unk_1013E1C80);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D12C74(char a1, int64_t a2, char a3, double *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_10140E900);
    v11 = (double *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0.0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_1004B804C(&qword_1013E1D68);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D12E18(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D149D8(a1, a2, a3, a4, &qword_10140E5F0, (uint64_t *)&unk_1013E19B0);
}

uint64_t sub_100D12E2C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_1014072D0, type metadata accessor for CRLBoardLibraryViewModel.Item);
}

uint64_t sub_100D12E40(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_10140E860);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 56 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D12FBC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D144DC(a1, a2, a3, a4, &qword_10140E670, &qword_10140E678);
}

uint64_t sub_100D12FD0(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C((uint64_t *)&unk_1013E8830);
    v11 = (double *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D1313C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D13224(a1, a2, a3, a4, &qword_10140E5A8, &qword_1013E8700);
}

uint64_t sub_100D13150(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E610, type metadata accessor for CRLProto_ObjectInfo.DataDirectoryEntry);
}

uint64_t sub_100D13164(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E618, type metadata accessor for CRLProto_ObjectInfo.AssetReference);
}

uint64_t sub_100D13178(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E620, type metadata accessor for CRLProto_ObjectInfo.ChildObjectReference);
}

uint64_t sub_100D1318C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E850, (uint64_t (*)(_QWORD))&type metadata accessor for ImagePlaygroundConcept);
}

uint64_t sub_100D131A0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_1013E1910, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_100D131B4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E7A0, type metadata accessor for CRLBoardItemPeerSyncUpdate);
}

uint64_t sub_100D131C8(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100D13EAC(a1, a2, a3, a4, &qword_10140E680);
}

uint64_t sub_100D131D4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D144DC(a1, a2, a3, a4, &qword_10140E8C8, &qword_10140E8D0);
}

uint64_t sub_100D131E8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_1013E7870, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100D131FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E770, type metadata accessor for CRLProto_Data);
}

uint64_t sub_100D13210(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D13224(a1, a2, a3, a4, (uint64_t *)&unk_1013E5700, &qword_1013E56C8);
}

uint64_t sub_100D13224(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_1004B804C(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size_1(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_1004B804C(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D133C8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_1013E7A50);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    memcpy(v14, v15, 32 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D13524(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D149D8(a1, a2, a3, a4, &qword_1013E7A58, &qword_1013E8850);
}

uint64_t sub_100D13538(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E760, _s13ItemViewModelVMa);
}

uint64_t sub_100D1354C(char a1, int64_t a2, char a3, double *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_101407518);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0.0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_1004B804C(&qword_1013E7D00);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D136D4(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_10140E6E8);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D13838(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_10140E6F0);
    v11 = (double *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D139BC(char a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_100D139E4(a1, a2, a3, a4, &qword_10140E6F8);
}

uint64_t sub_100D139D0(char a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_100D139E4(a1, a2, a3, a4, &qword_10140E700);
}

uint64_t sub_100D139E4(char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a4 + 24);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v8 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_1004B804C(a5);
    v12 = (double *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size_1(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
  }
  v15 = (char *)(v12 + 4);
  v16 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v12 != (double *)a4 || v15 >= &v16[16 * v9])
      memmove(v15, v16, 16 * v9);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v9] || v15 >= &v16[16 * v9])
  {
    swift_arrayInitWithCopy(v15);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D13B50(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_1013E79D8, (uint64_t (*)(_QWORD))&type metadata accessor for IntentFile);
}

uint64_t sub_100D13B64(char a1, int64_t a2, char a3, double *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_1013EFDA0);
    v11 = (double *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0.0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_1004B804C(&qword_10140E810);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D13CEC(char a1, int64_t a2, char a3, double *a4)
{
  return sub_100D13D14(a1, a2, a3, a4, &qword_10140E660, &qword_10140E668);
}

uint64_t sub_100D13D00(char a1, int64_t a2, char a3, double *a4)
{
  return sub_100D13D14(a1, a2, a3, a4, &qword_10140E778, &qword_10140E780);
}

uint64_t sub_100D13D14(char a1, int64_t a2, char a3, double *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (v10 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_1004B804C(a5);
    v14 = (double *)swift_allocObject(v13, 32 * v12 + 32, 7);
    v15 = j__malloc_size_1(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 1;
    *((_QWORD *)v14 + 2) = v11;
    *((_QWORD *)v14 + 3) = 2 * (v16 >> 5);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 32 * v11)
      memmove(v14 + 4, a4 + 4, 32 * v11);
    a4[2] = 0.0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 32 * v11 || v17 >= v18 + 32 * v11)
  {
    sub_1004B804C(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D13EA0(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100D13EAC(a1, a2, a3, a4, &qword_1013EEDA8);
}

uint64_t sub_100D13EAC(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_1004B804C(a5);
    v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size_1(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  v17 = 16 * v9;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[v17])
      memmove(v15, v16, v17);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    memcpy(v15, v16, v17);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D14000(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C((uint64_t *)&unk_1013E7A20);
    v11 = (double *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v11 < a4 || v13 >= v14 + 56 * v8)
    {
      swift_arrayInitWithTakeFrontToBack(v13, v14, v8, &type metadata for CRLMathCalculationControllerExpression);
    }
    else if (v11 != (double *)a4)
    {
      swift_arrayInitWithTakeBackToFront(v13);
    }
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    swift_arrayInitWithCopy(v13);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D141A8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E888, (uint64_t (*)(_QWORD))&type metadata accessor for CKSyncEngine.PendingDatabaseChange);
}

uint64_t sub_100D141BC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E808, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
}

uint64_t sub_100D141D0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D144DC(a1, a2, a3, a4, &qword_10140E728, &qword_10140E730);
}

uint64_t sub_100D141E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E818, type metadata accessor for CRLSpotlightManager.ChangeType);
}

uint64_t sub_100D141F8(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C((uint64_t *)&unk_1013E77B8);
    v11 = (double *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D14350(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_1013E7878);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D144B4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D147E4(a1, a2, a3, a4, &qword_10140E7F0, &qword_1013E1C78);
}

uint64_t sub_100D144C8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D144DC(a1, a2, a3, a4, &qword_10140E838, (uint64_t *)&unk_1013E87C0);
}

uint64_t sub_100D144DC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_1004B804C(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
    v15 = j__malloc_size_1(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 17;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 4);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 16 * v11)
      memmove(v14 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 16 * v11 || v17 >= v18 + 16 * v11)
  {
    sub_1004B804C(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D14668(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100D14674(a1, a2, a3, a4, &qword_10140E790);
}

uint64_t sub_100D14674(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_1004B804C(a5);
    v12 = (char *)swift_allocObject(v11, v10 + 32, 7);
    v13 = j__malloc_size_1(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v9])
      memmove(v14, v15, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v9] || v14 >= &v15[v9])
  {
    memcpy(v14, v15, v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D147BC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_10140E628, (uint64_t (*)(_QWORD))&type metadata accessor for PKStroke);
}

uint64_t sub_100D147D0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D147E4(a1, a2, a3, a4, &qword_10140E7E0, &qword_101407308);
}

uint64_t sub_100D147E4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1004B804C(a5);
  v14 = *(_QWORD *)(sub_1004B804C(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size_1(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_1004B804C(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D149C4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D149D8(a1, a2, a3, a4, &qword_10140E630, &qword_10140E638);
}

uint64_t sub_100D149D8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_1004B804C(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size_1(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_1004B804C(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D14B64(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100D14B78(a1, a2, a3, a4, &qword_1013E45D8, type metadata accessor for CRLBoardPreviewImageCache.Item);
}

uint64_t sub_100D14B78(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1004B804C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size_1(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D14D58(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_1013E7788);
    v11 = (double *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100D14EDC(unint64_t a1)
{
  return sub_100D0F774(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_10140E8B0, type metadata accessor for CRLCommandHistoryItem);
}

_QWORD *sub_100D14F10(_QWORD *a1)
{
  return sub_100D0FBE8(0, a1[2], 0, a1);
}

_QWORD *sub_100D14F24(_QWORD *a1)
{
  return sub_100D114D0(0, a1[2], 0, a1, &qword_10140E858);
}

uint64_t sub_100D14F58(unint64_t a1)
{
  return sub_100D0FD70(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_1013F3D98, (uint64_t *)&unk_1013E87B0);
}

_QWORD *sub_100D14F8C(_QWORD *a1)
{
  return sub_100D101D8(0, a1[2], 0, a1, &qword_10140E5A8, &qword_1013E8700);
}

uint64_t sub_100D14FC0(unint64_t a1)
{
  return sub_100D0F774(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_1013E77A8, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

_QWORD *sub_100D14FF4(_QWORD *a1)
{
  return sub_100D1087C(0, a1[2], 0, a1);
}

uint64_t sub_100D15008(unint64_t a1)
{
  return sub_100D0F774(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_1013E7870, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100D1503C(unint64_t a1)
{
  return sub_100D0F774(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_10140E760, _s13ItemViewModelVMa);
}

uint64_t sub_100D15070(unint64_t a1)
{
  return sub_100D0F774(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_1014072D0, type metadata accessor for CRLBoardLibraryViewModel.Item);
}

_QWORD *sub_100D150A4(_QWORD *a1)
{
  return sub_100D11358(0, a1[2], 0, a1, &qword_10140E920, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_100D18CAC);
}

uint64_t sub_100D150D8(unint64_t a1)
{
  return sub_100D0F774(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_1013E78E0, type metadata accessor for CRLFollowAccessibilityExperienceCoordinator.HistoryBreadcrumb);
}

uint64_t sub_100D1510C(unint64_t a1)
{
  return sub_100D0FD70(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_10140E830, &qword_1013FA540);
}

uint64_t sub_100D15140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

double *sub_100D151A8(uint64_t a1)
{
  return sub_100D1203C(0, *(_QWORD *)(a1 + 16), 0, (double *)a1);
}

void sub_100D151BC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_100D166A8(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_100D15224(v4);
  *a1 = v2;
}

void sub_100D15224(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  Swift::Int v111;
  _QWORD *v112;
  Swift::Int v113;
  Swift::Int v114;
  uint64_t v115;
  Swift::Int v116;
  char *__dst;
  uint64_t v118;
  _QWORD v119[3];
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;

  v2 = v1;
  v3 = a1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
        sub_100D15A88(0, v4, 1, v3);
      return;
    }
    goto LABEL_137;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
  {
LABEL_145:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v113 = v5;
  if (v4 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    v112 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      goto LABEL_103;
    }
    v118 = v1;
  }
  else
  {
    v118 = v1;
    v7 = v6 >> 1;
    v8 = sub_1004B804C(&qword_1013E8700);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v112 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v10 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v13 = v11++;
    v114 = v13;
    if (v11 < v4)
    {
      v14 = *v3;
      sub_1004E90B0(*v3 + 40 * v11, (uint64_t)&v122);
      sub_1004E90B0(v14 + 40 * v13, (uint64_t)v119);
      v16 = v123;
      v15 = v124;
      sub_1004BB5A4(&v122, v123);
      v17 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 8))(v16);
      v19 = v120;
      v18 = v121;
      sub_1004BB5A4(v119, v120);
      v20 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8) + 8))(v19);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v119);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v122);
      v11 = v13 + 2;
      v115 = v14;
      if (v13 + 2 < v4)
      {
        v21 = v14 + 40 * v13 + 40;
        while (1)
        {
          v22 = v21 + 40;
          sub_1004E90B0(v21 + 40, (uint64_t)&v122);
          sub_1004E90B0(v21, (uint64_t)v119);
          v24 = v123;
          v23 = v124;
          sub_1004BB5A4(&v122, v123);
          v25 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 24) + 8) + 8))(v24);
          v27 = v120;
          v26 = v121;
          sub_1004BB5A4(v119, v120);
          LODWORD(v26) = v25 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 8))(v27);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v119);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v122);
          if (v17 < v20 == (_DWORD)v26)
            break;
          ++v11;
          v21 = v22;
          if (v4 == v11)
          {
            v11 = v4;
            break;
          }
        }
        v14 = v115;
      }
      if (v17 < v20)
      {
        if (v11 < v13)
          goto LABEL_138;
        if (v13 < v11)
        {
          v111 = v4;
          v28 = 40 * v11 - 40;
          v29 = 40 * v13;
          v30 = v13;
          v31 = v11;
          do
          {
            if (v30 != --v31)
            {
              if (!v14)
                goto LABEL_143;
              v32 = v14 + v29;
              sub_1004DB728((__int128 *)(v14 + v29), (uint64_t)&v122);
              v33 = *(_QWORD *)(v115 + v28 + 32);
              v34 = *(_OWORD *)(v115 + v28 + 16);
              *(_OWORD *)v32 = *(_OWORD *)(v115 + v28);
              *(_OWORD *)(v32 + 16) = v34;
              *(_QWORD *)(v32 + 32) = v33;
              v14 = v115;
              sub_1004DB728(&v122, v115 + v28);
            }
            ++v30;
            v28 -= 40;
            v29 += 40;
          }
          while (v30 < v31);
          v13 = v114;
          v4 = v111;
        }
      }
    }
    if (v11 < v4)
    {
      if (__OFSUB__(v11, v13))
        goto LABEL_136;
      if (v11 - v13 < v113)
      {
        if (__OFADD__(v13, v113))
          goto LABEL_139;
        v35 = v13;
        if (v13 + v113 >= v4)
          v36 = v4;
        else
          v36 = v13 + v113;
        if (v36 < v35)
          goto LABEL_140;
        if (v11 != v36)
        {
          v37 = 40 * v11 - 40;
          do
          {
            v38 = v114;
            v39 = v37;
            do
            {
              v40 = *v3 + v39;
              sub_1004E90B0(v40 + 40, (uint64_t)&v122);
              sub_1004E90B0(v40, (uint64_t)v119);
              v42 = v123;
              v41 = v124;
              sub_1004BB5A4(&v122, v123);
              v43 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8) + 8))(v42);
              v45 = v120;
              v44 = v121;
              sub_1004BB5A4(v119, v120);
              v46 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v44 + 24) + 8) + 8))(v45);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v119);
              _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v122);
              if (v43 >= v46)
                break;
              v47 = *v3;
              if (!*v3)
                goto LABEL_141;
              v48 = v47 + v39;
              sub_1004DB728((__int128 *)(v47 + v39 + 40), (uint64_t)&v122);
              v49 = *(_OWORD *)(v48 + 16);
              *(_OWORD *)(v48 + 40) = *(_OWORD *)v48;
              *(_OWORD *)(v48 + 56) = v49;
              *(_QWORD *)(v48 + 72) = *(_QWORD *)(v48 + 32);
              sub_1004DB728(&v122, v48);
              v39 -= 40;
              ++v38;
            }
            while (v11 != v38);
            ++v11;
            v37 += 40;
          }
          while (v11 != v36);
          v11 = v36;
        }
        v13 = v114;
      }
    }
    if (v11 < v13)
    {
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_100D15FCC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v51 = *((_QWORD *)v10 + 2);
    v50 = *((_QWORD *)v10 + 3);
    v12 = v51 + 1;
    if (v51 >= v50 >> 1)
      v10 = sub_100D15FCC((char *)(v50 > 1), v51 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v12;
    v52 = v10 + 32;
    v53 = &v10[16 * v51 + 32];
    *(_QWORD *)v53 = v114;
    *((_QWORD *)v53 + 1) = v11;
    if (v51)
      break;
    v12 = 1;
LABEL_15:
    v4 = v3[1];
    if (v11 >= v4)
    {
      v2 = v118;
LABEL_103:
      v104 = v10;
      if (v12 < 2)
        goto LABEL_100;
      v105 = *v3;
      while (1)
      {
        v106 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v105)
          goto LABEL_144;
        v103 = v104;
        v107 = *(_QWORD *)&v104[16 * v106 + 32];
        v108 = *(_QWORD *)&v104[16 * v12 + 24];
        sub_100D15BF8((char *)(v105 + 40 * v107), (char *)(v105 + 40 * *(_QWORD *)&v104[16 * v12 + 16]), v105 + 40 * v108, __dst);
        if (v2)
          goto LABEL_99;
        if (v108 < v107)
          goto LABEL_133;
        if ((swift_isUniquelyReferenced_nonNull_native(v103) & 1) == 0)
          v103 = sub_100D1664C((uint64_t)v103);
        if (v106 >= *((_QWORD *)v103 + 2))
          goto LABEL_134;
        v109 = &v103[16 * v106 + 32];
        *(_QWORD *)v109 = v107;
        *((_QWORD *)v109 + 1) = v108;
        v110 = *((_QWORD *)v103 + 2);
        if (v12 > v110)
          goto LABEL_135;
        memmove(&v103[16 * v12 + 16], &v103[16 * v12 + 32], 16 * (v110 - v12));
        v104 = v103;
        *((_QWORD *)v103 + 2) = v110 - 1;
        v12 = v110 - 1;
        if (v110 <= 2)
          goto LABEL_100;
      }
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
  }
  v116 = v11;
  while (1)
  {
    v54 = v12 - 1;
    if (v12 >= 4)
    {
      v59 = &v52[16 * v12];
      v60 = *((_QWORD *)v59 - 8);
      v61 = *((_QWORD *)v59 - 7);
      v65 = __OFSUB__(v61, v60);
      v62 = v61 - v60;
      if (v65)
        goto LABEL_120;
      v64 = *((_QWORD *)v59 - 6);
      v63 = *((_QWORD *)v59 - 5);
      v65 = __OFSUB__(v63, v64);
      v57 = v63 - v64;
      v58 = v65;
      if (v65)
        goto LABEL_121;
      v66 = v12 - 2;
      v67 = &v52[16 * v12 - 32];
      v69 = *(_QWORD *)v67;
      v68 = *((_QWORD *)v67 + 1);
      v65 = __OFSUB__(v68, v69);
      v70 = v68 - v69;
      if (v65)
        goto LABEL_123;
      v65 = __OFADD__(v57, v70);
      v71 = v57 + v70;
      if (v65)
        goto LABEL_126;
      if (v71 >= v62)
      {
        v89 = &v52[16 * v54];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v65 = __OFSUB__(v90, v91);
        v92 = v90 - v91;
        if (v65)
          goto LABEL_130;
        v82 = v57 < v92;
        goto LABEL_88;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v83 = *((_QWORD *)v10 + 4);
        v84 = *((_QWORD *)v10 + 5);
        v65 = __OFSUB__(v84, v83);
        v76 = v84 - v83;
        v77 = v65;
        goto LABEL_82;
      }
      v56 = *((_QWORD *)v10 + 4);
      v55 = *((_QWORD *)v10 + 5);
      v65 = __OFSUB__(v55, v56);
      v57 = v55 - v56;
      v58 = v65;
    }
    if ((v58 & 1) != 0)
      goto LABEL_122;
    v66 = v12 - 2;
    v72 = &v52[16 * v12 - 32];
    v74 = *(_QWORD *)v72;
    v73 = *((_QWORD *)v72 + 1);
    v75 = __OFSUB__(v73, v74);
    v76 = v73 - v74;
    v77 = v75;
    if (v75)
      goto LABEL_125;
    v78 = &v52[16 * v54];
    v80 = *(_QWORD *)v78;
    v79 = *((_QWORD *)v78 + 1);
    v65 = __OFSUB__(v79, v80);
    v81 = v79 - v80;
    if (v65)
      goto LABEL_128;
    if (__OFADD__(v76, v81))
      goto LABEL_129;
    if (v76 + v81 >= v57)
    {
      v82 = v57 < v81;
LABEL_88:
      if (v82)
        v54 = v66;
      goto LABEL_90;
    }
LABEL_82:
    if ((v77 & 1) != 0)
      goto LABEL_124;
    v85 = &v52[16 * v54];
    v87 = *(_QWORD *)v85;
    v86 = *((_QWORD *)v85 + 1);
    v65 = __OFSUB__(v86, v87);
    v88 = v86 - v87;
    if (v65)
      goto LABEL_127;
    if (v88 < v76)
      goto LABEL_15;
LABEL_90:
    v93 = v54 - 1;
    if (v54 - 1 >= v12)
    {
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    v94 = v3;
    v95 = *v3;
    if (!*v3)
      goto LABEL_142;
    v96 = v10;
    v97 = &v52[16 * v93];
    v98 = *(_QWORD *)v97;
    v99 = v54;
    v100 = &v52[16 * v54];
    v101 = *((_QWORD *)v100 + 1);
    sub_100D15BF8((char *)(v95 + 40 * *(_QWORD *)v97), (char *)(v95 + 40 * *(_QWORD *)v100), v95 + 40 * v101, __dst);
    if (v118)
      break;
    if (v101 < v98)
      goto LABEL_117;
    if (v99 > *((_QWORD *)v96 + 2))
      goto LABEL_118;
    *(_QWORD *)v97 = v98;
    *(_QWORD *)&v52[16 * v93 + 8] = v101;
    v102 = *((_QWORD *)v96 + 2);
    if (v99 >= v102)
      goto LABEL_119;
    v10 = v96;
    v12 = v102 - 1;
    memmove(v100, v100 + 16, 16 * (v102 - 1 - v99));
    *((_QWORD *)v96 + 2) = v102 - 1;
    v3 = v94;
    v11 = v116;
    if (v102 <= 2)
      goto LABEL_15;
  }
  v103 = v96;
LABEL_99:
  v104 = v103;
LABEL_100:
  swift_bridgeObjectRelease(v104);
  v112[2] = 0;
  swift_bridgeObjectRelease(v112);
}

uint64_t sub_100D15A88(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  if (a3 != a2)
  {
    v5 = a3;
    v7 = result;
    v8 = 40 * a3 - 40;
LABEL_5:
    v9 = v7;
    v10 = v8;
    while (1)
    {
      v11 = *a4 + v10;
      sub_1004E90B0(v11 + 40, (uint64_t)&v24);
      sub_1004E90B0(v11, (uint64_t)v21);
      v13 = v25;
      v12 = v26;
      sub_1004BB5A4(&v24, v25);
      v14 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 8))(v13);
      v16 = v22;
      v15 = v23;
      sub_1004BB5A4(v21, v22);
      v17 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 8))(v16);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v21);
      result = _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v24);
      if (v14 >= v17)
      {
LABEL_4:
        ++v5;
        v8 += 40;
        if (v5 == a2)
          return result;
        goto LABEL_5;
      }
      v18 = *a4;
      if (!*a4)
        break;
      v19 = v18 + v10;
      sub_1004DB728((__int128 *)(v18 + v10 + 40), (uint64_t)&v24);
      v20 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)(v19 + 40) = *(_OWORD *)v19;
      *(_OWORD *)(v19 + 56) = v20;
      *(_QWORD *)(v19 + 72) = *(_QWORD *)(v19 + 32);
      result = sub_1004DB728(&v24, v19);
      v10 -= 40;
      if (v5 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100D15BF8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t result;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v50 = __src;
  v49 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst)
        memmove(__dst, a2, 40 * v11);
      v26 = &v4[40 * v11];
      v48 = (unint64_t)v26;
      v50 = v6;
      if (__src < v6 && v10 >= 40)
      {
        v27 = a3 - 40;
        while (1)
        {
          v30 = (char *)(v27 + 40);
          sub_1004E90B0((uint64_t)(v26 - 40), (uint64_t)v45);
          v31 = v6 - 40;
          sub_1004E90B0((uint64_t)(v6 - 40), (uint64_t)v42);
          v33 = v46;
          v32 = v47;
          sub_1004BB5A4(v45, v46);
          v34 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v32 + 24) + 8) + 8))(v33);
          v36 = v43;
          v35 = v44;
          sub_1004BB5A4(v42, v43);
          v37 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v35 + 24) + 8) + 8))(v36);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v42);
          _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v45);
          if (v34 >= v37)
          {
            v38 = (char *)v48;
            v26 = (char *)(v48 - 40);
            v48 -= 40;
            if (v30 < v38 || v27 >= (unint64_t)v38 || v30 != v38)
            {
              v39 = *(_OWORD *)v26;
              v40 = *((_OWORD *)v26 + 1);
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v26 + 4);
              *(_OWORD *)v27 = v39;
              *(_OWORD *)(v27 + 16) = v40;
            }
            v31 = v6;
            if (v26 <= v4)
              goto LABEL_40;
          }
          else
          {
            if (v30 != v6 || v27 >= (unint64_t)v6)
            {
              v28 = *(_OWORD *)v31;
              v29 = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v27 = v28;
              *(_OWORD *)(v27 + 16) = v29;
            }
            v50 -= 40;
            v26 = (char *)v48;
            if (v48 <= (unint64_t)v4)
              goto LABEL_40;
          }
          v27 -= 40;
          v6 = v31;
          if (v31 <= __src)
            goto LABEL_40;
        }
      }
      goto LABEL_40;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = (unint64_t)&v4[40 * v9];
    v48 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_1004E90B0((uint64_t)v6, (uint64_t)v45);
        sub_1004E90B0((uint64_t)v4, (uint64_t)v42);
        v14 = v46;
        v13 = v47;
        sub_1004BB5A4(v45, v46);
        v15 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 8))(v14);
        v17 = v43;
        v16 = v44;
        sub_1004BB5A4(v42, v43);
        v18 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8) + 8))(v17);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v42);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v45);
        v19 = v50;
        if (v15 >= v18)
        {
          v23 = v49 + 40;
          if (v50 != v49 || v50 >= v23)
          {
            v24 = *(_OWORD *)v49;
            v25 = *((_OWORD *)v49 + 1);
            *((_QWORD *)v50 + 4) = *((_QWORD *)v49 + 4);
            *v19 = v24;
            v19[1] = v25;
          }
          v49 = v23;
          v20 = (unint64_t)v6;
        }
        else
        {
          v20 = (unint64_t)(v6 + 40);
          if (v50 >= v6 && (unint64_t)v50 < v20 && v50 == v6)
          {
            v19 = v6;
          }
          else
          {
            v21 = *(_OWORD *)v6;
            v22 = *((_OWORD *)v6 + 1);
            *((_QWORD *)v50 + 4) = *((_QWORD *)v6 + 4);
            *v19 = v21;
            v19[1] = v22;
          }
        }
        v50 = (char *)v19 + 40;
        v4 = v49;
        if ((unint64_t)v49 >= v12)
          break;
        v6 = (char *)v20;
      }
      while (v20 < a3);
    }
LABEL_40:
    sub_100D16178((void **)&v50, (const void **)&v49, &v48);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100D15FCC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1004B804C(&qword_10140E5A0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100D160C4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100D163C0(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

char *sub_100D160D0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_100D16178(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_100D16230(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 3;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -4)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7])
      return (char *)memmove(result, v3, 4 * v7);
  }
  return result;
}

uint64_t sub_100D162D8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100D163C0(a1, a2, a3, type metadata accessor for CRLProto_ObjectInfo.DataDirectoryEntry);
}

uint64_t sub_100D162E8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100D163C0(a1, a2, a3, type metadata accessor for CRLBoardLibraryViewModel.Item);
}

uint64_t sub_100D162F4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100D163C0(a1, a2, a3, _s17CategoryViewModelVMa);
}

uint64_t sub_100D16300(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100D163C0(a1, a2, a3, _s13ItemViewModelVMa);
}

char *sub_100D1630C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_100D163B4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100D163C0(a1, a2, a3, type metadata accessor for CRLBoardEntity);
}

uint64_t sub_100D163C0(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  v11 = v9 / v8;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v11 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4, v5, v11, result);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4);
  return result;
}

unint64_t sub_100D164CC(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char v7;

  v3 = *a2;
  v4 = *a3 - v3;
  if (v4 <= -56)
  {
    v7 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = *a1;
    v6 = v4 / 56;
    if (result < v3 || result >= v3 + 56 * v6)
    {
      return swift_arrayInitWithTakeFrontToBack(result, v3, v6, &type metadata for CRLMathCalculationControllerExpression);
    }
    else if (result != v3)
    {
      return swift_arrayInitWithTakeBackToFront(result);
    }
  }
  return result;
}

char *sub_100D165A8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -32)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_100D1664C(uint64_t a1)
{
  return sub_100D15FCC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100D16660(_QWORD *a1)
{
  return sub_100D14B78(0, a1[2], 0, a1, &qword_1013E77A8, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100D16694(uint64_t a1)
{
  return sub_100D1252C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100D166A8(_QWORD *a1)
{
  return sub_100D13224(0, a1[2], 0, a1, &qword_10140E5A8, &qword_1013E8700);
}

uint64_t sub_100D166DC(uint64_t a1)
{
  return sub_100D12968(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100D166F0(_QWORD *a1)
{
  return sub_100D14B78(0, a1[2], 0, a1, &qword_10140E610, type metadata accessor for CRLProto_ObjectInfo.DataDirectoryEntry);
}

uint64_t sub_100D16724(_QWORD *a1)
{
  return sub_100D14B78(0, a1[2], 0, a1, &qword_1014072D0, type metadata accessor for CRLBoardLibraryViewModel.Item);
}

uint64_t sub_100D16758(_QWORD *a1)
{
  return sub_100D14B78(0, a1[2], 0, a1, &qword_1013E78D8, _s17CategoryViewModelVMa);
}

uint64_t sub_100D1678C(_QWORD *a1)
{
  return sub_100D14B78(0, a1[2], 0, a1, &qword_10140E760, _s13ItemViewModelVMa);
}

uint64_t sub_100D167C0(uint64_t a1)
{
  return sub_100D1354C(0, *(_QWORD *)(a1 + 16), 0, (double *)a1);
}

uint64_t sub_100D167D4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100D167E8(_QWORD *a1)
{
  return sub_100D14B78(0, a1[2], 0, a1, &qword_1013E79D0, type metadata accessor for CRLBoardEntity);
}

uint64_t sub_100D1681C(uint64_t a1)
{
  return sub_100D12254(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100D16830(unint64_t a1)
{
  return sub_100D14000(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100D16844(uint64_t a1)
{
  return sub_100D14350(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100D16858(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D1694C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_100D16A3C(uint64_t a1, double a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, double);
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;

  result = _swiftEmptyArrayStorage;
  v28 = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    v6 = (_QWORD *)(a1 + 72);
    do
    {
      v7 = *v6;
      v22 = *((_OWORD *)v6 - 1);
      v8 = v22;
      sub_1004BB5A4(v6 - 5, v22);
      v9 = *(void (**)(uint64_t, uint64_t, double))(v7 + 16);
      v24 = v22;
      v25 = v7;
      sub_10050D1B0(&v23);
      v9(v8, v7, a2);
      v22 = v24;
      v10 = v24;
      v11 = sub_1004BB5A4(&v23, v24);
      v27 = v22;
      v12 = sub_10050D1B0(&v26);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v12, v11, v10);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v23);
      if ((_QWORD)v27)
      {
        sub_1004DB728(&v26, (uint64_t)&v23);
        sub_1004DB728(&v23, (uint64_t)&v26);
        v13 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        {
          v13 = sub_100D101D8(0, v13[2] + 1, 1, v13, &qword_1013E89B8, &qword_1013E20A8);
          v28 = v13;
        }
        v15 = v13[2];
        v14 = v13[3];
        if (v15 >= v14 >> 1)
          v28 = sub_100D101D8((_QWORD *)(v14 > 1), v15 + 1, 1, v13, &qword_1013E89B8, &qword_1013E20A8);
        v16 = v27;
        v17 = sub_1004CB9AC((uint64_t)&v26, v27);
        __chkstk_darwin(v17);
        v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v20 + 16))(v19);
        sub_1005C46A8(v15, (uint64_t)v19, (uint64_t *)&v28, v16, *((uint64_t *)&v16 + 1));
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v26);
      }
      else
      {
        sub_1004CB800((uint64_t)&v26, (uint64_t *)&unk_1013F0490);
      }
      v6 += 6;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return v28;
  }
  return result;
}

uint64_t sub_100D16C94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      type metadata accessor for ActivityType(0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100D16D98(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D16E80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_1004B804C((uint64_t *)&unk_1013E8840);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100D16F8C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100D17074(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D1715C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D17250(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D17344(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 48 * a1 + 32;
  v8 = a3 + 48 * v5;
  if (v7 >= v8 || v7 + 48 * v5 <= a3)
  {
    sub_1004B804C(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100D1744C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100D17534(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D1761C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_1004B804C((uint64_t *)&unk_1013F3E80);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100D17728(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D1780C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 112 * a1 + 32;
  v7 = a3 + 112 * v4;
  if (v6 >= v7 || v6 + 112 * v4 <= a3)
  {
    sub_1004B804C(&qword_1013F3148);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D17918(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_1004B804C(&qword_10140E458);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D17A20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D17B14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D17C08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D17CF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 56 * a1 + 32;
  v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D17DEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D17EE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_1004B804C(&qword_1013E1D60);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D17FE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_1004B804C(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_100D180EC(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v6 = 0;
    v7 = a1 + 40;
    v8 = -(uint64_t)v3;
    v18 = a1 + 40;
    v19 = *(_QWORD *)(a1 + 16);
    do
    {
      if (v6 <= v3)
        v9 = v3;
      else
        v9 = v6;
      v10 = -(uint64_t)v9;
      for (i = (_QWORD *)(v7 + 16 * v6++); ; i += 2)
      {
        if (v10 + v6 == 1)
        {
          __break(1u);
          return;
        }
        v13 = *(i - 1);
        v12 = *i;
        swift_bridgeObjectRetain(*i);
        v14._countAndFlagsBits = a2;
        v14._object = a3;
        if (String.hasPrefix(_:)(v14))
          break;
        swift_bridgeObjectRelease(v12);
        ++v6;
        if (v8 + v6 == 1)
          return;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_1006006EC(0, *(_QWORD *)&_swiftEmptyArrayStorage[2] + 1, 1);
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (*(_QWORD *)&v16 >= *(_QWORD *)&v15 >> 1)
        sub_1006006EC(*(_QWORD *)&v15 > 1uLL, *(_QWORD *)&v16 + 1, 1);
      *(_QWORD *)&_swiftEmptyArrayStorage[2] = *(_QWORD *)&v16 + 1;
      v17 = &_swiftEmptyArrayStorage[2 * *(_QWORD *)&v16];
      *((_QWORD *)v17 + 4) = v13;
      *((_QWORD *)v17 + 5) = v12;
      v7 = v18;
      v3 = v19;
    }
    while (v8 + v6);
  }
}

double *sub_100D18240(uint64_t a1, void *a2, unsigned __int8 a3)
{
  double *result;
  uint64_t v5;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  double *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;

  result = _swiftEmptyArrayStorage;
  v39 = _swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    for (i = a1 + 32; ; i += 40)
    {
      sub_1004E90B0(i, (uint64_t)&v36);
      v9 = v37;
      v10 = v38;
      sub_1004BB5A4(&v36, v37);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 64))(v9, v10);
      if (!v11)
        break;
      v12 = (void *)v11;
      sub_1004EB280();
      v13 = a2;
      v14 = static NSObject.== infix(_:_:)(v12, v13);

      sub_1004E90B0((uint64_t)&v36, (uint64_t)&v33);
      if ((v14 & 1) == 0)
        goto LABEL_4;
      v15 = v34;
      v16 = v35;
      sub_1004BB5A4(&v33, v34);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v16 + 88))(v30, v15, v16);
      v17 = v31;
      v18 = v32;
      sub_1004BB5A4(v30, v31);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 80))(v17, v18);
      v20 = sub_1008A4EC8(v19);
      v22 = v21;
      v24 = sub_1008A4EC8(a3);
      v25 = v23;
      if (v20 == v24 && v22 == v23)
      {
        swift_bridgeObjectRelease_n(v22, 2);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v30);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v33);
LABEL_13:
        sub_1004DB728(&v36, (uint64_t)&v33);
        v27 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
        {
          sub_10060091C(0, *((_QWORD *)v27 + 2) + 1, 1);
          v27 = v39;
        }
        v29 = *((_QWORD *)v27 + 2);
        v28 = *((_QWORD *)v27 + 3);
        if (v29 >= v28 >> 1)
        {
          sub_10060091C(v28 > 1, v29 + 1, 1);
          v27 = v39;
        }
        *((_QWORD *)v27 + 2) = v29 + 1;
        sub_1004DB728(&v33, (uint64_t)&v27[5 * v29 + 4]);
        goto LABEL_6;
      }
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v24, v23, 0);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v25);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v30);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v33);
      if ((v26 & 1) != 0)
        goto LABEL_13;
LABEL_5:
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v36);
LABEL_6:
      if (!--v5)
        return v39;
    }
    sub_1004E90B0((uint64_t)&v36, (uint64_t)&v33);
LABEL_4:
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v33);
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_100D184A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CRLTweenLayerAnimation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_100D184E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100D184F8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100D18504()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  if (v0[4])
    swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  if (v0[8])
    swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100D18558()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  if (v0[4])
    swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  if (v0[10])
    swift_release(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100D185B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_1004B804C(&qword_1013E60C8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D186BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_1004B804C(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D187C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D188B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D189A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 16 * a1 + 32;
    v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      sub_1004B804C(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D18AAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D18BA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_1004B804C(&qword_10140E898);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100D18CAC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 24 * a1 + 32);
  v6 = 24 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100D18D98(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 56 * a1 + 32);
  v6 = 56 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D18E84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_1004B804C(&qword_10140E650);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D18F8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_1004B804C(&qword_10140E600);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D19098(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(sub_1004B804C(a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D191B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100D1929C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D19390(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D19484(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100D1959C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100D196AC()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform22CRLSelectionDispatcher_selectionStateSnapshots);
  if (objc_msgSend(v1, "count"))
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"snapshotSelectionState()", 24, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLSelectionDispatcher.swift", 92, 2, 18, "Expected selection state snapshots to be clear", 46, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"snapshotSelectionState()", 24, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLSelectionDispatcher.swift", 92, 2u, 18, (uint64_t)"Expected selection state snapshots to be clear", 46, 2u);
  }
  objc_msgSend(v1, "removeAllObjects");
  v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8Freeform22CRLSelectionDispatcher_receivers), "allObjects"));
  v3 = sub_1004B804C(&qword_10140E960);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_5;
LABEL_17:
    swift_bridgeObjectRelease(v4);
    return;
  }
  if (v4 < 0)
    v10 = v4;
  else
    v10 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_17;
LABEL_5:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      }
      else
      {
        v7 = *(void **)(v4 + 8 * i + 32);
        swift_unknownObjectRetain(v7);
      }
      v8 = objc_msgSend(v7, "selectionStateSnapshot");
      if (v8)
      {
        v9 = v8;
        objc_msgSend(v1, "setObject:forKey:", v9, v7);

      }
      swift_unknownObjectRelease(v7);
    }
    goto LABEL_17;
  }
  __break(1u);
}

void sub_100D19914(void *a1, char a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t Strong;
  void *v14;
  char *v15;
  uint64_t v16;
  Class isa;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  Class v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  Class v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  id v48;
  Class v49;
  unint64_t v50;
  id v51;
  id v52;
  Class v53;
  unint64_t v54;
  id v55;
  Class v56;
  unint64_t v57;
  char *v58;
  id v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v68[24];
  char v69[24];
  char v70[32];

  v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                             + OBJC_IVAR____TtC8Freeform22CRLSelectionDispatcher_receivers), "allObjects"));
  v5 = sub_1004B804C(&qword_10140E960);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v60 = v6;
    else
      v60 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v60);
    swift_bridgeObjectRelease(v6);
    if (v7)
      goto LABEL_3;
LABEL_50:
    swift_bridgeObjectRelease(v6);
    return;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_50;
LABEL_3:
  if (v7 >= 1)
  {
    v8 = 0;
    v62 = v6;
    v63 = OBJC_IVAR____TtC8Freeform22CRLSelectionDispatcher_selectionStateSnapshots;
    v65 = v7;
    v66 = v6 & 0xC000000000000001;
    v61 = a1;
    while (1)
    {
      if (v66)
      {
        v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      }
      else
      {
        v9 = *(void **)(v6 + 8 * v8 + 32);
        swift_unknownObjectRetain(v9);
      }
      v10 = (char *)objc_msgSend(v9, "selectionPathValidator");
      if (a2)
      {
        if (a2 == 1)
        {
          v11 = (char *)objc_msgSend(a1, "persistableReverseSelectionPath");
          if (v11)
          {
            v12 = v11;
            Strong = swift_unknownObjectWeakLoadStrong(&v10[OBJC_IVAR____TtC8Freeform25CRLSelectionPathValidator_board]);
            if (Strong)
            {
              v14 = (void *)Strong;
              v15 = &v12[OBJC_IVAR____TtC8Freeform27CRLPersistableSelectionPath_mostSpecificItemSelectionUUIDs];
              swift_beginAccess(&v12[OBJC_IVAR____TtC8Freeform27CRLPersistableSelectionPath_mostSpecificItemSelectionUUIDs], v69, 0, 0);
              v16 = *(_QWORD *)v15;
              type metadata accessor for UUID(0);
              swift_bridgeObjectRetain(v16);
              isa = Array._bridgeToObjectiveC()().super.isa;
              v18 = objc_msgSend(v14, "resolveToSiblingsWithUuids:", isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

              v19 = type metadata accessor for CRLBoardItem(0);
              v20 = sub_10058528C();
              v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v18, v19, v20);

              v22 = sub_100585688(v21, (uint64_t)v12);
              *(_QWORD *)&v23 = swift_bridgeObjectRelease(v21).n128_u64[0];
            }
            else
            {
              sub_100757E04(&_mh_execute_header, (uint64_t)"selectionPathFrom(persistableSelectionPath:)", 44, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLSelectionPathValidator.swift", 92, 2, 29, "Can't get selectionPath with a nil board", 40, 2u, (uint64_t)_swiftEmptyArrayStorage);
              a1 = v61;
              v6 = v62;
              sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"selectionPathFrom(persistableSelectionPath:)", 44, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLSelectionPathValidator.swift", 92, 2u, 29, (uint64_t)"Can't get selectionPath with a nil board", 40, 2u);
              v48 = *(id *)&v10[OBJC_IVAR____TtC8Freeform25CRLSelectionPathValidator_selectionModelTranslator];
              v49 = Set._bridgeToObjectiveC()().super.isa;
              v22 = objc_msgSend(v48, "selectionPathForInfos:", v49);

            }
            v50 = (unint64_t)objc_msgSend(a1, "selectionFlags", v23);
            v51 = objc_msgSend(a1, "additionalReverseSelectionFlags");
            goto LABEL_34;
          }
        }
        else
        {
          v37 = (char *)objc_msgSend(a1, "persistableForwardSelectionPath");
          if (v37)
          {
            v12 = v37;
            v38 = swift_unknownObjectWeakLoadStrong(&v10[OBJC_IVAR____TtC8Freeform25CRLSelectionPathValidator_board]);
            if (v38)
            {
              v39 = (void *)v38;
              v40 = &v12[OBJC_IVAR____TtC8Freeform27CRLPersistableSelectionPath_mostSpecificItemSelectionUUIDs];
              swift_beginAccess(&v12[OBJC_IVAR____TtC8Freeform27CRLPersistableSelectionPath_mostSpecificItemSelectionUUIDs], v70, 0, 0);
              v41 = *(_QWORD *)v40;
              type metadata accessor for UUID(0);
              swift_bridgeObjectRetain(v41);
              v42 = Array._bridgeToObjectiveC()().super.isa;
              v43 = objc_msgSend(v39, "resolveToSiblingsWithUuids:", v42, swift_bridgeObjectRelease(v41).n128_f64[0]);

              v44 = type metadata accessor for CRLBoardItem(0);
              v45 = sub_10058528C();
              v46 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v43, v44, v45);

              v22 = sub_100585688(v46, (uint64_t)v12);
              *(_QWORD *)&v47 = swift_bridgeObjectRelease(v46).n128_u64[0];
            }
            else
            {
              sub_100757E04(&_mh_execute_header, (uint64_t)"selectionPathFrom(persistableSelectionPath:)", 44, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLSelectionPathValidator.swift", 92, 2, 29, "Can't get selectionPath with a nil board", 40, 2u, (uint64_t)_swiftEmptyArrayStorage);
              a1 = v61;
              v6 = v62;
              sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"selectionPathFrom(persistableSelectionPath:)", 44, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLSelectionPathValidator.swift", 92, 2u, 29, (uint64_t)"Can't get selectionPath with a nil board", 40, 2u);
              v55 = *(id *)&v10[OBJC_IVAR____TtC8Freeform25CRLSelectionPathValidator_selectionModelTranslator];
              v56 = Set._bridgeToObjectiveC()().super.isa;
              v22 = objc_msgSend(v55, "selectionPathForInfos:", v56);

            }
            v50 = (unint64_t)objc_msgSend(a1, "selectionFlags", v47);
            v51 = objc_msgSend(a1, "additionalForwardSelectionFlags");
LABEL_34:
            v57 = (unint64_t)v51;

            if (v50)
            {
              v7 = v65;
              if ((v57 & ~v50) != 0)
LABEL_38:
                v50 |= v57;
            }
            else
            {
              v7 = v65;
              if (v57)
                goto LABEL_38;
              v50 = 0;
            }
LABEL_41:
            v58 = (char *)v22;
            if (objc_msgSend(v9, "isPrimarySelectionPathReceiver"))
            {
              objc_msgSend(v9, "dispatchSelectionPath:withFlags:", v58, v50);

              swift_unknownObjectRelease(v9);
            }
            else
            {
              v59 = objc_msgSend(*(id *)(v64 + v63), "objectForKeyedSubscript:", v9);
              objc_msgSend(v9, "validateSelectionStateUsing:", v59);

              swift_unknownObjectRelease(v9);
            }

            v10 = v58;
            goto LABEL_6;
          }
        }
      }
      else
      {
        v24 = (char *)objc_msgSend(a1, "persistableCommitSelectionPath");
        if (v24)
        {
          v25 = v24;
          v26 = swift_unknownObjectWeakLoadStrong(&v10[OBJC_IVAR____TtC8Freeform25CRLSelectionPathValidator_board]);
          if (v26)
          {
            v27 = (void *)v26;
            v28 = &v25[OBJC_IVAR____TtC8Freeform27CRLPersistableSelectionPath_mostSpecificItemSelectionUUIDs];
            swift_beginAccess(&v25[OBJC_IVAR____TtC8Freeform27CRLPersistableSelectionPath_mostSpecificItemSelectionUUIDs], v68, 0, 0);
            v29 = *(_QWORD *)v28;
            type metadata accessor for UUID(0);
            swift_bridgeObjectRetain(v29);
            v30 = Array._bridgeToObjectiveC()().super.isa;
            v31 = objc_msgSend(v27, "resolveToSiblingsWithUuids:", v30, swift_bridgeObjectRelease(v29).n128_f64[0]);

            v32 = type metadata accessor for CRLBoardItem(0);
            v33 = sub_10058528C();
            v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v31, v32, v33);

            v22 = sub_100585688(v34, (uint64_t)v25);
            v35 = v34;
            v7 = v65;
            *(_QWORD *)&v36 = swift_bridgeObjectRelease(v35).n128_u64[0];
          }
          else
          {
            sub_100757E04(&_mh_execute_header, (uint64_t)"selectionPathFrom(persistableSelectionPath:)", 44, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLSelectionPathValidator.swift", 92, 2, 29, "Can't get selectionPath with a nil board", 40, 2u, (uint64_t)_swiftEmptyArrayStorage);
            a1 = v61;
            v6 = v62;
            sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"selectionPathFrom(persistableSelectionPath:)", 44, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLKit/CRLSelectionPathValidator.swift", 92, 2u, 29, (uint64_t)"Can't get selectionPath with a nil board", 40, 2u);
            v52 = *(id *)&v10[OBJC_IVAR____TtC8Freeform25CRLSelectionPathValidator_selectionModelTranslator];
            v53 = Set._bridgeToObjectiveC()().super.isa;
            v22 = objc_msgSend(v52, "selectionPathForInfos:", v53);

          }
        }
        else
        {
          v22 = objc_msgSend(a1, "commitSelectionPath");
        }
        v50 = (unint64_t)objc_msgSend(a1, "selectionFlags", v36);
        v54 = (unint64_t)objc_msgSend(a1, "additionalCommitSelectionFlags");
        if (v50)
        {
          if ((v54 & ~v50) == 0)
          {
            if (v22)
              goto LABEL_41;
            goto LABEL_5;
          }
LABEL_30:
          v50 |= v54;
          if (v22)
            goto LABEL_41;
          goto LABEL_5;
        }
        if (v54)
          goto LABEL_30;
        v50 = 0;
        if (v22)
          goto LABEL_41;
      }
LABEL_5:
      swift_unknownObjectRelease(v9);
LABEL_6:
      ++v8;

      if (v7 == v8)
      {
        swift_bridgeObjectRelease(v6);
        return;
      }
    }
  }
  __break(1u);
}

void sub_100D1A1EC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;

  v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8Freeform22CRLSelectionDispatcher_receivers), "allObjects"));
  v2 = sub_1004B804C(&qword_10140E960);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v3);
    return;
  }
  if (v3 < 0)
    v9 = v3;
  else
    v9 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v4 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(v3);
  if (!v4)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform22CRLSelectionDispatcher_selectionStateSnapshots);
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else
      {
        v7 = *(void **)(v3 + 8 * v5 + 32);
        swift_unknownObjectRetain(v7);
      }
      ++v5;
      v8 = objc_msgSend(v6, "objectForKeyedSubscript:", v7);
      objc_msgSend(v7, "validateSelectionStateUsing:", v8);
      swift_unknownObjectRelease(v7);

    }
    while (v4 != v5);
    goto LABEL_13;
  }
  __break(1u);
}

id sub_100D1A428()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLSelectionDispatcher();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLSelectionDispatcher()
{
  return objc_opt_self(_TtC8Freeform22CRLSelectionDispatcher);
}

id sub_100D1A4B0(uint64_t a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  id v6;
  NSString v7;
  NSString v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_super v16;

  v3 = &v1[OBJC_IVAR____TtC8Freeform23CRLCommandReorderScenes_actionString];
  v4 = (void *)objc_opt_self(NSBundle);
  v5 = v1;
  v6 = objc_msgSend(v4, "mainBundle");
  v7 = String._bridgeToObjectiveC()();
  v8 = String._bridgeToObjectiveC()();
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v6, "localizedStringForKey:value:table:", v7, v8, v9);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v12 = v11;
  v14 = v13;

  *(_QWORD *)v3 = v12;
  *((_QWORD *)v3 + 1) = v14;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform23CRLCommandReorderScenes_reorderedScenes] = a1;

  v16.receiver = v5;
  v16.super_class = (Class)type metadata accessor for CRLCommandReorderScenes();
  return objc_msgSendSuper2(&v16, "init");
}

void sub_100D1A600(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  id v7;
  __n128 v8;
  uint64_t v9;
  _BYTE v10[24];

  sub_100DBEE64(a1, (uint64_t)&off_1012942F0);
  if (!v4)
  {
    if ((sub_100B1DADC(*(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform23CRLCommandReorderScenes_reorderedScenes)) & 1) != 0)
    {
      sub_100DB0D78(a1, (uint64_t)&off_1012942F0, a3);
    }
    else
    {
      if (qword_1013DD7E0 != -1)
        swift_once(&qword_1013DD7E0, sub_100A03F14);
      swift_beginAccess(&static OS_os_log.crlScenes, v10, 0, 0);
      v7 = (id)static OS_os_log.crlScenes;
      v9 = static os_log_type_t.default.getter(v8);
      sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v9, "Scene Reordering Failed.", 24, 2, (uint64_t)_swiftEmptyArrayStorage);

    }
  }
}

uint64_t sub_100D1A748()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform23CRLCommandReorderScenes_reorderedScenes));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform23CRLCommandReorderScenes_actionString + 8));
}

id sub_100D1A778()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLCommandReorderScenes();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLCommandReorderScenes()
{
  return objc_opt_self(_TtC8Freeform23CRLCommandReorderScenes);
}

uint64_t sub_100D1A804()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Freeform23CRLCommandReorderScenes_actionString);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t type metadata accessor for CRLFileWriteAssetDownloadAlertViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_10140E9A0;
  if (!qword_10140E9A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLFileWriteAssetDownloadAlertViewController);
  return result;
}

uint64_t sub_100D1A87C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1014812E8);
}

uint64_t sub_100D1A8B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v2 = v1;
  v29 = a1;
  v3 = sub_1004B804C(&qword_10140EAA8);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C(&qword_10140EAB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1004B804C(&qword_10140EAB8);
  v9 = __chkstk_darwin(v28);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v9);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v12 = sub_1004B804C(&qword_10140EAC0);
  sub_100D1AB14(v1, (uint64_t)&v5[*(int *)(v12 + 44)]);
  v30 = *(_OWORD *)v1;
  v13 = *(_QWORD *)(v1 + 16);
  v14 = *(_QWORD *)(v2 + 24);
  v15 = *(_QWORD *)(v2 + 32);
  v17 = *(_QWORD *)(v2 + 40);
  v16 = *(_QWORD *)(v2 + 48);
  v26 = *(_QWORD *)(v2 + 56);
  v27 = v16;
  v18 = (_OWORD *)swift_allocObject(&unk_1012A0D70, 80, 7);
  v19 = *(_OWORD *)(v2 + 16);
  v18[1] = *(_OWORD *)v2;
  v18[2] = v19;
  v20 = *(_OWORD *)(v2 + 48);
  v18[3] = *(_OWORD *)(v2 + 32);
  v18[4] = v20;
  sub_1004CB7BC((uint64_t)v5, (uint64_t)v8, &qword_10140EAA8);
  v21 = &v8[*(int *)(v6 + 36)];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = sub_100D1C740;
  *((_QWORD *)v21 + 3) = v18;
  sub_1008A33FC((uint64_t)&v30);
  sub_1004C0F54(v13, v14);
  sub_1004C0F54(v15, v17);
  sub_1004C0F54(v27, v26);
  v22 = sub_1004CB800((uint64_t)v5, &qword_10140EAA8);
  LOBYTE(v17) = static Edge.Set.all.getter(v22);
  sub_1004CB7BC((uint64_t)v8, (uint64_t)v11, &qword_10140EAB0);
  v23 = &v11[*(int *)(v28 + 36)];
  *v23 = v17;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  v23[40] = 1;
  sub_1004CB800((uint64_t)v8, &qword_10140EAB0);
  v24 = v29;
  sub_1004CB7BC((uint64_t)v11, v29, &qword_10140EAB8);
  *(_WORD *)(v24 + *(int *)(sub_1004B804C(&qword_10140EAC8) + 36)) = 256;
  return sub_1004CB800((uint64_t)v11, &qword_10140EAB8);
}

double sub_100D1AB14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  char v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double result;
  uint64_t v93;
  int v94;
  int v95;
  char *v96;
  uint64_t v97;
  int v98;
  char *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;

  v105 = a1;
  v3 = sub_1004B804C(&qword_10140EAD0);
  __chkstk_darwin(v3);
  v5 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_1004B804C(&qword_10140EAD8);
  __chkstk_darwin(v107);
  v113 = (uint64_t)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v106 = (uint64_t)&v93 - v8;
  v10 = __chkstk_darwin(v9);
  v111 = (uint64_t)&v93 - v11;
  v12 = type metadata accessor for Divider(0, v10);
  v101 = *(_QWORD *)(v12 - 8);
  v102 = v12;
  __chkstk_darwin(v12);
  v99 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1004B804C(&qword_10140EAE0);
  __chkstk_darwin(v97);
  v112 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v96 = (char *)&v93 - v16;
  __chkstk_darwin(v17);
  v114 = (uint64_t)&v93 - v18;
  v19 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ALL, 0x800000010100C710);
  v20 = Text.init(_:tableName:bundle:comment:)(v19);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = static Font.headline.getter();
  v28 = Text.font(_:)(v27, v20, v22, v26, v24);
  v108 = v29;
  v109 = v28;
  v98 = v30;
  v110 = v31;
  swift_release(v27);
  sub_1005EFC24(v20, v22, v26);
  swift_bridgeObjectRelease();
  v33 = static Edge.Set.top.getter(v32);
  v34 = Edge.Set.init(rawValue:)(0);
  v35 = v34;
  v36 = Edge.Set.init(rawValue:)(v34);
  if (Edge.Set.init(rawValue:)(v36 & v33) != v33)
    v35 = Edge.Set.init(rawValue:)(v35 | v33);
  v100 = v35;
  v37 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000037, 0x800000010100C740);
  v38 = Text.init(_:tableName:bundle:comment:)(v37);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  v45 = static Font.body.getter();
  v46 = Text.font(_:)(v45, v38, v40, v44, v42);
  v103 = v47;
  v94 = v48;
  v104 = v49;
  swift_release(v45);
  sub_1005EFC24(v38, v40, v44);
  swift_bridgeObjectRelease();
  v51 = static Edge.Set.top.getter(v50);
  v52 = Edge.Set.init(rawValue:)(0);
  v53 = v52;
  v54 = Edge.Set.init(rawValue:)(v52);
  v55 = Edge.Set.init(rawValue:)(v54 & v51);
  if (v55 != v51)
  {
    v55 = Edge.Set.init(rawValue:)(v53 | v51);
    v53 = v55;
  }
  v56 = v99;
  v57 = Divider.init()(v55);
  v58 = static Edge.Set.top.getter(v57);
  v59 = v58;
  v60 = static Edge.Set.leading.getter(v58);
  v61 = static Edge.Set.trailing.getter();
  v62 = Edge.Set.init(rawValue:)(0);
  v63 = Edge.Set.init(rawValue:)(v62);
  if (Edge.Set.init(rawValue:)(v63 & v59) != v59)
    v62 = Edge.Set.init(rawValue:)(v62 | v59);
  v64 = Edge.Set.init(rawValue:)(v62);
  if (Edge.Set.init(rawValue:)(v64 & v60) != v60)
    v62 = Edge.Set.init(rawValue:)(v62 | v60);
  v65 = Edge.Set.init(rawValue:)(v62);
  v66 = Edge.Set.init(rawValue:)(v65 & v61);
  v95 = v53;
  if (v66 != v61)
    LOBYTE(v62) = Edge.Set.init(rawValue:)(v62 | v61);
  v68 = v101;
  v67 = v102;
  v69 = (uint64_t)v96;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v96, v56, v102);
  v70 = v69 + *(int *)(v97 + 36);
  *(_BYTE *)v70 = v62;
  *(_OWORD *)(v70 + 8) = 0u;
  *(_OWORD *)(v70 + 24) = 0u;
  *(_BYTE *)(v70 + 40) = 1;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v56, v67);
  sub_1004C4938(v69, v114, &qword_10140EAE0);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v71);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v72 = sub_1004B804C(&qword_10140EAE8);
  v73 = sub_100D1B260(v105, &v5[*(int *)(v72 + 44)]);
  v74 = static Edge.Set.top.getter(v73);
  v75 = Edge.Set.init(rawValue:)(0);
  v76 = v75;
  v77 = Edge.Set.init(rawValue:)(v75);
  if (Edge.Set.init(rawValue:)(v77 & v74) != v74)
    LOBYTE(v76) = Edge.Set.init(rawValue:)(v76 | v74);
  v78 = v94 & 1;
  v79 = v98 & 1;
  v80 = v106;
  sub_1004CB7BC((uint64_t)v5, v106, &qword_10140EAD0);
  v81 = v80 + *(int *)(v107 + 36);
  *(_BYTE *)v81 = v76;
  *(_OWORD *)(v81 + 8) = 0u;
  *(_OWORD *)(v81 + 24) = 0u;
  *(_BYTE *)(v81 + 40) = 1;
  sub_1004CB800((uint64_t)v5, &qword_10140EAD0);
  v82 = v111;
  sub_1004C4938(v80, v111, &qword_10140EAD8);
  LODWORD(v105) = v79;
  v116 = v79;
  v115 = v78;
  v83 = v112;
  sub_1004CB7BC(v114, v112, &qword_10140EAE0);
  sub_1004CB7BC(v82, v113, &qword_10140EAD8);
  v84 = v108;
  v85 = v109;
  *(_QWORD *)a2 = v109;
  *(_QWORD *)(a2 + 8) = v84;
  *(_BYTE *)(a2 + 16) = v79;
  v86 = v110;
  *(_QWORD *)(a2 + 24) = v110;
  *(_BYTE *)(a2 + 32) = v100;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_BYTE *)(a2 + 72) = 1;
  v87 = v103;
  *(_QWORD *)(a2 + 80) = v46;
  *(_QWORD *)(a2 + 88) = v87;
  *(_BYTE *)(a2 + 96) = v78;
  v88 = v46;
  v89 = v104;
  *(_QWORD *)(a2 + 104) = v104;
  *(_BYTE *)(a2 + 112) = v95;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_BYTE *)(a2 + 152) = 1;
  v90 = sub_1004B804C(&qword_10140EAF0);
  sub_1004CB7BC(v83, a2 + *(int *)(v90 + 64), &qword_10140EAE0);
  v91 = v113;
  sub_1004CB7BC(v113, a2 + *(int *)(v90 + 80), &qword_10140EAD8);
  LOBYTE(v90) = v105;
  sub_1006CCFD0(v85, v84, v105);
  swift_bridgeObjectRetain(v86);
  sub_1006CCFD0(v88, v87, v78);
  swift_bridgeObjectRetain(v89);
  sub_1006CCFD0(v85, v84, v90);
  swift_bridgeObjectRetain(v86);
  sub_1006CCFD0(v88, v87, v78);
  swift_bridgeObjectRetain(v89);
  sub_1004CB800(v111, &qword_10140EAD8);
  sub_1004CB800(v114, &qword_10140EAE0);
  sub_1005EFC24(v88, v87, v78);
  swift_bridgeObjectRelease();
  sub_1005EFC24(v85, v84, v90);
  swift_bridgeObjectRelease();
  sub_1004CB800(v91, &qword_10140EAD8);
  sub_1004CB800(v112, &qword_10140EAE0);
  sub_1005EFC24(v88, v87, v115);
  swift_bridgeObjectRelease();
  sub_1005EFC24(v85, v84, v116);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100D1B260@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  __int128 v74;
  char v75;
  _OWORD v76[2];

  v73 = a2;
  v71 = sub_1004B804C(&qword_10140EAF8);
  __chkstk_darwin(v71);
  v72 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v68 = (char *)&v56 - v5;
  __chkstk_darwin(v6);
  v70 = (uint64_t)&v56 - v7;
  v64 = sub_1004B804C(&qword_1013E7038);
  v67 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v69 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v66 = (char *)&v56 - v10;
  __chkstk_darwin(v11);
  v65 = (char *)&v56 - v12;
  v59 = LocalizedStringKey.init(stringLiteral:)(0x65756E69746E6F43, 0xE800000000000000);
  v58 = v13;
  v15 = v14;
  v57 = v16;
  v76[0] = *(_OWORD *)a1;
  v18 = *(_QWORD *)(a1 + 16);
  v60 = *(_QWORD *)(a1 + 24);
  v17 = v60;
  v61 = v18;
  v19 = *(_QWORD *)(a1 + 32);
  v62 = *(_QWORD *)(a1 + 40);
  v20 = v62;
  v63 = v19;
  v21 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = (_OWORD *)swift_allocObject(&unk_1012A0D98, 80, 7);
  v24 = *(_OWORD *)(a1 + 16);
  v23[1] = *(_OWORD *)a1;
  v23[2] = v24;
  v25 = *(_OWORD *)(a1 + 48);
  v23[3] = *(_OWORD *)(a1 + 32);
  v23[4] = v25;
  sub_1008A33FC((uint64_t)v76);
  sub_1004C0F54(v18, v17);
  sub_1004C0F54(v19, v20);
  sub_1004C0F54(v21, v22);
  Button<>.init(_:action:)(v59, v58, v15 & 1, v57, sub_100D1C76C, v23);
  v74 = v76[0];
  v26 = sub_1004B804C(&qword_101401590);
  State.wrappedValue.getter(v26);
  if (v75)
    v27 = 0xEB00000000676E69;
  else
    v27 = 0xE800000000000000;
  v28 = LocalizedStringKey.init(stringLiteral:)(0x64616F6C6E776F44, v27);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = (_OWORD *)swift_allocObject(&unk_1012A0DC0, 80, 7);
  v36 = *(_OWORD *)(a1 + 16);
  v35[1] = *(_OWORD *)a1;
  v35[2] = v36;
  v37 = *(_OWORD *)(a1 + 48);
  v35[3] = *(_OWORD *)(a1 + 32);
  v35[4] = v37;
  sub_1008A33FC((uint64_t)v76);
  sub_1004C0F54(v61, v60);
  sub_1004C0F54(v63, v62);
  sub_1004C0F54(v21, v22);
  v38 = v66;
  Button<>.init(_:action:)(v28, v30, v32 & 1, v34, sub_100D1C7EC, v35);
  v74 = v76[0];
  State.wrappedValue.getter(v26);
  v39 = v75;
  KeyPath = swift_getKeyPath("H$T");
  v41 = swift_allocObject(&unk_1012A0DE8, 17, 7);
  *(_BYTE *)(v41 + 16) = v39;
  v43 = v67;
  v42 = (uint64_t)v68;
  v44 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v45 = v64;
  v44(v68, v38, v64);
  v46 = (uint64_t *)(v42 + *(int *)(v71 + 36));
  *v46 = KeyPath;
  v46[1] = (uint64_t)sub_100D1C8B8;
  v46[2] = v41;
  v47 = *(void (**)(char *, uint64_t))(v43 + 8);
  v47(v38, v45);
  v48 = v70;
  sub_1004C4938(v42, v70, &qword_10140EAF8);
  v49 = v69;
  v50 = v65;
  v44(v69, v65, v45);
  v51 = v72;
  sub_1004CB7BC(v48, v72, &qword_10140EAF8);
  v52 = v73;
  *v73 = 0;
  *((_BYTE *)v52 + 8) = 1;
  v53 = (char *)v52;
  v54 = sub_1004B804C(&qword_10140EB00);
  v44(&v53[*(int *)(v54 + 48)], v49, v45);
  sub_1004CB7BC(v51, (uint64_t)&v53[*(int *)(v54 + 64)], &qword_10140EAF8);
  sub_1004CB800(v48, &qword_10140EAF8);
  v47(v50, v45);
  sub_1004CB800(v51, &qword_10140EAF8);
  return ((uint64_t (*)(char *, uint64_t))v47)(v49, v45);
}

uint64_t sub_100D1B6B0(__int128 *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t);
  char v5;
  __int128 v6;

  v6 = *a1;
  v5 = 1;
  v2 = sub_1004B804C(&qword_101401590);
  result = State.wrappedValue.setter(&v5, v2);
  v4 = (uint64_t (*)(uint64_t))*((_QWORD *)a1 + 4);
  if (v4)
    return v4(result);
  return result;
}

uint64_t sub_100D1B710@<X0>(uint64_t a1@<X8>)
{
  return sub_100D1A8B8(a1);
}

uint64_t sub_100D1B748(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v9 = 0;
  v3 = a3;
  State.init(wrappedValue:)(&v5, &v9, &type metadata for Bool);
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  return UIHostingController.init(coder:rootView:)(v3, &v5);
}

void sub_100D1B7B8(void *a1)
{
  id v1;
  id v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)type metadata accessor for CRLFileWriteAssetDownloadAlertViewController(0);
  v1 = v8.receiver;
  objc_msgSendSuper2(&v8, "viewDidLoad");
  v2 = objc_msgSend(v1, "view", v8.receiver, v8.super_class);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "intrinsicContentSize");
    v5 = v4;
    v7 = v6;

    objc_msgSend(v1, "setPreferredContentSize:", v5, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100D1B864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = v4;
  v3[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[7] = v5;
  v3[8] = v6;
  return swift_task_switch(sub_100D1B8D8, v5, v6);
}

uint64_t sub_100D1B8D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform8CRLBoard_data);
  v3 = *(id *)(v1 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
  swift_retain(v2);
  v4 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
  sub_100A63508(v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4);
  v7 = sub_100AF7994(v6);
  swift_release(v2);
  swift_bridgeObjectRelease(v6);
  v8 = *(id *)(v1 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
  sub_1007409E0(1);
  v10 = v9;

  sub_10051257C(v10);
  v11 = type metadata accessor for CRLAssetDownloadHelper(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v0[9] = v12;
  v14 = swift_defaultActor_initialize(v12, v13);
  UUID.init()(v14);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper__assetUUIDsNeedingDownload) = 0;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_isDownloading) = 0;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_downloadWasCancelled) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC8Freeform22CRLAssetDownloadHelper_assetUUIDsBeingDownloaded) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v12 + 112) = v3;
  *(_QWORD *)(v12 + 120) = v7;
  v15 = (_QWORD *)swift_task_alloc(dword_1013DFD14);
  v0[10] = v15;
  *v15 = v0;
  v15[1] = sub_100D1BA48;
  return sub_1004CBB64();
}

uint64_t sub_100D1BA48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100D1BAA4, v3, 0);
}

uint64_t sub_100D1BAA4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[12] = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100D1BAE4, v0[7], v0[8]);
}

uint64_t sub_100D1BAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  __n128 v11;

  v1 = *(_QWORD *)(v0 + 72);
  if (*(_QWORD *)(v0 + 96))
  {
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(void **)(v0 + 24);
    v4 = type metadata accessor for CRLFileWriteAssetDownloadAlertViewController.ParentWrapper();
    v5 = swift_allocObject(v4, 24, 7);
    *(_QWORD *)(v0 + 104) = v5;
    *(_QWORD *)(v5 + 16) = v3;
    v6 = static MainActor.shared.getter(v3);
    *(_QWORD *)(v0 + 112) = v6;
    v7 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 120) = v7;
    v7[2] = v2;
    v7[3] = v1;
    v7[4] = v5;
    v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 128) = v8;
    *v8 = v0;
    v8[1] = sub_100D1BC04;
    return withCheckedContinuation<A>(isolation:function:_:)(v8, v6, &protocol witness table for MainActor, 0xD000000000000021, 0x800000010100C7C0, sub_100D1C8D0, v7, (char *)&type metadata for () + 8);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 48);
    swift_release(*(_QWORD *)(v0 + 72));
    v11 = swift_release(v10);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v11);
  }
}

uint64_t sub_100D1BC04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 120);
  v3 = *(_QWORD *)(*v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100D1BC6C, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100D1BC6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v2);
  v3 = swift_release(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

id sub_100D1BCB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  __n128 v13;
  void (*v14)(_BYTE *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  __n128 v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  void (*v29)(_BYTE *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[32];

  v8 = sub_1004B804C(&qword_1013EF328);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)swift_allocObject(&unk_1012A0E10, 40, 7);
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a2;
  swift_retain(a3);
  swift_retain(a4);
  v12 = a2;
  v14 = (void (*)(_BYTE *, _QWORD))dispatch thunk of UIHostingController.rootView.modify(v34, v13);
  v16 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 16) = sub_100D1C8E0;
  *(_QWORD *)(v15 + 24) = v11;
  sub_1004C1024(v16, v17);
  v14(v34, 0);
  v18 = (_QWORD *)swift_allocObject(&unk_1012A0E38, 40, 7);
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = v12;
  swift_retain(a3);
  swift_retain(a4);
  v19 = v12;
  v21 = (void (*)(_BYTE *, _QWORD))dispatch thunk of UIHostingController.rootView.modify(v34, v20);
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(v22 + 32) = sub_100D1C944;
  *(_QWORD *)(v22 + 40) = v18;
  sub_1004C1024(v23, v24);
  v21(v34, 0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(&v34[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v8);
  v25 = *(unsigned __int8 *)(v9 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_1012A0E60, v26 + v10, v25 | 7);
  v28.n128_f64[0] = (*(double (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(v27 + v26, &v34[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  v29 = (void (*)(_BYTE *, _QWORD))dispatch thunk of UIHostingController.rootView.modify(v34, v28);
  v31 = *(_QWORD *)(v30 + 48);
  v32 = *(_QWORD *)(v30 + 56);
  *(_QWORD *)(v30 + 48) = sub_10075D578;
  *(_QWORD *)(v30 + 56) = v27;
  sub_1004C1024(v31, v32);
  v29(v34, 0);
  return objc_msgSend(*(id *)(a4 + 16), "presentViewController:animated:completion:", v19, 1, 0);
}

uint64_t sub_100D1BEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v7 = type metadata accessor for MainActor(0);
  v5[4] = v7;
  v5[5] = static MainActor.shared.getter(v7);
  return swift_task_switch(sub_100D1BEFC, a4, 0);
}

uint64_t sub_100D1BEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1004CE3E4();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100D1BF60, v2, v3);
}

uint64_t sub_100D1BF60()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 24) + 16), "dismissViewControllerAnimated:completion:", 1, 0, swift_release(*(_QWORD *)(v0 + 40)).n128_f64[0]);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100D1BFAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double result;
  uint64_t v19;

  v10 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  type metadata accessor for MainActor(0);
  swift_retain(a1);
  swift_retain(a2);
  v14 = a3;
  v15 = static MainActor.shared.getter(v14);
  v16 = (_QWORD *)swift_allocObject(a4, 56, 7);
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = v14;
  v17 = sub_100521B98((uint64_t)v12, a5, (uint64_t)v16);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_100D1C0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5[2] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[3] = v6;
  v5[4] = static MainActor.shared.getter(v6);
  v7 = (_QWORD *)swift_task_alloc(dword_1013DFD1C);
  v5[5] = v7;
  *v7 = v5;
  v7[1] = sub_100D1C120;
  return sub_1004CD474();
}

uint64_t sub_100D1C120()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 40));
  v3 = *(_QWORD *)(v2 + 24);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
    v6 = v5;
    v7 = sub_100D1CBE0;
  }
  else
  {
    v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
    v6 = v8;
    v7 = sub_100D1C1CC;
  }
  return swift_task_switch(v7, v4, v6);
}

uint64_t sub_100D1C1CC()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 16), "dismissViewControllerAnimated:completion:", 1, 0, swift_release(*(_QWORD *)(v0 + 32)).n128_f64[0]);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100D1C218()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLFileWriteAssetDownloadAlertViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100D1C24C()
{
  _swift_stdlib_reportUnimplementedInitializer("Freeform.CRLFileWriteAssetDownloadAlertViewController", 53, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_100D1C278()
{
  _swift_stdlib_reportUnimplementedInitializer("Freeform.CRLFileWriteAssetDownloadAlertViewController", 53, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_100D1C2A4()
{
  return type metadata accessor for CRLFileWriteAssetDownloadAlertViewController(0);
}

uint64_t type metadata accessor for CRLFileWriteAssetDownloadAlertViewController.ParentWrapper()
{
  return objc_opt_self(_TtCC8Freeform44CRLFileWriteAssetDownloadAlertViewControllerP33_AE12883AFC9A749A90E7BC1B2E18134413ParentWrapper);
}

double destroy for CRLFileWriteAssetDownloadAlertView(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_release(a1[1]).n128_u64[0];
  if (a1[2])
    *(_QWORD *)&result = swift_release(a1[3]).n128_u64[0];
  if (a1[4])
    *(_QWORD *)&result = swift_release(a1[5]).n128_u64[0];
  if (a1[6])
    *(_QWORD *)&result = swift_release(a1[7]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for CRLFileWriteAssetDownloadAlertView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  swift_retain(v4);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v7;
    swift_retain(v7);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *v6;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v10 = *(_QWORD *)(a2 + 48);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    swift_retain(v11);
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for CRLFileWriteAssetDownloadAlertView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 24) = v7;
      swift_retain(v7);
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 24));
  }
  else if (v6)
  {
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v9;
    swift_retain(v9);
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
LABEL_8:
  v10 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 40);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      swift_retain(v11);
      swift_release(v12);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 40));
  }
  else if (v10)
  {
    v13 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v13;
    swift_retain(v13);
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_15:
  v14 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v14)
    {
      v17 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v17;
      swift_retain(v17);
      return a1;
    }
LABEL_21:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v14)
  {
    swift_release(*(_QWORD *)(a1 + 56));
    goto LABEL_21;
  }
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

