unint64_t sub_100088208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for TintPlacement(0);
  v6 = sub_100005178(&qword_100117608, (uint64_t (*)(uint64_t))&type metadata accessor for TintPlacement, (uint64_t)&protocol conformance descriptor for TintPlacement);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100088920(a1, v7);
}

void sub_100088274()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;

  v1 = v0;
  v2 = type metadata accessor for TintPlacement(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005360(&qword_100117600);
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)(*v0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release(v7);
LABEL_29:
    *v1 = v9;
    return;
  }
  v10 = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v26 = v1;
  v27 = (const void *)(v7 + 64);
  if (v9 != v7 || (unint64_t)v10 >= v7 + 64 + 8 * v11)
    memmove(v10, v27, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v22 >= v28)
      goto LABEL_27;
    v23 = *((_QWORD *)v27 + v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_27;
      v23 = *((_QWORD *)v27 + v13);
      if (!v23)
      {
        v13 = v22 + 2;
        if (v22 + 2 >= v28)
          goto LABEL_27;
        v23 = *((_QWORD *)v27 + v13);
        if (!v23)
        {
          v13 = v22 + 3;
          if (v22 + 3 >= v28)
          {
LABEL_27:
            swift_release(v7);
            v1 = v26;
            goto LABEL_29;
          }
          v23 = *((_QWORD *)v27 + v13);
          v24 = v22 + 3;
          if (!v23)
            break;
        }
      }
    }
LABEL_26:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v2);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v2);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    swift_retain(v21);
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_27;
    v23 = *((_QWORD *)v27 + v13);
    ++v24;
    if (v23)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
}

void sub_1000884DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for TintPlacement(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100005360(&qword_100117600);
  v46 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_42;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = v2;
  v43 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  v19 = swift_retain(v11);
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_25;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return;
    }
    if (v24 >= v44)
      goto LABEL_37;
    v25 = v43[v24];
    ++v20;
    if (!v25)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v44)
        goto LABEL_37;
      v25 = v43[v20];
      if (!v25)
      {
        v20 = v24 + 2;
        if (v24 + 2 >= v44)
          goto LABEL_37;
        v25 = v43[v20];
        if (!v25)
          break;
      }
    }
LABEL_24:
    v17 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v20 << 6);
LABEL_25:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v11 + 48) + v27 * v23;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v10, v28, v6, v19);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v10, v28, v6, v19);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
      swift_retain(v29);
    }
    v30 = *(_QWORD *)(v13 + 40);
    v31 = sub_100005178(&qword_100117608, (uint64_t (*)(uint64_t))&type metadata accessor for TintPlacement, (uint64_t)&protocol conformance descriptor for TintPlacement);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1 << *(_BYTE *)(v13 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v13 + 48) + v27 * v21, v10, v6);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v29;
    ++*(_QWORD *)(v13 + 16);
  }
  v20 = v24 + 3;
  if (v24 + 3 < v44)
  {
    v25 = v43[v20];
    v26 = v24 + 3;
    if (!v25)
    {
      while (1)
      {
        v20 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_44;
        if (v20 >= v44)
          goto LABEL_37;
        v25 = v43[v20];
        ++v26;
        if (v25)
          goto LABEL_24;
      }
    }
    goto LABEL_24;
  }
LABEL_37:
  swift_release(v11);
  v3 = v42;
  if ((v46 & 1) != 0)
  {
    v40 = 1 << *(_BYTE *)(v11 + 32);
    if (v40 >= 64)
      bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v40;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_42:
  swift_release(v11);
  *v3 = v13;
}

uint64_t sub_100088888(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for TintPlacement(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_100088920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t, __n128);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v20 = a1;
  v5 = type metadata accessor for TintPlacement(0);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = __chkstk_darwin(v5, v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = -1 << *(_BYTE *)(v3 + 32);
  v12 = a2 & ~v11;
  if (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v6 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v15(v10, *(_QWORD *)(v3 + 48) + v14 * v12, v5, v8);
      v16 = sub_100005178(&qword_100117610, (uint64_t (*)(uint64_t))&type metadata accessor for TintPlacement, (uint64_t)&protocol conformance descriptor for TintPlacement);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v20, v5, v16);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      if ((v17 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

uint64_t sub_100088A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModeMenuView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10011754C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014F2C;
  return sub_100085B34(a1, v5, v6, v7);
}

_QWORD *sub_100088AEC@<X0>(_BYTE *a1@<X8>)
{
  type metadata accessor for ModeMenuView(0);
  return sub_100085768(a1);
}

uint64_t sub_100088B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for ModeMenuView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100039308(*(id *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  sub_100007ED0(*(_QWORD *)(v0 + v4 + 32), *(_QWORD *)(v0 + v4 + 40), *(unsigned __int8 *)(v0 + v4 + 48), *(_BYTE *)(v0 + v4 + 49));
  swift_release(*(_QWORD *)(v0 + v4 + 56));
  swift_release(*(_QWORD *)(v0 + v4 + 72));
  swift_release(*(_QWORD *)(v0 + v4 + 80));
  swift_release(*(_QWORD *)(v0 + v4 + 104));
  swift_release(*(_QWORD *)(v0 + v4 + 120));
  v6 = v0 + v4 + *(int *)(v1 + 44);
  v7 = type metadata accessor for AccessibilityTechnologies(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = sub_100005360(&qword_100117338);
  swift_release(*(_QWORD *)(v6 + *(int *)(v9 + 40)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_100088C44(char *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModeMenuView(0) - 8) + 80);
  sub_1000857BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_100088C84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100088CAC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_100088CD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.placementTint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100088CFC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_bridgeObjectRetain(*a1);
  return EnvironmentValues.placementTint.setter(v1);
}

uint64_t sub_100088D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for TintPlacement(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_100088D98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TintPlacement(0) - 8) + 80);
  return sub_100087F98(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

unint64_t sub_100088DE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001175A0;
  if (!qword_1001175A0)
  {
    v1 = sub_100005608(&qword_100117578);
    sub_100088E64();
    sub_100008078(&qword_1001175D0, &qword_100117598, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001175A0);
  }
  return result;
}

unint64_t sub_100088E64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001175A8;
  if (!qword_1001175A8)
  {
    v1 = sub_100005608(&qword_100117570);
    sub_100088EE8();
    sub_100008078(&qword_1001175C0, &qword_1001175C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001175A8);
  }
  return result;
}

unint64_t sub_100088EE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001175B0;
  if (!qword_1001175B0)
  {
    v1 = sub_100005608(&qword_100117568);
    sub_100008078(&qword_1001175B8, &qword_100117560, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001175B0);
  }
  return result;
}

unint64_t sub_100088F8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001175E8;
  if (!qword_1001175E8)
  {
    v1 = sub_100005608(&qword_1001175F0);
    sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001175E8);
  }
  return result;
}

uint64_t sub_100089010()
{
  uint64_t v0;

  return sub_1000859A4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100089038()
{
  return sub_100089160((uint64_t (*)(uint64_t))sub_1000836D4);
}

uint64_t sub_100089048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for ModeMenuView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_100039308(*(id *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  sub_100007ED0(*(_QWORD *)(v0 + v4 + 32), *(_QWORD *)(v0 + v4 + 40), *(unsigned __int8 *)(v0 + v4 + 48), *(_BYTE *)(v0 + v4 + 49));
  swift_release(*(_QWORD *)(v0 + v4 + 56));
  swift_release(*(_QWORD *)(v0 + v4 + 72));
  swift_release(*(_QWORD *)(v0 + v4 + 80));
  swift_release(*(_QWORD *)(v0 + v4 + 104));
  swift_release(*(_QWORD *)(v0 + v4 + 120));
  v6 = v0 + v4 + *(int *)(v1 + 44);
  v7 = type metadata accessor for AccessibilityTechnologies(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = sub_100005360(&qword_100117338);
  swift_release(*(_QWORD *)(v6 + *(int *)(v9 + 40)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100089154()
{
  return sub_100089160((uint64_t (*)(uint64_t))sub_100083220);
}

uint64_t sub_100089160(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModeMenuView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

double destroy for CalculatorAppAlert(uint64_t a1)
{
  double result;

  sub_100007ED0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
  swift_release(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 48));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 56)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for CalculatorAppAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 17);
  v7 = *(unsigned __int8 *)(a2 + 16);
  sub_100007DE0(*(_QWORD *)a2, v5, v7, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 17) = v6;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t assignWithCopy for CalculatorAppAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 17);
  v7 = *(unsigned __int8 *)(a2 + 16);
  sub_100007DE0(*(_QWORD *)a2, v5, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 17);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v11 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 17) = v6;
  sub_100007ED0(v8, v9, v11, v10);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v17;
  swift_retain(v17);
  swift_release(v16);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v18;
  swift_retain(v18);
  swift_release(v19);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for CalculatorAppAlert(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v9 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = v5;
  sub_100007ED0(v6, v7, v9, v8);
  swift_release(*(_QWORD *)(a1 + 24));
  v10 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v10);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_release(*(_QWORD *)(a1 + 48));
  v11 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorAppAlert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorAppAlert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorAppAlert()
{
  return &type metadata for CalculatorAppAlert;
}

uint64_t sub_1000894A0()
{
  _QWORD v1[2];

  v1[0] = sub_100005608(&qword_100117450);
  v1[1] = sub_1000608EC(&qword_1001174E0, &qword_100117450, (void (*)(void))sub_100087E28, (void (*)(void))sub_10003AC9C);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityFocused(_:)>>, 1);
}

uint64_t sub_10008950C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F69E0, 1);
}

uint64_t sub_10008951C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100086E34(*(_QWORD *)(v1 + 16), a1);
}

void sub_100089524()
{
  sub_100087970();
}

uint64_t sub_100089530()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 56);
  v3 = 0;
  v1 = sub_100005360(&qword_100117648);
  return Binding.wrappedValue.setter(&v3, v1);
}

void sub_100089580()
{
  sub_1000871F8();
}

uint64_t sub_100089588(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  sub_100007DE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_1000895F8()
{
  uint64_t v0;

  sub_100007ED0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_BYTE *)(v0 + 33));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 81, 7);
}

uint64_t sub_100089644()
{
  uint64_t v0;

  return sub_1000872C0(v0 + 16);
}

uint64_t sub_10008964C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000878DC(v1[2], v1[3], v1[5], a1);
}

uint64_t sub_100089664()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100007ED0(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_BYTE *)(v0 + 49));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1000896B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100117684);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100013F04;
  return sub_1000877D0(a1, v4, v5, v1 + 32);
}

uint64_t sub_100089724()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v0 = sub_100005608(&qword_100117638);
  v3 = sub_100005608(&qword_100117650);
  v4 = sub_100005608(&qword_100117658);
  v5 = &type metadata for Text;
  v6 = sub_100008078(&qword_100117660, &qword_100117650, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v7 = sub_100008078(&qword_100117668, &qword_100117658, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v8 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.allowsSecureDrawing()>>, 1);
}

uint64_t sub_100089808()
{
  return sub_100087ED4();
}

uint64_t sub_10008981C()
{
  uint64_t result;

  result = static Font.caption2.getter();
  qword_10011FE10 = result;
  return result;
}

uint64_t sub_100089838(uint64_t a1)
{
  return sub_10008987C(a1, (uint64_t (*)(void))&static Font.footnote.getter, &qword_10011FE18);
}

uint64_t sub_10008984C()
{
  uint64_t result;

  result = static Font.footnote.getter();
  qword_10011FE20 = result;
  return result;
}

uint64_t sub_100089868(uint64_t a1)
{
  return sub_10008987C(a1, (uint64_t (*)(void))&static Font.subheadline.getter, &qword_10011FE28);
}

uint64_t sub_10008987C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a2();
  v5 = Font.bold()();
  result = swift_release(v4);
  *a3 = v5;
  return result;
}

uint64_t sub_1000898BC(uint64_t a1)
{
  return sub_1000899BC(20.0, a1, (double (*)(__n128))&static Font.Weight.medium.getter, &qword_10011FE30);
}

uint64_t sub_1000898D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_1001162B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100089914(uint64_t a1)
{
  return sub_1000899BC(12.0, a1, (double (*)(__n128))&static Font.Weight.medium.getter, &qword_10011FE38);
}

uint64_t sub_10008992C(uint64_t a1)
{
  return sub_1000899BC(24.0, a1, (double (*)(__n128))&static Font.Weight.medium.getter, &qword_10011FE40);
}

uint64_t sub_100089944(uint64_t a1)
{
  return sub_1000899BC(28.0, a1, (double (*)(__n128))&static Font.Weight.medium.getter, &qword_10011FE48);
}

uint64_t sub_10008995C(uint64_t a1)
{
  return sub_1000899BC(14.0, a1, (double (*)(__n128))&static Font.Weight.regular.getter, &qword_10011FE50);
}

uint64_t sub_100089974(uint64_t a1)
{
  return sub_1000899BC(17.0, a1, (double (*)(__n128))&static Font.Weight.medium.getter, &qword_10011FE58);
}

uint64_t sub_10008998C(uint64_t a1)
{
  return sub_1000899BC(18.0, a1, (double (*)(__n128))&static Font.Weight.medium.getter, &qword_10011FE60);
}

uint64_t sub_1000899A4(uint64_t a1)
{
  return sub_1000899BC(20.0, a1, (double (*)(__n128))&static Font.Weight.medium.getter, &qword_10011FE68);
}

uint64_t sub_1000899BC(double a1, uint64_t a2, double (*a3)(__n128), uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v7 = sub_100005360(&qword_1001162B8);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3(v9);
  v13 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
  v14 = static Font.system(size:weight:design:)(*(_QWORD *)&v12, 0, v11, a1);
  result = sub_1000898D4((uint64_t)v11);
  *a4 = v14;
  return result;
}

uint64_t sub_100089A7C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D2A98);
  v4 = v0;
  v2 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_100089B00(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D2A98);
  v6 = v3;
  v5 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
}

double sub_100089B8C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D2A98);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000695B4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100089C34(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D2A98);
  v6 = v1;
  v4 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  sub_10001F274(*(_BYTE *)(v1 + 16));
  if ((v5 & 1) == 0)
    __asm { BR              X10 }
}

uint64_t sub_100089DEC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D2A48);
  v4 = v0;
  v2 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 17);
}

void sub_100089E70(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D2A48);
  v6 = v3;
  v5 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 17);
}

double sub_100089EFC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D2A48);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10008C918, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100089FA4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D2A70);
  v4 = v0;
  v2 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 18);
}

void sub_10008A028(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D2A70);
  v6 = v3;
  v5 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 18);
}

double sub_10008A0B4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D2A70);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10008C930, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10008A15C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 18) = a2;
  return result;
}

uint64_t sub_10008A164(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;

  v2 = v1;
  *(_WORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 18) = 0;
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  v5 = objc_msgSend(v4, "setNumberStyle:", 6);
  *(_QWORD *)(v2 + 24) = v4;
  ObservationRegistrar.init()(v5);
  KeyPath = swift_getKeyPath(&unk_1000D2A98);
  v9[2] = v2;
  v10 = a1;
  v11 = v2;
  v7 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, KeyPath, sub_1000695B4, v9, (char *)&type metadata for () + 8, v7);
  swift_release(KeyPath);
  return v2;
}

void *sub_10008A254(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;

  v2 = v1;
  v13 = &_swiftEmptySetSingleton;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_1000AC150();
  swift_retain(v4);
  v5 = CalculateExpression.activeOperation.getter();
  swift_release(v4);
  if (v5)
  {
    v6 = sub_10001A418();
    swift_release(v5);
    if (v6 != 93)
      sub_10008AAC0((unsigned __int8 *)&v12, v6);
  }
  KeyPath = swift_getKeyPath(&unk_1000D2A20);
  v12 = v3;
  v8 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v8);
  swift_release(KeyPath);
  if (*(_QWORD *)(v3 + 48))
    sub_10008AAC0((unsigned __int8 *)&v12, 0x1Au);
  v9 = swift_getKeyPath(&unk_1000D2A48);
  v12 = v2;
  v10 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, v9, v10);
  swift_release(v9);
  if (*(_BYTE *)(v2 + 17) == 1)
    sub_10008AAC0((unsigned __int8 *)&v12, 0x1Bu);
  return v13;
}

uint64_t sub_10008A3CC()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + OBJC_IVAR____TtC10Calculator25CalculatorKeypadViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_10008A424()
{
  return type metadata accessor for CalculatorKeypadViewModel(0);
}

uint64_t type metadata accessor for CalculatorKeypadViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001176C0;
  if (!qword_1001176C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorKeypadViewModel);
  return result;
}

uint64_t sub_10008A468(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1000D29D0;
  v4[1] = &unk_1000D29E8;
  v4[2] = &unk_1000D29E8;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_10008A4F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D2A20);
  v8 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 48);
  *a2 = v6;
  return v6;
}

void sub_10008A584(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D2A20);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000491D8, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_10008A638(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[9];
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v32 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    v10 = swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v31 = v9;
      v11 = type metadata accessor for SchemaV1.HistoryRecord(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v30, &v31, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
      *a1 = v30[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7, v10);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v24 = sub_10008ABDC(v7, result + 1);
    v30[0] = v24;
    v25 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v25)
    {
      v28 = v25 + 1;
      swift_retain(a2);
      sub_10008AE10(v28);
      v26 = v30[0];
    }
    else
    {
      v26 = v24;
      swift_retain(a2);
    }
    sub_10008B698(a2, v26);
    v29 = *v3;
    *v3 = v26;
    swift_bridgeObjectRelease(v29);
    *a1 = a2;
    return 1;
  }
  v31 = a2;
  Hasher.init(_seed:)(v30);
  v13 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v14 = sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
  swift_bridgeObjectRetain(v6);
  dispatch thunk of Hashable.hash(into:)(v30, v13, v14);
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v32;
    v30[0] = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain(v21);
    sub_10008B76C(v22, v17, isUniquelyReferenced_nonNull_native);
    v23 = *v2;
    *v2 = v30[0];
    swift_bridgeObjectRelease(v23);
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_100005178(&qword_1001143E0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC64);
  while (1)
  {
    v30[0] = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v30, &v32, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  v27 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  *a1 = v27;
  swift_retain(v27);
  return 0;
}

uint64_t sub_10008A914(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10008B928(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10008AAC0(unsigned __int8 *a1, unsigned __int8 a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14);
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_10008BAC0(a2, v8, isUniquelyReferenced_nonNull_native);
    v13 = *v2;
    *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  a2 = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_10008ABDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[10];
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    sub_100005360(&qword_100117880);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v25 = v4;
    v6 = __CocoaSet.makeIterator()(a1, v5);
    v7 = __CocoaSet.Iterator.next()(v6);
    if (v7)
    {
      v8 = v7;
      v9 = type metadata accessor for SchemaV1.HistoryRecord(0);
      do
      {
        v23[0] = v8;
        swift_dynamicCast(&v24, v23, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
        v4 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        if (*(_QWORD *)(v25 + 24) <= v18)
        {
          sub_10008AE10(v18 + 1);
          v4 = v25;
        }
        v10 = v24;
        v23[9] = v24;
        Hasher.init(_seed:)(v23);
        v11 = sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
        dispatch thunk of Hashable.hash(into:)(v23, v9, v11);
        result = Hasher._finalize()();
        v13 = v4 + 56;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = 0;
          v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v21 = v16 == v20;
            if (v16 == v20)
              v16 = 0;
            v19 |= v21;
            v22 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v22 == -1);
          v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v10;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaSet.Iterator.next()(result);
      }
      while (v8);
    }
    swift_release(v6);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

void sub_10008AE10(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005360(&qword_100117880);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v31 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v16 >= v10)
          goto LABEL_36;
        v17 = v31[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v10)
            goto LABEL_36;
          v17 = v31[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v10)
              goto LABEL_36;
            v17 = v31[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v31, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v31[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v17 = v31[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      v32[9] = v19;
      Hasher.init(_seed:)(v32);
      v20 = type metadata accessor for SchemaV1.HistoryRecord(0);
      v21 = sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
      dispatch thunk of Hashable.hash(into:)(v32, v20, v21);
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v25);
        }
        while (v29 == -1);
        v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10008B114(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005360(&qword_100115C30);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10008B3F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005360(&qword_100115C28);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v31);
      Hasher._combine(_:)(v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

unint64_t sub_10008B698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t result;
  _QWORD v8[10];

  v8[9] = a1;
  Hasher.init(_seed:)(v8);
  v4 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v5 = sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  v6 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_10008B76C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[10];
  uint64_t v21;

  v21 = a1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10008AE10(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_10008BC0C();
      goto LABEL_12;
    }
    sub_10008C0F4(v9);
  }
  v10 = *v3;
  v20[9] = a1;
  Hasher.init(_seed:)(v20);
  v4 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v11 = sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
  dispatch thunk of Hashable.hash(into:)(v20, v4, v11);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = ~v13;
    v15 = sub_100005178(&qword_1001143E0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC64);
    do
    {
      v20[0] = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v20, &v21, v4, v15) & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v14;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v16 + 16) = v19;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
}

void sub_10008B928(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10008B114(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10008BDB4();
      goto LABEL_22;
    }
    sub_10008C3E4(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29);
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_10008BAC0(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = a1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10008B3F0(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_10008BF64();
      goto LABEL_14;
    }
    sub_10008C690(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18);
  Hasher._combine(_:)(v5);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CalculatorButtonRepresentable);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

void sub_10008BC0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100005360(&qword_100117880);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    swift_retain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10008BDB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100005360(&qword_100115C30);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10008BF64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100005360(&qword_100115C28);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10008C0F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  _QWORD v32[9];
  uint64_t v33;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005360(&qword_100117880);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v29 = v2;
  v30 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v31 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain(v3);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v31)
      goto LABEL_36;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_36;
      v16 = *(_QWORD *)(v30 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v31)
          goto LABEL_36;
        v16 = *(_QWORD *)(v30 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_26:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v33 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    v18 = v33;
    Hasher.init(_seed:)(v32);
    v19 = type metadata accessor for SchemaV1.HistoryRecord(0);
    v20 = sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
    swift_retain(v18);
    dispatch thunk of Hashable.hash(into:)(v32, v19, v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v6 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v29;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v30 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v31)
      goto LABEL_36;
    v16 = *(_QWORD *)(v30 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_10008C3E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005360(&qword_100115C30);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_10008C690(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005360(&qword_100115C28);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v30);
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_10008C918()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 17) = *(_BYTE *)(v0 + 24);
}

void sub_10008C930()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 18) = *(_BYTE *)(v0 + 24);
}

_QWORD *sub_10008C948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for EditMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for CalculatorToolbarViewModel(0);
  v12 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  *(_QWORD *)a1 = Environment.init<A>(_:)(v11, v11, v12);
  *(_BYTE *)(a1 + 8) = v13 & 1;
  v14 = type metadata accessor for CalculatorHistoryViewModelWrapper(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_QWORD *)(v15 + 16) = 0;
  ObservationRegistrar.init()(v15);
  v27 = v15;
  State.init(wrappedValue:)(&v28, &v27, v14);
  v16 = v29;
  *(_QWORD *)(a1 + 16) = v28;
  *(_QWORD *)(a1 + 24) = v16;
  v17 = (int *)type metadata accessor for CalculatorHistoryView(0);
  v18 = (_QWORD *)(a1 + v17[6]);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v10, enum case for EditMode.inactive(_:), v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
  State.init(wrappedValue:)(v18, v6, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  v19 = a1 + v17[7];
  LOBYTE(v27) = 0;
  State.init(wrappedValue:)(&v28, &v27, &type metadata for Bool);
  v20 = v29;
  *(_BYTE *)v19 = v28;
  *(_QWORD *)(v19 + 8) = v20;
  v21 = a1 + v17[8];
  LOBYTE(v27) = 0;
  State.init(wrappedValue:)(&v28, &v27, &type metadata for Bool);
  v22 = v29;
  *(_BYTE *)v21 = v28;
  *(_QWORD *)(v21 + 8) = v22;
  v23 = a1 + v17[9];
  LOBYTE(v27) = 1;
  result = State.init(wrappedValue:)(&v28, &v27, &type metadata for Bool);
  v25 = v29;
  *(_BYTE *)v23 = v28;
  *(_QWORD *)(v23 + 8) = v25;
  return result;
}

uint64_t type metadata accessor for CalculatorHistoryView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001178E8;
  if (!qword_1001178E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorHistoryView);
  return result;
}

uint64_t sub_10008CB98(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = v30 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a2[2];
    v10 = a2[3];
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    v11 = a3[6];
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for EditMode(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
    swift_retain(v7);
    swift_retain(v9);
    v16 = swift_retain(v10);
    v15(v12, v13, v14, v16);
    v17 = *(int *)(sub_100005360(&qword_100117888) + 28);
    v18 = *(_QWORD *)(v13 + v17);
    *(_QWORD *)(v12 + v17) = v18;
    v19 = a3[7];
    v20 = a3[8];
    v21 = v4 + v19;
    v22 = (uint64_t)a2 + v19;
    *(_BYTE *)v21 = *(_BYTE *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v21 + 8) = v23;
    v24 = v4 + v20;
    v25 = (uint64_t)a2 + v20;
    *(_BYTE *)v24 = *(_BYTE *)v25;
    v26 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)(v24 + 8) = v26;
    v27 = a3[9];
    v28 = v4 + v27;
    v29 = (uint64_t)a2 + v27;
    *(_BYTE *)v28 = *(_BYTE *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v28 + 8) = v30;
    swift_retain(v18);
    swift_retain(v23);
    swift_retain(v26);
  }
  swift_retain(v30);
  return v4;
}

double sub_10008CCEC(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[3]);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for EditMode(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = sub_100005360(&qword_100117888);
  swift_release(*(_QWORD *)&v4[*(int *)(v6 + 28)]);
  swift_release(*(_QWORD *)((char *)a1 + a2[7] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[8] + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[9] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10008CD94(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a2[2];
  v9 = a2[3];
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for EditMode(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
  swift_retain(v6);
  swift_retain(v8);
  v15 = swift_retain(v9);
  v14(v11, v12, v13, v15);
  v16 = *(int *)(sub_100005360(&qword_100117888) + 28);
  v17 = *(_QWORD *)(v12 + v16);
  *(_QWORD *)(v11 + v16) = v17;
  v18 = a3[7];
  v19 = a3[8];
  v20 = a1 + v18;
  v21 = (uint64_t)a2 + v18;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  v22 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v20 + 8) = v22;
  v23 = a1 + v19;
  v24 = (uint64_t)a2 + v19;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v25 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 8) = v25;
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = (uint64_t)a2 + v26;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  v29 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v27 + 8) = v29;
  swift_retain(v17);
  swift_retain(v22);
  swift_retain(v25);
  swift_retain(v29);
  return a1;
}

uint64_t *sub_10008CEC0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  v9 = a2[2];
  v10 = a1[2];
  a1[2] = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = a1[3];
  v12 = a2[3];
  a1[3] = v12;
  swift_retain(v12);
  swift_release(v11);
  v13 = a3[6];
  v14 = (uint64_t)a1 + v13;
  v15 = (uint64_t)a2 + v13;
  v16 = type metadata accessor for EditMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = *(int *)(sub_100005360(&qword_100117888) + 28);
  v18 = *(_QWORD *)(v14 + v17);
  v19 = *(_QWORD *)(v15 + v17);
  *(_QWORD *)(v14 + v17) = v19;
  swift_retain(v19);
  swift_release(v18);
  v20 = a3[7];
  v21 = (uint64_t)a1 + v20;
  v22 = (uint64_t)a2 + v20;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v21 + 8) = v24;
  swift_retain(v24);
  swift_release(v23);
  v25 = a3[8];
  v26 = (uint64_t)a1 + v25;
  v27 = (uint64_t)a2 + v25;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v28 = *(_QWORD *)(v26 + 8);
  v29 = *(_QWORD *)(v27 + 8);
  *(_QWORD *)(v26 + 8) = v29;
  swift_retain(v29);
  swift_release(v28);
  v30 = a3[9];
  v31 = (uint64_t)a1 + v30;
  v32 = (uint64_t)a2 + v30;
  *(_BYTE *)v31 = *(_BYTE *)v32;
  v33 = *(_QWORD *)(v31 + 8);
  v34 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v31 + 8) = v34;
  swift_retain(v34);
  swift_release(v33);
  return a1;
}

uint64_t sub_10008D020(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EditMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = sub_100005360(&qword_100117888);
  *(_QWORD *)(v7 + *(int *)(v10 + 28)) = *(_QWORD *)(v8 + *(int *)(v10 + 28));
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t *sub_10008D0D4(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_release(v9);
  v10 = a3[6];
  v11 = (uint64_t)a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for EditMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(sub_100005360(&qword_100117888) + 28);
  v15 = *(_QWORD *)(v11 + v14);
  *(_QWORD *)(v11 + v14) = *(_QWORD *)(v12 + v14);
  swift_release(v15);
  v16 = a3[7];
  v17 = (uint64_t)a1 + v16;
  v18 = (uint64_t)a2 + v16;
  *(_BYTE *)v17 = *(_BYTE *)v18;
  v19 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
  swift_release(v19);
  v20 = a3[8];
  v21 = (uint64_t)a1 + v20;
  v22 = (uint64_t)a2 + v20;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  swift_release(v23);
  v24 = a3[9];
  v25 = (uint64_t)a1 + v24;
  v26 = (uint64_t)a2 + v24;
  *(_BYTE *)v25 = *(_BYTE *)v26;
  v27 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
  swift_release(v27);
  return a1;
}

uint64_t sub_10008D1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D208);
}

uint64_t sub_10008D208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005360(&qword_100117888);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10008D288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008D294);
}

uint64_t sub_10008D294(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100005360(&qword_100117888);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_10008D30C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\t";
  v4[1] = &unk_1000D2B20;
  sub_10008D394(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000D2B38;
    v4[4] = &unk_1000D2B38;
    v4[5] = &unk_1000D2B38;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_10008D394(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001178F8)
  {
    v2 = type metadata accessor for EditMode(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001178F8);
  }
}

uint64_t sub_10008D3E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6CBC, 1);
}

uint64_t sub_10008D3F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t OpaqueTypeConformance2;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  __n128 v100;
  void (*v101)(char *, uint64_t, __n128);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t);
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;

  v2 = v1;
  v132 = a1;
  v131 = type metadata accessor for PPTTestCase.Name(0);
  v128 = *(_QWORD *)(v131 - 8);
  v4 = __chkstk_darwin(v131, v3);
  v130 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityTraits(0, v4);
  v120 = *(_QWORD *)(v6 - 8);
  v121 = v6;
  __chkstk_darwin(v6, v7);
  v119 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CalculatorHistoryView(0);
  v110 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v129 = (void (*)(char *, uint64_t, uint64_t))((char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v13);
  v118 = (char *)&v109 - v14;
  v111 = v15;
  __chkstk_darwin(v16, v17);
  v116 = (uint64_t)&v109 - v18;
  v115 = type metadata accessor for AccessibilityChildBehavior(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115, v19);
  v21 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005360(&qword_100117938);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100005360(&qword_100117940);
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100005360(&qword_100117948);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113, v30);
  v32 = (char *)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100005360(&qword_100117950);
  __chkstk_darwin(v135, v33);
  v35 = (char *)&v109 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36, v37);
  v117 = (char *)&v109 - v38;
  __chkstk_darwin(v39, v40);
  v133 = (char *)&v109 - v41;
  v42 = sub_100005360(&qword_100117958);
  v126 = *(_QWORD *)(v42 - 8);
  v127 = v42;
  __chkstk_darwin(v42, v43);
  v125 = (char *)&v109 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100005360(&qword_100117960);
  v123 = *(_QWORD *)(v45 - 8);
  v124 = v45;
  v47 = __chkstk_darwin(v45, v46);
  v122 = (char *)&v109 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v25 = static HorizontalAlignment.center.getter(v47);
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 0;
  v49 = &v25[*(int *)(sub_100005360(&qword_100117968) + 44)];
  v134 = v2;
  sub_10008DD84(v2, v49);
  if (qword_100113D48 != -1)
    swift_once(&qword_100113D48, sub_100053154);
  v50 = qword_10011FCF0;
  KeyPath = swift_getKeyPath(&unk_1000D2BA0);
  v136 = (_QWORD *)v50;
  swift_retain_n(v50, 2);
  v52 = AnyShapeStyle.init<A>(_:)(&v136, &type metadata for Color, &protocol witness table for Color);
  sub_10000531C((uint64_t)v25, (uint64_t)v29, &qword_100117938);
  swift_release(v50);
  v53 = (uint64_t *)&v29[*(int *)(v26 + 36)];
  *v53 = KeyPath;
  v53[1] = v52;
  v54 = sub_100004F48((uint64_t)v25, &qword_100117938);
  static AccessibilityChildBehavior.contain.getter(v54);
  v55 = sub_100093368();
  View.accessibilityElement(children:)(v21, v26, v55);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v21, v115);
  sub_100004F48((uint64_t)v29, &qword_100117940);
  v136 = (_QWORD *)v26;
  v137 = v55;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v136, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v57 = (uint64_t)v35;
  v58 = v113;
  View.accessibilityIdentifier(_:)(0x5679726F74736948, 0xEB00000000776569, v113, OpaqueTypeConformance2);
  v59 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v32, v58);
  LODWORD(v58) = _AXSAutomationEnabled(v59);
  v60 = (uint64_t)v134;
  v61 = v116;
  sub_100014084((uint64_t)v134, v116, type metadata accessor for CalculatorHistoryView);
  if ((_DWORD)v58)
  {
    v62 = 0;
  }
  else
  {
    v63 = *(_QWORD *)v61;
    v64 = *(_BYTE *)(v61 + 8);
    swift_retain(*(_QWORD *)v61);
    v66 = sub_1000438AC(v65, v64);
    swift_release(v63);
    v67 = swift_getKeyPath(&unk_1000D2BD0);
    v136 = (_QWORD *)v66;
    v68 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v136, v67, v68);
    swift_release(v67);
    LOBYTE(v67) = *(_BYTE *)(v66 + 16);
    swift_release(v66);
    v62 = v67 ^ 1;
  }
  v69 = (uint64_t)v129;
  v70 = v135;
  v72 = (uint64_t)v117;
  v71 = (uint64_t)v118;
  sub_100014150(v61, type metadata accessor for CalculatorHistoryView);
  ModifiedContent<>.accessibilityHidden(_:)(v62 & 1, v70);
  v73 = sub_100004F48(v57, &qword_100117950);
  v74 = _AXSAutomationEnabled(v73);
  sub_100014084(v60, v71, type metadata accessor for CalculatorHistoryView);
  v75 = v121;
  v76 = v119;
  if (v74)
  {
    sub_100014150(v71, type metadata accessor for CalculatorHistoryView);
  }
  else
  {
    v77 = *(_QWORD *)v71;
    v78 = *(unsigned __int8 *)(v71 + 8);
    swift_retain(*(_QWORD *)v71);
    v80 = sub_1000438AC(v79, v78);
    swift_release(v77);
    v81 = swift_getKeyPath(&unk_1000D2BD0);
    v136 = (_QWORD *)v80;
    v82 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v136, v81, v82);
    swift_release(v81);
    LOBYTE(v81) = *(_BYTE *)(v80 + 16);
    swift_release(v80);
    v83 = sub_100014150(v71, type metadata accessor for CalculatorHistoryView);
    if ((v81 & 1) != 0)
    {
      static AccessibilityTraits.isModal.getter(v83);
      goto LABEL_11;
    }
  }
  v136 = _swiftEmptyArrayStorage;
  v84 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v85 = sub_100005360(&qword_100114EB0);
  v86 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v136, v85, v86, v75, v84);
LABEL_11:
  v87 = v111;
  v88 = v110;
  ModifiedContent<>.accessibilityAddTraits(_:)(v76, v70);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v76, v75);
  sub_100004F48(v72, &qword_100117950);
  if (qword_100113C80 != -1)
    swift_once(&qword_100113C80, sub_100030BC0);
  v89 = v131;
  v90 = sub_100014124(v131, (uint64_t)qword_10011FBD8);
  v91 = v128;
  v92 = v130;
  v129 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
  v129(v130, v90, v89);
  sub_100014084((uint64_t)v134, v69, type metadata accessor for CalculatorHistoryView);
  v93 = *(unsigned __int8 *)(v88 + 80);
  v94 = (v93 + 16) & ~v93;
  v95 = v93 | 7;
  v121 = v94 + v87;
  v96 = swift_allocObject(&unk_10010C550, v94 + v87, v93 | 7);
  sub_1000140C8(v69, v96 + v94, type metadata accessor for CalculatorHistoryView);
  v97 = sub_10009340C();
  v98 = v125;
  v99 = (uint64_t)v133;
  View.onTest(_:handler:)(v92, sub_100093408, v96, v135, v97);
  v100 = swift_release(v96);
  v101 = *(void (**)(char *, uint64_t, __n128))(v91 + 8);
  v101(v92, v89, v100);
  sub_100004F48(v99, &qword_100117950);
  if (qword_100113C88 != -1)
    swift_once(&qword_100113C88, sub_100030BE4);
  v102 = sub_100014124(v89, (uint64_t)qword_10011FBF0);
  v129(v92, v102, v89);
  sub_100014084((uint64_t)v134, v69, type metadata accessor for CalculatorHistoryView);
  v103 = swift_allocObject(&unk_10010C578, v121, v95);
  sub_1000140C8(v69, v103 + v94, type metadata accessor for CalculatorHistoryView);
  v136 = (_QWORD *)v135;
  v137 = v97;
  v104 = swift_getOpaqueTypeConformance2(&v136, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v105 = v122;
  v106 = v127;
  View.onTest(_:handler:)(v92, sub_100093408, v103, v127, v104);
  v107 = swift_release(v103);
  v101(v92, v89, v107);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v98, v106);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v123 + 32))(v132, v105, v124);
}

uint64_t sub_10008DD84@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t KeyPath;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  char *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  char v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  __n128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  __n128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t OpaqueTypeConformance2;
  uint64_t v274;
  uint64_t v275;
  void (*v276)(char *, uint64_t);
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t (**v301)();
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v307;
  char *v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  char *v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  _QWORD *v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;

  v412 = a1;
  v410 = a2;
  v411 = sub_100005360(&qword_1001179A0);
  __chkstk_darwin(v411, v2);
  v384 = (uint64_t)&v331 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v383 = sub_100005360(&qword_1001179A8);
  v5 = __chkstk_darwin(v383, v4);
  v371 = (uint64_t)&v331 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344 = type metadata accessor for OpacityTransition(0, v5);
  v340 = *(_QWORD *)(v344 - 8);
  v8 = __chkstk_darwin(v344, v7);
  v339 = (char *)&v331 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v342 = type metadata accessor for MoveTransition(0, v8);
  v336 = *(_QWORD *)(v342 - 8);
  __chkstk_darwin(v342, v10);
  v335 = (char *)&v331 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v343 = sub_100005360(&qword_1001179B0);
  v12 = *(_QWORD *)(v343 - 8);
  __chkstk_darwin(v343, v13);
  v338 = (char *)&v331 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v341 = (char *)&v331 - v17;
  v18 = sub_100005360(&qword_1001179B8);
  __chkstk_darwin(v18, v19);
  v337 = (uint64_t)&v331 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v385 = sub_100005360(&qword_1001179C0);
  v368 = *(_QWORD *)(v385 - 8);
  __chkstk_darwin(v385, v21);
  v334 = (uint64_t)&v331 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v367 = type metadata accessor for EditMode(0);
  v366 = *(_QWORD *)(v367 - 8);
  __chkstk_darwin(v367, v23);
  v365 = (uint64_t *)((char *)&v331 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_100005360(&qword_1001179C8);
  __chkstk_darwin(v25, v26);
  v369 = (uint64_t)&v331 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  v370 = (char *)&v331 - v30;
  v364 = type metadata accessor for KeyEquivalent(0);
  v363 = *(_QWORD *)(v364 - 8);
  __chkstk_darwin(v364, v31);
  v362 = (char *)&v331 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005360((uint64_t *)&unk_100115690);
  __chkstk_darwin(v33, v34);
  v357 = (uint64_t *)((char *)&v331 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v348 = type metadata accessor for CalculatorHistoryListView(0);
  __chkstk_darwin(v348, v36);
  v349 = (uint64_t *)((char *)&v331 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v38, v39);
  v350 = (uint64_t)&v331 - v40;
  v351 = sub_100005360(&qword_1001179D0);
  __chkstk_darwin(v351, v41);
  v352 = (uint64_t)&v331 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v355 = sub_100005360(&qword_1001179D8);
  v354 = *(_QWORD *)(v355 - 8);
  __chkstk_darwin(v355, v43);
  v353 = (char *)&v331 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v386 = sub_100005360(&qword_1001179E0);
  __chkstk_darwin(v386, v45);
  v356 = (char *)&v331 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v361 = sub_100005360(&qword_1001179E8);
  v360 = *(_QWORD *)(v361 - 8);
  __chkstk_darwin(v361, v47);
  v359 = (char *)&v331 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v358 = sub_100005360(&qword_1001179F0);
  __chkstk_darwin(v358, v49);
  v372 = (char *)&v331 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51, v52);
  v373 = (uint64_t)&v331 - v53;
  v379 = sub_100005360(&qword_1001179F8);
  __chkstk_darwin(v379, v54);
  v380 = (uint64_t)&v331 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100005360(&qword_100117A00);
  __chkstk_darwin(v56, v57);
  v381 = (uint64_t)&v331 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59, v60);
  v382 = (uint64_t *)((char *)&v331 - v61);
  v62 = sub_100005360(&qword_100117A08);
  __chkstk_darwin(v62, v63);
  v377 = (uint64_t *)((char *)&v331 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
  v374 = sub_100005360(&qword_100117A10);
  __chkstk_darwin(v374, v65);
  v375 = (uint64_t)&v331 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100005360(&qword_100117A18);
  __chkstk_darwin(v67, v68);
  v378 = (uint64_t *)((char *)&v331 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
  v376 = sub_100005360(&qword_100117A20);
  __chkstk_darwin(v376, v70);
  v397 = (uint64_t)&v331 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v72, v73);
  v398 = (uint64_t)&v331 - v74;
  v395 = type metadata accessor for ControlSize(0);
  v393 = *(_QWORD *)(v395 - 8);
  __chkstk_darwin(v395, v75);
  v392 = (char *)&v331 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v391 = sub_100005360(&qword_100117A28);
  v389 = *(_QWORD *)(v391 - 8);
  __chkstk_darwin(v391, v77);
  v388 = (char *)&v331 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  v387 = sub_100005360(&qword_100115228);
  __chkstk_darwin(v387, v79);
  v81 = (char *)&v331 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100005360(&qword_100115230);
  __chkstk_darwin(v82, v83);
  v394 = (uint64_t)&v331 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v404 = sub_100005360(&qword_100117A30);
  __chkstk_darwin(v404, v85);
  v390 = (uint64_t)&v331 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v87, v88);
  v396 = (uint64_t)&v331 - v89;
  v405 = type metadata accessor for CalculatorHistoryView(0);
  v345 = *(_QWORD *)(v405 - 8);
  __chkstk_darwin(v405, v90);
  v347 = (uint64_t)&v331 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v92, v93);
  v95 = (char *)&v331 - v94;
  v346 = v96;
  __chkstk_darwin(v97, v98);
  v100 = (char *)&v331 - v99;
  v407 = sub_100005360(&qword_100117A38);
  __chkstk_darwin(v407, v101);
  v409 = (uint64_t)&v331 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
  v403 = sub_100005360(&qword_100117A40);
  __chkstk_darwin(v403, v103);
  v105 = (char *)&v331 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  v408 = sub_100005360(&qword_100117A48);
  __chkstk_darwin(v408, v106);
  v108 = (char *)&v331 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  v401 = sub_100005360(&qword_100117A50);
  v400 = *(_QWORD *)(v401 - 8);
  __chkstk_darwin(v401, v109);
  v399 = (uint64_t)&v331 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
  v406 = sub_100005360(&qword_100117A58);
  __chkstk_darwin(v406, v111);
  v113 = (char *)&v331 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v114, v115);
  v402 = (uint64_t)&v331 - v116;
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v117 = qword_10011FF08;
  KeyPath = swift_getKeyPath(&unk_1000D2BF8);
  *(_QWORD *)&v420 = v117;
  v119 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v420, KeyPath, v119);
  swift_release(KeyPath);
  if (*(_BYTE *)(v117 + 64) == 1)
  {
    v120 = v399;
    v121 = v412;
    sub_10008FC54(1, v399);
    v122 = (char *)v121 + *(int *)(v405 + 36);
    v123 = *v122;
    v124 = *((_QWORD *)v122 + 1);
    LOBYTE(v413) = v123;
    v414 = v124;
    v125 = sub_100005360(&qword_100113FF8);
    State.projectedValue.getter(&v420, v125);
    v127 = *((_QWORD *)&v420 + 1);
    v126 = v420;
    v128 = v421;
    v129 = v400;
    v130 = v401;
    (*(void (**)(char *, uint64_t, uint64_t))(v400 + 16))(v113, v120, v401);
    v131 = v406;
    v132 = &v113[*(int *)(v406 + 36)];
    *(_QWORD *)v132 = v126;
    *((_QWORD *)v132 + 1) = v127;
    v132[16] = v128;
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v120, v130);
    v133 = &qword_100117A58;
    v134 = v402;
    sub_100007CD8((uint64_t)v113, v402, &qword_100117A58);
    sub_10000531C(v134, (uint64_t)v105, &qword_100117A58);
    swift_storeEnumTagMultiPayload(v105, v403, 0);
    v135 = sub_100093700();
    v136 = sub_10003D3C8(&qword_100117AC0, &qword_100117A30, (void (*)(void))sub_100093944);
    v137 = v108;
    v138 = v105;
    v139 = v131;
    v140 = v404;
LABEL_19:
    _ConditionalContent<>.init(storage:)(v137, v138, v139, v140, v135, v136);
    v302 = v409;
    sub_10000531C((uint64_t)v108, v409, &qword_100117A48);
    swift_storeEnumTagMultiPayload(v302, v407, 0);
    v303 = sub_100093A04();
    v304 = sub_100008078(&qword_100117AE8, &qword_1001179A0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v410, v302, v408, v411, v303, v304);
    sub_100004F48((uint64_t)v108, &qword_100117A48);
    v305 = v134;
    return sub_100004F48(v305, v133);
  }
  v332 = v12;
  v141 = v412;
  v142 = *v412;
  v143 = *((_BYTE *)v412 + 8);
  swift_retain(*v412);
  v145 = sub_1000438AC(v144, v143);
  swift_release(v142);
  v146 = swift_getKeyPath(&unk_1000D2BD0);
  *(_QWORD *)&v420 = v145;
  v333 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v420, v146, v333);
  swift_release(v146);
  LOBYTE(v142) = *(_BYTE *)(v145 + 16);
  swift_release(v145);
  sub_100014084((uint64_t)v141, (uint64_t)v100, type metadata accessor for CalculatorHistoryView);
  if ((v142 & 1) != 0)
  {
    sub_100014150((uint64_t)v100, type metadata accessor for CalculatorHistoryView);
    sub_100014084((uint64_t)v141, (uint64_t)v95, type metadata accessor for CalculatorHistoryView);
  }
  else
  {
    v147 = &v100[*(int *)(v405 + 36)];
    v148 = *v147;
    v149 = *((_QWORD *)v147 + 1);
    LOBYTE(v420) = v148;
    *((_QWORD *)&v420 + 1) = v149;
    v150 = sub_100005360(&qword_100113FF8);
    State.wrappedValue.getter(&v413, v150);
    sub_100014150((uint64_t)v100, type metadata accessor for CalculatorHistoryView);
    v151 = v413;
    sub_100014084((uint64_t)v141, (uint64_t)v95, type metadata accessor for CalculatorHistoryView);
    if ((v151 & 1) != 0)
    {
      v152 = sub_100014150((uint64_t)v95, type metadata accessor for CalculatorHistoryView);
LABEL_18:
      v286 = v388;
      ProgressView<>.init<>()(v152);
      v287 = v393;
      v288 = v392;
      v289 = v395;
      (*(void (**)(char *, _QWORD, uint64_t))(v393 + 104))(v392, enum case for ControlSize.small(_:), v395);
      v290 = swift_getKeyPath(&unk_1000D2C70);
      v291 = (uint64_t *)&v81[*(int *)(v387 + 36)];
      v292 = sub_100005360(&qword_100117598);
      (*(void (**)(char *, char *, uint64_t))(v287 + 16))((char *)v291 + *(int *)(v292 + 28), v288, v289);
      *v291 = v290;
      v293 = v389;
      v294 = v391;
      (*(void (**)(char *, char *, uint64_t))(v389 + 16))(v81, v286, v391);
      (*(void (**)(char *, uint64_t))(v287 + 8))(v288, v289);
      v295 = (*(uint64_t (**)(char *, uint64_t))(v293 + 8))(v286, v294);
      v296 = static Alignment.center.getter(v295);
      v297 = v394;
      sub_10003607C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v394, 0.0, 1, INFINITY, 0, v296, v298);
      sub_100004F48((uint64_t)v81, &qword_100115228);
      v299 = v390;
      sub_10000531C(v297, v390, &qword_100115230);
      v300 = v404;
      v301 = (uint64_t (**)())(v299 + *(int *)(v404 + 36));
      *v301 = sub_100090024;
      v301[1] = 0;
      sub_100004F48(v297, &qword_100115230);
      v133 = &qword_100117A30;
      v134 = v396;
      sub_100007CD8(v299, v396, &qword_100117A30);
      sub_10000531C(v134, (uint64_t)v105, &qword_100117A30);
      swift_storeEnumTagMultiPayload(v105, v403, 1);
      v135 = sub_100093700();
      v136 = sub_10003D3C8(&qword_100117AC0, &qword_100117A30, (void (*)(void))sub_100093944);
      v137 = v108;
      v138 = v105;
      v139 = v406;
      v140 = v300;
      goto LABEL_19;
    }
  }
  v153 = *((_QWORD *)v95 + 3);
  *(_QWORD *)&v420 = *((_QWORD *)v95 + 2);
  *((_QWORD *)&v420 + 1) = v153;
  v154 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v413, v154);
  v155 = v413;
  v156 = sub_100014F70();
  swift_release(v155);
  v157 = *(_QWORD *)(v156 + 16);
  swift_retain(v157);
  swift_release(v156);
  v158 = swift_getKeyPath(&unk_1000D2C48);
  *(_QWORD *)&v420 = v157;
  v159 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v420, v158, v159);
  swift_release(v158);
  LOBYTE(v155) = *(_BYTE *)(v157 + 56);
  swift_release(v157);
  v152 = sub_100014150((uint64_t)v95, type metadata accessor for CalculatorHistoryView);
  if ((v155 & 1) == 0)
    goto LABEL_18;
  v161 = v154;
  v162 = static VerticalAlignment.center.getter(v160);
  v163 = (uint64_t)v378;
  *v378 = v162;
  *(_QWORD *)(v163 + 8) = 0;
  *(_BYTE *)(v163 + 16) = 1;
  v164 = v163 + *(int *)(sub_100005360(&qword_100117AF0) + 44);
  if (qword_100113A38 != -1)
    swift_once(&qword_100113A38, sub_10001B8B0);
  v166 = qword_10011F8C0;
  v167 = static VerticalAlignment.center.getter(v165);
  v168 = (uint64_t)v377;
  *v377 = v167;
  *(_QWORD *)(v168 + 8) = v166;
  *(_BYTE *)(v168 + 16) = 0;
  v169 = sub_100005360(&qword_100117AF8);
  v170 = v412;
  v171 = sub_100090C54(v412, v168 + *(int *)(v169 + 44));
  v172 = static Edge.Set.horizontal.getter(v171);
  v173 = v172;
  if (qword_100113A40 != -1)
    v172 = swift_once(&qword_100113A40, sub_10001B8C0);
  v174 = EdgeInsets.init(_all:)(v172, *(double *)&qword_10011F8C8);
  v176 = v175;
  v178 = v177;
  v180 = v179;
  v181 = v375;
  sub_10000531C(v168, v375, &qword_100117A08);
  v182 = v181 + *(int *)(v374 + 36);
  *(_BYTE *)v182 = v173;
  *(double *)(v182 + 8) = v174;
  *(_QWORD *)(v182 + 16) = v176;
  *(_QWORD *)(v182 + 24) = v178;
  *(_QWORD *)(v182 + 32) = v180;
  *(_BYTE *)(v182 + 40) = 0;
  sub_100004F48(v168, &qword_100117A08);
  v183 = sub_100007CD8(v181, v164, &qword_100117A10);
  v184 = static Alignment.center.getter(v183);
  _FrameLayout.init(width:height:alignment:)(&v420, 0, 1, 0x4046000000000000, 0, v184, v185);
  v186 = v397;
  sub_10000531C(v163, v397, &qword_100117A18);
  v187 = (_OWORD *)(v186 + *(int *)(v376 + 36));
  v188 = v421;
  *v187 = v420;
  v187[1] = v188;
  v187[2] = v422;
  sub_100004F48(v163, &qword_100117A18);
  sub_100007CD8(v186, v398, &qword_100117A20);
  v189 = v170[3];
  v413 = v170[2];
  v414 = v189;
  State.wrappedValue.getter(&v419, v161);
  v190 = v419;
  v191 = sub_100014F70();
  swift_release(v190);
  v192 = *(_QWORD *)(v191 + 16);
  swift_retain(v192);
  swift_release(v191);
  v193 = swift_getKeyPath(&unk_1000D2CA0);
  v413 = v192;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v413, v193, v159);
  swift_release(v193);
  swift_beginAccess(v192 + 48, &v419, 0, 0);
  v194 = *(_QWORD *)(v192 + 48);
  swift_bridgeObjectRetain(v194);
  swift_release(v192);
  v195 = *(_QWORD *)(v194 + 16);
  swift_bridgeObjectRelease(v194);
  if (v195)
  {
    v196 = type metadata accessor for CalculatorViewModel(0);
    v197 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v198 = Environment.init<A>(_:)(v196, v196, v197);
    v404 = v161;
    v199 = v349;
    *v349 = v198;
    *((_BYTE *)v199 + 8) = v200 & 1;
    v201 = type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
    v202 = sub_100005178(&qword_100116508, type metadata accessor for CalculatorUnitConversionViewModelWrapper, (uint64_t)&unk_1000CF484);
    v199[2] = Environment.init<A>(_:)(v201, v201, v202);
    *((_BYTE *)v199 + 24) = v203 & 1;
    v204 = type metadata accessor for CalculatorHistoryViewModel(0);
    v403 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
    v199[4] = Environment.init<A>(_:)(v204, v204, v403);
    *((_BYTE *)v199 + 40) = v205 & 1;
    v206 = type metadata accessor for CalculatorToolbarViewModel(0);
    v199[6] = Environment.init<A>(_:)(v206, v206, v333);
    *((_BYTE *)v199 + 56) = v207 & 1;
    v208 = (uint64_t *)((char *)v199 + *(int *)(v348 + 32));
    *v208 = swift_getKeyPath(&unk_1000D2CC8);
    v209 = sub_100005360(&qword_100115688);
    swift_storeEnumTagMultiPayload(v208, v209, 0);
    v210 = (uint64_t)v199;
    v211 = v350;
    sub_1000140C8(v210, v350, type metadata accessor for CalculatorHistoryListView);
    v212 = v405;
    v213 = (char *)v170 + *(int *)(v405 + 36);
    v214 = *v213;
    v215 = *((_QWORD *)v213 + 1);
    LOBYTE(v417) = v214;
    v418 = v215;
    v216 = sub_100005360(&qword_100113FF8);
    State.projectedValue.getter(&v413, v216);
    v217 = (uint64_t)v170;
    v218 = v413;
    v219 = v414;
    v220 = v415;
    v221 = v352;
    sub_100014084(v211, v352, type metadata accessor for CalculatorHistoryListView);
    v222 = v351;
    v223 = v221 + *(int *)(v351 + 36);
    *(_QWORD *)v223 = v218;
    *(_QWORD *)(v223 + 8) = v219;
    *(_BYTE *)(v223 + 16) = v220;
    sub_100014150(v211, type metadata accessor for CalculatorHistoryListView);
    v224 = v217;
    v225 = *(_QWORD *)(v217 + 24);
    v413 = *(_QWORD *)(v217 + 16);
    v414 = v225;
    State.wrappedValue.getter(&v417, v404);
    v226 = v417;
    v227 = sub_100014F70();
    swift_release(v226);
    v228 = sub_100093ABC();
    v229 = v353;
    View.environment<A>(_:)(v227, v222, v204, v228, v403);
    swift_release(v227);
    sub_100004F48(v221, &qword_1001179D0);
    v230 = swift_getKeyPath(&unk_1000D2CC8);
    v405 = v217 + *(int *)(v212 + 24);
    v404 = sub_100005360(&qword_100117888);
    v231 = v357;
    State.projectedValue.getter(v357, v404);
    v232 = sub_100005360(&qword_100115F10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v232 - 8) + 56))(v231, 0, 1, v232);
    v233 = (uint64_t)v356;
    v234 = (uint64_t *)&v356[*(int *)(v386 + 36)];
    v235 = sub_100005360(&qword_100117B10);
    sub_10000531C((uint64_t)v231, (uint64_t)v234 + *(int *)(v235 + 28), (uint64_t *)&unk_100115690);
    *v234 = v230;
    v236 = v354;
    v237 = v355;
    (*(void (**)(uint64_t, char *, uint64_t))(v354 + 16))(v233, v229, v355);
    sub_100004F48((uint64_t)v231, (uint64_t *)&unk_100115690);
    v238 = (*(uint64_t (**)(char *, uint64_t))(v236 + 8))(v229, v237);
    v239 = v362;
    static KeyEquivalent.delete.getter(v238);
    v240 = v347;
    sub_100014084(v217, v347, type metadata accessor for CalculatorHistoryView);
    v241 = *(unsigned __int8 *)(v345 + 80);
    v242 = (v241 + 16) & ~v241;
    v243 = v242 + v346;
    v244 = v241 | 7;
    v245 = swift_allocObject(&unk_10010C5F0, v242 + v346, v241 | 7);
    sub_1000140C8(v240, v245 + v242, type metadata accessor for CalculatorHistoryView);
    v246 = sub_100093B80();
    v247 = v359;
    View.onKeyPress(_:action:)(v239, sub_100093B44, v245, v386, v246);
    v248 = swift_release(v245);
    (*(void (**)(char *, uint64_t, __n128))(v363 + 8))(v239, v364, v248);
    sub_100004F48(v233, &qword_1001179E0);
    sub_100014084(v224, v240, type metadata accessor for CalculatorHistoryView);
    v249 = swift_allocObject(&unk_10010C618, v243, v244);
    sub_1000140C8(v240, v249 + v242, type metadata accessor for CalculatorHistoryView);
    v250 = v360;
    v251 = (uint64_t)v372;
    v252 = v361;
    (*(void (**)(char *, char *, uint64_t))(v360 + 16))(v372, v247, v361);
    v253 = (_QWORD *)(v251 + *(int *)(v358 + 36));
    *v253 = 0;
    v253[1] = 0;
    v253[2] = sub_100093C74;
    v253[3] = v249;
    (*(void (**)(char *, uint64_t))(v250 + 8))(v247, v252);
    v254 = v373;
    sub_100007CD8(v251, v373, &qword_1001179F0);
    v255 = v365;
    v256 = State.wrappedValue.getter(v365, v404);
    LOBYTE(v249) = EditMode.isEditing.getter(v256);
    (*(void (**)(_QWORD *, uint64_t))(v366 + 8))(v255, v367);
    v258 = 1;
    v259 = (uint64_t)v370;
    v260 = v385;
    if ((v249 & 1) != 0)
    {
      v261 = v337;
      sub_100090448(v337, v257);
      v262 = v335;
      v263 = MoveTransition.init(edge:)(2);
      v264 = v339;
      OpacityTransition.init()(v263);
      v265 = sub_100005178(&qword_100117B40, (uint64_t (*)(uint64_t))&type metadata accessor for MoveTransition, (uint64_t)&protocol conformance descriptor for MoveTransition);
      v266 = sub_100005178(&qword_100117B48, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
      v267 = v341;
      v268 = v342;
      v269 = v344;
      Transition.combined<A>(with:)(v264, v342, v344, v265, v266);
      (*(void (**)(char *, uint64_t))(v340 + 8))(v264, v269);
      (*(void (**)(char *, uint64_t))(v336 + 8))(v262, v268);
      v270 = v332;
      v271 = v338;
      v272 = v343;
      (*(void (**)(char *, char *, uint64_t))(v332 + 16))(v338, v267, v343);
      v413 = v268;
      v414 = v269;
      v254 = v373;
      v415 = v265;
      v416 = v266;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v413, &opaque type descriptor for <<opaque return type of Transition.combined<A>(with:)>>, 1);
      v274 = AnyTransition.init<A>(_:)(v271, v272, OpaqueTypeConformance2);
      v275 = v334;
      sub_10000531C(v261, v334, &qword_1001179B8);
      *(_QWORD *)(v275 + *(int *)(v385 + 36)) = v274;
      v276 = *(void (**)(char *, uint64_t))(v270 + 8);
      v251 = (uint64_t)v372;
      v276(v267, v272);
      sub_100004F48(v261, &qword_1001179B8);
      sub_100007CD8(v275, v259, &qword_1001179C0);
      v260 = v385;
      v258 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v368 + 56))(v259, v258, 1, v260);
    v277 = &qword_1001179F0;
    sub_10000531C(v254, v251, &qword_1001179F0);
    v278 = v369;
    sub_10000531C(v259, v369, &qword_1001179C8);
    v279 = v371;
    sub_10000531C(v251, v371, &qword_1001179F0);
    v280 = sub_100005360(&qword_100117B28);
    sub_10000531C(v278, v279 + *(int *)(v280 + 48), &qword_1001179C8);
    sub_100004F48(v278, &qword_1001179C8);
    sub_100004F48(v251, &qword_1001179F0);
    v281 = v380;
    sub_10000531C(v279, v380, &qword_1001179A8);
    swift_storeEnumTagMultiPayload(v281, v379, 1);
    v282 = sub_100093700();
    v283 = sub_100008078(&qword_100117B30, &qword_1001179A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v284 = v382;
    _ConditionalContent<>.init(storage:)(v382, v281, v406, v383, v282, v283);
    sub_100004F48(v279, &qword_1001179A8);
    sub_100004F48(v259, &qword_1001179C8);
    v285 = v254;
  }
  else
  {
    v307 = v399;
    sub_10008FC54(0, v399);
    v308 = (char *)v170 + *(int *)(v405 + 36);
    v309 = *v308;
    v310 = *((_QWORD *)v308 + 1);
    LOBYTE(v417) = v309;
    v418 = v310;
    v311 = sub_100005360(&qword_100113FF8);
    State.projectedValue.getter(&v413, v311);
    v312 = v413;
    v313 = v414;
    v314 = v415;
    v315 = v400;
    v316 = v401;
    (*(void (**)(char *, uint64_t, uint64_t))(v400 + 16))(v113, v307, v401);
    v317 = v406;
    v318 = &v113[*(int *)(v406 + 36)];
    *(_QWORD *)v318 = v312;
    *((_QWORD *)v318 + 1) = v313;
    v318[16] = v314;
    (*(void (**)(uint64_t, uint64_t))(v315 + 8))(v307, v316);
    v277 = &qword_100117A58;
    v319 = v402;
    sub_100007CD8((uint64_t)v113, v402, &qword_100117A58);
    v320 = v380;
    sub_10000531C(v319, v380, &qword_100117A58);
    swift_storeEnumTagMultiPayload(v320, v379, 0);
    v321 = sub_100093700();
    v322 = sub_100008078(&qword_100117B30, &qword_1001179A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v284 = v382;
    _ConditionalContent<>.init(storage:)(v382, v320, v317, v383, v321, v322);
    v285 = v319;
  }
  sub_100004F48(v285, v277);
  v133 = &qword_100117A20;
  v323 = v398;
  v324 = v397;
  sub_10000531C(v398, v397, &qword_100117A20);
  v325 = v381;
  sub_10000531C((uint64_t)v284, v381, &qword_100117A00);
  v326 = v384;
  sub_10000531C(v324, v384, &qword_100117A20);
  v327 = sub_100005360(&qword_100117B38);
  sub_10000531C(v325, v326 + *(int *)(v327 + 48), &qword_100117A00);
  sub_100004F48(v325, &qword_100117A00);
  sub_100004F48(v324, &qword_100117A20);
  v328 = v409;
  sub_10000531C(v326, v409, &qword_1001179A0);
  swift_storeEnumTagMultiPayload(v328, v407, 1);
  v329 = sub_100093A04();
  v330 = sub_100008078(&qword_100117AE8, &qword_1001179A0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v410, v328, v408, v411, v329, v330);
  sub_100004F48(v326, &qword_1001179A0);
  sub_100004F48((uint64_t)v284, &qword_100117A00);
  v305 = v323;
  return sub_100004F48(v305, v133);
}

uint64_t sub_10008FC54@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin(v3, v4);
  v44 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005360(&qword_100117AA0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005360(&qword_100117A90);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100005360(&qword_100115218);
  __chkstk_darwin(v43, v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005360(&qword_100115220);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005360(&qword_100117A68);
  v23 = __chkstk_darwin(v21, v22);
  v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113AE8 != -1)
    swift_once(&qword_100113AE8, sub_10001BA80);
  v26 = qword_10011F970;
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v23);
  *((_QWORD *)v9 + 1) = v26;
  v9[16] = 0;
  v27 = sub_100005360(&qword_100117B50);
  sub_100092058(a1 & 1, (uint64_t)&v9[*(int *)(v27 + 44)]);
  if (qword_100113D80 != -1)
    swift_once(&qword_100113D80, sub_100053224);
  v28 = qword_10011FD28;
  KeyPath = swift_getKeyPath(&unk_1000D2CF8);
  sub_10000531C((uint64_t)v9, (uint64_t)v13, &qword_100117AA0);
  v30 = (uint64_t *)&v13[*(int *)(v10 + 36)];
  *v30 = KeyPath;
  v30[1] = v28;
  swift_retain(v28);
  sub_100004F48((uint64_t)v9, &qword_100117AA0);
  v31 = swift_getKeyPath(&unk_1000D2D28);
  sub_10000531C((uint64_t)v13, (uint64_t)v16, &qword_100117A90);
  v32 = &v16[*(int *)(v43 + 36)];
  *(_QWORD *)v32 = v31;
  v32[8] = 1;
  v33 = sub_100004F48((uint64_t)v13, &qword_100117A90);
  v34 = static Alignment.center.getter(v33);
  sub_100036024(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v20, 0.0, 1, INFINITY, 0, v34, v35);
  v36 = sub_100004F48((uint64_t)v16, &qword_100115218);
  LOBYTE(v31) = static Edge.Set.all.getter(v36);
  sub_10000531C((uint64_t)v20, (uint64_t)v25, &qword_100115220);
  v37 = &v25[*(int *)(v21 + 36)];
  *v37 = v31;
  *(_OWORD *)(v37 + 8) = 0u;
  *(_OWORD *)(v37 + 24) = 0u;
  v37[40] = 1;
  v38 = sub_100004F48((uint64_t)v20, &qword_100115220);
  v39 = v44;
  static AccessibilityChildBehavior.combine.getter(v38);
  v40 = sub_10003D3C8(&qword_100117A70, &qword_100117A68, (void (*)(void))sub_1000937BC);
  View.accessibilityElement(children:)(v39, v21, v40);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v39, v47);
  return sub_100004F48((uint64_t)v25, &qword_100117A68);
}

uint64_t sub_100090024()
{
  return Transaction.animation.setter(0);
}

uint64_t sub_100090048(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_100005360((uint64_t *)&unk_100115690);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000531C(a1, (uint64_t)v5, (uint64_t *)&unk_100115690);
  return EnvironmentValues.editMode.setter(v5);
}

uint64_t sub_1000900C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for EditMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CalculatorHistoryView(0);
  v7 = sub_100005360(&qword_100117888);
  v8 = State.wrappedValue.getter(v6, v7);
  v9 = EditMode.isEditing.getter(v8);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v9 & 1) != 0)
  {
    sub_1000901B8();
    v10 = (unsigned int *)&enum case for KeyPress.Result.handled(_:);
  }
  else
  {
    v10 = (unsigned int *)&enum case for KeyPress.Result.ignored(_:);
  }
  v11 = *v10;
  v12 = type metadata accessor for KeyPress.Result(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a1, v11, v12);
}

uint64_t sub_1000901B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v5, v0);
  v1 = v5;
  v2 = sub_100014F70();
  swift_release(v1);
  sub_1000165C0();
  swift_release(v2);
  type metadata accessor for CalculatorHistoryView(0);
  LOBYTE(v5) = 1;
  v3 = sub_100005360(&qword_100113FF8);
  return State.wrappedValue.setter(&v5, v3);
}

uint64_t sub_10009027C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;

  v2 = type metadata accessor for EditMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v22 - v9;
  v11 = *(_QWORD *)(a1 + 24);
  v22[0] = *(_QWORD *)(a1 + 16);
  v22[1] = v11;
  v12 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v23, v12);
  v13 = v23;
  v14 = sub_100014F70();
  swift_release(v13);
  v15 = *(_QWORD *)(v14 + 16);
  swift_retain(v15);
  swift_release(v14);
  KeyPath = swift_getKeyPath(&unk_1000D2CA0);
  v22[0] = v15;
  v17 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v22, KeyPath, v17);
  swift_release(KeyPath);
  swift_beginAccess(v15 + 48, v22, 0, 0);
  v18 = *(_QWORD *)(v15 + 48);
  swift_bridgeObjectRetain(v18);
  swift_release(v15);
  v19 = *(_QWORD *)(v18 + 16);
  result = swift_bridgeObjectRelease(v18);
  if (!v19)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v10, enum case for EditMode.inactive(_:), v2);
    type metadata accessor for CalculatorHistoryView(0);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
    v21 = sub_100005360(&qword_100117888);
    State.wrappedValue.setter(v6, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  }
  return result;
}

uint64_t sub_100090448@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  v56 = a1;
  v4 = type metadata accessor for Divider(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100117BB8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100117BC0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005360(&qword_100117BC8);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v19);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v22 = sub_100005360(&qword_100117BD0);
  v23 = sub_100091294(v3, (uint64_t)&v12[*(int *)(v22 + 44)]);
  v24 = static Edge.Set.horizontal.getter(v23);
  v25 = v24;
  if (qword_100113A40 != -1)
    v24 = swift_once(&qword_100113A40, sub_10001B8C0);
  v26 = EdgeInsets.init(_all:)(v24, *(double *)&qword_10011F8C8);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_10000531C((uint64_t)v12, (uint64_t)v16, &qword_100117BB8);
  v33 = &v16[*(int *)(v13 + 36)];
  *v33 = v25;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  v34 = sub_100004F48((uint64_t)v12, &qword_100117BB8);
  v35 = static Edge.Set.vertical.getter(v34);
  v36 = v35;
  if (qword_100113A48 != -1)
    v35 = swift_once(&qword_100113A48, sub_10001B8D0);
  v37 = EdgeInsets.init(_all:)(v35, *(double *)&qword_10011F8D0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_10000531C((uint64_t)v16, (uint64_t)v21, &qword_100117BC0);
  v44 = &v21[*(int *)(v17 + 36)];
  *v44 = v36;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = sub_100004F48((uint64_t)v16, &qword_100117BC0);
  v46 = Divider.init()(v45);
  v47 = static Alignment.top.getter(v46);
  v49 = v48;
  v50 = sub_100005360(&qword_1001179B8);
  v51 = v56;
  v52 = v56 + *(int *)(v50 + 36);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v52, v8, v4);
  v53 = (uint64_t *)(v52 + *(int *)(sub_100005360(&qword_100117BD8) + 36));
  *v53 = v47;
  v53[1] = v49;
  sub_10000531C((uint64_t)v21, v51, &qword_100117BC8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return sub_100004F48((uint64_t)v21, &qword_100117BC8);
}

uint64_t sub_100090750(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[5];
  __int128 v54;
  __int128 v55;

  v2 = type metadata accessor for PPTTestCase(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v6 = __chkstk_darwin(v2, v5);
  v7 = type metadata accessor for AnimationCompletionCriteria(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = PPTTestCase.parameters.getter(v12);
  v51 = 0x664F7265626D756ELL;
  v52 = 0xEF7364726F636552;
  AnyHashable.init<A>(_:)(&v51, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v13 + 16) && (v14 = sub_10001CAFC((uint64_t)v53), (v15 & 1) != 0))
  {
    sub_1000052E0(*(_QWORD *)(v13 + 56) + 32 * v14, (uint64_t)&v54);
  }
  else
  {
    v54 = 0u;
    v55 = 0u;
  }
  swift_bridgeObjectRelease(v13);
  sub_10001E670((uint64_t)v53);
  if (*((_QWORD *)&v55 + 1))
  {
    if (swift_dynamicCast(&v51, &v54, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      result = v51;
      v17 = v52;
      goto LABEL_10;
    }
  }
  else
  {
    sub_100004F48((uint64_t)&v54, &qword_100114A20);
  }
  v17 = 0xE400000000000000;
  result = 808464433;
LABEL_10:
  v18 = HIBYTE(v17) & 0xF;
  v19 = result & 0xFFFFFFFFFFFFLL;
  if ((v17 & 0x2000000000000000) != 0)
    v20 = HIBYTE(v17) & 0xF;
  else
    v20 = result & 0xFFFFFFFFFFFFLL;
  v49 = v8;
  v50 = v7;
  if (!v20)
  {
    swift_bridgeObjectRelease(v17);
    goto LABEL_54;
  }
  if ((v17 & 0x1000000000000000) != 0)
  {
    v22 = (uint64_t)sub_100039CD0(result, v17, 10);
    v24 = v47;
    goto LABEL_53;
  }
  if ((v17 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v21 = (unsigned __int8 *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v21 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v17);
    v22 = (uint64_t)sub_100039C7C(v21, v19, 10);
    v24 = v23 & 1;
LABEL_53:
    swift_bridgeObjectRelease(v17);
    if ((v24 & 1) == 0)
    {
LABEL_55:
      v35 = static AnimationCompletionCriteria.logicallyComplete.getter(v34);
      v37 = __chkstk_darwin(v35, v36);
      v48[-2] = v48[1];
      v48[-1] = v22;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v37);
      v38 = *(unsigned __int8 *)(v3 + 80);
      v39 = (v38 + 16) & ~v38;
      v40 = swift_allocObject(&unk_10010C5A0, v39 + v4, v38 | 7);
      v41 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(v40 + v39, (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
      v42 = static Animation.default.getter(v41);
      withAnimation<A>(_:completionCriteria:_:completion:)(v42, v11, sub_100093554, &v48[-4], sub_1000935CC, v40, (char *)&type metadata for () + 8);
      swift_release(v40);
      v43 = swift_release(v42);
      return (*(uint64_t (**)(char *, uint64_t, __n128))(v49 + 8))(v11, v50, v43);
    }
LABEL_54:
    v22 = 1000;
    goto LABEL_55;
  }
  v53[0] = result;
  v53[1] = v17 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v18)
      goto LABEL_66;
    if (v18 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_40;
    v22 = (BYTE1(result) - 48);
    if (v18 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_40;
      v22 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      v25 = v18 - 3;
      if (v25)
      {
        v26 = (unsigned __int8 *)v53 + 3;
        while (1)
        {
          v27 = *v26 - 48;
          if (v27 > 9)
            goto LABEL_40;
          v28 = 10 * v22;
          if ((unsigned __int128)(v22 * (__int128)10) >> 64 != (10 * v22) >> 63)
            goto LABEL_40;
          v22 = v28 + v27;
          if (__OFADD__(v28, v27))
            goto LABEL_40;
          v24 = 0;
          ++v26;
          if (!--v25)
            goto LABEL_53;
        }
      }
    }
LABEL_52:
    v24 = 0;
    goto LABEL_53;
  }
  if (result != 45)
  {
    if (!v18 || (result - 48) > 9u)
      goto LABEL_40;
    v22 = (result - 48);
    if (v18 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_40;
      v22 = 10 * (result - 48) + (BYTE1(result) - 48);
      v29 = v18 - 2;
      if (v29)
      {
        v30 = (unsigned __int8 *)v53 + 2;
        while (1)
        {
          v31 = *v30 - 48;
          if (v31 > 9)
            goto LABEL_40;
          v32 = 10 * v22;
          if ((unsigned __int128)(v22 * (__int128)10) >> 64 != (10 * v22) >> 63)
            goto LABEL_40;
          v22 = v32 + v31;
          if (__OFADD__(v32, v31))
            goto LABEL_40;
          v24 = 0;
          ++v30;
          if (!--v29)
            goto LABEL_53;
        }
      }
    }
    goto LABEL_52;
  }
  if (v18)
  {
    if (v18 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v18 == 2)
      {
        v24 = 0;
        v22 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_53;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v22 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v33 = v18 - 3;
        if (!v33)
          goto LABEL_52;
        v44 = (unsigned __int8 *)v53 + 3;
        while (1)
        {
          v45 = *v44 - 48;
          if (v45 > 9)
            break;
          v46 = 10 * v22;
          if ((unsigned __int128)(v22 * (__int128)10) >> 64 != (10 * v22) >> 63)
            break;
          v22 = v46 - v45;
          if (__OFSUB__(v46, v45))
            break;
          v24 = 0;
          ++v44;
          if (!--v33)
            goto LABEL_53;
        }
      }
    }
LABEL_40:
    v22 = 0;
    v24 = 1;
    goto LABEL_53;
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_100090C54@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  uint64_t v94;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v86 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v85 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005360((uint64_t *)&unk_100115690);
  v9 = __chkstk_darwin(v7, v8);
  v82 = (uint64_t *)((char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for EditButton(0, v9);
  v80 = *(_QWORD *)(v11 - 8);
  v81 = v11;
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100005360(&qword_100117C10);
  __chkstk_darwin(v78, v15);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100005360(&qword_100117C18);
  __chkstk_darwin(v83, v18);
  v84 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005360(&qword_100117C20);
  v91 = *(_QWORD *)(v20 - 8);
  v92 = v20;
  __chkstk_darwin(v20, v21);
  v79 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100005360(&qword_100117C28);
  __chkstk_darwin(v23, v24);
  v90 = (uint64_t)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v78 - v28;
  v30 = *a1;
  v31 = *((_BYTE *)a1 + 8);
  swift_retain(*a1);
  v33 = sub_1000438AC(v32, v31);
  swift_release(v30);
  KeyPath = swift_getKeyPath(&unk_1000D2DB0);
  v93[0] = v33;
  v35 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v93, KeyPath, v35);
  swift_release(KeyPath);
  LODWORD(v30) = *(unsigned __int8 *)(v33 + 17);
  swift_release(v33);
  v87 = v4;
  if ((_DWORD)v30 == 3)
  {
    v36 = 0;
    v37 = 0;
    v88 = 255;
    v89 = 0;
  }
  else
  {
    v38 = type metadata accessor for CalculatorLayout(0);
    v39 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    v40 = Environment.init<A>(_:)(v38, v38, v39);
    v88 = v41 & 1;
    v89 = v40;
    v42 = type metadata accessor for CalculatorToolbarViewModel(0);
    v36 = Environment.init<A>(_:)(v42, v42, v35);
    v37 = v43 & 1;
  }
  v44 = a1[3];
  v93[0] = a1[2];
  v93[1] = v44;
  v45 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v94, v45);
  v46 = v94;
  v47 = sub_100014F70();
  swift_release(v46);
  v48 = *(_QWORD *)(v47 + 16);
  swift_retain(v48);
  swift_release(v47);
  v49 = swift_getKeyPath(&unk_1000D2CA0);
  v93[0] = v48;
  v50 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v93, v49, v50);
  swift_release(v49);
  swift_beginAccess(v48 + 48, v93, 0, 0);
  v51 = *(_QWORD *)(v48 + 48);
  swift_bridgeObjectRetain(v51);
  swift_release(v48);
  v52 = *(_QWORD *)(v51 + 16);
  v53 = swift_bridgeObjectRelease(v51);
  if (v52)
  {
    EditButton.init()(v53);
    v54 = swift_getKeyPath(&unk_1000D2CC8);
    type metadata accessor for CalculatorHistoryView(0);
    v55 = sub_100005360(&qword_100117888);
    v56 = v82;
    State.projectedValue.getter(v82, v55);
    v57 = sub_100005360(&qword_100115F10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
    v58 = (uint64_t *)&v17[*(int *)(v78 + 36)];
    v59 = sub_100005360(&qword_100117B10);
    sub_10000531C((uint64_t)v56, (uint64_t)v58 + *(int *)(v59 + 28), (uint64_t *)&unk_100115690);
    *v58 = v54;
    v61 = v80;
    v60 = v81;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v17, v14, v81);
    sub_100004F48((uint64_t)v56, (uint64_t *)&unk_100115690);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v60);
    v62 = v84;
    sub_10000531C((uint64_t)v17, v84, &qword_100117C10);
    v63 = v83;
    v64 = (_OWORD *)(v62 + *(int *)(v83 + 36));
    *v64 = xmmword_1000D2AC0;
    v64[1] = xmmword_1000D2AD0;
    sub_100004F48((uint64_t)v17, &qword_100117C10);
    v66 = v85;
    v65 = v86;
    v67 = v87;
    (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v85, enum case for DynamicTypeSize.large(_:), v87);
    v68 = sub_1000940BC();
    v69 = v79;
    View.dynamicTypeSize(_:)(v66, v63, v68);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
    sub_100004F48(v62, &qword_100117C18);
    v71 = v91;
    v70 = v92;
    (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v29, v69, v92);
    v72 = 0;
  }
  else
  {
    v72 = 1;
    v71 = v91;
    v70 = v92;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56))(v29, v72, 1, v70);
  v73 = v90;
  sub_10000531C((uint64_t)v29, v90, &qword_100117C28);
  v75 = v88;
  v74 = v89;
  *(_QWORD *)a2 = v89;
  *(_QWORD *)(a2 + 8) = v75;
  *(_QWORD *)(a2 + 16) = v36;
  *(_BYTE *)(a2 + 24) = v37;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  v76 = sub_100005360(&qword_100117C48);
  sub_10000531C(v73, a2 + *(int *)(v76 + 64), &qword_100117C28);
  sub_1000941C4(v74, v75, v36);
  sub_100004F48((uint64_t)v29, &qword_100117C28);
  sub_100004F48(v73, &qword_100117C28);
  return sub_1000941FC(v74, v75, v36);
}

uint64_t sub_100091294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v98[12];
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 v127;
  _QWORD v128[3];

  v110 = a2;
  v3 = type metadata accessor for CalculatorHistoryView(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v112 = v6;
  v7 = &v98[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100005360(&qword_100115CC8);
  v115 = *(_QWORD *)(v8 - 8);
  v116 = v8;
  __chkstk_darwin(v8, v9);
  v113 = &v98[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v114 = sub_100005360(&qword_100117BE0);
  __chkstk_darwin(v114, v11);
  v13 = &v98[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100005360(&qword_100117BE8);
  __chkstk_darwin(v14, v15);
  v118 = &v98[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v119 = sub_100005360(&qword_100117BF0);
  v107 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119, v17);
  v109 = &v98[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19, v20);
  v111 = &v98[-v21];
  v22 = sub_100005360(&qword_100117BF8);
  __chkstk_darwin(v22, v23);
  v108 = &v98[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25, v26);
  v28 = &v98[-v27];
  v29 = *(_QWORD *)(a1 + 24);
  v128[0] = *(_QWORD *)(a1 + 16);
  v128[1] = v29;
  v105 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v125, v105);
  v30 = v125;
  v31 = sub_100014F70();
  swift_release(v30);
  KeyPath = swift_getKeyPath(&unk_1000D2D88);
  v128[0] = v31;
  v33 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v128, KeyPath, v33);
  swift_release(KeyPath);
  swift_beginAccess(v31 + 24, v128, 0, 0);
  v34 = *(_QWORD *)(v31 + 24);
  swift_bridgeObjectRetain(v34);
  swift_release(v31);
  v35 = *(_QWORD *)(v34 + 16);
  swift_bridgeObjectRelease(v34);
  v117 = v28;
  v106 = v3;
  if (v35)
  {
    sub_100014084(a1, (uint64_t)v7, type metadata accessor for CalculatorHistoryView);
    v36 = *(unsigned __int8 *)(v4 + 80);
    v102 = ((v36 + 16) & ~v36) + v112;
    v37 = (v36 + 16) & ~v36;
    v103 = v37;
    v101 = v36 | 7;
    v38 = swift_allocObject(&unk_10010C640, v102, v36 | 7);
    v39 = sub_1000140C8((uint64_t)v7, v38 + v37, type metadata accessor for CalculatorHistoryView);
    __chkstk_darwin(v39, v40);
    *(_QWORD *)&v98[-16] = a1;
    v104 = v4;
    v41 = v3;
    v42 = v113;
    Button.init(action:label:)(sub_100093ECC, v38, sub_100093ED8, &v98[-32], &type metadata for Text, &protocol witness table for Text);
    v44 = v115;
    v43 = v116;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v115 + 16))(v13, v42, v116);
    v45 = v114;
    v46 = &v13[*(int *)(v114 + 36)];
    *v46 = xmmword_1000CEB80;
    v46[1] = xmmword_1000CEB90;
    (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v42, v43);
    v47 = sub_100093EE0();
    v48 = (uint64_t)v118;
    View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001000D7550, v45, v47);
    sub_100004F48((uint64_t)v13, &qword_100117BE0);
    v49 = a1 + *(int *)(v41 + 28);
    v50 = *(_BYTE *)v49;
    v51 = *(_QWORD *)(v49 + 8);
    LOBYTE(v122) = v50;
    v123 = v51;
    v52 = sub_100005360(&qword_100113FF8);
    State.projectedValue.getter(&v125, v52);
    v53 = v125;
    v100 = v126;
    v99 = v127;
    v54 = *(_QWORD *)(a1 + 24);
    v125 = *(_QWORD *)(a1 + 16);
    v126 = v54;
    State.wrappedValue.getter(&v122, v105);
    v55 = v122;
    v56 = sub_100014F70();
    swift_release(v55);
    v57 = swift_getKeyPath(&unk_1000D2D88);
    v125 = v56;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v125, v57, v33);
    swift_release(v57);
    swift_beginAccess(v56 + 24, &v125, 0, 0);
    v58 = *(_QWORD *)(v56 + 24);
    swift_bridgeObjectRetain(v58);
    swift_release(v56);
    v59 = *(_QWORD *)(v58 + 16);
    swift_bridgeObjectRelease(v58);
    sub_100014084(a1, (uint64_t)v7, type metadata accessor for CalculatorHistoryView);
    v60 = swift_allocObject(&unk_10010C668, v102, v101);
    sub_1000140C8((uint64_t)v7, v60 + v103, type metadata accessor for CalculatorHistoryView);
    v61 = v111;
    sub_10000531C(v48, (uint64_t)v111, &qword_100117BE8);
    v62 = v119;
    v63 = &v61[*(int *)(v119 + 36)];
    v64 = v100;
    *(_QWORD *)v63 = v53;
    *((_QWORD *)v63 + 1) = v64;
    v63[16] = v99;
    *((_QWORD *)v63 + 3) = v59;
    v63[32] = 0;
    *((_QWORD *)v63 + 5) = sub_100093F68;
    *((_QWORD *)v63 + 6) = v60;
    v65 = v48;
    v28 = v117;
    v66 = v104;
    sub_100004F48(v65, &qword_100117BE8);
    sub_100007CD8((uint64_t)v61, (uint64_t)v28, &qword_100117BF0);
    v67 = 0;
    v68 = (uint64_t)v7;
    v69 = v62;
  }
  else
  {
    v67 = 1;
    v66 = v4;
    v68 = (uint64_t)v7;
    v69 = v119;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v28, v67, 1, v69);
  sub_100014084(a1, v68, type metadata accessor for CalculatorHistoryView);
  v70 = *(unsigned __int8 *)(v66 + 80);
  v71 = (v70 + 16) & ~v70;
  v72 = v71 + v112;
  v73 = v70 | 7;
  v74 = swift_allocObject(&unk_10010C690, v71 + v112, v70 | 7);
  sub_1000140C8(v68, v74 + v71, type metadata accessor for CalculatorHistoryView);
  v75 = v113;
  Button.init(action:label:)(sub_100093F78, v74, sub_100091E84, 0, &type metadata for Text, &protocol witness table for Text);
  v77 = v115;
  v76 = v116;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v115 + 16))(v13, v75, v116);
  v78 = v114;
  v79 = &v13[*(int *)(v114 + 36)];
  *v79 = xmmword_1000CEB80;
  v79[1] = xmmword_1000CEB90;
  (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v75, v76);
  v80 = sub_100093EE0();
  v81 = (uint64_t)v118;
  View.accessibilityIdentifier(_:)(0x6C416574656C6544, 0xEF6E6F747475426CLL, v78, v80);
  sub_100004F48((uint64_t)v13, &qword_100117BE0);
  v82 = a1 + *(int *)(v106 + 32);
  v83 = *(_BYTE *)v82;
  v84 = *(_QWORD *)(v82 + 8);
  v120 = v83;
  v121 = v84;
  v85 = sub_100005360(&qword_100113FF8);
  State.projectedValue.getter(&v122, v85);
  v86 = v122;
  v87 = v123;
  LOBYTE(v77) = v124;
  sub_100014084(a1, v68, type metadata accessor for CalculatorHistoryView);
  v88 = swift_allocObject(&unk_10010C6B8, v72, v73);
  sub_1000140C8(v68, v88 + v71, type metadata accessor for CalculatorHistoryView);
  v89 = v109;
  sub_10000531C(v81, (uint64_t)v109, &qword_100117BE8);
  v90 = &v89[*(int *)(v119 + 36)];
  *(_QWORD *)v90 = v86;
  *((_QWORD *)v90 + 1) = v87;
  v90[16] = v77;
  *((_QWORD *)v90 + 3) = 0;
  v90[32] = 1;
  *((_QWORD *)v90 + 5) = sub_10009406C;
  *((_QWORD *)v90 + 6) = v88;
  sub_100004F48(v81, &qword_100117BE8);
  v91 = v111;
  sub_100007CD8((uint64_t)v89, (uint64_t)v111, &qword_100117BF0);
  v92 = (uint64_t)v117;
  v93 = v108;
  sub_10000531C((uint64_t)v117, (uint64_t)v108, &qword_100117BF8);
  sub_10000531C((uint64_t)v91, (uint64_t)v89, &qword_100117BF0);
  v94 = v110;
  sub_10000531C((uint64_t)v93, v110, &qword_100117BF8);
  v95 = sub_100005360(&qword_100117C08);
  v96 = v94 + *(int *)(v95 + 48);
  *(_QWORD *)v96 = 0;
  *(_BYTE *)(v96 + 8) = 1;
  sub_10000531C((uint64_t)v89, v94 + *(int *)(v95 + 64), &qword_100117BF0);
  sub_100004F48((uint64_t)v91, &qword_100117BF0);
  sub_100004F48(v92, &qword_100117BF8);
  sub_100004F48((uint64_t)v89, &qword_100117BF0);
  return sub_100004F48((uint64_t)v93, &qword_100117BF8);
}

uint64_t sub_100091B78(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for CalculatorHistoryView(0) + 28));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100005360(&qword_100113FF8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100091BE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;

  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 1);
  v8._countAndFlagsBits = 0x28206574656C6544;
  v8._object = (void *)0xE800000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v8);
  v9 = *(_QWORD *)(a1 + 24);
  v24[0] = *(_QWORD *)(a1 + 16);
  v24[1] = v9;
  v10 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v25, v10);
  v11 = v25;
  v12 = sub_100014F70();
  swift_release(v11);
  KeyPath = swift_getKeyPath(&unk_1000D2D88);
  v24[0] = v12;
  v14 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v24, KeyPath, v14);
  swift_release(KeyPath);
  swift_beginAccess(v12 + 24, v24, 0, 0);
  v15 = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain(v15);
  swift_release(v12);
  v16 = *(_QWORD *)(v15 + 16);
  swift_bridgeObjectRelease(v15);
  v25 = v16;
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v25, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v17._countAndFlagsBits = 41;
  v17._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v17);
  v18 = LocalizedStringKey.init(stringInterpolation:)(v7);
  result = Text.init(_:tableName:bundle:comment:)(v18);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v20;
  *(_BYTE *)(a2 + 16) = v21 & 1;
  *(_QWORD *)(a2 + 24) = v22;
  return result;
}

double sub_100091DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;
  uint64_t v4;

  v0 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v4, v0);
  v1 = v4;
  v2 = sub_100014F70();
  swift_release(v1);
  sub_100016818();
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100091E1C(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for CalculatorHistoryView(0) + 32));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100005360(&qword_100113FF8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100091E84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x41206574656C6544, 0xEA00000000006C6CLL);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

double sub_100091F00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  _QWORD v10[3];
  uint64_t v11;

  v10[1] = *(_QWORD *)(a1 + 24);
  v1 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v11, v1);
  v2 = v11;
  v3 = sub_100014F70();
  swift_release(v2);
  sub_100010738();
  KeyPath = swift_getKeyPath(&unk_1000D2D88);
  v10[0] = v3;
  v5 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v10, KeyPath, v5);
  swift_release(KeyPath);
  v10[0] = v3;
  v6 = swift_getKeyPath(&unk_1000D2D88);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v10, v6, v5);
  swift_release(v6);
  swift_beginAccess(v3 + 24, v10, 1, 0);
  v7 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v7);
  sub_1000150CC();
  v11 = v3;
  v8 = swift_getKeyPath(&unk_1000D2D88);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v11, v8, v5);
  swift_release(v3);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_100092058@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t KeyPath;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v43[12];
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;

  v46 = a2;
  v3 = sub_100005360(&qword_100117B58);
  __chkstk_darwin(v3, v4);
  v47 = &v43[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6, v7);
  v48 = &v43[-v8];
  LODWORD(v45) = a1;
  sub_1000923B8(a1, (uint64_t)&v49);
  v10 = v49;
  v11 = v50;
  v12 = v51;
  v13 = BYTE2(v51);
  if (qword_100113AE0 != -1)
    v9 = swift_once(&qword_100113AE0, sub_10001BA70);
  v14 = qword_10011F968;
  v15 = static Alignment.center.getter(v9);
  v17 = _FrameLayout.init(width:height:alignment:)(&v64, v14, 0, v14, 0, v15, v16);
  v18 = v64;
  v19 = v65;
  v20 = v66;
  v44 = v67;
  v21 = v68;
  v22 = v69;
  v23 = static Edge.Set.bottom.getter(v17);
  v24 = v23;
  if (qword_100113AF0 != -1)
    v23 = swift_once(&qword_100113AF0, sub_10001BA90);
  v25 = EdgeInsets.init(_all:)(v23, *(double *)&qword_10011F978);
  v49 = v10;
  v50 = v11;
  LOWORD(v51) = v12;
  BYTE2(v51) = v13;
  v52 = v18;
  v53 = v19;
  v54 = v20;
  v55 = v44;
  v56 = v21;
  v57 = v22;
  v58 = v24;
  v59 = v25;
  v60 = v26;
  v61 = v27;
  v62 = v28;
  v63 = 0;
  v29 = sub_100005360(&qword_100117B60);
  v30 = sub_10003D3C8(&qword_100117B68, &qword_100117B60, (void (*)(void))sub_100093D1C);
  View.accessibilityHidden(_:)(1, v29, v30);
  j__swift_release(v10);
  sub_100092590(v45 & 1, (uint64_t)&v49);
  v31 = v50;
  v45 = v49;
  v32 = v51;
  v33 = v52;
  v34 = v53;
  if (qword_100113E88 != -1)
    swift_once(&qword_100113E88, sub_1000898BC);
  v35 = qword_10011FE30;
  KeyPath = swift_getKeyPath(&unk_1000D2D58);
  v37 = v48;
  v38 = v47;
  sub_10000531C((uint64_t)v48, (uint64_t)v47, &qword_100117B58);
  v39 = v46;
  sub_10000531C((uint64_t)v38, v46, &qword_100117B58);
  v40 = v39 + *(int *)(sub_100005360(&qword_100117BB0) + 48);
  v41 = v45;
  *(_QWORD *)v40 = v45;
  *(_QWORD *)(v40 + 8) = v31;
  *(_QWORD *)(v40 + 16) = v32;
  *(_QWORD *)(v40 + 24) = v33;
  *(_BYTE *)(v40 + 32) = v34;
  *(_QWORD *)(v40 + 40) = KeyPath;
  *(_QWORD *)(v40 + 48) = v35;
  sub_10003AF68(v41, v31, v32, v33);
  swift_retain(KeyPath);
  swift_retain_n(v35, 2);
  sub_100004F48((uint64_t)v37, &qword_100117B58);
  sub_1000520FC(v41, v31, v32, v33);
  swift_release(v35);
  swift_release(KeyPath);
  return sub_100004F48((uint64_t)v38, &qword_100117B58);
}

double sub_1000923B8@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double result;
  __int16 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  __int128 v23;
  __int16 v24;
  char v25;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    if (qword_100113BC8 != -1)
      swift_once(&qword_100113BC8, sub_10002E050);
    v9 = qword_10011FA80;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
    v10 = Image.resizable(capInsets:resizingMode:)(v8, v9, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v19 = v10;
    v20 = 0;
    v21 = 1;
    v22 = 0;
  }
  else
  {
    if (qword_100113BC0 != -1)
      swift_once(&qword_100113BC0, sub_10002E024);
    v11 = qword_10011FA78;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
    v12 = Image.resizable(capInsets:resizingMode:)(v8, v11, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v19 = v12;
    v20 = 0;
    v21 = 1;
    v22 = 1;
  }
  v13 = sub_100005360(&qword_100117BA8);
  v14 = sub_100093E08();
  _ConditionalContent<>.init(storage:)(&v23, &v19, v13, v13, v14, v14);
  result = *(double *)&v23;
  v16 = v24;
  v17 = v25;
  *(_OWORD *)a2 = v23;
  *(_WORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 18) = v17;
  return result;
}

double sub_100092590@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  char v20;

  if ((a1 & 1) != 0)
  {
    v3 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000D74F0);
    v14 = Text.init(_:tableName:bundle:comment:)(v3);
    v15 = v4;
    v16 = v5 & 1;
    v17 = v6;
    v18 = 0;
  }
  else
  {
    v7 = LocalizedStringKey.init(stringLiteral:)(0x6F74736948206F4ELL, 0xEA00000000007972);
    v14 = Text.init(_:tableName:bundle:comment:)(v7);
    v15 = v9;
    v16 = v8 & 1;
    v17 = v10;
    v18 = 1;
  }
  _ConditionalContent<>.init(storage:)(v19, &v14, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  result = *(double *)v19;
  v12 = v19[1];
  v13 = v20;
  *(_OWORD *)a2 = v19[0];
  *(_OWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  return result;
}

void sub_1000926A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a1[2];
  v4 = sub_100005360(&qword_100117998);
  State.wrappedValue.getter(&v16, v4);
  v5 = v16;
  v6 = sub_100014F70();
  swift_release(v5);
  sub_100092848(a2);
  swift_release(v6);
  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  swift_retain(*a1);
  v10 = sub_1000438AC(v9, v8);
  swift_release(v7);
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v11 = qword_10011FF08;
  sub_1000BF854();
  KeyPath = swift_getKeyPath(&unk_1000D2BF8);
  v15 = v11;
  v13 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v13);
  swift_release(KeyPath);
  if (*(_BYTE *)(v11 + 64) == 1)
  {
    v14 = swift_allocObject(&unk_10010C5C8, 25, 7);
    *(_QWORD *)(v14 + 16) = v10;
    *(_BYTE *)(v14 + 24) = 1;
    swift_retain(v10);
    sub_1000C00F4((uint64_t)sub_100035210, v14);
    swift_release(v10);
    v10 = v14;
  }
  else
  {
    sub_100068F30(1);
  }
  swift_release(v10);
}

void sub_100092848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  void *object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BOOL4 v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  unsigned int v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v129 = *(_QWORD *)(v4 - 8);
  v130 = v4;
  __chkstk_darwin(v4, v5);
  v121 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v102 - v9;
  v11 = type metadata accessor for UUID(0);
  v119 = *(_QWORD *)(v11 - 8);
  v120 = v11;
  v13 = __chkstk_darwin(v11, v12);
  v131 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CalculateExpression.Base(0, v13);
  v125 = *(_QWORD *)(v15 - 8);
  v126 = v15;
  __chkstk_darwin(v15, v16);
  v124 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113E60 != -1)
    goto LABEL_52;
  while (1)
  {
    v18 = qword_10011FE08;
    KeyPath = swift_getKeyPath(&unk_1000D2C20);
    v134 = v18;
    v20 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v134, KeyPath, v20);
    v21 = objc_msgSend(*(id *)(v18 + 16), "categories", swift_release(KeyPath).n128_f64[0]);
    v22 = sub_10000A5A8(0, (unint64_t *)&qword_100117318, CalculateUnitCategory_ptr);
    v107 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    v136 = (unint64_t)_swiftEmptyArrayStorage;
    if (a1 < 0)
    {
      __break(1u);
      return;
    }
    if (!a1)
      break;
    v104 = v2;
    v2 = 0;
    v123 = enum case for CalculateExpression.Base.base10(_:);
    v118 = v107 & 0xFFFFFFFFFFFFFF8;
    if (v107 < 0)
      v23 = v107;
    else
      v23 = v107 & 0xFFFFFFFFFFFFFF8;
    v103 = v23;
    v106 = v107 & 0xC000000000000001;
    v24 = &unk_1001081C8;
    v25 = (char *)&unk_1001081D0;
    v105 = v107 + 32;
    v117 = a1;
    v122 = v10;
    while (1)
    {
      v26 = v2 / 5uLL;
      v133 = v2;
      v134 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v135 = v27;
      if (v2 % 5uLL >= 5)
        break;
      v28 = -80 * v26;
      v29 = v24[-10 * v26];
      v30 = *(void **)&v25[v28];
      swift_bridgeObjectRetain(v30);
      v31._countAndFlagsBits = v29;
      v31._object = v30;
      String.append(_:)(v31);
      swift_bridgeObjectRelease(v30);
      if (__OFSUB__(a1, v2))
        goto LABEL_46;
      v132 = v2 + 1;
      v133 = a1 - v2;
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v32._object;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(object);
      v34 = v134;
      v35 = v135;
      v36 = sub_100029214((uint64_t)_swiftEmptyArrayStorage);
      v37 = v124;
      v38 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v125 + 104))(v124, v123, v126);
      v39 = v131;
      UUID.init()(v38);
      v40 = type metadata accessor for CalculateExpression(0);
      swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
      v41 = CalculateExpression.init(_:options:base:id:)(v34, v35, v36, v37, v39);
      v42 = CalculateExpression.result.getter(v41);
      if (v42)
      {
        v43 = (void *)v42;
        v44 = Date.init(timeIntervalSinceNow:)((double)v2 * -86400.0);
        v127 = v43;
        v128 = v41;
        if ((v2 & 1) != 0)
        {
          v61 = CalculateExpression.assumeDegrees.getter(v44);
          v62 = v61;
          v116 = (id)CalculateExpression.expression.getter(v61);
          v64 = v63;
          v65 = objc_msgSend(v43, "formattedResult");
          v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
          v68 = v67;

          v69 = (uint64_t)v121;
          v70 = (*(uint64_t (**)(char *, char *, uint64_t))(v129 + 16))(v121, v10, v130);
          v71 = v131;
          v72 = UUID.init()(v70);
          v73 = UUID.uuidString.getter(v72);
          v75 = v74;
          (*(void (**)(char *, uint64_t))(v119 + 8))(v71, v120);
          v76 = type metadata accessor for SchemaV1.HistoryRecord(0);
          swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
          v77 = sub_10004BC0C(v73, v75, 0x6669746E65696373, 0xEA00000000006369, 0, v62 & 1, (uint64_t)v116, v64, v66, v68, v69);
        }
        else
        {
          if ((unint64_t)v107 >> 62)
          {
            v99 = v107;
            swift_bridgeObjectRetain(v107);
            v45 = _CocoaArrayWrapper.endIndex.getter(v103);
            swift_bridgeObjectRelease(v99);
            if (!v45)
              goto LABEL_50;
          }
          else
          {
            v45 = *(_QWORD *)(v118 + 16);
            if (!v45)
              goto LABEL_50;
          }
          v46 = v2 % v45;
          if (v106)
          {
            v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v107);
          }
          else
          {
            if (v46 >= *(_QWORD *)(v118 + 16))
              goto LABEL_47;
            v47 = *(id *)(v105 + 8 * v46);
          }
          v48 = v47;
          v49 = objc_msgSend(v47, "units");
          v50 = sub_10000A5A8(0, (unint64_t *)&qword_1001145E0, CalculateUnit_ptr);
          v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

          if ((unint64_t)v51 >> 62)
          {
            if (v51 < 0)
              v100 = v51;
            else
              v100 = v51 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v51);
            v52 = _CocoaArrayWrapper.endIndex.getter(v100);
            swift_bridgeObjectRelease(v51);
            if (!v52)
              goto LABEL_51;
          }
          else
          {
            v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v52)
              goto LABEL_51;
          }
          v53 = v2 % v52;
          if ((v51 & 0xC000000000000001) != 0)
          {
            v56 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v53, v51);
            v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v132 % v52, v51);
            swift_bridgeObjectRelease(v51);
          }
          else
          {
            v10 = *(char **)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v53 >= (unint64_t)v10)
              goto LABEL_48;
            a1 = v51 + 32;
            v54 = v132 % v52;
            v55 = *(id *)(v51 + 32 + 8 * v53);
            if (v54 >= (unint64_t)v10)
              goto LABEL_49;
            v56 = v55;
            v57 = *(id *)(a1 + 8 * v54);
            swift_bridgeObjectRelease(v51);
            v10 = v122;
          }
          v58 = objc_msgSend(v56, "category");
          v116 = v48;
          if (v58)
          {
            v59 = v58;
            v60 = objc_msgSend(v58, "unitType");

            v108 = v60 == (id)16;
          }
          else
          {
            v108 = 0;
          }
          v78 = CalculateExpression.assumeDegrees.getter(v58);
          v114 = v78;
          v115 = CalculateExpression.expression.getter(v78);
          v113 = v79;
          v80 = objc_msgSend(v43, "formattedResult");
          v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
          v111 = v81;

          v82 = (uint64_t)v121;
          v83 = (*(uint64_t (**)(char *, char *, uint64_t))(v129 + 16))(v121, v10, v130);
          v109 = CalculateUnit.id.getter(v83);
          v85 = v84;
          v86 = CalculateUnit.id.getter(v109);
          v88 = v87;
          v89 = v131;
          v90 = UUID.init()(v86);
          v91 = UUID.uuidString.getter(v90);
          v110 = v57;
          v93 = v92;
          (*(void (**)(char *, uint64_t))(v119 + 8))(v89, v120);
          v94 = type metadata accessor for SchemaV1.HistoryRecord(0);
          swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
          v77 = sub_10004B3BC(v91, v93, 0x6669746E65696373, 0xEA00000000006369, 0, v108, v114 & 1, v115, v113, v112, v111, v82, v109, v85, v86, v88);

        }
        swift_retain(v77);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v95);
        v97 = *(_QWORD *)((v136 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v96 = *(_QWORD *)((v136 & 0xFFFFFFFFFFFFFF8) + 0x18);
        a1 = v117;
        if (v97 >= v96 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1);
        v98 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v97, v77);
        specialized Array._endMutation()(v98);
        swift_release(v77);
        swift_release(v128);

        v10 = v122;
        (*(void (**)(char *, uint64_t))(v129 + 8))(v122, v130);
      }
      else
      {
        swift_release(v41);
      }
      v24 += 2;
      v25 += 16;
      v2 = v132;
      if (a1 == v132)
      {
        swift_bridgeObjectRelease(v107);
        v101 = (_QWORD *)v136;
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    swift_once(&qword_100113E60, sub_10007DD3C);
  }
  swift_bridgeObjectRelease(v107);
  v101 = _swiftEmptyArrayStorage;
LABEL_44:
  sub_1000124E8((uint64_t)v101);
  swift_bridgeObjectRelease(v101);
}

_QWORD *sub_10009318C()
{
  uint64_t v0;
  _QWORD *result;
  uint64_t v2;

  v0 = sub_100005360(&qword_100115300);
  result = Binding.wrappedValue.getter(&v2, v0);
  if (v2 == 1)
  {
    LOBYTE(v2) = 0;
    return (_QWORD *)Binding.wrappedValue.setter(&v2, v0);
  }
  return result;
}

double sub_100093218@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  double result;

  v5 = *v2;
  v6 = v2[1];
  v7 = *((_BYTE *)v2 + 16);
  v8 = swift_allocObject(&unk_10010C760, 33, 7);
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  *(_BYTE *)(v8 + 32) = v7;
  v9 = sub_100005360(&qword_100117C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, a1, v9);
  v10 = (_QWORD *)(a2 + *(int *)(sub_100005360(&qword_100117C58) + 36));
  *v10 = sub_1000942F0;
  v10[1] = v8;
  v10[2] = 0;
  v10[3] = 0;
  swift_retain(v5);
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

uint64_t sub_1000932C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000932EC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100093314@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10009333C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_100093368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117970;
  if (!qword_100117970)
  {
    v1 = sub_100005608(&qword_100117940);
    sub_100008078(&qword_100117978, &qword_100117938, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100008078((unint64_t *)&qword_100117980, &qword_100117988, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117970);
  }
  return result;
}

unint64_t sub_10009340C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100117990;
  if (!qword_100117990)
  {
    v1 = sub_100005608(&qword_100117950);
    v2[0] = sub_100005608(&qword_100117940);
    v2[1] = sub_100093368();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117990);
  }
  return result;
}

uint64_t sub_1000934BC(uint64_t a1)
{
  type metadata accessor for CalculatorHistoryView(0);
  return sub_100090750(a1);
}

uint64_t sub_100093504@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10009352C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

void sub_100093554()
{
  uint64_t v0;

  sub_1000926A4(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10009356C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000935CC()
{
  type metadata accessor for PPTTestCase(0);
  PPTTestCase.startTest()();
}

uint64_t sub_10009360C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100093630()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t sub_100093650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ControlSize(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  return EnvironmentValues.controlSize.setter(v5);
}

uint64_t sub_1000936DC()
{
  return EnvironmentValues.controlSize.getter();
}

unint64_t sub_100093700()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100117A60;
  if (!qword_100117A60)
  {
    v1 = sub_100005608(&qword_100117A58);
    v2[0] = sub_100005608(&qword_100117A68);
    v2[1] = sub_10003D3C8(&qword_100117A70, &qword_100117A68, (void (*)(void))sub_1000937BC);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100093900();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117A60);
  }
  return result;
}

uint64_t sub_1000937BC()
{
  return sub_10003D3C8(&qword_100117A78, &qword_100115220, (void (*)(void))sub_1000937E0);
}

unint64_t sub_1000937E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117A80;
  if (!qword_100117A80)
  {
    v1 = sub_100005608(&qword_100115218);
    sub_100093864();
    sub_100008078(&qword_100117AA8, &qword_100117AB0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117A80);
  }
  return result;
}

unint64_t sub_100093864()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117A88;
  if (!qword_100117A88)
  {
    v1 = sub_100005608(&qword_100117A90);
    sub_100008078(&qword_100117A98, &qword_100117AA0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117A88);
  }
  return result;
}

unint64_t sub_100093900()
{
  unint64_t result;

  result = qword_100117AB8;
  if (!qword_100117AB8)
  {
    result = swift_getWitnessTable(&unk_1000D2DF8, &type metadata for HistoryViewFirstLaunch);
    atomic_store(result, (unint64_t *)&qword_100117AB8);
  }
  return result;
}

uint64_t sub_100093944()
{
  return sub_10003D3C8(&qword_100117AC8, &qword_100115230, (void (*)(void))sub_100093968);
}

unint64_t sub_100093968()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117AD0;
  if (!qword_100117AD0)
  {
    v1 = sub_100005608(&qword_100115228);
    sub_100008078(&qword_100117AD8, &qword_100117A28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    sub_100008078(&qword_1001175D0, &qword_100117598, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117AD0);
  }
  return result;
}

unint64_t sub_100093A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117AE0;
  if (!qword_100117AE0)
  {
    v1 = sub_100005608(&qword_100117A48);
    sub_100093700();
    sub_10003D3C8(&qword_100117AC0, &qword_100117A30, (void (*)(void))sub_100093944);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117AE0);
  }
  return result;
}

uint64_t sub_100093A98()
{
  return EnvironmentValues.editMode.getter();
}

unint64_t sub_100093ABC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117B00;
  if (!qword_100117B00)
  {
    v1 = sub_100005608(&qword_1001179D0);
    sub_100005178(&qword_100117B08, type metadata accessor for CalculatorHistoryListView, (uint64_t)&unk_1000D0998);
    sub_100093900();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117B00);
  }
  return result;
}

uint64_t sub_100093B44@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CalculatorHistoryView(0);
  return sub_1000900C8(a1);
}

unint64_t sub_100093B80()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100117B18;
  if (!qword_100117B18)
  {
    v1 = sub_100005608(&qword_1001179E0);
    v2[0] = sub_100005608(&qword_1001179D0);
    v2[1] = type metadata accessor for CalculatorHistoryViewModel(255);
    v2[2] = sub_100093ABC();
    v2[3] = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    sub_100008078(&qword_100117B20, &qword_100117B10, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117B18);
  }
  return result;
}

uint64_t sub_100093C74()
{
  return sub_100094078(sub_10009027C);
}

uint64_t sub_100093C80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100093CA8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100093CD0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100093CF8(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100093D1C()
{
  return sub_10003D3C8(&qword_100117B70, &qword_100117B78, (void (*)(void))sub_100093D40);
}

unint64_t sub_100093D40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117B80;
  if (!qword_100117B80)
  {
    v1 = sub_100005608(&qword_100117B88);
    sub_100093DA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100117B80);
  }
  return result;
}

unint64_t sub_100093DA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117B90;
  if (!qword_100117B90)
  {
    v1 = sub_100005608(&qword_100117B98);
    sub_100093E08();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117B90);
  }
  return result;
}

unint64_t sub_100093E08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117BA0;
  if (!qword_100117BA0)
  {
    v1 = sub_100005608(&qword_100117BA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117BA0);
  }
  return result;
}

uint64_t sub_100093E70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100093E98(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100093ECC()
{
  return sub_100094078(sub_100091B78);
}

uint64_t sub_100093ED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100091BE0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100093EE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117C00;
  if (!qword_100117C00)
  {
    v1 = sub_100005608(&qword_100117BE0);
    sub_100008078(&qword_100115CD8, &qword_100115CC8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100035110();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117C00);
  }
  return result;
}

uint64_t sub_100093F68()
{
  return sub_100094078((uint64_t (*)(uint64_t))sub_100091DB8);
}

uint64_t sub_100093F78()
{
  return sub_100094078(sub_100091E1C);
}

uint64_t sub_100093F88()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for CalculatorHistoryView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 16));
  swift_release(*(_QWORD *)(v7 + 24));
  v8 = v7 + v1[6];
  v9 = type metadata accessor for EditMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = sub_100005360(&qword_100117888);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)));
  swift_release(*(_QWORD *)(v7 + v1[7] + 8));
  swift_release(*(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v7 + v1[9] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009406C()
{
  return sub_100094078((uint64_t (*)(uint64_t))sub_100091F00);
}

uint64_t sub_100094078(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorHistoryView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

unint64_t sub_1000940BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117C30;
  if (!qword_100117C30)
  {
    v1 = sub_100005608(&qword_100117C18);
    sub_100094128();
    sub_100035110();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117C30);
  }
  return result;
}

unint64_t sub_100094128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117C38;
  if (!qword_100117C38)
  {
    v1 = sub_100005608(&qword_100117C10);
    sub_100005178(&qword_100117C40, (uint64_t (*)(uint64_t))&type metadata accessor for EditButton, (uint64_t)&protocol conformance descriptor for EditButton);
    sub_100008078(&qword_100117B20, &qword_100117B10, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117C38);
  }
  return result;
}

uint64_t sub_1000941C4(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;

  if (a2 != -1)
  {
    v3 = result;
    swift_retain(a3);
    return swift_retain(v3);
  }
  return result;
}

uint64_t sub_1000941FC(uint64_t result, char a2, uint64_t a3)
{
  if (a2 != -1)
  {
    swift_release(result);
    return swift_release(a3);
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryViewFirstLaunch()
{
  return &type metadata for HistoryViewFirstLaunch;
}

uint64_t sub_100094240()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  unint64_t v4;

  v0 = sub_100005608(&qword_100117958);
  v3 = sub_100005608(&qword_100117950);
  v4 = sub_10009340C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
}

uint64_t sub_1000942B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6CE4, 1);
}

uint64_t sub_1000942C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

_QWORD *sub_1000942F0()
{
  return sub_10009318C();
}

unint64_t sub_100094300()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117C60;
  if (!qword_100117C60)
  {
    v1 = sub_100005608(&qword_100117C58);
    sub_100008078(&qword_100117C68, &qword_100117C50, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117C60);
  }
  return result;
}

double destroy for CalculatorButtonStyle(uint64_t a1)
{
  double result;

  sub_100007720(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 48)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for CalculatorButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  sub_1000076D0(v4, v5);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for CalculatorButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  sub_1000076D0(v4, v5);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  sub_100007720(v6, v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

__n128 initializeWithTake for CalculatorButtonStyle(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CalculatorButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  sub_100007720(v6, v7);
  v8 = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v8;
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorButtonStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorButtonStyle()
{
  return &type metadata for CalculatorButtonStyle;
}

uint64_t sub_100094664(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6D28, 1);
}

BOOL sub_100094674(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

double sub_1000946D4@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D30B0);
  v8[0] = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 80, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 80);
  *a2 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

uint64_t sub_100094778(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D30B0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000963C0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100094830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  const mach_header_64 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t KeyPath;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t);
  uint64_t v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  char v210[8];
  uint64_t v211;
  uint64_t v212;

  v3 = v2;
  v207 = a2;
  v5 = type metadata accessor for AutomaticHoverEffect(0);
  v203 = *(_QWORD *)(v5 - 8);
  v204 = v5;
  v7 = __chkstk_darwin(v5, v6);
  v202 = (char *)&v174 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for ContentShapeKinds(0, v7);
  v201 = *(_QWORD *)(v206 - 8);
  v10 = __chkstk_darwin(v206, v9);
  v205 = (char *)&v174 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Capsule(0, v10);
  v14 = __chkstk_darwin(v12, v13);
  v200 = (char *)&v174 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _BlendModeEffect(0, v14);
  v18 = __chkstk_darwin(v16, v17);
  v187 = (char *)&v174 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for BlendMode(0, v18);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186, v20);
  v184 = (char *)&v174 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100005360(&qword_100117C70);
  __chkstk_darwin(v183, v22);
  v188 = (char *)&v174 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100005360(&qword_1001162B8);
  v26 = __chkstk_darwin(v24, v25);
  v28 = (char *)&v174 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for ButtonStyleConfiguration.Label(0, v26);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  v33 = (char *)&v174 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100005360(&qword_100117C78);
  __chkstk_darwin(v34, v35);
  v37 = (char *)&v174 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100005360(&qword_100117C80);
  __chkstk_darwin(v175, v38);
  v40 = (char *)&v174 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100005360(&qword_100117C88);
  __chkstk_darwin(v176, v41);
  v43 = (char *)&v174 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100005360(&qword_100117C90);
  __chkstk_darwin(v178, v44);
  v208 = (char *)&v174 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100005360(&qword_100117C98);
  __chkstk_darwin(v180, v46);
  v182 = (char *)&v174 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100005360(&qword_100117CA0);
  __chkstk_darwin(v181, v48);
  v189 = (char *)&v174 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100005360(&qword_100117CA8);
  __chkstk_darwin(v190, v50);
  v191 = (char *)&v174 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100005360(&qword_100117CB0);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194, v52);
  v192 = (char *)&v174 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100005360(&qword_100117CB8);
  __chkstk_darwin(v196, v54);
  v199 = (char *)&v174 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100005360(&qword_100117CC0);
  v197 = *(_QWORD *)(v198 - 8);
  v57 = __chkstk_darwin(v198, v56);
  v195 = (char *)&v174 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = a1;
  ButtonStyleConfiguration.label.getter(v57);
  v59 = *v3;
  v60 = v3[1];
  v61 = v3[2];
  v62 = v3[3];
  v63 = v3[4];
  v64 = v3[5];
  v65 = 0x1000000000000;
  if (!v3[6])
    v65 = 0;
  v177 = v3[5];
  v66 = v64 == 0;
  v67 = 0x10000000000;
  if (v66)
    v67 = 0;
  v66 = v63 == 0;
  v68 = &_mh_execute_header;
  if (v66)
    v68 = 0;
  v66 = v62 == 0;
  v69 = 0x1000000;
  if (v66)
    v69 = 0;
  v66 = v61 == 0;
  v70 = 0x10000;
  if (v66)
    v70 = 0;
  v66 = v60 == 0;
  v71 = 256;
  if (v66)
    v71 = 0;
  v209 = v71 | v59 | v70 | v69 | (unint64_t)v68 | v67 | v65;
  v72 = sub_10003C884(v209);
  v73 = sub_1000A6974(v72, *((double *)v3 + 1), *((double *)v3 + 2));
  v74 = static Font.Weight.regular.getter();
  v75 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v28, 1, 1, v75);
  v76 = static Font.system(size:weight:design:)(*(_QWORD *)&v74, 0, v28, v73);
  sub_100004F48((uint64_t)v28, &qword_1001162B8);
  KeyPath = swift_getKeyPath(&unk_1000D3020);
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v37, v33, v29);
  v78 = (uint64_t *)&v37[*(int *)(v34 + 36)];
  *v78 = KeyPath;
  v78[1] = v76;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
  v79 = swift_getKeyPath(&unk_1000D3050);
  sub_10000531C((uint64_t)v37, (uint64_t)v40, &qword_100117C78);
  v80 = (uint64_t *)&v40[*(int *)(v175 + 36)];
  *v80 = v79;
  v80[1] = 0x3FE6666666666666;
  sub_100004F48((uint64_t)v37, &qword_100117C78);
  v81 = swift_getKeyPath(&unk_1000D3080);
  sub_10000531C((uint64_t)v40, (uint64_t)v43, &qword_100117C80);
  v82 = &v43[*(int *)(v176 + 36)];
  *(_QWORD *)v82 = v81;
  *((_QWORD *)v82 + 1) = 1;
  v82[16] = 0;
  sub_100004F48((uint64_t)v40, &qword_100117C80);
  v83 = *((_QWORD *)v3 + 4);
  LOBYTE(v76) = v3[40];
  sub_1000076D0(v83, v76);
  v84 = sub_1000436D8(v83, v76);
  v85 = sub_100007720(v83, v76);
  if ((v84 & 1) != 0)
  {
    v86 = ButtonStyleConfiguration.isPressed.getter(v85);
    v87 = 0.75;
    v88 = v209;
    if ((v86 & 1) == 0)
    {
      v89 = *((_QWORD *)v3 + 6);
      v90 = v3[56];
      swift_retain(v89);
      v92 = sub_100043890(v91, v90);
      swift_release(v89);
      v93 = swift_getKeyPath(&unk_1000D30B0);
      v212 = v92;
      v94 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v212, v93, v94);
      swift_release(v93);
      swift_beginAccess(v92 + 80, v210, 0, 0);
      v95 = *(_QWORD *)(v92 + 80);
      swift_bridgeObjectRetain(v95);
      swift_release(v92);
      v96 = sub_10003C884(v88);
      v97 = sub_100094674(v96, v95);
      swift_bridgeObjectRelease(v95);
      if (v97)
        v87 = 0.75;
      else
        v87 = 1.0;
    }
  }
  else
  {
    v87 = 0.4;
    v88 = v209;
  }
  v98 = v208;
  sub_10000531C((uint64_t)v43, (uint64_t)v208, &qword_100117C88);
  *(double *)&v98[*(int *)(v178 + 36)] = v87;
  v99 = sub_100004F48((uint64_t)v43, &qword_100117C88);
  if ((ButtonStyleConfiguration.isPressed.getter(v99) & 1) != 0)
  {
    if ((v177 & 1) == 0)
      goto LABEL_32;
  }
  else
  {
    v100 = *((_QWORD *)v3 + 6);
    v101 = v3[56];
    swift_retain(v100);
    v103 = sub_100043890(v102, v101);
    swift_release(v100);
    v104 = swift_getKeyPath(&unk_1000D30B0);
    v212 = v103;
    v105 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v212, v104, v105);
    swift_release(v104);
    swift_beginAccess(v103 + 80, &v212, 0, 0);
    v106 = *(_QWORD *)(v103 + 80);
    swift_bridgeObjectRetain(v106);
    swift_release(v103);
    v107 = sub_10003C884(v88);
    v108 = sub_100094674(v107, v106);
    swift_bridgeObjectRelease(v106);
    if (!v177)
    {
      if (!v108)
      {
        v110 = sub_100095BB0(v88);
        goto LABEL_34;
      }
LABEL_32:
      v110 = sub_100095830(v88);
LABEL_34:
      v109 = v110;
      goto LABEL_35;
    }
  }
  if (qword_100113DD0 != -1)
    swift_once(&qword_100113DD0, sub_100053414);
  v109 = qword_10011FD78;
LABEL_35:
  swift_retain(v109);
  v112 = static Color.black.getter(v111);
  v113 = static Edge.Set.all.getter(v112);
  sub_10003C884(v88);
  v114 = v185;
  v115 = v184;
  v116 = v186;
  (*(void (**)(char *, _QWORD, uint64_t))(v185 + 104))(v184, enum case for BlendMode.normal(_:), v186);
  v117 = (uint64_t)v187;
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v187, v115, v116);
  v118 = (uint64_t)v188;
  sub_100014084(v117, (uint64_t)&v188[*(int *)(v183 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v118 = v109;
  *(_QWORD *)(v118 + 8) = v112;
  *(_BYTE *)(v118 + 16) = v113;
  swift_retain(v109);
  swift_retain(v112);
  sub_100014150(v117, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v116);
  swift_release(v112);
  swift_release(v109);
  v120 = static Alignment.center.getter(v119);
  v122 = v121;
  v123 = (uint64_t)v182;
  v124 = (uint64_t)&v182[*(int *)(v180 + 36)];
  sub_10000531C(v118, v124, &qword_100117C70);
  v125 = (uint64_t *)(v124 + *(int *)(sub_100005360(&qword_100117CC8) + 36));
  *v125 = v120;
  v125[1] = v122;
  v126 = v208;
  sub_10000531C((uint64_t)v208, v123, &qword_100117C90);
  sub_100004F48(v118, &qword_100117C70);
  sub_100004F48((uint64_t)v126, &qword_100117C90);
  v127 = enum case for RoundedCornerStyle.continuous(_:);
  v128 = type metadata accessor for RoundedCornerStyle(0);
  v129 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 104);
  v130 = (uint64_t)v200;
  v129(v200, v127, v128);
  v131 = (uint64_t)v189;
  v132 = (uint64_t)&v189[*(int *)(v181 + 36)];
  sub_100014084(v130, v132, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  *(_WORD *)(v132 + *(int *)(sub_100005360(&qword_100117CD0) + 36)) = 256;
  sub_10000531C(v123, v131, &qword_100117C98);
  sub_100014150(v130, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  sub_100004F48(v123, &qword_100117C98);
  v133 = sub_100005360(&qword_100117CD8);
  v134 = v201;
  v135 = swift_allocObject(v133, ((*(unsigned __int8 *)(v201 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80))+ 2 * *(_QWORD *)(v201 + 72), *(unsigned __int8 *)(v201 + 80) | 7);
  *(_OWORD *)(v135 + 16) = xmmword_1000D0760;
  v136 = static ContentShapeKinds.hoverEffect.getter();
  static ContentShapeKinds.accessibility.getter(v136);
  v211 = v135;
  v137 = sub_100005178(&qword_100117CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentShapeKinds, (uint64_t)&protocol conformance descriptor for ContentShapeKinds);
  v138 = sub_100005360(&qword_100117CE8);
  v139 = sub_100008078(&qword_100117CF0, &qword_100117CE8, (uint64_t)&protocol conformance descriptor for [A]);
  v140 = v205;
  v141 = v138;
  v142 = v206;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v211, v141, v139, v206, v137);
  v129((char *)v130, v127, v128);
  v143 = v190;
  v144 = (uint64_t)v191;
  v145 = (uint64_t)&v191[*(int *)(v190 + 36)];
  sub_100014084(v130, v145, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v146 = sub_100005360(&qword_100117CF8);
  v147 = v145 + *(int *)(v146 + 40);
  v208 = *(char **)(v134 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v208)(v147, v140, v142);
  *(_BYTE *)(v145 + *(int *)(v146 + 36)) = 0;
  sub_10000531C(v131, v144, &qword_100117CA0);
  sub_100014150(v130, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v148 = *(void (**)(char *, uint64_t))(v134 + 8);
  v148(v140, v142);
  v149 = sub_100004F48(v131, &qword_100117CA0);
  v150 = v202;
  static CustomHoverEffect<>.automatic.getter(v149);
  v151 = sub_100095F34();
  v152 = sub_100005178(&qword_100117D58, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v153 = v192;
  v154 = v143;
  v155 = v204;
  View.hoverEffect<A>(_:isEnabled:)(v150, 1, v154, v204, v151, v152);
  (*(void (**)(char *, uint64_t))(v203 + 8))(v150, v155);
  v156 = sub_100004F48(v144, &qword_100117CA8);
  static ContentShapeKinds.interaction.getter(v156);
  v157 = v196;
  v158 = (uint64_t)v199;
  v159 = &v199[*(int *)(v196 + 36)];
  v160 = sub_100005360(&qword_100117D60);
  ((void (*)(char *, char *, uint64_t))v208)(&v159[*(int *)(v160 + 40)], v140, v142);
  *v159 = 0;
  v161 = v193;
  v162 = v194;
  (*(void (**)(uint64_t, char *, uint64_t))(v193 + 16))(v158, v153, v194);
  v148(v140, v142);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v153, v162);
  v163 = sub_10003C884(v209);
  sub_10009884C(v163);
  v165 = v164;
  v167 = v166;
  LOBYTE(v161) = v168;
  v170 = v169;
  v171 = sub_1000962D0();
  v172 = v195;
  View.help(_:)(v165, v167, v161 & 1, v170, v157, v171);
  swift_bridgeObjectRelease(v170);
  swift_bridgeObjectRelease(v167);
  sub_100004F48(v158, &qword_100117CB8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v197 + 32))(v207, v172, v198);
}

void sub_1000956D8(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

void sub_100095700(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_100095728(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10009574C(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_100095770@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000957A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000957D0(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000957FC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100095830(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = a1;
  v2 = a1 & 0x1000000FFLL;
  if ((a1 & 0x1000000000000) != 0 || v2 == 0x100000002)
  {
    if (qword_100113CD0 != -1)
      swift_once(&qword_100113CD0, sub_100050770);
    if (sub_10003B98C(v1, static CalculatorButtonRepresentable.swappableButtons))
    {
      if ((v1 & 0x10000) != 0)
      {
        if (qword_100113CC8 != -1)
          swift_once(&qword_100113CC8, sub_1000506F0);
        if (sub_10003B98C(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
        {
          if (v1 <= 0x23u)
          {
            if (v1 != 8)
            {
              if (v1 != 30)
                goto LABEL_37;
              goto LABEL_52;
            }
LABEL_44:
            if (qword_100113DA8 != -1)
              swift_once(&qword_100113DA8, sub_1000532A0);
            v3 = &qword_10011FD50;
            return *v3;
          }
          if (v1 != 36 && v1 != 55)
            goto LABEL_37;
LABEL_52:
          if (qword_100113DC8 != -1)
            swift_once(&qword_100113DC8, sub_1000533FC);
          v3 = &qword_10011FD70;
          return *v3;
        }
      }
      if ((v1 & 0x100) != 0)
      {
        if (qword_100113CC0 != -1)
          swift_once(&qword_100113CC0, sub_100050670);
        if (sub_10003B98C(v1, static CalculatorButtonRepresentable.shiftableButtons))
        {
          LOBYTE(v1) = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
LABEL_37:
          switch((char)v1)
          {
            case 1:
            case 2:
            case 3:
            case 34:
            case 52:
              goto LABEL_41;
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 92:
              goto LABEL_44;
            case 9:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 51:
            case 53:
              goto LABEL_38;
            default:
              goto LABEL_52;
          }
        }
      }
      if ((v1 & 0x10000FF) != 0x1000001 && v2 != 0x100000002)
        goto LABEL_37;
LABEL_41:
      if (qword_100113D98 != -1)
        swift_once(&qword_100113D98, sub_100053268);
      v3 = &qword_10011FD40;
      return *v3;
    }
  }
  if ((v1 & 0x10000) == 0)
    goto LABEL_25;
  if (qword_100113CC8 != -1)
    swift_once(&qword_100113CC8, sub_1000506F0);
  if (sub_10003B98C(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
  {
    if (v1 > 0x23u)
    {
      if (v1 == 36 || v1 == 55)
        goto LABEL_52;
    }
    else
    {
      if (v1 == 8)
        goto LABEL_44;
      if (v1 == 30)
        goto LABEL_52;
    }
  }
  else
  {
    if ((v1 & 0x100) == 0)
      goto LABEL_27;
LABEL_25:
    if (qword_100113CC0 != -1)
      swift_once(&qword_100113CC0, sub_100050670);
    if (sub_10003B98C(v1, static CalculatorButtonRepresentable.shiftableButtons))
    {
      LOBYTE(v1) = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
    }
    else
    {
LABEL_27:
      if ((v1 & 0x10000FF) == 0x1000001)
        goto LABEL_41;
      if (v2 == 0x100000002)
        goto LABEL_52;
    }
  }
  switch((char)v1)
  {
    case 1:
    case 2:
    case 3:
    case 52:
      goto LABEL_41;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 92:
      goto LABEL_44;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 53:
LABEL_38:
      if (qword_100113DB8 != -1)
        swift_once(&qword_100113DB8, sub_100053384);
      v3 = &qword_10011FD60;
      break;
    default:
      goto LABEL_52;
  }
  return *v3;
}

uint64_t sub_100095BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = a1;
  if ((a1 & 0x1000000000000) == 0)
    goto LABEL_5;
  if (qword_100113CD0 != -1)
    swift_once(&qword_100113CD0, sub_100050770);
  if (!sub_10003B98C(v1, static CalculatorButtonRepresentable.swappableButtons))
  {
LABEL_5:
    if ((v1 & 0x1000000FFLL) != 0x100000002)
    {
      if ((v1 & 0x10000) != 0)
      {
        if (qword_100113CC8 != -1)
          swift_once(&qword_100113CC8, sub_1000506F0);
        if (sub_10003B98C(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
        {
          if (v1 <= 0x23u)
          {
            if (v1 != 8)
            {
              if (v1 != 30)
                goto LABEL_34;
              goto LABEL_52;
            }
LABEL_44:
            if (qword_100113DA0 != -1)
              swift_once(&qword_100113DA0, sub_10005327C);
            v2 = &qword_10011FD48;
            return *v2;
          }
          if (v1 != 36 && v1 != 55)
            goto LABEL_34;
LABEL_52:
          if (qword_100113DC0 != -1)
            swift_once(&qword_100113DC0, sub_100053398);
          v2 = &qword_10011FD68;
          return *v2;
        }
      }
      if ((v1 & 0x100) != 0)
      {
        if (qword_100113CC0 != -1)
          swift_once(&qword_100113CC0, sub_100050670);
        if (sub_10003B98C(v1, static CalculatorButtonRepresentable.shiftableButtons))
        {
          LOBYTE(v1) = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
          goto LABEL_34;
        }
      }
      if ((v1 & 0x10000FF) != 0x1000001)
      {
        if ((v1 & 0x1000000FFLL) == 0x100000002)
          goto LABEL_52;
LABEL_34:
        switch((char)v1)
        {
          case 1:
          case 2:
          case 3:
          case 52:
            break;
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 92:
            goto LABEL_44;
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 53:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
            goto LABEL_38;
          default:
            goto LABEL_52;
        }
      }
LABEL_41:
      if (qword_100113D90 != -1)
        swift_once(&qword_100113D90, sub_100053254);
      v2 = &qword_10011FD38;
      return *v2;
    }
  }
  if ((v1 & 0x10000) == 0)
    goto LABEL_30;
  if (qword_100113CC8 != -1)
    swift_once(&qword_100113CC8, sub_1000506F0);
  if (sub_10003B98C(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
  {
    if (v1 > 0x23u)
    {
      if (v1 == 36 || v1 == 55)
        goto LABEL_52;
    }
    else
    {
      if (v1 == 8)
        goto LABEL_44;
      if (v1 == 30)
        goto LABEL_52;
    }
  }
  else
  {
    if ((v1 & 0x100) == 0)
      goto LABEL_36;
LABEL_30:
    if (qword_100113CC0 != -1)
      swift_once(&qword_100113CC0, sub_100050670);
    if (sub_10003B98C(v1, static CalculatorButtonRepresentable.shiftableButtons))
    {
      LOBYTE(v1) = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
    }
    else
    {
LABEL_36:
      if ((v1 & 0x10000FF) == 0x1000001 || (v1 & 0x1000000FFLL) == 0x100000002)
        goto LABEL_41;
    }
  }
  switch((char)v1)
  {
    case 1:
    case 2:
    case 3:
    case 34:
    case 52:
      goto LABEL_41;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 92:
      goto LABEL_44;
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 51:
    case 53:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
LABEL_38:
      if (qword_100113DB0 != -1)
        swift_once(&qword_100113DB0, sub_10005336C);
      v2 = &qword_10011FD58;
      break;
    default:
      goto LABEL_52;
  }
  return *v2;
}

unint64_t sub_100095F34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117D00;
  if (!qword_100117D00)
  {
    v1 = sub_100005608(&qword_100117CA8);
    sub_100095FB8();
    sub_100008078(&qword_100117D50, &qword_100117CF8, (uint64_t)&protocol conformance descriptor for _ContentShapeKindModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117D00);
  }
  return result;
}

unint64_t sub_100095FB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117D08;
  if (!qword_100117D08)
  {
    v1 = sub_100005608(&qword_100117CA0);
    sub_10009603C();
    sub_100008078(&qword_100117D48, &qword_100117CD0, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117D08);
  }
  return result;
}

unint64_t sub_10009603C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117D10;
  if (!qword_100117D10)
  {
    v1 = sub_100005608(&qword_100117C98);
    sub_1000960C0();
    sub_100008078(&qword_100117D40, &qword_100117CC8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117D10);
  }
  return result;
}

unint64_t sub_1000960C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117D18;
  if (!qword_100117D18)
  {
    v1 = sub_100005608(&qword_100117C90);
    sub_10009612C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117D18);
  }
  return result;
}

unint64_t sub_10009612C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117D20;
  if (!qword_100117D20)
  {
    v1 = sub_100005608(&qword_100117C88);
    sub_1000961B0();
    sub_100008078(&qword_100116320, &qword_100116328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117D20);
  }
  return result;
}

unint64_t sub_1000961B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117D28;
  if (!qword_100117D28)
  {
    v1 = sub_100005608(&qword_100117C80);
    sub_100096234();
    sub_100008078(&qword_100114E98, &qword_100114EA0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117D28);
  }
  return result;
}

unint64_t sub_100096234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117D30;
  if (!qword_100117D30)
  {
    v1 = sub_100005608(&qword_100117C78);
    sub_100005178(&qword_100117D38, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_100008078((unint64_t *)&qword_100114F20, &qword_100114F28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117D30);
  }
  return result;
}

unint64_t sub_1000962D0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100117D68;
  if (!qword_100117D68)
  {
    v1 = sub_100005608(&qword_100117CB8);
    v2[0] = sub_100005608(&qword_100117CA8);
    v2[1] = type metadata accessor for AutomaticHoverEffect(255);
    v2[2] = sub_100095F34();
    v2[3] = sub_100005178(&qword_100117D58, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    sub_100008078(&qword_100117D70, &qword_100117D60, (uint64_t)&protocol conformance descriptor for _ContentShapeKindModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117D68);
  }
  return result;
}

uint64_t sub_1000963C0()
{
  uint64_t v0;

  return sub_10002584C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000963D8()
{
  _QWORD v1[2];

  v1[0] = sub_100005608(&qword_100117CB8);
  v1[1] = sub_1000962D0();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.help(_:)>>, 1);
}

uint64_t sub_100096424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100013F4C(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10010C920, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100114328, v16);
}

void sub_100096568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for CalculatorNetworkManager(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 0;
  v2 = type metadata accessor for NWPathMonitor(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = NWPathMonitor.init()();
  *(_QWORD *)(v1 + 24) = v3;
  ObservationRegistrar.init()(v3);
  sub_100096BCC();
  qword_10011FE70 = v1;
}

uint64_t sub_1000965DC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D3188);
  v4 = v0;
  v2 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_100096660(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3188);
  v6 = v3;
  v5 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
}

double sub_1000966EC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3188);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000695B4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_100096794()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D30E0);
  v4 = v0;
  v2 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

double sub_10009681C@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D30E0);
  v8 = v3;
  v5 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_1000968AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D30E0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000977C4, v7, (char *)&type metadata for () + 8, v5);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t CalculatorNetworkManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000D30E0);
  v3 = v0 + OBJC_IVAR____TtC10Calculator24CalculatorNetworkManager___observationRegistrar;
  v8 = v0;
  v4 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(_QWORD *)(v0 + 24);
  swift_retain(v5);
  NWPathMonitor.cancel()();
  swift_release(v5);
  swift_release(*(_QWORD *)(v1 + 24));
  v6 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
  return v1;
}

uint64_t type metadata accessor for CalculatorNetworkManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100117DA8;
  if (!qword_100117DA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorNetworkManager);
  return result;
}

uint64_t CalculatorNetworkManager.__deallocating_deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t KeyPath;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000D30E0);
  v3 = (char *)v0 + OBJC_IVAR____TtC10Calculator24CalculatorNetworkManager___observationRegistrar;
  v8 = v0;
  v4 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v0[3];
  swift_retain(v5);
  NWPathMonitor.cancel()();
  swift_release(v5);
  swift_release(v1[3]);
  v6 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48), *(unsigned __int16 *)(*v1 + 52));
}

uint64_t sub_100096B40()
{
  return type metadata accessor for CalculatorNetworkManager(0);
}

uint64_t sub_100096B48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000D3170;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_100096BCC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  double result;
  uint64_t v33;
  _QWORD *v34;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0, v5);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0, v10);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = (_QWORD *)swift_allocObject(&unk_10010C8F8, 40, 7);
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = v1;
  swift_retain(v1);
  v23 = sub_100096424((uint64_t)v20, (uint64_t)&unk_100117EC0, (uint64_t)v22);
  swift_release(v23);
  KeyPath = swift_getKeyPath(&unk_1000D30E0);
  v34 = v1;
  v25 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, KeyPath, v25);
  swift_release(KeyPath);
  v26 = v1[3];
  sub_100004D98();
  swift_retain(v26);
  static DispatchQoS.unspecified.getter(v27);
  v34 = _swiftEmptyArrayStorage;
  v28 = sub_100005178(&qword_100117EC8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v29 = sub_100005360(&qword_100117ED0);
  v30 = sub_100097000();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v29, v30, v8, v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v31 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x80000001000D7620, v16, v12, v7, 0);
  NWPathMonitor.start(queue:)();

  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_100096E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_100096EA4, 0, 0);
}

uint64_t sub_100096EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  KeyPath = swift_getKeyPath(&unk_1000D30E0);
  *(_QWORD *)(v0 + 16) = v1;
  v3 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = swift_allocObject(&unk_10010C948, 24, 7);
  swift_weakInit(v5 + 16, v1);
  swift_retain(v4);
  swift_retain(v5);
  sub_1000976CC((uint64_t)sub_1000976C4, v5);
  NWPathMonitor.pathUpdateHandler.setter(sub_1000976C4, v5);
  swift_release(v4);
  swift_release_n(v5, 2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100096FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100117EBC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100013F04;
  v3[3] = v2;
  return swift_task_switch(sub_100096EA4, 0, 0);
}

unint64_t sub_100097000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117ED8;
  if (!qword_100117ED8)
  {
    v1 = sub_100005608(&qword_100117ED0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100117ED8);
  }
  return result;
}

double sub_10009704C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  double result;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v29[24];

  v3 = sub_100005360(&qword_1001142E0);
  v5 = __chkstk_darwin(v3, v4);
  v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for NWPath.Status(0, v5);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v13, v14);
  v16 = &v29[-v15 - 8];
  a2 += 16;
  swift_beginAccess(a2, v29, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v19 = Strong;
    NWPath.status.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for NWPath.Status.satisfied(_:), v8);
    v20 = static NWPath.Status.== infix(_:_:)(v16, v12);
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v16, v8);
    v22 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 1, 1, v22);
    type metadata accessor for MainActor(0);
    swift_retain(v19);
    v24 = static MainActor.shared.getter(v23);
    if ((v20 & 1) != 0)
    {
      v25 = (_QWORD *)swift_allocObject(&unk_10010C998, 40, 7);
      v25[2] = v24;
      v25[3] = &protocol witness table for MainActor;
      v25[4] = v19;
      v26 = &unk_100117F00;
    }
    else
    {
      v25 = (_QWORD *)swift_allocObject(&unk_10010C970, 40, 7);
      v25[2] = v24;
      v25[3] = &protocol witness table for MainActor;
      v25[4] = v19;
      v26 = &unk_100117EF0;
    }
    v27 = sub_100096424((uint64_t)v7, (uint64_t)v26, (uint64_t)v25);
    swift_release(v19);
    *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  }
  return result;
}

uint64_t sub_100097254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 32) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000972C0, v6, v7);
}

uint64_t sub_1000972C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  KeyPath = swift_getKeyPath(&unk_1000D3188);
  *(_QWORD *)(v0 + 16) = v1;
  v3 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v3);
  v4 = swift_release(KeyPath);
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    v5 = *(_QWORD *)(v0 + 24);
    v6 = swift_getKeyPath(&unk_1000D3188);
    v7 = swift_task_alloc(32);
    *(_QWORD *)(v7 + 16) = v5;
    *(_BYTE *)(v7 + 24) = 1;
    *(_QWORD *)(v0 + 16) = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v6, sub_1000694FC, v7, (char *)&type metadata for () + 8, v3);
    swift_release(v6);
    swift_task_dealloc(v7);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v4);
}

uint64_t sub_1000973D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 32) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100097444, v6, v7);
}

uint64_t sub_100097444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  KeyPath = swift_getKeyPath(&unk_1000D3188);
  *(_QWORD *)(v0 + 16) = v1;
  v3 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v3);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    v4 = *(_QWORD *)(v0 + 24);
    v5 = swift_getKeyPath(&unk_1000D3188);
    v6 = swift_task_alloc(32);
    *(_QWORD *)(v6 + 16) = v4;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v0 + 16) = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v5, sub_1000695B4, v6, (char *)&type metadata for () + 8, v3);
    swift_release(v5);
    swift_task_dealloc(v6);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009755C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000975C0;
  return v6(a1);
}

uint64_t sub_1000975C0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10009760C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100097630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100117EE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100013F04;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100117EE0 + dword_100117EE0))(a1, v4);
}

uint64_t sub_1000976A0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000976C4(uint64_t a1)
{
  uint64_t v1;

  return sub_10009704C(a1, v1);
}

uint64_t sub_1000976CC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000976E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100117EEC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100014F2C;
  return sub_1000973D8(a1, v4, v5, v6);
}

uint64_t sub_100097750(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100117EFC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100014F2C;
  return sub_100097254(a1, v4, v5, v6);
}

uint64_t sub_1000977C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_1000977FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009782C + 4 * word_1000D31B0[a1]))(1701736270, 0xE400000000000000);
}

uint64_t sub_10009782C()
{
  return 0x7261656C436C6C41;
}

uint64_t sub_100097844()
{
  return 0x65746167654ELL;
}

uint64_t sub_100097858()
{
  return 0x746E6563726550;
}

uint64_t sub_100097BAC()
{
  return 0x6D754E72656C7545;
}

uint64_t sub_100097BD0()
{
  return 0x776F5073656D6954;
}

uint64_t sub_100097BF4()
{
  return 0x736E6169646152;
}

uint64_t sub_100097C0C()
{
  return 0x6C6F627265707948;
}

unint64_t sub_100097C30()
{
  return 0xD000000000000010;
}

unint64_t sub_100097C3C()
{
  return 0xD000000000000011;
}

uint64_t sub_100097C54()
{
  return 26960;
}

uint64_t sub_100097C60()
{
  return 0x6D6F646E6152;
}

uint64_t sub_100097C74()
{
  return 0x6574656C6544;
}

uint64_t sub_100097C88()
{
  return 0x616D6D6F43;
}

uint64_t sub_100097C9C()
{
  return 0x73656572676544;
}

unint64_t sub_100097CB4()
{
  return 0xD000000000000010;
}

unint64_t sub_100097CC0()
{
  return 0xD000000000000010;
}

uint64_t sub_100097CCC()
{
  return 0x6874697261676F4CLL;
}

uint64_t sub_100097D10()
{
  return 0x5365737265766E49;
}

uint64_t sub_100097D30()
{
  return 0x4365737265766E49;
}

uint64_t sub_100097D54()
{
  return 0x5465737265766E49;
}

unint64_t sub_100097D78()
{
  return 0xD000000000000015;
}

unint64_t sub_100097D94()
{
  return 0xD000000000000017;
}

unint64_t sub_100097DAC()
{
  return 0xD000000000000018;
}

uint64_t sub_100097DC4()
{
  return 65;
}

uint64_t sub_100097DD0()
{
  return 66;
}

uint64_t sub_100097DDC()
{
  return 67;
}

uint64_t sub_100097DE8()
{
  return 68;
}

uint64_t sub_100097DF4()
{
  return 69;
}

uint64_t sub_100097E00()
{
  return 70;
}

uint64_t sub_100097E0C()
{
  return 17990;
}

uint64_t sub_100097E18()
{
  return 12336;
}

uint64_t sub_100097E24()
{
  return 0x4165736977746942;
}

uint64_t sub_100097E44()
{
  return 0x4F65736977746942;
}

uint64_t sub_100097E60()
{
  return 0x4E65736977746942;
}

unint64_t sub_100097E90()
{
  return 0xD000000000000010;
}

uint64_t sub_100097E9C()
{
  return 0x666968537466654CLL;
}

void sub_100097EC0()
{
  JUMPOUT(0x100097ED4);
}

uint64_t sub_100097EFC()
{
  return 0x6952657461746F52;
}

uint64_t sub_100097F1C()
{
  return 0x654C657461746F52;
}

uint64_t sub_100097F3C()
{
  return 0x70696C4665747942;
}

uint64_t sub_100097F64()
{
  return 6776174;
}

uint64_t sub_100097F74()
{
  return 7630702;
}

uint64_t sub_100097F84()
{
  return 0x73756C75646F4DLL;
}

uint64_t sub_100097F9C()
{
  return 1886351940;
}

uint64_t sub_100097FA8()
{
  return 1885435731;
}

uint64_t sub_100097FB4()
{
  return 0x70556C6C6F52;
}

uint64_t sub_100097FC8()
{
  return 0x6E776F446C6C6F52;
}

uint64_t sub_100097FE0()
{
  return 0x7265746E45;
}

void sub_100097FF4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100098018()
{
  return LocalizedStringKey.init(stringLiteral:)(1701736270, 0xE400000000000000);
}

void sub_100098800()
{
  JUMPOUT(0x1000987F0);
}

void sub_100098818()
{
  JUMPOUT(0x1000987F0);
}

void sub_100098838()
{
  JUMPOUT(0x1000987F0);
}

void sub_10009884C(char a1)
{
  unint64_t v1;
  unint64_t v2;
  const char *v3;
  const char *v4;
  uint64_t v5;

  switch(a1)
  {
    case 1:
      v1 = 0xE900000000000072;
      v2 = 0x61656C43206C6C41;
      break;
    case 2:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 47:
    case 48:
    case 49:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      sub_100097FF4(a1);
      return;
    case 3:
      v2 = 0x746E6563726550;
      v1 = 0xE700000000000000;
      break;
    case 4:
      v2 = 0x656469766944;
      v1 = 0xE600000000000000;
      break;
    case 5:
      v2 = 0x796C7069746C754DLL;
      v1 = 0xE800000000000000;
      break;
    case 6:
      v2 = 0x7463617274627553;
      v1 = 0xE800000000000000;
      break;
    case 7:
      v2 = 6579265;
      v1 = 0xE300000000000000;
      break;
    case 8:
      v2 = 0x736C61757145;
      v1 = 0xE600000000000000;
      break;
    case 10:
      v2 = 0xD000000000000016;
      v3 = "Change Calculator mode";
      goto LABEL_46;
    case 21:
      v2 = 0xD000000000000010;
      v3 = "Open parenthesis";
      goto LABEL_46;
    case 22:
      v4 = "Close parenthesis";
      goto LABEL_26;
    case 23:
      v2 = 0xD000000000000010;
      v3 = "Clear the memory";
      goto LABEL_46;
    case 24:
      v2 = 0xD000000000000025;
      v3 = "Add the displayed value to the memory";
      goto LABEL_46;
    case 25:
      v2 = 0xD00000000000002ALL;
      v3 = "Subtract the displayed value to the memory";
      goto LABEL_46;
    case 26:
      v2 = 0xD000000000000021;
      v3 = "Recall the value stored in memory";
      goto LABEL_46;
    case 27:
      v2 = 0xD00000000000002ALL;
      v3 = "Change some buttons to alternate functions";
      goto LABEL_46;
    case 44:
      v2 = 0x1000000000000017;
      v3 = "Enter 𝑒 (2.71828…)";
      goto LABEL_46;
    case 45:
      v2 = 0x7845207265746E45;
      v1 = 0xEE00746E656E6F70;
      break;
    case 46:
      v4 = "Switch to radians";
      goto LABEL_26;
    case 50:
      v1 = 0x80000001000D77D0;
      v2 = 0x1000000000000015;
      break;
    case 51:
      v2 = 0xD000000000000028;
      v3 = "Generate a random number between 0 and 1";
      goto LABEL_46;
    case 52:
      v5 = 1701602628;
      goto LABEL_40;
    case 54:
      v4 = "Switch to degrees";
LABEL_26:
      v1 = (unint64_t)(v4 - 32) | 0x8000000000000000;
      v2 = 0xD000000000000011;
      break;
    case 73:
      v2 = 0x2065736977746942;
      v1 = 0xEB00000000444E41;
      break;
    case 74:
      v2 = 0x2065736977746942;
      v1 = 0xEA0000000000524FLL;
      break;
    case 75:
      v2 = 0x2065736977746942;
      v1 = 0xEB00000000524F4ELL;
      break;
    case 76:
      v1 = 0xEB00000000524F58;
      goto LABEL_42;
    case 77:
      v2 = 0xD00000000000001ALL;
      v3 = "Shift X 1 bit to the right";
      goto LABEL_46;
    case 78:
      v2 = 0xD000000000000019;
      v3 = "Shift X 1 bit to the left";
      goto LABEL_46;
    case 79:
      v2 = 0xD00000000000001BLL;
      v3 = "Shift X Y bits to the right";
      goto LABEL_46;
    case 80:
      v2 = 0xD00000000000001ALL;
      v3 = "Shift X Y bits to the left";
      goto LABEL_46;
    case 81:
      v2 = 0x7220657461746F52;
      v1 = 0xEC00000074686769;
      break;
    case 82:
      v2 = 0x6C20657461746F52;
      v1 = 0xEB00000000746665;
      break;
    case 83:
      v2 = 0xD00000000000002BLL;
      v3 = "Flip each byte in X (0xabcd becomes 0xcdab)";
      goto LABEL_46;
    case 84:
      v2 = 0xD000000000000033;
      v3 = "Flip each word in X (0xabcd1234 becomes 0x1234abcd)";
      goto LABEL_46;
    case 85:
      v5 = 1634166094;
LABEL_40:
      v2 = v5 & 0xFFFF0000FFFFFFFFLL | 0x657400000000;
      v1 = 0xE600000000000000;
      break;
    case 86:
      v1 = 0xEB00000000544F4ELL;
LABEL_42:
      v2 = 0x2065736977746942;
      break;
    case 87:
      v2 = 0x73756C75646F4DLL;
      v1 = 0xE700000000000000;
      break;
    case 88:
      v2 = 1886351940;
      v1 = 0xE400000000000000;
      break;
    case 89:
      v2 = 0xD000000000000012;
      v3 = "Exchange registers";
LABEL_46:
      v1 = (unint64_t)(v3 - 32) | 0x8000000000000000;
      break;
    case 90:
      v2 = 0x7075206C6C6F52;
      v1 = 0xE700000000000000;
      break;
    case 91:
      v2 = 0x776F64206C6C6F52;
      v1 = 0xE90000000000006ELL;
      break;
    case 92:
      v2 = 0x7265746E45;
      v1 = 0xE500000000000000;
      break;
    default:
      v2 = 0;
      v1 = 0xE000000000000000;
      break;
  }
  LocalizedStringKey.init(stringLiteral:)(v2, v1);
}

BOOL static SidebarPresentationStyle.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SidebarPresentationStyle.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int SidebarPresentationStyle.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t sub_100098D20()
{
  unint64_t result;

  result = qword_100117F08;
  if (!qword_100117F08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SidebarPresentationStyle, &type metadata for SidebarPresentationStyle);
    atomic_store(result, (unint64_t *)&qword_100117F08);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SidebarPresentationStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100098DB0 + 4 * byte_1000D33E5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100098DE4 + 4 * byte_1000D33E0[v4]))();
}

uint64_t sub_100098DE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100098DEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100098DF4);
  return result;
}

uint64_t sub_100098E00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100098E08);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100098E0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100098E14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SidebarPresentationStyle()
{
  return &type metadata for SidebarPresentationStyle;
}

id sub_100098E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = sub_100005360(&qword_100117FD8);
  State.wrappedValue.getter(&v19, v2);
  v3 = v20;
  if (!v20)
    return 0;
  v4 = v19;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  swift_retain(v5);
  v8 = sub_1000439B4(v7, v6);
  swift_release(v5);
  v9 = sub_10004835C();
  swift_release(v8);
  v10 = *(_QWORD *)(v9 + 16);
  swift_retain(v10);
  swift_release(v9);
  v11 = sub_10007DDA8();
  swift_release(v10);
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_1000053A4(v4, v3), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(v11 + 56) + 16 * v12;
    v15 = *(id *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(id *)v14;
    swift_bridgeObjectRetain(v16);
  }
  else
  {
    v15 = 0;
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v11);
  return v15;
}

uint64_t sub_100098F50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __n128 v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t KeyPath;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  char *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t (**v130)();
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char v195[8];
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;

  v2 = v1;
  v191 = a1;
  v156 = type metadata accessor for UserInterfaceSizeClass(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156, v3);
  v154 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5, v6);
  v153 = (char *)&v153 - v8;
  v172 = type metadata accessor for SearchPresentationToolbarBehavior(0, v7);
  v171 = *(_QWORD *)(v172 - 8);
  v10 = __chkstk_darwin(v172, v9);
  v168 = (char *)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for SearchFieldPlacement.NavigationBarDrawerDisplayMode(0, v10);
  v159 = *(_QWORD *)(v162 - 8);
  v13 = __chkstk_darwin(v162, v12);
  v15 = (char *)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for SearchFieldPlacement(0, v13);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166, v16);
  v194 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100005360(&qword_100117F10);
  v163 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193, v18);
  v160 = (char *)&v153 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100005360(&qword_100117F18);
  v167 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164, v20);
  v192 = (char *)&v153 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100005360(&qword_100115258);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170, v22);
  v161 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100005360(&qword_100115260);
  __chkstk_darwin(v24, v25);
  v173 = (uint64_t)&v153 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100005360(&qword_100117F20);
  __chkstk_darwin(v174, v27);
  v177 = (uint64_t)&v153 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100005360(&qword_100117F28);
  __chkstk_darwin(v176, v29);
  v179 = (char *)&v153 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100005360(&qword_100117F30);
  __chkstk_darwin(v178, v31);
  v181 = (uint64_t)&v153 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100005360(&qword_100117F38);
  __chkstk_darwin(v180, v33);
  v182 = (uint64_t)&v153 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100005360(&qword_100117F40);
  __chkstk_darwin(v188, v35);
  v183 = (uint64_t)&v153 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100005360(&qword_100117F48);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190, v37);
  v187 = (char *)&v153 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100005360(&qword_100117F50);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186, v39);
  v184 = (char *)&v153 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = v1;
  v41 = sub_100005360(&qword_100117F58);
  v42 = sub_100005608(&qword_100117F60);
  v43 = sub_100005608(&qword_100117F68);
  v44 = sub_100008078(&qword_100117F70, &qword_100117F60, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v45 = sub_100005608(&qword_100117F78);
  v46 = sub_1000A341C();
  *(_QWORD *)&v201 = v45;
  *((_QWORD *)&v201 + 1) = v46;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v201, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  *(_QWORD *)&v201 = v42;
  *((_QWORD *)&v201 + 1) = v43;
  *(_QWORD *)&v202 = v44;
  *((_QWORD *)&v202 + 1) = OpaqueTypeConformance2;
  v48 = swift_getOpaqueTypeConformance2(&v201, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  NavigationStack.init<>(root:)(sub_1000A3414, v195, v41, v48);
  v197 = *(_OWORD *)(v2 + 160);
  v198 = *(_QWORD *)(v2 + 176);
  v49 = sub_100005360(&qword_100117F98);
  State.projectedValue.getter(&v201, v49);
  v50 = v201;
  v51 = *((_QWORD *)&v202 + 1);
  v158 = v202;
  v204 = *(_OWORD *)(v2 + 120);
  v197 = *(_OWORD *)(v2 + 120);
  v175 = sub_100005360(&qword_100113FF8);
  v52 = State.projectedValue.getter(&v201, v175);
  v53 = v201;
  v157 = v202;
  static SearchFieldPlacement.NavigationBarDrawerDisplayMode.always.getter(v52);
  static SearchFieldPlacement.navigationBarDrawer(displayMode:)(v15);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v15, v162);
  v54 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x80000001000D7D60);
  v55 = Text.init(_:tableName:bundle:comment:)(v54);
  v57 = v56;
  v59 = v58;
  v159 = v58;
  v61 = v60 & 1;
  v162 = sub_100008078(&qword_100117FA0, &qword_100117F10, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
  v152 = v59;
  v62 = v160;
  View.searchable(text:isPresented:placement:prompt:)(v50, *((_QWORD *)&v50 + 1), v158, v51, v53, *((_QWORD *)&v53 + 1), v157, v194, v55, v57, v61, v152, v193, v162);
  sub_10002DD44(v55, v57, v61);
  v63 = v161;
  swift_bridgeObjectRelease(v51);
  swift_release(*((_QWORD *)&v50 + 1));
  swift_release(*((_QWORD *)&v53 + 1));
  swift_bridgeObjectRelease(v159);
  swift_release(v53);
  v64 = swift_release(v50);
  (*(void (**)(char *, uint64_t, __n128))(v165 + 8))(v194, v166, v64);
  v65 = v62;
  v66 = v193;
  v67 = (*(uint64_t (**)(char *, uint64_t))(v163 + 8))(v65, v193);
  v68 = v168;
  static SearchPresentationToolbarBehavior.avoidHidingContent.getter(v67);
  *(_QWORD *)&v201 = v66;
  *((_QWORD *)&v201 + 1) = v162;
  v69 = swift_getOpaqueTypeConformance2(&v201, &opaque type descriptor for <<opaque return type of View.searchable(text:isPresented:placement:prompt:)>>, 1);
  v70 = v164;
  v71 = v192;
  View.searchPresentationToolbarBehavior(_:)(v68, v164, v69);
  (*(void (**)(char *, uint64_t))(v171 + 8))(v68, v172);
  v72 = (*(uint64_t (**)(char *, uint64_t))(v167 + 8))(v71, v70);
  if (qword_100113A68 != -1)
    v72 = swift_once(&qword_100113A68, sub_10001B914);
  v73 = *(double *)&qword_10011F8F0;
  v74 = static Alignment.center.getter(v72);
  v75 = v173;
  v77 = sub_1000360D4(0.0, 1, 0.0, 1, 0.0, 1, v73, 0, v173, INFINITY, 0, INFINITY, 0, v74, v76);
  v78 = (*(uint64_t (**)(char *, uint64_t, __n128))(v169 + 8))(v63, v170, v77);
  v79 = static Edge.Set.top.getter(v78);
  v80 = *(_QWORD *)(v2 + 32);
  v81 = *(unsigned __int8 *)(v2 + 40);
  swift_retain(v80);
  v83 = sub_1000436BC(v82, v81);
  swift_release(v80);
  v84 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v85 = objc_msgSend(v84, "userInterfaceIdiom");

  if (v85)
  {
    KeyPath = swift_getKeyPath(&unk_1000D3510);
    *(_QWORD *)&v201 = v83;
    v87 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v201, KeyPath, v87);
    swift_release(KeyPath);
    v88 = v83 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
    swift_beginAccess(v83 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, (char *)&v200 + 1, 0, 0);
    v89 = v155;
    v90 = *(void (**)(char *, uint64_t, uint64_t))(v155 + 16);
    v91 = v153;
    LODWORD(v194) = v81;
    v92 = v79;
    v93 = v75;
    v94 = v156;
    v90(v153, v88, v156);
    v95 = v154;
    (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v154, enum case for UserInterfaceSizeClass.compact(_:), v94);
    LOBYTE(v88) = static UserInterfaceSizeClass.== infix(_:_:)(v91, v95);
    v96 = *(void (**)(char *, uint64_t))(v89 + 8);
    v96(v95, v94);
    v97 = v94;
    v75 = v93;
    v79 = v92;
    LOBYTE(v81) = (_BYTE)v194;
    v96(v91, v97);
    swift_release(v83);
    v99 = 0.0;
    v100 = (uint64_t)v179;
    if ((v88 & 1) == 0)
    {
      if (qword_100113A80 != -1)
        v98 = swift_once(&qword_100113A80, sub_10001B95C);
      v99 = *(double *)&qword_10011F908;
    }
  }
  else
  {
    swift_release(v83);
    v99 = 0.0;
    v100 = (uint64_t)v179;
  }
  v101 = EdgeInsets.init(_all:)(v98, v99);
  v103 = v102;
  v105 = v104;
  v107 = v106;
  v108 = v177;
  sub_10000531C(v75, v177, &qword_100115260);
  v109 = v108 + *(int *)(v174 + 36);
  *(_BYTE *)v109 = v79;
  *(double *)(v109 + 8) = v101;
  *(_QWORD *)(v109 + 16) = v103;
  *(_QWORD *)(v109 + 24) = v105;
  *(_QWORD *)(v109 + 32) = v107;
  *(_BYTE *)(v109 + 40) = 0;
  sub_100004F48(v75, &qword_100115260);
  swift_retain(v80);
  v111 = sub_1000436BC(v110, v81);
  swift_release(v80);
  v112 = sub_1000A6050(v111);
  swift_release(v111);
  v114 = static Alignment.center.getter(v113);
  _FrameLayout.init(width:height:alignment:)(&v201, *(_QWORD *)&v112, 0, 0, 1, v114, v115);
  sub_10000531C(v108, v100, &qword_100117F20);
  v116 = (_OWORD *)(v100 + *(int *)(v176 + 36));
  v117 = v202;
  *v116 = v201;
  v116[1] = v117;
  v116[2] = v203;
  sub_100004F48(v108, &qword_100117F20);
  if (qword_100113E00 != -1)
    swift_once(&qword_100113E00, sub_100053584);
  v118 = qword_10011FDA8;
  swift_retain(qword_10011FDA8);
  v120 = static Edge.Set.all.getter(v119);
  v121 = v181;
  sub_10000531C(v100, v181, &qword_100117F28);
  v122 = v121 + *(int *)(v178 + 36);
  *(_QWORD *)v122 = v118;
  *(_BYTE *)(v122 + 8) = v120;
  sub_100004F48(v100, &qword_100117F28);
  v123 = swift_allocObject(&unk_10010CB30, 200, 7);
  v124 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v123 + 144) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v123 + 160) = v124;
  *(_OWORD *)(v123 + 176) = *(_OWORD *)(v2 + 160);
  *(_QWORD *)(v123 + 192) = *(_QWORD *)(v2 + 176);
  v125 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v123 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v123 + 96) = v125;
  v126 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v123 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v123 + 128) = v126;
  v127 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v123 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v123 + 32) = v127;
  v128 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v123 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v123 + 64) = v128;
  v129 = v182;
  sub_10000531C(v121, v182, &qword_100117F30);
  v130 = (uint64_t (**)())(v129 + *(int *)(v180 + 36));
  *v130 = sub_1000A34D4;
  v130[1] = (uint64_t (*)())v123;
  v130[2] = 0;
  v130[3] = 0;
  sub_1000A34DC((uint64_t *)v2);
  sub_100004F48(v121, &qword_100117F30);
  v131 = swift_allocObject(&unk_10010CB58, 200, 7);
  v132 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v131 + 144) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v131 + 160) = v132;
  *(_OWORD *)(v131 + 176) = *(_OWORD *)(v2 + 160);
  *(_QWORD *)(v131 + 192) = *(_QWORD *)(v2 + 176);
  v133 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v131 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v131 + 96) = v133;
  v134 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v131 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v131 + 128) = v134;
  v135 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v131 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v131 + 32) = v135;
  v136 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v131 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v131 + 64) = v136;
  v137 = v183;
  sub_10000531C(v129, v183, &qword_100117F38);
  v138 = v188;
  v139 = (_QWORD *)(v137 + *(int *)(v188 + 36));
  *v139 = 0;
  v139[1] = 0;
  v139[2] = sub_1000A35B8;
  v139[3] = v131;
  sub_1000A34DC((uint64_t *)v2);
  sub_100004F48(v129, &qword_100117F38);
  v197 = v204;
  State.wrappedValue.getter(&v200, v175);
  LOBYTE(v197) = v200;
  v140 = swift_allocObject(&unk_10010CB80, 200, 7);
  v141 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v140 + 144) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v140 + 160) = v141;
  *(_OWORD *)(v140 + 176) = *(_OWORD *)(v2 + 160);
  *(_QWORD *)(v140 + 192) = *(_QWORD *)(v2 + 176);
  v142 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v140 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v140 + 96) = v142;
  v143 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v140 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v140 + 128) = v143;
  v144 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v140 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v140 + 32) = v144;
  v145 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v140 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v140 + 64) = v145;
  sub_1000A34DC((uint64_t *)v2);
  v146 = sub_10003D3C8(&qword_100117FA8, &qword_100117F40, (void (*)(void))sub_1000A35CC);
  v147 = v187;
  View.onChange<A>(of:initial:_:)(&v197, 0, sub_1000A35C4, v140, v138, &type metadata for Bool, v146, &protocol witness table for Bool);
  swift_release(v140);
  sub_100004F48(v137, &qword_100117F40);
  *(_QWORD *)&v197 = v138;
  *((_QWORD *)&v197 + 1) = &type metadata for Bool;
  v198 = v146;
  v199 = &protocol witness table for Bool;
  v148 = swift_getOpaqueTypeConformance2(&v197, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v149 = v184;
  v150 = v190;
  View.allowsSecureDrawing()(v190, v148);
  (*(void (**)(char *, uint64_t))(v189 + 8))(v147, v150);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v185 + 32))(v191, v149, v186);
}

uint64_t sub_100099E6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t OpaqueTypeConformance2;
  _BYTE v14[16];
  uint64_t v15;
  _QWORD v16[2];

  v2 = sub_100005360(&qword_100117F60);
  v4 = __chkstk_darwin(v2, v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v4);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v7 = sub_100005360(&qword_100117FE0);
  sub_100099FA4(a1, (uint64_t)&v6[*(int *)(v7 + 44)]);
  v15 = a1;
  v8 = sub_100005360(&qword_100117F68);
  v9 = sub_100008078(&qword_100117F70, &qword_100117F60, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v10 = sub_100005608(&qword_100117F78);
  v11 = sub_1000A341C();
  v16[0] = v10;
  v16[1] = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v16, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  View.toolbar<A>(content:)(sub_1000A37AC, v14, v2, v8, v9, OpaqueTypeConformance2);
  return sub_100004F48((uint64_t)v6, &qword_100117F60);
}

uint64_t sub_100099FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;

  v37 = a2;
  v34 = type metadata accessor for PlainListStyle(0);
  v36 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34, v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100005360(&qword_100117FF8);
  __chkstk_darwin(v30, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100118000);
  v31 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100118008);
  v32 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005360(&qword_100118010);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33, v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = a1;
  sub_10009BFB8(a1, (uint64_t)v8);
  v20 = sub_100005360(&qword_100118018);
  v21 = sub_100066FB8(&qword_100118020, &qword_100118018, (void (*)(void))sub_1000A3818, (uint64_t)&protocol conformance descriptor for <A> A?);
  v22 = sub_100066FB8(&qword_1001180E8, &qword_100117FF8, (void (*)(void))sub_1000A3B74, (uint64_t)&protocol conformance descriptor for <A> A?);
  v23 = Section<>.init(footer:content:)(v8, sub_1000A3810, v38, v20, v30, v21, v22);
  PlainListStyle.init()(v23);
  v24 = sub_1000A3D44();
  v25 = v34;
  View.listStyle<A>(_:)(v5, v9, v34, v24, &protocol witness table for PlainListStyle);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v25);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v9);
  v40 = v9;
  v41 = v25;
  v42 = v24;
  v43 = &protocol witness table for PlainListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  View.scrollContentBackground(_:)(2, v13, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v13);
  v40 = v13;
  v41 = OpaqueTypeConformance2;
  v27 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.scrollContentBackground(_:)>>, 1);
  v28 = v33;
  View.accessibilityIdentifier(_:)(0xD000000000000015, 0x80000001000D7D80, v33, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v19, v28);
}

uint64_t sub_10009A2C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD, _QWORD);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t KeyPath;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  __int128 v132;

  v125 = a2;
  v124 = sub_100005360(&qword_1001180E0);
  __chkstk_darwin(v124, v3);
  v115 = (char **)((char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100005360(&qword_100118240);
  __chkstk_darwin(v5, v6);
  v112 = (uint64_t)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v114 = (uint64_t)&v107 - v10;
  v11 = sub_100005360(&qword_100118248);
  __chkstk_darwin(v11, v12);
  v111 = (uint64_t)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v113 = (uint64_t)&v107 - v16;
  v118 = sub_100005360(&qword_100118060);
  __chkstk_darwin(v118, v17);
  v110 = (char **)((char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v120 = sub_100005360(&qword_100118250);
  __chkstk_darwin(v120, v19);
  v122 = (uint64_t)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100005360(&qword_100118258);
  __chkstk_darwin(v116, v21);
  v23 = (char *)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100005360(&qword_100118050);
  __chkstk_darwin(v117, v24);
  v108 = (uint64_t)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100005360(&qword_100118040);
  __chkstk_darwin(v121, v26);
  v119 = (char **)((char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_100005360(&qword_100118018);
  __chkstk_darwin(v28, v29);
  v123 = (char **)((char *)&v107 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v109 = sub_100005360(&qword_100118260);
  v31 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109, v32);
  v34 = (char *)&v107 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v36);
  v107 = (char *)&v107 - v37;
  v38 = sub_100005360(&qword_100118268);
  __chkstk_darwin(v38, v39);
  v41 = (char *)&v107 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  v45 = (char *)&v107 - v44;
  v132 = *(_OWORD *)(a1 + 120);
  v128 = *(_OWORD *)(a1 + 120);
  v46 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.getter(&v126, v46);
  if (v126 != 1)
    goto LABEL_5;
  v128 = *(_OWORD *)(a1 + 160);
  v129 = *(_QWORD *)(a1 + 176);
  v47 = sub_100005360(&qword_100117F98);
  State.wrappedValue.getter(&v126, v47);
  v48 = v126;
  v49 = v127;
  swift_bridgeObjectRelease(v127);
  v50 = HIBYTE(v49) & 0xF;
  if ((v49 & 0x2000000000000000) == 0)
    v50 = v48 & 0xFFFFFFFFFFFFLL;
  if (v50)
    goto LABEL_5;
  v83 = *(_QWORD *)(a1 + 16);
  v84 = *(_BYTE *)(a1 + 24);
  swift_retain(v83);
  v86 = sub_1000439B4(v85, v84);
  swift_release(v83);
  v87 = sub_10004835C();
  swift_release(v86);
  v88 = *(_QWORD *)(v87 + 16);
  swift_retain(v88);
  swift_release(v87);
  KeyPath = swift_getKeyPath(&unk_1000D35B0);
  *(_QWORD *)&v128 = v88;
  v90 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v128, KeyPath, v90);
  swift_release(KeyPath);
  swift_beginAccess(v88 + 32, &v126, 0, 0);
  v91 = *(_QWORD *)(v88 + 32);
  swift_bridgeObjectRetain(v91);
  swift_release(v88);
  if ((unint64_t)v91 >> 62)
  {
    v106 = v91 < 0 ? v91 : v91 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v91);
    v92 = _CocoaArrayWrapper.endIndex.getter(v106);
    swift_bridgeObjectRelease(v91);
  }
  else
  {
    v92 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v91);
  if (v92)
  {
    sub_10009AD48((uint64_t)v45);
    v93 = v107;
    sub_10009B268();
    sub_10000531C((uint64_t)v45, (uint64_t)v41, &qword_100118268);
    v94 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v95 = v109;
    v94(v34, v93, v109);
    v96 = v108;
    sub_10000531C((uint64_t)v41, v108, &qword_100118268);
    v97 = sub_100005360(&qword_100118278);
    v94((char *)(v96 + *(int *)(v97 + 48)), v34, v95);
    v115 = *(char ***)(v31 + 8);
    ((void (*)(char *, uint64_t))v115)(v34, v95);
    sub_100004F48((uint64_t)v41, &qword_100118268);
    sub_10000531C(v96, (uint64_t)v23, &qword_100118050);
    swift_storeEnumTagMultiPayload(v23, v116, 0);
    v98 = sub_100008078(&qword_100118048, &qword_100118050, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v99 = sub_1000A3920();
    v100 = v119;
    _ConditionalContent<>.init(storage:)(v119, v23, v117, v118, v98, v99);
    sub_100004F48(v96, &qword_100118050);
    v101 = v122;
    sub_10000531C((uint64_t)v100, v122, &qword_100118040);
    swift_storeEnumTagMultiPayload(v101, v120, 0);
    v102 = sub_1000A389C();
    v103 = sub_100008078(&qword_1001180D8, &qword_1001180E0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v104 = v123;
    _ConditionalContent<>.init(storage:)(v123, v101, v121, v124, v102, v103);
    sub_100004F48((uint64_t)v100, &qword_100118040);
    ((void (*)(char *, uint64_t))v115)(v93, v95);
    sub_100004F48((uint64_t)v45, &qword_100118268);
    v105 = sub_100005360(&qword_100118030);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v104, 0, 1, v105);
    v64 = (uint64_t)v104;
  }
  else
  {
LABEL_5:
    v128 = v132;
    State.wrappedValue.getter(&v130, v46);
    if (v130 != 1)
      goto LABEL_10;
    v128 = *(_OWORD *)(a1 + 160);
    v129 = *(_QWORD *)(a1 + 176);
    v51 = sub_100005360(&qword_100117F98);
    State.wrappedValue.getter(&v130, v51);
    v53 = v130;
    v52 = v131;
    swift_bridgeObjectRelease(v131);
    v54 = HIBYTE(v52) & 0xF;
    if ((v52 & 0x2000000000000000) == 0)
      v54 = v53 & 0xFFFFFFFFFFFFLL;
    if (v54)
    {
      v55 = v110;
      sub_10009B438(v110);
      sub_10000531C((uint64_t)v55, (uint64_t)v23, &qword_100118060);
      swift_storeEnumTagMultiPayload(v23, v116, 1);
      v56 = sub_100008078(&qword_100118048, &qword_100118050, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v57 = sub_1000A3920();
      v58 = v119;
      _ConditionalContent<>.init(storage:)(v119, v23, v117, v118, v56, v57);
      v59 = v122;
      sub_10000531C((uint64_t)v58, v122, &qword_100118040);
      swift_storeEnumTagMultiPayload(v59, v120, 0);
      v60 = sub_1000A389C();
      v61 = sub_100008078(&qword_1001180D8, &qword_1001180E0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v62 = v123;
      _ConditionalContent<>.init(storage:)(v123, v59, v121, v124, v60, v61);
      sub_100004F48((uint64_t)v58, &qword_100118040);
      sub_100004F48((uint64_t)v55, &qword_100118060);
      v63 = sub_100005360(&qword_100118030);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
      v64 = (uint64_t)v62;
    }
    else
    {
LABEL_10:
      v65 = sub_100098E30();
      if (!v65)
      {
        v81 = sub_100005360(&qword_100118030);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v125, 1, 1, v81);
      }
      v67 = v65;
      v68 = v66;
      v69 = v113;
      sub_10009B854(v113);
      v70 = v114;
      sub_10009BD70(v67, v68, v114);
      v71 = v111;
      sub_10000531C(v69, v111, &qword_100118248);
      v72 = v68;
      v73 = v112;
      sub_10000531C(v70, v112, &qword_100118240);
      v74 = (void (*)(_QWORD, _QWORD))v115;
      sub_10000531C(v71, (uint64_t)v115, &qword_100118248);
      v75 = sub_100005360(&qword_100118270);
      sub_10000531C(v73, (uint64_t)v74 + *(int *)(v75 + 48), &qword_100118240);
      sub_100004F48(v73, &qword_100118240);
      sub_100004F48(v71, &qword_100118248);
      v76 = v122;
      sub_10000531C((uint64_t)v74, v122, &qword_1001180E0);
      swift_storeEnumTagMultiPayload(v76, v120, 1);
      v77 = sub_1000A389C();
      v78 = sub_100008078(&qword_1001180D8, &qword_1001180E0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v79 = v123;
      _ConditionalContent<>.init(storage:)(v123, v76, v121, v124, v77, v78);
      swift_bridgeObjectRelease(v72);

      sub_100004F48((uint64_t)v74, &qword_1001180E0);
      sub_100004F48(v70, &qword_100118240);
      sub_100004F48(v69, &qword_100118248);
      v80 = sub_100005360(&qword_100118030);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v79, 0, 1, v80);
      v64 = (uint64_t)v79;
    }
  }
  return sub_100007CD8(v64, v125, &qword_100118018);
}

uint64_t sub_10009AD48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[3];

  v2 = v1;
  v78 = a1;
  v3 = sub_100005360(&qword_1001182E8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005360(&qword_1001182F0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100005360(&qword_1001182F8);
  __chkstk_darwin(v74, v11);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100005360(&qword_100118300);
  __chkstk_darwin(v75, v14);
  v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100005360(&qword_100118308);
  __chkstk_darwin(v76, v17);
  v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100005360(&qword_100118310);
  v21 = __chkstk_darwin(v77, v20);
  v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v21);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v24 = sub_100005360(&qword_100118318);
  sub_10009DDAC(v2, (uint64_t)&v6[*(int *)(v24 + 44)], v25);
  if (qword_100113D40 != -1)
    swift_once(&qword_100113D40, sub_100053138);
  v26 = qword_10011FCE8;
  KeyPath = swift_getKeyPath(&unk_1000D3658);
  sub_10000531C((uint64_t)v6, (uint64_t)v10, &qword_1001182E8);
  v28 = (uint64_t *)&v10[*(int *)(v7 + 36)];
  *v28 = KeyPath;
  v28[1] = v26;
  swift_retain(v26);
  sub_100004F48((uint64_t)v6, &qword_1001182E8);
  if (qword_100113E80 != -1)
    swift_once(&qword_100113E80, sub_100089868);
  v29 = qword_10011FE28;
  v30 = swift_getKeyPath(&unk_1000D3688);
  sub_10000531C((uint64_t)v10, (uint64_t)v13, &qword_1001182F0);
  v31 = (uint64_t *)&v13[*(int *)(v74 + 36)];
  *v31 = v30;
  v31[1] = v29;
  swift_retain(v29);
  v32 = sub_100004F48((uint64_t)v10, &qword_1001182F0);
  if (qword_100113B10 != -1)
    v32 = swift_once(&qword_100113B10, sub_10001BAD0);
  v33 = qword_10011F998;
  v34 = static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(v79, 0, 1, v33, 0, v34, v35);
  sub_10000531C((uint64_t)v13, (uint64_t)v16, &qword_1001182F8);
  v36 = &v16[*(int *)(v75 + 36)];
  v37 = v79[1];
  *(_OWORD *)v36 = v79[0];
  *((_OWORD *)v36 + 1) = v37;
  *((_OWORD *)v36 + 2) = v79[2];
  v38 = sub_100004F48((uint64_t)v13, &qword_1001182F8);
  v39 = static Edge.Set.top.getter(v38);
  v40 = v39;
  if (qword_100113B18 != -1)
    v39 = swift_once(&qword_100113B18, sub_10001BAE0);
  v41 = EdgeInsets.init(_all:)(v39, *(double *)&qword_10011F9A0);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  sub_10000531C((uint64_t)v16, (uint64_t)v19, &qword_100118300);
  v48 = &v19[*(int *)(v76 + 36)];
  *v48 = v40;
  *((double *)v48 + 1) = v41;
  *((_QWORD *)v48 + 2) = v43;
  *((_QWORD *)v48 + 3) = v45;
  *((_QWORD *)v48 + 4) = v47;
  v48[40] = 0;
  v49 = sub_100004F48((uint64_t)v16, &qword_100118300);
  v50 = static Edge.Set.bottom.getter(v49);
  v51 = v50;
  if (qword_100113B20 != -1)
    v50 = swift_once(&qword_100113B20, sub_10001BAF0);
  v52 = EdgeInsets.init(_all:)(v50, *(double *)&qword_10011F9A8);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  sub_10000531C((uint64_t)v19, (uint64_t)v23, &qword_100118308);
  v59 = &v23[*(int *)(v77 + 36)];
  *v59 = v51;
  *((double *)v59 + 1) = v52;
  *((_QWORD *)v59 + 2) = v54;
  *((_QWORD *)v59 + 3) = v56;
  *((_QWORD *)v59 + 4) = v58;
  v59[40] = 0;
  v60 = sub_100004F48((uint64_t)v19, &qword_100118308);
  v61 = static Edge.Set.horizontal.getter(v60);
  v62 = v61;
  if (qword_100113B00 != -1)
    v61 = swift_once(&qword_100113B00, sub_10001BAB0);
  v63 = EdgeInsets.init(_all:)(v61, *(double *)&qword_10011F988);
  v65 = v64;
  v67 = v66;
  v69 = v68;
  v70 = v78;
  sub_10000531C((uint64_t)v23, v78, &qword_100118310);
  v71 = v70 + *(int *)(sub_100005360(&qword_100118268) + 36);
  *(_BYTE *)v71 = v62;
  *(double *)(v71 + 8) = v63;
  *(_QWORD *)(v71 + 16) = v65;
  *(_QWORD *)(v71 + 24) = v67;
  *(_QWORD *)(v71 + 32) = v69;
  *(_BYTE *)(v71 + 40) = 0;
  return sub_100004F48((uint64_t)v23, &qword_100118310);
}

uint64_t sub_10009B268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[6];
  uint64_t v21;
  _QWORD v22[3];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v1 + 24);
  swift_retain(v2);
  v5 = sub_1000439B4(v4, v3);
  swift_release(v2);
  v6 = sub_10004835C();
  swift_release(v5);
  v7 = *(_QWORD *)(v6 + 16);
  swift_retain(v7);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000D35B0);
  v22[0] = v7;
  v9 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v22, KeyPath, v9);
  swift_release(KeyPath);
  swift_beginAccess(v7 + 32, v22, 0, 0);
  v10 = *(_QWORD *)(v7 + 32);
  swift_bridgeObjectRetain(v10);
  swift_release(v7);
  v11 = swift_allocObject(&unk_10010CBD0, 200, 7);
  v12 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v11 + 144) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v11 + 160) = v12;
  *(_OWORD *)(v11 + 176) = *(_OWORD *)(v1 + 160);
  *(_QWORD *)(v11 + 192) = *(_QWORD *)(v1 + 176);
  v13 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v11 + 96) = v13;
  v14 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v11 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v11 + 128) = v14;
  v15 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v11 + 32) = v15;
  v16 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v11 + 64) = v16;
  v21 = v10;
  v20[2] = &v21;
  v20[3] = sub_1000A4088;
  v20[4] = v11;
  sub_1000A34DC((uint64_t *)v1);
  v17 = sub_100005360(&qword_100118280);
  v18 = sub_100066FB8(&qword_100118288, &qword_100118280, (void (*)(void))sub_1000A40C0, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  List<>.init(content:)(sub_1000A40B4, v20, v17, v18);
  swift_release(v11);
  return swift_bridgeObjectRelease(v21);
}

_QWORD *sub_10009B438@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _OWORD v63[24];
  uint64_t v64;
  unint64_t v65;

  v2 = v1;
  v62 = a1;
  v3 = sub_100005360(&qword_1001180D0);
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005360(&qword_1001180C0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v61 = (uint64_t)&v57 - v13;
  v14 = sub_100005360(&qword_100118328);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v1 + 16);
  v19 = *(_BYTE *)(v2 + 24);
  swift_retain(v18);
  v21 = sub_1000439B4(v20, v19);
  swift_release(v18);
  v22 = sub_10004835C();
  swift_release(v21);
  v23 = *(_QWORD *)(v22 + 16);
  swift_retain(v23);
  swift_release(v22);
  v63[0] = *(_OWORD *)(v2 + 160);
  *(_QWORD *)&v63[1] = *(_QWORD *)(v2 + 176);
  v24 = sub_100005360(&qword_100117F98);
  State.wrappedValue.getter(&v64, v24);
  v25 = v65;
  sub_10007F464(v64, v65);
  v27 = v26;
  swift_release(v23);
  v28 = swift_bridgeObjectRelease(v25);
  if (*(_QWORD *)(v27 + 16))
  {
    v57 = v14;
    v58 = v7;
    v30 = __chkstk_darwin(v28, v29);
    *(&v57 - 2) = v27;
    *(&v57 - 1) = v2;
    v31 = static Axis.Set.vertical.getter(v30);
    v32 = sub_100005360(&qword_100118330);
    v33 = sub_100008078(&qword_100118338, &qword_100118330, (uint64_t)&protocol conformance descriptor for LazyVStack<A>);
    ScrollView.init(_:showsIndicators:content:)(v31, 1, sub_1000A4454, &v57 - 4, v32, v33);
    v34 = swift_bridgeObjectRelease(v27);
    v35 = static Edge.Set.top.getter(v34);
    v36 = v35;
    if (qword_100113A88 != -1)
      v35 = swift_once(&qword_100113A88, sub_10001B96C);
    v37 = EdgeInsets.init(_all:)(v35, *(double *)&qword_10011F910);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v45 = v59;
    v44 = v60;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v10, v6, v60);
    v46 = v58;
    v47 = &v10[*(int *)(v58 + 36)];
    *v47 = v36;
    *((double *)v47 + 1) = v37;
    *((_QWORD *)v47 + 2) = v39;
    *((_QWORD *)v47 + 3) = v41;
    *((_QWORD *)v47 + 4) = v43;
    v47[40] = 0;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v44);
    v48 = v61;
    sub_100007CD8((uint64_t)v10, v61, &qword_1001180C0);
    sub_10000531C(v48, (uint64_t)v17, &qword_1001180C0);
    swift_storeEnumTagMultiPayload(v17, v57, 1);
    v49 = sub_100005360(&qword_100118070);
    v50 = sub_10003D3C8(&qword_100118068, &qword_100118070, (void (*)(void))sub_1000A39AC);
    v51 = sub_1000A3AF0();
    _ConditionalContent<>.init(storage:)(v62, v17, v49, v46, v50, v51);
    return (_QWORD *)sub_100004F48(v48, &qword_1001180C0);
  }
  else
  {
    swift_bridgeObjectRelease(v27);
    sub_10009F568((uint64_t)v63, v53);
    memcpy(v17, v63, 0x179uLL);
    swift_storeEnumTagMultiPayload(v17, v14, 0);
    v54 = sub_100005360(&qword_100118070);
    v55 = sub_10003D3C8(&qword_100118068, &qword_100118070, (void (*)(void))sub_1000A39AC);
    v56 = sub_1000A3AF0();
    return _ConditionalContent<>.init(storage:)(v62, v17, v54, v7, v55, v56);
  }
}

uint64_t sub_10009B854@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t (*v53)(char *, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t OpaqueTypeConformance2;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  unint64_t v79;
  char v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;

  v77 = a1;
  v74 = type metadata accessor for AccessibilityChildBehavior(0);
  v73 = *(_QWORD *)(v74 - 8);
  v3 = __chkstk_darwin(v74, v2);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v70 = type metadata accessor for ContentMarginPlacement(0, v3);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70, v6);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100005360(&qword_100118470);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72, v9);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100118478);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100005360(&qword_100118480);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76, v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(&unk_10010CDB0, 200, 7);
  v20 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v19 + 144) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v19 + 160) = v20;
  *(_OWORD *)(v19 + 176) = *(_OWORD *)(v1 + 160);
  *(_QWORD *)(v19 + 192) = *(_QWORD *)(v1 + 176);
  v21 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v19 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v19 + 96) = v21;
  v22 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v19 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v19 + 128) = v22;
  v23 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v19 + 32) = v23;
  v24 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v19 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v19 + 64) = v24;
  v25 = sub_1000A34DC((uint64_t *)v1);
  v26 = static Edge.Set.top.getter(v25);
  v27 = v26;
  if (qword_100113B18 != -1)
    v26 = swift_once(&qword_100113B18, sub_10001BAE0);
  v28 = EdgeInsets.init(_all:)(v26, *(double *)&qword_10011F9A0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = static Edge.Set.bottom.getter(v35);
  v37 = v36;
  if (qword_100113B20 != -1)
    v36 = swift_once(&qword_100113B20, sub_10001BAF0);
  v38 = EdgeInsets.init(_all:)(v36, *(double *)&qword_10011F9A8);
  v78 = sub_1000A4CCC;
  v79 = v19;
  v80 = v27;
  v81 = v28;
  v82 = v30;
  v83 = v32;
  v84 = v34;
  v85 = 0;
  v86 = v37;
  v87 = v38;
  v88 = v39;
  v89 = v40;
  v90 = v41;
  v91 = 0;
  v43 = static Edge.Set.horizontal.getter(v42);
  if (qword_100113B00 != -1)
    swift_once(&qword_100113B00, sub_10001BAB0);
  v44 = qword_10011F988;
  static ContentMarginPlacement.scrollContent.getter();
  v45 = sub_100005360(&qword_100118488);
  v46 = sub_10003D3C8(&qword_100118490, &qword_100118488, (void (*)(void))sub_1000A4CD4);
  View.contentMargins(_:_:for:)(v43, v44, 0, v8, v45, v46);
  (*(void (**)(char *, _QWORD))(v69 + 8))(v8, v70);
  swift_release(v79);
  if (qword_100113ED8 != -1)
    swift_once(&qword_100113ED8, sub_1000A683C);
  v47 = xmmword_10011FE80;
  v70 = *(__int128 *)((char *)&xmmword_10011FE80 + 8);
  v48 = qword_10011FE98;
  v49 = qword_10011FEA0;
  v50 = v71;
  v51 = v72;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v15, v11, v72);
  v52 = &v15[*(int *)(v12 + 36)];
  *(_QWORD *)v52 = v47;
  *(_OWORD *)(v52 + 8) = v70;
  *((_QWORD *)v52 + 3) = v48;
  *((_QWORD *)v52 + 4) = v49;
  v53 = *(uint64_t (**)(char *, uint64_t, __n128))(v50 + 8);
  v54 = swift_bridgeObjectRetain(v47);
  v55 = v53(v11, v51, v54);
  static AccessibilityChildBehavior.contain.getter(v55);
  v56 = sub_1000A4D58();
  View.accessibilityElement(children:)(v5, v12, v56);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v5, v74);
  sub_100004F48((uint64_t)v15, &qword_100118478);
  v57 = LocalizedStringKey.init(stringLiteral:)(0x79726F6765746143, 0xE800000000000000);
  v58 = Text.init(_:tableName:bundle:comment:)(v57);
  v60 = v59;
  v62 = v61;
  v64 = v63 & 1;
  v78 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v12;
  v79 = v56;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v66 = v76;
  View.accessibilityLabel(_:)(v58, v60, v64, v62, v76, OpaqueTypeConformance2);
  sub_10002DD44(v58, v60, v64);
  swift_bridgeObjectRelease(v62);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v18, v66);
}

uint64_t sub_10009BD70@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  _QWORD v36[2];
  uint64_t (*v37)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v38;

  v36[0] = a3;
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100118420);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_10010CCE8, 216, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = *(_OWORD *)(v3 + 144);
  *(_OWORD *)(v16 + 160) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v16 + 176) = v17;
  *(_OWORD *)(v16 + 192) = *(_OWORD *)(v3 + 160);
  *(_QWORD *)(v16 + 208) = *(_QWORD *)(v3 + 176);
  v18 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v16 + 112) = v18;
  v19 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v16 + 128) = *(_OWORD *)(v3 + 96);
  *(_OWORD *)(v16 + 144) = v19;
  v20 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v16 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v16 + 48) = v20;
  v21 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v16 + 80) = v21;
  v37 = sub_1000A494C;
  v38 = v16;
  v22 = a1;
  swift_bridgeObjectRetain(a2);
  v23 = sub_1000A34DC((uint64_t *)v3);
  static AccessibilityChildBehavior.contain.getter(v23);
  v24 = sub_100005360(&qword_100118428);
  v25 = sub_100008078(&qword_100118430, &qword_100118428, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
  View.accessibilityElement(children:)(v10, v24, v25);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  swift_release(v38);
  v26 = LocalizedStringKey.init(stringLiteral:)(1953066581, 0xE400000000000000);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v37 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v24;
  v38 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityLabel(_:)(v27, v29, v33, v31, v11, OpaqueTypeConformance2);
  sub_10002DD44(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_10009BFB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v27 = *(_OWORD *)(a1 + 120);
  v4 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.getter(&v29, v4);
  if (v29 != 1)
    goto LABEL_21;
  v27 = *(_OWORD *)(a1 + 120);
  State.wrappedValue.getter(&v29, v4);
  if (v29 == 1)
  {
    v27 = *(_OWORD *)(a1 + 160);
    v28 = *(_QWORD *)(a1 + 176);
    v5 = sub_100005360(&qword_100117F98);
    State.wrappedValue.getter(&v29, v5);
    v7 = v29;
    v6 = v30;
    swift_bridgeObjectRelease(v30);
    v8 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0)
      v8 = v7 & 0xFFFFFFFFFFFFLL;
    if (!v8)
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_BYTE *)(a1 + 24);
      swift_retain(v9);
      v12 = sub_1000439B4(v11, v10);
      swift_release(v9);
      v13 = sub_10004835C();
      swift_release(v12);
      v14 = *(_QWORD *)(v13 + 16);
      swift_retain(v14);
      swift_release(v13);
      KeyPath = swift_getKeyPath(&unk_1000D35B0);
      *(_QWORD *)&v27 = v14;
      v16 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v27, KeyPath, v16);
      swift_release(KeyPath);
      swift_beginAccess(v14 + 32, &v27, 0, 0);
      v17 = *(_QWORD *)(v14 + 32);
      swift_bridgeObjectRetain(v17);
      swift_release(v14);
      if ((unint64_t)v17 >> 62)
      {
        v26 = v17 < 0 ? v17 : v17 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v17);
        v18 = _CocoaArrayWrapper.endIndex.getter(v26);
        swift_bridgeObjectRelease(v17);
      }
      else
      {
        v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v17);
      if (!v18)
      {
LABEL_21:
        v19 = sub_100098E30();
        if (v19)
        {
          v21 = v19;
          v22 = v20;
          if (objc_msgSend(v19, "unitType", v27) == (id)16)
          {
            sub_10009C238(a2);
            swift_bridgeObjectRelease(v22);

            v23 = sub_100005360(&qword_1001180F8);
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 0, 1, v23);
          }
          swift_bridgeObjectRelease(v22);

        }
      }
    }
  }
  v25 = sub_100005360(&qword_1001180F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
}

uint64_t sub_10009C238@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD v80[3];

  v2 = v1;
  v78 = a1;
  v79 = type metadata accessor for ColorScheme(0);
  v77 = *(_QWORD *)(v79 - 8);
  v4 = __chkstk_darwin(v79, v3);
  v76 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Material(0, v4);
  v74 = *(_QWORD *)(v6 - 8);
  v75 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005360(&qword_100118148);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360(&qword_100118138);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005360(&qword_100118128);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100005360(&qword_100118118);
  __chkstk_darwin(v72, v22);
  v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100005360(&qword_100118108);
  v26 = __chkstk_darwin(v73, v25);
  v28 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v26);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v29 = sub_100005360(&qword_100118170);
  v30 = sub_1000A165C(v2, (uint64_t)&v13[*(int *)(v29 + 44)]);
  v31 = static Edge.Set.horizontal.getter(v30);
  v32 = v31;
  if (qword_100113B38 != -1)
    v31 = swift_once(&qword_100113B38, sub_10001BB20);
  v33 = EdgeInsets.init(_all:)(v31, *(double *)&qword_10011F9C0);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_10000531C((uint64_t)v13, (uint64_t)v17, &qword_100118148);
  v40 = &v17[*(int *)(v14 + 36)];
  *v40 = v32;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  v41 = sub_100004F48((uint64_t)v13, &qword_100118148);
  v42 = static Edge.Set.vertical.getter(v41);
  v43 = v42;
  if (qword_100113B30 != -1)
    v42 = swift_once(&qword_100113B30, sub_10001BB10);
  v44 = EdgeInsets.init(_all:)(v42, *(double *)&qword_10011F9B8);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  sub_10000531C((uint64_t)v17, (uint64_t)v21, &qword_100118138);
  v51 = &v21[*(int *)(v18 + 36)];
  *v51 = v43;
  *((double *)v51 + 1) = v44;
  *((_QWORD *)v51 + 2) = v46;
  *((_QWORD *)v51 + 3) = v48;
  *((_QWORD *)v51 + 4) = v50;
  v51[40] = 0;
  v52 = sub_100004F48((uint64_t)v17, &qword_100118138);
  if (qword_100113B28 != -1)
    v52 = swift_once(&qword_100113B28, sub_10001BB00);
  v53 = qword_10011F9B0;
  v54 = static Alignment.center.getter(v52);
  _FrameLayout.init(width:height:alignment:)(v80, 0, 1, v53, 0, v54, v55);
  sub_10000531C((uint64_t)v21, (uint64_t)v24, &qword_100118128);
  v56 = &v24[*(int *)(v72 + 36)];
  v57 = v80[1];
  *(_OWORD *)v56 = v80[0];
  *((_OWORD *)v56 + 1) = v57;
  *((_OWORD *)v56 + 2) = v80[2];
  sub_100004F48((uint64_t)v21, &qword_100118128);
  v59 = static Material.ultraThin.getter(v58);
  LOBYTE(v53) = static Edge.Set.all.getter(v59);
  v60 = v74;
  v61 = &v28[*(int *)(v73 + 36)];
  v62 = v75;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v61, v9, v75);
  v61[*(int *)(sub_100005360(&qword_100116658) + 36)] = v53;
  sub_10000531C((uint64_t)v24, (uint64_t)v28, &qword_100118118);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v62);
  sub_100004F48((uint64_t)v24, &qword_100118118);
  KeyPath = swift_getKeyPath(&unk_1000D35D8);
  v65 = v76;
  v64 = v77;
  v66 = v79;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, enum case for ColorScheme.dark(_:), v79);
  v67 = sub_100005360(&qword_1001180F8);
  v68 = v78;
  v69 = (uint64_t *)(v78 + *(int *)(v67 + 36));
  v70 = sub_100005360(&qword_100118160);
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))((char *)v69 + *(int *)(v70 + 28), v65, v66);
  *v69 = KeyPath;
  sub_10000531C((uint64_t)v28, v68, &qword_100118108);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
  return sub_100004F48((uint64_t)v28, &qword_100118108);
}

uint64_t sub_10009C724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t OpaqueTypeConformance2;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66[24];

  v61 = a2;
  v3 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v3, v4);
  v56 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100005360(&qword_100117F88);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60, v6);
  v57 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UserInterfaceSizeClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v55 - v15;
  v59 = sub_100005360(&qword_100117F78);
  __chkstk_darwin(v59, v17);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v55 - v22;
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(_BYTE *)(a1 + 40);
  swift_retain(v24);
  v27 = sub_1000436BC(v26, v25);
  swift_release(v24);
  v28 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v29 = objc_msgSend(v28, "userInterfaceIdiom");

  if (!v29)
  {
    v34 = swift_release(v27);
    goto LABEL_5;
  }
  KeyPath = swift_getKeyPath(&unk_1000D3510);
  v62 = v27;
  v31 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, KeyPath, v31);
  swift_release(KeyPath);
  v32 = v27 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess(v27 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v66, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, v32, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for UserInterfaceSizeClass.compact(_:), v8);
  LOBYTE(v32) = static UserInterfaceSizeClass.== infix(_:_:)(v16, v12);
  v33 = *(void (**)(char *, uint64_t))(v9 + 8);
  v33(v12, v8);
  v33(v16, v8);
  v34 = swift_release(v27);
  if ((v32 & 1) != 0)
  {
LABEL_5:
    v38 = v56;
    v39 = static ToolbarItemPlacement.topBarTrailing.getter(v34);
    __chkstk_darwin(v39, v40);
    *(&v55 - 2) = a1;
    v41 = sub_100005360(&qword_100117FF0);
    v42 = sub_100005608(&qword_100115CC8);
    v44 = type metadata accessor for PlainButtonStyle(255, v43);
    v45 = sub_100008078(&qword_100115CD8, &qword_100115CC8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v46 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v62 = v42;
    v63 = v44;
    v64 = v45;
    v65 = v46;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v48 = v57;
    ToolbarItem<>.init(placement:content:)(v38, sub_1000A37B4, &v55 - 4, v41, OpaqueTypeConformance2);
    v49 = sub_100008078(&qword_100117F90, &qword_100117F88, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v50 = v60;
    static ToolbarContentBuilder.buildBlock<A>(_:)(v48, v60, v49);
    v51 = sub_100005360(&qword_100117FE8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v19, 0, 1, v51);
    v62 = v50;
    v63 = v49;
    v52 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v19, v51, v52);
    sub_100004F48((uint64_t)v19, &qword_100117F78);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v50);
    goto LABEL_6;
  }
  v35 = sub_100005360(&qword_100117FE8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v19, 1, 1, v35);
  v36 = sub_100008078(&qword_100117F90, &qword_100117F88, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v62 = v60;
  v63 = v36;
  v37 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  static ToolbarContentBuilder.buildIf<A>(_:)(v19, v35, v37);
  sub_100004F48((uint64_t)v19, &qword_100117F78);
LABEL_6:
  v53 = sub_1000A341C();
  static ToolbarContentBuilder.buildBlock<A>(_:)(v23, v59, v53);
  return sub_100004F48((uint64_t)v23, &qword_100117F78);
}

uint64_t sub_10009CC20(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = type metadata accessor for PlainButtonStyle(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005360(&qword_100115CC8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_10010CBA8, 200, 7);
  v14 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v13 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v13 + 160) = v14;
  *(_OWORD *)(v13 + 176) = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(v13 + 192) = *(_QWORD *)(a1 + 176);
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v13 + 96) = v15;
  v16 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v13 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v13 + 128) = v16;
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v13 + 32) = v17;
  v18 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v13 + 64) = v18;
  sub_1000A34DC((uint64_t *)a1);
  v19 = Button.init(action:label:)(sub_1000A37C0, v13, sub_1000A1318, 0, &type metadata for Text, &protocol witness table for Text);
  PlainButtonStyle.init()(v19);
  v20 = sub_100008078(&qword_100115CD8, &qword_100115CC8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v21 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  View.buttonStyle<A>(_:)(v7, v8, v3, v20, v21);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_10009CDE4(uint64_t a1)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v2 = *(_BYTE *)(a1 + 65);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  swift_retain(v3);
  v6 = sub_1000439B4(v5, v4);
  swift_release(v3);
  v7 = sub_10004835C();
  swift_release(v6);
  if ((v2 & 1) != 0)
    v8 = sub_100047730();
  else
    v8 = sub_1000478E8();
  v9 = v8;
  swift_release(v7);
  v11 = CalculateUnit.id.getter(v10);
  v13 = v12;

  v28 = *(_OWORD *)(a1 + 96);
  v29 = *(_QWORD *)(a1 + 112);
  v26 = v11;
  v27 = v13;
  v14 = sub_100005360(&qword_100117FD8);
  State.wrappedValue.setter(&v26, v14);
  swift_retain(v3);
  v16 = sub_1000439B4(v15, v4);
  swift_release(v3);
  v17 = sub_10004835C();
  swift_release(v16);
  KeyPath = swift_getKeyPath(&unk_1000D3588);
  *(_QWORD *)&v28 = v17;
  v19 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, KeyPath, v19);
  swift_release(KeyPath);
  v20 = *(id *)(v17 + 32);
  v21 = swift_release(v17);
  v22 = CalculateUnitCategory.id.getter(v21);
  v24 = v23;

  v28 = *(_OWORD *)(a1 + 72);
  v29 = *(_QWORD *)(a1 + 88);
  v26 = v22;
  v27 = v24;
  return State.wrappedValue.setter(&v26, v14);
}

double sub_10009CF80(_QWORD *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  _QWORD v13[3];
  char v14;
  uint64_t v15;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 8);
  swift_retain(*a1);
  v4 = sub_100043890(v3, v2);
  v5 = sub_100043890(v1, v2);
  swift_release(v1);
  v6 = *(_QWORD *)(v5 + 16);
  swift_retain(v6);
  swift_release(v5);
  KeyPath = swift_getKeyPath(&unk_1000D3560);
  v15 = v6;
  v8 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v8);
  swift_release(KeyPath);
  LODWORD(v1) = *(unsigned __int8 *)(v6 + 40);
  swift_release(v6);
  if ((_DWORD)v1)
    v9 = 1;
  else
    v9 = 2;
  v10 = swift_getKeyPath(&unk_1000D3538);
  v13[2] = v4;
  v14 = v9;
  v15 = v4;
  v11 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, v10, sub_100061D5C, v13, (char *)&type metadata for () + 8, v11);
  swift_release(v4);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

double sub_10009D0DC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)();
  double result;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  uint64_t v15;

  v1 = a1;
  v14 = *(_OWORD *)(a1 + 15);
  v2 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.getter(&v15, v2);
  v3 = v15;
  v4 = *v1;
  LOBYTE(v1) = *((_BYTE *)v1 + 8);
  swift_retain(v4);
  v6 = sub_100043890(v5, (char)v1);
  swift_release(v4);
  KeyPath = swift_getKeyPath(&unk_1000D3538);
  v12[2] = v6;
  if (v3 == 1)
  {
    v13 = 3;
    *(_QWORD *)&v14 = v6;
    v8 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v9 = (char *)&type metadata for () + 8;
    v10 = sub_100061D5C;
  }
  else
  {
    v13 = 6;
    *(_QWORD *)&v14 = v6;
    v8 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v9 = (char *)&type metadata for () + 8;
    v10 = sub_10006127C;
  }
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, v10, v12, v9, v8);
  swift_release(v6);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10009D22C@<X0>(uint64_t a1@<X8>)
{
  return sub_100098F50(a1);
}

uint64_t sub_10009D28C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (**v50)();
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[16];
  uint64_t v65;

  v58 = a1;
  v63 = a3;
  v62 = type metadata accessor for ScrollViewProxy(0);
  v4 = *(_QWORD *)(v62 - 8);
  v6 = __chkstk_darwin(v62, v5);
  v57 = v7;
  v59 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ScrollIndicatorVisibility(0, v6);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_1001184D0);
  v53 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_1001184D8);
  v60 = *(_QWORD *)(v16 - 8);
  v61 = v16;
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100005360(&qword_1001184E0);
  __chkstk_darwin(v56, v20);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = static Axis.Set.horizontal.getter(v23);
  v65 = a2;
  v25 = sub_100005360(&qword_1001184E8);
  v26 = sub_1000A4E34();
  v27 = ScrollView.init(_:showsIndicators:content:)(v24, 1, sub_1000A4E2C, v64, v25, v26);
  v28.n128_f64[0] = static ScrollIndicatorVisibility.hidden.getter(v27);
  v29 = static Axis.Set.vertical.getter(v28);
  v30 = v29;
  v31 = static Axis.Set.horizontal.getter(v29);
  v32 = Axis.Set.init(rawValue:)(0);
  v33 = Axis.Set.init(rawValue:)(v32);
  if (Axis.Set.init(rawValue:)(v33 & v30) != v30)
    v32 = Axis.Set.init(rawValue:)(v32 | v30);
  v34 = Axis.Set.init(rawValue:)(v32);
  if (Axis.Set.init(rawValue:)(v34 & v31) != v31)
    v32 = Axis.Set.init(rawValue:)(v32 | v31);
  v35 = sub_100008078(&qword_100118508, &qword_1001184D0, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  View.scrollIndicators(_:axes:)(v11, v32, v12, v35);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v55);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v12);
  v36 = v59;
  v37 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v59, v58, v62);
  v38 = *(unsigned __int8 *)(v4 + 80);
  v39 = (v38 + 16) & ~v38;
  v40 = (v57 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = swift_allocObject(&unk_10010CDD8, v40 + 184, v38 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v41 + v39, v36, v37);
  v42 = v41 + v40;
  v43 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v42 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v42 + 144) = v43;
  *(_OWORD *)(v42 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(v42 + 176) = *(_QWORD *)(a2 + 176);
  v44 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v42 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v42 + 80) = v44;
  v45 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v42 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v42 + 112) = v45;
  v46 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v42 = *(_OWORD *)a2;
  *(_OWORD *)(v42 + 16) = v46;
  v47 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v42 + 48) = v47;
  v49 = v60;
  v48 = v61;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v22, v19, v61);
  v50 = (uint64_t (**)())&v22[*(int *)(v56 + 36)];
  *v50 = sub_1000A4F90;
  v50[1] = (uint64_t (*)())v41;
  v50[2] = 0;
  v50[3] = 0;
  sub_1000A34DC((uint64_t *)a2);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v19, v48);
  return sub_100007CD8((uint64_t)v22, v63, &qword_1001184E0);
}

uint64_t sub_10009D610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  _BYTE v25[16];
  uint64_t v26;
  _OWORD v27[3];

  v4 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v4, v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100005360(&qword_100118500);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = a1;
  v14 = static VerticalAlignment.center.getter(v11);
  LODWORD(v27[0]) = 0;
  v15 = sub_100005178(&qword_100118340, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(v27, v4, v15);
  v16 = sub_100005360(&qword_100118510);
  v17 = sub_1000A4FD8();
  v18 = LazyHStack.init(alignment:spacing:pinnedViews:content:)(v14, 0, 0, v7, sub_1000A4FD0, v25, v16, v17);
  if (qword_100113B10 != -1)
    v18 = swift_once(&qword_100113B10, sub_10001BAD0);
  v19 = qword_10011F998;
  v20 = static Alignment.center.getter(v18);
  _FrameLayout.init(width:height:alignment:)(v27, 0, 1, v19, 0, v20, v21);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 16))(a2, v13, v8);
  v22 = (_OWORD *)(a2 + *(int *)(sub_100005360(&qword_1001184E8) + 36));
  v23 = v27[1];
  *v22 = v27[0];
  v22[1] = v23;
  v22[2] = v27[2];
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v13, v8);
}

uint64_t sub_10009D7F0(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  swift_retain(v2);
  v5 = sub_1000439B4(v4, v3);
  swift_release(v2);
  v6 = sub_10004835C();
  swift_release(v5);
  v7 = *(_QWORD *)(v6 + 16);
  swift_retain(v7);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000D3790);
  v26 = v7;
  v9 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(id *)(v7 + 16);
  v11 = objc_msgSend(v10, "categories", swift_release(v7).n128_f64[0]);

  v12 = sub_10000A5A8(0, (unint64_t *)&qword_100117318, CalculateUnitCategory_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  v26 = v13;
  v14 = swift_allocObject(&unk_10010CE00, 200, 7);
  v15 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v14 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v14 + 160) = v15;
  *(_OWORD *)(v14 + 176) = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(v14 + 192) = *(_QWORD *)(a1 + 176);
  v16 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v14 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v14 + 96) = v16;
  v17 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v14 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v14 + 128) = v17;
  v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 32) = v18;
  v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v14 + 64) = v19;
  sub_1000A34DC((uint64_t *)a1);
  v20 = sub_100005360(&qword_100118530);
  v21 = sub_100005360(&qword_100118528);
  v22 = sub_100008078(&qword_100118538, &qword_100118530, (uint64_t)&protocol conformance descriptor for [A]);
  v23 = sub_100008078(&qword_100118520, &qword_100118528, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v24 = sub_1000A4284(&qword_100118540, (unint64_t *)&qword_100117318, CalculateUnitCategory_ptr, (uint64_t)&protocol conformance descriptor for CalculateUnitCategory);
  return ForEach<>.init(_:content:)(&v26, sub_1000A50E4, v14, v20, &type metadata for String, v21, v22, v23, v24);
}

uint64_t sub_10009DA44@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  id v24;
  __n128 v25;
  uint64_t result;
  uint64_t v27;
  _QWORD v28[2];

  v5 = *a1;
  v6 = objc_msgSend(*a1, "displayName");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = sub_100005360(&qword_100117FD8);
  State.wrappedValue.getter(v28, v10);
  v11 = v28[0];
  v12 = v28[1];
  v14 = CalculateUnitCategory.id.getter(v13);
  v16 = v15;
  if (v12)
  {
    if (v11 == v14 && v12 == v15)
      v17 = 1;
    else
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v14, v15, 0);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v17 = 0;
  }
  swift_bridgeObjectRelease(v16);
  v18 = swift_allocObject(&unk_10010CE28, 208, 7);
  v19 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v18 + 152) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v18 + 168) = v19;
  *(_OWORD *)(v18 + 184) = *(_OWORD *)(a2 + 160);
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v18 + 88) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v18 + 104) = v20;
  v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v18 + 120) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v18 + 136) = v21;
  v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v18 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v18 + 40) = v22;
  v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v18 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v18 + 16) = v5;
  *(_QWORD *)(v18 + 200) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(v18 + 72) = v23;
  v24 = v5;
  sub_1000A34DC((uint64_t *)a2);
  result = CalculateUnitCategory.id.getter(v25);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v17 & 1;
  *(_QWORD *)(a3 + 24) = sub_1000A5178;
  *(_QWORD *)(a3 + 32) = v18;
  *(_QWORD *)(a3 + 40) = result;
  *(_QWORD *)(a3 + 48) = v27;
  return result;
}

uint64_t sub_10009DBD4(__n128 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t result;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = CalculateUnitCategory.id.getter(a1);
  v6 = v5;
  v16 = *(_OWORD *)(a3 + 72);
  v17 = *(_QWORD *)(a3 + 88);
  v7 = sub_100005360(&qword_100117FD8);
  State.wrappedValue.getter(&v14, v7);
  v8 = v15;
  if (!v15)
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_9;
  }
  if (v4 == v14 && v15 == v6)
  {
    swift_bridgeObjectRelease(v6);
    return swift_bridgeObjectRelease(v8);
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v14, v15, 0);
  swift_bridgeObjectRelease(v6);
  result = swift_bridgeObjectRelease(v8);
  if ((v10 & 1) == 0)
  {
LABEL_9:
    v14 = CalculateUnitCategory.id.getter(v12);
    v15 = v13;
    return State.wrappedValue.setter(&v14, v7);
  }
  return result;
}

uint64_t sub_10009DCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  v11 = *(_OWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 88);
  v2 = sub_100005360(&qword_100117FD8);
  v3 = State.wrappedValue.getter(&v13, v2);
  v4 = *((_QWORD *)&v13 + 1);
  v11 = v13;
  v5 = static UnitPoint.center.getter(v3);
  v7 = v6;
  v8 = sub_100005360(&qword_100114308);
  v9 = sub_10004E5D0(&qword_100118468, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  ScrollViewProxy.scrollTo<A>(_:anchor:)(&v11, *(_QWORD *)&v5, v7, 0, v8, v9);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10009DDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;

  v65 = a2;
  v4 = type metadata accessor for PlainButtonStyle(0, a3);
  v5 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  v64 = v5;
  __chkstk_darwin(v4, v6);
  v58 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100005360(&qword_100115CC8);
  v62 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60, v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100117FF0);
  v61 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15, v16);
  v59 = (char *)&v57 - v18;
  v19 = type metadata accessor for AccessibilityTraits(0, v17);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100005360(&qword_100118178);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  v31 = (char *)&v57 - v30;
  v32 = LocalizedStringKey.init(stringLiteral:)(0x5520746E65636552, 0xEC0000007374696ELL);
  v66 = Text.init(_:tableName:bundle:comment:)(v32);
  v67 = v33;
  v68 = v34 & 1;
  v69 = v35;
  static AccessibilityTraits.isHeader.getter();
  View.accessibilityAddTraits(_:)(v23, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  sub_10002DD44(v66, v67, v68);
  swift_bridgeObjectRelease(v69);
  sub_100007CD8((uint64_t)v27, (uint64_t)v31, &qword_100118178);
  v36 = swift_allocObject(&unk_10010CC70, 200, 7);
  v37 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v36 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v36 + 160) = v37;
  *(_OWORD *)(v36 + 176) = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(v36 + 192) = *(_QWORD *)(a1 + 176);
  v38 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v36 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v36 + 96) = v38;
  v39 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v36 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v36 + 128) = v39;
  v40 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v36 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v36 + 32) = v40;
  v41 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v36 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v36 + 64) = v41;
  sub_1000A34DC((uint64_t *)a1);
  v42 = Button.init(action:label:)(sub_1000A444C, v36, sub_1000A1304, 0, &type metadata for Text, &protocol witness table for Text);
  v43 = v58;
  PlainButtonStyle.init()(v42);
  v44 = sub_100008078(&qword_100115CD8, &qword_100115CC8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v45 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v46 = v60;
  v47 = v63;
  View.buttonStyle<A>(_:)(v43, v60, v63, v44, v45);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v47);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v10, v46);
  v48 = v61;
  v49 = v59;
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v59, v14, v11);
  sub_10000531C((uint64_t)v31, (uint64_t)v27, &qword_100118178);
  v50 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v51 = v48;
  v50(v14, v49, v11);
  v52 = v65;
  sub_10000531C((uint64_t)v27, v65, &qword_100118178);
  v53 = sub_100005360(&qword_100118320);
  v54 = v52 + *(int *)(v53 + 48);
  *(_QWORD *)v54 = 0;
  *(_BYTE *)(v54 + 8) = 1;
  v50((char *)(v52 + *(int *)(v53 + 64)), v14, v11);
  v55 = *(void (**)(char *, uint64_t))(v51 + 8);
  v55(v49, v11);
  sub_100004F48((uint64_t)v31, &qword_100118178);
  v55(v14, v11);
  return sub_100004F48((uint64_t)v27, &qword_100118178);
}

uint64_t sub_10009E1FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  double (**v56)();
  id v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87[16];
  __int128 *v88;
  uint64_t (*v89)@<X0>(void **@<X0>, uint64_t@<X8>);
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;

  v82 = a2;
  v83 = a5;
  v85 = a1;
  v84 = type metadata accessor for ScrollViewProxy(0);
  v80 = *(_QWORD *)(v84 - 8);
  v7 = *(_QWORD *)(v80 + 64);
  __chkstk_darwin(v84, v8);
  v79 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100118260);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100005360(&qword_100118438);
  __chkstk_darwin(v77, v14);
  v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100005360(&qword_100118440);
  __chkstk_darwin(v86, v17);
  v81 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(&unk_10010CD10, 200, 7);
  v20 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v19 + 144) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v19 + 160) = v20;
  *(_OWORD *)(v19 + 176) = *(_OWORD *)(a4 + 160);
  *(_QWORD *)(v19 + 192) = *(_QWORD *)(a4 + 176);
  v21 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v19 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v19 + 96) = v21;
  v22 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v19 + 112) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v19 + 128) = v22;
  v23 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v19 + 32) = v23;
  v24 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v19 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v19 + 64) = v24;
  v78 = a3;
  *(_QWORD *)&v91 = a3;
  v88 = &v91;
  v89 = sub_1000A495C;
  v90 = v19;
  swift_bridgeObjectRetain(a3);
  sub_1000A34DC((uint64_t *)a4);
  v25 = sub_100005360(&qword_100118280);
  v26 = sub_100066FB8(&qword_100118288, &qword_100118280, (void (*)(void))sub_1000A40C0, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  List<>.init(content:)(sub_1000A5234, v87, v25, v26);
  swift_release(v19);
  v27 = swift_bridgeObjectRelease(v91);
  v28 = static HorizontalAlignment.listRowSeparatorTrailing.getter(v27);
  v29 = swift_allocObject(&unk_10010CD38, 200, 7);
  v30 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v29 + 144) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v29 + 160) = v30;
  *(_OWORD *)(v29 + 176) = *(_OWORD *)(a4 + 160);
  *(_QWORD *)(v29 + 192) = *(_QWORD *)(a4 + 176);
  v31 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v29 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v29 + 96) = v31;
  v32 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v29 + 112) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v29 + 128) = v32;
  v33 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v29 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v29 + 32) = v33;
  v34 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v29 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v29 + 64) = v34;
  v35 = (uint64_t)v16;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v13, v9);
  v36 = (uint64_t *)&v16[*(int *)(v77 + 36)];
  *v36 = v28;
  v36[1] = (uint64_t)sub_1000A498C;
  v36[2] = v29;
  sub_1000A34DC((uint64_t *)a4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v37 = v80;
  v77 = *(_QWORD *)(v80 + 16);
  v38 = v79;
  v39 = v84;
  ((void (*)(char *, uint64_t, uint64_t))v77)(v79, v85, v84);
  v40 = *(unsigned __int8 *)(v37 + 80);
  v41 = (v40 + 16) & ~v40;
  v75 = v40 | 7;
  v76 = v7 + 7;
  v42 = (v7 + 7 + v41) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v42 + 191) & 0xFFFFFFFFFFFFFFF8;
  v44 = swift_allocObject(&unk_10010CD60, v43 + 16, v40 | 7);
  v80 = *(_QWORD *)(v37 + 32);
  v45 = v38;
  ((void (*)(uint64_t, char *, uint64_t))v80)(v44 + v41, v38, v39);
  v46 = v44 + v42;
  v47 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v46 + 128) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v46 + 144) = v47;
  *(_OWORD *)(v46 + 160) = *(_OWORD *)(a4 + 160);
  *(_QWORD *)(v46 + 176) = *(_QWORD *)(a4 + 176);
  v48 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v46 + 64) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v46 + 80) = v48;
  v49 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v46 + 96) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v46 + 112) = v49;
  v50 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v46 = *(_OWORD *)a4;
  *(_OWORD *)(v46 + 16) = v50;
  v51 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v46 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v46 + 48) = v51;
  v52 = (_QWORD *)(v44 + v43);
  v54 = (uint64_t)v81;
  v53 = v82;
  v55 = v78;
  *v52 = v82;
  v52[1] = v55;
  sub_10000531C(v35, v54, &qword_100118438);
  v56 = (double (**)())(v54 + *(int *)(v86 + 36));
  *v56 = sub_1000A4A90;
  v56[1] = (double (*)())v44;
  v56[2] = 0;
  v56[3] = 0;
  swift_bridgeObjectRetain(v55);
  sub_1000A34DC((uint64_t *)a4);
  v57 = v53;
  sub_100004F48(v35, &qword_100118438);
  v91 = *(_OWORD *)(a4 + 72);
  v92 = *(_QWORD *)(a4 + 88);
  v58 = sub_100005360(&qword_100117FD8);
  State.wrappedValue.getter(&v93, v58);
  v91 = v93;
  v59 = v45;
  v60 = v84;
  ((void (*)(char *, uint64_t, uint64_t))v77)(v45, v85, v84);
  v61 = (v40 + 200) & ~v40;
  v62 = (v76 + v61) & 0xFFFFFFFFFFFFFFF8;
  v63 = swift_allocObject(&unk_10010CD88, v62 + 16, v75);
  v64 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v63 + 144) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v63 + 160) = v64;
  *(_OWORD *)(v63 + 176) = *(_OWORD *)(a4 + 160);
  *(_QWORD *)(v63 + 192) = *(_QWORD *)(a4 + 176);
  v65 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v63 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v63 + 96) = v65;
  v66 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v63 + 112) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v63 + 128) = v66;
  v67 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v63 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v63 + 32) = v67;
  v68 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v63 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v63 + 64) = v68;
  ((void (*)(uint64_t, char *, uint64_t))v80)(v63 + v61, v59, v60);
  v69 = (_QWORD *)(v63 + v62);
  *v69 = v57;
  v69[1] = v55;
  swift_bridgeObjectRetain(v55);
  sub_1000A34DC((uint64_t *)a4);
  v70 = v57;
  v71 = sub_100005360(&qword_100114308);
  v72 = sub_10003D3C8(&qword_100118448, &qword_100118440, (void (*)(void))sub_1000A4C24);
  v73 = sub_10004E5D0(&qword_100118460, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  View.onChange<A>(of:initial:_:)(&v91, 0, sub_1000A4BDC, v63, v86, v71, v72, v73);
  swift_release(v63);
  swift_bridgeObjectRelease(*((_QWORD *)&v91 + 1));
  return sub_100004F48(v54, &qword_100118440);
}

uint64_t sub_10009E78C@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  char v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  double *v84;
  _BYTE v86[4];
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  _OWORD v105[8];
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v4 = v3;
  v104 = a3;
  v7 = sub_100005360(&qword_1001182E0);
  v99 = *(_QWORD *)(v7 - 8);
  v100 = v7;
  __chkstk_darwin(v7, v8);
  v10 = &v86[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v98 = sub_100005360(&qword_1001182A8);
  __chkstk_darwin(v98, v11);
  v13 = &v86[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v101 = sub_100005360(&qword_100118298);
  *(_QWORD *)&v15 = __chkstk_darwin(v101, v14).n128_u64[0];
  v102 = &v86[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = objc_msgSend(a1, "displayName", v15);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v96 = v19;
  v97 = v18;

  v20 = objc_msgSend(a1, "shortName");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v94 = v22;
  v95 = v21;

  if ((a2 & 1) != 0)
  {
    v87 = 0;
  }
  else
  {
    v107 = *(_OWORD *)(v4 + 96);
    *(_QWORD *)&v108 = *(_QWORD *)(v4 + 112);
    v23 = sub_100005360(&qword_100117FD8);
    v24 = State.wrappedValue.getter(v105, v23);
    v25 = v105[0];
    v26 = CalculateUnit.id.getter(v24);
    v28 = v27;
    if (*((_QWORD *)&v25 + 1))
    {
      if (v25 == __PAIR128__(v27, v26))
        v87 = 1;
      else
        v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, *((_QWORD *)&v25 + 1), v26, v27, 0);
      swift_bridgeObjectRelease(*((_QWORD *)&v25 + 1));
    }
    else
    {
      v87 = 0;
    }
    swift_bridgeObjectRelease(v28);
  }
  v29 = swift_allocObject(&unk_10010CC20, 208, 7);
  v30 = *(_OWORD *)(v4 + 144);
  *(_OWORD *)(v29 + 144) = *(_OWORD *)(v4 + 128);
  *(_OWORD *)(v29 + 160) = v30;
  *(_OWORD *)(v29 + 176) = *(_OWORD *)(v4 + 160);
  v31 = *(_QWORD *)(v4 + 176);
  v32 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(v29 + 80) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(v29 + 96) = v32;
  v33 = *(_OWORD *)(v4 + 112);
  *(_OWORD *)(v29 + 112) = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(v29 + 128) = v33;
  v34 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v29 + 16) = *(_OWORD *)v4;
  *(_OWORD *)(v29 + 32) = v34;
  v35 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(v29 + 48) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(v29 + 64) = v35;
  *(_QWORD *)(v29 + 192) = v31;
  *(_QWORD *)(v29 + 200) = a1;
  sub_1000A34DC((uint64_t *)v4);
  v36 = a1;
  v93 = static Font.body.getter();
  v92 = static Font.footnote.getter(v93);
  if (qword_100113D28 != -1)
    swift_once(&qword_100113D28, sub_1000530D4);
  v37 = qword_100113D30;
  v91 = qword_10011FCD0;
  swift_retain(qword_10011FCD0);
  if (v37 != -1)
    swift_once(&qword_100113D30, sub_1000530F0);
  v38 = v10;
  v103 = v13;
  v39 = qword_100113D38;
  v90 = qword_10011FCD8;
  swift_retain(qword_10011FCD8);
  if (v39 != -1)
    swift_once(&qword_100113D38, sub_100053114);
  v40 = qword_10011FCE0;
  swift_retain(qword_10011FCE0);
  v42 = CalculateUnit.id.getter(v41);
  v88 = v43;
  v89 = v42;
  v44 = CalculateUnit.id.getter(v42);
  v46 = v45;
  v47 = *(_BYTE *)(v4 + 65);
  v48 = *(_QWORD *)(v4 + 16);
  v49 = *(_BYTE *)(v4 + 24);
  swift_retain(v48);
  v51 = sub_1000439B4(v50, v49);
  swift_release(v48);
  v52 = sub_10004835C();
  swift_release(v51);
  if ((v47 & 1) != 0)
    v53 = sub_1000478E8();
  else
    v53 = sub_100047730();
  v54 = v53;
  swift_release(v52);
  v56 = CalculateUnit.id.getter(v55);
  v58 = v57;

  v59 = v38;
  if (v44 == v56 && v46 == v58)
  {
    v60 = 1;
    v58 = v46;
  }
  else
  {
    v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v56, v58, 0);
  }
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v58);
  KeyPath = swift_getKeyPath(&unk_1000D3718);
  v62 = swift_allocObject(&unk_10010CC48, 17, 7);
  *(_BYTE *)(v62 + 16) = v60 & 1;
  *(_QWORD *)&v107 = v97;
  *((_QWORD *)&v107 + 1) = v96;
  *(_QWORD *)&v108 = v95;
  *((_QWORD *)&v108 + 1) = v94;
  LOWORD(v109) = v87 & 1;
  *((_QWORD *)&v109 + 1) = sub_1000A4350;
  *(_QWORD *)&v110 = v29;
  *((_QWORD *)&v110 + 1) = v93;
  *(_QWORD *)&v111 = v92;
  *((_QWORD *)&v111 + 1) = v91;
  *(_QWORD *)&v112 = v90;
  *((_QWORD *)&v112 + 1) = v40;
  *(_QWORD *)&v113 = v89;
  *((_QWORD *)&v113 + 1) = v88;
  *(_QWORD *)&v114 = KeyPath;
  *((_QWORD *)&v114 + 1) = sub_100075A5C;
  v115 = v62;
  v105[6] = v113;
  v105[7] = v114;
  v106 = v62;
  v105[2] = v109;
  v105[3] = v110;
  v105[4] = v111;
  v105[5] = v112;
  v105[0] = v107;
  v105[1] = v108;
  if (qword_100113DF8 != -1)
    swift_once(&qword_100113DF8, sub_10005352C);
  v63 = qword_10011FDA0;
  v64 = static VerticalEdge.Set.all.getter();
  v65 = sub_100005360(&qword_1001182B0);
  v66 = sub_1000A4190();
  View.listRowSeparatorTint(_:edges:)(v63, v64, v65, v66);
  sub_1000A4374(&v107);
  if (qword_100113E08 != -1)
    swift_once(&qword_100113E08, sub_1000535A8);
  v67 = qword_10011FDB0;
  *(_QWORD *)&v105[0] = qword_10011FDB0;
  swift_retain_n(qword_10011FDB0, 2);
  v68 = AnyView.init<A>(_:)(v105, &type metadata for Color, &protocol witness table for Color);
  v70 = v99;
  v69 = v100;
  v71 = (uint64_t)v103;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 16))(v103, v59, v100);
  v72 = swift_release(v67);
  *(_QWORD *)(v71 + *(int *)(v98 + 36)) = v68;
  v73 = (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v70 + 8))(v59, v69, v72);
  v74 = static Edge.Set.leading.getter(v73);
  v75 = v74;
  if (qword_100113AC8 != -1)
    v74 = swift_once(&qword_100113AC8, sub_10001BA44);
  v76 = EdgeInsets.init(_all:)(v74, *(double *)&qword_10011F950);
  v78 = v77;
  v80 = v79;
  v82 = v81;
  v83 = v102;
  sub_10000531C(v71, (uint64_t)v102, &qword_1001182A8);
  v84 = (double *)&v83[*(int *)(v101 + 36)];
  *(_BYTE *)v84 = v75;
  v84[1] = v76;
  *((_QWORD *)v84 + 2) = v78;
  *((_QWORD *)v84 + 3) = v80;
  *((_QWORD *)v84 + 4) = v82;
  *((_BYTE *)v84 + 40) = 0;
  sub_100004F48(v71, &qword_1001182A8);
  return sub_100007CD8((uint64_t)v83, v104, &qword_100118298);
}

double sub_10009EDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  v3 = static HorizontalAlignment.trailing.getter();
  v4 = ViewDimensions.subscript.getter(v3);
  v5 = *(_QWORD *)(a2 + 32);
  LOBYTE(a2) = *(_BYTE *)(a2 + 40);
  swift_retain(v5);
  v7 = sub_1000436BC(v6, a2);
  swift_release(v5);
  v8 = sub_1000A6214(v7);
  swift_release(v7);
  return v4 - v8;
}

double sub_10009EE54(uint64_t a1, uint64_t a2, void *a3)
{
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v5 = *(_BYTE *)(a2 + 65);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  swift_retain(v6);
  v9 = sub_1000439B4(v8, v7);
  swift_release(v6);
  v10 = sub_10004835C();
  swift_release(v9);
  if ((v5 & 1) != 0)
    v11 = sub_100047730();
  else
    v11 = sub_1000478E8();
  v12 = v11;
  swift_release(v10);
  v14 = CalculateUnit.id.getter(v13);
  v16 = v15;

  v31[0] = v14;
  v31[1] = v16;
  v19 = static UnitPoint.top.getter(v17, v18);
  v21 = v20;
  v22 = sub_100005360(&qword_100114308);
  v23 = sub_10004E5D0(&qword_100118468, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  ScrollViewProxy.scrollTo<A>(_:anchor:)(v31, *(_QWORD *)&v19, v21, 0, v22, v23);
  swift_bridgeObjectRelease(v16);
  if (objc_msgSend(a3, "unitType") == (id)16)
  {
    v25 = *(_QWORD *)(a2 + 16);
    v26 = *(_BYTE *)(a2 + 24);
    swift_retain(v25);
    v28 = sub_1000439B4(v27, v26);
    swift_release(v25);
    v29 = sub_10004835C();
    swift_release(v28);
    v30 = *(_QWORD *)(v29 + 24);
    swift_retain(v30);
    swift_release(v29);
    sub_100017EF4();
    *(_QWORD *)&result = swift_release(v30).n128_u64[0];
  }
  return result;
}

void sub_10009EFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[6];
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v62 = *(_OWORD *)(a1 + 72);
  v63 = *(_QWORD *)(a1 + 88);
  v58 = *(_OWORD *)(a1 + 72);
  v59 = *(_QWORD *)(a1 + 88);
  v7 = sub_100005360(&qword_100117FD8);
  State.wrappedValue.getter(&v60, v7);
  v8 = v61;
  if (!v61)
    goto LABEL_11;
  if (v60 == 0x79636E6572727543 && v61 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(v61);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, 0x79636E6572727543, 0xE800000000000000, 0);
    swift_bridgeObjectRelease(v8);
    if ((v10 & 1) == 0)
      goto LABEL_11;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  swift_retain(v11);
  v14 = sub_1000439B4(v13, v12);
  swift_release(v11);
  v15 = sub_10004835C();
  swift_release(v14);
  v16 = *(_QWORD *)(v15 + 24);
  swift_retain(v16);
  swift_release(v15);
  KeyPath = swift_getKeyPath(&unk_1000D3768);
  *(_QWORD *)&v58 = v16;
  v18 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v58, KeyPath, v18);
  swift_release(KeyPath);
  LOBYTE(v14) = *(_BYTE *)(v16 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded);
  swift_release(v16);
  if ((v14 & 1) == 0)
  {
    swift_retain(v11);
    v20 = sub_1000439B4(v19, v12);
    swift_release(v11);
    v21 = sub_10004835C();
    swift_release(v20);
    v22 = *(_QWORD *)(v21 + 24);
    swift_retain(v22);
    swift_release(v21);
    sub_100017D3C();
    swift_release(v22);
  }
LABEL_11:
  v23 = *(_BYTE *)(a1 + 65);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_BYTE *)(a1 + 24);
  swift_retain(v24);
  v27 = sub_1000439B4(v26, v25);
  swift_release(v24);
  v28 = sub_10004835C();
  swift_release(v27);
  if ((v23 & 1) != 0)
    v29 = sub_100047730();
  else
    v29 = sub_1000478E8();
  v30 = v29;
  v31 = objc_msgSend(v29, "category", swift_release(v28).n128_f64[0]);

  if (v31)
  {
    v33 = CalculateUnitCategory.id.getter(v32);
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0;
  }
  v58 = v62;
  v59 = v63;
  v36 = State.wrappedValue.getter(&v60, v7);
  v38 = v61;
  if (!v35)
  {
    if (!v61)
      goto LABEL_32;
    v35 = v61;
    goto LABEL_24;
  }
  if (!v61)
  {
LABEL_24:
    swift_bridgeObjectRelease(v35);
    goto LABEL_25;
  }
  if (v33 == v60 && v35 == v61)
  {
    swift_bridgeObjectRelease(v35);
    v36 = (_QWORD *)swift_bridgeObjectRelease(v38);
LABEL_32:
    __chkstk_darwin(v36, v37);
    v57[2] = a2;
    v57[3] = a1;
    v50 = static Animation.default.getter(v49);
    withAnimation<A>(_:_:)(v50, sub_1000A4CA8, v57, (char *)&type metadata for () + 8);
    swift_release(v50);
    return;
  }
  v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v60, v61, 0);
  swift_bridgeObjectRelease(v35);
  v36 = (_QWORD *)swift_bridgeObjectRelease(v38);
  if ((v48 & 1) != 0)
    goto LABEL_32;
LABEL_25:
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0)
      v51 = a4;
    else
      v51 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    if (_CocoaArrayWrapper.endIndex.getter(v51))
      goto LABEL_27;
LABEL_37:
    v46 = swift_bridgeObjectRelease(a4);
    v43 = 0;
    v45 = 0;
    goto LABEL_38;
  }
  v39 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a4);
  if (!v39)
    goto LABEL_37;
LABEL_27:
  if ((a4 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a4);
  }
  else
  {
    if (!*(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v40 = *(id *)(a4 + 32);
  }
  v41 = v40;
  v42 = swift_bridgeObjectRelease(a4);
  v43 = CalculateUnit.id.getter(v42);
  v45 = v44;

LABEL_38:
  *(_QWORD *)&v58 = v43;
  *((_QWORD *)&v58 + 1) = v45;
  v52 = static UnitPoint.top.getter(v46, v47);
  v54 = v53;
  v55 = sub_100005360(&qword_100114308);
  v56 = sub_10004E5D0(&qword_100118468, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  ScrollViewProxy.scrollTo<A>(_:anchor:)(&v58, *(_QWORD *)&v52, v54, 0, v55, v56);
  swift_bridgeObjectRelease(v45);
}

uint64_t sub_10009F45C(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v2 = *(_BYTE *)(a2 + 65);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  swift_retain(v3);
  v6 = sub_1000439B4(v5, v4);
  swift_release(v3);
  v7 = sub_10004835C();
  swift_release(v6);
  if ((v2 & 1) != 0)
    v8 = sub_100047730();
  else
    v8 = sub_1000478E8();
  v9 = v8;
  swift_release(v7);
  v11 = CalculateUnit.id.getter(v10);
  v13 = v12;

  v22[0] = v11;
  v22[1] = v13;
  v16 = static UnitPoint.top.getter(v14, v15);
  v18 = v17;
  v19 = sub_100005360(&qword_100114308);
  v20 = sub_10004E5D0(&qword_100118468, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  ScrollViewProxy.scrollTo<A>(_:anchor:)(v22, *(_QWORD *)&v16, v18, 0, v19, v20);
  return swift_bridgeObjectRelease(v13);
}

double sub_10009F568@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double result;
  _OWORD v16[10];
  uint64_t v17;
  _OWORD v18[11];
  char v19;
  _QWORD v20[2];
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[31];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _OWORD __src[21];

  v3 = v2;
  if (qword_100113AE8 != -1)
    swift_once(&qword_100113AE8, sub_10001BA80);
  v5 = qword_10011F970;
  v6 = static HorizontalAlignment.center.getter(a2);
  sub_1000A0850(v3, (uint64_t)v16);
  *(_OWORD *)((char *)&v18[7] + 7) = v16[7];
  *(_OWORD *)((char *)&v18[8] + 7) = v16[8];
  *(_OWORD *)((char *)&v18[9] + 7) = v16[9];
  *(_OWORD *)((char *)&v18[3] + 7) = v16[3];
  *(_OWORD *)((char *)&v18[4] + 7) = v16[4];
  *(_OWORD *)((char *)&v18[5] + 7) = v16[5];
  *(_OWORD *)((char *)&v18[6] + 7) = v16[6];
  *(_OWORD *)((char *)v18 + 7) = v16[0];
  *(_OWORD *)((char *)&v18[1] + 7) = v16[1];
  v19 = 0;
  *(_QWORD *)((char *)&v18[10] + 7) = v17;
  *(_OWORD *)((char *)&v18[2] + 7) = v16[2];
  if (qword_100113D80 != -1)
    swift_once(&qword_100113D80, sub_100053224);
  v7 = qword_10011FD28;
  KeyPath = swift_getKeyPath(&unk_1000D3658);
  v9 = swift_getKeyPath(&unk_1000D36B8);
  v29 = v18[7];
  v30 = v18[8];
  *(_OWORD *)v31 = v18[9];
  *(_OWORD *)&v31[15] = *(_OWORD *)((char *)&v18[9] + 15);
  v25 = v18[3];
  v26 = v18[4];
  v27 = v18[5];
  v28 = v18[6];
  v22 = v18[0];
  v20[0] = v6;
  v20[1] = v5;
  v21 = 0;
  v23 = v18[1];
  v24 = v18[2];
  v32 = KeyPath;
  v33 = v7;
  v34 = v9;
  v35 = 1;
  swift_retain(v7);
  v11 = static Alignment.center.getter(v10);
  sub_1000362A0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, __src, 0.0, 1, INFINITY, 0, v11, v12);
  v13 = sub_1000A445C((uint64_t)v20);
  v14 = static Edge.Set.all.getter(v13);
  memcpy((void *)a1, __src, 0x150uLL);
  *(_BYTE *)(a1 + 336) = v14;
  result = 0.0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_BYTE *)(a1 + 376) = 1;
  return result;
}

uint64_t sub_10009F7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = type metadata accessor for PinnedScrollableViews(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = a1;
  v16 = a2;
  v9 = static HorizontalAlignment.center.getter(v6);
  v17 = 0;
  v10 = sub_100005178(&qword_100118340, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(&v17, v4, v10);
  v11 = sub_100005360(&qword_100118348);
  v12 = sub_1000A451C();
  return LazyVStack.init(alignment:spacing:pinnedViews:content:)(v9, 0, 1, v8, sub_1000A4514, v14, v11, v12);
}

uint64_t sub_10009F8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t OpaqueTypeConformance2;
  _QWORD v19[6];
  _QWORD v20[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 - 1;
  v20[0] = 0;
  v20[1] = v4;
  KeyPath = swift_getKeyPath(&unk_1000D3750);
  v7 = swift_allocObject(&unk_10010CC98, 216, 7);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v7 + 152) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v7 + 168) = v8;
  *(_OWORD *)(v7 + 184) = *(_OWORD *)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v7 + 88) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v7 + 104) = v9;
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v7 + 136) = v10;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 40) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 + 16) = a1;
  v13 = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(v7 + 72) = v12;
  *(_QWORD *)(v7 + 200) = v13;
  *(_QWORD *)(v7 + 208) = v5;
  swift_bridgeObjectRetain(a1);
  sub_1000A34DC((uint64_t *)a2);
  v14 = sub_100005360(&qword_100118398);
  v15 = sub_100005360(&qword_1001183A0);
  v16 = sub_1000A4704();
  v19[0] = sub_100005608(&qword_100118358);
  v19[1] = sub_100005608(&qword_100118360);
  v19[2] = &type metadata for EmptyView;
  v19[3] = sub_10003D3C8(&qword_100118368, &qword_100118358, (void (*)(void))sub_1000A4620);
  v19[4] = sub_100008078(&qword_100118390, &qword_100118360, (uint64_t)&protocol conformance descriptor for LazyVStack<A>);
  v19[5] = &protocol witness table for EmptyView;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v19, &opaque type descriptor for <<opaque return type of Section<>.collapsible(_:)>>, 1);
  return ForEach<>.init(_:id:content:)(v20, KeyPath, sub_1000A46F4, v7, v14, v15, v16, &protocol witness table for Int, OpaqueTypeConformance2);
}

uint64_t sub_10009FA8C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  id v20;
  double v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  unint64_t v60;
  __n128 v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[4];
  char v66;
  char v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  char v86;
  char v87;

  v11 = sub_100005360(&qword_1001183B8);
  __chkstk_darwin(v11, v12);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)*a1 < *(_QWORD *)(a2 + 16))
  {
    v63 = a5;
    v64 = v15;
    v62 = &v59;
    v18 = __chkstk_darwin(v13, v14);
    a1 = &v59 - 8;
    v61 = v18;
    *((__n128 *)&v59 - 3) = v18;
    *(&v59 - 4) = a3;
    *(&v59 - 3) = v19;
    *(&v59 - 2) = a4;
    v20 = (id)v18.n128_u64[0];
    v60 = v61.n128_u64[1];
    *(_QWORD *)&v21 = swift_bridgeObjectRetain(v61.n128_u64[1]).n128_u64[0];
    v61.n128_u64[0] = (unint64_t)v20;
    v22 = objc_msgSend(v20, "displayName", v21);
    a5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v5 = v23;

    if (qword_100113E80 == -1)
      goto LABEL_4;
    goto LABEL_15;
  }
  __break(1u);
LABEL_15:
  swift_once(&qword_100113E80, sub_100089868);
LABEL_4:
  v24 = qword_10011FE28;
  v25 = qword_100113D40;
  swift_retain(qword_10011FE28);
  if (v25 != -1)
    swift_once(&qword_100113D40, sub_100053138);
  v26 = qword_10011FCE8;
  swift_retain(qword_10011FCE8);
  v28 = static Edge.Set.top.getter(v27);
  v29 = v28;
  if (qword_100113AB0 != -1)
    v28 = swift_once(&qword_100113AB0, sub_10001B9BC);
  v30 = EdgeInsets.init(_all:)(v28, *(double *)&qword_10011F938);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = static Edge.Set.bottom.getter(v37);
  v39 = v38;
  if (qword_100113AB8 != -1)
    v38 = swift_once(&qword_100113AB8, sub_10001B9CC);
  v40 = EdgeInsets.init(_all:)(v38, *(double *)&qword_10011F940);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  v86 = 0;
  v85 = 0;
  v48 = static Edge.Set.leading.getter(v47);
  v49 = v48;
  if (qword_100113AC0 != -1)
    v48 = swift_once(&qword_100113AC0, sub_10001B9DC);
  v50 = EdgeInsets.init(_all:)(v48, *(double *)&qword_10011F948);
  v87 = 0;
  v65[0] = a5;
  v65[1] = v5;
  v65[2] = v24;
  v65[3] = v26;
  v66 = 0;
  v67 = v29;
  v68 = v30;
  v69 = v32;
  v70 = v34;
  v71 = v36;
  v72 = v86;
  v73 = v39;
  v74 = v40;
  v75 = v42;
  v76 = v44;
  v77 = v46;
  v78 = v85;
  v79 = v49;
  v80 = v50;
  v81 = v51;
  v82 = v52;
  v83 = v53;
  v84 = 0;
  v54 = sub_100005360(&qword_100118358);
  v55 = sub_100005360(&qword_100118360);
  v56 = sub_10003D3C8(&qword_100118368, &qword_100118358, (void (*)(void))sub_1000A4620);
  v57 = sub_100008078(&qword_100118390, &qword_100118360, (uint64_t)&protocol conformance descriptor for LazyVStack<A>);
  Section<>.init(header:content:)(v65, sub_1000A47B4, a1, v54, v55, v56, v57);
  Section<>.collapsible(_:)(0, v11, v56, v57, &protocol witness table for EmptyView);
  swift_bridgeObjectRelease(v60);

  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v17, v11);
}

uint64_t sub_10009FED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v10 = type metadata accessor for PinnedScrollableViews(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v15 = static HorizontalAlignment.center.getter(v12);
  v26 = 0;
  v16 = sub_100005178(&qword_100118340, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(&v26, v10, v16);
  v17 = sub_100005360(&qword_1001183C0);
  v18 = sub_100066FB8(&qword_1001183C8, &qword_1001183C0, (void (*)(void))sub_1000A47E0, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  return LazyVStack.init(alignment:spacing:pinnedViews:content:)(v15, 0, 1, v14, sub_1000A47C0, v20, v17, v18);
}

uint64_t sub_1000A0014(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  if (!((unint64_t)a2 >> 62))
  {
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - 1;
LABEL_3:
    v28[0] = 0;
    v28[1] = v10;
    KeyPath = swift_getKeyPath(&unk_1000D3750);
    v13 = swift_allocObject(&unk_10010CCC0, 240, 7);
    *(_QWORD *)(v13 + 16) = a1;
    *(_QWORD *)(v13 + 24) = a2;
    v14 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(v13 + 160) = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(v13 + 176) = v14;
    *(_OWORD *)(v13 + 192) = *(_OWORD *)(a3 + 160);
    v15 = *(_QWORD *)(a3 + 176);
    v16 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v13 + 96) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v13 + 112) = v16;
    v17 = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(v13 + 128) = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(v13 + 144) = v17;
    v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v13 + 32) = *(_OWORD *)a3;
    *(_OWORD *)(v13 + 48) = v18;
    v19 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v13 + 64) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v13 + 80) = v19;
    *(_QWORD *)(v13 + 208) = v15;
    *(_QWORD *)(v13 + 216) = a4;
    *(_QWORD *)(v13 + 224) = a5;
    *(_QWORD *)(v13 + 232) = v11;
    swift_bridgeObjectRetain(a2);
    v20 = a1;
    sub_1000A34DC((uint64_t *)a3);
    v21 = sub_100005360(&qword_100118398);
    v22 = sub_100005360(&qword_1001183D8);
    v23 = sub_1000A4704();
    v24 = sub_1000A47E0();
    return ForEach<>.init(_:id:content:)(v28, KeyPath, sub_1000A4890, v13, v21, v22, v23, &protocol witness table for Int, v24);
  }
  if (a2 < 0)
    v26 = a2;
  else
    v26 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  result = swift_bridgeObjectRelease(a2);
  v11 = v27 - 1;
  if (!__OFSUB__(v27, 1))
  {
    swift_bridgeObjectRetain(a2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v26);
    result = swift_bridgeObjectRelease(a2);
    if ((v10 & 0x8000000000000000) == 0)
      goto LABEL_3;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A01B8@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  id v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v42[3];

  v12 = sub_100005360(&qword_1001183F8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_1001183E8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  if ((a2 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a2);
LABEL_5:
    a2 = (unint64_t)v21;
    *(_QWORD *)v15 = static HorizontalAlignment.leading.getter(v22);
    *((_QWORD *)v15 + 1) = 0;
    v15[16] = 0;
    v23 = sub_100005360(&qword_100118400);
    v24 = sub_1000A0444((void *)a2, a3, a4, v20, a5, (uint64_t)&v15[*(int *)(v23 + 44)]);
    if (qword_100113A78 == -1)
      goto LABEL_6;
    goto LABEL_12;
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v20 < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v21 = *(id *)(a2 + 8 * v20 + 32);
    goto LABEL_5;
  }
  __break(1u);
LABEL_12:
  v24 = swift_once(&qword_100113A78, sub_10001B938);
LABEL_6:
  v25 = qword_10011F900;
  v26 = static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(v42, 0, 1, v25, 0, v26, v27);
  sub_10000531C((uint64_t)v15, (uint64_t)v19, &qword_1001183F8);
  v28 = &v19[*(int *)(v16 + 36)];
  v29 = v42[1];
  *(_OWORD *)v28 = v42[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v42[2];
  v30 = sub_100004F48((uint64_t)v15, &qword_1001183F8);
  v31 = static Edge.Set.top.getter(v30);
  v32 = v31;
  if (qword_100113A98 != -1)
    v31 = swift_once(&qword_100113A98, sub_10001B98C);
  v33 = EdgeInsets.init(_all:)(v31, *(double *)&qword_10011F920);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_10000531C((uint64_t)v19, a6, &qword_1001183E8);

  v40 = a6 + *(int *)(sub_100005360(&qword_1001183D8) + 36);
  *(_BYTE *)v40 = v32;
  *(double *)(v40 + 8) = v33;
  *(_QWORD *)(v40 + 16) = v35;
  *(_QWORD *)(v40 + 24) = v37;
  *(_QWORD *)(v40 + 32) = v39;
  *(_BYTE *)(v40 + 40) = 0;
  return sub_100004F48((uint64_t)v19, &qword_1001183E8);
}

uint64_t sub_1000A0444@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;

  v74 = a4;
  v75 = a5;
  v76 = a6;
  v9 = sub_100005360(&qword_100118298);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100118408);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005360(&qword_100118410);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v73 - v23;
  v25 = sub_10009E78C(a1, 1, (uint64_t)v12);
  v26 = static Edge.Set.bottom.getter(v25);
  v27 = v26;
  if (qword_100113AA0 != -1)
    v26 = swift_once(&qword_100113AA0, sub_10001B99C);
  v28 = EdgeInsets.init(_all:)(v26, *(double *)&qword_10011F928);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  sub_10000531C((uint64_t)v12, (uint64_t)v16, &qword_100118298);
  v35 = &v16[*(int *)(v13 + 36)];
  *v35 = v27;
  *((double *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  v36 = sub_100004F48((uint64_t)v12, &qword_100118298);
  v37 = static Edge.Set.leading.getter(v36);
  v38 = v37;
  if (qword_100113AA8 != -1)
    v37 = swift_once(&qword_100113AA8, sub_10001B9AC);
  v39 = EdgeInsets.init(_all:)(v37, *(double *)&qword_10011F930);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  sub_10000531C((uint64_t)v16, (uint64_t)v20, &qword_100118408);
  v46 = &v20[*(int *)(v17 + 36)];
  *v46 = v38;
  *((double *)v46 + 1) = v39;
  *((_QWORD *)v46 + 2) = v41;
  *((_QWORD *)v46 + 3) = v43;
  *((_QWORD *)v46 + 4) = v45;
  v46[40] = 0;
  sub_100004F48((uint64_t)v16, &qword_100118408);
  sub_100007CD8((uint64_t)v20, (uint64_t)v24, &qword_100118410);
  if (a2 == a3 && v74 == v75)
  {
    v47 = (uint64_t)v20;
    v48 = (uint64_t)v24;
    v74 = 0;
    v75 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0.0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    if (qword_100113DF8 != -1)
      swift_once(&qword_100113DF8, sub_10005352C);
    v47 = (uint64_t)v20;
    v48 = (uint64_t)v24;
    v75 = qword_10011FDA0;
    swift_retain(qword_10011FDA0);
    v60 = static Alignment.center.getter(v59);
    v62 = _FrameLayout.init(width:height:alignment:)(&v77, 0, 1, 0x3FE0000000000000, 0, v60, v61);
    v49 = v77;
    v50 = v78;
    v51 = v79;
    v52 = v80;
    v53 = v81;
    v54 = v82;
    v63 = static Edge.Set.leading.getter(v62);
    v64 = v63;
    if (qword_100113A90 != -1)
      v63 = swift_once(&qword_100113A90, sub_10001B97C);
    v55 = EdgeInsets.init(_all:)(v63, *(double *)&qword_10011F918);
    v56 = v65;
    v57 = v66;
    v58 = v67;
    v74 = v64;
  }
  sub_10000531C(v48, v47, &qword_100118410);
  v68 = v76;
  sub_10000531C(v47, v76, &qword_100118410);
  v69 = v68 + *(int *)(sub_100005360(&qword_100118418) + 48);
  v70 = v74;
  v71 = v75;
  *(_QWORD *)v69 = v75;
  *(_QWORD *)(v69 + 8) = v49;
  *(_QWORD *)(v69 + 16) = v50;
  *(_QWORD *)(v69 + 24) = v51;
  *(_QWORD *)(v69 + 32) = v52;
  *(_QWORD *)(v69 + 40) = v53;
  *(_QWORD *)(v69 + 48) = v54;
  *(_QWORD *)(v69 + 56) = v70;
  *(double *)(v69 + 64) = v55;
  *(_QWORD *)(v69 + 72) = v56;
  *(_QWORD *)(v69 + 80) = v57;
  *(_QWORD *)(v69 + 88) = v58;
  *(_BYTE *)(v69 + 96) = 0;
  swift_retain(v71);
  sub_100004F48(v48, &qword_100118410);
  swift_release(v71);
  return sub_100004F48(v47, &qword_100118410);
}

uint64_t sub_1000A0850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  void *object;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  Swift::String v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[7];
  char v95;
  _BYTE v96[7];
  char v97;
  _BYTE v98[7];
  char v99;
  _BYTE v100[7];
  char v101;
  char v102;

  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Image.ResizingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113BF8 != -1)
    swift_once(&qword_100113BF8, sub_10002E18C);
  v13 = qword_10011FAB0;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v8);
  v83 = Image.resizable(capInsets:resizingMode:)(v12, v13, 0.0, 0.0, 0.0, 0.0);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (qword_100113AE0 != -1)
    v14 = swift_once(&qword_100113AE0, sub_10001BA70);
  v15 = qword_10011F968;
  v16 = static Alignment.center.getter(v14);
  v18 = _FrameLayout.init(width:height:alignment:)(&v88, v15, 0, v15, 0, v16, v17);
  v82 = v88;
  v81 = v89;
  v80 = v90;
  v79 = v91;
  v78 = v92;
  v77 = v93;
  v19 = static Edge.Set.bottom.getter(v18);
  v76 = v19;
  if (qword_100113AF0 != -1)
    v19 = swift_once(&qword_100113AF0, sub_10001BA90);
  v20 = EdgeInsets.init(_all:)(v19, *(double *)&qword_10011F978);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(21, 1);
  v27._object = (void *)0x80000001000D7DE0;
  v27._countAndFlagsBits = 0x1000000000000012;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v27);
  v85 = *(_OWORD *)(a1 + 160);
  v86 = *(_QWORD *)(a1 + 176);
  v28 = sub_100005360(&qword_100117F98);
  State.wrappedValue.getter(&v87, v28);
  object = v87._object;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v87);
  swift_bridgeObjectRelease(object);
  v30._countAndFlagsBits = 10256610;
  v30._object = (void *)0xA300000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
  v31 = LocalizedStringKey.init(stringInterpolation:)(v7);
  v32 = Text.init(_:tableName:bundle:comment:)(v31);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  if (qword_100113E88 != -1)
    swift_once(&qword_100113E88, sub_1000898BC);
  v40 = v37 & 1;
  v74 = Text.font(_:)(qword_10011FE30, v32, v35, v40, v39, v33);
  v73 = v41;
  v43 = v42;
  v75 = v44;
  sub_10002DD44(v32, v35, v40);
  swift_bridgeObjectRelease(v39);
  v45 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x80000001000D7E60);
  v46 = Text.init(_:tableName:bundle:comment:)(v45);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  if (qword_100113E90 != -1)
    swift_once(&qword_100113E90, sub_100089914);
  v54 = v51 & 1;
  v55 = v43 & 1;
  v56 = Text.font(_:)(qword_10011FE38, v46, v49, v51 & 1, v53, v47);
  v58 = v57;
  v60 = v59;
  v62 = v61 & 1;
  sub_10002DD44(v46, v49, v54);
  swift_bridgeObjectRelease(v53);
  v84 = v55;
  v63 = v81;
  v102 = v81;
  v64 = v79;
  v101 = v79;
  v99 = 0;
  v97 = v55;
  v95 = v62;
  *(_DWORD *)(a2 + 17) = v85;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v85 + 3);
  *(_DWORD *)(a2 + 33) = v87._countAndFlagsBits;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)((char *)&v87._countAndFlagsBits + 3);
  *(_DWORD *)(a2 + 60) = *(_DWORD *)&v100[3];
  *(_DWORD *)(a2 + 57) = *(_DWORD *)v100;
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v98;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v98[3];
  v65 = v97;
  *(_DWORD *)(a2 + 121) = *(_DWORD *)v96;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)&v96[3];
  v66 = v95;
  *(_DWORD *)(a2 + 153) = *(_DWORD *)v94;
  *(_DWORD *)(a2 + 156) = *(_DWORD *)&v94[3];
  v67 = v83;
  v68 = v82;
  *(_QWORD *)a2 = v83;
  *(_QWORD *)(a2 + 8) = v68;
  *(_BYTE *)(a2 + 16) = v63;
  *(_QWORD *)(a2 + 24) = v80;
  *(_BYTE *)(a2 + 32) = v64;
  *(_QWORD *)(a2 + 40) = v78;
  *(_QWORD *)(a2 + 48) = v77;
  *(_BYTE *)(a2 + 56) = v76;
  *(double *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v24;
  *(_QWORD *)(a2 + 88) = v26;
  *(_BYTE *)(a2 + 96) = 0;
  v69 = v74;
  v70 = v73;
  *(_QWORD *)(a2 + 104) = v74;
  *(_QWORD *)(a2 + 112) = v70;
  *(_BYTE *)(a2 + 120) = v65;
  v71 = v75;
  *(_QWORD *)(a2 + 128) = v75;
  *(_QWORD *)(a2 + 136) = v56;
  *(_QWORD *)(a2 + 144) = v58;
  *(_BYTE *)(a2 + 152) = v66;
  *(_QWORD *)(a2 + 160) = v60;
  swift_retain(v67);
  sub_10002DE88(v69, v70, v55);
  swift_bridgeObjectRetain(v71);
  sub_10002DE88(v56, v58, v62);
  swift_bridgeObjectRetain(v60);
  sub_10002DD44(v56, v58, v62);
  swift_bridgeObjectRelease(v60);
  sub_10002DD44(v69, v70, v84);
  swift_release(v67);
  return swift_bridgeObjectRelease(v71);
}

uint64_t sub_1000A0E3C(uint64_t *a1, void *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[6];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;

  v51 = *((_OWORD *)a1 + 6);
  v52 = a1[14];
  v47 = *((_OWORD *)a1 + 6);
  v48 = a1[14];
  v4 = sub_100005360(&qword_100117FD8);
  v5 = State.wrappedValue.getter(&v49, v4);
  v7 = v49;
  v6 = v50;
  v8 = CalculateUnit.id.getter(v5);
  v10 = v9;
  if (!v6)
  {
    v13 = swift_bridgeObjectRelease(v9);
    goto LABEL_9;
  }
  if (v7 == v8 && v6 == v9)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    goto LABEL_17;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, v8, v9, 0);
  swift_bridgeObjectRelease(v6);
  v13 = swift_bridgeObjectRelease(v10);
  if ((v12 & 1) == 0)
  {
LABEL_9:
    v14 = CalculateUnit.id.getter(v13);
    v47 = v51;
    v48 = v52;
    v49 = v14;
    v50 = v15;
    State.wrappedValue.setter(&v49, v4);
    v16 = objc_msgSend(a2, "category");
    if (v16)
    {
      v17 = v16;
      v18 = CalculateUnitCategory.id.getter();
      v20 = v19;

    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v47 = *(_OWORD *)(a1 + 9);
    v48 = a1[11];
    v49 = v18;
    v50 = v20;
    State.wrappedValue.setter(&v49, v4);
    v21 = *((_BYTE *)a1 + 65);
    v22 = a1[2];
    v23 = *((_BYTE *)a1 + 24);
    swift_retain(v22);
    v25 = sub_1000439B4(v24, v23);
    swift_release(v22);
    v26 = sub_10004835C();
    swift_release(v25);
    if ((v21 & 1) != 0)
      sub_100047C34(a2);
    else
      sub_100047FC8(a2);
    swift_release(v26);
    swift_retain(v22);
    v28 = sub_1000439B4(v27, v23);
    swift_release(v22);
    v29 = sub_10004835C();
    swift_release(v28);
    v30 = *(_QWORD *)(v29 + 16);
    swift_retain(v30);
    swift_release(v29);
    sub_10007EDC0(a2);
    swift_release(v30);
    v31 = *a1;
    v32 = *((_BYTE *)a1 + 8);
    swift_retain(*a1);
    v34 = sub_100043890(v33, v32);
    swift_release(v31);
    v35 = *(_QWORD *)(v34 + 16);
    swift_retain(v35);
    swift_release(v34);
    swift_retain(v22);
    v37 = sub_1000439B4(v36, v23);
    swift_release(v22);
    v38 = sub_10004835C();
    swift_release(v37);
    sub_1000A90EC();
    swift_release(v35);
    swift_release(v38);
  }
LABEL_17:
  v47 = *(_OWORD *)(a1 + 15);
  v39 = sub_100005360(&qword_100113FF8);
  v40 = State.wrappedValue.getter(&v49, v39);
  if (v49 == 1)
  {
    __chkstk_darwin(v40, v41);
    v46[2] = a1;
    v43 = static Animation.default.getter(v42);
    withAnimation<A>(_:_:)(v43, sub_1000A4430, v46, (char *)&type metadata for () + 8);
    swift_release(v43);
  }
  v47 = *((_OWORD *)a1 + 3);
  LOBYTE(v48) = *((_BYTE *)a1 + 64);
  LOBYTE(v49) = 0;
  v44 = sub_100005360(&qword_100115300);
  return Binding.wrappedValue.setter(&v49, v44);
}

double sub_1000A1194(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  double result;
  _QWORD v10[3];
  char v11;
  char v12;
  __int128 v13;

  v13 = *(_OWORD *)(a1 + 15);
  v12 = 0;
  v2 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.setter(&v12, v2);
  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  swift_retain(*a1);
  v6 = sub_100043890(v5, v4);
  swift_release(v3);
  KeyPath = swift_getKeyPath(&unk_1000D3538);
  v10[2] = v6;
  v11 = 6;
  *(_QWORD *)&v13 = v6;
  v8 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_100061D5C, v10, (char *)&type metadata for () + 8, v8);
  swift_release(v6);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1000A129C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 24);
  swift_retain(v1);
  v4 = sub_1000439B4(v3, v2);
  swift_release(v1);
  v5 = sub_10004835C();
  swift_release(v4);
  v6 = *(_QWORD *)(v5 + 16);
  swift_retain(v6);
  swift_release(v5);
  sub_10007F308();
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_1000A1304@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A1328(0x7261656C43, 0xE500000000000000, a1);
}

uint64_t sub_1000A1318@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A1328(1701736260, 0xE400000000000000, a1);
}

uint64_t sub_1000A1328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  result = Text.init(_:tableName:bundle:comment:)(v4);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7 & 1;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

uint64_t sub_1000A1384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39[2];
  _QWORD v40[4];
  __int16 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  __int128 v51;

  v39[0] = a4;
  v7 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100118218);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)v39 - v19;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v8 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v7, v18);
  v21 = Image.resizable(capInsets:resizingMode:)(v11, a1, 0.0, 0.0, 0.0, 0.0);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if (qword_100113B40 != -1)
    v22 = swift_once(&qword_100113B40, sub_10001BB30);
  v23 = qword_10011F9C8;
  v24 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v47, 0, 1, v23, 0, v24, v25);
  v40[2] = v21;
  v40[3] = 0;
  v41 = 1;
  v42 = v47;
  v43 = v48;
  v44 = v49;
  v45 = v50;
  v46 = v51;
  v40[0] = a2;
  v40[1] = a3;
  v26 = sub_100004F84();
  v27 = swift_bridgeObjectRetain(a3);
  v28 = Text.init<A>(_:)(v40, &type metadata for String, v26, v27);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = sub_100005360(&qword_100118228);
  v36 = sub_10003D3C8(&qword_100118220, &qword_100118228, (void (*)(void))sub_100093E08);
  View.accessibilityLabel(_:)(v28, v30, v34, v32, v35, v36);
  sub_10002DD44(v28, v30, v34);
  swift_release(v21);
  swift_bridgeObjectRelease(v32);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000016, 0x80000001000D7DC0, v12);
  sub_100004F48((uint64_t)v15, &qword_100118218);
  v37 = v39[0];
  sub_10000531C((uint64_t)v20, v39[0], &qword_100118218);
  *(_QWORD *)(v37 + *(int *)(sub_100005360(&qword_1001181E0) + 36)) = 0x4000000000000000;
  return sub_100004F48((uint64_t)v20, &qword_100118218);
}

uint64_t sub_1000A165C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t KeyPath;
  uint64_t v87;
  __n128 v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t OpaqueTypeConformance2;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  Swift::String v150;
  Swift::String v151;
  void *object;
  Swift::String v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v184;
  __int16 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244[8];
  char v245[8];

  v226 = a2;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3, v4);
  v207 = (char *)&v186 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005360(&qword_100118178);
  __chkstk_darwin(v6, v7);
  v209 = (char *)&v186 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_100005360(&qword_100118180);
  __chkstk_darwin(v208, v9);
  v211 = (uint64_t)&v186 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_100005360(&qword_100118188);
  __chkstk_darwin(v210, v11);
  v215 = (uint64_t)&v186 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_100005360(&qword_100118190);
  __chkstk_darwin(v212, v13);
  v218 = (uint64_t)&v186 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_100005360(&qword_100118198);
  __chkstk_darwin(v214, v15);
  v216 = (uint64_t)&v186 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100005360(&qword_1001181A0);
  __chkstk_darwin(v213, v17);
  v219 = (uint64_t)&v186 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_100005360(&qword_1001181A8);
  v237 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225, v19);
  v217 = (uint64_t)&v186 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005360(&qword_100114718);
  __chkstk_darwin(v21, v22);
  v233 = (uint64_t)&v186 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = type metadata accessor for Date(0);
  v238 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236, v24);
  v235 = (char *)&v186 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100005360(&qword_1001181B0);
  __chkstk_darwin(v26, v27);
  v224 = (char *)&v186 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v30);
  v223 = (char *)&v186 - v31;
  v232 = sub_100005360(&qword_1001181B8);
  __chkstk_darwin(v232, v32);
  v34 = (char *)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v36);
  v220 = (uint64_t)&v186 - v37;
  v230 = sub_100005360(&qword_1001181C0);
  v39 = __chkstk_darwin(v230, v38);
  v231 = (uint64_t)&v186 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for PlainButtonStyle(0, v39);
  v194 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202, v41);
  v193 = (char *)&v186 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100005360(&qword_1001181C8);
  v192 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201, v43);
  v191 = (char *)&v186 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100005360(&qword_1001181D0);
  v196 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203, v45);
  v190 = (char *)&v186 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47, v48);
  v195 = (char *)&v186 - v49;
  v198 = sub_100005360(&qword_1001181D8);
  __chkstk_darwin(v198, v50);
  v199 = (uint64_t)&v186 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100005360(&qword_1001181E0);
  __chkstk_darwin(v204, v52);
  v54 = (char *)&v186 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100005360(&qword_100114860);
  v57 = __chkstk_darwin(v55, v56);
  v59 = (char *)&v186 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for URL(0, v57);
  v205 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206, v60);
  v189 = (char *)&v186 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62, v63);
  v197 = (char *)&v186 - v64;
  v229 = sub_100005360(&qword_1001181E8);
  __chkstk_darwin(v229, v65);
  v200 = (uint64_t *)((char *)&v186 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = sub_100005360(&qword_100114710);
  __chkstk_darwin(v67, v68);
  v70 = (char *)&v186 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for StocksKitCurrencyCache.Provider(0);
  v72 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71, v73);
  v221 = (char *)&v186 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100005360(&qword_1001181F0);
  __chkstk_darwin(v75, v76);
  v234 = (uint64_t)&v186 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v78, v79);
  v239 = (uint64_t *)((char *)&v186 - v80);
  v81 = *(_QWORD *)(a1 + 16);
  v222 = a1;
  LODWORD(a1) = *(unsigned __int8 *)(a1 + 24);
  swift_retain(v81);
  v228 = a1;
  v83 = sub_1000439B4(v82, a1);
  swift_release(v81);
  v84 = sub_10004835C();
  swift_release(v83);
  v85 = *(_QWORD *)(v84 + 24);
  swift_retain(v85);
  swift_release(v84);
  KeyPath = swift_getKeyPath(&unk_1000D3608);
  v240 = v85;
  v227 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v240, KeyPath, v227);
  swift_release(KeyPath);
  v87 = v85 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__provider;
  swift_beginAccess(v85 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__provider, v245, 0, 0);
  sub_10000531C(v87, (uint64_t)v70, &qword_100114710);
  v88 = swift_release(v85);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v72 + 48))(v70, 1, v71, v88) == 1)
  {
    sub_100004F48((uint64_t)v70, &qword_100114710);
  }
  else
  {
    v89 = v221;
    v90 = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(v221, v70, v71);
    v91 = StocksKitCurrencyCache.Provider.logo.getter(v90);
    if (v91)
    {
      v92 = v91;
      v188 = v72;
      v220 = v71;
      StocksKitCurrencyCache.Provider.destination.getter();
      v93 = v205;
      v94 = v206;
      v95 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v205 + 48))(v59, 1, v206);
      v187 = v92;
      if (v95 == 1)
      {
        v96 = sub_100004F48((uint64_t)v59, &qword_100114860);
        v97 = StocksKitCurrencyCache.Provider.name.getter(v96);
        v99 = v98;
        sub_1000A1384(v92, v97, v98, (uint64_t)v54);
        swift_bridgeObjectRelease(v99);
        v100 = v199;
        sub_10000531C((uint64_t)v54, v199, &qword_1001181E0);
        swift_storeEnumTagMultiPayload(v100, v198, 1);
        v101 = sub_100008078(&qword_100118200, &qword_1001181C8, (uint64_t)&protocol conformance descriptor for Link<A>);
        v102 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
        v240 = v201;
        v241 = v202;
        v242 = v101;
        v243 = v102;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v240, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
        v104 = sub_1000A3F28();
        v105 = v200;
        _ConditionalContent<>.init(storage:)(v200, v100, v203, v204, OpaqueTypeConformance2, v104);
        sub_100004F48((uint64_t)v54, &qword_1001181E0);
      }
      else
      {
        v117 = v197;
        (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v197, v59, v94);
        v118 = v189;
        v119 = (*(uint64_t (**)(char *, char *, uint64_t))(v93 + 16))(v189, v117, v94);
        __chkstk_darwin(v119, v120);
        *(&v186 - 4) = v222;
        *(&v186 - 3) = v92;
        v184 = v89;
        v222 = sub_1000A3F28();
        v121 = v191;
        v122 = Link.init(destination:label:)(v118, sub_1000A4078, &v186 - 6, v204, v222);
        v123 = v193;
        PlainButtonStyle.init()(v122);
        v124 = sub_100008078(&qword_100118200, &qword_1001181C8, (uint64_t)&protocol conformance descriptor for Link<A>);
        v125 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
        v126 = v190;
        v127 = v201;
        v128 = v202;
        View.buttonStyle<A>(_:)(v123, v201, v202, v124, v125);
        (*(void (**)(char *, uint64_t))(v194 + 8))(v123, v128);
        (*(void (**)(char *, uint64_t))(v192 + 8))(v121, v127);
        v129 = v196;
        v130 = v195;
        v131 = v203;
        (*(void (**)(char *, char *, uint64_t))(v196 + 32))(v195, v126, v203);
        v132 = v199;
        (*(void (**)(uint64_t, char *, uint64_t))(v129 + 16))(v199, v130, v131);
        swift_storeEnumTagMultiPayload(v132, v198, 0);
        v240 = v127;
        v241 = v128;
        v242 = v124;
        v243 = v125;
        v133 = swift_getOpaqueTypeConformance2(&v240, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
        v105 = v200;
        _ConditionalContent<>.init(storage:)(v200, v132, v131, v204, v133, v222);
        (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v131);
        (*(void (**)(char *, uint64_t))(v205 + 8))(v197, v206);
      }
      v112 = v226;
      v134 = v225;
      v106 = v236;
      v135 = v237;
      v115 = (uint64_t)v224;
      v116 = (uint64_t)v223;
      v136 = v231;
      sub_10000531C((uint64_t)v105, v231, &qword_1001181E8);
      swift_storeEnumTagMultiPayload(v136, v230, 0);
      v137 = sub_1000A3E38();
      v138 = sub_10003D3C8(&qword_100118230, &qword_1001181B8, (void (*)(void))sub_1000A3F28);
      _ConditionalContent<>.init(storage:)(v239, v136, v229, v232, v137, v138);
      swift_release(v187);
      sub_100004F48((uint64_t)v105, &qword_1001181E8);
      (*(void (**)(char *, uint64_t))(v188 + 8))(v221, v220);
      v114 = v135;
      v113 = v134;
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v72 + 8))(v89, v71);
  }
  v106 = v236;
  if (qword_100113C00 != -1)
    swift_once(&qword_100113C00, sub_10002E1C8);
  sub_1000A1384(qword_10011FAB8, 0x6620216F6F686179, 0xEE0065636E616E69, (uint64_t)v54);
  sub_10000531C((uint64_t)v54, (uint64_t)v34, &qword_1001181E0);
  v107 = v232;
  *(_QWORD *)&v34[*(int *)(v232 + 36)] = 0x3FD3333333333333;
  sub_100004F48((uint64_t)v54, &qword_1001181E0);
  v108 = v220;
  sub_100007CD8((uint64_t)v34, v220, &qword_1001181B8);
  v109 = v231;
  sub_10000531C(v108, v231, &qword_1001181B8);
  swift_storeEnumTagMultiPayload(v109, v230, 1);
  v110 = sub_1000A3E38();
  v111 = sub_10003D3C8(&qword_100118230, &qword_1001181B8, (void (*)(void))sub_1000A3F28);
  _ConditionalContent<>.init(storage:)(v239, v109, v229, v107, v110, v111);
  sub_100004F48(v108, &qword_1001181B8);
  v112 = v226;
  v113 = v225;
  v114 = v237;
  v115 = (uint64_t)v224;
  v116 = (uint64_t)v223;
LABEL_12:
  swift_retain(v81);
  v140 = sub_1000439B4(v139, v228);
  swift_release(v81);
  v141 = sub_10004835C();
  swift_release(v140);
  v142 = *(_QWORD *)(v141 + 24);
  swift_retain(v142);
  swift_release(v141);
  v143 = swift_getKeyPath(&unk_1000D3630);
  v240 = v142;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v240, v143, v227);
  swift_release(v143);
  v144 = v142 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate;
  swift_beginAccess(v142 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, v244, 0, 0);
  v145 = v233;
  sub_10000531C(v144, v233, &qword_100114718);
  v146 = swift_release(v142);
  v147 = v238;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v238 + 48))(v145, 1, v106, v146) == 1)
  {
    sub_100004F48(v145, &qword_100114718);
    v148 = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v147 + 32))(v235, v145, v106);
    v149 = v207;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1);
    v150._countAndFlagsBits = 0x647055207473614CLL;
    v150._object = (void *)0xEE00203A64657461;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v150);
    v151._countAndFlagsBits = sub_100031F84();
    object = v151._object;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v151);
    swift_bridgeObjectRelease(object);
    v153._countAndFlagsBits = 0;
    v153._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v153);
    v154 = LocalizedStringKey.init(stringInterpolation:)(v149);
    v185 = 256;
    v184 = 0;
    v155 = Text.init(_:tableName:bundle:comment:)(v154);
    v157 = v156;
    v159 = v158;
    v240 = v155;
    v241 = v156;
    v161 = v160 & 1;
    LOBYTE(v242) = v160 & 1;
    v243 = v158;
    v162 = (uint64_t)v209;
    View.accessibilityIdentifier(_:)(0xD000000000000019, 0x80000001000D7DA0, &type metadata for Text, &protocol witness table for Text);
    sub_10002DD44(v155, v157, v161);
    swift_bridgeObjectRelease(v159);
    v163 = v211;
    sub_10000531C(v162, v211, &qword_100118178);
    *(_QWORD *)(v163 + *(int *)(v208 + 36)) = 0;
    sub_100004F48(v162, &qword_100118178);
    if (qword_100113D88 != -1)
      swift_once(&qword_100113D88, sub_100053240);
    v164 = qword_10011FD30;
    v165 = swift_getKeyPath(&unk_1000D3658);
    v166 = v215;
    sub_10000531C(v163, v215, &qword_100118180);
    v167 = (uint64_t *)(v166 + *(int *)(v210 + 36));
    *v167 = v165;
    v167[1] = v164;
    swift_retain(v164);
    sub_100004F48(v163, &qword_100118180);
    if (qword_100113E78 != -1)
      swift_once(&qword_100113E78, sub_10008984C);
    v168 = qword_10011FE20;
    v169 = swift_getKeyPath(&unk_1000D3688);
    v170 = v218;
    sub_10000531C(v166, v218, &qword_100118188);
    v171 = (uint64_t *)(v170 + *(int *)(v212 + 36));
    *v171 = v169;
    v171[1] = v168;
    swift_retain(v168);
    sub_100004F48(v166, &qword_100118188);
    v172 = swift_getKeyPath(&unk_1000D36B8);
    v173 = v216;
    sub_10000531C(v170, v216, &qword_100118190);
    v174 = v173 + *(int *)(v214 + 36);
    *(_QWORD *)v174 = v172;
    *(_BYTE *)(v174 + 8) = 0;
    sub_100004F48(v170, &qword_100118190);
    v175 = v219;
    sub_10000531C(v173, v219, &qword_100118198);
    *(_WORD *)(v175 + *(int *)(v213 + 36)) = 256;
    sub_100004F48(v173, &qword_100118198);
    v176 = swift_getKeyPath(&unk_1000D36E8);
    v177 = v217;
    sub_10000531C(v175, v217, &qword_1001181A0);
    v178 = (uint64_t *)(v177 + *(int *)(v113 + 36));
    *v178 = v176;
    v178[1] = 0x3FE999999999999ALL;
    sub_100004F48(v175, &qword_1001181A0);
    (*(void (**)(char *, uint64_t))(v238 + 8))(v235, v236);
    sub_100007CD8(v177, v116, &qword_1001181A8);
    v148 = 0;
    v114 = v237;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v116, v148, 1, v113);
  v179 = v239;
  v180 = v234;
  sub_10000531C((uint64_t)v239, v234, &qword_1001181F0);
  sub_10000531C(v116, v115, &qword_1001181B0);
  sub_10000531C(v180, v112, &qword_1001181F0);
  v181 = sub_100005360(&qword_100118238);
  v182 = v112 + *(int *)(v181 + 48);
  *(_QWORD *)v182 = 0;
  *(_BYTE *)(v182 + 8) = 1;
  sub_10000531C(v115, v112 + *(int *)(v181 + 64), &qword_1001181B0);
  sub_100004F48(v116, &qword_1001181B0);
  sub_100004F48((uint64_t)v179, &qword_1001181F0);
  sub_100004F48(v115, &qword_1001181B0);
  return sub_100004F48(v180, &qword_1001181F0);
}

uint64_t sub_1000A2A18@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = StocksKitCurrencyCache.Provider.name.getter();
  v6 = v5;
  sub_1000A1384(a1, v4, v5, a2);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000A2A78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  return EnvironmentValues.colorScheme.setter(v5);
}

uint64_t sub_1000A2AF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = *a1;
  v5 = v13;
  v6 = swift_allocObject(&unk_10010CBF8, 32, 7);
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  swift_bridgeObjectRetain(v5);
  swift_retain(a3);
  v7 = sub_100005360(&qword_1001145E8);
  v8 = sub_100005360(&qword_100118298);
  v9 = sub_100008078(&qword_1001182D0, &qword_1001145E8, (uint64_t)&protocol conformance descriptor for [A]);
  v10 = sub_1000A40C0();
  v11 = sub_1000A4284(&qword_1001182D8, (unint64_t *)&qword_1001145E0, CalculateUnit_ptr, (uint64_t)&protocol conformance descriptor for CalculateUnit);
  return ForEach<>.init(_:content:)(&v13, sub_1000A4250, v6, v7, &type metadata for String, v8, v9, v10, v11);
}

__n128 sub_1000A2C04@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  __n128 result;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;

  v6 = type metadata accessor for CalculatorViewModel(0);
  v7 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v33 = Environment.init<A>(_:)(v6, v6, v7);
  v32 = v8;
  v9 = type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  v10 = sub_100005178(&qword_100116508, type metadata accessor for CalculatorUnitConversionViewModelWrapper, (uint64_t)&unk_1000CF484);
  v31 = Environment.init<A>(_:)(v9, v9, v10);
  v30 = v11;
  v12 = type metadata accessor for CalculatorLayout(0);
  v13 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v14 = Environment.init<A>(_:)(v12, v12, v13);
  LOBYTE(v12) = v15;
  v38 = 0;
  v39 = 0;
  v16 = sub_100005360(&qword_100114308);
  State.init(wrappedValue:)(&v40, &v38, v16);
  v29 = v40;
  v17 = v41;
  v38 = 0;
  v39 = 0;
  State.init(wrappedValue:)(&v40, &v38, v16);
  v28 = v40;
  v18 = v41;
  LOBYTE(v38) = 0;
  v19 = State.init(wrappedValue:)(&v40, &v38, &type metadata for Bool);
  v20 = v40.n128_u8[0];
  v21 = v40.n128_u64[1];
  LOBYTE(v16) = FocusState.init<>()(v19);
  v23 = v22;
  v25 = v24;
  v38 = 0;
  v39 = 0xE000000000000000;
  State.init(wrappedValue:)(&v40, &v38, &type metadata for String);
  result = v40;
  v27 = v41;
  *(_QWORD *)a5 = v33;
  *(_BYTE *)(a5 + 8) = v32 & 1;
  *(_QWORD *)(a5 + 16) = v31;
  *(_BYTE *)(a5 + 24) = v30 & 1;
  *(_QWORD *)(a5 + 32) = v14;
  *(_BYTE *)(a5 + 40) = v12 & 1;
  *(_QWORD *)(a5 + 48) = a1;
  *(_QWORD *)(a5 + 56) = a2;
  *(_BYTE *)(a5 + 64) = a3;
  *(_BYTE *)(a5 + 65) = a4;
  *(__n128 *)(a5 + 72) = v29;
  *(_QWORD *)(a5 + 88) = v17;
  *(__n128 *)(a5 + 96) = v28;
  *(_QWORD *)(a5 + 112) = v18;
  *(_BYTE *)(a5 + 120) = v20;
  *(_QWORD *)(a5 + 128) = v21;
  *(_BYTE *)(a5 + 136) = v16 & 1;
  *(_QWORD *)(a5 + 144) = v23;
  *(_BYTE *)(a5 + 152) = v25 & 1;
  *(__n128 *)(a5 + 160) = result;
  *(_QWORD *)(a5 + 176) = v27;
  return result;
}

uint64_t destroy for UnitConversionPopoverView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[7]);
  swift_bridgeObjectRelease(a1[10]);
  swift_release(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_release(a1[14]);
  swift_release(a1[16]);
  swift_release(a1[18]);
  swift_bridgeObjectRelease(a1[21]);
  return swift_release(a1[22]);
}

uint64_t initializeWithCopy for UnitConversionPopoverView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = a2[6];
  v20 = a2[7];
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v20;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_BYTE *)(a1 + 65) = *((_BYTE *)a2 + 65);
  v10 = a2[10];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_QWORD *)(a1 + 80) = v10;
  v12 = a2[11];
  v11 = a2[12];
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v11;
  v13 = a2[13];
  v14 = a2[14];
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  v15 = a2[16];
  *(_QWORD *)(a1 + 128) = v15;
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  v19 = a2[18];
  *(_QWORD *)(a1 + 144) = v19;
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  v16 = a2[21];
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_QWORD *)(a1 + 168) = v16;
  v18 = a2[22];
  *(_QWORD *)(a1 + 176) = v18;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v7);
  swift_retain(v9);
  swift_retain(v20);
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  swift_bridgeObjectRetain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v19);
  swift_bridgeObjectRetain(v16);
  swift_retain(v18);
  return a1;
}

uint64_t *assignWithCopy for UnitConversionPopoverView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  v10 = a2[4];
  v11 = *((_BYTE *)a2 + 40);
  v12 = a1[4];
  a1[4] = v10;
  *((_BYTE *)a1 + 40) = v11;
  swift_retain(v10);
  swift_release(v12);
  v13 = a1[6];
  v14 = a2[6];
  a1[6] = v14;
  swift_retain(v14);
  swift_release(v13);
  v15 = a2[7];
  v16 = a1[7];
  a1[7] = v15;
  swift_retain(v15);
  swift_release(v16);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a1 + 65) = *((_BYTE *)a2 + 65);
  a1[9] = a2[9];
  v17 = a2[10];
  v18 = a1[10];
  a1[10] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a1[11];
  v20 = a2[11];
  a1[11] = v20;
  swift_retain(v20);
  swift_release(v19);
  a1[12] = a2[12];
  v21 = a2[13];
  v22 = a1[13];
  a1[13] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a1[14];
  v24 = a2[14];
  a1[14] = v24;
  swift_retain(v24);
  swift_release(v23);
  *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
  v25 = a1[16];
  v26 = a2[16];
  a1[16] = v26;
  swift_retain(v26);
  swift_release(v25);
  *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
  v27 = a1[18];
  v28 = a2[18];
  a1[18] = v28;
  swift_retain(v28);
  swift_release(v27);
  *((_BYTE *)a1 + 152) = *((_BYTE *)a2 + 152);
  a1[20] = a2[20];
  v29 = a2[21];
  v30 = a1[21];
  a1[21] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = a1[22];
  v32 = a2[22];
  a1[22] = v32;
  swift_retain(v32);
  swift_release(v31);
  return a1;
}

__n128 initializeWithTake for UnitConversionPopoverView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t *assignWithTake for UnitConversionPopoverView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  v8 = *((_BYTE *)a2 + 40);
  v9 = a1[4];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = v8;
  swift_release(v9);
  swift_release(a1[6]);
  v10 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v10);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a1 + 65) = *((_BYTE *)a2 + 65);
  a1[9] = a2[9];
  swift_bridgeObjectRelease(a1[10]);
  v11 = a1[11];
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  swift_release(v11);
  a1[12] = a2[12];
  swift_bridgeObjectRelease(a1[13]);
  v12 = a1[14];
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  swift_release(v12);
  *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
  v13 = a1[16];
  a1[16] = a2[16];
  swift_release(v13);
  *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
  v14 = a1[18];
  a1[18] = a2[18];
  swift_release(v14);
  *((_BYTE *)a1 + 152) = *((_BYTE *)a2 + 152);
  a1[20] = a2[20];
  swift_bridgeObjectRelease(a1[21]);
  v15 = a1[22];
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  swift_release(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnitConversionPopoverView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnitConversionPopoverView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitConversionPopoverView()
{
  return &type metadata for UnitConversionPopoverView;
}

uint64_t sub_1000A3404(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6E48, 1);
}

uint64_t sub_1000A3414()
{
  uint64_t v0;

  return sub_100099E6C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1000A341C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100117F80;
  if (!qword_100117F80)
  {
    v1 = sub_100005608(&qword_100117F78);
    v2[0] = sub_100005608(&qword_100117F88);
    v2[1] = sub_100008078(&qword_100117F90, &qword_100117F88, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100117F80);
  }
  return result;
}

uint64_t sub_1000A34D4()
{
  uint64_t v0;

  return sub_10009CDE4(v0 + 16);
}

uint64_t *sub_1000A34DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[13];
  v10 = a1[14];
  v12 = a1[16];
  v13 = a1[18];
  v14 = a1[21];
  swift_retain(a1[22]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

double sub_1000A35B8()
{
  uint64_t v0;

  return sub_10009CF80((_QWORD *)(v0 + 16));
}

double sub_1000A35C4()
{
  uint64_t v0;

  return sub_10009D0DC((uint64_t *)(v0 + 16));
}

uint64_t sub_1000A35CC()
{
  return sub_10003D3C8(&qword_100117FB0, &qword_100117F38, (void (*)(void))sub_1000A35F0);
}

unint64_t sub_1000A35F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117FB8;
  if (!qword_100117FB8)
  {
    v1 = sub_100005608(&qword_100117F30);
    sub_10003D3C8(&qword_100117FC0, &qword_100117F28, (void (*)(void))sub_1000A3694);
    sub_100008078(&qword_100114B68, &qword_100114B70, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117FB8);
  }
  return result;
}

uint64_t sub_1000A3694()
{
  return sub_10003D3C8(&qword_100117FC8, &qword_100117F20, (void (*)(void))sub_1000A36B8);
}

unint64_t sub_1000A36B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_100117FD0;
  if (!qword_100117FD0)
  {
    v1 = sub_100005608(&qword_100115260);
    v2 = sub_100005608(&qword_100117F18);
    v4 = sub_100005608(&qword_100117F10);
    v5 = sub_100008078(&qword_100117FA0, &qword_100117F10, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.searchable(text:isPresented:placement:prompt:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.searchPresentationToolbarBehavior(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117FD0);
  }
  return result;
}

uint64_t sub_1000A37AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10009C724(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000A37B4(__n128 a1)
{
  uint64_t v1;

  return sub_10009CC20(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000A37C0()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(v0 + 64);
  v5 = *(_BYTE *)(v0 + 80);
  v3 = 0;
  v1 = sub_100005360(&qword_100115300);
  return Binding.wrappedValue.setter(&v3, v1);
}

uint64_t sub_1000A3810@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10009A2C0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000A3818()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118028;
  if (!qword_100118028)
  {
    v1 = sub_100005608(&qword_100118030);
    sub_1000A389C();
    sub_100008078(&qword_1001180D8, &qword_1001180E0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118028);
  }
  return result;
}

unint64_t sub_1000A389C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118038;
  if (!qword_100118038)
  {
    v1 = sub_100005608(&qword_100118040);
    sub_100008078(&qword_100118048, &qword_100118050, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_1000A3920();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118038);
  }
  return result;
}

unint64_t sub_1000A3920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118058;
  if (!qword_100118058)
  {
    v1 = sub_100005608(&qword_100118060);
    sub_10003D3C8(&qword_100118068, &qword_100118070, (void (*)(void))sub_1000A39AC);
    sub_1000A3AF0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118058);
  }
  return result;
}

uint64_t sub_1000A39AC()
{
  return sub_10003D3C8(&qword_100118078, &qword_100118080, (void (*)(void))sub_1000A39D0);
}

unint64_t sub_1000A39D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118088;
  if (!qword_100118088)
  {
    v1 = sub_100005608(&qword_100118090);
    sub_1000A3A54();
    sub_100008078(&qword_100117AA8, &qword_100117AB0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118088);
  }
  return result;
}

unint64_t sub_1000A3A54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118098;
  if (!qword_100118098)
  {
    v1 = sub_100005608(&qword_1001180A0);
    sub_100008078(&qword_1001180A8, &qword_1001180B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118098);
  }
  return result;
}

unint64_t sub_1000A3AF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001180B8;
  if (!qword_1001180B8)
  {
    v1 = sub_100005608(&qword_1001180C0);
    sub_100008078(&qword_1001180C8, &qword_1001180D0, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001180B8);
  }
  return result;
}

unint64_t sub_1000A3B74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001180F0;
  if (!qword_1001180F0)
  {
    v1 = sub_100005608(&qword_1001180F8);
    sub_1000A3BF8();
    sub_100008078(&qword_100118158, &qword_100118160, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001180F0);
  }
  return result;
}

unint64_t sub_1000A3BF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118100;
  if (!qword_100118100)
  {
    v1 = sub_100005608(&qword_100118108);
    sub_10003D3C8(&qword_100118110, &qword_100118118, (void (*)(void))sub_1000A3C9C);
    sub_100008078(&qword_100118150, &qword_100116658, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118100);
  }
  return result;
}

uint64_t sub_1000A3C9C()
{
  return sub_10003D3C8(&qword_100118120, &qword_100118128, (void (*)(void))sub_1000A3CC0);
}

unint64_t sub_1000A3CC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118130;
  if (!qword_100118130)
  {
    v1 = sub_100005608(&qword_100118138);
    sub_100008078(&qword_100118140, &qword_100118148, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118130);
  }
  return result;
}

unint64_t sub_1000A3D44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118168;
  if (!qword_100118168)
  {
    v1 = sub_100005608(&qword_100118000);
    sub_100066FB8(&qword_100118020, &qword_100118018, (void (*)(void))sub_1000A3818, (uint64_t)&protocol conformance descriptor for <A> A?);
    sub_100066FB8(&qword_1001180E8, &qword_100117FF8, (void (*)(void))sub_1000A3B74, (uint64_t)&protocol conformance descriptor for <A> A?);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100118168);
  }
  return result;
}

uint64_t sub_1000A3E0C()
{
  return EnvironmentValues.colorScheme.getter();
}

unint64_t sub_1000A3E38()
{
  unint64_t result;
  uint64_t v1;
  __n128 v2;
  _QWORD v3[4];

  result = qword_1001181F8;
  if (!qword_1001181F8)
  {
    v1 = sub_100005608(&qword_1001181E8);
    v3[0] = sub_100005608(&qword_1001181C8);
    v3[1] = type metadata accessor for PlainButtonStyle(255, v2);
    v3[2] = sub_100008078(&qword_100118200, &qword_1001181C8, (uint64_t)&protocol conformance descriptor for Link<A>);
    v3[3] = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000A3F28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001181F8);
  }
  return result;
}

unint64_t sub_1000A3F28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118208;
  if (!qword_100118208)
  {
    v1 = sub_100005608(&qword_1001181E0);
    sub_1000A3FAC();
    sub_100008078(&qword_100116310, &qword_100116318, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118208);
  }
  return result;
}

unint64_t sub_1000A3FAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118210;
  if (!qword_100118210)
  {
    v1 = sub_100005608(&qword_100118218);
    sub_10003D3C8(&qword_100118220, &qword_100118228, (void (*)(void))sub_100093E08);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118210);
  }
  return result;
}

uint64_t sub_1000A4078@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000A2A18(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000A4088@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009E78C(*a1, 1, a2);
}

uint64_t sub_1000A40B4()
{
  uint64_t v0;

  return sub_1000A2AF4(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000A40C0()
{
  return sub_10003D3C8(&qword_100118290, &qword_100118298, (void (*)(void))sub_1000A40E4);
}

unint64_t sub_1000A40E4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001182A0;
  if (!qword_1001182A0)
  {
    v1 = sub_100005608(&qword_1001182A8);
    v2[0] = sub_100005608(&qword_1001182B0);
    v2[1] = sub_1000A4190();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listRowSeparatorTint(_:edges:)>>, 1);
    sub_100008078(&qword_100116178, &qword_100116180, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001182A0);
  }
  return result;
}

unint64_t sub_1000A4190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001182B8;
  if (!qword_1001182B8)
  {
    v1 = sub_100005608(&qword_1001182B0);
    sub_100008078(&qword_1001182C0, &qword_1001182C8, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_100008078(&qword_100116D80, &qword_100116D88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001182B8);
  }
  return result;
}

uint64_t sub_1000A422C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A4250(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = *a1;
  return v2(&v4);
}

uint64_t sub_1000A4284(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10000A5A8(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A42C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
  swift_release(*(_QWORD *)(v0 + 192));

  return swift_deallocObject(v0, 208, 7);
}

uint64_t sub_1000A4350()
{
  uint64_t v0;

  return sub_1000A0E3C((uint64_t *)(v0 + 16), *(void **)(v0 + 200));
}

uint64_t sub_1000A4364()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_QWORD *sub_1000A4374(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = a1[1];
  v2 = a1[3];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v10 = a1[13];
  v9 = a1[14];
  swift_release(a1[16]);
  swift_release(v9);
  swift_bridgeObjectRelease(v10);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  return a1;
}

double sub_1000A4430()
{
  uint64_t v0;

  return sub_1000A1194(*(uint64_t **)(v0 + 16));
}

double sub_1000A444C()
{
  uint64_t v0;

  return sub_1000A129C(v0 + 16);
}

uint64_t sub_1000A4454()
{
  uint64_t v0;

  return sub_10009F7C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A445C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 136);
  v4 = *(_BYTE *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_BYTE *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + 192);
  v10 = *(_QWORD *)(a1 + 208);
  v12 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 200);
  swift_release(*(_QWORD *)(a1 + 24));
  sub_10002DD44(v2, v3, v4);
  swift_bridgeObjectRelease(v5);
  sub_10002DD44(v6, v7, v8);
  swift_release(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_1000A4514()
{
  uint64_t v0;

  return sub_10009F8BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000A451C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_100118350;
  if (!qword_100118350)
  {
    v1 = sub_100005608(&qword_100118348);
    v2[0] = sub_100005608(&qword_100118358);
    v2[1] = sub_100005608(&qword_100118360);
    v2[2] = &type metadata for EmptyView;
    v2[3] = sub_10003D3C8(&qword_100118368, &qword_100118358, (void (*)(void))sub_1000A4620);
    v2[4] = sub_100008078(&qword_100118390, &qword_100118360, (uint64_t)&protocol conformance descriptor for LazyVStack<A>);
    v2[5] = &protocol witness table for EmptyView;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of Section<>.collapsible(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100118350);
  }
  return result;
}

uint64_t sub_1000A4620()
{
  return sub_10003D3C8(&qword_100118370, &qword_100118378, (void (*)(void))sub_1000A4644);
}

uint64_t sub_1000A4644()
{
  return sub_10003D3C8(&qword_100118380, &qword_100118388, (void (*)(void))sub_1000607A0);
}

uint64_t sub_1000A4668()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_bridgeObjectRelease(v0[13]);
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[19]);
  swift_release(v0[21]);
  swift_bridgeObjectRelease(v0[24]);
  swift_release(v0[25]);
  return swift_deallocObject(v0, 216, 7);
}

uint64_t sub_1000A46F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10009FA8C(a1, *(_QWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 208), a2);
}

unint64_t sub_1000A4704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001183A8;
  if (!qword_1001183A8)
  {
    v1 = sub_100005608(&qword_100118398);
    sub_1000A4770();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001183A8);
  }
  return result;
}

unint64_t sub_1000A4770()
{
  unint64_t result;

  result = qword_1001183B0;
  if (!qword_1001183B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001183B0);
  }
  return result;
}

uint64_t sub_1000A47B4()
{
  return sub_1000A47CC(sub_10009FED4);
}

uint64_t sub_1000A47C0()
{
  return sub_1000A47CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000A0014);
}

uint64_t sub_1000A47CC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000A47E0()
{
  return sub_10003D3C8(&qword_1001183D0, &qword_1001183D8, (void (*)(void))sub_1000A4804);
}

unint64_t sub_1000A4804()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001183E0;
  if (!qword_1001183E0)
  {
    v1 = sub_100005608(&qword_1001183E8);
    sub_100008078(&qword_1001183F0, &qword_1001183F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001183E0);
  }
  return result;
}

uint64_t sub_1000A4888()
{
  return sub_1000A48AC(240);
}

uint64_t sub_1000A4890@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000A01B8(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 232), a2);
}

uint64_t sub_1000A48A4()
{
  return sub_1000A48AC(216);
}

uint64_t sub_1000A48AC(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 32));
  swift_release(*(_QWORD *)(v1 + 48));
  swift_release(*(_QWORD *)(v1 + 64));
  swift_release(*(_QWORD *)(v1 + 80));
  swift_release(*(_QWORD *)(v1 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 112));
  swift_release(*(_QWORD *)(v1 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 136));
  swift_release(*(_QWORD *)(v1 + 144));
  swift_release(*(_QWORD *)(v1 + 160));
  swift_release(*(_QWORD *)(v1 + 176));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 200));
  swift_release(*(_QWORD *)(v1 + 208));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000A494C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10009E1FC(a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + 32, a2);
}

uint64_t sub_1000A495C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009E78C(*a1, 0, a2);
}

double sub_1000A498C(uint64_t a1)
{
  uint64_t v1;

  return sub_10009EDE4(a1, v1 + 16);
}

uint64_t sub_1000A4994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 191) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v9 = (_QWORD *)(v0 + v6);
  swift_release(*v9);
  swift_release(v9[2]);
  swift_release(v9[4]);
  swift_release(v9[6]);
  swift_release(v9[7]);
  swift_bridgeObjectRelease(v9[10]);
  swift_release(v9[11]);
  swift_bridgeObjectRelease(v9[13]);
  swift_release(v9[14]);
  swift_release(v9[16]);
  swift_release(v9[18]);
  swift_bridgeObjectRelease(v9[21]);
  swift_release(v9[22]);
  v10 = v0 + v7;

  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
  return swift_deallocObject(v0, v8, v5);
}

double sub_1000A4A90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10009EE54(v0 + v2, v0 + v3, *(void **)(v0 + ((v3 + 191) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000A4AE0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 200) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 6));
  swift_release(*((_QWORD *)v0 + 8));
  swift_release(*((_QWORD *)v0 + 9));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 12));
  swift_release(*((_QWORD *)v0 + 13));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 15));
  swift_release(*((_QWORD *)v0 + 16));
  swift_release(*((_QWORD *)v0 + 18));
  swift_release(*((_QWORD *)v0 + 20));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 23));
  swift_release(*((_QWORD *)v0 + 24));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);

  swift_bridgeObjectRelease(*(_QWORD *)&v0[v6 + 8]);
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1000A4BDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 200) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_10009EFDC(v0 + 16, v0 + v2, *v3, v3[1]);
}

unint64_t sub_1000A4C24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118450;
  if (!qword_100118450)
  {
    v1 = sub_100005608(&qword_100118438);
    sub_100008078(&qword_100118458, &qword_100118260, (uint64_t)&protocol conformance descriptor for List<A, B>);
    sub_100060FD0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118450);
  }
  return result;
}

uint64_t sub_1000A4CA8()
{
  uint64_t v0;

  return sub_10009F45C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A4CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10009D28C(a1, v2 + 16, a2);
}

unint64_t sub_1000A4CD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118498;
  if (!qword_100118498)
  {
    v1 = sub_100005608(&qword_1001184A0);
    sub_100008078(&qword_1001184A8, &qword_1001184B0, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118498);
  }
  return result;
}

unint64_t sub_1000A4D58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001184B8;
  if (!qword_1001184B8)
  {
    v1 = sub_100005608(&qword_100118478);
    v2[0] = sub_100005608(&qword_100118488);
    v2[1] = sub_10003D3C8(&qword_100118490, &qword_100118488, (void (*)(void))sub_1000A4CD4);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
    sub_100008078(&qword_1001184C0, &qword_1001184C8, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001184B8);
  }
  return result;
}

uint64_t sub_1000A4E2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10009D610(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000A4E34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001184F0;
  if (!qword_1001184F0)
  {
    v1 = sub_100005608(&qword_1001184E8);
    sub_100008078(&qword_1001184F8, &qword_100118500, (uint64_t)&protocol conformance descriptor for LazyHStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001184F0);
  }
  return result;
}

uint64_t sub_1000A4EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 184;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v8 = (_QWORD *)(v0 + v6);
  swift_release(*v8);
  swift_release(v8[2]);
  swift_release(v8[4]);
  swift_release(v8[6]);
  swift_release(v8[7]);
  swift_bridgeObjectRelease(v8[10]);
  swift_release(v8[11]);
  swift_bridgeObjectRelease(v8[13]);
  swift_release(v8[14]);
  swift_release(v8[16]);
  swift_release(v8[18]);
  swift_bridgeObjectRelease(v8[21]);
  swift_release(v8[22]);
  return swift_deallocObject(v0, v7, v5);
}

uint64_t sub_1000A4F90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10009DCE8(v0 + v2, v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1000A4FD0()
{
  uint64_t v0;

  return sub_10009D7F0(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1000A4FD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118518;
  if (!qword_100118518)
  {
    v1 = sub_100005608(&qword_100118510);
    sub_100008078(&qword_100118520, &qword_100118528, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100118518);
  }
  return result;
}

uint64_t sub_1000A5060()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[12]);
  swift_release(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[18]);
  swift_release(v0[20]);
  swift_bridgeObjectRelease(v0[23]);
  swift_release(v0[24]);
  return swift_deallocObject(v0, 200, 7);
}

uint64_t sub_1000A50E4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10009DA44(a1, v2 + 16, a2);
}

uint64_t sub_1000A50EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  swift_release(*(_QWORD *)(v0 + 200));
  return swift_deallocObject(v0, 208, 7);
}

uint64_t sub_1000A5178(__n128 a1)
{
  uint64_t v1;

  return sub_10009DBD4(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

uint64_t sub_1000A5184()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v0 = sub_100005608(&qword_100117F48);
  v3 = sub_100005608(&qword_100117F40);
  v4 = &type metadata for Bool;
  v5 = sub_10003D3C8(&qword_100117FA8, &qword_100117F40, (void (*)(void))sub_1000A35CC);
  v6 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v3 = v0;
  v4 = (void *)OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.allowsSecureDrawing()>>, 1);
}

id sub_1000A5238()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)_UIKeyboardFeedbackGenerator), "init");
  qword_10011FE78 = (uint64_t)result;
  return result;
}

uint64_t destroy for InputTextView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_release(a1[4]);
}

uint64_t initializeWithCopy for InputTextView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[4];
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for InputTextView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = a1[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = a1[3];
  v10 = a2[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v9);
  v11 = a2[4];
  v12 = a1[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v12);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[6] = a2[6];
  return a1;
}

uint64_t *assignWithTake for InputTextView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  swift_release(a1[2]);
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v6);
  v7 = a1[4];
  a1[4] = a2[4];
  swift_release(v7);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for InputTextView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InputTextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InputTextView()
{
  return &type metadata for InputTextView;
}

uint64_t sub_1000A54D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6E8C, 1);
}

double sub_1000A54E0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  swift_retain(*a2);
  v7 = sub_100043890(v6, v5);
  swift_release(v4);
  sub_10002816C(a1, a2[3]);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_1000A5540()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v1 = sub_100005360(&qword_1001162C8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *((_OWORD *)v0 + 2);
  v18 = v0[6];
  v6 = *(_OWORD *)v0;
  v16 = *((_OWORD *)v0 + 1);
  v17 = v5;
  v15 = v6;
  v7 = BYTE8(v5);
  v8 = v18;
  v9 = v16;
  v10 = v5;
  v11 = type metadata accessor for Text.TruncationMode(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 1, 1, v11);
  v19 = v15;
  v20 = BYTE8(v15);
  sub_1000A56B0((uint64_t)&v16 + 8, (uint64_t)&v21);
  v12 = swift_allocObject(&unk_10010CF48, 72, 7);
  v13 = v16;
  *(_OWORD *)(v12 + 16) = v15;
  *(_OWORD *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 48) = v17;
  *(double *)(v12 + 64) = v18;
  swift_retain_n(v9, 2);
  swift_retain_n(v10, 2);
  sub_100052DCC(&v19);
  sub_100052DCC(&v21);
  return CalculateExpressionView.init(expression:isEditable:height:minFontSizeRatio:textAlignment:textColor:truncationMode:operationCallback:)(v9, v7, 0, 1, 2, v10, v4, sub_1000A5734, v8, v12);
}

uint64_t sub_1000A56B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100118548);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A56F8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_1000A5734(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000A54E0(a1, (uint64_t *)(v1 + 16));
}

unint64_t sub_1000A5740()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001162D8;
  if (!qword_1001162D8)
  {
    v1 = type metadata accessor for CalculateExpressionView(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculateExpressionView, v1);
    atomic_store(result, (unint64_t *)&qword_1001162D8);
  }
  return result;
}

void sub_1000A5788()
{
  id v0;
  id v1;
  id v2;

  if (!sub_100008B30())
  {
    v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v1 = objc_msgSend(v0, "userInterfaceIdiom");

    if (v1)
    {
      v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      objc_msgSend(v2, "bounds");

      sub_100009614();
    }
    else
    {
      sub_100008F40();
    }
  }
}

void sub_1000A5868(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  double v6;
  uint64_t KeyPath;
  unint64_t v8;
  uint64_t v9;

  if (!sub_100008B30())
  {
    v2 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v3 = objc_msgSend(v2, "userInterfaceIdiom");

    if (v3)
    {
      v4 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      objc_msgSend(v4, "bounds");
      v6 = v5;

      if (v6 != sub_100009614() && (sub_100009ED0() & 1) == 0)
      {
        KeyPath = swift_getKeyPath(&unk_1000D3850);
        v9 = a1;
        v8 = sub_10000A3E4();
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v8);
        swift_release(KeyPath);
      }
    }
  }
}

double sub_1000A59B0()
{
  uint64_t *v0;
  double v1;
  uint64_t *v2;
  double v3;
  uint64_t *v4;

  if (sub_1000090E4())
  {
    if (qword_100113B70 != -1)
      swift_once(&qword_100113B70, sub_10001BFC0);
    v0 = &qword_10011FA08;
  }
  else
  {
    if (qword_1001139A8 != -1)
      swift_once(&qword_1001139A8, sub_10001B778);
    v0 = &qword_10011F830;
  }
  v1 = *(double *)v0;
  if (sub_1000090E4())
  {
    if (qword_100113B68 != -1)
      swift_once(&qword_100113B68, sub_10001BFB0);
    v2 = &qword_10011FA00;
  }
  else
  {
    if (qword_1001139B0 != -1)
      swift_once(&qword_1001139B0, sub_10001B78C);
    v2 = &qword_10011F838;
  }
  v3 = *(double *)v2;
  if (sub_1000090E4())
  {
    if (qword_100113B80 != -1)
      swift_once(&qword_100113B80, sub_10001BFE4);
    v4 = &qword_10011FA18;
  }
  else
  {
    if (qword_1001139C0 != -1)
      swift_once(&qword_1001139C0, sub_10001B7AC);
    v4 = &qword_10011F848;
  }
  return v1 - v3 - *(double *)v4;
}

double sub_1000A5B2C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  double v5;
  void *v6;
  id v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = objc_msgSend(v0, "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2 == (id)1
    || (v3 = objc_msgSend(v0, "currentDevice"),
        v4 = objc_msgSend(v3, "userInterfaceIdiom"),
        v3,
        v5 = 2.0,
        v4 == (id)6))
  {
    v6 = (void *)objc_opt_self(UIScreen);
    v7 = objc_msgSend(v6, "mainScreen");
    objc_msgSend(v7, "bounds");
    v9 = v8;

    v5 = 5.0;
    if (v9 == sub_100009614())
    {
      v10 = objc_msgSend(v6, "mainScreen");
      objc_msgSend(v10, "bounds");
      v12 = v11;

      if (v12 == sub_100009CC4())
        return 2.0;
    }
  }
  return v5;
}

void sub_1000A5C60(uint64_t a1, char a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;

  v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4)
  {
    v5 = (void *)objc_opt_self(UIScreen);
    v6 = objc_msgSend(v5, "mainScreen");
    objc_msgSend(v6, "bounds");
    v8 = v7;

    if (v8 == sub_100009614())
    {
      v9 = objc_msgSend(v5, "mainScreen");
      objc_msgSend(v9, "bounds");
      v11 = v10;

      if (v11 == sub_100009CC4())
      {
        if (qword_1001139E8 != -1)
          swift_once(&qword_1001139E8, sub_10001B7FC);
        if ((a2 & 1) == 0)
          return;
LABEL_18:
        if (qword_1001139F0 != -1)
          swift_once(&qword_1001139F0, sub_10001B80C);
        return;
      }
    }
    if (qword_1001139E8 != -1)
      swift_once(&qword_1001139E8, sub_10001B7FC);
    sub_100009DE0();
    if ((a2 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    if (sub_100008B30() && qword_100113B60 != -1)
      swift_once(&qword_100113B60, sub_10001BDCC);
    if (qword_1001139F8 != -1)
      swift_once(&qword_1001139F8, sub_10001B81C);
    if ((a2 & 1) != 0)
      goto LABEL_18;
  }
}

void sub_1000A5E70(uint64_t a1, char a2)
{
  id v3;
  id v4;

  if ((sub_100008F40() & 1) == 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v4 = objc_msgSend(v3, "userInterfaceIdiom");

    if (v4 || (sub_100008CF4() & 1) == 0)
    {
      if ((a2 & 1) != 0)
      {
        sub_100009CC4();
        sub_100009BC4();
      }
      else
      {
        sub_100009ED0();
      }
      sub_100009BC4();
      sub_10000A93C();
    }
  }
}

double sub_1000A5FAC(uint64_t a1, char a2)
{
  char v3;
  id v4;
  id v5;
  double result;
  double v7;

  v3 = sub_100009ED0();
  v4 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  result = 61.0;
  v7 = 45.0;
  if ((v3 & 1) != 0)
  {
    result = 45.0;
    v7 = 22.0;
  }
  if ((a2 & 1) == 0)
    result = v7;
  if (!v5)
    return 28.0;
  return result;
}

double sub_1000A6050(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t KeyPath;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  _QWORD v19[3];

  v2 = type metadata accessor for UserInterfaceSizeClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v19[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v19[-1] - v9;
  v11 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v12 = objc_msgSend(v11, "userInterfaceIdiom");

  if (!v12)
    return INFINITY;
  KeyPath = swift_getKeyPath(&unk_1000D3878);
  v19[0] = a1;
  v14 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v14);
  swift_release(KeyPath);
  v15 = a1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess(a1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v19, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v10, v15, v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for UserInterfaceSizeClass.compact(_:), v2);
  LOBYTE(v15) = static UserInterfaceSizeClass.== infix(_:_:)(v10, v6);
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v6, v2);
  v16(v10, v2);
  if ((v15 & 1) != 0)
    return INFINITY;
  if (qword_100113A60 != -1)
    swift_once(&qword_100113A60, sub_10001B900);
  return *(double *)&qword_10011F8E8;
}

double sub_1000A6214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  double v13;
  uint64_t KeyPath;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v20[3];

  v2 = type metadata accessor for UserInterfaceSizeClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v20[-1] - v9;
  v11 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v12 = objc_msgSend(v11, "userInterfaceIdiom");

  v13 = 0.0;
  if (v12)
  {
    KeyPath = swift_getKeyPath(&unk_1000D3878);
    v20[0] = a1;
    v15 = sub_10000A3E4();
    ObservationRegistrar.access<A, B>(_:keyPath:)(v20, KeyPath, v15);
    swift_release(KeyPath);
    v16 = a1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
    swift_beginAccess(a1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v20, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v10, v16, v2);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for UserInterfaceSizeClass.compact(_:), v2);
    LOBYTE(v16) = static UserInterfaceSizeClass.== infix(_:_:)(v10, v6);
    v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v6, v2);
    v17(v10, v2);
    if ((v16 & 1) == 0)
    {
      if (qword_100113AD0 != -1)
        swift_once(&qword_100113AD0, sub_10001BA50);
      return *(double *)&qword_10011F958;
    }
  }
  return v13;
}

double sub_1000A63DC(uint64_t a1, char a2)
{
  double v2;
  double v3;

  if ((a2 & 1) != 0)
  {
    v2 = sub_100009CC4();
    v3 = dbl_1000D3840[v2 / sub_100009BC4() > 0.9];
  }
  else if ((sub_100009ED0() & 1) != 0)
  {
    v3 = 0.153846154;
  }
  else
  {
    v3 = 0.25;
  }
  return v3 * sub_100009BC4();
}

void sub_1000A6454(uint64_t a1, char a2)
{
  sub_1000A63DC(a1, a2);
  sub_100009ED0();
  if ((a2 & 1) != 0)
  {
    sub_100009CC4();
    sub_100009BC4();
  }
  else
  {
    sub_100009ED0();
  }
  sub_100009CC4();
}

void sub_1000A6540()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1)
  {
    sub_100009CC4();
    v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v2, "bounds");

  }
}

void sub_1000A6608()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1)
  {
    sub_100009BC4();
    v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v2, "bounds");

  }
}

uint64_t sub_1000A66D0(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  id v8;
  double v9;
  id v10;
  id v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = sub_100005360(&qword_1001162B8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)objc_opt_self(UIDevice);
  v7 = objc_msgSend(v6, "currentDevice");
  v8 = objc_msgSend(v7, "userInterfaceIdiom");

  if (v8 == (id)1)
  {
    v9 = 0.3;
  }
  else
  {
    v10 = objc_msgSend(v6, "currentDevice");
    v11 = objc_msgSend(v10, "userInterfaceIdiom");

    v9 = 0.333333333;
    if (v11 == (id)6)
      v9 = 0.3;
  }
  v12 = floor(v9 * a1);
  v13 = static Font.Weight.regular.getter();
  v14 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 1, 1, v14);
  v15 = static Font.system(size:weight:design:)(*(_QWORD *)&v13, 0, v5, v12);
  sub_1000898D4((uint64_t)v5);
  return v15;
}

double sub_1000A683C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double result;
  _OWORD v26[2];
  uint64_t v27;

  v0 = sub_100005360(&qword_100118550);
  v1 = swift_allocObject(v0, 168, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000D38A0;
  v2 = static Color.clear.getter(v1);
  *(_QWORD *)(v1 + 32) = v2;
  v3 = static Color.black.getter(v2);
  *(_QWORD *)(v1 + 40) = v3;
  v4 = static Color.black.getter(v3);
  *(_QWORD *)(v1 + 48) = v4;
  v5 = static Color.black.getter(v4);
  *(_QWORD *)(v1 + 56) = v5;
  v6 = static Color.black.getter(v5);
  *(_QWORD *)(v1 + 64) = v6;
  v7 = static Color.black.getter(v6);
  *(_QWORD *)(v1 + 72) = v7;
  v8 = static Color.black.getter(v7);
  *(_QWORD *)(v1 + 80) = v8;
  v9 = static Color.black.getter(v8);
  *(_QWORD *)(v1 + 88) = v9;
  v10 = static Color.black.getter(v9);
  *(_QWORD *)(v1 + 96) = v10;
  v11 = static Color.black.getter(v10);
  *(_QWORD *)(v1 + 104) = v11;
  v12 = static Color.black.getter(v11);
  *(_QWORD *)(v1 + 112) = v12;
  v13 = static Color.black.getter(v12);
  *(_QWORD *)(v1 + 120) = v13;
  v14 = static Color.black.getter(v13);
  *(_QWORD *)(v1 + 128) = v14;
  v15 = static Color.black.getter(v14);
  *(_QWORD *)(v1 + 136) = v15;
  v16 = static Color.black.getter(v15);
  *(_QWORD *)(v1 + 144) = v16;
  v17 = static Color.black.getter(v16);
  *(_QWORD *)(v1 + 152) = v17;
  v18 = static Color.clear.getter(v17);
  *(_QWORD *)(v1 + 160) = v18;
  *(_QWORD *)&v26[0] = v1;
  specialized Array._endMutation()(v18);
  v19 = Gradient.init(colors:)(v1);
  v20 = static UnitPoint.leading.getter();
  v22 = v21;
  v23 = static UnitPoint.trailing.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(v26, v19, v20, v22, v23, v24);
  result = *(double *)v26;
  xmmword_10011FE80 = v26[0];
  unk_10011FE90 = v26[1];
  qword_10011FEA0 = v27;
  return result;
}

double sub_1000A6974(unsigned __int8 a1, double a2, double a3)
{
  double v6;
  BOOL v7;
  double v8;

  if (qword_100113EE0 != -1)
    swift_once(&qword_100113EE0, sub_1000A6AE8);
  v6 = 0.43;
  if (!sub_10003B98C(a1, qword_100118558))
  {
    if (qword_100113EE8 != -1)
      swift_once(&qword_100113EE8, sub_1000A6B0C);
    if (!sub_10003B98C(a1, qword_100118560))
    {
      if (qword_100113EF8 != -1)
        swift_once(&qword_100113EF8, sub_1000A6B54);
      if (sub_10003B98C(a1, qword_100118570))
      {
        v6 = 0.44;
      }
      else
      {
        if (qword_100113EF0 != -1)
          swift_once(&qword_100113EF0, sub_1000A6B30);
        v7 = sub_10003B98C(a1, qword_100118568);
        v8 = 0.3;
        if (a3 < a2)
          v8 = 0.34;
        if (v7)
          v6 = 0.36;
        else
          v6 = v8;
      }
    }
  }
  return round(v6 * a3 + v6 * a3) * 0.5;
}

Swift::Int sub_1000A6AE8()
{
  Swift::Int result;

  result = sub_10005191C((uint64_t)&off_1001080F8);
  qword_100118558 = result;
  return result;
}

Swift::Int sub_1000A6B0C()
{
  Swift::Int result;

  result = sub_10005191C((uint64_t)&off_100108128);
  qword_100118560 = result;
  return result;
}

Swift::Int sub_1000A6B30()
{
  Swift::Int result;

  result = sub_10005191C((uint64_t)&off_100108180);
  qword_100118568 = result;
  return result;
}

Swift::Int sub_1000A6B54()
{
  Swift::Int result;

  result = sub_10005191C((uint64_t)&off_100108158);
  qword_100118570 = result;
  return result;
}

uint64_t destroy for UnitConversionUnitButton(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[6]);
  swift_release(a1[7]);
  swift_release(a1[8]);
  swift_release(a1[9]);
  swift_release(a1[10]);
  return swift_release(a1[11]);
}

uint64_t initializeWithCopy for UnitConversionUnitButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t assignWithCopy for UnitConversionUnitButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = *(_QWORD *)(a2 + 88);
  v19 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v18;
  swift_retain(v18);
  swift_release(v19);
  return a1;
}

__n128 initializeWithTake for UnitConversionUnitButton(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for UnitConversionUnitButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v8);
  swift_release(*(_QWORD *)(a1 + 56));
  v9 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release(v9);
  swift_release(*(_QWORD *)(a1 + 72));
  v10 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v10);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnitConversionUnitButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnitConversionUnitButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitConversionUnitButton()
{
  return &type metadata for UnitConversionUnitButton;
}

uint64_t sub_1000A6EF8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6ED0, 1);
}

uint64_t sub_1000A6F08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_100005360(&qword_100118600);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t sub_1000A6F60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;
  uint64_t v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103[16];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v2 = v1;
  v100 = a1;
  v3 = type metadata accessor for AttributeContainer(0);
  v5 = __chkstk_darwin(v3, v4);
  v99 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString(0, v5);
  v9 = __chkstk_darwin(v7, v8);
  v98 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlainButtonStyle(0, v9);
  v12 = *(_QWORD *)(v11 - 8);
  v95 = v11;
  v96 = v12;
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_100118578);
  v93 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005360(&qword_100118580);
  v91 = *(_QWORD *)(v20 - 8);
  v92 = v20;
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100005360(&qword_100118588);
  __chkstk_darwin(v89, v24);
  v26 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100005360(&qword_100118590);
  __chkstk_darwin(v90, v27);
  v29 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100005360(&qword_100118598);
  __chkstk_darwin(v101, v30);
  v32 = (char *)&v88 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  v94 = (char *)&v88 - v35;
  __chkstk_darwin(v36, v37);
  v97 = (char *)&v88 - v38;
  v39 = (_OWORD *)swift_allocObject(&unk_10010D048, 112, 7);
  v40 = *(_OWORD *)(v2 + 48);
  v39[3] = *(_OWORD *)(v2 + 32);
  v39[4] = v40;
  v41 = *(_OWORD *)(v2 + 80);
  v39[5] = *(_OWORD *)(v2 + 64);
  v39[6] = v41;
  v42 = *(_OWORD *)(v2 + 16);
  v39[1] = *(_OWORD *)v2;
  v39[2] = v42;
  v104 = v2;
  sub_1000A7D90((_QWORD *)v2);
  v43 = sub_100005360(&qword_1001185A0);
  v44 = sub_1000A7E18();
  v45 = Button.init(action:label:)(sub_1000A7D68, v39, sub_1000A7D88, v103, v43, v44);
  PlainButtonStyle.init()(v45);
  v46 = sub_100008078(&qword_1001185E0, &qword_100118578, (uint64_t)&protocol conformance descriptor for Button<A>);
  v47 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v48 = v95;
  View.buttonStyle<A>(_:)(v15, v16, v95, v46, v47);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v15, v48);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v19, v16);
  KeyPath = swift_getKeyPath(&unk_1000D3950);
  v51 = v91;
  v50 = v92;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v26, v23, v92);
  v52 = (uint64_t *)&v26[*(int *)(v89 + 36)];
  *v52 = KeyPath;
  v52[1] = 0x3FB999999999999ALL;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v23, v50);
  v53 = swift_getKeyPath(&unk_1000D3980);
  sub_1000A7F9C((uint64_t)v26, (uint64_t)v29);
  v54 = v90;
  v55 = &v29[*(int *)(v90 + 36)];
  *(_QWORD *)v55 = v53;
  *((_QWORD *)v55 + 1) = 2;
  v55[16] = 0;
  sub_100004F48((uint64_t)v26, &qword_100118588);
  v56 = *(_QWORD *)v2;
  v57 = *(_QWORD *)(v2 + 8);
  v58 = sub_1000A7FE4();
  View.accessibilityIdentifier(_:)(v56, v57, v54, v58);
  sub_100004F48((uint64_t)v29, &qword_100118590);
  v105 = v56;
  v106 = v57;
  v59 = sub_100004F84();
  v60 = (uint64_t)v94;
  v61 = v101;
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v105, v101, &type metadata for String, v59);
  sub_100004F48((uint64_t)v32, &qword_100118598);
  v105 = v56;
  v106 = v57;
  swift_bridgeObjectRetain(v57);
  v62._countAndFlagsBits = 10272;
  v62._object = (void *)0xE200000000000000;
  String.append(_:)(v62);
  v63 = *(_QWORD *)(v2 + 16);
  v64 = *(void **)(v2 + 24);
  swift_bridgeObjectRetain(v64);
  v65._countAndFlagsBits = v63;
  v65._object = v64;
  String.append(_:)(v65);
  swift_bridgeObjectRelease(v64);
  v66._countAndFlagsBits = 41;
  v66._object = (void *)0xE100000000000000;
  String.append(_:)(v66);
  v67 = v106;
  v68 = (uint64_t)v97;
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)(0xD00000000000002ALL, 0x80000001000D7EE0, v105, v106, v61);
  swift_bridgeObjectRelease(v67);
  sub_100004F48(v60, &qword_100118598);
  v69 = LocalizedStringKey.init(stringLiteral:)(0x6169766572626241, 0xEC0000006E6F6974);
  v71 = v70;
  LOBYTE(v2) = v72;
  v74 = v73;
  v75 = swift_bridgeObjectRetain(v64);
  v76 = v99;
  AttributeContainer.init()(v75);
  v77 = v98;
  AttributedString.init(_:attributes:)(v63, v64, v76);
  v102 = swift_getKeyPath(&unk_1000D39B0);
  v78 = swift_getKeyPath(&unk_1000D39E0);
  LOBYTE(v105) = 1;
  v79 = sub_1000A818C();
  AttributedString.subscript.setter(&v105, v78, v79);
  v80 = Text.init(_:)(v77);
  v82 = v81;
  v84 = v83;
  v86 = v85 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)(v69, v71, v2 & 1, v74, v80, v81, v86, v83, 0, v101);
  sub_10002DD44(v80, v82, v86);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v71);
  swift_bridgeObjectRelease(v84);
  return sub_100004F48(v68, &qword_100118598);
}

void *sub_1000A7594@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  __n128 v38;
  _OWORD v39[10];
  _OWORD v40[2];
  _OWORD v41[12];
  char v42;
  char v43;
  char v44;
  _BYTE __src[376];

  v5 = static VerticalAlignment.center.getter(a3);
  v7 = sub_1000A7788(a1, (uint64_t)v39, v6);
  *(_OWORD *)((char *)&v41[8] + 7) = v39[8];
  *(_OWORD *)((char *)&v41[9] + 7) = v39[9];
  *(_OWORD *)((char *)&v41[10] + 7) = v40[0];
  v41[11] = *(_OWORD *)((char *)v40 + 9);
  *(_OWORD *)((char *)&v41[4] + 7) = v39[4];
  *(_OWORD *)((char *)&v41[5] + 7) = v39[5];
  *(_OWORD *)((char *)&v41[6] + 7) = v39[6];
  *(_OWORD *)((char *)&v41[7] + 7) = v39[7];
  *(_OWORD *)((char *)v41 + 7) = v39[0];
  *(_OWORD *)((char *)&v41[1] + 7) = v39[1];
  *(_OWORD *)((char *)&v41[2] + 7) = v39[2];
  v42 = 1;
  *(_OWORD *)((char *)&v41[3] + 7) = v39[3];
  if (qword_100113A70 != -1)
    v7 = swift_once(&qword_100113A70, sub_10001B928);
  v8 = qword_10011F8F8;
  v9 = static Alignment.center.getter(v7);
  _FrameLayout.init(width:height:alignment:)(&v14, 0, 1, v8, 0, v9, v10);
  v30 = v41[8];
  v31 = v41[9];
  v32 = v41[10];
  v33 = v41[11];
  v26 = v41[4];
  v27 = v41[5];
  v28 = v41[6];
  v29 = v41[7];
  v22 = v41[0];
  v23 = v41[1];
  v24 = v41[2];
  v44 = v15;
  v43 = v17;
  v19 = v5;
  v20 = 0;
  v21 = 1;
  v25 = v41[3];
  v34 = v14;
  v35 = v15;
  v36 = v16;
  v37 = v17;
  v38 = v18;
  v11 = static Alignment.leading.getter(v18);
  sub_100036474(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)__src, 0.0, 1, 0.0, 1, v11, v12);
  sub_1000A8268((uint64_t)v39);
  result = memcpy(a2, __src, 0x178uLL);
  a2[376] = 0;
  return result;
}

uint64_t sub_1000A7788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v5 = static HorizontalAlignment.leading.getter(a3);
  sub_1000A7A6C((uint64_t *)a1, (uint64_t)v47);
  v6 = v47[0];
  v7 = v47[1];
  v8 = v48;
  v9 = v50;
  v36 = v51;
  v10 = v52;
  v45 = v49;
  v46 = v53;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v35 = v5;
    if (qword_100113BD0 != -1)
      swift_once(&qword_100113BD0, sub_10002E078);
    v22 = qword_10011FA88;
    v23 = *(_QWORD *)(a1 + 88);
    KeyPath = swift_getKeyPath(&unk_1000D3A20);
    v24 = *(_QWORD *)(a1 + 64);
    v43 = v22;
    swift_retain(v22);
    v41 = v23;
    v25 = swift_retain(v23);
    v37 = Font.bold()(v24, v25);
    v26 = swift_getKeyPath(&unk_1000D3A50);
    v27 = static Edge.Set.leading.getter(v26);
    v28 = v27;
    if (qword_100113B48 != -1)
      v27 = swift_once(&qword_100113B48, sub_10001BB40);
    v18 = EdgeInsets.init(_all:)(v27, *(double *)&qword_10011F9D0);
    v19 = v29;
    v20 = v30;
    v21 = v31;
    v17 = v28;
    v11 = 1;
    v14 = v41;
    v12 = v43;
    v16 = v37;
    v13 = KeyPath;
    v15 = v26;
    v5 = v35;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0.0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  v40 = v13;
  v42 = v14;
  v44 = v12;
  v34 = v15;
  v38 = v16;
  LOBYTE(v47[0]) = 0;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v45;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v36;
  *(_BYTE *)(a2 + 72) = v10;
  *(_QWORD *)(a2 + 80) = v46;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v11;
  *(_QWORD *)(a2 + 104) = v12;
  *(_QWORD *)(a2 + 112) = v13;
  *(_QWORD *)(a2 + 120) = v14;
  *(_QWORD *)(a2 + 128) = v15;
  *(_QWORD *)(a2 + 136) = v16;
  *(_QWORD *)(a2 + 144) = v17;
  *(double *)(a2 + 152) = v18;
  *(_QWORD *)(a2 + 160) = v19;
  *(_QWORD *)(a2 + 168) = v20;
  *(_QWORD *)(a2 + 176) = v21;
  *(_BYTE *)(a2 + 184) = 0;
  v32 = v11;
  sub_10002DE88(v6, v7, v8);
  swift_bridgeObjectRetain(v45);
  sub_10002DE88(v9, v36, v10);
  swift_bridgeObjectRetain(v46);
  sub_10003B134(0, v32, v44, v40, v42, v34, v38);
  sub_1000A8350(0, v32, v44, v40, v42, v34, v38);
  sub_10002DD44(v6, v7, v8);
  swift_bridgeObjectRelease(v45);
  sub_10002DD44(v9, v36, v10);
  return swift_bridgeObjectRelease(v46);
}

uint64_t sub_1000A7A6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = a1[1];
  v57 = *a1;
  v58 = v4;
  v52 = sub_100004F84();
  v5 = swift_bridgeObjectRetain(v4);
  v8 = Text.init<A>(_:)(&v57, &type metadata for String, v52, v5);
  v9 = v6;
  v10 = v7;
  v12 = v11 & 1;
  v13 = 88;
  v14 = 9;
  if ((a1[4] & 1) != 0)
    v14 = 11;
  else
    v13 = 80;
  v51 = v13;
  v15 = Text.foregroundColor(_:)(a1[v14], v8, v6, v12, v7);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  sub_10002DD44(v8, v9, v12);
  swift_bridgeObjectRelease(v10);
  v23 = Text.font(_:)(a1[7], v15, v17, v21, v19, v22);
  v54 = v24;
  v55 = v23;
  v56 = v25;
  v53 = v26 & 1;
  sub_10002DD44(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  v27 = a1[3];
  v57 = a1[2];
  v58 = v27;
  v28 = swift_bridgeObjectRetain(v27);
  v29 = Text.init<A>(_:)(&v57, &type metadata for String, v52, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v36 = Text.foregroundColor(_:)(*(uint64_t *)((char *)a1 + v51), v29, v30, v35, v32);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  sub_10002DD44(v29, v31, v35);
  swift_bridgeObjectRelease(v33);
  v44 = Text.font(_:)(a1[8], v36, v38, v42, v40, v43);
  v46 = v45;
  v48 = v47;
  LOBYTE(v33) = v49 & 1;
  sub_10002DD44(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  LOBYTE(v57) = v53;
  *(_QWORD *)a2 = v55;
  *(_QWORD *)(a2 + 8) = v54;
  *(_BYTE *)(a2 + 16) = v53;
  *(_QWORD *)(a2 + 24) = v56;
  *(_QWORD *)(a2 + 32) = v44;
  *(_QWORD *)(a2 + 40) = v46;
  *(_BYTE *)(a2 + 48) = v33;
  *(_QWORD *)(a2 + 56) = v48;
  sub_10002DE88(v55, v54, v53);
  swift_bridgeObjectRetain(v56);
  sub_10002DE88(v44, v46, v33);
  swift_bridgeObjectRetain(v48);
  sub_10002DD44(v44, v46, v33);
  swift_bridgeObjectRelease(v48);
  sub_10002DD44(v55, v54, v57);
  return swift_bridgeObjectRelease(v56);
}

uint64_t sub_1000A7CCC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A6F60(a1);
}

uint64_t sub_1000A7D0C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1000A7D68()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

void *sub_1000A7D88@<X0>(_BYTE *a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_1000A7594(*(_QWORD *)(v2 + 16), a1, a2);
}

_QWORD *sub_1000A7D90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[3];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

unint64_t sub_1000A7E18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001185A8;
  if (!qword_1001185A8)
  {
    v1 = sub_100005608(&qword_1001185A0);
    sub_1000A7E9C();
    sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001185A8);
  }
  return result;
}

unint64_t sub_1000A7E9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001185B0;
  if (!qword_1001185B0)
  {
    v1 = sub_100005608(&qword_1001185B8);
    sub_1000A7F08();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001185B0);
  }
  return result;
}

unint64_t sub_1000A7F08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001185C0;
  if (!qword_1001185C0)
  {
    v1 = sub_100005608(&qword_1001185C8);
    sub_100008078(&qword_1001185D0, &qword_1001185D8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001185C0);
  }
  return result;
}

uint64_t sub_1000A7F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100118588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A7FE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001185E8;
  if (!qword_1001185E8)
  {
    v1 = sub_100005608(&qword_100118590);
    sub_1000A8068();
    sub_100008078(&qword_100116320, &qword_100116328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001185E8);
  }
  return result;
}

unint64_t sub_1000A8068()
{
  unint64_t result;
  uint64_t v1;
  __n128 v2;
  _QWORD v3[4];

  result = qword_1001185F0;
  if (!qword_1001185F0)
  {
    v1 = sub_100005608(&qword_100118588);
    v3[0] = sub_100005608(&qword_100118578);
    v3[1] = type metadata accessor for PlainButtonStyle(255, v2);
    v3[2] = sub_100008078(&qword_1001185E0, &qword_100118578, (uint64_t)&protocol conformance descriptor for Button<A>);
    v3[3] = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100008078(&qword_100114E98, &qword_100114EA0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001185F0);
  }
  return result;
}

void sub_1000A8170()
{
  AttributeScopes.AccessibilityAttributes.accessibilitySpeechSpellsOutCharacters.getter();
  __break(1u);
}

unint64_t sub_1000A818C()
{
  unint64_t result;

  result = qword_1001185F8;
  if (!qword_1001185F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.AccessibilityAttributes.SpellOutAttribute, &type metadata for AttributeScopes.AccessibilityAttributes.SpellOutAttribute);
    atomic_store(result, (unint64_t *)&qword_1001185F8);
  }
  return result;
}

void sub_1000A81D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_1000A818C();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_1000A81F4()
{
  return 8;
}

uint64_t sub_1000A8200(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000A8208(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A8218()
{
  uint64_t v0;

  v0 = sub_100005360(&qword_100118600);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_1000A825C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000A8268(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 136);
  v10 = *(_QWORD *)(a1 + 128);
  sub_10002DD44(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_10002DD44(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  sub_1000A8350(v14, v13, v12, v7, v11, v10, v9);
  return a1;
}

uint64_t sub_1000A8350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a3)
  {
    swift_release(a3);
    swift_release(a4);
    swift_release(a6);
    swift_release(a5);
    return swift_release(a7);
  }
  return result;
}

unint64_t sub_1000A83C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118608;
  if (!qword_100118608)
  {
    v1 = sub_100005608(&qword_100118598);
    sub_1000A7FE4();
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118608);
  }
  return result;
}

uint64_t sub_1000A8444()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_100007BF8();
  EnvironmentValues.subscript.getter(&v2, &type metadata for KeypadButtonActionKey, &type metadata for KeypadButtonActionKey, v0);
  return v2;
}

ValueMetadata *type metadata accessor for KeypadButtonActionKey()
{
  return &type metadata for KeypadButtonActionKey;
}

void destroy for KeypadButtonAction(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

}

_QWORD *_s10Calculator18KeypadButtonActionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_retain(v3);
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for KeypadButtonAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a1[2];
  v7 = (void *)a2[2];
  a1[2] = v7;
  v8 = v7;

  return a1;
}

uint64_t assignWithTake for KeypadButtonAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for KeypadButtonAction()
{
  return &type metadata for KeypadButtonAction;
}

void sub_1000A85A0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1000A85AC(uint64_t a1)
{
  return sub_1000A85F0(a1, qword_10011FEA8, 0x746C7561666544, 0xE700000000000000);
}

uint64_t sub_1000A85CC(uint64_t a1)
{
  return sub_1000A85F0(a1, qword_10011FEC0, 0x636974796C616E41, 0xE900000000000073);
}

uint64_t sub_1000A85F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = type metadata accessor for Logger(0);
  sub_10001C038(v7, a2);
  sub_100014124(v7, (uint64_t)a2);
  v8 = qword_100118610;
  v9 = off_100118618;
  swift_bridgeObjectRetain(off_100118618);
  return Logger.init(subsystem:category:)(v8, v9, a3, a4);
}

ValueMetadata *type metadata accessor for ModeButtonAnchorKey()
{
  return &type metadata for ModeButtonAnchorKey;
}

void sub_1000A8684(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1000A8698(_QWORD *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  char v9;
  uint64_t v10;

  a2(&v10);
  v4 = v10;
  if (v10)
  {
    v5 = *a1;
    v6 = swift_retain(*a1);
    ((void (*)(uint64_t *__return_ptr, __n128))a2)(&v10, v6);
    v7 = v10;
    if (v5)
    {
      if (v10)
      {
        type metadata accessor for CGRect(0);
        sub_1000A878C();
        v8 = swift_retain(v5);
        v9 = static Anchor<A>.== infix(_:_:)(v8);
        swift_release_n(v5, 2);
        swift_release(v7);
        if ((v9 & 1) == 0)
          goto LABEL_10;
LABEL_8:
        swift_release(v4);
        return;
      }
      swift_release(v5);
    }
    else
    {
      if (!v10)
        goto LABEL_8;
      v5 = v10;
    }
LABEL_10:
    swift_release(v5);
    *a1 = v4;
  }
}

unint64_t sub_1000A878C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118620;
  if (!qword_100118620)
  {
    type metadata accessor for CGRect(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CGRect, v1);
    atomic_store(result, (unint64_t *)&qword_100118620);
  }
  return result;
}

void destroy for HistoryExpressionViewHelp(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *_s10Calculator25HistoryExpressionViewHelpVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for HistoryExpressionViewHelp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a1[2];
  v7 = (void *)a2[2];
  a1[2] = v7;
  v8 = v7;

  return a1;
}

_QWORD *assignWithTake for HistoryExpressionViewHelp(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for HistoryExpressionViewHelp(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryExpressionViewHelp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryExpressionViewHelp()
{
  return &type metadata for HistoryExpressionViewHelp;
}

uint64_t sub_1000A8974(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6F70, 1);
}

uint64_t sub_1000A8984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::String v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;

  v38 = a1;
  v39 = sub_100005360(&qword_100118628);
  __chkstk_darwin(v39, v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100118630);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = a2;
  v41 = a3;
  if (a4)
  {
    swift_bridgeObjectRetain(a3);
    v17._countAndFlagsBits = 32;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18 = v40;
    v19 = v41;
    v37 = a4;
    v20 = objc_msgSend(v37, "displayName");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v36 = a5;
    v22 = v21;
    v24 = v23;

    v40 = v18;
    v41 = v19;
    swift_bridgeObjectRetain(v19);
    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v24);
    v26 = v41;
    v27 = sub_100005360(&qword_100118638);
    v28 = sub_1000A8C58();
    v29 = sub_100004F84();
    View.help<A>(_:)(&v40, v27, &type metadata for String, v28, v29);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v16, v12);
    swift_storeEnumTagMultiPayload(v11, v39, 0);
    v40 = v27;
    v41 = &type metadata for String;
    v42 = v28;
    v43 = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.help<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v36, v11, v12, v12, OpaqueTypeConformance2, OpaqueTypeConformance2);

  }
  else
  {
    v31 = sub_100005360(&qword_100118638);
    v32 = sub_1000A8C58();
    v33 = sub_100004F84();
    View.help<A>(_:)(&v40, v31, &type metadata for String, v32, v33);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v16, v12);
    swift_storeEnumTagMultiPayload(v11, v39, 1);
    v40 = v31;
    v41 = &type metadata for String;
    v42 = v32;
    v43 = v33;
    v34 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.help<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(a5, v11, v12, v12, v34, v34);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_1000A8C4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000A8984(a1, *(_QWORD *)v2, *(_QWORD **)(v2 + 8), *(void **)(v2 + 16), a2);
}

unint64_t sub_1000A8C58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118640;
  if (!qword_100118640)
  {
    v1 = sub_100005608(&qword_100118638);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100118640);
  }
  return result;
}

unint64_t sub_1000A8CA8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100118648;
  if (!qword_100118648)
  {
    v1 = sub_100005608(&qword_100118650);
    v2[0] = sub_100005608(&qword_100118638);
    v2[1] = &type metadata for String;
    v2[2] = sub_1000A8C58();
    v2[3] = sub_100004F84();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.help<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118648);
  }
  return result;
}

id sub_1000A8D50()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  qword_10011FED8 = (uint64_t)result;
  return result;
}

uint64_t sub_1000A8D88()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D3CD8);
  v4 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 41);
}

double sub_1000A8E0C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D3CB0);
  v4 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

double sub_1000A8E94()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D3D28);
  v4 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 32)).n128_u64[0];
  return result;
}

double sub_1000A8F1C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v2 = v1;
  v4 = sub_1000AC150();
  v5 = swift_retain(v4);
  v6 = CalculateExpression.activeError.getter(v5);
  if (v6
    || (swift_release(v4),
        v4 = sub_1000AC248(),
        v7 = swift_retain(v4),
        (v6 = CalculateExpression.activeError.getter(v7)) != 0))
  {
    swift_errorRelease(v6);
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  else
  {
    swift_release(v4);
    if ((a1 & 1) == 0)
    {
      v9 = sub_1000AC248();
      swift_retain(v9);
      v10 = sub_1000AC150();
      v11 = swift_retain(v10);
      v12 = CalculateExpression.expression.getter(v11);
      v14 = v13;
      v15 = swift_release(v10);
      CalculateExpression.expression.setter(v12, v14, v15);
      swift_release(v9);
    }
    v16 = sub_1000AC150();
    swift_retain(v16);
    CalculateExpression.inlineEvaluate()();
    swift_release(v16);
    KeyPath = swift_getKeyPath(&unk_1000D3CD8);
    v23 = v2;
    v18 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v18);
    *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
    if ((*(_BYTE *)(v2 + 41) & 1) == 0)
    {
      v19 = swift_getKeyPath(&unk_1000D3CD8);
      __chkstk_darwin(v19, v20);
      v21[2] = v2;
      v22 = 1;
      v23 = v2;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v19, sub_1000AC390, v21, (char *)&type metadata for () + 8, v18);
      *(_QWORD *)&result = swift_release(v19).n128_u64[0];
    }
  }
  return result;
}

void sub_1000A90EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  __n128 v19;
  void *v20;
  char v21;
  void *v22;
  id v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  double v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  char *v73;
  char *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CalculateExpression.Base(0, v4);
  v77 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000D3D00);
  v78 = v0;
  v12 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, KeyPath, v12);
  swift_release(KeyPath);
  if (*(_BYTE *)(v0 + 40) == 1)
    v13 = sub_100047730();
  else
    v13 = sub_1000478E8();
  v14 = v13;
  v15 = swift_getKeyPath(&unk_1000D3D00);
  v78 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v15, v12);
  swift_release(v15);
  if (*(_BYTE *)(v0 + 40) == 1)
    v16 = sub_1000478E8();
  else
    v16 = sub_100047730();
  v17 = v16;
  v18 = swift_getKeyPath(&unk_1000D3DC8);
  v78 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v18, v12);
  v19 = swift_release(v18);
  if ((*(_BYTE *)(v0 + 43) & 1) == 0)
  {
    type metadata accessor for StocksKitCurrencyCache(0, v19);
    if ((static StocksKitCurrencyCache.isEnabled.getter() & 1) != 0)
    {
      v20 = (void *)static StocksKitCurrencyCache.shared.getter();
      v21 = dispatch thunk of StocksKitCurrencyCache.needsRefresh.getter();

      if ((v21 & 1) == 0)
        goto LABEL_14;
      v22 = &unk_100118760;
    }
    else
    {
      v23 = objc_msgSend((id)objc_opt_self(CalculateCurrencyCache), "shared");
      v24 = objc_msgSend(v23, "needsRefresh");

      if (!v24)
        goto LABEL_14;
      v22 = &unk_100118758;
    }
    sub_1000AB798((uint64_t)v22, 0, v1);
  }
LABEL_14:
  v25 = sub_1000AC150();
  v26 = swift_retain(v25);
  v27 = (void *)CalculateExpression.result.getter(v26);
  swift_release(v25);

  if (!v27)
  {
    v51 = sub_1000AC248();
    swift_retain(v51);
    v52 = sub_1000AC150();
    v53 = swift_retain(v52);
    CalculateExpression.inlineEvaluate(_:)(v53);
    swift_release(v51);
    swift_release(v52);
    v54 = swift_getKeyPath(&unk_1000D3D50);
    v78 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v54, v12);
    swift_release(v54);
    if ((*(_BYTE *)(v1 + 42) & 1) == 0)
    {

      return;
    }
    v55 = swift_getKeyPath(&unk_1000D3D50);
    __chkstk_darwin(v55, v56);
    *(&v70 - 2) = v1;
    *((_BYTE *)&v70 - 8) = 0;
    v78 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v78, v55, sub_1000AC3B8, &v70 - 4, (char *)&type metadata for () + 8, v12);

    goto LABEL_22;
  }
  v73 = v10;
  v74 = v6;
  v72 = v7;
  v28 = sub_1000AC150();
  v29 = swift_retain(v28);
  v30 = CalculateExpression.expression.getter(v29);
  v32 = v31;
  swift_release(v28);
  v33 = v14;
  v34 = v17;
  v35 = sub_1000AADB0(v30, v32, 1, v14, v17);
  swift_bridgeObjectRelease(v32);
  v76 = v33;

  v75 = v34;
  if (!v35)
  {
    v57 = sub_1000AC248();
    swift_retain(v57);
    v58 = sub_1000AC150();
    v59 = swift_retain(v58);
    CalculateExpression.inlineEvaluate(_:)(v59);
    swift_release(v57);
    swift_release(v58);
    v60 = swift_getKeyPath(&unk_1000D3D50);
    v78 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v60, v12);
    swift_release(v60);
    v62 = v75;
    v61 = v76;
    if ((*(_BYTE *)(v1 + 42) & 1) == 0)
    {

      return;
    }
    v55 = swift_getKeyPath(&unk_1000D3D50);
    __chkstk_darwin(v55, v63);
    *(&v70 - 2) = v1;
    *((_BYTE *)&v70 - 8) = 0;
    v78 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v78, v55, sub_1000AC83C, &v70 - 4, (char *)&type metadata for () + 8, v12);

LABEL_22:
    swift_release(v55);
    return;
  }
  v36 = v35;
  v37 = sub_1000AC248();
  type metadata accessor for CalculateExpression(0);
  v71 = v36;
  swift_retain(v37);
  v38 = sub_1000AC248();
  v39 = swift_retain(v38);
  v40 = CalculateExpression.options.getter(v39);
  v41 = swift_release(v38);
  v42 = v73;
  v43 = (*(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v77 + 104))(v73, enum case for CalculateExpression.Base.base10(_:), v72, v41);
  v44 = v74;
  UUID.init()(v43);
  v45 = CalculateExpression.__allocating_init(result:error:options:base:id:)(v35, 0, v40, v42, v44);
  CalculateExpression.inlineEvaluate(_:)(v45);
  swift_release(v37);
  swift_release(v45);
  v46 = sub_1000AC150();
  v47 = swift_retain(v46);
  v48 = (void *)CalculateExpression.result.getter(v47);
  *(_QWORD *)&v49 = swift_release(v46).n128_u64[0];
  if (v48)
  {
    v50 = objc_msgSend(v48, "isPartialExpression", v49);

  }
  else
  {
    v50 = 0;
  }
  v65 = v75;
  v64 = v76;
  v66 = v71;
  v67 = swift_getKeyPath(&unk_1000D3D50);
  v78 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v67, v12);
  swift_release(v67);
  if (v50 == *(unsigned __int8 *)(v1 + 42))
  {

  }
  else
  {
    v68 = swift_getKeyPath(&unk_1000D3D50);
    __chkstk_darwin(v68, v69);
    *(&v70 - 2) = v1;
    *((_BYTE *)&v70 - 8) = v50;
    v78 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v78, v68, sub_1000AC83C, &v70 - 4, (char *)&type metadata for () + 8, v12);

    swift_release(v68);
  }
}

uint64_t sub_1000A978C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D3D00);
  v4 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 40);
}

void sub_1000A9810(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  _BYTE v47[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = v2;
  if ((a2 & 1) != 0)
  {
    if (a1 == 52)
    {
      v5 = sub_1000AC150();
      swift_retain(v5);
      CalculateExpression.clear()();
      swift_release(v5);
      v6 = sub_1000AC248();
      swift_retain(v6);
      CalculateExpression.clear()();
      swift_release(v6);
      KeyPath = swift_getKeyPath(&unk_1000D3CD8);
      v51 = v3;
      v8 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, KeyPath, v8);
      swift_release(KeyPath);
      if (*(_BYTE *)(v3 + 41) == 1)
      {
LABEL_7:
        v12 = swift_getKeyPath(&unk_1000D3CD8);
        __chkstk_darwin(v12, v13);
        v48 = v3;
        LOBYTE(v49) = 0;
        v51 = v3;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v51, v12, sub_1000AC864, v47, (char *)&type metadata for () + 8, v8);
        v14 = v12;
LABEL_8:
        swift_release(v14);
      }
LABEL_9:
      v15 = swift_getKeyPath(&unk_1000D3CD8);
      v51 = v3;
      v16 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, v15, v16);
      swift_release(v15);
      if (*(_BYTE *)(v3 + 41) == 1)
      {
        if (a1 > 0x2Eu
          || ((1 << a1) & 0x40000B800000) == 0
          && (a1 != 26
           || (v17 = swift_getKeyPath(&unk_1000D3DA0),
               v51 = v3,
               ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, v17, v16),
               swift_release(v17),
               *(_QWORD *)(v3 + 48))))
        {
          v18 = swift_getKeyPath(&unk_1000D3CD8);
          v51 = v3;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, v18, v16);
          swift_release(v18);
          if (*(_BYTE *)(v3 + 41) == 1)
          {
            v19 = swift_getKeyPath(&unk_1000D3CD8);
            __chkstk_darwin(v19, v20);
            v48 = v3;
            LOBYTE(v49) = 0;
            v51 = v3;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v51, v19, sub_1000AC864, v47, (char *)&type metadata for () + 8, v16);
            swift_release(v19);
          }
        }
      }
      return;
    }
  }
  else
  {
    if (a1 == 1)
    {
      v9 = sub_1000AC150();
      swift_retain(v9);
      CalculateExpression.clear()();
      swift_release(v9);
      v10 = sub_1000AC248();
      swift_retain(v10);
      CalculateExpression.clear()();
      swift_release(v10);
      v11 = swift_getKeyPath(&unk_1000D3CD8);
      v51 = v3;
      v8 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, v11, v8);
      swift_release(v11);
      if (*(_BYTE *)(v3 + 41) == 1)
        goto LABEL_7;
      goto LABEL_9;
    }
    if ((a1 - 23) <= 3u)
    {
      switch(a1)
      {
        case 0x17u:
          v21 = swift_getKeyPath(&unk_1000D3DA0);
          __chkstk_darwin(v21, v22);
          v48 = v2;
          v49 = 0;
          v51 = v2;
          v23 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v51, v21, sub_100080E8C, v47, (char *)&type metadata for () + 8, v23);
          v14 = v21;
          goto LABEL_8;
        case 0x18u:
          v38 = sub_1000AC150();
          swift_retain(v38);
          CalculateExpression.inlineEvaluate()();
          swift_release(v38);
          sub_1000AA6A0();
          break;
        case 0x19u:
          v39 = sub_1000AC150();
          swift_retain(v39);
          CalculateExpression.inlineEvaluate()();
          swift_release(v39);
          sub_1000AAA28();
          break;
        case 0x1Au:
          v40 = swift_getKeyPath(&unk_1000D3DA0);
          v51 = v2;
          v41 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, v40, v41);
          swift_release(v40);
          v42 = *(void **)(v2 + 48);
          if (v42)
          {
            v43 = v42;
            v44 = sub_1000AC150();
            type metadata accessor for CalculateExpression.CustomOperandOperation(0);
            v45 = v43;
            swift_retain(v44);
            v46 = CalculateExpression.CustomOperandOperation.__allocating_init(_:)(v45);
            CalculateExpression.update(_:)(v46);

            swift_release(v44);
            swift_release(v46);
          }
          break;
        default:
          goto LABEL_9;
      }
      goto LABEL_9;
    }
    v24 = sub_10004F748(a1);
    if (v24)
    {
      v25 = v24;
      v26 = sub_1000AC150();
      swift_retain(v26);
      v27 = CalculateExpression.update(_:)(v25);
      swift_release(v26);
      swift_release(v25);
      if ((v27 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_100014124(v28, (uint64_t)qword_10011FEA8);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        v51 = v33;
        *(_DWORD *)v32 = 136315138;
        sub_1000511C8(a1);
        v35 = v34;
        v50 = sub_100029918(v36, v34, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
        swift_bridgeObjectRelease(v35);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Error Unrecognized calculator button pressed: %s", v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);
      }

    }
  }
  v37 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100113CB0 != -1)
    swift_once(&qword_100113CB0, sub_10004E6F4);
  objc_msgSend(v37, "postNotificationName:object:", qword_10011FC58, 0);

}

double sub_1000A9F98(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = v2;
    KeyPath = swift_getKeyPath(&unk_1000D3CB0);
    v19 = v2;
    v8 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v8);
    swift_release(KeyPath);
    v9 = *(_QWORD *)(v2 + 24);
    v10 = swift_retain(v9);
    v11 = CalculateExpression.expression.getter(v10);
    v13 = v12;
    swift_release(v9);
    if (v11 == a1 && v13 == a2)
    {
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, a1, a2, 0);
      swift_bridgeObjectRelease(v13);
      if ((v15 & 1) == 0)
      {
        v16 = swift_getKeyPath(&unk_1000D3CB0);
        v19 = v4;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v16, v8);
        swift_release(v16);
        v17 = *(_QWORD *)(v4 + 24);
        swift_retain(v17);
        v18 = swift_bridgeObjectRetain(a2);
        CalculateExpression.expression.setter(a1, a2, v18);
        *(_QWORD *)&result = swift_release(v17).n128_u64[0];
      }
    }
  }
  return result;
}

void *sub_1000AA10C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D3DA0);
  v6 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 48);
  v4 = v3;
  return v3;
}

uint64_t sub_1000AA198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a2;
  swift_retain(a2);
  return swift_release(v2);
}

double sub_1000AA1D0@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3D28);
  v8 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_1000AA260(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3D28);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000AC350, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

void sub_1000AA318(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3D00);
  v6 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 40);
}

double sub_1000AA3A4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3D00);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000142C4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000AA44C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2;
  return result;
}

uint64_t sub_1000AA454(uint64_t result, char a2)
{
  *(_BYTE *)(result + 41) = a2;
  return result;
}

uint64_t sub_1000AA45C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D3D50);
  v4 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t sub_1000AA4E0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 42) = a2;
  return result;
}

uint64_t sub_1000AA4E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D3DC8);
  v4 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 43);
}

void sub_1000AA56C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3DC8);
  v6 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 43);
}

double sub_1000AA5F8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3DC8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000AC850, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_1000AA6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t inited;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  void *v34;
  _BYTE v35[80];
  _BYTE v36[80];
  uint64_t v37;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000D3DA0);
  v37 = v0;
  v3 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v37, KeyPath, v3);
  swift_release(KeyPath);
  if (!*(_QWORD *)(v0 + 48))
  {
    v4 = sub_100029214((uint64_t)_swiftEmptyArrayStorage);
    v5 = (void *)evaluate(_:options:)(48, 0xE100000000000000, v4);
    swift_bridgeObjectRelease(v4);
    v6 = swift_getKeyPath(&unk_1000D3DA0);
    __chkstk_darwin(v6, v7);
    v33 = v1;
    v34 = v5;
    v37 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v37, v6, sub_1000811DC, v32, (char *)&type metadata for () + 8, v3);
    swift_release(v6);

  }
  v8 = swift_getKeyPath(&unk_1000D3DA0);
  v37 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v37, v8, v3);
  swift_release(v8);
  v9 = *(void **)(v1 + 48);
  if (v9)
  {
    v10 = v9;
    v11 = sub_1000AC150();
    v12 = swift_retain(v11);
    v13 = CalculateExpression.activeError.getter(v12);
    swift_release(v11);
    swift_errorRelease(v13);
    if (!v13)
    {
      v16 = sub_1000AC150();
      v17 = swift_retain(v16);
      v18 = (void *)CalculateExpression.result.getter(v17);
      swift_release(v16);
      if (v18)
      {
        v19 = sub_100005360(&qword_100115D98);
        inited = swift_initStackObject(v19, v36);
        *(_OWORD *)(inited + 16) = xmmword_1000CD7E0;
        v21 = (void *)CalculateKeyVariables;
        *(_QWORD *)(inited + 32) = CalculateKeyVariables;
        v22 = sub_100005360(&qword_100118788);
        v23 = swift_initStackObject(v22, v35);
        *(_OWORD *)(v23 + 16) = xmmword_1000D0760;
        *(_QWORD *)(v23 + 32) = 120;
        *(_QWORD *)(v23 + 40) = 0xE100000000000000;
        *(_QWORD *)(v23 + 48) = v10;
        *(_QWORD *)(v23 + 56) = 121;
        *(_QWORD *)(v23 + 64) = 0xE100000000000000;
        *(_QWORD *)(v23 + 72) = v18;
        v24 = v10;
        v25 = v21;
        v26 = v18;
        v27 = sub_10001C120(v23);
        *(_QWORD *)(inited + 64) = sub_100005360(&qword_100118790);
        *(_QWORD *)(inited + 40) = v27;
        v28 = sub_10001C104(inited);
        v29 = (void *)evaluate(_:options:)(7940984, 0xE300000000000000, v28);
        swift_bridgeObjectRelease(v28);
        v30 = swift_getKeyPath(&unk_1000D3DA0);
        __chkstk_darwin(v30, v31);
        v33 = v1;
        v34 = v29;
        v37 = v1;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v37, v30, sub_1000811DC, v32, (char *)&type metadata for () + 8, v3);

        swift_release(v30);
        return;
      }
    }

  }
  v14 = swift_getKeyPath(&unk_1000D3DA0);
  __chkstk_darwin(v14, v15);
  v33 = v1;
  v34 = 0;
  v37 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v37, v14, sub_1000811DC, v32, (char *)&type metadata for () + 8, v3);
  swift_release(v14);
}

void sub_1000AAA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t inited;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  void *v34;
  _BYTE v35[80];
  _BYTE v36[80];
  uint64_t v37;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000D3DA0);
  v37 = v0;
  v3 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v37, KeyPath, v3);
  swift_release(KeyPath);
  if (!*(_QWORD *)(v0 + 48))
  {
    v4 = sub_100029214((uint64_t)_swiftEmptyArrayStorage);
    v5 = (void *)evaluate(_:options:)(48, 0xE100000000000000, v4);
    swift_bridgeObjectRelease(v4);
    v6 = swift_getKeyPath(&unk_1000D3DA0);
    __chkstk_darwin(v6, v7);
    v33 = v1;
    v34 = v5;
    v37 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v37, v6, sub_1000811DC, v32, (char *)&type metadata for () + 8, v3);
    swift_release(v6);

  }
  v8 = swift_getKeyPath(&unk_1000D3DA0);
  v37 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v37, v8, v3);
  swift_release(v8);
  v9 = *(void **)(v1 + 48);
  if (v9)
  {
    v10 = v9;
    v11 = sub_1000AC150();
    v12 = swift_retain(v11);
    v13 = CalculateExpression.activeError.getter(v12);
    swift_release(v11);
    swift_errorRelease(v13);
    if (!v13)
    {
      v16 = sub_1000AC150();
      v17 = swift_retain(v16);
      v18 = (void *)CalculateExpression.result.getter(v17);
      swift_release(v16);
      if (v18)
      {
        v19 = sub_100005360(&qword_100115D98);
        inited = swift_initStackObject(v19, v36);
        *(_OWORD *)(inited + 16) = xmmword_1000CD7E0;
        v21 = (void *)CalculateKeyVariables;
        *(_QWORD *)(inited + 32) = CalculateKeyVariables;
        v22 = sub_100005360(&qword_100118788);
        v23 = swift_initStackObject(v22, v35);
        *(_OWORD *)(v23 + 16) = xmmword_1000D0760;
        *(_QWORD *)(v23 + 32) = 120;
        *(_QWORD *)(v23 + 40) = 0xE100000000000000;
        *(_QWORD *)(v23 + 48) = v10;
        *(_QWORD *)(v23 + 56) = 121;
        *(_QWORD *)(v23 + 64) = 0xE100000000000000;
        *(_QWORD *)(v23 + 72) = v18;
        v24 = v10;
        v25 = v21;
        v26 = v18;
        v27 = sub_10001C120(v23);
        *(_QWORD *)(inited + 64) = sub_100005360(&qword_100118790);
        *(_QWORD *)(inited + 40) = v27;
        v28 = sub_10001C104(inited);
        v29 = (void *)evaluate(_:options:)(7941496, 0xE300000000000000, v28);
        swift_bridgeObjectRelease(v28);
        v30 = swift_getKeyPath(&unk_1000D3DA0);
        __chkstk_darwin(v30, v31);
        v33 = v1;
        v34 = v29;
        v37 = v1;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v37, v30, sub_1000811DC, v32, (char *)&type metadata for () + 8, v3);

        swift_release(v30);
        return;
      }
    }

  }
  v14 = swift_getKeyPath(&unk_1000D3DA0);
  __chkstk_darwin(v14, v15);
  v33 = v1;
  v34 = 0;
  v37 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v37, v14, sub_1000811DC, v32, (char *)&type metadata for () + 8, v3);
  swift_release(v14);
}

id sub_1000AADB0(uint64_t a1, unint64_t a2, char a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    KeyPath = swift_getKeyPath(&unk_1000D3CB0);
    v23 = v5;
    v13 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v13);
    swift_release(KeyPath);
    v14 = *(_QWORD *)(v5 + 24);
    v15 = swift_retain(v14);
    v16 = CalculateExpression.options.getter(v15);
    swift_release(v14);
    if ((a3 & 1) != 0 && a4 && a5)
    {
      v17 = a4;
      v18 = a5;
      v19 = sub_1000AC3C8(a1, (void *)a2, v16, v17, (uint64_t)v18);
      swift_bridgeObjectRelease(v16);

    }
    else
    {
      v19 = (id)evaluate(_:options:)(a1, a2, v16);
      swift_bridgeObjectRelease(v16);
    }
    return v19;
  }
  else
  {
    v20 = sub_100029214((uint64_t)_swiftEmptyArrayStorage);
    v21 = evaluate(_:options:)(48, 0xE100000000000000, v20);
    swift_bridgeObjectRelease(v20);
    return (id)v21;
  }
}

uint64_t sub_1000AAF28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  v1 = v0 + OBJC_IVAR____TtC10Calculator27CalculatorExpressionManager___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000AAF98()
{
  return type metadata accessor for CalculatorExpressionManager(0);
}

uint64_t type metadata accessor for CalculatorExpressionManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100118688;
  if (!qword_100118688)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorExpressionManager);
  return result;
}

uint64_t sub_1000AAFDC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_1000D3C60;
  v4[4] = &unk_1000D3C60;
  v4[5] = &unk_1000D3C60;
  v4[6] = &unk_1000D3C60;
  v4[7] = &unk_1000D3C78;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000AB084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = type metadata accessor for UUID(0);
  v3 = __chkstk_darwin(v1, v2);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for CalculateExpression.Base(0, v3);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67, v6);
  v66 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v8 = qword_10011FF08;
  *(_QWORD *)(v0 + 16) = qword_10011FF08;
  v57 = type metadata accessor for CalculateExpression(0);
  v64 = sub_100005360(&qword_100115D98);
  inited = swift_initStackObject(v64, &v70);
  v63 = xmmword_1000CE770;
  *(_OWORD *)(inited + 16) = xmmword_1000CE770;
  v10 = (void *)CalculateKeyNumberFormatter;
  *(_QWORD *)(inited + 32) = CalculateKeyNumberFormatter;
  KeyPath = swift_getKeyPath(&unk_1000D3D78);
  v12 = v0;
  v56 = v0;
  v69 = v8;
  v13 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  v62 = v13;
  swift_retain(v8);
  v60 = v10;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v69, KeyPath, v13);
  swift_release(KeyPath);
  v14 = *(void **)(v8 + 48);
  v15 = sub_10000A5A8(0, &qword_100118750, NSNumberFormatter_ptr);
  v61 = v15;
  *(_QWORD *)(inited + 40) = v14;
  v16 = (void *)CalculateKeyAssumeDegrees;
  *(_QWORD *)(inited + 64) = v15;
  *(_QWORD *)(inited + 72) = v16;
  v17 = objc_allocWithZone((Class)NSNumber);
  v18 = v14;
  v59 = v16;
  v19 = objc_msgSend(v17, "initWithBool:", 1);
  v20 = sub_10000A5A8(0, (unint64_t *)&qword_100115DB0, NSNumber_ptr);
  *(_QWORD *)(inited + 80) = v19;
  v21 = (void *)CalculateKeyAllowPartialExpressions;
  *(_QWORD *)(inited + 104) = v20;
  *(_QWORD *)(inited + 112) = v21;
  v22 = objc_allocWithZone((Class)NSNumber);
  v55 = v21;
  *(_QWORD *)(inited + 120) = objc_msgSend(v22, "initWithBool:", 1);
  v23 = (void *)CalculateKeyScientificNotationFormat;
  *(_QWORD *)(inited + 144) = v20;
  *(_QWORD *)(inited + 152) = v23;
  v24 = objc_allocWithZone((Class)NSNumber);
  v54 = v23;
  v25 = objc_msgSend(v24, "initWithUnsignedInteger:", 0);
  *(_QWORD *)(inited + 184) = v20;
  *(_QWORD *)(inited + 160) = v25;
  v26 = sub_10001C104(inited);
  v58 = enum case for CalculateExpression.Base.base10(_:);
  v27 = v66;
  v65 = *(_QWORD *)(v65 + 104);
  v28 = v67;
  v29 = ((uint64_t (*)(char *))v65)(v66);
  UUID.init()(v29);
  *(_QWORD *)(v12 + 24) = CalculateExpression.__allocating_init(options:base:id:)(v26, v27, v5);
  v30 = swift_initStackObject(v64, &v68);
  *(_OWORD *)(v30 + 16) = v63;
  v31 = v60;
  *(_QWORD *)(v30 + 32) = v60;
  v32 = v5;
  v33 = qword_10011FF08;
  v34 = swift_getKeyPath(&unk_1000D3D78);
  v69 = v33;
  v35 = v31;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v69, v34, v62);
  swift_release(v34);
  v36 = *(void **)(v33 + 48);
  *(_QWORD *)(v30 + 40) = v36;
  v37 = v59;
  *(_QWORD *)(v30 + 64) = v61;
  *(_QWORD *)(v30 + 72) = v37;
  v38 = objc_allocWithZone((Class)NSNumber);
  v39 = v36;
  v40 = v37;
  *(_QWORD *)(v30 + 80) = objc_msgSend(v38, "initWithBool:", 1);
  v41 = v55;
  *(_QWORD *)(v30 + 104) = v20;
  *(_QWORD *)(v30 + 112) = v41;
  v42 = objc_allocWithZone((Class)NSNumber);
  v43 = v41;
  *(_QWORD *)(v30 + 120) = objc_msgSend(v42, "initWithBool:", 1);
  v44 = v54;
  *(_QWORD *)(v30 + 144) = v20;
  *(_QWORD *)(v30 + 152) = v44;
  v45 = objc_allocWithZone((Class)NSNumber);
  v46 = v44;
  v47 = objc_msgSend(v45, "initWithUnsignedInteger:", 0);
  *(_QWORD *)(v30 + 184) = v20;
  *(_QWORD *)(v30 + 160) = v47;
  v48 = sub_10001C104(v30);
  v49 = ((uint64_t (*)(char *, _QWORD, uint64_t))v65)(v27, v58, v28);
  UUID.init()(v49);
  v50 = CalculateExpression.__allocating_init(options:base:id:)(v48, v27, v32);
  v51 = v56;
  *(_QWORD *)(v56 + 32) = v50;
  *(_DWORD *)(v51 + 40) = 1;
  *(_QWORD *)(v51 + 48) = 0;
  ObservationRegistrar.init()(v50);
  return v51;
}

double sub_1000AB504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double result;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  char v36;
  uint64_t v37;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000D3D00);
  v37 = v0;
  v3 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v37, KeyPath, v3);
  swift_release(KeyPath);
  if (*(_BYTE *)(v0 + 40) == 1)
  {
    v4 = sub_1000AC150();
    swift_retain(v4);
    v6 = CalculateExpression.expression.getter(v5);
    v8 = v7;
    swift_release(v4);
    v9 = sub_1000AC150();
    swift_retain(v9);
    v10 = sub_1000AC248();
    swift_retain(v10);
    v12 = CalculateExpression.expression.getter(v11);
    v14 = v13;
    v15 = swift_release(v10);
    CalculateExpression.expression.setter(v12, v14, v15);
    swift_release(v9);
    v16 = sub_1000AC248();
  }
  else
  {
    v17 = sub_1000AC248();
    swift_retain(v17);
    v6 = CalculateExpression.expression.getter(v18);
    v8 = v19;
    swift_release(v17);
    v20 = sub_1000AC248();
    swift_retain(v20);
    v21 = sub_1000AC150();
    swift_retain(v21);
    v23 = CalculateExpression.expression.getter(v22);
    v25 = v24;
    v26 = swift_release(v21);
    CalculateExpression.expression.setter(v23, v25, v26);
    swift_release(v20);
    v16 = sub_1000AC150();
  }
  v27 = v16;
  v28 = swift_retain(v16);
  CalculateExpression.expression.setter(v6, v8, v28);
  swift_release(v27);
  v29 = swift_getKeyPath(&unk_1000D3D00);
  v37 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v37, v29, v3);
  swift_release(v29);
  v30 = *(unsigned __int8 *)(v1 + 40);
  v31 = swift_getKeyPath(&unk_1000D3D00);
  v37 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v37, v31, v3);
  *(_QWORD *)&result = swift_release(v31).n128_u64[0];
  if (v30 == *(unsigned __int8 *)(v1 + 40))
  {
    v33 = swift_getKeyPath(&unk_1000D3D00);
    __chkstk_darwin(v33, v34);
    v35[2] = v1;
    v36 = v30 ^ 1;
    v37 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v37, v33, sub_100014F44, v35, (char *)&type metadata for () + 8, v3);
    *(_QWORD *)&result = swift_release(v33).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000AB798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  uint64_t v24;

  v6 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v6, v7);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  KeyPath = swift_getKeyPath(&unk_1000D3DC8);
  v22 = a3;
  v23 = 1;
  v24 = a3;
  v11 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, KeyPath, sub_1000AC6D0, v21, (char *)&type metadata for () + 8, v11);
  swift_release(KeyPath);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100014124(v12, (uint64_t)qword_10011FEA8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Updating currency", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  static TaskPriority.background.getter();
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_10010D2C8, 56, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a1;
  v18[5] = a2;
  v18[6] = a3;
  swift_retain(a2);
  swift_retain(a3);
  v19 = sub_10000D7B0((uint64_t)v9, (uint64_t)&unk_100118770, (uint64_t)v18);
  swift_release(v19);
  return sub_100013F4C((uint64_t)v9);
}

uint64_t sub_1000AB9BC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(void);

  v6[2] = a6;
  v8 = sub_100005360(&qword_1001142E0);
  v6[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t (*)(void))((char *)a4 + *a4);
  v9 = (_QWORD *)swift_task_alloc(a4[1]);
  v6[4] = v9;
  *v9 = v6;
  v9[1] = sub_1000ABA40;
  return v11();
}

uint64_t sub_1000ABA40(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_BYTE *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000ABA9C, 0, 0);
}

uint64_t sub_1000ABA9C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_BYTE *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  type metadata accessor for MainActor(0);
  swift_retain(v3);
  v6 = static MainActor.shared.getter(v5);
  v7 = swift_allocObject(&unk_10010D2F0, 48, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = &protocol witness table for MainActor;
  *(_BYTE *)(v7 + 32) = v1;
  *(_QWORD *)(v7 + 40) = v3;
  v8 = sub_100096424(v2, (uint64_t)&unk_100118780, v7);
  swift_release(v8);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ABB5C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 24) = a5;
  *(_BYTE *)(v5 + 40) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 32) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000ABBCC, v7, v8);
}

uint64_t sub_1000ABBCC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  id v17;

  v1 = *(unsigned __int8 *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 32));
  if (v1 == 1)
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100014124(v2, (uint64_t)qword_10011FEA8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "Updated currency";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
  }
  else
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100014124(v8, (uint64_t)qword_10011FEA8);
    v4 = Logger.logObject.getter(v9);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "Failed to update currency";
      goto LABEL_10;
    }
  }
  v10 = *(_QWORD *)(v0 + 24);
  v11 = *(unsigned __int8 *)(v0 + 40);

  KeyPath = swift_getKeyPath(&unk_1000D3DC8);
  v13 = swift_task_alloc(32);
  *(_QWORD *)(v13 + 16) = v10;
  *(_BYTE *)(v13 + 24) = 0;
  *(_QWORD *)(v0 + 16) = v10;
  v14 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_1000AC850, v13, (char *)&type metadata for () + 8, v14);
  swift_release(KeyPath);
  swift_task_dealloc(v13);
  if (v11 == 1)
  {
    if (qword_100113988 != -1)
      swift_once(&qword_100113988, sub_100017604);
    v16 = qword_10011F818;
    type metadata accessor for StocksKitCurrencyCache(0, v15);
    if ((static StocksKitCurrencyCache.isEnabled.getter() & 1) != 0)
    {
      if ((dispatch thunk of StocksKitCurrencyCache.needsRefresh.getter() & 1) != 0)
        return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else if ((objc_msgSend(*(id *)(v16 + 16), "needsRefresh") & 1) != 0)
    {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v17 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_100113CB8 != -1)
      swift_once(&qword_100113CB8, sub_10004E728);
    objc_msgSend(v17, "postNotificationName:object:", qword_10011FC60, 0);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ABEC0()
{
  return swift_task_switch(sub_1000ABED4, 0, 0);
}

uint64_t sub_1000ABED4(__n128 a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  type metadata accessor for StocksKitCurrencyCache(0, a1);
  *(_QWORD *)(v1 + 16) = static StocksKitCurrencyCache.shared.getter();
  v4 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of StocksKitCurrencyCache.refresh()
                         + async function pointer to dispatch thunk of StocksKitCurrencyCache.refresh());
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of StocksKitCurrencyCache.refresh()
                                  + 1));
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000ABF44;
  return v4();
}

uint64_t sub_1000ABF44(uint64_t a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v5;

  v3 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));

  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1000ABF98()
{
  return swift_task_switch(sub_1000ABFAC, 0, 0);
}

uint64_t sub_1000ABFAC()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(CalculateCurrencyCache), "shared");
  v2 = objc_msgSend(v1, "refreshIfNeeded");

  return (*(uint64_t (**)(id))(v0 + 8))(v2);
}

id sub_1000AC010@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3D78);
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 48);
  *a2 = v6;
  return v6;
}

void sub_1000AC09C(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3D78);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000491D8, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_1000AC150()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000D3D00);
  v7 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  if (*(_BYTE *)(v0 + 40) == 1)
  {
    v3 = swift_getKeyPath(&unk_1000D3CB0);
    v7 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, v3, v2);
    swift_release(v3);
    v4 = v0 + 24;
  }
  else
  {
    v5 = swift_getKeyPath(&unk_1000D3D28);
    v7 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, v5, v2);
    swift_release(v5);
    v4 = v0 + 32;
  }
  return *(_QWORD *)v4;
}

uint64_t sub_1000AC248()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000D3D00);
  v7 = v0;
  v2 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  if (*(_BYTE *)(v0 + 40) == 1)
  {
    v3 = swift_getKeyPath(&unk_1000D3D28);
    v7 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, v3, v2);
    swift_release(v3);
    v4 = v0 + 32;
  }
  else
  {
    v5 = swift_getKeyPath(&unk_1000D3CB0);
    v7 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, v5, v2);
    swift_release(v5);
    v4 = v0 + 24;
  }
  return *(_QWORD *)v4;
}

uint64_t sub_1000AC350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

void sub_1000AC390()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 41) = *(_BYTE *)(v0 + 24);
}

void sub_1000AC3B8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 42) = *(_BYTE *)(v0 + 24);
}

id sub_1000AC3C8(uint64_t a1, void *a2, uint64_t a3, id a4, uint64_t a5)
{
  id v10;
  void *v11;
  id v12;
  char **v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  id v22;

  v10 = objc_msgSend(a4, "category");
  if (v10 && (v11 = v10, v12 = objc_msgSend(v10, "unitType"), v11, v12 == (id)16))
    v13 = &selRef_name;
  else
    v13 = &selRef_displayName;
  v14 = objc_msgSend(a4, *v13);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19._countAndFlagsBits = 10282;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = a1;
  v20._object = a2;
  String.append(_:)(v20);
  v21 = (void *)evaluateError(_:options:)(8241, 0xE200000000000000, a3);
  swift_bridgeObjectRelease(0xE200000000000000);
  objc_msgSend(v21, "setSynchronous:", 0);
  v22 = objc_msgSend(v21, "convertedTo:", a5);

  return v22;
}

void sub_1000AC6D0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 43) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1000AC6E0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000AC714(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10011876C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100013F04;
  return sub_1000AB9BC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000AC794()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000AC7C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_10011877C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014F2C;
  return sub_1000ABB5C(a1, v4, v5, v6, v7);
}

void sub_1000AC83C()
{
  sub_1000AC3B8();
}

void sub_1000AC850()
{
  sub_1000AC6D0();
}

void sub_1000AC864()
{
  sub_1000AC390();
}

uint64_t *sub_1000AC878(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100005360(&qword_100115680);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for UserInterfaceSizeClass(0);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_100005360(&qword_1001141C8);
        memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(v4, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
      }
      v13 = v4;
      v14 = v7;
      v15 = 1;
    }
    else
    {
      v12 = *a2;
      *v4 = *a2;
      swift_retain(v12);
      v13 = v4;
      v14 = v7;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    v16 = a3[5];
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    if (swift_getEnumCaseMultiPayload((char *)a2 + v16, v7) == 1)
    {
      v19 = type metadata accessor for UserInterfaceSizeClass(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_100005360(&qword_1001141C8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v23 = v17;
      v24 = v7;
      v25 = 1;
    }
    else
    {
      v22 = *v18;
      *v17 = *v18;
      swift_retain(v22);
      v23 = v17;
      v24 = v7;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
    v26 = a3[6];
    v27 = (uint64_t *)((char *)v4 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = sub_100005360(&qword_100115678);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      v34 = *v28;
      *v27 = *v28;
      swift_retain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
    v35 = a3[7];
    v36 = (char *)v4 + v35;
    v37 = (char *)a2 + v35;
    v38 = sub_100005360(&qword_100118798);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
    v39 = *(int *)(sub_100005360(&qword_1001187A0) + 28);
    v40 = *(_QWORD *)&v37[v39];
    *(_QWORD *)&v36[v39] = v40;
    v41 = a3[8];
    v42 = (char *)v4 + v41;
    v43 = (char *)a2 + v41;
    *v42 = *v43;
    v11 = *((_QWORD *)v43 + 1);
    *((_QWORD *)v42 + 1) = v11;
    swift_retain(v40);
  }
  swift_retain(v11);
  return v4;
}

double sub_1000ACB58(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  v4 = sub_100005360(&qword_100115680);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for UserInterfaceSizeClass(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + a2[5]);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v7, v8);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)((char *)a1 + a2[6]);
  v11 = sub_100005360(&qword_100115678);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (char *)a1 + a2[7];
  v14 = sub_100005360(&qword_100118798);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = sub_100005360(&qword_1001187A0);
  swift_release(*(_QWORD *)&v13[*(int *)(v15 + 28)]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[8] + 8)).n128_u64[0];
  return result;
}

uint64_t *sub_1000ACCEC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sub_100005360(&qword_100115680);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100005360(&qword_1001141C8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a1;
    v12 = v6;
    v13 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_retain(v10);
    v11 = a1;
    v12 = v6;
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v12, v13);
  v14 = a3[5];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  if (swift_getEnumCaseMultiPayload((char *)a2 + v14, v6) == 1)
  {
    v17 = type metadata accessor for UserInterfaceSizeClass(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_100005360(&qword_1001141C8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v21 = v15;
    v22 = v6;
    v23 = 1;
  }
  else
  {
    v20 = *v16;
    *v15 = *v16;
    swift_retain(v20);
    v21 = v15;
    v22 = v6;
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v22, v23);
  v24 = a3[6];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = sub_100005360(&qword_100115678);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
    v29 = v25;
    v30 = v27;
    v31 = 1;
  }
  else
  {
    v32 = *v26;
    *v25 = *v26;
    swift_retain(v32);
    v29 = v25;
    v30 = v27;
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v30, v31);
  v33 = a3[7];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = sub_100005360(&qword_100118798);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  v37 = *(int *)(sub_100005360(&qword_1001187A0) + 28);
  v38 = *(_QWORD *)&v35[v37];
  *(_QWORD *)&v34[v37] = v38;
  v39 = a3[8];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  *v40 = *v41;
  v42 = *((_QWORD *)v41 + 1);
  *((_QWORD *)v40 + 1) = v42;
  swift_retain(v38);
  swift_retain(v42);
  return a1;
}

uint64_t *sub_1000ACFA4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  if (a1 != a2)
  {
    sub_100004F48((uint64_t)a1, &qword_100115680);
    v6 = sub_100005360(&qword_100115680);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100005360(&qword_1001141C8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = v6;
      v13 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
      v11 = a1;
      v12 = v6;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_100004F48((uint64_t)a1 + v14, &qword_100115680);
    v17 = sub_100005360(&qword_100115680);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for UserInterfaceSizeClass(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        v20 = sub_100005360(&qword_1001141C8);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v19 + 16))(v15, v16, v18);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
      v22 = v15;
      v23 = v17;
      v24 = 1;
    }
    else
    {
      v21 = *v16;
      *v15 = *v16;
      swift_retain(v21);
      v22 = v15;
      v23 = v17;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
    v25 = a3[6];
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    sub_100004F48((uint64_t)a1 + v25, &qword_100115678);
    v28 = sub_100005360(&qword_100115678);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = v26;
      v31 = v28;
      v32 = 1;
    }
    else
    {
      v33 = *v27;
      *v26 = *v27;
      swift_retain(v33);
      v30 = v26;
      v31 = v28;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
  }
  v34 = a3[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = sub_100005360(&qword_100118798);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  v38 = *(int *)(sub_100005360(&qword_1001187A0) + 28);
  v39 = *(_QWORD *)&v35[v38];
  v40 = *(_QWORD *)&v36[v38];
  *(_QWORD *)&v35[v38] = v40;
  swift_retain(v40);
  swift_release(v39);
  v41 = a3[8];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  *v42 = *v43;
  v44 = *((_QWORD *)v42 + 1);
  v45 = *((_QWORD *)v43 + 1);
  *((_QWORD *)v42 + 1) = v45;
  swift_retain(v45);
  swift_release(v44);
  return a1;
}

char *sub_1000AD2B8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_100005360(&qword_100115680);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100005360(&qword_1001141C8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (swift_getEnumCaseMultiPayload(&a2[v10], v6) == 1)
  {
    v13 = type metadata accessor for UserInterfaceSizeClass(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_100005360(&qword_1001141C8);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload(v11, v6, 1);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = sub_100005360(&qword_100115678);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = sub_100005360(&qword_100118798);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  v25 = sub_100005360(&qword_1001187A0);
  *(_QWORD *)&v22[*(int *)(v25 + 28)] = *(_QWORD *)&v23[*(int *)(v25 + 28)];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  return a1;
}

char *sub_1000AD548(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  if (a1 != a2)
  {
    sub_100004F48((uint64_t)a1, &qword_100115680);
    v6 = sub_100005360(&qword_100115680);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100005360(&qword_1001141C8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v10 = a3[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    sub_100004F48((uint64_t)&a1[v10], &qword_100115680);
    v13 = sub_100005360(&qword_100115680);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for UserInterfaceSizeClass(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      {
        v16 = sub_100005360(&qword_1001141C8);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v11, v12, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v17 = a3[6];
    v18 = &a1[v17];
    v19 = &a2[v17];
    sub_100004F48((uint64_t)&a1[v17], &qword_100115678);
    v20 = sub_100005360(&qword_100115678);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = sub_100005360(&qword_100118798);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = *(int *)(sub_100005360(&qword_1001187A0) + 28);
  v27 = *(_QWORD *)&v23[v26];
  *(_QWORD *)&v23[v26] = *(_QWORD *)&v24[v26];
  swift_release(v27);
  v28 = a3[8];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *v29 = *v30;
  v31 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
  swift_release(v31);
  return a1;
}

uint64_t sub_1000AD840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AD84C);
}

uint64_t sub_1000AD84C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;

  v6 = sub_100005360(&qword_1001187A8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100005360(&qword_1001187B0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100005360(&qword_1001187A0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  v17 = v16 - 1;
  if (v17 < 0)
    v17 = -1;
  return (v17 + 1);
}

uint64_t sub_1000AD934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AD940);
}

uint64_t sub_1000AD940(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_100005360(&qword_1001187A8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100005360(&qword_1001187B0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_100005360(&qword_1001187A0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[8] + 8) = a2;
  return result;
}

uint64_t type metadata accessor for CalculatorAppContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100118810;
  if (!qword_100118810)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorAppContentView);
  return result;
}

void sub_1000ADA54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_1000ADB2C(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = v8[0];
    sub_1000ADB84(319, &qword_100118828, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000ADB84(319, (unint64_t *)&unk_100118830, type metadata accessor for CalculatorLayout, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LazyState);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = &unk_1000D3E20;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

void sub_1000ADB2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118820)
  {
    v2 = sub_100005608(&qword_1001141C8);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118820);
  }
}

void sub_1000ADB84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1000ADBDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F7008, 1);
}

uint64_t sub_1000ADBEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t OpaqueTypeConformance2;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _BYTE v65[12];
  int v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  char v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;

  v81 = a1;
  v85 = type metadata accessor for CalculatorAppContentView(0);
  v72 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85, v1);
  v82 = v2;
  v80 = &v65[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v78 = sub_100005360(&qword_1001141C8);
  __chkstk_darwin(v78, v3);
  v79 = &v65[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v70 = sub_100005360(&qword_100118870);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70, v5);
  v68 = &v65[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v83 = sub_100005360(&qword_100118878);
  __chkstk_darwin(v83, v7);
  v71 = &v65[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v74 = sub_100005360(&qword_100118880);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74, v9);
  v84 = &v65[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v77 = sub_100005360(&qword_100118888);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77, v11);
  v75 = &v65[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CalculatorViewModel(0);
  v14 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v15 = Environment.init<A>(_:)(v13, v13, v14);
  v66 = v16;
  v17 = type metadata accessor for CalculatorLayout(0);
  v67 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v18 = Environment.init<A>(_:)(v17, v17, v67);
  v20 = v19;
  v21 = type metadata accessor for CalculatorMDMRestrictionsManager(0);
  v22 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  v23 = (void *)Environment.init<A>(_:)(v21, v21, v22);
  v25 = v24 & 1;
  LOBYTE(v87) = 0;
  State.init(wrappedValue:)(&v88, &v87, &type metadata for ModeMenuPresentationState);
  v26 = v88;
  v27 = v89;
  LOBYTE(v87) = 0;
  State.init(wrappedValue:)(&v88, &v87, &type metadata for Bool);
  v28 = v88;
  v29 = v89;
  v88 = v15;
  LOBYTE(v89) = v66 & 1;
  v90 = v18;
  LOBYTE(v91) = v20 & 1;
  v92 = v23;
  v93 = v25;
  v94 = v26;
  v95 = v27;
  v96 = v28;
  v97 = v29;
  sub_100005360(&qword_1001187A0);
  LazyState.wrappedValue.getter(&v87);
  v30 = v87;
  v31 = sub_1000AF980();
  v32 = v68;
  View.environment<A>(_:)(v30, &type metadata for CalculatorContainerView, v17, v31, v67);
  swift_release(v30);
  swift_release(v15);
  swift_release(v18);
  sub_100039308(v23, v25);
  swift_release(v27);
  swift_release(v29);
  if (qword_100113CE0 != -1)
    swift_once(&qword_100113CE0, sub_100052F74);
  v33 = qword_10011FC88;
  KeyPath = swift_getKeyPath(&unk_1000D3E88);
  v88 = v33;
  swift_retain_n(v33, 2);
  v35 = AnyShapeStyle.init<A>(_:)(&v88, &type metadata for Color, &protocol witness table for Color);
  v36 = v69;
  v37 = (uint64_t)v71;
  v38 = v70;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v69 + 16))(v71, v32, v70);
  v39 = swift_release(v33);
  v40 = v83;
  v41 = (uint64_t *)(v37 + *(int *)(v83 + 36));
  *v41 = KeyPath;
  v41[1] = v35;
  (*(void (**)(_BYTE *, uint64_t, __n128))(v36 + 8))(v32, v38, v39);
  v42 = v79;
  v43 = v86;
  sub_1000441B0(v79);
  v44 = v80;
  sub_1000AFA64(v43, (uint64_t)v80);
  v45 = *(unsigned __int8 *)(v72 + 80);
  v46 = ((v45 + 16) & ~v45) + v82;
  v47 = (v45 + 16) & ~v45;
  v72 = v47;
  v82 = v45 | 7;
  v70 = v46;
  v48 = swift_allocObject(&unk_10010D320, v46, v45 | 7);
  sub_1000AFAAC((uint64_t)v44, v48 + v47);
  v49 = sub_1000AFAFC();
  v50 = sub_1000AFC10();
  v51 = v40;
  v52 = v78;
  View.onChange<A>(of:initial:_:)(v42, 0, sub_1000AFAF0, v48, v51, v78, v49, v50);
  swift_release(v48);
  sub_100004F48((uint64_t)v42, &qword_1001141C8);
  sub_100004F48(v37, &qword_100118878);
  sub_1000441B0(v42);
  sub_1000AFA64(v43, (uint64_t)v44);
  v53 = swift_allocObject(&unk_10010D348, v46, v82);
  v54 = v72;
  sub_1000AFAAC((uint64_t)v44, v53 + v72);
  v88 = v83;
  v89 = v52;
  v90 = v49;
  v91 = v50;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v56 = v75;
  v57 = v74;
  v58 = v84;
  View.onChange<A>(of:initial:_:)(v42, 0, sub_1000AFC90, v53, v74, v52, OpaqueTypeConformance2, v50);
  swift_release(v53);
  sub_100004F48((uint64_t)v42, &qword_1001141C8);
  (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v58, v57);
  sub_1000AFA64(v43, (uint64_t)v44);
  v59 = swift_allocObject(&unk_10010D370, v70, v82);
  sub_1000AFAAC((uint64_t)v44, v59 + v54);
  v60 = v76;
  v61 = v81;
  v62 = v77;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v76 + 16))(v81, v56, v77);
  v63 = (_QWORD *)(v61 + *(int *)(sub_100005360(&qword_1001188B0) + 36));
  *v63 = sub_1000AFED4;
  v63[1] = v59;
  v63[2] = 0;
  v63[3] = 0;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v60 + 8))(v56, v62);
}

double sub_1000AE2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  double result;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[3];

  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v51 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v46 = (char *)&v45 - v11;
  v12 = sub_100005360(&qword_1001188B8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_1001141C8);
  __chkstk_darwin(v16, v17);
  v50 = (uint64_t)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v45 - v21;
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v45 - v25;
  v27 = a3 + *(int *)(type metadata accessor for CalculatorAppContentView(0) + 28);
  v47 = sub_100005360(&qword_1001187A0);
  v48 = v27;
  LazyState.wrappedValue.getter(v53);
  v28 = v53[0];
  KeyPath = swift_getKeyPath(&unk_1000D3EE0);
  v53[0] = v28;
  v49 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v53, KeyPath, v49);
  swift_release(KeyPath);
  v30 = v28 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess(v28 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v53, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v26, v30, v5);
  v31 = swift_release(v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v6 + 56))(v26, 0, 1, v5, v31);
  v32 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_1000AFF08((uint64_t)v26, (uint64_t)v15);
  sub_1000AFF08(a2, v32);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v33((uint64_t)v15, 1, v5) == 1)
  {
    sub_100004F48((uint64_t)v26, &qword_1001141C8);
    if (v33(v32, 1, v5) == 1)
    {
      sub_100004F48((uint64_t)v15, &qword_1001141C8);
      return result;
    }
  }
  else
  {
    sub_1000AFF08((uint64_t)v15, (uint64_t)v22);
    if (v33(v32, 1, v5) != 1)
    {
      v35 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v46, v32, v5);
      v36 = sub_100005178(&qword_1001188A8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v37 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v35, v5, v36);
      v38 = *(void (**)(char *, uint64_t))(v6 + 8);
      v38(v35, v5);
      sub_100004F48((uint64_t)v26, &qword_1001141C8);
      v38(v22, v5);
      sub_100004F48((uint64_t)v15, &qword_1001141C8);
      if ((v37 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    sub_100004F48((uint64_t)v26, &qword_1001141C8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
  }
  sub_100004F48((uint64_t)v15, &qword_1001188B8);
LABEL_8:
  LazyState.wrappedValue.getter(&v52);
  v39 = v52;
  v40 = v50;
  sub_1000AFF08(a2, v50);
  if (v33(v40, 1, v5) == 1)
  {
    v41 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v51, enum case for UserInterfaceSizeClass.regular(_:), v5);
    sub_100004F48(v40, &qword_1001141C8);
  }
  else
  {
    v41 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v51, v40, v5);
  }
  v42 = swift_getKeyPath(&unk_1000D3EE0);
  __chkstk_darwin(v42, v43);
  *(&v45 - 2) = v39;
  *(&v45 - 1) = (uint64_t)v41;
  v52 = v39;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v52, v42, sub_1000B0098, &v45 - 4, (char *)&type metadata for () + 8, v49);
  v44 = swift_release(v42);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v41, v5, v44);
  *(_QWORD *)&result = swift_release(v39).n128_u64[0];
  return result;
}

double sub_1000AE768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  double result;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[3];

  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v51 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v46 = (char *)&v45 - v11;
  v12 = sub_100005360(&qword_1001188B8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_1001141C8);
  __chkstk_darwin(v16, v17);
  v50 = (uint64_t)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v45 - v21;
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v45 - v25;
  v27 = a3 + *(int *)(type metadata accessor for CalculatorAppContentView(0) + 28);
  v47 = sub_100005360(&qword_1001187A0);
  v48 = v27;
  LazyState.wrappedValue.getter(v53);
  v28 = v53[0];
  KeyPath = swift_getKeyPath(&unk_1000D3EB8);
  v53[0] = v28;
  v49 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v53, KeyPath, v49);
  swift_release(KeyPath);
  v30 = v28 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
  swift_beginAccess(v28 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, v53, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v26, v30, v5);
  v31 = swift_release(v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v6 + 56))(v26, 0, 1, v5, v31);
  v32 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_1000AFF08((uint64_t)v26, (uint64_t)v15);
  sub_1000AFF08(a2, v32);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v33((uint64_t)v15, 1, v5) == 1)
  {
    sub_100004F48((uint64_t)v26, &qword_1001141C8);
    if (v33(v32, 1, v5) == 1)
    {
      sub_100004F48((uint64_t)v15, &qword_1001141C8);
      return result;
    }
  }
  else
  {
    sub_1000AFF08((uint64_t)v15, (uint64_t)v22);
    if (v33(v32, 1, v5) != 1)
    {
      v35 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v46, v32, v5);
      v36 = sub_100005178(&qword_1001188A8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v37 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v35, v5, v36);
      v38 = *(void (**)(char *, uint64_t))(v6 + 8);
      v38(v35, v5);
      sub_100004F48((uint64_t)v26, &qword_1001141C8);
      v38(v22, v5);
      sub_100004F48((uint64_t)v15, &qword_1001141C8);
      if ((v37 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    sub_100004F48((uint64_t)v26, &qword_1001141C8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
  }
  sub_100004F48((uint64_t)v15, &qword_1001188B8);
LABEL_8:
  LazyState.wrappedValue.getter(&v52);
  v39 = v52;
  v40 = v50;
  sub_1000AFF08(a2, v50);
  if (v33(v40, 1, v5) == 1)
  {
    v41 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v51, enum case for UserInterfaceSizeClass.regular(_:), v5);
    sub_100004F48(v40, &qword_1001141C8);
  }
  else
  {
    v41 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v51, v40, v5);
  }
  v42 = swift_getKeyPath(&unk_1000D3EB8);
  __chkstk_darwin(v42, v43);
  *(&v45 - 2) = v39;
  *(&v45 - 1) = (uint64_t)v41;
  v52 = v39;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v52, v42, sub_1000B0084, &v45 - 4, (char *)&type metadata for () + 8, v49);
  v44 = swift_release(v42);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v41, v5, v44);
  *(_QWORD *)&result = swift_release(v39).n128_u64[0];
  return result;
}

_QWORD *sub_1000AEC08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  char v53;
  uint64_t v54;
  _QWORD *result;
  uint64_t v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  void (*v70)(_BYTE *, uint64_t);
  uint64_t v71;
  _QWORD *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  _BYTE *v89;
  int v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(_BYTE *, uint64_t);
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  char v115;
  void (*v116)(_QWORD *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  _BYTE v122[4];
  int v123;
  void (*v124)(_BYTE *, uint64_t, uint64_t);
  void (*v125)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  _QWORD *v132;
  _QWORD *v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  _QWORD v150[2];
  _QWORD v151[3];
  uint64_t v152;
  _QWORD v153[2];

  v2 = type metadata accessor for LayoutDirection(0);
  v144 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v143 = &v122[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5, v6);
  v8 = &v122[-v7];
  v9 = type metadata accessor for UserInterfaceSizeClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v134 = &v122[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v14);
  v136 = &v122[-v15];
  __chkstk_darwin(v16, v17);
  v131 = &v122[-v18];
  v147 = sub_100005360(&qword_1001188B8);
  __chkstk_darwin(v147, v19);
  v139 = &v122[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21, v22);
  v24 = &v122[-v23];
  v25 = sub_100005360(&qword_1001141C8);
  __chkstk_darwin(v25, v26);
  v133 = &v122[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v28, v29);
  v137 = &v122[-v30];
  __chkstk_darwin(v31, v32);
  v145 = &v122[-v33];
  __chkstk_darwin(v34, v35);
  v138 = &v122[-v36];
  __chkstk_darwin(v37, v38);
  v132 = &v122[-v39];
  __chkstk_darwin(v40, v41);
  v130 = &v122[-v42];
  __chkstk_darwin(v43, v44);
  v46 = &v122[-v45];
  __chkstk_darwin(v47, v48);
  v50 = &v122[-v49];
  v51 = type metadata accessor for CalculatorAppContentView(0);
  v52 = (char *)(a1 + *(int *)(v51 + 32));
  v53 = *v52;
  v141 = v52;
  v54 = *((_QWORD *)v52 + 1);
  LOBYTE(v153[0]) = v53;
  v153[1] = v54;
  v142 = sub_100005360(&qword_100113FF8);
  result = State.wrappedValue.getter(&v152, v142);
  if ((v152 & 1) != 0)
    return result;
  v128 = v8;
  v129 = v2;
  v56 = a1 + *(int *)(v51 + 28);
  v148 = sub_100005360(&qword_1001187A0);
  v146 = v56;
  LazyState.wrappedValue.getter(v153);
  v57 = v153[0];
  KeyPath = swift_getKeyPath(&unk_1000D3EB8);
  v153[0] = v57;
  v140 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v153, KeyPath, v140);
  swift_release(KeyPath);
  v59 = v57 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
  swift_beginAccess(v57 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, v153, 0, 0);
  v124 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v124(v50, v59, v9);
  v60 = swift_release(v57);
  v125 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v10 + 56);
  v125(v50, 0, 1, v9, v60);
  v127 = v51;
  v135 = a1;
  sub_1000441B0(v46);
  v61 = v147;
  v62 = (uint64_t)&v24[*(int *)(v147 + 48)];
  sub_1000AFF08((uint64_t)v50, (uint64_t)v24);
  sub_1000AFF08((uint64_t)v46, v62);
  v63 = *(_BYTE **)(v10 + 48);
  v64 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v63)(v24, 1, v9);
  v126 = v10;
  if (v64 == 1)
  {
    sub_100004F48((uint64_t)v46, &qword_1001141C8);
    sub_100004F48((uint64_t)v50, &qword_1001141C8);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v63)(v62, 1, v9) == 1)
    {
      sub_100004F48((uint64_t)v24, &qword_1001141C8);
      v136 = 0;
      v65 = v140;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  v66 = v130;
  sub_1000AFF08((uint64_t)v24, (uint64_t)v130);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v63)(v62, 1, v9) == 1)
  {
    sub_100004F48((uint64_t)v46, &qword_1001141C8);
    sub_100004F48((uint64_t)v50, &qword_1001141C8);
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v66, v9);
LABEL_7:
    sub_100004F48((uint64_t)v24, &qword_1001188B8);
    goto LABEL_10;
  }
  v67 = v66;
  v68 = v131;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 32))(v131, v62, v9);
  v69 = sub_100005178(&qword_1001188A8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v123 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v68, v9, v69);
  v70 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v70(v68, v9);
  sub_100004F48((uint64_t)v46, &qword_1001141C8);
  sub_100004F48((uint64_t)v50, &qword_1001141C8);
  v70(v67, v9);
  sub_100004F48((uint64_t)v24, &qword_1001141C8);
  if ((v123 & 1) != 0)
  {
    v136 = 0;
    v65 = v140;
    v61 = v147;
    goto LABEL_14;
  }
LABEL_10:
  LazyState.wrappedValue.getter(&v152);
  v71 = v152;
  v72 = v132;
  sub_1000441B0(v132);
  v130 = v63;
  if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v63)(v72, 1, v9) == 1)
  {
    v73 = v136;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v10 + 104))(v136, enum case for UserInterfaceSizeClass.regular(_:), v9);
    sub_100004F48((uint64_t)v72, &qword_1001141C8);
  }
  else
  {
    v73 = v136;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v10 + 32))(v136, v72, v9);
  }
  v74 = swift_getKeyPath(&unk_1000D3EB8);
  __chkstk_darwin(v74, v75);
  *(_QWORD *)&v122[-16] = v71;
  *(_QWORD *)&v122[-8] = v73;
  v152 = v71;
  v65 = v140;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v152, v74, sub_1000AFF50, &v122[-32], (char *)&type metadata for () + 8, v140);
  v136 = 0;
  v76 = swift_release(v74);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v10 + 8))(v73, v9, v76);
  swift_release(v71);
  v61 = v147;
  v63 = v130;
LABEL_14:
  LazyState.wrappedValue.getter(&v152);
  v77 = v152;
  v78 = swift_getKeyPath(&unk_1000D3EE0);
  v152 = v77;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v152, v78, v65);
  swift_release(v78);
  v79 = v77 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess(v77 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, &v152, 0, 0);
  v80 = (uint64_t)v138;
  v124(v138, v79, v9);
  v81 = swift_release(v77);
  v125((_BYTE *)v80, 0, 1, v9, v81);
  v82 = v145;
  sub_1000441B0(v145);
  v83 = *(int *)(v61 + 48);
  v84 = (uint64_t)v82;
  v85 = v139;
  v86 = (uint64_t)&v139[v83];
  sub_1000AFF08(v80, (uint64_t)v139);
  sub_1000AFF08(v84, v86);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v63)(v85, 1, v9) != 1)
  {
    v89 = v137;
    sub_1000AFF08((uint64_t)v85, (uint64_t)v137);
    v90 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v63)(v86, 1, v9);
    v88 = v126;
    if (v90 != 1)
    {
      v91 = v9;
      v92 = v131;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v126 + 32))(v131, v86, v91);
      v93 = sub_100005178(&qword_1001188A8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      LODWORD(v147) = dispatch thunk of static Equatable.== infix(_:_:)(v89, v92, v91, v93);
      v94 = v80;
      v95 = *(void (**)(_BYTE *, uint64_t))(v88 + 8);
      v96 = v92;
      v9 = v91;
      v95(v96, v91);
      sub_100004F48((uint64_t)v145, &qword_1001141C8);
      sub_100004F48(v94, &qword_1001141C8);
      v95(v137, v91);
      sub_100004F48((uint64_t)v85, &qword_1001141C8);
      if ((v147 & 1) != 0)
        goto LABEL_21;
LABEL_22:
      LazyState.wrappedValue.getter(v151);
      v99 = v151[0];
      v100 = v9;
      v101 = v133;
      sub_1000441B0(v133);
      if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v63)(v101, 1, v100) == 1)
      {
        v102 = v134;
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v88 + 104))(v134, enum case for UserInterfaceSizeClass.regular(_:), v100);
        sub_100004F48((uint64_t)v101, &qword_1001141C8);
      }
      else
      {
        v102 = v134;
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v88 + 32))(v134, v101, v100);
      }
      v103 = v88;
      v97 = v129;
      v104 = swift_getKeyPath(&unk_1000D3EE0);
      __chkstk_darwin(v104, v105);
      *(_QWORD *)&v122[-16] = v99;
      *(_QWORD *)&v122[-8] = v102;
      v151[0] = v99;
      v98 = v140;
      v106 = v136;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v151, v104, sub_1000AFF70, &v122[-32], (char *)&type metadata for () + 8, v140);
      v136 = v106;
      v107 = swift_release(v104);
      (*(void (**)(_BYTE *, uint64_t, __n128))(v103 + 8))(v102, v100, v107);
      swift_release(v99);
      goto LABEL_26;
    }
    sub_100004F48(v84, &qword_1001141C8);
    sub_100004F48(v80, &qword_1001141C8);
    (*(void (**)(_BYTE *, uint64_t))(v88 + 8))(v89, v9);
LABEL_19:
    sub_100004F48((uint64_t)v85, &qword_1001188B8);
    goto LABEL_22;
  }
  sub_100004F48(v84, &qword_1001141C8);
  sub_100004F48(v80, &qword_1001141C8);
  v87 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v63)(v86, 1, v9);
  v88 = v126;
  if (v87 != 1)
    goto LABEL_19;
  sub_100004F48((uint64_t)v85, &qword_1001141C8);
LABEL_21:
  v97 = v129;
  v98 = v140;
LABEL_26:
  LazyState.wrappedValue.getter(v151);
  v108 = v151[0];
  v109 = swift_getKeyPath(&unk_1000D3F08);
  v151[0] = v108;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v151, v109, v98);
  swift_release(v109);
  v110 = v108 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  swift_beginAccess(v108 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, v151, 0, 0);
  v111 = v144;
  v112 = v128;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v144 + 16))(v128, v110, v97);
  swift_release(v108);
  v113 = v143;
  sub_100044404(v143);
  v114 = sub_100005178(&qword_1001188C0, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection, (uint64_t)&protocol conformance descriptor for LayoutDirection);
  v115 = dispatch thunk of static Equatable.== infix(_:_:)(v112, v113, v97, v114);
  v116 = *(void (**)(_QWORD *, uint64_t))(v111 + 8);
  v116(v113, v97);
  v116(v112, v97);
  if ((v115 & 1) == 0)
  {
    LazyState.wrappedValue.getter(v150);
    v117 = v150[0];
    sub_100044404(v112);
    v118 = swift_getKeyPath(&unk_1000D3F08);
    __chkstk_darwin(v118, v119);
    *(_QWORD *)&v122[-16] = v117;
    *(_QWORD *)&v122[-8] = v112;
    v150[0] = v117;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v150, v118, sub_10004638C, &v122[-32], (char *)&type metadata for () + 8, v98);
    v120 = swift_release(v118);
    ((void (*)(_QWORD *, uint64_t, __n128))v116)(v112, v97, v120);
    swift_release(v117);
  }
  v121 = *((_QWORD *)v141 + 1);
  LOBYTE(v150[0]) = *v141;
  v150[1] = v121;
  v149 = 1;
  return (_QWORD *)State.wrappedValue.setter(&v149, v142);
}

unint64_t sub_1000AF980()
{
  unint64_t result;

  result = qword_100118890;
  if (!qword_100118890)
  {
    result = swift_getWitnessTable(&unk_1000CEC98, &type metadata for CalculatorContainerView);
    atomic_store(result, (unint64_t *)&qword_100118890);
  }
  return result;
}

uint64_t sub_1000AF9C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000AF9EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000AFA14(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_1000AFA3C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_1000AFA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalculatorAppContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AFAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalculatorAppContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AFAF0(uint64_t a1, uint64_t a2)
{
  return sub_1000AFC9C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000AE2C8);
}

unint64_t sub_1000AFAFC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100118898;
  if (!qword_100118898)
  {
    v1 = sub_100005608(&qword_100118878);
    v2[0] = &type metadata for CalculatorContainerView;
    v2[1] = type metadata accessor for CalculatorLayout(255);
    v2[2] = sub_1000AF980();
    v2[3] = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    sub_1000AFBC4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118898);
  }
  return result;
}

unint64_t sub_1000AFBC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117980;
  if (!qword_100117980)
  {
    v1 = sub_100005608(&qword_100117988);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100117980);
  }
  return result;
}

unint64_t sub_1000AFC10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001188A0;
  if (!qword_1001188A0)
  {
    v1 = sub_100005608(&qword_1001141C8);
    sub_100005178(&qword_1001188A8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001188A0);
  }
  return result;
}

uint64_t sub_1000AFC90(uint64_t a1, uint64_t a2)
{
  return sub_1000AFC9C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000AE768);
}

uint64_t sub_1000AFC9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorAppContentView(0) - 8) + 80);
  return a3(a1, a2, v3 + ((v6 + 16) & ~v6));
}

uint64_t sub_1000AFCFC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (int *)type metadata accessor for CalculatorAppContentView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100005360(&qword_100115680);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v4, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = (_QWORD *)((char *)v6 + v1[5]);
  if (swift_getEnumCaseMultiPayload(v10, v7) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v10, v11);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)((char *)v6 + v1[6]);
  v14 = sub_100005360(&qword_100115678);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = v3 | 7;
  v17 = (char *)v6 + v1[7];
  v18 = sub_100005360(&qword_100118798);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = sub_100005360(&qword_1001187A0);
  swift_release(*(_QWORD *)&v17[*(int *)(v19 + 28)]);
  swift_release(*(_QWORD *)((char *)v6 + v1[8] + 8));
  return swift_deallocObject(v0, v4 + v5, v16);
}

_QWORD *sub_1000AFED4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorAppContentView(0) - 8) + 80);
  return sub_1000AEC08(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000AFF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_1001141C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AFF50()
{
  uint64_t v0;

  return sub_100009354(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000AFF70()
{
  uint64_t v0;

  return sub_100009530(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000AFF94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = qword_1001188C8;
  if (!qword_1001188C8)
  {
    v1 = sub_100005608(&qword_1001188B0);
    v2 = sub_100005608(&qword_100118880);
    v3 = sub_100005608(&qword_1001141C8);
    v4 = sub_100005608(&qword_100118878);
    v5 = sub_1000AFAFC();
    v6 = sub_1000AFC10();
    v8 = v4;
    v9 = v3;
    v10 = v5;
    v11 = v6;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v8 = v2;
    v9 = v3;
    v10 = OpaqueTypeConformance2;
    v11 = v6;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001188C8);
  }
  return result;
}

uint64_t sub_1000B0084()
{
  return sub_1000AFF50();
}

uint64_t sub_1000B0098()
{
  return sub_1000AFF70();
}

uint64_t destroy for DelayEffectModifier(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[6]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for DelayEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t assignWithCopy for DelayEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

__n128 initializeWithTake for DelayEffectModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DelayEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(*(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DelayEffectModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DelayEffectModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DelayEffectModifier()
{
  return &type metadata for DelayEffectModifier;
}

uint64_t sub_1000B0364(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F704C, 1);
}

uint64_t sub_1000B0374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;

  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005360(&qword_1001188D0);
  __chkstk_darwin(v10, v11);
  v13 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100005360(&qword_1001188D8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B0550(a1, v13);
  v18 = *(_QWORD *)(v2 + 48);
  sub_10000531C((uint64_t)v13, (uint64_t)v17, &qword_1001188D0);
  *(_QWORD *)&v17[*(int *)(v14 + 36)] = v18;
  swift_retain(v18);
  sub_100004F48((uint64_t)v13, &qword_1001188D0);
  v19 = (_OWORD *)swift_allocObject(&unk_10010D468, 80, 7);
  v20 = *(_OWORD *)(v2 + 16);
  v19[1] = *(_OWORD *)v2;
  v19[2] = v20;
  v21 = *(_OWORD *)(v2 + 48);
  v19[3] = *(_OWORD *)(v2 + 32);
  v19[4] = v21;
  sub_1000B0BCC((_QWORD *)v2);
  static TaskPriority.userInitiated.getter(v22);
  v23 = (char *)(a2 + *(int *)(sub_100005360(&qword_1001188F0) + 36));
  v24 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(&v23[*(int *)(v24 + 20)], v9, v5);
  *(_QWORD *)v23 = &unk_1001188E8;
  *((_QWORD *)v23 + 1) = v19;
  sub_10000531C((uint64_t)v17, a2, &qword_1001188D8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return sub_100004F48((uint64_t)v17, &qword_1001188D8);
}

uint64_t sub_1000B0550@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  char v28;
  uint64_t v29;

  v26 = a2;
  v4 = sub_100005360(&qword_1001188F8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005360(&qword_100118900);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100118908);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *v2;
  v17 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.getter(&v29, v17);
  if ((v29 & 1) != 0
    || (v27 = v2[1],
        v28 = *((_BYTE *)v2 + 32),
        v18 = sub_100005360(&qword_100115300),
        Binding.wrappedValue.getter(&v29, v18),
        (v29 & 1) == 0))
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v22(v16, a1, v12);
    v22(v11, (uint64_t)v16, v12);
    swift_storeEnumTagMultiPayload(v11, v8, 0);
    v23 = sub_100008078(&qword_100118910, &qword_100118908, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v24 = sub_1000B0C84();
    _ConditionalContent<>.init(storage:)(v26, v11, v12, v4, v23, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, a1, v12);
    sub_10000531C((uint64_t)v7, (uint64_t)v11, &qword_1001188F8);
    swift_storeEnumTagMultiPayload(v11, v8, 1);
    v19 = sub_100008078(&qword_100118910, &qword_100118908, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v20 = sub_1000B0C84();
    _ConditionalContent<>.init(storage:)(v26, v11, v12, v4, v19, v20);
    return sub_100004F48((uint64_t)v7, &qword_1001188F8);
  }
}

uint64_t sub_1000B07B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[13] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[14] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[15] = v3;
  v1[16] = v4;
  return swift_task_switch(sub_1000B0820, v3, v4);
}

_QWORD *sub_1000B0820()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  _QWORD *result;
  double v6;
  unint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_BYTE *)(v1 + 32);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 16);
  *(_BYTE *)(v0 + 32) = v2;
  v3 = *(_BYTE *)(v1 + 32);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v1 + 16);
  *(_BYTE *)(v0 + 80) = v3;
  v4 = sub_100005360(&qword_100115300);
  result = Binding.wrappedValue.getter((_QWORD *)(v0 + 34), v4);
  if (*(_BYTE *)(v0 + 34) != 1)
  {
    v9 = *(_OWORD **)(v0 + 104);
    swift_release(*(_QWORD *)(v0 + 112));
    *(_OWORD *)(v0 + 88) = *v9;
    *(_BYTE *)(v0 + 33) = 1;
    v10 = sub_100005360(&qword_100113FF8);
    State.wrappedValue.setter(v0 + 33, v10);
    *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 56) = *(_BYTE *)(v0 + 32);
    *(_BYTE *)(v0 + 35) = 1;
    Binding.wrappedValue.setter(v0 + 35, v4);
    return (_QWORD *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = *(double *)(*(_QWORD *)(v0 + 104) + 40) * 1000000000.0;
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) != 0)
  {
    if (v6 > -1.0)
    {
      if (v6 < 1.84467441e19)
      {
        v7 = (unint64_t)v6;
        v8 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
        *(_QWORD *)(v0 + 136) = v8;
        *v8 = v0;
        v8[1] = sub_1000B09A0;
        return (_QWORD *)static Task<>.sleep(nanoseconds:)(v7);
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000B09A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = *(_QWORD *)(v2 + 120);
    v5 = *(_QWORD *)(v2 + 128);
    v6 = sub_1000B0A8C;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 120);
    v5 = *(_QWORD *)(v2 + 128);
    v6 = sub_1000B0A0C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000B0A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v1 + 56);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v1;
  withAnimation<A>(_:_:)(v2, sub_1000B0C2C, v3, (char *)&type metadata for () + 8);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B0A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v1 + 56);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v1;
  withAnimation<A>(_:_:)(v2, sub_1000B0C2C, v3, (char *)&type metadata for () + 8);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B0B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B0374(a1, a2);
}

uint64_t sub_1000B0B3C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000B0B80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1001188E4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100013F04;
  return sub_1000B07B4(v0 + 16);
}

_QWORD *sub_1000B0BCC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  swift_retain(a1[2]);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v2);
  return a1;
}

uint64_t sub_1000B0C2C()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)*(_QWORD *)(v0 + 16);
  v3 = 1;
  v1 = sub_100005360(&qword_100113FF8);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_1000B0C84()
{
  return sub_1000B0E00(&qword_100118918, &qword_1001188F8, (void (*)(void))sub_1000B0CA8, (uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

unint64_t sub_1000B0CA8()
{
  unint64_t result;

  result = qword_100118920;
  if (!qword_100118920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _HiddenModifier, &type metadata for _HiddenModifier);
    atomic_store(result, (unint64_t *)&qword_100118920);
  }
  return result;
}

unint64_t sub_1000B0CF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118928;
  if (!qword_100118928)
  {
    v1 = sub_100005608(&qword_1001188F0);
    sub_1000B0D5C();
    sub_1000B0E8C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118928);
  }
  return result;
}

unint64_t sub_1000B0D5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118930;
  if (!qword_100118930)
  {
    v1 = sub_100005608(&qword_1001188D8);
    sub_1000B0E00(&qword_100118938, &qword_1001188D0, (void (*)(void))sub_1000B0C84, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
    sub_100008078(&qword_100115528, &qword_100115508, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118930);
  }
  return result;
}

uint64_t sub_1000B0E00(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005608(a2);
    sub_100008078(&qword_100118910, &qword_100118908, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B0E8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118940;
  if (!qword_100118940)
  {
    v1 = type metadata accessor for _TaskModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for _TaskModifier, v1);
    atomic_store(result, (unint64_t *)&qword_100118940);
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorButtonLabelLayout()
{
  return &type metadata for CalculatorButtonLabelLayout;
}

double sub_1000B0EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v0 = type metadata accessor for LayoutSubview(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LayoutSubviews(0);
  v6 = sub_1000B1374();
  dispatch thunk of Collection.startIndex.getter(&v16, v5, v6);
  dispatch thunk of Collection.endIndex.getter(&v15, v5, v6);
  v7 = 0.0;
  if (v16 != v15)
  {
    v8 = LayoutSubviews.subscript.getter(0);
    v9 = static ProposedViewSize.unspecified.getter(v8);
    v11 = v10 & 1;
    LOBYTE(v16) = v11;
    LOBYTE(v15) = v12 & 1;
    v7 = LayoutSubview.sizeThatFits(_:)(v9, v11, v13, v12 & 1);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
  return v7;
}

double sub_1000B1018()
{
  return sub_1000B0EE4();
}

uint64_t sub_1000B102C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return sub_1000B1080(a1, a2, a3, a4);
}

unint64_t sub_1000B103C()
{
  unint64_t result;

  result = qword_100118948;
  if (!qword_100118948)
  {
    result = swift_getWitnessTable(&unk_1000D3FDC, &type metadata for CalculatorButtonLabelLayout);
    atomic_store(result, (unint64_t *)&qword_100118948);
  }
  return result;
}

uint64_t sub_1000B1080(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  double *v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  char v40;
  _QWORD v41[4];
  uint64_t v42;
  double *v43;
  CGRect v44;
  CGRect v45;

  v39 = type metadata accessor for LayoutSubview(0);
  v8 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39, v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LayoutSubviews(0);
  v13 = sub_1000B1374();
  dispatch thunk of Collection.startIndex.getter(v41, v12, v13);
  result = (uint64_t)dispatch thunk of Collection.endIndex.getter(&v43, v12, v13);
  if ((double *)v41[0] != v43)
  {
    result = dispatch thunk of Collection.count.getter(v12, v13);
    v15 = (double *)_swiftEmptyArrayStorage;
    if (result)
    {
      v16 = result;
      v43 = (double *)_swiftEmptyArrayStorage;
      sub_100013808(0, result & ~(result >> 63), 0);
      result = (uint64_t)dispatch thunk of Collection.startIndex.getter(&v42, v12, v13);
      if (v16 < 0)
        goto LABEL_13;
      do
      {
        v17 = (uint64_t (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v41, &v42, v12, v13);
        v18 = v39;
        (*(void (**)(char *))(v8 + 16))(v11);
        v19 = v17(v41, 0);
        v20 = static ProposedViewSize.unspecified.getter(v19);
        v22 = v21 & 1;
        LOBYTE(v41[0]) = v22;
        v40 = v23 & 1;
        v25 = LayoutSubview.sizeThatFits(_:)(v20, v22, v24, v23 & 1);
        v27 = v26;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v18);
        v15 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        {
          sub_100013808(0, *((_QWORD *)v15 + 2) + 1, 1);
          v15 = v43;
        }
        v29 = *((_QWORD *)v15 + 2);
        v28 = *((_QWORD *)v15 + 3);
        if (v29 >= v28 >> 1)
        {
          sub_100013808(v28 > 1, v29 + 1, 1);
          v15 = v43;
        }
        *((_QWORD *)v15 + 2) = v29 + 1;
        v30 = &v15[2 * v29];
        v30[4] = v25;
        *((_QWORD *)v30 + 5) = v27;
        result = dispatch thunk of Collection.formIndex(after:)(&v42, v12, v13);
        --v16;
      }
      while (v16);
    }
    if (*((_QWORD *)v15 + 2))
    {
      v31 = v15[4];
      v32 = v15[5];
      swift_bridgeObjectRelease(v15);
      v33 = v31;
      v44.origin.x = a1;
      v44.origin.y = a2;
      v44.size.width = a3;
      v44.size.height = a4;
      v34 = CGRectGetMidX(v44) - v31 * 0.5;
      v45.origin.x = a1;
      v45.origin.y = a2;
      v45.size.width = a3;
      v45.size.height = a4;
      v35 = CGRectGetMidY(v45) - v32 * 0.5;
      v36 = LayoutSubviews.subscript.getter(0);
      v37 = static UnitPoint.topLeading.getter(v36);
      LOBYTE(v41[0]) = 0;
      LOBYTE(v43) = 0;
      LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v33, 0, *(_QWORD *)&v32, 0, v34, v35, v37, v38);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v39);
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

unint64_t sub_1000B1374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115E08;
  if (!qword_100115E08)
  {
    v1 = type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LayoutSubviews, v1);
    atomic_store(result, (unint64_t *)&qword_100115E08);
  }
  return result;
}

void sub_1000B13BC(uint64_t a1)
{
  sub_1000B13E4(a1, 1280068684, &qword_10011FEE0);
}

void sub_1000B13D0(uint64_t a1)
{
  sub_1000B13E4(a1, 2038004089, &qword_10011FEE8);
}

void sub_1000B13E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  NSString v5;

  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setDateFormat:", v5);

  *a3 = v4;
}

id sub_1000B1454(uint64_t a1)
{
  return sub_1000B1494(a1, (Class *)NSDateFormatter_ptr, (SEL *)&selRef_setDateStyle_, 1, &qword_10011FEF0);
}

id sub_1000B1474(uint64_t a1)
{
  return sub_1000B1494(a1, (Class *)NSRelativeDateTimeFormatter_ptr, (SEL *)&selRef_setUnitsStyle_, 0, &qword_10011FEF8);
}

id sub_1000B1494(uint64_t a1, Class *a2, SEL *a3, uint64_t a4, _QWORD *a5)
{
  id v8;
  id result;

  v8 = objc_msgSend(objc_allocWithZone(*a2), "init");
  result = objc_msgSend(v8, *a3, a4);
  *a5 = v8;
  return result;
}

uint64_t type metadata accessor for Helper()
{
  return objc_opt_self(_TtC10Calculator6Helper);
}

id sub_1000B1508(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v10;
  NSString v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const __CFString *v21;
  const __CFString *v22;
  id v23;
  unint64_t v24;
  id v25;
  const __CFString *v26;
  id v27;
  unint64_t v28;
  const __CTFontDescriptor *v29;
  const __CFDictionary *isa;
  const __CTFontDescriptor *CopyWithAttributes;
  CGFloat v32;
  CTFontRef v33;
  id v34;
  NSString v35;
  id v36;
  const __CTFont *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  const __CFString *v45;
  const __CFString *v46;
  id v47;
  unint64_t v48;
  id v49;
  const __CFString *v50;
  id v51;
  unint64_t v52;
  const __CTFontDescriptor *v53;
  const __CFDictionary *v54;
  const __CTFontDescriptor *v55;
  CGFloat v56;
  CTFontRef v57;
  id v58;
  NSString v59;
  id v60;
  const __CTFont *v61;
  id v62;
  id v65;
  _BYTE v66[112];
  _BYTE v67[72];
  _BYTE v68[112];
  _BYTE v69[80];

  v10 = objc_allocWithZone((Class)NSMutableAttributedString);
  swift_bridgeObjectRetain(a3);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v12 = objc_msgSend(v10, "initWithString:", v11);

  v13 = (void *)objc_opt_self(UIFont);
  v14 = objc_msgSend(v13, "systemFontOfSize:", a1);
  objc_msgSend(v12, "addAttribute:value:range:", NSFontAttributeName, v14, 0, objc_msgSend(v12, "length"));

  v65 = objc_msgSend(v13, "systemFontOfSize:", a1);
  if (a7)
  {
    v15 = sub_100005360(&qword_1001189E8);
    inited = swift_initStackObject(v15, v67);
    *(_OWORD *)(inited + 16) = xmmword_1000CD7E0;
    *(_QWORD *)(inited + 32) = kCTFontFeatureSettingsAttribute;
    v17 = sub_100005360(&qword_1001189F0);
    v18 = swift_allocObject(v17, 40, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1000CD7E0;
    v19 = swift_initStackObject(v15, v66);
    *(_OWORD *)(v19 + 16) = xmmword_1000D0760;
    *(_QWORD *)(v19 + 32) = kCTFontFeatureTypeIdentifierKey;
    v20 = objc_allocWithZone((Class)NSNumber);
    swift_bridgeObjectRetain(a7);
    v21 = (id)kCTFontFeatureSettingsAttribute;
    v22 = (id)kCTFontFeatureTypeIdentifierKey;
    v23 = objc_msgSend(v20, "initWithInteger:", 10);
    v24 = sub_1000B1C08();
    *(_QWORD *)(v19 + 40) = v23;
    *(_QWORD *)(v19 + 64) = v24;
    *(_QWORD *)(v19 + 72) = kCTFontFeatureSelectorIdentifierKey;
    v25 = objc_allocWithZone((Class)NSNumber);
    v26 = (id)kCTFontFeatureSelectorIdentifierKey;
    v27 = objc_msgSend(v25, "initWithInteger:", 2);
    *(_QWORD *)(v19 + 104) = v24;
    *(_QWORD *)(v19 + 80) = v27;
    *(_QWORD *)(v18 + 32) = sub_100004FC8(v19);
    *(_QWORD *)(inited + 64) = sub_100005360(&qword_1001189F8);
    *(_QWORD *)(inited + 40) = v18;
    v28 = sub_100004FC8(inited);
    v29 = (const __CTFontDescriptor *)objc_msgSend(v65, "fontDescriptor");
    type metadata accessor for CFString(0);
    sub_1000B1C44();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v28);
    CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v29, isa);

    objc_msgSend(v65, "pointSize");
    v33 = CTFontCreateWithFontDescriptor(CopyWithAttributes, v32, 0);
    v34 = objc_allocWithZone((Class)NSMutableAttributedString);
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a7);
    v36 = objc_msgSend(v34, "initWithString:", v35);

    v37 = v33;
    objc_msgSend(v36, "addAttribute:value:range:", NSFontAttributeName, v37, 0, objc_msgSend(v36, "length"));

    objc_msgSend(v12, "appendAttributedString:", v36);
    v38 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    objc_msgSend(v12, "addAttribute:value:range:", NSForegroundColorAttributeName, v38, 0, objc_msgSend(v12, "length"));

  }
  if (a5)
  {
    v39 = sub_100005360(&qword_1001189E8);
    v40 = swift_initStackObject(v39, v69);
    *(_OWORD *)(v40 + 16) = xmmword_1000CD7E0;
    *(_QWORD *)(v40 + 32) = kCTFontFeatureSettingsAttribute;
    v41 = sub_100005360(&qword_1001189F0);
    v42 = swift_allocObject(v41, 40, 7);
    *(_OWORD *)(v42 + 16) = xmmword_1000CD7E0;
    v43 = swift_initStackObject(v39, v68);
    *(_OWORD *)(v43 + 16) = xmmword_1000D0760;
    *(_QWORD *)(v43 + 32) = kCTFontFeatureTypeIdentifierKey;
    v44 = objc_allocWithZone((Class)NSNumber);
    swift_bridgeObjectRetain(a5);
    v45 = (id)kCTFontFeatureSettingsAttribute;
    v46 = (id)kCTFontFeatureTypeIdentifierKey;
    v47 = objc_msgSend(v44, "initWithInteger:", 10);
    v48 = sub_1000B1C08();
    *(_QWORD *)(v43 + 40) = v47;
    *(_QWORD *)(v43 + 64) = v48;
    *(_QWORD *)(v43 + 72) = kCTFontFeatureSelectorIdentifierKey;
    v49 = objc_allocWithZone((Class)NSNumber);
    v50 = (id)kCTFontFeatureSelectorIdentifierKey;
    v51 = objc_msgSend(v49, "initWithInteger:", 1);
    *(_QWORD *)(v43 + 104) = v48;
    *(_QWORD *)(v43 + 80) = v51;
    *(_QWORD *)(v42 + 32) = sub_100004FC8(v43);
    *(_QWORD *)(v40 + 64) = sub_100005360(&qword_1001189F8);
    *(_QWORD *)(v40 + 40) = v42;
    v52 = sub_100004FC8(v40);
    v53 = (const __CTFontDescriptor *)objc_msgSend(v65, "fontDescriptor");
    type metadata accessor for CFString(0);
    sub_1000B1C44();
    v54 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v52);
    v55 = CTFontDescriptorCreateCopyWithAttributes(v53, v54);

    objc_msgSend(v65, "pointSize");
    v57 = CTFontCreateWithFontDescriptor(v55, v56, 0);
    v58 = objc_allocWithZone((Class)NSMutableAttributedString);
    v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
    v60 = objc_msgSend(v58, "initWithString:", v59);

    v61 = v57;
    objc_msgSend(v60, "addAttribute:value:range:", NSFontAttributeName, v61, 0, objc_msgSend(v60, "length"));

    objc_msgSend(v12, "appendAttributedString:", v60);
    v62 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    objc_msgSend(v12, "addAttribute:value:range:", NSForegroundColorAttributeName, v62, 0, objc_msgSend(v12, "length"));

  }
  return v12;
}

unint64_t sub_1000B1C08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115DB0;
  if (!qword_100115DB0)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100115DB0);
  }
  return result;
}

unint64_t sub_1000B1C44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114090;
  if (!qword_100114090)
  {
    type metadata accessor for CFString(255);
    result = swift_getWitnessTable(&unk_1000CD5C4, v1);
    atomic_store(result, (unint64_t *)&qword_100114090);
  }
  return result;
}

ValueMetadata *type metadata accessor for TappableOutsets()
{
  return &type metadata for TappableOutsets;
}

uint64_t sub_1000B1C9C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F7128, 1);
}

uint64_t sub_1000B1CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v43 = a1;
  v45 = a2;
  v44 = type metadata accessor for HighlightHoverEffect(0);
  v46 = *(_QWORD *)(v44 - 8);
  v11 = __chkstk_darwin(v44, v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ContentShapeKinds(0, v11);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005360(&qword_100118A00);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100005360(&qword_100117CD8);
  v24 = swift_allocObject(v23, ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ 3 * *(_QWORD *)(v15 + 72), *(unsigned __int8 *)(v15 + 80) | 7);
  *(_OWORD *)(v24 + 16) = xmmword_1000D0770;
  v25 = static ContentShapeKinds.interaction.getter(v24);
  v26 = static ContentShapeKinds.accessibility.getter(v25);
  static ContentShapeKinds.hoverEffect.getter(v26);
  v47 = v24;
  v27 = sub_100005178(&qword_100117CE0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentShapeKinds, (uint64_t)&protocol conformance descriptor for ContentShapeKinds);
  v28 = sub_100005360(&qword_100117CE8);
  v29 = sub_100008078(&qword_100117CF0, &qword_100117CE8, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v28, v29, v14, v27);
  v31 = static UnitPoint.center.getter(v30);
  v33 = v32;
  v34 = &v22[*(int *)(v19 + 36)];
  v35 = sub_100005360(&qword_100118A08);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(&v34[*(int *)(v35 + 40)], v18, v14);
  *(double *)v34 = a6;
  *((double *)v34 + 1) = a3;
  *((double *)v34 + 2) = a4;
  *((double *)v34 + 3) = a5;
  *((double *)v34 + 4) = a5;
  *((double *)v34 + 5) = v31;
  *((_QWORD *)v34 + 6) = v33;
  v34[56] = 0;
  v36 = sub_100005360(&qword_100118A10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v22, v43, v36);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  static CustomHoverEffect<>.highlight.getter(v37);
  v38 = sub_1000B1F8C();
  v39 = sub_100005178(&qword_100118A30, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  v40 = v44;
  View.hoverEffect<A>(_:isEnabled:)(v13, 1, v19, v44, v38, v39);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v40);
  return sub_1000B2028((uint64_t)v22);
}

uint64_t sub_1000B1F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;

  return sub_1000B1CAC(a1, a2, *v2, v2[1], v2[2], v2[3]);
}

unint64_t sub_1000B1F8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118A18;
  if (!qword_100118A18)
  {
    v1 = sub_100005608(&qword_100118A00);
    sub_100008078(&qword_100118A20, &qword_100118A10, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100008078(&qword_100118A28, &qword_100118A08, (uint64_t)&protocol conformance descriptor for _ContentShapeKindModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118A18);
  }
  return result;
}

uint64_t sub_1000B2028(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_100118A00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for InsettableRoundendRectangle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InsettableRoundendRectangle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InsettableRoundendRectangle()
{
  return &type metadata for InsettableRoundendRectangle;
}

ValueMetadata *type metadata accessor for EdgeOutset()
{
  return &type metadata for EdgeOutset;
}

uint64_t sub_1000B20D4()
{
  _QWORD v1[4];

  v1[0] = sub_100005608(&qword_100118A00);
  v1[1] = type metadata accessor for HighlightHoverEffect(255);
  v1[2] = sub_1000B1F8C();
  v1[3] = sub_100005178(&qword_100118A30, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
}

uint64_t sub_1000B215C()
{
  return sub_100008078(&qword_100118A38, &qword_100118A40, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

double sub_1000B2188@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double x;
  double y;
  double width;
  double height;
  double result;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[2];
  char v25;
  CGRect v26;
  CGRect v27;

  v11 = type metadata accessor for RoundedCornerStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v5;
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  v27 = CGRectInset(v26, -v5[1], -v5[2]);
  x = v27.origin.x;
  y = v27.origin.y;
  width = v27.size.width;
  height = v27.size.height;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for RoundedCornerStyle.circular(_:), v11);
  Path.init(roundedRect:cornerRadius:style:)(v24, v15, x, y, width, height, v16);
  result = *(double *)v24;
  v22 = v24[1];
  *(_OWORD *)a1 = v24[0];
  *(_OWORD *)(a1 + 16) = v22;
  *(_BYTE *)(a1 + 32) = v25;
  return result;
}

uint64_t sub_1000B22A8()
{
  return Shape.sizeThatFits(_:)();
}

uint64_t sub_1000B22C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000B2428();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000B2310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000B2428();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000B2360(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B2428();
  return Shape.body.getter(a1, v2);
}

unint64_t sub_1000B239C()
{
  unint64_t result;

  result = qword_100118A48;
  if (!qword_100118A48)
  {
    result = swift_getWitnessTable(&unk_1000D41A8, &type metadata for InsettableRoundendRectangle);
    atomic_store(result, (unint64_t *)&qword_100118A48);
  }
  return result;
}

unint64_t sub_1000B23E4()
{
  unint64_t result;

  result = qword_100118A50;
  if (!qword_100118A50)
  {
    result = swift_getWitnessTable(&unk_1000D4158, &type metadata for InsettableRoundendRectangle);
    atomic_store(result, (unint64_t *)&qword_100118A50);
  }
  return result;
}

unint64_t sub_1000B2428()
{
  unint64_t result;

  result = qword_100118A58;
  if (!qword_100118A58)
  {
    result = swift_getWitnessTable(&unk_1000D41F8, &type metadata for InsettableRoundendRectangle);
    atomic_store(result, (unint64_t *)&qword_100118A58);
  }
  return result;
}

uint64_t initializeWithCopy for CalculatorToolbar(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v7;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for CalculatorToolbar(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  a1[4] = a2[4];
  v10 = a1[5];
  v11 = a2[5];
  a1[5] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

uint64_t *assignWithTake for CalculatorToolbar(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  a1[4] = a2[4];
  v8 = a1[5];
  a1[5] = a2[5];
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorToolbar(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorToolbar(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorToolbar()
{
  return &type metadata for CalculatorToolbar;
}

uint64_t sub_1000B2694(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F716C, 1);
}

uint64_t sub_1000B26A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void (*v40)();
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  unint64_t v51;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[32];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v2 = v1;
  v64 = a1;
  v61 = sub_100005360(&qword_100113FE0);
  __chkstk_darwin(v61, v3);
  v60 = (uint64_t *)((char *)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = type metadata accessor for LayoutDirection(0);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59, v5);
  v56 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100005360(&qword_100118A60);
  __chkstk_darwin(v58, v7);
  v9 = (char *)&KeyPath - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100005360(&qword_100118A68);
  v11 = __chkstk_darwin(v63, v10);
  v62 = (uint64_t)&KeyPath - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = static VerticalAlignment.center.getter(v11);
  sub_1000B2BDC(v1, (uint64_t)&v79);
  v13 = v79;
  v14 = BYTE8(v79);
  v15 = v80;
  v54 = v79;
  v55 = v80;
  v16 = BYTE8(v80);
  v17 = v81;
  v18 = v82[0];
  v20 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(&v67, 0, 1, 0x4046000000000000, 0, v20, v21);
  v78 = 1;
  v77 = v14;
  v76 = v16;
  v75 = v18;
  v74 = v68;
  v73 = v70;
  v79 = (unint64_t)KeyPath;
  LOBYTE(v80) = 1;
  *((_QWORD *)&v80 + 1) = v13;
  LOBYTE(v81) = v14;
  *((_QWORD *)&v81 + 1) = v15;
  v82[0] = v16;
  *(_OWORD *)&v82[8] = v17;
  v82[24] = v18;
  *(_QWORD *)&v83 = v67;
  BYTE8(v83) = v68;
  *(_QWORD *)&v84 = v69;
  BYTE8(v84) = v70;
  v85 = v71;
  v86 = 0x3FF0000000000000;
  KeyPath = swift_getKeyPath(&unk_1000D42C8);
  v22 = *(_QWORD *)v2;
  LOBYTE(v13) = *(_BYTE *)(v2 + 8);
  swift_retain(*(_QWORD *)v2);
  v24 = sub_1000436BC(v23, v13);
  swift_release(v22);
  v25 = swift_getKeyPath(&unk_1000D42F8);
  v66[0] = v24;
  v26 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v66, v25, v26);
  swift_release(v25);
  v27 = v24 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  swift_beginAccess(v24 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, v66, 0, 0);
  v29 = v56;
  v28 = v57;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
  v31 = v27;
  v32 = v59;
  v30(v56, v31, v59);
  v33 = swift_release(v24);
  v34 = v60;
  ((void (*)(char *, char *, uint64_t, __n128))v30)((char *)v60 + *(int *)(v61 + 28), v29, v32, v33);
  *v34 = KeyPath;
  sub_10000531C((uint64_t)v34, (uint64_t)&v9[*(int *)(v58 + 36)], &qword_100113FE0);
  v35 = v85;
  *((_OWORD *)v9 + 6) = v84;
  *((_OWORD *)v9 + 7) = v35;
  *((_QWORD *)v9 + 16) = v86;
  v36 = *(_OWORD *)v82;
  *((_OWORD *)v9 + 2) = v81;
  *((_OWORD *)v9 + 3) = v36;
  v37 = v83;
  *((_OWORD *)v9 + 4) = *(_OWORD *)&v82[16];
  *((_OWORD *)v9 + 5) = v37;
  v38 = v80;
  *(_OWORD *)v9 = v79;
  *((_OWORD *)v9 + 1) = v38;
  sub_1000B2F74((uint64_t)&v79);
  sub_100004F48((uint64_t)v34, &qword_100113FE0);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v32);
  swift_release(v54);
  swift_release(v55);
  v39 = *(_QWORD *)(v2 + 16);
  LOBYTE(v32) = *(_BYTE *)(v2 + 24);
  v72 = *(_OWORD *)(v2 + 32);
  v40 = (void (*)())swift_allocObject(&unk_10010D880, 64, 7);
  v41 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v40 + 1) = *(_OWORD *)v2;
  *((_OWORD *)v40 + 2) = v41;
  *((_OWORD *)v40 + 3) = *(_OWORD *)(v2 + 32);
  v42 = v62;
  sub_10000531C((uint64_t)v9, v62, &qword_100118A60);
  v43 = v63;
  v44 = (void (**)())(v42 + *(int *)(v63 + 36));
  *v44 = sub_1000B2FAC;
  v44[1] = v40;
  v44[2] = 0;
  v44[3] = 0;
  swift_retain(v39);
  swift_retain(v22);
  sub_1000660D8((uint64_t)&v72);
  sub_100004F48((uint64_t)v9, &qword_100118A60);
  swift_retain(v39);
  v46 = sub_1000438AC(v45, v32);
  swift_release(v39);
  v47 = swift_getKeyPath(&unk_1000D4320);
  v65 = v46;
  v48 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v65, v47, v48);
  swift_release(v47);
  LOBYTE(v32) = *(_BYTE *)(v46 + 16);
  swift_release(v46);
  LOBYTE(v65) = v32;
  v49 = (_OWORD *)swift_allocObject(&unk_10010D8A8, 64, 7);
  v50 = *(_OWORD *)(v2 + 16);
  v49[1] = *(_OWORD *)v2;
  v49[2] = v50;
  v49[3] = *(_OWORD *)(v2 + 32);
  swift_retain(v22);
  swift_retain(v39);
  sub_1000660D8((uint64_t)&v72);
  v51 = sub_1000B2FFC();
  View.onChange<A>(of:initial:_:)(&v65, 0, sub_1000B2FF4, v49, v43, &type metadata for Bool, v51, &protocol witness table for Bool);
  swift_release(v49);
  return sub_100004F48(v42, &qword_100118A68);
}

void sub_1000B2BDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  double v19;
  uint64_t v20;
  __int128 v21;
  double v22;

  v4 = type metadata accessor for CalculatorLayout(0);
  v5 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v6 = Environment.init<A>(_:)(v4, v4, v5);
  v8 = v7;
  v9 = type metadata accessor for CalculatorToolbarViewModel(0);
  v10 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  v11 = Environment.init<A>(_:)(v9, v9, v10);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_BYTE *)(a1 + 24);
  swift_retain(v14);
  v17 = sub_1000438AC(v16, v15);
  swift_release(v14);
  KeyPath = swift_getKeyPath(&unk_1000D4348);
  *(_QWORD *)&v21 = v17;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, KeyPath, v10);
  swift_release(KeyPath);
  LODWORD(v14) = *(unsigned __int8 *)(v17 + 17);
  swift_release(v17);
  v19 = 1.0;
  if ((_DWORD)v14 != 3)
  {
    v21 = *(_OWORD *)(a1 + 32);
    v20 = sub_100005360(qword_100118AB0);
    State.wrappedValue.getter(&v22, v20);
    v19 = v22;
  }
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v8 & 1;
  *(_QWORD *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 24) = v13 & 1;
  *(double *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
}

void sub_1000B2D68(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  swift_retain(v2);
  v5 = sub_1000438AC(v4, v3);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_1000D4320);
  *(_QWORD *)&v15 = v5;
  v7 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(unsigned __int8 *)(v5 + 16);
  swift_release(v5);
  if (v8 == 1)
  {
    swift_retain(v2);
    v10 = sub_1000438AC(v9, v3);
    swift_release(v2);
    v11 = swift_getKeyPath(&unk_1000D4348);
    *(_QWORD *)&v15 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, v11, v7);
    swift_release(v11);
    v12 = *(unsigned __int8 *)(v10 + 17);
    swift_release(v10);
    if (v12 != 3)
    {
      v15 = *(_OWORD *)(a1 + 32);
      v14 = 0;
      v13 = sub_100005360(qword_100118AB0);
      State.wrappedValue.setter(&v14, v13);
    }
  }
}

double sub_1000B2EC0(uint64_t a1, char *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;

  v4 = *a2;
  v5 = static Animation.easeInOut(duration:)(0.5);
  v7[2] = a3;
  v8 = v4;
  withAnimation<A>(_:_:)(v5, sub_1000B31F4, v7, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

uint64_t sub_1000B2F2C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B26A4(a1);
}

uint64_t sub_1000B2F74(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  swift_retain(*(_QWORD *)(a1 + 40));
  swift_retain(v2);
  return a1;
}

void sub_1000B2FAC()
{
  uint64_t v0;

  sub_1000B2D68(v0 + 16);
}

uint64_t sub_1000B2FC0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

double sub_1000B2FF4(uint64_t a1, char *a2)
{
  uint64_t v2;

  return sub_1000B2EC0(a1, a2, v2 + 16);
}

unint64_t sub_1000B2FFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118A70;
  if (!qword_100118A70)
  {
    v1 = sub_100005608(&qword_100118A68);
    sub_1000B3068();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118A70);
  }
  return result;
}

unint64_t sub_1000B3068()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118A78;
  if (!qword_100118A78)
  {
    v1 = sub_100005608(&qword_100118A60);
    sub_1000B30EC();
    sub_100008078(&qword_100115358, &qword_100113FE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118A78);
  }
  return result;
}

unint64_t sub_1000B30EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118A80;
  if (!qword_100118A80)
  {
    v1 = sub_100005608(&qword_100118A88);
    sub_1000B3170();
    sub_100008078(&qword_100116310, &qword_100116318, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118A80);
  }
  return result;
}

unint64_t sub_1000B3170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118A90;
  if (!qword_100118A90)
  {
    v1 = sub_100005608(&qword_100118A98);
    sub_100008078(&qword_100118AA0, &qword_100118AA8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118A90);
  }
  return result;
}

uint64_t sub_1000B31F4()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v4;
  __int128 v5;

  v1 = 1.0;
  if (*(_BYTE *)(v0 + 24))
    v1 = 0.0;
  v5 = *(_OWORD *)(*(_QWORD *)(v0 + 16) + 32);
  v4 = v1;
  v2 = sub_100005360(qword_100118AB0);
  return State.wrappedValue.setter(&v4, v2);
}

uint64_t sub_1000B3264()
{
  _QWORD v1[4];

  v1[0] = sub_100005608(&qword_100118A68);
  v1[1] = &type metadata for Bool;
  v1[2] = sub_1000B2FFC();
  v1[3] = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

void sub_1000B32C4()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIApplicationShortcutIcon), "iconWithSystemImageName:", v0);

  qword_10011FF00 = (uint64_t)v1;
}

uint64_t type metadata accessor for CalculatorStandardDisplayView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000055DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CalculatorStandardDisplayView);
}

uint64_t sub_1000B333C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000F71D0, 1);
}

void sub_1000B3370()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v0 + 40);
  swift_retain(v1);
  sub_1000436BC(v3, v2);
  swift_release(v1);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_BYTE *)(v0 + 24);
  swift_retain(v4);
  v7 = sub_100043890(v6, v5);
  swift_release(v4);
  KeyPath = swift_getKeyPath(&unk_1000D4428);
  v11 = v7;
  v9 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(unsigned __int8 *)(v7 + 48);
  swift_release(v7);
  __asm { BR              X10 }
}

void sub_1000B346C()
{
  uint64_t v0;
  char v1;

  v1 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657061506874616DLL, 0xE900000000000072, 0x6369736162, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(0xE900000000000072);
  sub_1000A63DC(v0, v1 & 1);
  sub_100009ED0();
  swift_release(v0);
}

void sub_1000B3534()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v0 + 40);
  swift_retain(v1);
  v4 = sub_1000436BC(v3, v2);
  swift_release(v1);
  if ((sub_100008F40() & 1) != 0)
  {
    swift_release(v4);
  }
  else
  {
    sub_1000090E4();
    sub_100009BC4();
    v5 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v5, "bounds");
    swift_release(v4);

  }
}

void sub_1000B3608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v3 = type metadata accessor for Optional(255, *(_QWORD *)(a1 + 16));
  v5 = type metadata accessor for ModifiedContent(255, v3, &type metadata for _PaddingLayout, v4);
  v6 = sub_100005608(&qword_100114F28);
  v8 = type metadata accessor for ModifiedContent(255, v5, v6, v7);
  v9 = sub_100005608(&qword_100118B38);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v9, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v12 = type metadata accessor for HStack(0, v11);
  __chkstk_darwin(v12, v13);
  __chkstk_darwin(v14, v15);
  v16 = *(_QWORD *)(v2 + 32);
  v17 = *(_BYTE *)(v2 + 40);
  swift_retain(v16);
  sub_1000436BC(v18, v17);
  swift_release(v16);
  v19 = *(_QWORD *)(v2 + 16);
  v20 = *(_BYTE *)(v2 + 24);
  swift_retain(v19);
  v22 = sub_100043890(v21, v20);
  swift_release(v19);
  KeyPath = swift_getKeyPath(&unk_1000D4428);
  v26 = v22;
  v24 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, KeyPath, v24);
  swift_release(KeyPath);
  v25 = *(unsigned __int8 *)(v22 + 48);
  swift_release(v22);
  __asm { BR              X10 }
}

uint64_t sub_1000B3800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _QWORD v18[5];
  __n128 v19;
  uint64_t v20;

  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657061506874616DLL, 0xE900000000000072, 0x6369736162, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(0xE900000000000072);
  sub_1000B3534();
  sub_1000A6454(v1, v7 & 1);
  *(_OWORD *)(v6 - 144) = v8;
  swift_release(v1);
  v10 = static VerticalAlignment.bottom.getter(v9);
  v11 = v10;
  if (qword_100113998 != -1)
    v10 = swift_once(&qword_100113998, sub_10001B758);
  v12 = __chkstk_darwin(v10, qword_10011F820);
  v13 = *(_QWORD *)(*(_QWORD *)(v6 - 104) + 24);
  v18[2] = *(_QWORD *)(v6 - 112);
  v18[3] = v13;
  v18[4] = v0;
  v19 = v12;
  v20 = v14;
  HStack.init(alignment:spacing:content:)(v11, v15, 0, sub_1000B552C, v18, v3, *(_QWORD *)(v6 - 128));
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v2);
  sub_100046714(v5, v2, v4);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 120) + 8);
  v16(v5, v2);
  sub_10003E144(v4, v2, *(_QWORD *)(v6 - 96));
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v4, v2);
}

uint64_t sub_1000B399C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t (*v49)(__n128);
  uint64_t v50;
  uint64_t v51;
  uint64_t WitnessTable;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD v104[2];
  uint64_t v105[7];
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;

  v89 = a3;
  v92 = a2;
  v100 = a4;
  v13 = sub_100005360(&qword_100115248);
  __chkstk_darwin(v13, v14);
  v94 = (uint64_t *)((char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100005360(&qword_100115250);
  __chkstk_darwin(v16, v17);
  v96 = (uint64_t)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100005360(&qword_100118B38);
  __chkstk_darwin(v98, v19);
  v97 = (uint64_t)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v99 = (uint64_t)&v87 - v23;
  v24 = sub_100005360(&qword_1001162B8);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Optional(0, a2);
  v87 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28, v29);
  v32 = (char *)&v87 - v31;
  v33 = type metadata accessor for ModifiedContent(0, v28, &type metadata for _PaddingLayout, v30);
  v91 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v87 - v35;
  v37 = sub_100005608(&qword_100114F28);
  v88 = type metadata accessor for ModifiedContent(0, v33, v37, v38);
  v90 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88, v39);
  v95 = (char *)&v87 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41, v42);
  v44 = (char *)&v87 - v43;
  v47 = __chkstk_darwin(v45, v46);
  v101 = (uint64_t)&v87 - v48;
  v49 = *(uint64_t (**)(__n128))a1;
  v93 = *(_QWORD *)(a1 + 8);
  v50 = v49(v47);
  v51 = static Edge.Set.bottom.getter(v50);
  v105[6] = a3;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v28);
  ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))View.padding(_:_:))(v51, a5 * 0.5, 0, v28, WitnessTable);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v32, v28);
  if (a5 * 0.6 > 13.0)
    v53 = a5 * 0.6;
  else
    v53 = 13.0;
  v54 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v27, 1, 1, v54);
  v55 = static Font.system(size:weight:design:)(0, 1, v27, v53);
  sub_100004F48((uint64_t)v27, &qword_1001162B8);
  v105[4] = WitnessTable;
  v105[5] = (uint64_t)&protocol witness table for _PaddingLayout;
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
  View.font(_:)(v55, v33, v56);
  v57 = swift_release(v55);
  (*(void (**)(char *, uint64_t, __n128))(v91 + 8))(v36, v33, v57);
  v58 = sub_100008078((unint64_t *)&qword_100114F20, &qword_100114F28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v105[2] = v56;
  v105[3] = v58;
  v59 = v88;
  v91 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v88);
  sub_100046714((uint64_t)v44, v59, v101);
  v60 = v90;
  v61 = *(uint64_t (**)(char *, uint64_t))(v90 + 8);
  v62 = v61(v44, v59);
  v63 = static HorizontalAlignment.trailing.getter(v62);
  sub_1000B3534();
  v64 = v94;
  *v94 = v63;
  v64[1] = v65;
  *((_BYTE *)v64 + 16) = 0;
  v66 = (uint64_t)v64;
  v67 = sub_100005360(&qword_100118B40);
  v68 = v92;
  v69 = v89;
  sub_1000B4074(a1, v92, v89, v66 + *(int *)(v67 + 44), a6, a7);
  sub_1000B3370();
  v71 = v70.n128_f64[0];
  v72 = static Alignment.bottom.getter(v70);
  v73 = v96;
  sub_100036624(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v96, 0.0, 1, v71, 0, v72, v74);
  sub_100004F48(v66, &qword_100115248);
  v109 = *(_QWORD *)(a1 + 16);
  v110 = *(_BYTE *)(a1 + 24);
  v75 = *(_QWORD *)(a1 + 32);
  v108 = *(_BYTE *)(a1 + 40);
  v76 = *(_QWORD *)(a1 + 56);
  v106 = *(_QWORD *)(a1 + 48);
  v107 = v75;
  v77 = swift_allocObject(&unk_10010D968, 97, 7);
  *(_QWORD *)(v77 + 16) = v68;
  *(_QWORD *)(v77 + 24) = v69;
  v78 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v77 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v77 + 80) = v78;
  *(_BYTE *)(v77 + 96) = *(_BYTE *)(a1 + 64);
  v79 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v77 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v77 + 48) = v79;
  v80 = v97;
  sub_10000531C(v73, v97, &qword_100115250);
  v81 = v98;
  v82 = (_QWORD *)(v80 + *(int *)(v98 + 36));
  *v82 = 0;
  v82[1] = 0;
  v82[2] = sub_1000B5548;
  v82[3] = v77;
  swift_retain(v93);
  sub_100052DCC(&v109);
  sub_100052DCC(&v107);
  sub_100052DCC(&v106);
  swift_retain(v76);
  sub_100004F48(v73, &qword_100115250);
  v83 = v99;
  sub_100007CD8(v80, v99, &qword_100118B38);
  v84 = (uint64_t)v95;
  v85 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v95, v101, v59);
  v105[0] = v84;
  sub_10000531C(v83, v80, &qword_100118B38);
  v105[1] = v80;
  v104[0] = v59;
  v104[1] = v81;
  v102 = v91;
  v103 = sub_1000B5554();
  sub_10003E15C(v105, 2uLL, (uint64_t)v104);
  sub_100004F48(v83, &qword_100118B38);
  v61((char *)v85, v59);
  sub_100004F48(v80, &qword_100118B38);
  return v61((char *)v84, v59);
}

uint64_t sub_1000B4074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t KeyPath;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t OpaqueTypeConformance2;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  void (*v174)(_BYTE *@<X8>);
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  char v184;
  __int128 v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;

  v168 = a3;
  v167 = a2;
  v166 = a4;
  v163 = sub_100005360(&qword_100118B60);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163, v9);
  v161 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100005360(&qword_100118B68);
  __chkstk_darwin(v164, v11);
  v165 = (char *)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v157 = (char *)&v145 - v15;
  v156 = sub_100005360(&qword_100118B70);
  __chkstk_darwin(v156, v16);
  v159 = (char *)&v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v155 = (char *)&v145 - v20;
  __chkstk_darwin(v21, v22);
  v158 = (char *)&v145 - v23;
  v24 = sub_100005360(&qword_100118B78);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v145 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for AccessibilityChildBehavior(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170, v28);
  v154 = (char *)&v145 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v31);
  v33 = (char *)&v145 - v32;
  v148 = sub_100005360(&qword_100118B80);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148, v34);
  v146 = (char *)&v145 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100005360(&qword_100118B88);
  __chkstk_darwin(v149, v36);
  v150 = (char *)&v145 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v39);
  v152 = (char *)&v145 - v40;
  v41 = sub_100005360(&qword_100118B90);
  __chkstk_darwin(v41, v42);
  v151 = (uint64_t)&v145 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44, v45);
  v153 = (uint64_t)&v145 - v46;
  v47 = sub_100005360(&qword_100118B98);
  __chkstk_darwin(v47, v48);
  v160 = (uint64_t)&v145 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50, v51);
  v53 = (uint64_t *)((char *)&v145 - v52);
  v54 = *(_QWORD *)(a1 + 16);
  v55 = *(_BYTE *)(a1 + 24);
  swift_retain(v54);
  v57 = sub_100043890(v56, v55);
  swift_release(v54);
  v58 = *(unsigned __int8 **)(v57 + 16);
  swift_retain(v58);
  swift_release(v57);
  KeyPath = swift_getKeyPath(&unk_1000D4478);
  v172 = (uint64_t)v58;
  v60 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v172, KeyPath, v60);
  swift_release(KeyPath);
  LODWORD(KeyPath) = v58[41];
  v61 = swift_release(v58);
  v171 = v53;
  if ((_DWORD)KeyPath == 1)
  {
    v145 = v24;
    v62 = *(_QWORD *)(a1 + 8);
    v63 = *(_QWORD *)(a1 + 32);
    v196 = *(_BYTE *)(a1 + 40);
    v64 = *(_QWORD *)(a1 + 56);
    v194 = *(_QWORD *)(a1 + 48);
    v195 = v63;
    v65 = swift_allocObject(&unk_10010D9B8, 112, 7);
    v66 = v168;
    *(_QWORD *)(v65 + 16) = v167;
    *(_QWORD *)(v65 + 24) = v66;
    v67 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v65 + 64) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v65 + 80) = v67;
    *(_BYTE *)(v65 + 96) = *(_BYTE *)(a1 + 64);
    v68 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v65 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v65 + 48) = v68;
    *(double *)(v65 + 104) = a5;
    swift_retain(v54);
    swift_retain(v62);
    sub_100052DCC(&v195);
    sub_100052DCC(&v194);
    v69 = swift_retain(v64);
    v70 = static Alignment.bottomTrailing.getter(v69);
    v72 = _FrameLayout.init(width:height:alignment:)(&v181, 0, 1, *(_QWORD *)&a5, 0, v70, v71);
    v172 = (uint64_t)sub_1000B595C;
    v173 = v65;
    v174 = sub_10006DCF0;
    v175 = 0;
    v176 = v181;
    v177 = v182;
    v178 = v183;
    v179 = v184;
    v180 = v185;
    v73 = _AXSAutomationEnabled(v72);
    if ((_DWORD)v73)
      static AccessibilityChildBehavior.contain.getter(v73);
    else
      static AccessibilityChildBehavior.ignore.getter(v73);
    v84 = sub_100005360(&qword_100118BB8);
    v85 = sub_1000B576C();
    v86 = v146;
    View.accessibilityElement(children:)(v33, v84, v85);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v33, v170);
    swift_release(v173);
    swift_release(v175);
    v172 = v84;
    v173 = v85;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v88 = (uint64_t)v150;
    v89 = v148;
    View.accessibilityIdentifier(_:)(0xD000000000000012, 0x80000001000D8050, v148, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v86, v89);
    v90 = LocalizedStringKey.init(stringLiteral:)(0x746C75736552, 0xE600000000000000);
    v92 = v91;
    v94 = v93;
    v95 = (uint64_t)v152;
    ModifiedContent<>.accessibilityLabel(_:)(v90);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v92);
    sub_100004F48(v88, &qword_100118B88);
    v96 = type metadata accessor for CalculatorViewModel(0);
    v97 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v98 = Environment.init<A>(_:)(v96, v96, v97);
    LOBYTE(v94) = v99;
    v100 = v151;
    sub_10000531C(v95, v151, &qword_100118B88);
    v101 = v100 + *(int *)(v41 + 36);
    *(_QWORD *)v101 = v98;
    *(_BYTE *)(v101 + 8) = v94 & 1;
    *(_BYTE *)(v101 + 9) = 0;
    sub_100004F48(v95, &qword_100118B88);
    v102 = v153;
    sub_100007CD8(v100, v153, &qword_100118B90);
    sub_10000531C(v102, (uint64_t)v27, &qword_100118B90);
    swift_storeEnumTagMultiPayload(v27, v145, 0);
    v103 = sub_100005360(&qword_100118BA0);
    v104 = sub_1000B5654();
    v105 = sub_1000B5834();
    _ConditionalContent<>.init(storage:)(v171, v27, v41, v103, v104, v105);
    sub_100004F48(v102, &qword_100118B90);
  }
  else
  {
    v74 = static HorizontalAlignment.center.getter(v61);
    v75 = ((uint64_t (*)(void))static Alignment.bottomTrailing.getter)();
    _FrameLayout.init(width:height:alignment:)(&v181, 0, 1, *(_QWORD *)&a5, 0, v75, v76);
    v77 = v181;
    v78 = v182;
    v79 = v183;
    v80 = v184;
    *(_QWORD *)v27 = v74;
    *((_QWORD *)v27 + 1) = 0;
    v27[16] = 1;
    *((_QWORD *)v27 + 3) = v77;
    v27[32] = v78;
    *((_QWORD *)v27 + 5) = v79;
    v27[48] = v80;
    *(_OWORD *)(v27 + 56) = v185;
    swift_storeEnumTagMultiPayload(v27, v24, 1);
    v81 = sub_100005360(&qword_100118BA0);
    v82 = sub_1000B5654();
    v83 = sub_1000B5834();
    _ConditionalContent<>.init(storage:)(v53, v27, v41, v81, v82, v83);
  }
  v106 = *(_QWORD *)(a1 + 8);
  v107 = *(_QWORD *)(a1 + 32);
  v193 = *(_BYTE *)(a1 + 40);
  v108 = *(_QWORD *)(a1 + 56);
  v191 = *(_QWORD *)(a1 + 48);
  v192 = v107;
  v109 = swift_allocObject(&unk_10010D990, 112, 7);
  v110 = v168;
  *(_QWORD *)(v109 + 16) = v167;
  *(_QWORD *)(v109 + 24) = v110;
  v111 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v109 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v109 + 80) = v111;
  *(_BYTE *)(v109 + 96) = *(_BYTE *)(a1 + 64);
  v112 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v109 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v109 + 48) = v112;
  *(double *)(v109 + 104) = a6;
  swift_retain(v54);
  swift_retain(v106);
  sub_100052DCC(&v192);
  sub_100052DCC(&v191);
  v113 = swift_retain(v108);
  v114 = static Alignment.bottom.getter(v113);
  v116 = _FrameLayout.init(width:height:alignment:)(&v186, 0, 1, *(_QWORD *)&a6, 0, v114, v115);
  v172 = (uint64_t)sub_1000B58C0;
  v173 = v109;
  v174 = sub_10006DCF0;
  v175 = 0;
  v176 = v186;
  v177 = v187;
  v178 = v188;
  v179 = v189;
  v180 = v190;
  v117 = _AXSAutomationEnabled(v116);
  v118 = v154;
  if ((_DWORD)v117)
    static AccessibilityChildBehavior.contain.getter(v117);
  else
    static AccessibilityChildBehavior.ignore.getter(v117);
  v119 = (uint64_t)v159;
  v120 = (uint64_t)v158;
  v121 = (uint64_t)v157;
  v122 = v156;
  v123 = (uint64_t)v155;
  v124 = sub_100005360(&qword_100118BE8);
  v125 = sub_1000B58D0();
  v126 = v161;
  View.accessibilityElement(children:)(v118, v124, v125);
  (*(void (**)(char *, uint64_t))(v169 + 8))(v118, v170);
  swift_release(v173);
  swift_release(v175);
  v172 = v124;
  v173 = v125;
  v127 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v128 = (uint64_t)v165;
  v129 = v163;
  View.accessibilityIdentifier(_:)(0xD000000000000011, 0x80000001000D8030, v163, v127);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v126, v129);
  v130 = LocalizedStringKey.init(stringLiteral:)(0x7475706E49, 0xE500000000000000);
  v132 = v131;
  v134 = v133;
  ModifiedContent<>.accessibilityLabel(_:)(v130);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v132);
  sub_100004F48(v128, &qword_100118B68);
  v135 = type metadata accessor for CalculatorViewModel(0);
  v136 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v137 = Environment.init<A>(_:)(v135, v135, v136);
  LOBYTE(v134) = v138;
  sub_10000531C(v121, v123, &qword_100118B68);
  v139 = v123 + *(int *)(v122 + 36);
  *(_QWORD *)v139 = v137;
  *(_BYTE *)(v139 + 8) = v134 & 1;
  *(_BYTE *)(v139 + 9) = 1;
  sub_100004F48(v121, &qword_100118B68);
  sub_100007CD8(v123, v120, &qword_100118B70);
  v140 = v171;
  v141 = v160;
  sub_10000531C((uint64_t)v171, v160, &qword_100118B98);
  sub_10000531C(v120, v119, &qword_100118B70);
  v142 = v166;
  sub_10000531C(v141, v166, &qword_100118B98);
  v143 = sub_100005360(&qword_100118C08);
  sub_10000531C(v119, v142 + *(int *)(v143 + 48), &qword_100118B70);
  sub_100004F48(v120, &qword_100118B70);
  sub_100004F48((uint64_t)v140, &qword_100118B98);
  sub_100004F48(v119, &qword_100118B70);
  return sub_100004F48(v141, &qword_100118B98);
}

void sub_1000B4D10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  double v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v44 = a2;
  v45 = a3;
  v48 = a4;
  v7 = type metadata accessor for TapGesture(0);
  v46 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100118C10);
  v47 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_BYTE *)(a1 + 24);
  swift_retain(v15);
  v18 = sub_100043890(v17, v16);
  swift_release(v15);
  v19 = *(_QWORD *)(v18 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D44A0);
  v49 = v19;
  v21 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v49, KeyPath, v21);
  swift_release(KeyPath);
  v22 = *(_QWORD *)(v19 + 32);
  swift_retain(v22);
  swift_release(v18);
  if (qword_100113CF0 != -1)
    swift_once(&qword_100113CF0, sub_100052FAC);
  v23 = qword_10011FC98;
  v24 = type metadata accessor for CalculatorViewModel(0);
  v25 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  swift_retain(v23);
  v49 = Environment.init<A>(_:)(v24, v24, v25);
  v50 = v26 & 1;
  v51 = v22;
  v52 = 0;
  v53 = v23;
  v54 = 0;
  v55 = a5;
  v56 = 0;
  TapGesture.init(count:)(1);
  v27 = *(_QWORD *)(a1 + 8);
  v28 = *(_QWORD *)(a1 + 32);
  v59 = *(_BYTE *)(a1 + 40);
  v29 = *(_QWORD *)(a1 + 56);
  v57 = *(_QWORD *)(a1 + 48);
  v58 = v28;
  v30 = swift_allocObject(&unk_10010D9E0, 97, 7);
  v31 = v45;
  *(_QWORD *)(v30 + 16) = v44;
  *(_QWORD *)(v30 + 24) = v31;
  v32 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v30 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v30 + 80) = v32;
  *(_BYTE *)(v30 + 96) = *(_BYTE *)(a1 + 64);
  v33 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v30 + 48) = v33;
  v34 = swift_allocObject(&unk_10010DA08, 32, 7);
  *(_QWORD *)(v34 + 16) = sub_1000B59CC;
  *(_QWORD *)(v34 + 24) = v30;
  swift_retain(v15);
  swift_retain(v27);
  sub_100052DCC(&v58);
  sub_100052DCC(&v57);
  swift_retain(v29);
  Gesture.onEnded(_:)(sub_1000B59FC, v34, v7, &protocol witness table for TapGesture);
  v35 = swift_release(v34);
  v36 = (*(uint64_t (**)(char *, uint64_t, __n128))(v46 + 8))(v10, v7, v35);
  v37 = static GestureMask.all.getter(v36);
  v38 = sub_100005360(&qword_100118C18);
  v39 = sub_1000B5A1C();
  v40 = sub_100008078(qword_100118C30, &qword_100118C10, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  View.simultaneousGesture<A>(_:including:)(v14, v37, v38, v11, v39, v40);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v11);
  v41 = v49;
  v42 = v51;
  v43 = v52;
  swift_release(v53);
  swift_release(v42);
  swift_release(v41);
  swift_release(v43);
}

double sub_1000B5090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double result;
  _QWORD v8[6];

  v6 = static Animation.easeOut.getter();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a1;
  withAnimation<A>(_:_:)(v6, sub_1000B5AE4, v8, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

double sub_1000B50FC(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double result;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 24);
  swift_retain(v1);
  v4 = sub_100043890(v3, v2);
  v5 = sub_100043890(v1, v2);
  swift_release(v1);
  v6 = *(_QWORD *)(v5 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D44A0);
  v15 = v6;
  v8 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(_QWORD *)(v6 + 32);
  swift_retain(v9);
  swift_release(v5);
  v11 = CalculateExpression.expression.getter(v10);
  v13 = v12;
  sub_100021298(v11, v12, 0, 0, 0, 0);
  swift_release(v4);
  swift_release(v9);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  return result;
}

void sub_1000B5210(uint64_t a1, double a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  double v32;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  swift_retain(v3);
  v6 = sub_100043890(v5, v4);
  swift_release(v3);
  v7 = *(_QWORD *)(v6 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D44C8);
  v26 = v7;
  v9 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(_QWORD *)(v7 + 24);
  swift_retain(v10);
  swift_release(v6);
  if (qword_100113CE8 != -1)
    swift_once(&qword_100113CE8, sub_100052F90);
  v11 = qword_10011FC90;
  v12 = type metadata accessor for CalculatorViewModel(0);
  v13 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  swift_retain(v11);
  v14 = Environment.init<A>(_:)(v12, v12, v13);
  v26 = v14;
  v27 = v15 & 1;
  v28 = v10;
  v29 = 0;
  v30 = v11;
  v31 = 1;
  v32 = a2;
  v16 = sub_10007B03C();
  v18 = v17;
  v24[0] = v16;
  v24[1] = v17;
  v25 = v19;
  v23 = 0;
  v20 = sub_100005360(&qword_100116458);
  v21 = sub_1000B5AA0();
  v22 = sub_10007C638();
  View.focused<A>(_:equals:)(v24, &v23, &type metadata for InputTextView, v20, v21, v22);
  swift_release(v11);
  swift_release(v10);
  swift_release(v18);
  swift_release(v16);
  swift_release(v14);
}

double sub_1000B5414(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 24);
  swift_retain(v1);
  v4 = sub_100043890(v3, v2);
  swift_release(v1);
  KeyPath = swift_getKeyPath(&unk_1000D4450);
  v8[2] = v4;
  v9 = 6;
  v10 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10006127C, v8, (char *)&type metadata for () + 8, v6);
  swift_release(v4);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_1000B54E4(uint64_t a1)
{
  sub_1000B3608(a1);
}

uint64_t sub_1000B552C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B399C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_1000B5540()
{
  return sub_1000B597C(97);
}

double sub_1000B5548()
{
  uint64_t v0;

  return sub_1000B5414(v0 + 32);
}

unint64_t sub_1000B5554()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118B48;
  if (!qword_100118B48)
  {
    v1 = sub_100005608(&qword_100118B38);
    sub_1000B55C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118B48);
  }
  return result;
}

unint64_t sub_1000B55C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118B50;
  if (!qword_100118B50)
  {
    v1 = sub_100005608(&qword_100115250);
    sub_100008078(&qword_100118B58, &qword_100115248, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118B50);
  }
  return result;
}

unint64_t sub_1000B5654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118BA8;
  if (!qword_100118BA8)
  {
    v1 = sub_100005608(&qword_100118B90);
    sub_1000B56C0();
    sub_1000B57F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118BA8);
  }
  return result;
}

unint64_t sub_1000B56C0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100118BB0;
  if (!qword_100118BB0)
  {
    v1 = sub_100005608(&qword_100118B88);
    v2[0] = sub_100005608(&qword_100118BB8);
    v2[1] = sub_1000B576C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118BB0);
  }
  return result;
}

unint64_t sub_1000B576C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118BC0;
  if (!qword_100118BC0)
  {
    v1 = sub_100005608(&qword_100118BB8);
    sub_100008078(&qword_100118BC8, &qword_100118BD0, (uint64_t)&unk_1000D1AA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118BC0);
  }
  return result;
}

unint64_t sub_1000B57F0()
{
  unint64_t result;

  result = qword_100118BD8;
  if (!qword_100118BD8)
  {
    result = swift_getWitnessTable(&unk_1000D10F8, &type metadata for AccessibilityMathEquationViewModifier);
    atomic_store(result, (unint64_t *)&qword_100118BD8);
  }
  return result;
}

unint64_t sub_1000B5834()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118BE0;
  if (!qword_100118BE0)
  {
    v1 = sub_100005608(&qword_100118BA0);
    sub_100008078(&qword_100116DD8, &qword_100116DE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118BE0);
  }
  return result;
}

uint64_t sub_1000B58B8()
{
  return sub_1000B597C(112);
}

void sub_1000B58C0()
{
  uint64_t v0;

  sub_1000B5210(v0 + 32, *(double *)(v0 + 104));
}

unint64_t sub_1000B58D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118BF0;
  if (!qword_100118BF0)
  {
    v1 = sub_100005608(&qword_100118BE8);
    sub_100008078(&qword_100118BF8, &qword_100118C00, (uint64_t)&unk_1000D1AA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118BF0);
  }
  return result;
}

uint64_t sub_1000B5954()
{
  return sub_1000B597C(112);
}

void sub_1000B595C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000B4D10(v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 104));
}

uint64_t sub_1000B5974()
{
  return sub_1000B597C(97);
}

uint64_t sub_1000B597C(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[5]);
  swift_release(v1[6]);
  swift_release(v1[8]);
  swift_release(v1[10]);
  swift_release(v1[11]);
  return swift_deallocObject(v1, a1, 7);
}

double sub_1000B59CC()
{
  uint64_t v0;

  return sub_1000B5090(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000B59D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B59FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1000B5A1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118C20;
  if (!qword_100118C20)
  {
    v1 = sub_100005608(&qword_100118C18);
    sub_1000B5AA0();
    sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118C20);
  }
  return result;
}

unint64_t sub_1000B5AA0()
{
  unint64_t result;

  result = qword_100118C28;
  if (!qword_100118C28)
  {
    result = swift_getWitnessTable(&unk_1000D37D4, &type metadata for InputTextView);
    atomic_store(result, (unint64_t *)&qword_100118C28);
  }
  return result;
}

double sub_1000B5AE4()
{
  uint64_t v0;

  return sub_1000B50FC(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000B5B08(_QWORD *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for Optional(255, *a1);
  v3 = type metadata accessor for ModifiedContent(255, v1, &type metadata for _PaddingLayout, v2);
  v4 = sub_100005608(&qword_100114F28);
  v6 = type metadata accessor for ModifiedContent(255, v3, v4, v5);
  v7 = sub_100005608(&qword_100118B38);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v6, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v10 = type metadata accessor for HStack(255, v9);
  return swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v10);
}

uint64_t sub_1000B5BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_1000B5BCC(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[9]);
  swift_release(a1[11]);
  swift_release(a1[12]);
  return swift_release(a1[13]);
}

uint64_t sub_1000B5C24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v13;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t sub_1000B5D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  swift_retain(v6);
  swift_release(v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  swift_retain(v9);
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_BYTE *)(a2 + 56);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v13;
  swift_retain(v12);
  swift_release(v14);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v16;
  swift_retain(v16);
  swift_release(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v20;
  swift_retain(v20);
  swift_release(v19);
  v21 = *(_QWORD *)(a2 + 104);
  v22 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

__n128 sub_1000B5E34(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1000B5E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v5;
  swift_release(v6);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v7;
  swift_release(v8);
  v9 = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v9;
  swift_release(v10);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v11);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_release(*(_QWORD *)(a1 + 88));
  v12 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v12);
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v13);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

uint64_t sub_1000B5F3C(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000B5F84(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CalculatorUnitConversionDisplayView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000055DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CalculatorUnitConversionDisplayView);
}

uint64_t sub_1000B5FF0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000F7240, 1);
}

uint64_t sub_1000B6024()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v0 + 40);
  swift_retain(v1);
  v4 = sub_1000439B4(v3, v2);
  swift_release(v1);
  v5 = sub_10004835C();
  swift_release(v4);
  return v5;
}

BOOL sub_1000B6074()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v6;

  v0 = sub_1000B6024();
  KeyPath = swift_getKeyPath(&unk_1000D4720);
  v6 = v0;
  v2 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(id *)(v0 + 32);
  v4 = objc_msgSend(v3, "unitType", swift_release(v0).n128_f64[0]);

  return v4 == (id)16;
}

uint64_t sub_1000B612C()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_1000B6178(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  __int128 v5;
  char v6;

  v5 = *(_OWORD *)(v1 + 96);
  v6 = *(_BYTE *)(v1 + 112);
  v4 = a1;
  v2 = sub_100005360(&qword_1001170B0);
  return FocusState.Binding.wrappedValue.setter(&v4, v2);
}

uint64_t sub_1000B61C8()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.projectedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_1000B6218()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  double v8;
  uint64_t v10;

  if (qword_100113CF0 != -1)
    swift_once(&qword_100113CF0, sub_100052FAC);
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  swift_retain(v1);
  v4 = sub_100043890(v3, v2);
  swift_release(v1);
  v5 = *(_QWORD *)(v4 + 16);
  swift_retain(v5);
  swift_release(v4);
  KeyPath = swift_getKeyPath(&unk_1000D47E8);
  v10 = v5;
  v7 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v7);
  swift_release(KeyPath);
  LODWORD(v4) = *(unsigned __int8 *)(v5 + 42);
  swift_release(v5);
  v8 = 1.0;
  if ((_DWORD)v4)
    v8 = 0.5;
  return Color.opacity(_:)(v8);
}

void sub_1000B6320(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[7];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v48 = a2;
  v5 = sub_100005608(&qword_100118CB8);
  v45 = *(_QWORD *)(a1 + 16);
  v46 = a1;
  v6 = type metadata accessor for Optional(255, v45);
  v8 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _PaddingLayout, v7);
  v9 = sub_100005608(&qword_100114F28);
  v11 = type metadata accessor for ModifiedContent(255, v8, v9, v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v11, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for VStack(255, v13, WitnessTable);
  v16 = swift_getTupleTypeMetadata2(255, v5, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, v16);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v18 = type metadata accessor for ZStack(255, v17);
  v19 = sub_100005608(&qword_100118CC0);
  v20 = swift_getTupleTypeMetadata2(255, v18, v19, 0, 0);
  v21 = type metadata accessor for TupleView(255, v20);
  v44[1] = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v21);
  v44[2] = v21;
  v22 = type metadata accessor for HStack(0, v21);
  v44[4] = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22, v23);
  v25 = type metadata accessor for ModifiedContent(0, v22, &type metadata for _FixedSizeLayout, v24);
  v44[6] = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v26);
  v44[3] = (char *)v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  v44[5] = (char *)v44 - v30;
  v31 = *(_QWORD *)(v3 + 48);
  v32 = *(_BYTE *)(v3 + 56);
  swift_retain(v31);
  v34 = sub_1000436BC(v33, v32);
  swift_release(v31);
  if ((sub_100008F40() & 1) != 0)
  {
    swift_release(v34);
  }
  else
  {
    sub_1000090E4();
    sub_100009BC4();
    v35 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v35, "bounds");
    swift_release(v34);

  }
  swift_retain(v31);
  sub_1000436BC(v36, v32);
  swift_release(v31);
  v37 = *(_QWORD *)(v3 + 16);
  v47 = v3;
  v38 = *(_BYTE *)(v3 + 24);
  swift_retain(v37);
  v40 = sub_100043890(v39, v38);
  swift_release(v37);
  KeyPath = swift_getKeyPath(&unk_1000D45E0);
  v49 = v40;
  v42 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v49, KeyPath, v42);
  swift_release(KeyPath);
  v43 = *(unsigned __int8 *)(v40 + 48);
  swift_release(v40);
  __asm { BR              X10 }
}

uint64_t sub_1000B66A8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char v8;
  double v9;
  char v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  _QWORD v32[24];

  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657061506874616DLL, 0xE900000000000072, 0x6369736162, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(0xE900000000000072);
  v9 = sub_1000A63DC(v0, v8 & 1);
  v10 = sub_100009ED0();
  v11 = 60.0;
  if (v9 >= 60.0)
    v11 = v9;
  v12 = 70.0;
  if (v9 >= 70.0)
    v12 = v9;
  if ((v10 & 1) != 0)
    v11 = v12;
  v13 = (v11 - v7) * 0.5;
  v14 = sub_100009CC4();
  swift_release(v0);
  if (v14 * 0.25 >= v13)
    v15 = v13;
  else
    v15 = v14 * 0.25;
  swift_retain(v2);
  v17 = sub_1000436BC(v16, v1);
  swift_release(v2);
  v18 = sub_1000A66D0(v15);
  swift_release(v17);
  if (qword_100113998 != -1)
    v19 = swift_once(&qword_100113998, sub_10001B758);
  v21 = qword_10011F820;
  v22 = __chkstk_darwin(v19, v20);
  v23 = *(_QWORD *)(*(_QWORD *)(v6 - 144) + 24);
  v32[2] = *(_QWORD *)(v6 - 152);
  v32[3] = v23;
  v32[4] = *(_QWORD *)(v6 - 136);
  v32[5] = v22.n128_u64[0];
  *(double *)&v32[6] = v15;
  v32[7] = v18;
  v32[8] = v24;
  v25 = static VerticalAlignment.center.getter(v22);
  HStack.init(alignment:spacing:content:)(v25, v21, 0, sub_1000BD2A0, v32, *(_QWORD *)(v6 - 192), *(_QWORD *)(v6 - 200));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v4);
  v27 = *(_QWORD *)(v6 - 184);
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))View.fixedSize(horizontal:vertical:))(0, 1, v4, WitnessTable);
  v28 = swift_release(v18);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v6 - 176) + 8))(v5, v4, v28);
  *(_QWORD *)(v6 - 120) = WitnessTable;
  *(_QWORD *)(v6 - 112) = &protocol witness table for _FixedSizeLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  v29 = *(_QWORD *)(v6 - 168);
  sub_100046714(v27, v3, v29);
  v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 160) + 8);
  v30(v27, v3);
  sub_10003E144(v29, v3, *(_QWORD *)(v6 - 128));
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v29, v3);
}

uint64_t sub_1000B6950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t TupleTypeMetadata2;
  uint64_t v36;
  uint64_t WitnessTable;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t (*v53)(_BYTE *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  id v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t OpaqueTypeConformance2;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  void (*v99)(_BYTE *, uint64_t);
  uint64_t (*v100)(_BYTE *, uint64_t);
  _QWORD v102[6];
  _BYTE v103[12];
  unsigned int v104;
  _BYTE *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(_BYTE *, uint64_t);
  _BYTE *v112;
  _BYTE *v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[2];
  __int128 v136;

  v108 = a2;
  v120 = a5;
  v14 = sub_100005360(&qword_100118CC8);
  __chkstk_darwin(v14, v15);
  v17 = (double *)&v103[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v122 = sub_100005360(&qword_100118CD0);
  __chkstk_darwin(v122, v18);
  v121 = &v103[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v119 = sub_100005360(&qword_100118CC0);
  v117 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119, v20);
  v118 = &v103[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22, v23);
  v115 = &v103[-v24];
  __chkstk_darwin(v25, v26);
  v116 = &v103[-v27];
  v28 = sub_100005608(&qword_100118CB8);
  v29 = type metadata accessor for Optional(255, a3);
  v31 = type metadata accessor for ModifiedContent(255, v29, &type metadata for _PaddingLayout, v30);
  v32 = sub_100005608(&qword_100114F28);
  v34 = type metadata accessor for ModifiedContent(255, v31, v32, v33);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v34, 0, 0);
  v36 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v36);
  v38 = type metadata accessor for VStack(255, v36, WitnessTable);
  v39 = swift_getTupleTypeMetadata2(255, v28, v38, 0, 0);
  v40 = type metadata accessor for TupleView(255, v39);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v40);
  v41 = type metadata accessor for ZStack(0, v40);
  v42 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41, v43);
  v45 = &v103[-((v44 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v46, v47);
  v49 = &v103[-v48];
  v123 = a3;
  v124 = a4;
  v109 = a4;
  v125 = a1;
  v126 = a6;
  static Alignment.center.getter(v50);
  ZStack.init(alignment:content:)(v51);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v41);
  v112 = v49;
  v107 = v52;
  sub_100046714((uint64_t)v45, v41, (uint64_t)v49);
  v110 = v42;
  v53 = *(uint64_t (**)(_BYTE *, uint64_t))(v42 + 8);
  v113 = v45;
  v114 = v41;
  v111 = v53;
  v54 = v53(v45, v41);
  v55 = static HorizontalAlignment.trailing.getter(v54);
  v56 = *(_QWORD *)(a1 + 48);
  LOBYTE(v40) = *(_BYTE *)(a1 + 56);
  swift_retain(v56);
  v58 = sub_1000436BC(v57, v40);
  swift_release(v56);
  if ((sub_100008F40() & 1) != 0)
  {
    swift_release(v58);
    v59 = -5.0;
  }
  else
  {
    sub_1000090E4();
    v60 = sub_100009BC4();
    v61 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v61, "bounds");
    v63 = v62;
    swift_release(v58);

    v59 = 2.0;
    if (v60 / v63 != 0.0)
      v59 = v60 / v63 * 4.0;
  }
  *(_QWORD *)v17 = v55;
  v17[1] = v59;
  *((_BYTE *)v17 + 16) = 0;
  v64 = sub_100005360(&qword_100118CD8);
  v65 = v109;
  v66 = sub_1000B7E54(a1, v108, a3, v109, (uint64_t)v17 + *(int *)(v64 + 44), a7, a8);
  v67 = static Alignment.center.getter(v66);
  v69 = v68;
  v70 = v122;
  v71 = (uint64_t)v121;
  v72 = (uint64_t)&v121[*(int *)(v122 + 36)];
  sub_1000BBBAC(a1, a3, v65, v72);
  v73 = (uint64_t *)(v72 + *(int *)(sub_100005360(&qword_100118CE0) + 36));
  *v73 = v67;
  v73[1] = v69;
  sub_100007CD8((uint64_t)v17, v71, &qword_100118CC8);
  v108 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000D8070);
  v75 = v74;
  v106 = v76;
  v77 = v70;
  v79 = v78;
  v136 = *(_OWORD *)(a1 + 80);
  v80 = sub_100005360(&qword_100113FF8);
  v81 = State.projectedValue.getter(&v127, v80);
  v105 = v103;
  v82 = v127;
  v83 = v128;
  v104 = v129;
  __chkstk_darwin(v81, v84);
  v85 = sub_100005360(&qword_100118CE8);
  v86 = sub_1000BD2D4();
  v87 = sub_100005608(&qword_100115CC8);
  v88 = sub_100008078(&qword_100115CD8, &qword_100115CC8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v127 = v87;
  v128 = v88;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.allowsSecureDrawing()>>, 1);
  v102[3] = OpaqueTypeConformance2;
  v102[4] = &protocol witness table for Text;
  v102[2] = v86;
  v102[0] = v85;
  v102[1] = &type metadata for Text;
  v90 = v115;
  v91 = (uint64_t)v121;
  ((void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)(), _QWORD *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD, uint64_t))View.alert<A, B>(_:isPresented:actions:message:))(v108, v75, v106 & 1, v79, v82, v83, v104, sub_1000BD2C8, v102, sub_1000BC784, 0, v77);
  swift_bridgeObjectRelease(v79);
  swift_bridgeObjectRelease(v75);
  swift_release(v83);
  swift_release(v82);
  sub_100004F48(v91, &qword_100118CD0);
  v92 = v117;
  v93 = v116;
  v94 = v119;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v117 + 32))(v116, v90, v119);
  v95 = v113;
  v96 = v112;
  v97 = v114;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v110 + 16))(v113, v112, v114);
  *(_QWORD *)&v136 = v95;
  v98 = v118;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v118, v93, v94);
  *((_QWORD *)&v136 + 1) = v98;
  v135[0] = v97;
  v135[1] = v94;
  v133 = v107;
  v127 = v122;
  v128 = v85;
  v129 = &type metadata for Text;
  v130 = v86;
  v131 = OpaqueTypeConformance2;
  v132 = &protocol witness table for Text;
  v134 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 1);
  sub_10003E15C((uint64_t *)&v136, 2uLL, (uint64_t)v135);
  v99 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
  v99(v93, v94);
  v100 = v111;
  v111(v96, v97);
  v99(v98, v94);
  return v100(v95, v97);
}

uint64_t sub_1000B70E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t OpaqueTypeConformance2;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t WitnessTable;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  _BYTE v56[16];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66[3];

  v52 = a1;
  v53 = a4;
  v8 = type metadata accessor for Optional(255, a2);
  v10 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout, v9);
  v11 = sub_100005608(&qword_100114F28);
  v13 = type metadata accessor for ModifiedContent(255, v10, v11, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v16 = type metadata accessor for VStack(0, v15, WitnessTable);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&WitnessTable - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v54 = (char *)&WitnessTable - v23;
  v24 = sub_100005360(&qword_100118CB8);
  v51 = *(_QWORD *)(v24 - 8);
  v25 = v51;
  __chkstk_darwin(v24, v26);
  v55 = (char *)&WitnessTable - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  v31 = (char *)&WitnessTable - v30;
  v33 = type metadata accessor for CalculatorUnitConversionDisplayView(0, a2, a3, v32);
  v34 = v52;
  sub_1000B7444(v33, (uint64_t)v31);
  v57 = a2;
  v58 = a3;
  v59 = v34;
  v60 = a5;
  v36 = static HorizontalAlignment.center.getter(v35);
  VStack.init(alignment:spacing:content:)(v36, 0, 1, sub_1000BDE9C, v56, v15, WitnessTable);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v16);
  v38 = (uint64_t)v54;
  sub_100046714((uint64_t)v20, v16, (uint64_t)v54);
  v39 = *(void (**)(char *, uint64_t))(v17 + 8);
  v39(v20, v16);
  v40 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v41 = (uint64_t)v55;
  v40(v55, v31, v24);
  v66[0] = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v38, v16);
  v66[1] = (uint64_t)v20;
  v65[0] = v24;
  v65[1] = v16;
  v42 = sub_100005608(&qword_100118ED0);
  v43 = type metadata accessor for HighlightHoverEffect(255);
  v44 = sub_100005608(&qword_100118ED8);
  v45 = sub_1000BD7D0(&qword_100118EE0, &qword_100118ED8, (void (*)(void))sub_1000BDEAC);
  v61 = v44;
  v62 = v45;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.help(_:)>>, 1);
  v47 = sub_100005178(&qword_100118A30, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  v61 = v42;
  v62 = v43;
  v63 = OpaqueTypeConformance2;
  v64 = v47;
  v61 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  v62 = v37;
  sub_10003E15C(v66, 2uLL, (uint64_t)v65);
  v39(v54, v16);
  v48 = *(void (**)(char *, uint64_t))(v51 + 8);
  v48(v31, v24);
  v39(v20, v16);
  return ((uint64_t (*)(char *, uint64_t))v48)(v55, v24);
}

uint64_t sub_1000B7444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t *v47;
  uint64_t (*v48)(char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;

  v90 = a1;
  v103 = a2;
  v3 = type metadata accessor for HighlightHoverEffect(0);
  v104 = *(_QWORD *)(v3 - 8);
  v105 = v3;
  v5 = __chkstk_darwin(v3, v4);
  v102 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PlainButtonStyle(0, v5);
  v95 = *(_QWORD *)(v7 - 8);
  v96 = v7;
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100114F90);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_100118EF8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005360(&qword_100118F08);
  v93 = *(_QWORD *)(v20 - 8);
  v94 = v20;
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100005360(&qword_100118EF0);
  __chkstk_darwin(v92, v24);
  v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100005360(&qword_100118ED8);
  __chkstk_darwin(v98, v27);
  v91 = (char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v30);
  v97 = (char *)&v90 - v31;
  v32 = sub_100005360(&qword_100118ED0);
  v100 = *(_QWORD *)(v32 - 8);
  v101 = v32;
  __chkstk_darwin(v32, v33);
  v99 = (char *)&v90 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = swift_allocObject(&unk_10010DD90, 168, 7);
  v36 = v2[6];
  v37 = v2[7];
  v38 = v2[4];
  *(_OWORD *)(v35 + 112) = v2[5];
  *(_OWORD *)(v35 + 128) = v36;
  *(_OWORD *)(v35 + 144) = v37;
  v39 = v2[2];
  v40 = v2[3];
  v41 = *v2;
  *(_OWORD *)(v35 + 48) = v2[1];
  *(_OWORD *)(v35 + 64) = v39;
  *(_OWORD *)(v35 + 80) = v40;
  *(_OWORD *)(v35 + 96) = v38;
  v42 = *(_OWORD *)(v90 + 16);
  *(_QWORD *)(v35 + 160) = *((_QWORD *)v2 + 16);
  *(_OWORD *)(v35 + 16) = v42;
  *(_OWORD *)(v35 + 32) = v41;
  sub_100066E98(v2);
  v43 = sub_100005360(&qword_100114FB8);
  v106 = &type metadata for Image;
  v107 = &protocol witness table for Image;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  Button.init(action:label:)(sub_1000BE0AC, v35, sub_1000BCC10, 0, v43, OpaqueTypeConformance2);
  if (qword_100113DF0 != -1)
    swift_once(&qword_100113DF0, sub_100053508);
  v45 = qword_10011FD98;
  KeyPath = swift_getKeyPath(&unk_1000D4608);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v15, v11);
  v47 = (uint64_t *)&v19[*(int *)(v16 + 36)];
  *v47 = KeyPath;
  v47[1] = v45;
  v48 = *(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8);
  v49 = swift_retain(v45);
  v50 = v48(v15, v11, v49);
  PlainButtonStyle.init()(v50);
  v51 = sub_1000BDFA4(&qword_100118F00, &qword_100118EF8, (unint64_t *)&qword_100114FC8, &qword_100114F90);
  v52 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v53 = v96;
  View.buttonStyle<A>(_:)(v10, v16, v96, v51, v52);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v10, v53);
  sub_100004F48((uint64_t)v19, &qword_100118EF8);
  v55 = v93;
  v54 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v26, v23, v94);
  v56 = v92;
  v57 = &v26[*(int *)(v92 + 36)];
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)v57 = _Q0;
  *((_OWORD *)v57 + 1) = xmmword_1000CEB90;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v23, v54);
  v63 = sub_1000BDEAC();
  v64 = (uint64_t)v91;
  View.accessibilityIdentifier(_:)(0x6177537374696E55, 0xEF6E6F7474754270, v56, v63);
  sub_100004F48((uint64_t)v26, &qword_100118EF0);
  v65 = LocalizedStringKey.init(stringLiteral:)(0x696E552070617753, 0xEA00000000007374);
  v66 = Text.init(_:tableName:bundle:comment:)(v65);
  v68 = v67;
  v70 = v69;
  v72 = v71 & 1;
  v74 = (uint64_t)v97;
  v73 = (void *)v98;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_10002DD44(v66, v68, v72);
  swift_bridgeObjectRelease(v70);
  sub_100004F48(v64, &qword_100118ED8);
  v75 = LocalizedStringKey.init(stringLiteral:)(0x696E552070617753, 0xEA00000000007374);
  v77 = v76;
  LOBYTE(v70) = v78;
  v80 = v79;
  v81 = sub_1000BD7D0(&qword_100118EE0, &qword_100118ED8, (void (*)(void))sub_1000BDEAC);
  v82 = v99;
  View.help(_:)(v75, v77, v70 & 1, v80, v73, v81);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v77);
  v83 = sub_100004F48(v74, &qword_100118ED8);
  v84 = v102;
  static CustomHoverEffect<>.highlight.getter(v83);
  v106 = v73;
  v107 = (void *)v81;
  v85 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.help(_:)>>, 1);
  v86 = sub_100005178(&qword_100118A30, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  v87 = v101;
  v88 = v105;
  View.hoverEffect<A>(_:isEnabled:)(v84, 1, v101, v105, v85, v86);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v84, v88);
  return (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v82, v87);
}

uint64_t sub_1000B7AAC@<X0>(uint64_t (**a1)(__n128)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t WitnessTable;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  char v61;
  uint64_t v62[8];

  v56 = a4;
  v9 = sub_100005360(&qword_1001162B8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional(0, a2);
  v51 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v51 - v16;
  v18 = type metadata accessor for ModifiedContent(0, v13, &type metadata for _PaddingLayout, v15);
  v53 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v51 - v20;
  v22 = sub_100005608(&qword_100114F28);
  v24 = type metadata accessor for ModifiedContent(0, v18, v22, v23);
  v54 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v25);
  v55 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v51 - v29;
  v33 = __chkstk_darwin(v31, v32);
  v52 = (uint64_t)&v51 - v34;
  v35 = (*a1)(v33);
  v36 = static Edge.Set.bottom.getter(v35);
  v62[6] = a3;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v13);
  ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))View.padding(_:_:))(v36, a5 * 0.5, 0, v13, WitnessTable);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v13);
  if (a5 * 0.75 > 13.0)
    v38 = a5 * 0.75;
  else
    v38 = 13.0;
  v39 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v12, 1, 1, v39);
  v40 = static Font.system(size:weight:design:)(0, 1, v12, v38);
  sub_100004F48((uint64_t)v12, &qword_1001162B8);
  v62[4] = WitnessTable;
  v62[5] = (uint64_t)&protocol witness table for _PaddingLayout;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  View.font(_:)(v40, v18, v41);
  v42 = swift_release(v40);
  (*(void (**)(char *, uint64_t, __n128))(v53 + 8))(v21, v18, v42);
  v43 = sub_100008078((unint64_t *)&qword_100114F20, &qword_100114F28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v62[2] = v41;
  v62[3] = v43;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v45 = v52;
  sub_100046714((uint64_t)v30, v24, v52);
  v46 = v54;
  v47 = *(void (**)(char *, uint64_t))(v54 + 8);
  v47(v30, v24);
  v60 = 0;
  v61 = 1;
  v62[0] = (uint64_t)&v60;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v49 = (uint64_t)v55;
  v48(v55, v45, v24);
  v62[1] = v49;
  v59[0] = &type metadata for Spacer;
  v59[1] = v24;
  v57 = &protocol witness table for Spacer;
  v58 = v44;
  sub_10003E15C(v62, 2uLL, (uint64_t)v59);
  v47((char *)v45, v24);
  return ((uint64_t (*)(uint64_t, uint64_t))v47)(v49, v24);
}

uint64_t sub_1000B7E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  double (**v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t OpaqueTypeConformance2;
  char *v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  __n128 v132;
  id v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double (**v147)(uint64_t);
  uint64_t v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  __int128 v173;
  uint64_t v174;
  void *v175;

  v170 = a3;
  v171 = a4;
  v150 = a2;
  v167 = a5;
  v10 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v168 = *(_QWORD *)(v10 - 8);
  v169 = v10;
  __chkstk_darwin(v10, v11);
  v166 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100118DE0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005360(&qword_100118DE8);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v149 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005360(&qword_100118DF0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v149 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100005360(&qword_100118DF8);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153, v25);
  v151 = (char *)&v149 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100005360(&qword_100118E00);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156, v27);
  v154 = (char *)&v149 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100005360(&qword_100118E08);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159, v29);
  v157 = (char *)&v149 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100005360(&qword_100118E10);
  v161 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163, v31);
  v160 = (char *)&v149 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005360(&qword_100118E18);
  v164 = *(_QWORD *)(v33 - 8);
  v165 = v33;
  v35 = __chkstk_darwin(v33, v34);
  v162 = (char *)&v149 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = static Alignment.bottomTrailing.getter(v35);
  v39 = v38;
  v40 = *(_QWORD *)(a1 + 48);
  v41 = *(_BYTE *)(a1 + 56);
  swift_retain(v40);
  v43 = sub_1000436BC(v42, v41);
  swift_release(v40);
  sub_1000A6540();
  v45 = v44;
  swift_release(v43);
  *(_QWORD *)v16 = v37;
  *((_QWORD *)v16 + 1) = v39;
  v47 = v170;
  v46 = v171;
  *((_QWORD *)v16 + 2) = v45;
  v16[24] = 0;
  *((_QWORD *)v16 + 4) = 0;
  v16[40] = 1;
  v48 = sub_100005360(&qword_100118E20);
  sub_1000B8AE8(a1, v150, v47, v46, (uint64_t)&v16[*(int *)(v48 + 44)], a6, a7);
  v49 = swift_allocObject(&unk_10010DB10, 168, 7);
  *(_QWORD *)(v49 + 16) = v47;
  *(_QWORD *)(v49 + 24) = v46;
  v50 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v49 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v49 + 144) = v50;
  *(_QWORD *)(v49 + 160) = *(_QWORD *)(a1 + 128);
  v51 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v49 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v49 + 80) = v51;
  v52 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v49 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v49 + 112) = v52;
  v53 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v49 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v49 + 48) = v53;
  sub_10000531C((uint64_t)v16, (uint64_t)v20, &qword_100118DE0);
  v54 = (double (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v20[*(int *)(v17 + 36)];
  *v54 = sub_1000BD884;
  v54[1] = (double (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49;
  v54[2] = 0;
  v54[3] = 0;
  sub_100066E98((_QWORD *)a1);
  sub_100004F48((uint64_t)v16, &qword_100118DE0);
  v55 = swift_allocObject(&unk_10010DB38, 168, 7);
  *(_QWORD *)(v55 + 16) = v47;
  *(_QWORD *)(v55 + 24) = v46;
  v56 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v55 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v55 + 144) = v56;
  *(_QWORD *)(v55 + 160) = *(_QWORD *)(a1 + 128);
  v57 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v55 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v55 + 80) = v57;
  v58 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v55 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v55 + 112) = v58;
  v59 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v55 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v55 + 48) = v59;
  sub_10000531C((uint64_t)v20, (uint64_t)v24, &qword_100118DE8);
  v60 = &v24[*(int *)(v21 + 36)];
  *(_QWORD *)v60 = 0;
  *((_QWORD *)v60 + 1) = 0;
  *((_QWORD *)v60 + 2) = sub_1000BD898;
  *((_QWORD *)v60 + 3) = v55;
  sub_100066E98((_QWORD *)a1);
  sub_100004F48((uint64_t)v20, &qword_100118DE8);
  if (qword_100113EC8 != -1)
    swift_once(&qword_100113EC8, sub_100096568);
  v61 = qword_10011FE70;
  KeyPath = swift_getKeyPath(&unk_1000D4748);
  *(_QWORD *)&v173 = v61;
  v63 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v173, KeyPath, v63);
  swift_release(KeyPath);
  LOBYTE(v173) = *(_BYTE *)(v61 + 16);
  v64 = swift_allocObject(&unk_10010DB60, 168, 7);
  *(_QWORD *)(v64 + 16) = v47;
  *(_QWORD *)(v64 + 24) = v46;
  v65 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v64 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v64 + 144) = v65;
  *(_QWORD *)(v64 + 160) = *(_QWORD *)(a1 + 128);
  v66 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v64 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v64 + 80) = v66;
  v67 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v64 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v64 + 112) = v67;
  v68 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v64 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v64 + 48) = v68;
  sub_100066E98((_QWORD *)a1);
  v69 = sub_10003D3C8(&qword_100118E28, &qword_100118DF0, (void (*)(void))sub_1000BD8F0);
  v70 = v151;
  View.onChange<A>(of:initial:_:)(&v173, 0, sub_1000BD8B4, v64, v21, &type metadata for Bool, v69, &protocol witness table for Bool);
  swift_release(v64);
  sub_100004F48((uint64_t)v24, &qword_100118DF0);
  type metadata accessor for CalculatorUnitConversionDisplayView(0, v170, v171, v71);
  v72 = sub_1000B6024();
  v73 = *(_QWORD *)(v72 + 24);
  swift_retain(v73);
  swift_release(v72);
  v74 = swift_getKeyPath(&unk_1000D4770);
  *(_QWORD *)&v173 = v73;
  v75 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v173, v74, v75);
  swift_release(v74);
  LOBYTE(v72) = *(_BYTE *)(v73 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded);
  swift_release(v73);
  LOBYTE(v172) = v72;
  v76 = swift_allocObject(&unk_10010DB88, 168, 7);
  v77 = v171;
  *(_QWORD *)(v76 + 16) = v170;
  *(_QWORD *)(v76 + 24) = v77;
  v78 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v76 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v76 + 144) = v78;
  *(_QWORD *)(v76 + 160) = *(_QWORD *)(a1 + 128);
  v79 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v76 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v76 + 80) = v79;
  v80 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v76 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v76 + 112) = v80;
  v81 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v76 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v76 + 48) = v81;
  sub_100066E98((_QWORD *)a1);
  *(_QWORD *)&v173 = v21;
  *((_QWORD *)&v173 + 1) = &type metadata for Bool;
  v174 = v69;
  v175 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v83 = v154;
  v84 = v153;
  View.onChange<A>(of:initial:_:)(&v172, 0, sub_1000BD984, v76, v153, &type metadata for Bool, OpaqueTypeConformance2, &protocol witness table for Bool);
  v85 = swift_release(v76);
  (*(void (**)(char *, uint64_t, __n128))(v152 + 8))(v70, v84, v85);
  v86 = sub_1000B6024();
  v87 = swift_getKeyPath(&unk_1000D4720);
  *(_QWORD *)&v173 = v86;
  v88 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v173, v87, v88);
  swift_release(v87);
  v89 = *(id *)(v86 + 32);
  swift_release(v86);
  v172 = v89;
  v90 = swift_allocObject(&unk_10010DBB0, 168, 7);
  v91 = v171;
  *(_QWORD *)(v90 + 16) = v170;
  *(_QWORD *)(v90 + 24) = v91;
  v92 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v90 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v90 + 144) = v92;
  *(_QWORD *)(v90 + 160) = *(_QWORD *)(a1 + 128);
  v93 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v90 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v90 + 80) = v93;
  v94 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v90 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v90 + 112) = v94;
  v95 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v90 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v90 + 48) = v95;
  sub_100066E98((_QWORD *)a1);
  v96 = sub_1000BD9C4();
  v152 = v96;
  *(_QWORD *)&v173 = v84;
  *((_QWORD *)&v173 + 1) = &type metadata for Bool;
  v174 = OpaqueTypeConformance2;
  v175 = &protocol witness table for Bool;
  v97 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v98 = sub_100005178(&qword_100118E40, (uint64_t (*)(uint64_t))sub_1000BD9C4, (uint64_t)&protocol conformance descriptor for NSObject);
  v99 = v157;
  v100 = v156;
  View.onChange<A>(of:initial:_:)(&v172, 0, sub_1000BD998, v90, v156, v96, v97, v98);
  swift_release(v90);

  (*(void (**)(char *, uint64_t))(v155 + 8))(v83, v100);
  v101 = *(_QWORD *)(a1 + 16);
  LOBYTE(v96) = *(_BYTE *)(a1 + 24);
  swift_retain(v101);
  v103 = sub_100043890(v102, v96);
  swift_release(v101);
  v104 = swift_getKeyPath(&unk_1000D4798);
  *(_QWORD *)&v173 = v103;
  v105 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v173, v104, v105);
  swift_release(v104);
  LOBYTE(v101) = *(_BYTE *)(v103 + 52);
  swift_release(v103);
  LOBYTE(v172) = v101;
  v106 = swift_allocObject(&unk_10010DBD8, 168, 7);
  v107 = v171;
  *(_QWORD *)(v106 + 16) = v170;
  *(_QWORD *)(v106 + 24) = v107;
  v108 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v106 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v106 + 144) = v108;
  *(_QWORD *)(v106 + 160) = *(_QWORD *)(a1 + 128);
  v109 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v106 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v106 + 80) = v109;
  v110 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v106 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v106 + 112) = v110;
  v111 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v106 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v106 + 48) = v111;
  sub_100066E98((_QWORD *)a1);
  v112 = sub_100005360(&qword_100116458);
  *(_QWORD *)&v173 = v100;
  *((_QWORD *)&v173 + 1) = v152;
  v174 = v97;
  v175 = (void *)v98;
  v113 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v114 = sub_1000BDD00(&qword_100116480, (void (*)(void))sub_100062CB8, (uint64_t)&protocol conformance descriptor for <A> A?);
  v115 = v160;
  v116 = v159;
  View.onChange<A>(of:initial:_:)(&v172, 0, sub_1000BDA10, v106, v159, v112, v113, v114);
  v117 = v106;
  v119 = v170;
  v118 = v171;
  v120 = swift_release(v117);
  v121 = v99;
  v122 = v118;
  (*(void (**)(char *, uint64_t, __n128))(v158 + 8))(v121, v116, v120);
  v173 = *(_OWORD *)(a1 + 96);
  LOBYTE(v174) = *(_BYTE *)(a1 + 112);
  v123 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(&v172, v123);
  v124 = swift_allocObject(&unk_10010DC00, 168, 7);
  *(_QWORD *)(v124 + 16) = v119;
  *(_QWORD *)(v124 + 24) = v118;
  v125 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v124 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v124 + 144) = v125;
  *(_QWORD *)(v124 + 160) = *(_QWORD *)(a1 + 128);
  v126 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v124 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v124 + 80) = v126;
  v127 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v124 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v124 + 112) = v127;
  v128 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v124 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v124 + 48) = v128;
  sub_100066E98((_QWORD *)a1);
  *(_QWORD *)&v173 = v116;
  *((_QWORD *)&v173 + 1) = v112;
  v174 = v113;
  v175 = (void *)v114;
  v129 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v131 = v162;
  v130 = v163;
  View.onChange<A>(of:initial:_:)(&v172, 0, sub_1000BDA24, v124, v163, v112, v129, v114);
  v132 = swift_release(v124);
  (*(void (**)(char *, uint64_t, __n128))(v161 + 8))(v115, v130, v132);
  v133 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100113CB8 != -1)
    swift_once(&qword_100113CB8, sub_10004E728);
  v134 = v166;
  NSNotificationCenter.publisher(for:object:)(qword_10011FC60, 0);

  v135 = swift_allocObject(&unk_10010DC28, 168, 7);
  *(_QWORD *)(v135 + 16) = v119;
  *(_QWORD *)(v135 + 24) = v122;
  v136 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v135 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v135 + 144) = v136;
  *(_QWORD *)(v135 + 160) = *(_QWORD *)(a1 + 128);
  v137 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v135 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v135 + 80) = v137;
  v138 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v135 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v135 + 112) = v138;
  v139 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v135 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v135 + 48) = v139;
  v141 = v164;
  v140 = v165;
  v142 = v167;
  (*(void (**)(uint64_t, char *, uint64_t))(v164 + 16))(v167, v131, v165);
  v143 = v131;
  v144 = sub_100005360(&qword_100118E48);
  v146 = v168;
  v145 = v169;
  (*(void (**)(uint64_t, char *, uint64_t))(v168 + 16))(v142 + *(int *)(v144 + 52), v134, v169);
  v147 = (double (**)(uint64_t))(v142 + *(int *)(v144 + 56));
  *v147 = sub_1000BDA38;
  v147[1] = (double (*)(uint64_t))v135;
  sub_100066E98((_QWORD *)a1);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v134, v145);
  return (*(uint64_t (**)(char *, uint64_t))(v141 + 8))(v143, v140);
}

uint64_t sub_1000B8AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  Swift::String v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t (*v95)@<X0>(uint64_t@<X8>, __n128@<Q0>);
  uint64_t v96;
  uint64_t (*v97)@<X0>(uint64_t@<X8>);
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  __int128 v113;

  v91 = a5;
  v13 = sub_100005360(&qword_100118E50);
  __chkstk_darwin(v13, v14);
  v90 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v89 = (uint64_t)&v84 - v18;
  __chkstk_darwin(v19, v20);
  v88 = (char *)&v84 - v21;
  __chkstk_darwin(v22, v23);
  v92 = (uint64_t)&v84 - v24;
  v25 = swift_allocObject(&unk_10010DC50, 176, 7);
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = a4;
  v26 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v25 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v25 + 144) = v26;
  *(_QWORD *)(v25 + 160) = *(_QWORD *)(a1 + 128);
  v27 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v25 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v25 + 80) = v27;
  v28 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v25 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v25 + 112) = v28;
  v29 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v25 + 48) = v29;
  *(double *)(v25 + 168) = a6;
  v30 = swift_allocObject(&unk_10010DC78, 184, 7);
  *(_QWORD *)(v30 + 16) = a3;
  *(_QWORD *)(v30 + 24) = a4;
  v31 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v30 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v30 + 144) = v31;
  v32 = *(_QWORD *)(a1 + 128);
  v33 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v30 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v30 + 80) = v33;
  v34 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v30 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v30 + 112) = v34;
  v35 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v30 + 48) = v35;
  *(_QWORD *)(v30 + 160) = v32;
  *(_QWORD *)(v30 + 168) = a2;
  v87 = a6;
  *(double *)(v30 + 176) = a7;
  sub_100066E98((_QWORD *)a1);
  sub_100066E98((_QWORD *)a1);
  swift_retain(a2);
  v37 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(&v104, 0, 1, *(_QWORD *)&a6, 0, v37, v38);
  v95 = sub_1000BDA78;
  v96 = v25;
  v97 = sub_1000BDA8C;
  v98 = v30;
  v99 = v104;
  v100 = v105;
  v101 = v106;
  v102 = v107;
  v103 = v108;
  v109 = 0;
  v110 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v110);
  v109 = 0xD000000000000019;
  v110 = 0x80000001000D8160;
  v86 = type metadata accessor for CalculatorUnitConversionDisplayView(0, a3, a4, v39);
  v40 = sub_1000B6024();
  v41 = sub_100047730();
  v42 = objc_msgSend(v41, "name", swift_release(v40).n128_f64[0]);

  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v45);
  v47 = v109;
  v48 = v110;
  v49 = sub_100005360(&qword_100118E58);
  v85 = v49;
  v50 = sub_1000BDA98();
  v51 = v49;
  v52 = v50;
  View.accessibilityIdentifier(_:)(v47, v48, v51, v50);
  swift_release(v30);
  swift_release(v25);
  swift_bridgeObjectRelease(v48);
  v53 = swift_allocObject(&unk_10010DCA0, 176, 7);
  *(_QWORD *)(v53 + 16) = a3;
  *(_QWORD *)(v53 + 24) = a4;
  v54 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v53 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v53 + 144) = v54;
  *(_QWORD *)(v53 + 160) = *(_QWORD *)(a1 + 128);
  v55 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v53 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v53 + 80) = v55;
  v56 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v53 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v53 + 112) = v56;
  v57 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v53 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v53 + 48) = v57;
  *(double *)(v53 + 168) = a6;
  v58 = swift_allocObject(&unk_10010DCC8, 184, 7);
  *(_QWORD *)(v58 + 16) = a3;
  *(_QWORD *)(v58 + 24) = a4;
  v59 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v58 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v58 + 144) = v59;
  v60 = *(_QWORD *)(a1 + 128);
  v61 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v58 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v58 + 80) = v61;
  v62 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v58 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v58 + 112) = v62;
  v63 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v58 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v58 + 48) = v63;
  *(_QWORD *)(v58 + 160) = v60;
  *(_QWORD *)(v58 + 168) = a2;
  *(double *)(v58 + 176) = a7;
  sub_100066E98((_QWORD *)a1);
  sub_100066E98((_QWORD *)a1);
  swift_retain(a2);
  v65 = static Alignment.center.getter(v64);
  _FrameLayout.init(width:height:alignment:)(&v109, 0, 1, *(_QWORD *)&v87, 0, v65, v66);
  v95 = sub_1000BDB24;
  v96 = v53;
  v97 = sub_1000BDB9C;
  v98 = v58;
  v99 = v109;
  v100 = v110;
  v101 = v111;
  v102 = v112;
  v103 = v113;
  v93 = 0;
  v94 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(v94);
  v93 = 0xD00000000000001ALL;
  v94 = 0x80000001000D8180;
  v67 = sub_1000B6024();
  v68 = sub_1000478E8();
  v69 = objc_msgSend(v68, "name", swift_release(v67).n128_f64[0]);

  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  v72 = v71;

  v73._countAndFlagsBits = v70;
  v73._object = v72;
  String.append(_:)(v73);
  swift_bridgeObjectRelease(v72);
  v74 = v94;
  v75 = (uint64_t)v88;
  View.accessibilityIdentifier(_:)(v93, v94, v85, v52);
  swift_release(v58);
  swift_release(v53);
  swift_bridgeObjectRelease(v74);
  v76 = v92;
  v77 = v89;
  sub_10000531C(v92, v89, &qword_100118E50);
  v78 = v90;
  sub_10000531C(v75, v90, &qword_100118E50);
  v79 = v77;
  v80 = v77;
  v81 = v91;
  sub_10000531C(v79, v91, &qword_100118E50);
  v82 = sub_100005360(&qword_100118E78);
  sub_10000531C(v78, v81 + *(int *)(v82 + 48), &qword_100118E50);
  sub_100004F48(v75, &qword_100118E50);
  sub_100004F48(v76, &qword_100118E50);
  sub_100004F48(v78, &qword_100118E50);
  return sub_100004F48(v80, &qword_100118E50);
}

uint64_t sub_1000B9118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t OpaqueTypeConformance2;
  char *v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char v147;
  _QWORD v148[2];
  char v149;
  __int128 v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unint64_t v155;

  v146 = a3;
  v6 = a5.n128_u64[0];
  v143 = a4;
  v8 = type metadata accessor for AccessibilityTraits(0, a5);
  v140 = *(_QWORD *)(v8 - 8);
  v141 = v8;
  __chkstk_darwin(v8, v9);
  v139 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for AccessibilityChildBehavior(0);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127, v11);
  v125 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100005360(&qword_100118EA0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122, v13);
  v120 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100005360(&qword_100118EA8);
  v124 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v15);
  v123 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100005360(&qword_100118EB0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130, v17);
  v145 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100005360(&qword_100118EB8);
  __chkstk_darwin(v132, v19);
  v133 = (char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v135 = (char *)&v117 - v23;
  v134 = sub_100005360(&qword_100118EC0);
  __chkstk_darwin(v134, v24);
  v138 = (uint64_t)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100005360(&qword_100118EC8);
  __chkstk_darwin(v136, v26);
  v137 = (uint64_t)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_BYTE *)(a1 + 24);
  swift_retain(v28);
  v31 = sub_100043890(v30, v29);
  swift_release(v28);
  v32 = *(_QWORD *)(v31 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D4838);
  *(_QWORD *)&v150 = v32;
  v34 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v150, KeyPath, v34);
  swift_release(KeyPath);
  v35 = *(_QWORD *)(v32 + 24);
  swift_retain(v35);
  swift_release(v31);
  v142 = a2;
  type metadata accessor for CalculatorUnitConversionDisplayView(0, a2, v146, v36);
  v119 = sub_1000B6024();
  swift_retain(v28);
  v38 = sub_100043890(v37, v29);
  swift_release(v28);
  v39 = *(_QWORD *)(v38 + 16);
  swift_retain(v39);
  swift_release(v38);
  v40 = swift_getKeyPath(&unk_1000D47C0);
  *(_QWORD *)&v150 = v39;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v150, v40, v34);
  swift_release(v40);
  LODWORD(v40) = *(unsigned __int8 *)(v39 + 40);
  swift_release(v39);
  if ((_DWORD)v40 == 1)
  {
    if (qword_100113CE8 != -1)
      swift_once(&qword_100113CE8, sub_100052F90);
    v41 = qword_10011FC90;
    swift_retain(qword_10011FC90);
  }
  else
  {
    v41 = sub_1000B6218();
  }
  v117 = v41;
  v42 = type metadata accessor for CalculatorViewModel(0);
  v43 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v131 = v42;
  v128 = v43;
  v44 = Environment.init<A>(_:)(v42, v42, v43);
  *(_QWORD *)&v150 = v44;
  BYTE8(v150) = v45 & 1;
  v46 = v119;
  v151 = v35;
  v152 = v119;
  v153 = v41;
  v154 = 1;
  v155 = v6;
  v47 = sub_1000B61C8();
  v49 = v48;
  v148[0] = v47;
  v148[1] = v48;
  v149 = v50;
  v147 = 1;
  v51 = sub_100005360(&qword_100116458);
  v52 = sub_1000B5AA0();
  v118 = sub_1000BDD00((unint64_t *)&qword_1001170E0, (void (*)(void))sub_100067D08, (uint64_t)&protocol conformance descriptor for <A> A?);
  v53 = v120;
  View.focused<A>(_:equals:)(v148, &v147, &type metadata for InputTextView, v51, v52, v118);
  swift_release(v117);
  swift_release(v46);
  swift_release(v35);
  swift_release(v49);
  swift_release(v47);
  swift_release(v44);
  v54 = swift_allocObject(&unk_10010DD40, 168, 7);
  v55 = v142;
  v56 = v146;
  *(_QWORD *)(v54 + 16) = v142;
  *(_QWORD *)(v54 + 24) = v56;
  v57 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v54 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v54 + 144) = v57;
  *(_QWORD *)(v54 + 160) = *(_QWORD *)(a1 + 128);
  v58 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v54 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v54 + 80) = v58;
  v59 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v54 + 112) = v59;
  v60 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v54 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v54 + 48) = v60;
  sub_100066E98((_QWORD *)a1);
  *(_QWORD *)&v150 = &type metadata for InputTextView;
  *((_QWORD *)&v150 + 1) = v51;
  v151 = v52;
  v152 = v118;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v150, &opaque type descriptor for <<opaque return type of View.focused<A>(_:equals:)>>, 1);
  v62 = v123;
  v63 = v122;
  View.onTapGesture(count:perform:)(1, sub_1000BDE00, v54, v122, OpaqueTypeConformance2);
  v64 = swift_release(v54);
  v65 = (*(uint64_t (**)(char *, uint64_t, __n128))(v121 + 8))(v53, v63, v64);
  v66 = _AXSAutomationEnabled(v65);
  v67 = v125;
  if ((_DWORD)v66)
    static AccessibilityChildBehavior.contain.getter(v66);
  else
    static AccessibilityChildBehavior.ignore.getter(v66);
  v68 = (uint64_t)v133;
  *(_QWORD *)&v150 = v63;
  *((_QWORD *)&v150 + 1) = OpaqueTypeConformance2;
  v69 = swift_getOpaqueTypeConformance2(&v150, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  v70 = v144;
  View.accessibilityElement(children:)(v67, v144, v69);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v67, v127);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v62, v70);
  v71 = (__int128 *)(a1 + 96);
  v150 = *(_OWORD *)(a1 + 96);
  LOBYTE(v151) = *(_BYTE *)(a1 + 112);
  v72 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(v148, v72);
  if (LOBYTE(v148[0]) == 1
    || (v150 = *v71,
        LOBYTE(v151) = *(_BYTE *)(a1 + 112),
        v73 = sub_100005360(&qword_1001170B0),
        FocusState.Binding.wrappedValue.getter(v148, v73),
        LOBYTE(v148[0]) != 2))
  {
    v74 = 0x7475706E49;
    v75 = 0xE500000000000000;
  }
  else
  {
    v74 = 0x746C75736552;
    v75 = 0xE600000000000000;
  }
  v76 = LocalizedStringKey.init(stringLiteral:)(v74, v75);
  v78 = v77;
  v80 = v79;
  v82 = v81;
  *(_QWORD *)&v150 = v144;
  *((_QWORD *)&v150 + 1) = v69;
  v83 = swift_getOpaqueTypeConformance2(&v150, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v84 = v76;
  v85 = v130;
  v86 = v145;
  View.accessibilityLabel(_:)(v84, v78, v80 & 1, v82, v130, v83);
  swift_bridgeObjectRelease(v82);
  v87 = swift_bridgeObjectRelease(v78);
  (*(void (**)(char *, uint64_t, __n128))(v129 + 8))(v86, v85, v87);
  v150 = *v71;
  LOBYTE(v151) = *(_BYTE *)(a1 + 112);
  v88 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(v148, v88);
  if (LOBYTE(v148[0]) == 1)
  {
    v89 = sub_100005360(&qword_100114EC8);
    v90 = v140;
    v91 = swift_allocObject(v89, ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80))+ *(_QWORD *)(v140 + 72), *(unsigned __int8 *)(v140 + 80) | 7);
    *(_OWORD *)(v91 + 16) = xmmword_1000CD7E0;
    static AccessibilityTraits.isSelected.getter();
    *(_QWORD *)&v150 = v91;
    v92 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v93 = sub_100005360(&qword_100114EB0);
    v94 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
    v95 = v139;
  }
  else
  {
    v150 = *v71;
    LOBYTE(v151) = *(_BYTE *)(a1 + 112);
    v96 = sub_100005360(&qword_1001170B0);
    FocusState.Binding.wrappedValue.getter(v148, v96);
    v95 = v139;
    v90 = v140;
    if (LOBYTE(v148[0]) == 2)
    {
      *(_QWORD *)&v150 = _swiftEmptyArrayStorage;
    }
    else
    {
      v97 = sub_100005360(&qword_100114EC8);
      v98 = swift_allocObject(v97, ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80))+ *(_QWORD *)(v90 + 72), *(unsigned __int8 *)(v90 + 80) | 7);
      *(_OWORD *)(v98 + 16) = xmmword_1000CD7E0;
      static AccessibilityTraits.isSelected.getter();
      *(_QWORD *)&v150 = v98;
    }
    v92 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v93 = sub_100005360(&qword_100114EB0);
    v94 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
  }
  v99 = v93;
  v100 = v141;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v150, v99, v94, v141, v92);
  v101 = (uint64_t)v135;
  ModifiedContent<>.accessibilityAddTraits(_:)(v95, v132);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v95, v100);
  sub_100004F48(v68, &qword_100118EB8);
  v102 = Environment.init<A>(_:)(v131, v131, v128);
  LOBYTE(v100) = v103;
  v104 = v138;
  sub_10000531C(v101, v138, &qword_100118EB8);
  v105 = v104 + *(int *)(v134 + 36);
  *(_QWORD *)v105 = v102;
  *(_BYTE *)(v105 + 8) = v100 & 1;
  *(_BYTE *)(v105 + 9) = 1;
  sub_100004F48(v101, &qword_100118EB8);
  v107 = static VerticalAlignment.firstTextBaseline.getter(v106);
  v108 = swift_allocObject(&unk_10010DD68, 176, 7);
  v109 = v146;
  *(_QWORD *)(v108 + 16) = v55;
  *(_QWORD *)(v108 + 24) = v109;
  v110 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v108 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v108 + 144) = v110;
  *(_QWORD *)(v108 + 160) = *(_QWORD *)(a1 + 128);
  v111 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v108 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v108 + 80) = v111;
  v112 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v108 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v108 + 112) = v112;
  v113 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v108 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v108 + 48) = v113;
  *(_QWORD *)(v108 + 168) = v6;
  v114 = v137;
  sub_10000531C(v104, v137, &qword_100118EC0);
  v115 = (uint64_t *)(v114 + *(int *)(v136 + 36));
  *v115 = v107;
  v115[1] = (uint64_t)sub_1000BDDCC;
  v115[2] = v108;
  sub_100066E98((_QWORD *)a1);
  sub_100004F48(v104, &qword_100118EC0);
  return sub_100007CD8(v114, v143, &qword_100118EC8);
}

void *sub_1000B9C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD __src[17];
  _OWORD v58[11];

  type metadata accessor for CalculatorUnitConversionDisplayView(0, a3, a4, a4);
  v9 = sub_1000B6024();
  v10 = sub_100047730();
  v11 = objc_msgSend(v10, "shortName", swift_release(v9).n128_f64[0]);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v45 = v13;
  v46 = v12;

  __src[0] = *(_OWORD *)(a1 + 96);
  LOBYTE(__src[1]) = *(_BYTE *)(a1 + 112);
  v14 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(v58, v14);
  if (LOBYTE(v58[0]) == 1
    || (__src[0] = *(_OWORD *)(a1 + 96),
        LOBYTE(__src[1]) = *(_BYTE *)(a1 + 112),
        v15 = sub_100005360(&qword_1001170B0),
        FocusState.Binding.wrappedValue.getter(v58, v15),
        LOBYTE(v58[0]) != 2))
  {
    v16 = 0x6E55207475706E49;
    v17 = 0xEA00000000007469;
  }
  else
  {
    v16 = 0x5520746C75736552;
    v17 = 0xEB0000000074696ELL;
  }
  v18 = LocalizedStringKey.init(stringLiteral:)(v16, v17);
  v43 = v19;
  v44 = v18;
  v42 = v20;
  v22 = v21;
  v23 = sub_1000B6024();
  v24 = sub_100047730();
  v25 = objc_msgSend(v24, "displayName", swift_release(v23).n128_f64[0]);

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = LocalizedStringKey.init(stringLiteral:)(0x752065676E616863, 0xEB0000000074696ELL);
  v31 = v30;
  LOBYTE(v24) = v32;
  v34 = v33;
  LOBYTE(v58[0]) = 0;
  swift_retain(a2);
  v35 = State.init(wrappedValue:)(__src, v58, &type metadata for Bool);
  v36 = __src[0];
  v37 = *((_QWORD *)&__src[0] + 1);
  *(_QWORD *)&v58[0] = static Color.clear.getter(v35);
  v38 = State.init(wrappedValue:)(__src, v58, &type metadata for Color);
  LOBYTE(v48[0]) = v36;
  *((_QWORD *)&v48[0] + 1) = v37;
  v48[1] = __src[0];
  *(_QWORD *)&v49 = v46;
  *((_QWORD *)&v49 + 1) = v45;
  *(_QWORD *)&v50 = a2;
  BYTE8(v50) = 1;
  *(_QWORD *)&v51 = 0xD000000000000013;
  *((_QWORD *)&v51 + 1) = 0x80000001000D81C0;
  *(_QWORD *)&v52 = v44;
  *((_QWORD *)&v52 + 1) = v43;
  LOBYTE(v53) = v42 & 1;
  *((_QWORD *)&v53 + 1) = v22;
  *(_QWORD *)&v54 = v26;
  *((_QWORD *)&v54 + 1) = v28;
  *(_QWORD *)&v55 = v29;
  *((_QWORD *)&v55 + 1) = v31;
  LOBYTE(v56) = v24 & 1;
  *((_QWORD *)&v56 + 1) = v34;
  v58[6] = v53;
  v58[7] = v54;
  v58[0] = v48[0];
  v58[1] = __src[0];
  v58[4] = v51;
  v58[5] = v52;
  v58[2] = v49;
  v58[3] = v50;
  v58[8] = v55;
  v58[9] = v56;
  v39 = static Alignment.center.getter(v38);
  sub_10003667C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, __src, 0.0, 1, a6, 0, v39, v40);
  sub_1000BDC34(v48);
  return memcpy(a5, __src, 0x110uLL);
}

uint64_t sub_1000B9F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, __n128 a7@<Q0>)
{
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v30 = a5;
  v32 = a6;
  v11 = type metadata accessor for ModifiedContent(255, a4, &type metadata for _PaddingLayout, a7);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v11, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for VStack(0, v13, WitnessTable);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v29 - v23;
  v25 = *(_QWORD *)(a3 + 24);
  v34 = *(_QWORD *)(a3 + 16);
  v35 = a4;
  v36 = v25;
  v37 = v30;
  v38 = a1;
  v39 = a2;
  v40 = v31;
  v26 = static HorizontalAlignment.center.getter(v22);
  VStack.init(alignment:spacing:content:)(v26, 0, 0, sub_1000BDC20, v33, v13, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v15);
  sub_100046714((uint64_t)v19, v15, (uint64_t)v24);
  v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  v27(v19, v15);
  sub_10003E144((uint64_t)v24, v15, v32);
  return ((uint64_t (*)(char *, uint64_t))v27)(v24, v15);
}

uint64_t sub_1000BA124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t OpaqueTypeConformance2;
  char *v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char v148;
  _QWORD v149[2];
  char v150;
  __int128 v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  unint64_t v156;

  v147 = a3;
  v6 = a5.n128_u64[0];
  v144 = a4;
  v8 = type metadata accessor for AccessibilityTraits(0, a5);
  v141 = *(_QWORD *)(v8 - 8);
  v142 = v8;
  __chkstk_darwin(v8, v9);
  v140 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for AccessibilityChildBehavior(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130, v11);
  v128 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100005360(&qword_100118EA0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123, v13);
  v121 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100005360(&qword_100118EA8);
  v125 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145, v15);
  v124 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100005360(&qword_100118EB0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132, v17);
  v146 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100005360(&qword_100118EB8);
  __chkstk_darwin(v133, v19);
  v134 = (char *)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v136 = (char *)&v118 - v23;
  v135 = sub_100005360(&qword_100118EC0);
  __chkstk_darwin(v135, v24);
  v139 = (uint64_t)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100005360(&qword_100118EC8);
  __chkstk_darwin(v137, v26);
  v138 = (uint64_t)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_BYTE *)(a1 + 24);
  swift_retain(v28);
  v31 = sub_100043890(v30, v29);
  swift_release(v28);
  v32 = *(_QWORD *)(v31 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D4810);
  *(_QWORD *)&v151 = v32;
  v34 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v151, KeyPath, v34);
  swift_release(KeyPath);
  v35 = *(_QWORD *)(v32 + 32);
  swift_retain(v35);
  swift_release(v31);
  v143 = a2;
  type metadata accessor for CalculatorUnitConversionDisplayView(0, a2, v147, v36);
  v37 = sub_1000B6024();
  swift_retain(v28);
  v39 = sub_100043890(v38, v29);
  swift_release(v28);
  v40 = *(_QWORD *)(v39 + 16);
  swift_retain(v40);
  swift_release(v39);
  v41 = swift_getKeyPath(&unk_1000D47C0);
  *(_QWORD *)&v151 = v40;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v151, v41, v34);
  swift_release(v41);
  LODWORD(v41) = *(unsigned __int8 *)(v40 + 40);
  swift_release(v40);
  if ((_DWORD)v41 == 1)
  {
    v42 = sub_1000B6218();
  }
  else
  {
    if (qword_100113CE8 != -1)
      swift_once(&qword_100113CE8, sub_100052F90);
    v42 = qword_10011FC90;
    swift_retain(qword_10011FC90);
  }
  v120 = v42;
  v43 = type metadata accessor for CalculatorViewModel(0);
  v44 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v127 = v43;
  v126 = v44;
  v45 = Environment.init<A>(_:)(v43, v43, v44);
  *(_QWORD *)&v151 = v45;
  BYTE8(v151) = v46 & 1;
  v152 = v35;
  v153 = v37;
  v154 = v42;
  v155 = 1;
  v156 = v6;
  v47 = sub_1000B61C8();
  v119 = v37;
  v49 = v48;
  v149[0] = v47;
  v149[1] = v48;
  v150 = v50;
  v148 = 2;
  v51 = sub_100005360(&qword_100116458);
  v52 = sub_1000B5AA0();
  v53 = sub_1000BDD00((unint64_t *)&qword_1001170E0, (void (*)(void))sub_100067D08, (uint64_t)&protocol conformance descriptor for <A> A?);
  v54 = v121;
  View.focused<A>(_:equals:)(v149, &v148, &type metadata for InputTextView, v51, v52, v53);
  swift_release(v120);
  swift_release(v119);
  swift_release(v35);
  swift_release(v49);
  swift_release(v47);
  swift_release(v45);
  v55 = swift_allocObject(&unk_10010DCF0, 168, 7);
  v56 = v143;
  v57 = v147;
  *(_QWORD *)(v55 + 16) = v143;
  *(_QWORD *)(v55 + 24) = v57;
  v58 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v55 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v55 + 144) = v58;
  *(_QWORD *)(v55 + 160) = *(_QWORD *)(a1 + 128);
  v59 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v55 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v55 + 80) = v59;
  v60 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v55 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v55 + 112) = v60;
  v61 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v55 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v55 + 48) = v61;
  sub_100066E98((_QWORD *)a1);
  *(_QWORD *)&v151 = &type metadata for InputTextView;
  *((_QWORD *)&v151 + 1) = v51;
  v152 = v52;
  v153 = v53;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v151, &opaque type descriptor for <<opaque return type of View.focused<A>(_:equals:)>>, 1);
  v63 = v124;
  v64 = v123;
  View.onTapGesture(count:perform:)(1, sub_1000BDD70, v55, v123, OpaqueTypeConformance2);
  v65 = swift_release(v55);
  v66 = (*(uint64_t (**)(char *, uint64_t, __n128))(v122 + 8))(v54, v64, v65);
  v67 = _AXSAutomationEnabled(v66);
  v68 = v128;
  if ((_DWORD)v67)
    static AccessibilityChildBehavior.contain.getter(v67);
  else
    static AccessibilityChildBehavior.ignore.getter(v67);
  v69 = (uint64_t)v134;
  *(_QWORD *)&v151 = v64;
  *((_QWORD *)&v151 + 1) = OpaqueTypeConformance2;
  v70 = swift_getOpaqueTypeConformance2(&v151, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  v71 = v145;
  View.accessibilityElement(children:)(v68, v145, v70);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v68, v130);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v63, v71);
  v151 = *(_OWORD *)(a1 + 96);
  LOBYTE(v152) = *(_BYTE *)(a1 + 112);
  v72 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(v149, v72);
  if (LOBYTE(v149[0]) == 2)
  {
    v73 = 0x7475706E49;
    v74 = 0xE500000000000000;
  }
  else
  {
    v73 = 0x746C75736552;
    v74 = 0xE600000000000000;
  }
  v75 = LocalizedStringKey.init(stringLiteral:)(v73, v74);
  v77 = v76;
  v79 = v78;
  v81 = v80;
  *(_QWORD *)&v151 = v145;
  *((_QWORD *)&v151 + 1) = v70;
  v82 = swift_getOpaqueTypeConformance2(&v151, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v83 = v75;
  v84 = v132;
  v85 = v146;
  View.accessibilityLabel(_:)(v83, v77, v79 & 1, v81, v132, v82);
  swift_bridgeObjectRelease(v81);
  v86 = swift_bridgeObjectRelease(v77);
  (*(void (**)(char *, uint64_t, __n128))(v131 + 8))(v85, v84, v86);
  v151 = *(_OWORD *)(a1 + 96);
  LOBYTE(v152) = *(_BYTE *)(a1 + 112);
  v87 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(v149, v87);
  if (LOBYTE(v149[0]) == 2)
  {
    v88 = sub_100005360(&qword_100114EC8);
    v89 = v141;
    v90 = swift_allocObject(v88, ((*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80))+ *(_QWORD *)(v141 + 72), *(unsigned __int8 *)(v141 + 80) | 7);
    *(_OWORD *)(v90 + 16) = xmmword_1000CD7E0;
    static AccessibilityTraits.isSelected.getter();
    *(_QWORD *)&v151 = v90;
    v91 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v92 = sub_100005360(&qword_100114EB0);
    v93 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
    v94 = v140;
    v95 = v92;
    v96 = v142;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v151, v95, v93, v142, v91);
  }
  else
  {
    *(_QWORD *)&v151 = _swiftEmptyArrayStorage;
    v97 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v98 = sub_100005360(&qword_100114EB0);
    v99 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
    v94 = v140;
    v100 = v98;
    v96 = v142;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v151, v100, v99, v142, v97);
    v89 = v141;
  }
  v101 = (uint64_t)v136;
  ModifiedContent<>.accessibilityAddTraits(_:)(v94, v133);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v96);
  sub_100004F48(v69, &qword_100118EB8);
  v102 = Environment.init<A>(_:)(v127, v127, v126);
  v104 = v103;
  v105 = v139;
  sub_10000531C(v101, v139, &qword_100118EB8);
  v106 = v105 + *(int *)(v135 + 36);
  *(_QWORD *)v106 = v102;
  *(_BYTE *)(v106 + 8) = v104 & 1;
  *(_BYTE *)(v106 + 9) = 0;
  sub_100004F48(v101, &qword_100118EB8);
  v108 = static VerticalAlignment.firstTextBaseline.getter(v107);
  v109 = swift_allocObject(&unk_10010DD18, 176, 7);
  v110 = v147;
  *(_QWORD *)(v109 + 16) = v56;
  *(_QWORD *)(v109 + 24) = v110;
  v111 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v109 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v109 + 144) = v111;
  *(_QWORD *)(v109 + 160) = *(_QWORD *)(a1 + 128);
  v112 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v109 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v109 + 80) = v112;
  v113 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v109 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v109 + 112) = v113;
  v114 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v109 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v109 + 48) = v114;
  *(_QWORD *)(v109 + 168) = v6;
  v115 = v138;
  sub_10000531C(v105, v138, &qword_100118EC0);
  v116 = (uint64_t *)(v115 + *(int *)(v137 + 36));
  *v116 = v108;
  v116[1] = (uint64_t)sub_1000BDDCC;
  v116[2] = v109;
  sub_100066E98((_QWORD *)a1);
  sub_100004F48(v105, &qword_100118EC0);
  return sub_100007CD8(v115, v144, &qword_100118EC8);
}

uint64_t sub_1000BABC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  _QWORD v14[8];
  _BYTE __src[360];
  _BYTE __dst[360];

  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a1;
  v14[5] = a2;
  *(double *)&v14[6] = a7;
  v9 = type metadata accessor for CalculatorUnitConversionDisplayView(0, a3, a4, a4);
  v10 = sub_100005360(&qword_100118E80);
  v11 = sub_10003D3C8(&qword_100118E88, &qword_100118E80, (void (*)(void))sub_1000BDBDC);
  sub_1000B9F80(a5, (uint64_t)v14, v9, v10, v11, (uint64_t)__src, v12);
  memcpy(__dst, __src, 0x161uLL);
  CalculatorButtonRepresentable.id.getter(__dst);
  return sub_100007CD8((uint64_t)__dst, a6, &qword_100118E98);
}

void *sub_1000BACAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD __src[17];
  _OWORD v58[11];

  type metadata accessor for CalculatorUnitConversionDisplayView(0, a3, a4, a4);
  v9 = sub_1000B6024();
  v10 = sub_1000478E8();
  v11 = objc_msgSend(v10, "shortName", swift_release(v9).n128_f64[0]);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v45 = v13;
  v46 = v12;

  __src[0] = *(_OWORD *)(a1 + 96);
  LOBYTE(__src[1]) = *(_BYTE *)(a1 + 112);
  v14 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(v58, v14);
  if (LOBYTE(v58[0]) == 2)
  {
    v15 = 0x6E55207475706E49;
    v16 = 0xEA00000000007469;
  }
  else
  {
    v15 = 0x5520746C75736552;
    v16 = 0xEB0000000074696ELL;
  }
  v17 = LocalizedStringKey.init(stringLiteral:)(v15, v16);
  v43 = v18;
  v44 = v17;
  v42 = v19;
  v21 = v20;
  v22 = sub_1000B6024();
  v23 = sub_1000478E8();
  v24 = objc_msgSend(v23, "displayName", swift_release(v22).n128_f64[0]);

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = LocalizedStringKey.init(stringLiteral:)(0x752065676E616863, 0xEB0000000074696ELL);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  LOBYTE(v58[0]) = 0;
  swift_retain(a2);
  v35 = State.init(wrappedValue:)(__src, v58, &type metadata for Bool);
  v36 = __src[0];
  v37 = *((_QWORD *)&__src[0] + 1);
  *(_QWORD *)&v58[0] = static Color.clear.getter(v35);
  v38 = State.init(wrappedValue:)(__src, v58, &type metadata for Color);
  LOBYTE(v48[0]) = v36;
  *((_QWORD *)&v48[0] + 1) = v37;
  v48[1] = __src[0];
  *(_QWORD *)&v49 = v46;
  *((_QWORD *)&v49 + 1) = v45;
  *(_QWORD *)&v50 = a2;
  BYTE8(v50) = 0;
  *(_QWORD *)&v51 = 0xD000000000000014;
  *((_QWORD *)&v51 + 1) = 0x80000001000D81A0;
  *(_QWORD *)&v52 = v44;
  *((_QWORD *)&v52 + 1) = v43;
  LOBYTE(v53) = v42 & 1;
  *((_QWORD *)&v53 + 1) = v21;
  *(_QWORD *)&v54 = v25;
  *((_QWORD *)&v54 + 1) = v27;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v30;
  LOBYTE(v56) = v32 & 1;
  *((_QWORD *)&v56 + 1) = v34;
  v58[6] = v53;
  v58[7] = v54;
  v58[0] = v48[0];
  v58[1] = __src[0];
  v58[4] = v51;
  v58[5] = v52;
  v58[2] = v49;
  v58[3] = v50;
  v58[8] = v55;
  v58[9] = v56;
  v39 = static Alignment.center.getter(v38);
  sub_10003667C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, __src, 0.0, 1, a6, 0, v39, v40);
  sub_1000BDC34(v48);
  return memcpy(a5, __src, 0x110uLL);
}

double sub_1000BAF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[3];
  char v33;
  uint64_t v34;

  type metadata accessor for CalculatorUnitConversionDisplayView(0, a2, a3, a4);
  v5 = sub_1000B6024();
  KeyPath = swift_getKeyPath(&unk_1000D4720);
  v34 = v5;
  v7 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(id *)(v5 + 32);
  v9 = objc_msgSend(v8, "unitType", swift_release(v5).n128_f64[0]);

  if (v9 == (id)16)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_BYTE *)(a1 + 24);
    swift_retain(v10);
    v13 = sub_100043890(v12, v11);
    swift_release(v10);
    v14 = *(_QWORD *)(v13 + 16);
    swift_retain(v14);
    swift_release(v13);
    v15 = sub_1000AC150();
    swift_retain(v15);
    swift_release(v14);
    v17 = CalculateExpression.expression.getter(v16);
    v19 = v18;
    swift_release(v15);
    swift_bridgeObjectRelease(v19);
    v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0)
      v20 = v17 & 0xFFFFFFFFFFFFLL;
    v21 = v20 != 0;
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_BYTE *)(a1 + 24);
  swift_retain(v22);
  v25 = sub_100043890(v24, v23);
  swift_release(v22);
  v26 = *(_QWORD *)(v25 + 16);
  swift_retain(v26);
  swift_release(v25);
  v27 = swift_getKeyPath(&unk_1000D47E8);
  v34 = v26;
  v28 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v27, v28);
  swift_release(v27);
  if (v21 == *(unsigned __int8 *)(v26 + 42))
  {
    swift_release(v26);
  }
  else
  {
    v29 = swift_getKeyPath(&unk_1000D47E8);
    __chkstk_darwin(v29, v30);
    v32[2] = v26;
    v33 = v21;
    v34 = v26;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v34, v29, sub_10002AFE8, v32, (char *)&type metadata for () + 8, v28);
    swift_release(v26);
    swift_release(v29);
  }
  sub_1000BB238();
  return sub_1000BB380();
}

_QWORD *sub_1000BB238()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  __int128 v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(v0 + 64);
  v9 = *(_OWORD *)(v0 + 64);
  v1 = sub_100005360(&qword_100113FF8);
  result = State.wrappedValue.getter(&v10, v1);
  if ((v10 & 1) == 0)
  {
    v3 = sub_1000B6024();
    v4 = *(_QWORD *)(v3 + 24);
    swift_retain(v4);
    swift_release(v3);
    sub_100017D3C();
    swift_release(v4);
    v5 = sub_1000B6024();
    v6 = *(_QWORD *)(v5 + 24);
    swift_retain(v6);
    swift_release(v5);
    KeyPath = swift_getKeyPath(&unk_1000D4770);
    *(_QWORD *)&v9 = v6;
    v8 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v8);
    swift_release(KeyPath);
    LOBYTE(v5) = *(_BYTE *)(v6 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded);
    swift_release(v6);
    v9 = v11;
    v10 = v5;
    return (_QWORD *)State.wrappedValue.setter(&v10, v1);
  }
  return result;
}

double sub_1000BB380()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  swift_retain(v1);
  v4 = sub_100043890(v3, v2);
  swift_release(v1);
  v5 = *(_QWORD *)(v4 + 16);
  swift_retain(v5);
  swift_release(v4);
  v6 = sub_1000B6024();
  sub_1000A90EC();
  swift_release(v5);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

double sub_1000BB3FC(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  _QWORD v11[3];
  char v12;
  _BYTE v13[16];
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 24);
  swift_retain(v1);
  v4 = sub_100043890(v3, v2);
  swift_release(v1);
  KeyPath = swift_getKeyPath(&unk_1000D4798);
  v14 = v4;
  v15 = 6;
  v16 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, KeyPath, sub_100061D5C, v13, (char *)&type metadata for () + 8, v6);
  swift_release(v4);
  swift_release(KeyPath);
  swift_retain(v1);
  v8 = sub_100043890(v7, v2);
  swift_release(v1);
  v9 = swift_getKeyPath(&unk_1000D4668);
  v11[2] = v8;
  v12 = 0;
  v16 = v8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, v9, sub_1000BDA4C, v11, (char *)&type metadata for () + 8, v6);
  swift_release(v8);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

double sub_1000BB55C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  double result;

  if (*a2 == 1)
  {
    v7 = *(_QWORD *)(a3 + 16);
    v8 = *(_BYTE *)(a3 + 24);
    swift_retain(v7);
    v10 = sub_100043890(v9, v8);
    swift_release(v7);
    v11 = *(_QWORD *)(v10 + 16);
    swift_retain(v11);
    swift_release(v10);
    v12 = sub_1000AC150();
    swift_retain(v12);
    swift_release(v11);
    v14 = CalculateExpression.expression.getter(v13);
    v16 = v15;
    swift_release(v12);
    swift_retain(v7);
    v18 = sub_100043890(v17, v8);
    swift_release(v7);
    v19 = *(_QWORD *)(v18 + 16);
    swift_retain(v19);
    swift_release(v18);
    v20 = sub_1000AC150();
    swift_retain(v20);
    v21 = swift_release(v19);
    CalculateExpression.expression.setter(v14, v16, v21);
    swift_release(v20);
    type metadata accessor for CalculatorUnitConversionDisplayView(0, a4, a5, v22);
    return sub_1000BB380();
  }
  return result;
}

void sub_1000BB67C(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  char v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  swift_retain(v2);
  v5 = sub_100043890(v4, v3);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_1000D4798);
  *(_QWORD *)&v19 = v5;
  v7 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(unsigned __int8 *)(v5 + 52);
  swift_release(v5);
  if (v8 != 6)
  {
    swift_retain(v2);
    v10 = sub_100043890(v9, v3);
    swift_release(v2);
    v11 = swift_getKeyPath(&unk_1000D4798);
    *(_QWORD *)&v19 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v11, v7);
    swift_release(v11);
    v12 = *(unsigned __int8 *)(v10 + 52);
    swift_release(v10);
    v19 = *(_OWORD *)(a1 + 96);
    v20 = *(_BYTE *)(a1 + 112);
    v13 = sub_100005360(&qword_1001170B0);
    FocusState.Binding.wrappedValue.getter(&v18, v13);
    if (v12 == 6)
    {
      if (v18 == 6)
        return;
LABEL_7:
      swift_retain(v2);
      v15 = sub_100043890(v14, v3);
      swift_release(v2);
      v16 = swift_getKeyPath(&unk_1000D4798);
      *(_QWORD *)&v19 = v15;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v16, v7);
      swift_release(v16);
      LOBYTE(v16) = *(_BYTE *)(v15 + 52);
      swift_release(v15);
      v19 = *(_OWORD *)(a1 + 96);
      v20 = *(_BYTE *)(a1 + 112);
      v18 = v16;
      v17 = sub_100005360(&qword_1001170B0);
      FocusState.Binding.wrappedValue.setter(&v18, v17);
      return;
    }
    if (v18 == 6 || v12 != v18)
      goto LABEL_7;
  }
}

double sub_1000BB880(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  _BYTE v19[16];
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = *a2;
  if (v3 != 6 && (v3 - 1) <= 1)
  {
    v4 = *(_QWORD *)(a3 + 16);
    v5 = *(_BYTE *)(a3 + 24);
    swift_retain(v4);
    v7 = sub_100043890(v6, v5);
    swift_release(v4);
    v8 = *(_QWORD *)(v7 + 16);
    swift_retain(v8);
    swift_release(v7);
    KeyPath = swift_getKeyPath(&unk_1000D47C0);
    v22 = v8;
    v10 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v22, KeyPath, v10);
    swift_release(KeyPath);
    if ((((v3 == 1) ^ *(unsigned __int8 *)(v8 + 40)) & 1) != 0)
    {
      v11 = swift_getKeyPath(&unk_1000D47C0);
      __chkstk_darwin(v11, v12);
      v20 = v8;
      v21 = v3 == 1;
      v22 = v8;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v22, v11, sub_10002AFC4, v19, (char *)&type metadata for () + 8, v10);
      swift_release(v8);
      swift_release(v11);
    }
    else
    {
      swift_release(v8);
    }
    swift_retain(v4);
    v14 = sub_100043890(v13, v5);
    swift_release(v4);
    v15 = swift_getKeyPath(&unk_1000D4798);
    __chkstk_darwin(v15, v16);
    v20 = v14;
    v21 = v3;
    v22 = v14;
    v17 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v22, v15, sub_10006127C, v19, (char *)&type metadata for () + 8, v17);
    swift_release(v14);
    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  return result;
}

double sub_1000BBAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  id v8;
  double result;
  uint64_t v10;

  type metadata accessor for CalculatorUnitConversionDisplayView(0, a3, a4, a4);
  v4 = sub_1000B6024();
  KeyPath = swift_getKeyPath(&unk_1000D4720);
  v10 = v4;
  v6 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(id *)(v4 + 32);
  v8 = objc_msgSend(v7, "unitType", swift_release(v4).n128_f64[0]);

  if (v8 == (id)16)
    return sub_1000BB380();
  return result;
}

uint64_t sub_1000BBBAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = sub_100005360(&qword_100118D08);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113AF8 != -1)
    swift_once(&qword_100113AF8, sub_10001BAA0);
  v13 = qword_10011F980;
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v10);
  *((_QWORD *)v12 + 1) = v13;
  v12[16] = 0;
  v14 = sub_100005360(&qword_100118D10);
  sub_1000BBCA4(a1, a2, a3, (uint64_t)&v12[*(int *)(v14 + 44)]);
  sub_10000531C((uint64_t)v12, a4, &qword_100118D08);
  return sub_100004F48((uint64_t)v12, &qword_100118D08);
}

void sub_1000BBCA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;

  v8 = sub_100005360(&qword_100118D18);
  __chkstk_darwin(v8, v9);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12, v13);
  v15 = &v27[-v14];
  v17 = type metadata accessor for CalculatorUnitConversionDisplayView(0, a2, a3, v16);
  sub_1000BBEB8((uint64_t)&v33);
  v18 = v33;
  v19 = v34;
  v20 = v35;
  v31 = v36;
  v29 = v38;
  v30 = v37;
  v21 = v39;
  v28 = v40;
  if (sub_1000B6074()
    && (v33 = *(_OWORD *)(a1 + 64),
        v22 = sub_100005360(&qword_100113FF8),
        State.wrappedValue.getter(&v32, v22),
        (v32 & 1) == 0))
  {
    sub_1000BBF6C(v17, (uint64_t)v15);
    v24 = sub_100005360(&qword_100118D20);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v15, 0, 1, v24);
  }
  else
  {
    v23 = sub_100005360(&qword_100118D20);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v15, 1, 1, v23);
  }
  sub_10000531C((uint64_t)v15, (uint64_t)v11, &qword_100118D18);
  *(_OWORD *)a4 = v18;
  *(_BYTE *)(a4 + 16) = v19;
  *(_QWORD *)(a4 + 24) = v20;
  *(_BYTE *)(a4 + 32) = v31;
  v25 = v29;
  *(_QWORD *)(a4 + 40) = v30;
  *(_QWORD *)(a4 + 48) = v25;
  *(_QWORD *)(a4 + 56) = v21;
  *(_BYTE *)(a4 + 64) = v28;
  v26 = sub_100005360(&qword_100118D28);
  sub_10000531C((uint64_t)v11, a4 + *(int *)(v26 + 48), &qword_100118D18);
  swift_retain(v18);
  sub_100004F48((uint64_t)v15, &qword_100118D18);
  sub_100004F48((uint64_t)v11, &qword_100118D18);
  swift_release(v18);
}

double sub_1000BBEB8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  double result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  if (qword_100113DF8 != -1)
    swift_once(&qword_100113DF8, sub_10005352C);
  v2 = qword_10011FDA0;
  swift_retain(qword_10011FDA0);
  v4 = static Alignment.center.getter(v3);
  _FrameLayout.init(width:height:alignment:)(&v11, 0, 1, 0x3FF0000000000000, 0, v4, v5);
  v6 = v11;
  v7 = v12;
  v8 = v13;
  v9 = v14;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  result = *(double *)&v15;
  *(_OWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1000BBF6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t *v48;
  void (*v49)(char *, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t OpaqueTypeConformance2;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[4];

  v114 = a2;
  v4 = type metadata accessor for HighlightHoverEffect(0);
  v115 = *(_QWORD *)(v4 - 8);
  v116 = v4;
  v6 = __chkstk_darwin(v4, v5);
  v113 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PlainButtonStyle(0, v6);
  v106 = *(_QWORD *)(v8 - 8);
  v107 = v8;
  __chkstk_darwin(v8, v9);
  v104 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100005360(&qword_100118D30);
  v11 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v12);
  v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100005360(&qword_100118D38);
  __chkstk_darwin(v98, v15);
  v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100005360(&qword_100118D40);
  __chkstk_darwin(v100, v18);
  v20 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100005360(&qword_100118D48);
  v101 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103, v21);
  v23 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100005360(&qword_100118D50);
  __chkstk_darwin(v102, v24);
  v26 = (char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100005360(&qword_100118D58);
  __chkstk_darwin(v109, v27);
  v105 = (char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v30);
  v108 = (char *)&v97 - v31;
  v32 = sub_100005360(&qword_100118D60);
  v111 = *(_QWORD *)(v32 - 8);
  v112 = v32;
  __chkstk_darwin(v32, v33);
  v110 = (char *)&v97 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = swift_allocObject(&unk_10010DAE8, 168, 7);
  v36 = v2[6];
  v37 = v2[7];
  v38 = v2[4];
  *(_OWORD *)(v35 + 112) = v2[5];
  *(_OWORD *)(v35 + 128) = v36;
  *(_OWORD *)(v35 + 144) = v37;
  v39 = v2[2];
  v40 = v2[3];
  v41 = *v2;
  *(_OWORD *)(v35 + 48) = v2[1];
  *(_OWORD *)(v35 + 64) = v39;
  *(_OWORD *)(v35 + 80) = v40;
  *(_OWORD *)(v35 + 96) = v38;
  v42 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v35 + 160) = *((_QWORD *)v2 + 16);
  *(_OWORD *)(v35 + 16) = v42;
  *(_OWORD *)(v35 + 32) = v41;
  sub_100066E98(v2);
  v43 = sub_100005360(&qword_100118D68);
  v44 = sub_1000BD3D8();
  Button.init(action:label:)(sub_1000BD388, v35, sub_1000BCD0C, 0, v43, v44);
  v45 = sub_1000BD528();
  KeyPath = swift_getKeyPath(&unk_1000D4608);
  v47 = v99;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v14, v99);
  v48 = (uint64_t *)&v17[*(int *)(v98 + 36)];
  *v48 = KeyPath;
  v48[1] = v45;
  v49 = *(void (**)(char *, uint64_t, __n128))(v11 + 8);
  v50 = swift_retain(v45);
  v49(v14, v47, v50);
  if (qword_100113E68 != -1)
    swift_once(&qword_100113E68, sub_10008981C);
  v51 = qword_10011FE10;
  v52 = swift_getKeyPath(&unk_1000D4638);
  sub_10000531C((uint64_t)v17, (uint64_t)v20, &qword_100118D38);
  v53 = v100;
  v54 = (uint64_t *)&v20[*(int *)(v100 + 36)];
  *v54 = v52;
  v54[1] = v51;
  swift_retain(v51);
  v55 = sub_100004F48((uint64_t)v17, &qword_100118D38);
  v56 = v104;
  PlainButtonStyle.init()(v55);
  v57 = sub_1000BD654();
  v58 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v59 = v53;
  v60 = v107;
  View.buttonStyle<A>(_:)(v56, v59, v107, v57, v58);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v56, v60);
  sub_100004F48((uint64_t)v20, &qword_100118D40);
  v61 = v101;
  v62 = v103;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v26, v23, v103);
  v63 = v102;
  v64 = &v26[*(int *)(v102 + 36)];
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)v64 = _Q0;
  *((_OWORD *)v64 + 1) = xmmword_1000CEB90;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v23, v62);
  v70 = sub_1000BD6F8();
  v71 = (uint64_t)v105;
  View.accessibilityIdentifier(_:)(0xD00000000000001ELL, 0x80000001000D80F0, v63, v70);
  sub_100004F48((uint64_t)v26, &qword_100118D50);
  v72 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000D8110);
  v73 = Text.init(_:tableName:bundle:comment:)(v72);
  v75 = v74;
  v77 = v76;
  v79 = v78 & 1;
  v81 = (uint64_t)v108;
  v80 = v109;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_10002DD44(v73, v75, v79);
  swift_bridgeObjectRelease(v77);
  sub_100004F48(v71, &qword_100118D58);
  v82 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000D8110);
  v84 = v83;
  LOBYTE(v75) = v85;
  v87 = v86;
  v88 = sub_1000BD7D0(&qword_100118DB8, &qword_100118D58, (void (*)(void))sub_1000BD6F8);
  v89 = v110;
  View.help(_:)(v82, v84, v75 & 1, v87, v80, v88);
  swift_bridgeObjectRelease(v87);
  swift_bridgeObjectRelease(v84);
  v90 = sub_100004F48(v81, &qword_100118D58);
  v91 = v113;
  static CustomHoverEffect<>.highlight.getter(v90);
  v117[0] = v80;
  v117[1] = v88;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v117, &opaque type descriptor for <<opaque return type of View.help(_:)>>, 1);
  v93 = sub_100005178(&qword_100118A30, (uint64_t (*)(uint64_t))&type metadata accessor for HighlightHoverEffect, (uint64_t)&protocol conformance descriptor for HighlightHoverEffect);
  v94 = v112;
  v95 = v116;
  View.hoverEffect<A>(_:isEnabled:)(v91, 1, v112, v116, OpaqueTypeConformance2, v93);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v91, v95);
  return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v89, v94);
}

uint64_t sub_1000BC634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;

  v6 = sub_100005360(&qword_100115CC8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_10010DAC0, 168, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v11 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v11 + 144) = v12;
  *(_QWORD *)(v11 + 160) = *(_QWORD *)(a1 + 128);
  v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v11 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v11 + 80) = v13;
  v14 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v11 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v11 + 112) = v14;
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 48) = v15;
  sub_100066E98((_QWORD *)a1);
  Button.init(action:label:)(sub_1000BD378, v11, sub_1000BC778, 0, &type metadata for Text, &protocol witness table for Text);
  v16 = sub_100008078(&qword_100115CD8, &qword_100115CC8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.allowsSecureDrawing()(v6, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1000BC778@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A1328(19279, 0xE200000000000000, a1);
}

uint64_t sub_1000BC784@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A1328(0xD000000000000053, 0x80000001000D8090, a1);
}

uint64_t sub_1000BC7A0@<X0>(uint64_t (*a1)(__n128)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t WitnessTable;
  void (*v33)(char *, uint64_t);
  _QWORD v35[4];
  _QWORD v36[2];
  uint64_t v37;
  char v38;
  uint64_t v39[4];

  v35[0] = a5;
  v35[1] = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = __chkstk_darwin(a1, a2);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModifiedContent(0, v13, &type metadata for _PaddingLayout, v10);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19, v20);
  v23 = (char *)v35 - v22;
  v24 = a1(v21);
  v25 = static Edge.Set.bottom.getter(v24);
  v26 = *(_QWORD *)(a3 + 48);
  LOBYTE(a3) = *(_BYTE *)(a3 + 56);
  swift_retain(v26);
  v28 = sub_1000436BC(v27, a3);
  swift_release(v26);
  sub_1000A6608();
  v30 = v29;
  swift_release(v28);
  v31 = v35[0];
  View.padding(_:_:)(v25, v30, 0, a4, v35[0]);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
  v39[2] = v31;
  v39[3] = (uint64_t)&protocol witness table for _PaddingLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  sub_100046714((uint64_t)v18, v14, (uint64_t)v23);
  v33 = *(void (**)(char *, uint64_t))(v15 + 8);
  v33(v18, v14);
  v37 = 0;
  v38 = 0;
  v39[0] = (uint64_t)&v37;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v23, v14);
  v39[1] = (uint64_t)v18;
  v36[0] = &type metadata for Spacer;
  v36[1] = v14;
  v35[2] = &protocol witness table for Spacer;
  v35[3] = WitnessTable;
  sub_10003E15C(v39, 2uLL, (uint64_t)v36);
  v33(v23, v14);
  return ((uint64_t (*)(char *, uint64_t))v33)(v18, v14);
}

_QWORD *sub_1000BC9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  char v29;

  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100014124(v6, (uint64_t)qword_10011FEA8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Swap button tapped", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  swift_retain(v11);
  v14 = sub_100043890(v13, v12);
  swift_release(v11);
  v15 = *(_QWORD *)(v14 + 16);
  swift_retain(v15);
  swift_release(v14);
  sub_1000AB504();
  swift_release(v15);
  type metadata accessor for CalculatorUnitConversionDisplayView(0, a2, a3, v16);
  sub_1000BB380();
  v28 = *(_OWORD *)(a1 + 96);
  v29 = *(_BYTE *)(a1 + 112);
  v17 = sub_100005360(&qword_1001170B0);
  result = FocusState.Binding.wrappedValue.getter(&v27, v17);
  if (v27 != 6)
  {
    v19 = (__int128 *)(a1 + 96);
    swift_retain(v11);
    v21 = sub_100043890(v20, v12);
    swift_release(v11);
    v22 = *(_QWORD *)(v21 + 16);
    swift_retain(v22);
    swift_release(v21);
    KeyPath = swift_getKeyPath(&unk_1000D47C0);
    *(_QWORD *)&v28 = v22;
    v24 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, KeyPath, v24);
    swift_release(KeyPath);
    LODWORD(KeyPath) = *(unsigned __int8 *)(v22 + 40);
    swift_release(v22);
    if ((_DWORD)KeyPath)
      v25 = 1;
    else
      v25 = 2;
    v28 = *v19;
    v29 = *((_BYTE *)v19 + 16);
    v27 = v25;
    v26 = sub_100005360(&qword_1001170B0);
    return (_QWORD *)FocusState.Binding.wrappedValue.setter(&v27, v26);
  }
  return result;
}

double sub_1000BCC10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for DynamicTypeSize(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113C18 != -1)
    swift_once(&qword_100113C18, sub_10002E268);
  v5 = qword_10011FAD0;
  v8 = qword_10011FAD0;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DynamicTypeSize.xLarge(_:), v0);
  swift_retain(v5);
  View.dynamicTypeSize(_:)(v4, &type metadata for Image, &protocol witness table for Image);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_1000BCD0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t KeyPath;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;

  v29 = a1;
  v1 = type metadata accessor for DynamicTypeSize(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100005360(&qword_100118D88);
  __chkstk_darwin(v28, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100118DC0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360(&qword_100118D80);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v19 = sub_100005360(&qword_100118DC8);
  v20 = sub_1000BCF6C((uint64_t)&v8[*(int *)(v19 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v2 + 104))(v5, enum case for DynamicTypeSize.small(_:), v1, v20);
  v21 = sub_100008078(&qword_100118D90, &qword_100118D88, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.dynamicTypeSize(_:)(v5, v28, v21);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  sub_100004F48((uint64_t)v8, &qword_100118D88);
  KeyPath = swift_getKeyPath(&unk_1000D4690);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v18, v13, v9);
  v23 = &v18[*(int *)(v14 + 36)];
  *(_QWORD *)v23 = KeyPath;
  *((_QWORD *)v23 + 1) = 1;
  v23[16] = 0;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v24 = swift_getKeyPath(&unk_1000D46C0);
  v25 = v29;
  sub_10000531C((uint64_t)v18, v29, &qword_100118D80);
  v26 = (uint64_t *)(v25 + *(int *)(sub_100005360(&qword_100118D68) + 36));
  *v26 = v24;
  v26[1] = 0x3FE6666666666666;
  return sub_100004F48((uint64_t)v18, &qword_100118D80);
}

double sub_1000BCF6C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = sub_100005360(&qword_100117598);
  __chkstk_darwin(v32, v2);
  v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for ControlSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100005360(&qword_100118DD0);
  __chkstk_darwin(v31, v10);
  v12 = (uint64_t *)((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v31 - v15;
  v17 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000D8110);
  v18 = Text.init(_:tableName:bundle:comment:)(v17);
  v33 = v19;
  v34 = v18;
  v21 = v20;
  v35 = v22;
  if (qword_100113BD8 != -1)
    swift_once(&qword_100113BD8, sub_10002E0AC);
  v23 = v21 & 1;
  v24 = qword_10011FA90;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for ControlSize.small(_:), v5);
  KeyPath = swift_getKeyPath(&unk_1000D46F0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v4 + *(int *)(v32 + 28), v9, v5);
  *v4 = KeyPath;
  sub_10000531C((uint64_t)v4, (uint64_t)v12 + *(int *)(v31 + 36), &qword_100117598);
  *v12 = v24;
  swift_retain_n(v24, 2);
  sub_100004F48((uint64_t)v4, &qword_100117598);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_release(v24);
  sub_100007CD8((uint64_t)v12, (uint64_t)v16, &qword_100118DD0);
  sub_10000531C((uint64_t)v16, (uint64_t)v12, &qword_100118DD0);
  v27 = v33;
  v26 = v34;
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v23;
  v28 = v35;
  *(_QWORD *)(a1 + 24) = v35;
  v29 = sub_100005360(&qword_100118DD8);
  sub_10000531C((uint64_t)v12, a1 + *(int *)(v29 + 48), &qword_100118DD0);
  sub_10002DE88(v26, v27, v23);
  swift_bridgeObjectRetain(v28);
  sub_100004F48((uint64_t)v16, &qword_100118DD0);
  sub_100004F48((uint64_t)v12, &qword_100118DD0);
  sub_10002DD44(v26, v27, v23);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v28).n128_u64[0];
  return result;
}

void sub_1000BD248(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000B6320(a1, a2);
}

uint64_t sub_1000BD2A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B6950(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 64));
}

uint64_t sub_1000BD2B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B70E8(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 40));
}

uint64_t sub_1000BD2C8()
{
  uint64_t *v0;

  return sub_1000BC634(v0[4], v0[2], v0[3]);
}

unint64_t sub_1000BD2D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118CF0;
  if (!qword_100118CF0)
  {
    v1 = sub_100005608(&qword_100118CD0);
    sub_100008078(&qword_100118CF8, &qword_100118CC8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100008078(&qword_100118D00, &qword_100118CE0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118CF0);
  }
  return result;
}

uint64_t sub_1000BD370()
{
  return sub_1000BE044(168);
}

uint64_t sub_1000BD378()
{
  return sub_1000BD390(0);
}

uint64_t sub_1000BD380()
{
  return sub_1000BE044(168);
}

uint64_t sub_1000BD388()
{
  return sub_1000BD390(1);
}

uint64_t sub_1000BD390(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  __int128 v5;

  v5 = *(_OWORD *)(v1 + 112);
  v4 = a1;
  v2 = sub_100005360(&qword_100113FF8);
  return State.wrappedValue.setter(&v4, v2);
}

unint64_t sub_1000BD3D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118D70;
  if (!qword_100118D70)
  {
    v1 = sub_100005608(&qword_100118D68);
    sub_1000BD45C();
    sub_100008078(&qword_100114E98, &qword_100114EA0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118D70);
  }
  return result;
}

unint64_t sub_1000BD45C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100118D78;
  if (!qword_100118D78)
  {
    v1 = sub_100005608(&qword_100118D80);
    v2[0] = sub_100005608(&qword_100118D88);
    v2[1] = sub_100008078(&qword_100118D90, &qword_100118D88, (uint64_t)&protocol conformance descriptor for HStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    sub_100008078(&qword_100116320, &qword_100116328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118D78);
  }
  return result;
}

uint64_t sub_1000BD528()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  swift_retain(v1);
  v4 = sub_100043890(v3, v2);
  swift_release(v1);
  KeyPath = swift_getKeyPath(&unk_1000D4668);
  v9 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  LODWORD(KeyPath) = *(unsigned __int8 *)(v4 + 51);
  swift_release(v4);
  if ((_DWORD)KeyPath == 1)
  {
    if (qword_100113D08 != -1)
      swift_once(&qword_100113D08, sub_100053054);
    v7 = &qword_10011FCB0;
  }
  else
  {
    if (qword_100113D00 != -1)
      swift_once(&qword_100113D00, sub_100052FEC);
    v7 = &qword_10011FCA8;
  }
  return *v7;
}

unint64_t sub_1000BD654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118D98;
  if (!qword_100118D98)
  {
    v1 = sub_100005608(&qword_100118D40);
    sub_1000BDFA4(&qword_100118DA0, &qword_100118D38, &qword_100118DA8, &qword_100118D30);
    sub_100008078((unint64_t *)&qword_100114F20, &qword_100114F28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118D98);
  }
  return result;
}

unint64_t sub_1000BD6F8()
{
  unint64_t result;
  uint64_t v1;
  __n128 v2;
  _QWORD v3[4];

  result = qword_100118DB0;
  if (!qword_100118DB0)
  {
    v1 = sub_100005608(&qword_100118D50);
    v3[0] = sub_100005608(&qword_100118D40);
    v3[1] = type metadata accessor for PlainButtonStyle(255, v2);
    v3[2] = sub_1000BD654();
    v3[3] = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100035110();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118DB0);
  }
  return result;
}

uint64_t sub_1000BD7D0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(a2);
    a3();
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BD87C()
{
  return sub_1000BE044(168);
}

double sub_1000BD884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000BAF9C(v4 + 32, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_1000BD890()
{
  return sub_1000BE044(168);
}

double sub_1000BD898()
{
  uint64_t v0;

  return sub_1000BB3FC(v0 + 32);
}

uint64_t sub_1000BD8AC()
{
  return sub_1000BE044(168);
}

_QWORD *sub_1000BD8B4(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;

  if (*a2 == 1)
  {
    type metadata accessor for CalculatorUnitConversionDisplayView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
    return sub_1000BB238();
  }
  return result;
}

unint64_t sub_1000BD8F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118E30;
  if (!qword_100118E30)
  {
    v1 = sub_100005608(&qword_100118DE8);
    sub_100008078(&qword_100118E38, &qword_100118DE0, (uint64_t)&protocol conformance descriptor for Grid<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118E30);
  }
  return result;
}

uint64_t sub_1000BD97C()
{
  return sub_1000BE044(168);
}

double sub_1000BD984(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return sub_1000BB55C(a1, a2, v2 + 32, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000BD990()
{
  return sub_1000BE044(168);
}

_QWORD *sub_1000BD998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for CalculatorUnitConversionDisplayView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_1000BB238();
}

unint64_t sub_1000BD9C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117318;
  if (!qword_100117318)
  {
    v1 = objc_opt_self(CalculateUnitCategory);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100117318);
  }
  return result;
}

uint64_t sub_1000BDA08()
{
  return sub_1000BE044(168);
}

void sub_1000BDA10()
{
  uint64_t v0;

  sub_1000BB67C(v0 + 32);
}

uint64_t sub_1000BDA1C()
{
  return sub_1000BE044(168);
}

double sub_1000BDA24(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;

  return sub_1000BB880(a1, a2, v2 + 32);
}

uint64_t sub_1000BDA30()
{
  return sub_1000BE044(168);
}

double sub_1000BDA38(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BBAC4(a1, v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000BDA4C()
{
  uint64_t v0;

  return sub_100022618(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000BDA70()
{
  return sub_1000BE044(176);
}

uint64_t sub_1000BDA78@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t *v2;

  a2.n128_u64[0] = v2[21];
  return sub_1000B9118((uint64_t)(v2 + 4), v2[2], v2[3], a1, a2);
}

uint64_t sub_1000BDA8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BDBA8((uint64_t)sub_1000BDDD0, a1);
}

unint64_t sub_1000BDA98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118E60;
  if (!qword_100118E60)
  {
    v1 = sub_100005608(&qword_100118E58);
    sub_100008078(&qword_100118E68, &qword_100118E70, (uint64_t)&unk_1000D1AA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118E60);
  }
  return result;
}

uint64_t sub_1000BDB1C()
{
  return sub_1000BE044(176);
}

uint64_t sub_1000BDB24@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t *v2;

  a2.n128_u64[0] = v2[21];
  return sub_1000BA124((uint64_t)(v2 + 4), v2[2], v2[3], a1, a2);
}

uint64_t sub_1000BDB38()
{
  _QWORD *v0;

  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[13]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[21]);
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1000BDB9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BDBA8((uint64_t)sub_1000BDBD0, a1);
}

uint64_t sub_1000BDBA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000BABC8(v2 + 32, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2, *(double *)(v2 + 176));
}

uint64_t sub_1000BDBD0()
{
  return sub_1000BDDDC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))sub_1000BACAC);
}

unint64_t sub_1000BDBDC()
{
  unint64_t result;

  result = qword_100118E90;
  if (!qword_100118E90)
  {
    result = swift_getWitnessTable(&unk_1000CE7A4, &type metadata for InputAccessoryView);
    atomic_store(result, (unint64_t *)&qword_100118E90);
  }
  return result;
}

uint64_t sub_1000BDC20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BC7A0(*(uint64_t (**)(__n128))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), a1);
}

_QWORD *sub_1000BDC34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[1];
  v3 = a1[2];
  v12 = a1[3];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  v9 = a1[15];
  v10 = a1[17];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_release(v5);
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v12);
  return a1;
}

uint64_t sub_1000BDD00(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100005608(&qword_100116458);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BDD68()
{
  return sub_1000BE044(168);
}

uint64_t sub_1000BDD70()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(v0 + 128);
  v5 = *(_BYTE *)(v0 + 144);
  v3 = 2;
  v1 = sub_100005360(&qword_1001170B0);
  return FocusState.Binding.wrappedValue.setter(&v3, v1);
}

uint64_t sub_1000BDDC4()
{
  return sub_1000BE044(176);
}

uint64_t sub_1000BDDD0()
{
  return sub_1000BDDDC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))sub_1000B9C58);
}

uint64_t sub_1000BDDDC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)(v1 + 48));
}

uint64_t sub_1000BDDF8()
{
  return sub_1000BE044(168);
}

uint64_t sub_1000BDE00()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(v0 + 128);
  v5 = *(_BYTE *)(v0 + 144);
  v3 = 1;
  v1 = sub_100005360(&qword_1001170B0);
  return FocusState.Binding.wrappedValue.setter(&v3, v1);
}

uint64_t sub_1000BDE54()
{
  return sub_1000BE044(176);
}

double sub_1000BDE5C()
{
  double *v0;
  double v1;

  v1 = v0[21];
  return ViewDimensions.height.getter() - v1 * (v0[19] / v0[20]);
}

uint64_t sub_1000BDE9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B7AAC(*(uint64_t (***)(__n128))(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 40));
}

unint64_t sub_1000BDEAC()
{
  unint64_t result;
  uint64_t v1;
  __n128 v2;
  _QWORD v3[4];

  result = qword_100118EE8;
  if (!qword_100118EE8)
  {
    v1 = sub_100005608(&qword_100118EF0);
    v3[0] = sub_100005608(&qword_100118EF8);
    v3[1] = type metadata accessor for PlainButtonStyle(255, v2);
    v3[2] = sub_1000BDFA4(&qword_100118F00, &qword_100118EF8, (unint64_t *)&qword_100114FC8, &qword_100114F90);
    v3[3] = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100035110();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118EE8);
  }
  return result;
}

uint64_t sub_1000BDFA4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005608(a2);
    sub_100008078(a3, a4, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BE03C()
{
  return sub_1000BE044(168);
}

uint64_t sub_1000BE044(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[5]);
  swift_release(v1[6]);
  swift_release(v1[8]);
  swift_release(v1[10]);
  swift_release(v1[13]);
  swift_release(v1[15]);
  swift_release(v1[16]);
  swift_release(v1[17]);
  return swift_deallocObject(v1, a1, 7);
}

_QWORD *sub_1000BE0AC()
{
  uint64_t v0;

  return sub_1000BC9BC(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000BE0B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v1 = *a1;
  v2 = sub_100005608(&qword_100118CB8);
  v3 = type metadata accessor for Optional(255, v1);
  v5 = type metadata accessor for ModifiedContent(255, v3, &type metadata for _PaddingLayout, v4);
  v6 = sub_100005608(&qword_100114F28);
  v8 = type metadata accessor for ModifiedContent(255, v5, v6, v7);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v12 = type metadata accessor for VStack(255, v10, WitnessTable);
  v13 = swift_getTupleTypeMetadata2(255, v2, v12, 0, 0);
  v14 = type metadata accessor for TupleView(255, v13);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v15 = type metadata accessor for ZStack(255, v14);
  v16 = sub_100005608(&qword_100118CC0);
  v17 = swift_getTupleTypeMetadata2(255, v15, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, v17);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v19 = type metadata accessor for HStack(255, v18);
  v21 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _FixedSizeLayout, v20);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v19);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
}

uint64_t initializeBufferWithCopyOfBuffer for CalculatorConfigSnapshot(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CalculatorConfigSnapshot(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = a1[3];
      if (a1[3])
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3))
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = a1[1];
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorConfigSnapshot(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 1) = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorConfigSnapshot()
{
  return &type metadata for CalculatorConfigSnapshot;
}

uint64_t sub_1000BE398(int a1)
{
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  v2._countAndFlagsBits = 0x203A65646F6DLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  v12 = a1;
  _print_unlocked<A, B>(_:_:)(&v12, v13, &type metadata for CalculatorAppMode, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._object = (void *)0x80000001000D8200;
  v3._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v3);
  if ((a1 & 0x100) != 0)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if ((a1 & 0x100) != 0)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0x6F4D4E5052736920;
  v7._object = (void *)0xEC000000203A6564;
  String.append(_:)(v7);
  if ((a1 & 0x10000) != 0)
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if ((a1 & 0x10000) != 0)
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v9);
  return v13[0];
}

uint64_t sub_1000BE4D4()
{
  unsigned __int8 *v0;
  int v1;
  int v2;

  if (v0[2])
    v1 = 0x10000;
  else
    v1 = 0;
  if (v0[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_1000BE398(v2 | *v0 | v1);
}

uint64_t destroy for UnitConversionCategoryButton(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for UnitConversionCategoryButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for UnitConversionCategoryButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for UnitConversionCategoryButton(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UnitConversionCategoryButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnitConversionCategoryButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnitConversionCategoryButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitConversionCategoryButton()
{
  return &type metadata for UnitConversionCategoryButton;
}

uint64_t sub_1000BE6DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F72C8, 1);
}

uint64_t sub_1000BE6EC@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ValueMetadata *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66[16];
  uint64_t v67;
  _QWORD *v68;
  ValueMetadata *v69;
  uint64_t v70;
  unint64_t v71;

  v65 = a1;
  v64 = type metadata accessor for AccessibilityTraits(0, a2);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64, v3);
  v63 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005360(&qword_100118F10);
  v58 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100118F18);
  v10 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  v60 = v10;
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100005360(&qword_100118F20);
  __chkstk_darwin(v57, v14);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v55 = (char *)&v54 - v19;
  __chkstk_darwin(v20, v21);
  v61 = (char *)&v54 - v22;
  v23 = *(ValueMetadata **)(v2 + 8);
  v56 = *(_QWORD **)v2;
  v24 = *(_QWORD *)(v2 + 32);
  v25 = swift_allocObject(&unk_10010DF90, 56, 7);
  v26 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v25 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 48) = *(_QWORD *)(v2 + 32);
  v67 = v2;
  swift_bridgeObjectRetain(v23);
  swift_retain(v24);
  v27 = sub_100005360(&qword_100118F28);
  v28 = sub_1000BED08();
  Button.init(action:label:)(sub_1000BECE0, v25, sub_1000BED00, v66, v27, v28);
  LOBYTE(v68) = *(_BYTE *)(v2 + 16);
  v29 = v68;
  v30 = sub_100008078(&qword_100118F48, &qword_100118F10, (uint64_t)&protocol conformance descriptor for Button<A>);
  v31 = sub_1000BEDD8();
  View.buttonStyle<A>(_:)(&v68, v5, &type metadata for UnitConversionCategoryButtonStyle, v30, v31);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v8, v5);
  v68 = (_QWORD *)v5;
  v69 = &type metadata for UnitConversionCategoryButtonStyle;
  v32 = (uint64_t)v55;
  v70 = v30;
  v71 = v31;
  v33 = v57;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v35 = v56;
  v36 = v59;
  View.accessibilityIdentifier(_:)(v56, v23, v59, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v36);
  v68 = v35;
  v69 = v23;
  v37 = sub_100004F84();
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v68, v33, &type metadata for String, v37);
  sub_100004F48((uint64_t)v16, &qword_100118F20);
  if (v29 == 1)
  {
    v38 = sub_100005360(&qword_100114EC8);
    v39 = v62;
    v40 = swift_allocObject(v38, ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(_QWORD *)(v62 + 72), *(unsigned __int8 *)(v62 + 80) | 7);
    *(_OWORD *)(v40 + 16) = xmmword_1000CD7E0;
    static AccessibilityTraits.isSelected.getter();
    v68 = (_QWORD *)v40;
    v41 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v42 = sub_100005360(&qword_100114EB0);
    v43 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
    v44 = v63;
    v45 = v42;
    v46 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v45, v43, v64, v41);
    v47 = v39;
  }
  else
  {
    v68 = _swiftEmptyArrayStorage;
    v48 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v49 = sub_100005360(&qword_100114EB0);
    v50 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
    v44 = v63;
    v51 = v49;
    v46 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v51, v50, v64, v48);
    v47 = v62;
  }
  v52 = (uint64_t)v61;
  ModifiedContent<>.accessibilityAddTraits(_:)(v44, v33);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
  sub_100004F48(v32, &qword_100118F20);
  return sub_100007CD8(v52, v65, &qword_100118F20);
}

void sub_1000BEB88(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v3 = a1[1];
  v29[0] = *a1;
  v29[1] = v3;
  v4 = sub_100004F84();
  v5 = swift_bridgeObjectRetain(v3);
  v6 = Text.init<A>(_:)(v29, &type metadata for String, v4, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = static Edge.Set.vertical.getter(v6);
  v14 = v13;
  v15 = EdgeInsets.init(_all:)(v13, 6.0);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = static Edge.Set.horizontal.getter(v22);
  v24 = v23;
  v25 = EdgeInsets.init(_all:)(v23, 12.0);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v10 & 1;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v14;
  *(double *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v19;
  *(_QWORD *)(a2 + 64) = v21;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = v24;
  *(double *)(a2 + 88) = v25;
  *(_QWORD *)(a2 + 96) = v26;
  *(_QWORD *)(a2 + 104) = v27;
  *(_QWORD *)(a2 + 112) = v28;
  *(_BYTE *)(a2 + 120) = 0;
}

uint64_t sub_1000BEC7C@<X0>(uint64_t a1@<X8>)
{
  __n128 *v1;

  return sub_1000BE6EC(a1, *v1);
}

uint64_t sub_1000BECB4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000BECE0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

void sub_1000BED00(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000BEB88(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_1000BED08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118F30;
  if (!qword_100118F30)
  {
    v1 = sub_100005608(&qword_100118F28);
    sub_1000BED74();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118F30);
  }
  return result;
}

unint64_t sub_1000BED74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118F38;
  if (!qword_100118F38)
  {
    v1 = sub_100005608(&qword_100118F40);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118F38);
  }
  return result;
}

unint64_t sub_1000BEDD8()
{
  unint64_t result;

  result = qword_100118F50;
  if (!qword_100118F50)
  {
    result = swift_getWitnessTable(&unk_1000D4984, &type metadata for UnitConversionCategoryButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100118F50);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UnitConversionCategoryButtonStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000BEE68 + 4 * byte_1000D48D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000BEE9C + 4 * byte_1000D48D0[v4]))();
}

uint64_t sub_1000BEE9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BEEA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BEEACLL);
  return result;
}

uint64_t sub_1000BEEB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BEEC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000BEEC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BEECC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnitConversionCategoryButtonStyle()
{
  return &type metadata for UnitConversionCategoryButtonStyle;
}

unint64_t sub_1000BEEEC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100118F58;
  if (!qword_100118F58)
  {
    v1 = sub_100005608(&qword_100118F20);
    v2[0] = sub_100005608(&qword_100118F10);
    v2[1] = &type metadata for UnitConversionCategoryButtonStyle;
    v2[2] = sub_100008078(&qword_100118F48, &qword_100118F10, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_1000BEDD8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118F58);
  }
  return result;
}

uint64_t sub_1000BEFCC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F72F0, 1);
}

uint64_t sub_1000BEFDC@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t *v30;
  void (*v31)(char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;

  v60 = a1;
  v67 = a2;
  v65 = type metadata accessor for RoundedRectangle(0);
  v3 = __chkstk_darwin(v65, v2);
  v66 = (uint64_t *)((char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for ButtonStyleConfiguration.Label(0, v3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005360(&qword_100117C78);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100005360(&qword_100117C80);
  __chkstk_darwin(v57, v14);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100005360(&qword_100117C88);
  __chkstk_darwin(v58, v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100005360(&qword_100118F60);
  __chkstk_darwin(v59, v20);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100005360(&qword_100118F68);
  __chkstk_darwin(v61, v23);
  v64 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100005360(&qword_100118F70);
  v26 = __chkstk_darwin(v62, v25);
  v63 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter(v26);
  if (qword_100113E70 != -1)
    swift_once(&qword_100113E70, sub_100089838);
  v28 = qword_10011FE18;
  KeyPath = swift_getKeyPath(&unk_1000D49C0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v9, v5);
  v30 = (uint64_t *)&v13[*(int *)(v10 + 36)];
  *v30 = KeyPath;
  v30[1] = v28;
  v31 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
  v32 = swift_retain(v28);
  v31(v9, v5, v32);
  v33 = swift_getKeyPath(&unk_1000D49F0);
  sub_10000531C((uint64_t)v13, (uint64_t)v16, &qword_100117C78);
  v34 = (uint64_t *)&v16[*(int *)(v57 + 36)];
  *v34 = v33;
  v34[1] = 0x3FB999999999999ALL;
  sub_100004F48((uint64_t)v13, &qword_100117C78);
  v35 = swift_getKeyPath(&unk_1000D4A20);
  sub_10000531C((uint64_t)v16, (uint64_t)v19, &qword_100117C80);
  v36 = &v19[*(int *)(v58 + 36)];
  *(_QWORD *)v36 = v35;
  *((_QWORD *)v36 + 1) = 1;
  v36[16] = 0;
  sub_100004F48((uint64_t)v16, &qword_100117C80);
  v37 = v60;
  if ((v60 & 1) != 0)
  {
    if (qword_100113D18 != -1)
      swift_once(&qword_100113D18, sub_100053094);
    v38 = &qword_10011FCC0;
  }
  else
  {
    if (qword_100113D10 != -1)
      swift_once(&qword_100113D10, sub_100053070);
    v38 = &qword_10011FCB8;
  }
  v39 = *v38;
  swift_retain(*v38);
  v40 = swift_getKeyPath(&unk_1000D4A50);
  sub_10000531C((uint64_t)v19, (uint64_t)v22, &qword_100117C88);
  v41 = (uint64_t *)&v22[*(int *)(v59 + 36)];
  *v41 = v40;
  v41[1] = v39;
  v42 = sub_100004F48((uint64_t)v19, &qword_100117C88);
  if ((v37 & 1) != 0)
  {
    v43 = (uint64_t)v64;
    if (qword_100113D20 != -1)
      swift_once(&qword_100113D20, sub_1000530B0);
    v44 = qword_10011FCC8;
    swift_retain(qword_10011FCC8);
  }
  else
  {
    v45 = static Color.clear.getter(v42);
    v44 = v45;
    v43 = (uint64_t)v64;
  }
  v46 = static Edge.Set.all.getter(v45);
  sub_10000531C((uint64_t)v22, v43, &qword_100118F60);
  v47 = v43 + *(int *)(v61 + 36);
  *(_QWORD *)v47 = v44;
  *(_BYTE *)(v47 + 8) = v46;
  sub_100004F48((uint64_t)v22, &qword_100118F60);
  if (qword_100113B08 != -1)
    swift_once(&qword_100113B08, sub_10001BAC0);
  v48 = qword_10011F990;
  v49 = v66;
  v50 = (char *)v66 + *(int *)(v65 + 20);
  v51 = enum case for RoundedCornerStyle.continuous(_:);
  v52 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 104))(v50, v51, v52);
  *v49 = v48;
  v49[1] = v48;
  v53 = (uint64_t)v63;
  v54 = (uint64_t)&v63[*(int *)(v62 + 36)];
  sub_1000674BC((uint64_t)v49, v54);
  *(_WORD *)(v54 + *(int *)(sub_100005360(&qword_100116678) + 36)) = 256;
  sub_10000531C(v43, v53, &qword_100118F68);
  sub_100067500((uint64_t)v49);
  sub_100004F48(v43, &qword_100118F68);
  return sub_100007CD8(v53, v67, &qword_100118F70);
}

uint64_t sub_1000BF558@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_1000BEFDC(*v1, a1);
}

unint64_t sub_1000BF584()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118F78;
  if (!qword_100118F78)
  {
    v1 = sub_100005608(&qword_100118F70);
    sub_1000BF608();
    sub_100008078(&qword_1001174C8, &qword_100116678, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118F78);
  }
  return result;
}

unint64_t sub_1000BF608()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118F80;
  if (!qword_100118F80)
  {
    v1 = sub_100005608(&qword_100118F68);
    sub_1000BF68C();
    sub_100008078(&qword_100114B68, &qword_100114B70, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118F80);
  }
  return result;
}

unint64_t sub_1000BF68C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118F88;
  if (!qword_100118F88)
  {
    v1 = sub_100005608(&qword_100118F60);
    sub_10009612C();
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118F88);
  }
  return result;
}

id sub_1000BF710()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D4B70);
  v4 = v0;
  v2 = sub_1000C00A4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(id *)(v0 + 56);
}

uint64_t sub_1000BF77C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D4B20);
  v4 = v0;
  v2 = sub_1000C00A4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 64);
}

id sub_1000BF7E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D4B48);
  v4 = v0;
  v2 = sub_1000C00A4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(id *)(v0 + 48);
}

double sub_1000BF854()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  char v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  uint64_t v7;
  _BYTE v8[16];
  uint64_t v9;
  char v10;

  LOBYTE(v7) = 0;
  v1 = SBSGetScreenLockStatus(&v7);
  if ((_BYTE)v7)
    v2 = v1 == 0;
  else
    v2 = 1;
  v3 = !v2;
  KeyPath = swift_getKeyPath(&unk_1000D4B20);
  v9 = v0;
  v10 = v3;
  v7 = v0;
  v5 = sub_1000C00A4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_10002B0A8, v8, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000BF928()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AppSettings(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000BF96C();
  qword_10011FF08 = result;
  return result;
}

uint64_t sub_1000BF964(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

uint64_t sub_1000BF96C()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  void *v3;
  NSString v4;
  id v5;
  int v6;
  uint64_t v7;
  char v8;
  void *v9;
  NSString v10;
  id v11;
  char v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  uint64_t v21;

  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v1 = (void *)qword_10011FED8;
  v2 = String._bridgeToObjectiveC()();
  LOBYTE(v1) = objc_msgSend(v1, "BOOLForKey:", v2);

  *(_BYTE *)(v0 + 16) = (_BYTE)v1;
  *(_QWORD *)(v0 + 24) = 8;
  v3 = (void *)qword_10011FED8;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "objectForKey:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(&v18, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  sub_100004E58((uint64_t)&v18, (uint64_t)v20);
  if (v21)
  {
    v6 = swift_dynamicCast(&v17, v20, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
    v7 = v17;
    if (!v6)
      v7 = 0;
    v8 = v6 ^ 1;
  }
  else
  {
    sub_100039C90((uint64_t)v20);
    v7 = 0;
    v8 = 1;
  }
  *(_QWORD *)(v0 + 32) = v7;
  *(_BYTE *)(v0 + 40) = v8;
  v9 = (void *)qword_10011FED8;
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "objectForKey:", v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(&v18, v11);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  sub_100004E58((uint64_t)&v18, (uint64_t)v20);
  if (!v21)
  {
    sub_100039C90((uint64_t)v20);
    goto LABEL_18;
  }
  if ((swift_dynamicCast(&v17, v20, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_18:
    v12 = 0;
    goto LABEL_19;
  }
  v12 = v17;
LABEL_19:
  *(_BYTE *)(v0 + 41) = v12;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v13, "setNumberStyle:", 1);
  objc_msgSend(v13, "setMaximumIntegerDigits:", 20);
  objc_msgSend(v13, "setUsesGroupingSeparator:", 1);
  objc_msgSend(v13, "setUsesSignificantDigits:", 1);
  objc_msgSend(v13, "setMaximumFractionDigits:", 15);
  *(_QWORD *)(v0 + 48) = v13;
  v14 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  v15 = objc_msgSend(v14, "setNumberStyle:", 5);
  *(_QWORD *)(v0 + 56) = v14;
  *(_BYTE *)(v0 + 64) = 0;
  ObservationRegistrar.init()(v15);
  sub_1000BF854();
  return v0;
}

uint64_t sub_1000BFC58(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100014124(v13, (uint64_t)qword_10011FEA8);
    v7 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v15, "Prompt to unlock succeeded", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    goto LABEL_11;
  }
  swift_errorRetain(a2);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v5 = type metadata accessor for Logger(0);
  sub_100014124(v5, (uint64_t)qword_10011FEA8);
  swift_errorRetain(a2);
  v6 = swift_errorRetain(a2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v7, v8))
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
LABEL_11:

    return a3(a2);
  }
  v9 = (uint8_t *)swift_slowAlloc(12, -1);
  v10 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v9 = 138412290;
  swift_errorRetain(a2);
  v11 = _swift_stdlib_bridgeErrorToNSError(a2);
  v18 = v11;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
  *v10 = v11;
  swift_errorRelease(a2);
  swift_errorRelease(a2);
  _os_log_impl((void *)&_mh_execute_header, v7, v8, "Prompt to unlock failed: %@", v9, 0xCu);
  v12 = sub_100005360(&qword_100114358);
  swift_arrayDestroy(v10, 1, v12);
  swift_slowDealloc(v10, -1, -1);
  swift_slowDealloc(v9, -1, -1);

  swift_errorRelease(a2);
  return a3(a2);
}

void sub_1000BFEE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1000BFF54()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + OBJC_IVAR____TtC10Calculator11AppSettings___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1000BFFB4()
{
  return type metadata accessor for AppSettings(0);
}

uint64_t type metadata accessor for AppSettings(uint64_t a1)
{
  uint64_t result;

  result = qword_100118FC0;
  if (!qword_100118FC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppSettings);
  return result;
}

uint64_t sub_1000BFFF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1000D4AD0;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_1000D4AE8;
  v4[3] = &unk_1000D4AD0;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = &unk_1000D4AD0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000C00A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114A48;
  if (!qword_100114A48)
  {
    v1 = type metadata accessor for AppSettings(255);
    result = swift_getWitnessTable(&unk_1000D4B00, v1);
    atomic_store(result, (unint64_t *)&qword_100114A48);
  }
  return result;
}

void sub_1000C00F4(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  Class isa;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  NSString v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject *oslog;
  void **aBlock;
  uint64_t v27;
  void (*v28)(uint64_t, void *, void *);
  void *v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  char v32[104];

  v4 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationService), "serviceWithDefaultShellEndpoint");
  if (v4)
  {
    v5 = v4;
    v6 = sub_100005360(&qword_100119080);
    inited = swift_initStackObject(v6, v32);
    *(_OWORD *)(inited + 16) = xmmword_1000CD7E0;
    aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
    v27 = v8;
    AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Bool;
    *(_BYTE *)(inited + 72) = 1;
    v9 = sub_10001C12C(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v11 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationOptions), "optionsWithDictionary:", isa);

    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100014124(v12, (uint64_t)qword_10011FEA8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Will attempt to open Calculator application for prompt to unlock", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = String._bridgeToObjectiveC()();
    v18 = swift_allocObject(&unk_10010E0B0, 32, 7);
    *(_QWORD *)(v18 + 16) = a1;
    *(_QWORD *)(v18 + 24) = a2;
    v30 = sub_1000C0484;
    v31 = v18;
    aBlock = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_1000BFEE0;
    v29 = &unk_10010E0C8;
    v19 = _Block_copy(&aBlock);
    v20 = v31;
    swift_retain(a2);
    objc_msgSend(v5, "openApplication:withOptions:completion:", v17, v11, v19, swift_release(v20).n128_f64[0]);
    _Block_release(v19);

  }
  else
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100014124(v21, (uint64_t)qword_10011FEA8);
    oslog = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v23, "Unable to create the FrontBoard open application service", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

  }
}

uint64_t sub_1000C0460()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C0484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000BFC58(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_1000C0494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100119088);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000C04D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_100119088);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000C050C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100119088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000C0554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100119088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000C059C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100119088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000C05E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100119088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000C062C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C0638);
}

uint64_t sub_1000C0638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100119088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000C0678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C0684);
}

uint64_t sub_1000C0684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100119088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CalculatorApp(uint64_t a1)
{
  return sub_1000164F0(a1, (uint64_t *)&unk_1001190E8, (uint64_t)&nominal type descriptor for CalculatorApp);
}

void sub_1000C06DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1000ADB84(319, (unint64_t *)&unk_1001190F8, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for UIApplicationDelegateAdaptor);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t sub_1000C075C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F73B0, 1);
}

uint64_t sub_1000C076C()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1000C078C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = type metadata accessor for LayoutDirection(0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 16))(v6, a1, v4);
  return EnvironmentValues.layoutDirection.setter(v6);
}

void sub_1000C0808(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D4D80);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 49);
}

void sub_1000C0894(char *a1)
{
  sub_10001E770(*a1);
}

uint64_t sub_1000C08B8@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  id v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = (int *)type metadata accessor for CalculatorAppScene(0);
  v3 = (_QWORD *)(a1 + v2[5]);
  v4 = type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v5 + 16) = 0;
  ObservationRegistrar.init()(v5);
  v23 = v5;
  State.init(wrappedValue:)(&v24, &v23, v4);
  v6 = v25;
  *v3 = v24;
  v3[1] = v6;
  v7 = v2[6];
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v8 = (_QWORD *)(a1 + v7);
  v9 = qword_10011FF08;
  v23 = qword_10011FF08;
  v10 = type metadata accessor for AppSettings(0);
  swift_retain(v9);
  State.init(wrappedValue:)(&v24, &v23, v10);
  v11 = v25;
  *v8 = v24;
  v8[1] = v11;
  v12 = type metadata accessor for CalculatorToolbarViewModel(0);
  LazyState.init(wrappedValue:)(sub_1000C4094, 0, v12);
  v13 = a1 + v2[8];
  LOBYTE(v23) = 0;
  State.init(wrappedValue:)(&v24, &v23, &type metadata for Bool);
  v14 = v25;
  *(_BYTE *)v13 = v24;
  *(_QWORD *)(v13 + 8) = v14;
  v15 = (objc_class *)type metadata accessor for CalculatorMDMRestrictionsManager(0);
  v16 = objc_msgSend(objc_allocWithZone(v15), "init");
  v17 = (_QWORD *)(a1 + v2[9]);
  v23 = (uint64_t)v16;
  v18 = v16;
  State.init(wrappedValue:)(&v24, &v23, v15);
  v19 = v25;
  *v17 = v24;
  v17[1] = v19;
  v20 = swift_allocObject(&unk_10010E108, 24, 7);
  *(_QWORD *)(v20 + 16) = v18;
  v21 = type metadata accessor for CalculatorViewModel(0);
  return LazyState.init(wrappedValue:)(sub_1000C4108, v20, v21);
}

uint64_t sub_1000C0A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for CalculatorAppScene(0);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C08B8((uint64_t)v3);
  v4 = sub_100005178(&qword_100119128, type metadata accessor for CalculatorAppScene, (uint64_t)&unk_1000D4C48);
  static SceneBuilder.buildBlock<A>(_:)(v3, v0, v4);
  return sub_100014150((uint64_t)v3, type metadata accessor for CalculatorAppScene);
}

uint64_t sub_1000C0B38()
{
  uint64_t v0;

  v0 = type metadata accessor for AppDelegate();
  return UIApplicationDelegateAdaptor.init(_:)(v0, v0);
}

uint64_t type metadata accessor for CalculatorAppScene(uint64_t a1)
{
  return sub_1000164F0(a1, (uint64_t *)&unk_1001191A8, (uint64_t)&nominal type descriptor for CalculatorAppScene);
}

void sub_1000C0B78(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  id v5;
  uint64_t v6;

  v4 = type metadata accessor for CalculatorViewModel(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = a1;
  v6 = sub_10002A800(v5);

  *a2 = v6;
}

uint64_t sub_1000C0BD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(_QWORD, _QWORD, __n128);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  __n128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, char *, uint64_t);
  uint64_t (**v96)();
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (**v104)();
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  void (**v114)(_QWORD, _QWORD, __n128);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD v132[2];

  v2 = v1;
  v124 = a1;
  v3 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v122 = *(_QWORD *)(v3 - 8);
  v123 = v3;
  __chkstk_darwin(v3, v4);
  v121 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for CalculatorAppScene(0);
  v6 = *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64);
  v119 = *(_QWORD *)(v126 - 8);
  v120 = v6;
  __chkstk_darwin(v126, v7);
  v127 = (uint64_t)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100119340);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for CalculatorAppContentView(0);
  __chkstk_darwin(v13, v14);
  v16 = (char **)((char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_100005360(&qword_100119348);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100005360(&qword_100119350);
  v108 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107, v21);
  v23 = (char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100005360(&qword_100119358);
  v111 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110, v24);
  v106 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100005360(&qword_100119360);
  v27 = *(void (***)(_QWORD, _QWORD, __n128))(v26 - 8);
  v113 = v26;
  v114 = v27;
  __chkstk_darwin(v26, v28);
  v109 = (char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100005360(&qword_100119368);
  v117 = *(_QWORD *)(v30 - 8);
  v118 = v30;
  __chkstk_darwin(v30, v31);
  v112 = (char *)&v106 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100005360(&qword_100119370);
  __chkstk_darwin(v116, v33);
  v115 = (char *)&v106 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v16 = swift_getKeyPath(&unk_1000D4E20);
  v35 = sub_100005360(&qword_100115680);
  swift_storeEnumTagMultiPayload(v16, v35, 0);
  v36 = (_QWORD *)((char *)v16 + v13[5]);
  *v36 = swift_getKeyPath(&unk_1000D4E50);
  swift_storeEnumTagMultiPayload(v36, v35, 0);
  v37 = (_QWORD *)((char *)v16 + v13[6]);
  *v37 = swift_getKeyPath(&unk_1000D4E80);
  v38 = sub_100005360(&qword_100115678);
  swift_storeEnumTagMultiPayload(v37, v38, 0);
  v39 = type metadata accessor for CalculatorLayout(0);
  LazyState.init(wrappedValue:)(sub_1000C419C, 0, v39);
  v40 = (char *)v16 + v13[8];
  LOBYTE(v132[0]) = 0;
  State.init(wrappedValue:)(&v128, v132, &type metadata for Bool);
  v41 = v129;
  *v40 = v128;
  *((_QWORD *)v40 + 1) = v41;
  v42 = enum case for ColorScheme.dark(_:);
  v43 = type metadata accessor for ColorScheme(0);
  v44 = *(_QWORD *)(v43 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 104))(v12, v42, v43);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v12, 0, 1, v43);
  sub_10000531C((uint64_t)v12, (uint64_t)&v20[*(int *)(v17 + 36)], &qword_100119340);
  sub_100014084((uint64_t)v16, (uint64_t)v20, type metadata accessor for CalculatorAppContentView);
  sub_100004F48((uint64_t)v12, &qword_100119340);
  sub_100014150((uint64_t)v16, type metadata accessor for CalculatorAppContentView);
  sub_100005360(&qword_100119138);
  v125 = v2;
  LazyState.wrappedValue.getter(&v128);
  v45 = v128;
  v46 = type metadata accessor for CalculatorViewModel(0);
  v47 = sub_1000C512C();
  v48 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  View.environment<A>(_:)(v45, v17, v46, v47, v48);
  swift_release(v45);
  sub_100004F48((uint64_t)v20, &qword_100119348);
  v49 = v126;
  v50 = (uint64_t *)(v2 + *(int *)(v126 + 20));
  v52 = *v50;
  v51 = v50[1];
  v128 = v52;
  v129 = v51;
  v53 = sub_100005360(qword_100119398);
  State.wrappedValue.getter(v132, v53);
  v54 = v132[0];
  v55 = type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  v128 = v17;
  v129 = v46;
  v130 = v47;
  v131 = v48;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v128, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v57 = sub_100005178(&qword_100116508, type metadata accessor for CalculatorUnitConversionViewModelWrapper, (uint64_t)&unk_1000CF484);
  v58 = v106;
  v59 = v107;
  View.environment<A>(_:)(v54, v107, v55, OpaqueTypeConformance2, v57);
  v60 = swift_release(v54);
  v61 = v23;
  v62 = v59;
  (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v61, v59, v60);
  v63 = v125;
  v64 = (uint64_t *)(v125 + *(int *)(v49 + 36));
  v66 = *v64;
  v65 = v64[1];
  v128 = v66;
  v129 = v65;
  v67 = sub_100005360(&qword_1001192E8);
  State.wrappedValue.getter(v132, v67);
  v68 = (void *)v132[0];
  v69 = type metadata accessor for CalculatorMDMRestrictionsManager(0);
  v128 = v62;
  v129 = v55;
  v130 = OpaqueTypeConformance2;
  v131 = v57;
  v70 = swift_getOpaqueTypeConformance2(&v128, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v71 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  v72 = v109;
  v73 = v110;
  View.environment<A>(_:)(v68, v110, v69, v70, v71);

  (*(void (**)(char *, uint64_t))(v111 + 8))(v58, v73);
  sub_100005360(&qword_100119148);
  LazyState.wrappedValue.getter(&v128);
  v74 = v128;
  v75 = type metadata accessor for CalculatorToolbarViewModel(0);
  v128 = v73;
  v129 = v69;
  v130 = v70;
  v131 = v71;
  v76 = swift_getOpaqueTypeConformance2(&v128, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v77 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  v78 = v112;
  v79 = v113;
  View.environment<A>(_:)(v74, v113, v75, v76, v77);
  v80 = swift_release(v74);
  ((void (**)(char *, uint64_t, __n128))v114)[1](v72, v79, v80);
  v81 = v127;
  sub_100014084(v63, v127, type metadata accessor for CalculatorAppScene);
  v82 = *(unsigned __int8 *)(v119 + 80);
  v83 = (v82 + 16) & ~v82;
  v126 = v83 + v120;
  v119 = v83;
  v120 = v82 | 7;
  v84 = swift_allocObject(&unk_10010E1F8, v126, v82 | 7);
  sub_1000C4C48(v81, v84 + v83);
  v114 = (void (**)(_QWORD, _QWORD, __n128))objc_opt_self(NSNotificationCenter);
  v85 = objc_msgSend(v114, "defaultCenter");
  v86 = v121;
  NSNotificationCenter.publisher(for:object:)(UIApplicationWillEnterForegroundNotification, 0);

  v87 = swift_allocObject(&unk_10010E220, 32, 7);
  *(_QWORD *)(v87 + 16) = sub_1000C51CC;
  *(_QWORD *)(v87 + 24) = v84;
  v89 = v117;
  v88 = v118;
  v90 = (uint64_t)v115;
  v91 = v78;
  (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v115, v78, v118);
  v92 = v116;
  v93 = v122;
  v94 = v123;
  v95 = *(void (**)(uint64_t, char *, uint64_t))(v122 + 16);
  v95(v90 + *(int *)(v116 + 52), v86, v123);
  v96 = (uint64_t (**)())(v90 + *(int *)(v92 + 56));
  *v96 = sub_1000B59FC;
  v96[1] = (uint64_t (*)())v87;
  v97 = *(void (**)(char *, uint64_t))(v93 + 8);
  v97(v86, v94);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v88);
  v98 = v127;
  sub_100014084(v125, v127, type metadata accessor for CalculatorAppScene);
  v99 = swift_allocObject(&unk_10010E248, v126, v120);
  sub_1000C4C48(v98, v99 + v119);
  v100 = objc_msgSend(v114, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIApplicationDidEnterBackgroundNotification, 0);

  v101 = swift_allocObject(&unk_10010E270, 32, 7);
  *(_QWORD *)(v101 + 16) = sub_1000C523C;
  *(_QWORD *)(v101 + 24) = v99;
  v102 = v124;
  sub_10000531C(v90, v124, &qword_100119370);
  v103 = sub_100005360(&qword_100119218);
  v95(v102 + *(int *)(v103 + 52), v86, v94);
  v104 = (uint64_t (**)())(v102 + *(int *)(v103 + 56));
  *v104 = sub_1000C5338;
  v104[1] = (uint64_t (*)())v101;
  v97(v86, v94);
  return sub_100004F48(v90, &qword_100119370);
}

double sub_1000C154C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  double result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;

  sub_100005360(&qword_100119138);
  LazyState.wrappedValue.getter(&v19);
  v2 = v19;
  v3 = *(_QWORD *)(v19 + 24);
  v4 = type metadata accessor for AnalyticsTimeStampInfo(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  Date.init()(v6);
  Date.init()(v7);
  v8 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v5;
  swift_release(v8);
  swift_retain(v2);
  sub_100029FE0(v9, v3);
  swift_release_n(v2, 2);
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v10 = qword_10011FF08;
  sub_1000BF854();
  KeyPath = swift_getKeyPath(&unk_1000D4CE0);
  v19 = v10;
  v12 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v12);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  if (*(_BYTE *)(v10 + 64) == 1)
  {
    v19 = 0;
    v14 = Transaction.disablesAnimations.setter(1);
    v15 = v19;
    __chkstk_darwin(v14, v16);
    v18[2] = a1;
    swift_retain(v15);
    withTransaction<A>(_:_:)(v17, sub_1000C5250, v18, (char *)&type metadata for () + 8);
    swift_release(v15);
    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  return result;
}

void sub_1000C170C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100005360(&qword_100119138);
  LazyState.wrappedValue.getter(&v4);
  v0 = v4;
  KeyPath = swift_getKeyPath(&unk_1000D4DF8);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(unsigned __int8 *)(v0 + 48);
  swift_release(v0);
  __asm { BR              X9 }
}

void sub_1000C17D8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  char v28;

  v1 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, 0xEA00000000006369, 0x657061506874616DLL, 0xE900000000000072, 0);
  swift_bridgeObjectRelease(0xEA00000000006369);
  if ((v1 & 1) != 0)
  {
    LazyState.wrappedValue.getter((_QWORD *)(v0 - 72));
    v2 = *(_QWORD *)(v0 - 72);
    sub_10001F808(0);
    swift_release(v2);
  }
  type metadata accessor for CalculatorAppScene(0);
  sub_100005360(&qword_100119148);
  LazyState.wrappedValue.getter((_QWORD *)(v0 - 72));
  v3 = *(_QWORD *)(v0 - 72);
  KeyPath = swift_getKeyPath(&unk_1000D4CB8);
  *(_QWORD *)(v0 - 72) = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 - 72, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(unsigned __int8 *)(v3 + 16);
  swift_release(v3);
  if (v6 == 1)
  {
    LazyState.wrappedValue.getter((_QWORD *)(v0 - 72));
    v7 = *(_QWORD *)(v0 - 72);
    if (qword_100113F40 != -1)
      swift_once(&qword_100113F40, sub_1000BF928);
    sub_1000BF854();
    sub_100068F30(0);
    swift_release(v7);
  }
  LazyState.wrappedValue.getter((_QWORD *)(v0 - 72));
  v8 = *(_QWORD *)(v0 - 72);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = swift_getKeyPath(&unk_1000D4EB0);
  *(_QWORD *)(v0 - 72) = v9;
  v11 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 - 72, v10, v11);
  swift_release(v10);
  if (*(_BYTE *)(v9 + 41) == 1)
  {
    swift_release(v8);
  }
  else
  {
    v12 = sub_1000AC150();
    v13 = swift_retain(v12);
    v14 = CalculateExpression.rich.getter(v13);
    v15 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
    v16 = swift_release(v14);
    if ((v15 & 1) != 0)
    {
      swift_release(v8);
      v17 = v12;
      goto LABEL_15;
    }
    v18 = CalculateExpression.rich.getter(v16);
    v19 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
    swift_release(v8);
    swift_release(v12);
    swift_release(v18);
    if ((v19 & 1) != 0)
      return;
  }
  LazyState.wrappedValue.getter((_QWORD *)(v0 - 72));
  v20 = *(_QWORD *)(v0 - 72);
  v21 = *(_QWORD *)(v20 + 16);
  swift_retain(v21);
  swift_release(v20);
  v22 = sub_1000AC150();
  swift_retain(v22);
  CalculateExpression.clear()();
  swift_release(v22);
  v23 = sub_1000AC248();
  swift_retain(v23);
  CalculateExpression.clear()();
  swift_release(v23);
  v24 = swift_getKeyPath(&unk_1000D4EB0);
  *(_QWORD *)(v0 - 72) = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 - 72, v24, v11);
  swift_release(v24);
  if (*(_BYTE *)(v21 + 41) == 1)
  {
    v25 = swift_getKeyPath(&unk_1000D4EB0);
    __chkstk_darwin(v25, v26);
    v27[2] = v21;
    v28 = 0;
    *(_QWORD *)(v0 - 72) = v21;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 - 72, v25, sub_10002AFA0, v27, (char *)&type metadata for () + 8, v11);
    swift_release(v21);
    swift_release(v25);
    return;
  }
  v17 = v21;
LABEL_15:
  swift_release(v17);
}

uint64_t sub_1000C1BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char v7;
  __n128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_100005360(&qword_100119138);
  LazyState.wrappedValue.getter(&v16);
  v0 = v16;
  v1 = *(_QWORD *)(v16 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D4EB0);
  v16 = v1;
  v3 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, KeyPath, v3);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 41) == 1)
  {
    swift_release(v0);
    goto LABEL_6;
  }
  v4 = sub_1000AC150();
  v5 = swift_retain(v4);
  v6 = CalculateExpression.rich.getter(v5);
  v7 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
  v8 = swift_release(v6);
  if ((v7 & 1) != 0)
  {
    swift_release(v0);
LABEL_7:
    swift_release(v4);
    goto LABEL_8;
  }
  v9 = CalculateExpression.rich.getter(v8);
  v10 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
  swift_release(v0);
  swift_release(v4);
  swift_release(v9);
  if ((v10 & 1) == 0)
  {
LABEL_6:
    LazyState.wrappedValue.getter(&v16);
    v4 = v16;
    sub_1000268DC();
    goto LABEL_7;
  }
LABEL_8:
  LazyState.wrappedValue.getter(&v16);
  v11 = v16;
  v12 = *(_QWORD *)(v16 + 24);
  swift_retain(v16);
  sub_10002A33C(0, v11, v12);
  swift_release_n(v11, 2);
  LazyState.wrappedValue.getter(&v16);
  v13 = v16;
  v14 = *(_QWORD *)(v16 + 24);
  swift_retain(v16);
  sub_10002B9E8(0, v13, v14);
  return swift_release_n(v13, 2);
}

uint64_t sub_1000C1D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = v1;
  v58 = a1;
  v3 = type metadata accessor for CalculatorAppScene(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  v7 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005360(&qword_100119200);
  v52 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100119208);
  v13 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  v57 = v13;
  __chkstk_darwin(v12, v14);
  v50 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_100119210);
  v54 = *(_QWORD *)(v16 - 8);
  v55 = v16;
  __chkstk_darwin(v16, v17);
  v51 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v53 = (char *)&v49 - v21;
  v22 = LocalizedStringKey.init(stringLiteral:)(0x74616C75636C6143, 0xEA0000000000726FLL);
  sub_100014084(v2, (uint64_t)v7, type metadata accessor for CalculatorAppScene);
  v23 = *(unsigned __int8 *)(v4 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_10010E130, v24 + v5, v23 | 7);
  sub_1000C4C48((uint64_t)v7, v25 + v24);
  v26 = Text.init(_:tableName:bundle:comment:)(v22);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = sub_100005360(&qword_100119218);
  v34 = sub_100008078(&qword_100119220, &qword_100119218, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
  WindowGroup.init(id:title:lazyContent:)(0, 0, v26, v28, v32, v30, sub_1000C4C8C, v25, v33, v34);
  v35 = sub_100008078(&qword_100119228, &qword_100119200, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
  v36 = v50;
  Scene.allowsSecureDrawing(_:)(1, v8, v35);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v8);
  v60 = v2;
  v37 = sub_100005360(&qword_100119230);
  v61 = v8;
  v62 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of Scene.allowsSecureDrawing(_:)>>, 1);
  v39 = sub_100008078(&qword_100119238, &qword_100119230, (uint64_t)&protocol conformance descriptor for TupleCommandContent<A>);
  v40 = v51;
  v41 = v56;
  Scene.commands<A>(content:)(sub_1000C4CCC, v59, v56, v37, OpaqueTypeConformance2, v39);
  v42 = v36;
  v43 = v41;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v42, v41);
  v45 = v53;
  v44 = v54;
  v46 = v55;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v40, v55);
  v61 = v43;
  v62 = v37;
  v63 = OpaqueTypeConformance2;
  v64 = v39;
  v47 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of Scene.commands<A>(content:)>>, 1);
  static SceneBuilder.buildBlock<A>(_:)(v45, v46, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v46);
}

uint64_t sub_1000C2130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(void);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  uint64_t v55;
  char v56[16];
  uint64_t v57;

  v53 = a2;
  v3 = sub_100005360(&qword_100119240);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005360(&qword_100119248);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100119250);
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CommandGroupPlacement(0, v13);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005360(&qword_100119258);
  v47 = *(_QWORD *)(v20 - 8);
  v21 = v47;
  v48 = v20;
  v23 = __chkstk_darwin(v20, v22);
  v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CommandGroupPlacement.newItem.getter(v23);
  v46 = v25;
  v26 = CommandGroup.init(replacing:addition:)(v19, CalculatorButtonRepresentable.id.getter, 0, &type metadata for EmptyView, &protocol witness table for EmptyView);
  static CommandGroupPlacement.toolbar.getter(v26);
  v57 = a1;
  v27 = sub_100005360(&qword_100119260);
  v28 = sub_100008078(&qword_100119268, &qword_100119260, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v29 = v15;
  v30 = CommandGroup.init(before:addition:)(v19, sub_1000C4CD4, v56, v27, v28);
  static CommandGroupPlacement.sidebar.getter(v30);
  v55 = a1;
  v31 = sub_100005360(&qword_100119270);
  v32 = sub_1000C4CE4();
  CommandGroup.init(replacing:addition:)(v19, sub_1000C4CDC, v54, v31, v32);
  v33 = v6;
  v34 = &v6[*(int *)(v3 + 48)];
  v35 = v3;
  v36 = &v33[*(int *)(v3 + 64)];
  v37 = *(void (**)(void))(v21 + 16);
  v38 = v33;
  v39 = v48;
  v37();
  v41 = v49;
  v40 = v50;
  v42 = v29;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v34, v29, v50);
  v44 = v51;
  v43 = v52;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v36, v10, v52);
  TupleCommandContent.init(_:)(v38, v35);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v43);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v46, v39);
}

uint64_t sub_1000C2418@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t OpaqueTypeConformance2;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  char v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  _BYTE *v98;
  void (*v99)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v100;
  uint64_t v101;
  _BYTE *v102;
  void (*v103)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  void (*v109)(_BYTE *, uint64_t);
  void (*v110)(_BYTE *, uint64_t);
  _BYTE v112[4];
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  char v149[8];
  uint64_t v150;
  _QWORD v151[2];
  unsigned __int8 v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  _QWORD v157[2];
  char v158;
  _QWORD v159[2];
  char v160;

  v143 = a2;
  v131 = type metadata accessor for CalculatorAppScene(0);
  __chkstk_darwin(v131, v3);
  v138 = &v112[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v130 = type metadata accessor for KeyEquivalent(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130, v5);
  v125 = &v112[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v128 = sub_100005360(&qword_100117560);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128, v7);
  v126 = &v112[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v137 = sub_100005360(&qword_100119298);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137, v9);
  v135 = &v112[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v134 = sub_100005360(&qword_1001192A0);
  __chkstk_darwin(v134, v11);
  v142 = &v112[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v14);
  v133 = &v112[-v15];
  v18 = __chkstk_darwin(v16, v17);
  v139 = &v112[-v19];
  v141 = type metadata accessor for Divider(0, v18);
  v146 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141, v20);
  v140 = &v112[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = __chkstk_darwin(v22, v23);
  v145 = &v112[-v25];
  v121 = type metadata accessor for InlinePickerStyle(0, v24);
  v124 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121, v26);
  v28 = &v112[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = sub_100005360(&qword_1001192A8);
  v119 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v30);
  v32 = &v112[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v122 = sub_100005360(&qword_1001192B0);
  v123 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122, v33);
  v35 = &v112[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v120 = sub_100005360(&qword_1001192B8);
  v147 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120, v36);
  v132 = &v112[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v38, v39);
  v118 = &v112[-v40];
  __chkstk_darwin(v41, v42);
  v148 = &v112[-v43];
  v116 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  v115 = v44;
  v113 = v45;
  v114 = v46;
  v144 = sub_100005360(&qword_100119138);
  LazyState.projectedValue.getter(&v153);
  v47 = v153;
  v48 = v154;
  v49 = v155;
  KeyPath = swift_getKeyPath(&unk_1000D4D08);
  v153 = v47;
  v154 = v48;
  v155 = v49;
  v117 = sub_100005360(&qword_1001192C0);
  Binding.subscript.getter(v159, KeyPath, v117);
  swift_release(v49);
  swift_release(v48);
  swift_release(KeyPath);
  swift_release(v47);
  v157[0] = v159[0];
  v157[1] = v159[1];
  v158 = v160;
  v150 = a1;
  v51 = sub_100005360(&qword_1001192C8);
  v52 = sub_1000C4FEC();
  v53 = sub_100008078(&qword_1001192D8, &qword_1001192C8, (uint64_t)&protocol conformance descriptor for _TuplePickerContent<A, B>);
  v54 = Picker<>.init<A>(_:selection:content:)(v116, v115, v113 & 1, v114, v157, sub_1000C4FE4, v149, &type metadata for CalculatorAppMode, v51, v52, v53);
  InlinePickerStyle.init()(v54);
  v55 = sub_100008078(&qword_1001192E0, &qword_1001192A8, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
  v56 = v121;
  View.pickerStyle<A>(_:)(v28, v29, v121, v55, &protocol witness table for InlinePickerStyle);
  (*(void (**)(_BYTE *, uint64_t))(v124 + 8))(v28, v56);
  v57 = v32;
  v58 = a1;
  (*(void (**)(_BYTE *, uint64_t))(v119 + 8))(v57, v29);
  v153 = (_BYTE *)v29;
  v154 = v56;
  v155 = v55;
  v156 = &protocol witness table for InlinePickerStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
  v60 = v118;
  v61 = v122;
  View.labelsHidden()(v122, OpaqueTypeConformance2);
  (*(void (**)(_BYTE *, uint64_t))(v123 + 8))(v35, v61);
  v62 = v120;
  v63 = (*(uint64_t (**)(_BYTE *, _BYTE *))(v147 + 32))(v148, v60);
  v64 = v126;
  Divider.init()(v63);
  LazyState.projectedValue.getter(&v153);
  v65 = v153;
  v66 = v154;
  v67 = v155;
  v68 = swift_getKeyPath(&unk_1000D4D30);
  v153 = v65;
  v154 = v66;
  v155 = v67;
  Binding.subscript.getter(v151, v68, v117);
  swift_release(v67);
  swift_release(v66);
  swift_release(v68);
  swift_release(v65);
  Toggle.init(isOn:label:)(v151[0], v151[1], v152, sub_1000C3898, 0, &type metadata for Text, &protocol witness table for Text);
  v69 = v125;
  v70 = KeyEquivalent.init(extendedGraphemeClusterLiteral:)(67, 0xE100000000000000);
  v71 = static EventModifiers.command.getter(v70);
  v72 = static EventModifiers.option.getter();
  v73 = EventModifiers.init(rawValue:)(0);
  v74 = EventModifiers.init(rawValue:)(v73);
  if (EventModifiers.init(rawValue:)(v74 & v71) != v71)
    v73 = EventModifiers.init(rawValue:)(v73 | v71);
  v75 = EventModifiers.init(rawValue:)(v73);
  if (EventModifiers.init(rawValue:)(v75 & v72) != v72)
    v73 = EventModifiers.init(rawValue:)(v73 | v72);
  v76 = (uint64_t)v138;
  v77 = v135;
  v78 = sub_100008078(&qword_1001175B8, &qword_100117560, (uint64_t)&protocol conformance descriptor for Toggle<A>);
  v79 = v73;
  v80 = v128;
  View.keyboardShortcut(_:modifiers:)(v69, v79, v128, v78);
  (*(void (**)(_BYTE *, uint64_t))(v129 + 8))(v69, v130);
  (*(void (**)(_BYTE *, uint64_t))(v127 + 8))(v64, v80);
  v81 = (_QWORD *)(v58 + *(int *)(v131 + 36));
  v83 = (_BYTE *)*v81;
  v82 = v81[1];
  v153 = v83;
  v154 = v82;
  v84 = sub_100005360(&qword_1001192E8);
  State.wrappedValue.getter(v151, v84);
  v85 = (_BYTE *)v151[0];
  v86 = swift_getKeyPath(&unk_1000D4D58);
  v153 = v85;
  v87 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v153, v86, v87);
  swift_release(v86);
  LOBYTE(v86) = v85[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed];

  sub_100014084(v58, v76, type metadata accessor for CalculatorAppScene);
  if ((v86 & 1) != 0)
  {
    LazyState.wrappedValue.getter(&v153);
    v88 = v153;
    sub_100022858();
    v90 = v89;
    swift_release(v88);
    v91 = v90 ^ 1;
  }
  else
  {
    v91 = 1;
  }
  sub_100014150(v76, type metadata accessor for CalculatorAppScene);
  v92 = swift_getKeyPath(&unk_1000D4C88);
  v93 = swift_allocObject(&unk_10010E1D0, 17, 7);
  *(_BYTE *)(v93 + 16) = v91 & 1;
  v94 = v136;
  v95 = (uint64_t)v133;
  v96 = v137;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v136 + 16))(v133, v77, v137);
  v97 = (uint64_t *)(v95 + *(int *)(v134 + 36));
  *v97 = v92;
  v97[1] = (uint64_t)sub_1000C5340;
  v97[2] = v93;
  (*(void (**)(_BYTE *, uint64_t))(v94 + 8))(v77, v96);
  v98 = v139;
  sub_100007CD8(v95, (uint64_t)v139, &qword_1001192A0);
  v99 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v147 + 16);
  v100 = v132;
  v101 = v62;
  v99(v132, v148, v62);
  v102 = v145;
  v103 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v146 + 16);
  v104 = v140;
  v105 = v141;
  v103(v140, v145, v141);
  v106 = v142;
  sub_10000531C((uint64_t)v98, (uint64_t)v142, &qword_1001192A0);
  v107 = v143;
  v99(v143, v100, v101);
  v108 = sub_100005360(&qword_1001192F0);
  v103(&v107[*(int *)(v108 + 48)], v104, v105);
  sub_10000531C((uint64_t)v106, (uint64_t)&v107[*(int *)(v108 + 64)], &qword_1001192A0);
  sub_100004F48((uint64_t)v98, &qword_1001192A0);
  v109 = *(void (**)(_BYTE *, uint64_t))(v146 + 8);
  v109(v102, v105);
  v110 = *(void (**)(_BYTE *, uint64_t))(v147 + 8);
  v110(v148, v101);
  sub_100004F48((uint64_t)v106, &qword_1001192A0);
  v109(v104, v105);
  return ((uint64_t (*)(_BYTE *, uint64_t))v110)(v100, v101);
}

void sub_1000C2E8C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D4DF8);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 48);
}

uint64_t sub_1000C2F18@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, char *, uint64_t);
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  id v71;
  id v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t (*v94)(char *, uint64_t);
  void *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t (*v116)(char *, uint64_t);
  char *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  ValueMetadata *v121;
  unint64_t v122;
  _QWORD v123[2];

  v108 = a1;
  v109 = a2;
  v2 = sub_100005360(&qword_1001192F8);
  __chkstk_darwin(v2, v3);
  v110 = (uint64_t)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v6);
  v113 = (char *)&v97 - v7;
  v111 = sub_100005360(&qword_100119300);
  v118 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111, v8);
  v100 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v99 = (char *)&v97 - v12;
  __chkstk_darwin(v13, v14);
  v115 = (char *)&v97 - v15;
  __chkstk_darwin(v16, v17);
  v117 = (char *)&v97 - v18;
  v19 = type metadata accessor for KeyEquivalent(0);
  v114 = *(char **)(v19 - 8);
  v112 = v19;
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100005360(&qword_100119308);
  v107 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100005360(&qword_100119310);
  v116 = *(uint64_t (**)(char *, uint64_t))(v27 - 8);
  __chkstk_darwin(v27, v28);
  v106 = (char *)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v31);
  v33 = (char *)&v97 - v32;
  __chkstk_darwin(v34, v35);
  v37 = (char *)&v97 - v36;
  LOBYTE(v119) = 0;
  v38 = sub_1000C4FEC();
  PickerOption.init(value:content:)(&v119, sub_1000C3818, 0, &type metadata for CalculatorAppMode, &type metadata for Text, v38, &protocol witness table for Text);
  v39 = KeyEquivalent.init(extendedGraphemeClusterLiteral:)(49, 0xE100000000000000);
  v40 = static EventModifiers.command.getter(v39);
  v41 = sub_100008078(&qword_100119318, &qword_100119308, (uint64_t)&protocol conformance descriptor for PickerOption<A, B>);
  PickerContent.keyboardShortcut(_:modifiers:)(v22, v40, v23, v41);
  v42 = (void (*)(char *, uint64_t))*((_QWORD *)v114 + 1);
  v42(v22, v19);
  v43 = *(void (**)(char *, uint64_t))(v107 + 8);
  v43(v26, v23);
  v44 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v116 + 4);
  v114 = v37;
  v44(v37, v33, v27);
  LOBYTE(v119) = 1;
  v105 = v38;
  v45 = v38;
  v46 = v27;
  PickerOption.init(value:content:)(&v119, sub_1000C3840, 0, &type metadata for CalculatorAppMode, &type metadata for Text, v45, &protocol witness table for Text);
  v47 = KeyEquivalent.init(extendedGraphemeClusterLiteral:)(50, 0xE100000000000000);
  v48 = static EventModifiers.command.getter(v47);
  v104 = v41;
  PickerContent.keyboardShortcut(_:modifiers:)(v22, v48, v23, v41);
  v101 = v22;
  v49 = v22;
  v50 = v26;
  v103 = v42;
  v42(v49, v112);
  v107 = v23;
  v102 = v43;
  v43(v26, v23);
  v51 = &v108[*(int *)(type metadata accessor for CalculatorAppScene(0) + 36)];
  v52 = *((_QWORD *)v51 + 1);
  v119 = *(unsigned __int8 **)v51;
  v120 = v52;
  v53 = sub_100005360(&qword_1001192E8);
  State.wrappedValue.getter(v123, v53);
  v54 = (unsigned __int8 *)v123[0];
  KeyPath = swift_getKeyPath(&unk_1000D4DA8);
  v119 = v54;
  v56 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v119, KeyPath, v56);
  swift_release(KeyPath);
  LOBYTE(v26) = v54[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed];

  v57 = sub_100008078(&qword_100119320, &qword_100119310, (uint64_t)&protocol conformance descriptor for _KeyboardShortcutPickerContent<A>);
  v58 = v115;
  PickerContent.disabled(_:)((v26 & 1) == 0, v46, v57);
  v59 = v111;
  v60 = (void (*)(char *, uint64_t))*((_QWORD *)v116 + 1);
  v60(v33, v46);
  v108 = *(char **)(v118 + 32);
  ((void (*)(char *, char *, uint64_t))v108)(v117, v58, v59);
  v121 = &type metadata for NotesFeatureFlags;
  v122 = sub_10003AA0C();
  LOBYTE(v33) = isFeatureEnabled(_:)(&v119);
  sub_100004F28(&v119);
  v61 = 1;
  if ((v33 & 1) == 0)
    goto LABEL_8;
  v98 = v57;
  v116 = (uint64_t (*)(char *, uint64_t))v46;
  v62 = v113;
  LOBYTE(v119) = 2;
  PickerOption.init(value:content:)(&v119, sub_1000C3870, 0, &type metadata for CalculatorAppMode, &type metadata for Text, v105, &protocol witness table for Text);
  v63 = v101;
  v64 = KeyEquivalent.init(extendedGraphemeClusterLiteral:)(51, 0xE100000000000000);
  v65 = static EventModifiers.command.getter(v64);
  v66 = v107;
  v67 = v106;
  PickerContent.keyboardShortcut(_:modifiers:)(v63, v65, v107, v104);
  v103(v63, v112);
  v102(v50, v66);
  v68 = *((_QWORD *)v51 + 1);
  v119 = *(unsigned __int8 **)v51;
  v120 = v68;
  State.wrappedValue.getter(v123, v53);
  v69 = (unsigned __int8 *)v123[0];
  v70 = swift_getKeyPath(&unk_1000D4DD0);
  v119 = v69;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v119, v70, v56);
  swift_release(v70);
  LODWORD(v70) = v69[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed];

  if ((_DWORD)v70 == 1)
  {
    v71 = objc_allocWithZone((Class)LSApplicationRecord);
    v72 = sub_10007C868(0xD000000000000015, 0x80000001000D7040, 0);
    v73 = v62;
    v74 = v111;
    v46 = (uint64_t)v116;
    v75 = v99;
    v96 = v72;
    if (v72)
    {
      v77 = v100;
      v78 = v98;
      if (qword_100113990 != -1)
        swift_once(&qword_100113990, sub_10001B6D0);
      v76 = (uint64_t)objc_msgSend((id)qword_1001147B0, "requiresPreflightForApplicationRecord:", v96);

      goto LABEL_7;
    }
    v76 = 0;
    v77 = v100;
  }
  else
  {
    v76 = 1;
    v73 = v62;
    v74 = v111;
    v46 = (uint64_t)v116;
    v77 = v100;
    v75 = v99;
  }
  v78 = v98;
LABEL_7:
  PickerContent.disabled(_:)(v76, v46, v78);
  v60(v67, v46);
  v79 = (void (*)(char *, char *, uint64_t))v108;
  ((void (*)(char *, char *, uint64_t))v108)(v75, v77, v74);
  v79(v73, v75, v74);
  v57 = v78;
  v61 = 0;
  v59 = v74;
LABEL_8:
  v116 = (uint64_t (*)(char *, uint64_t))v60;
  v80 = v118;
  v81 = (uint64_t)v113;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56))(v113, v61, 1, v59);
  v82 = v109;
  v83 = v114;
  v84 = v59;
  dispatch thunk of PickerContent._identifiedView.getter(v46, v57);
  v85 = sub_100005360(&qword_100119328);
  v86 = sub_100008078(&qword_100119330, &qword_100119300, (uint64_t)&protocol conformance descriptor for _DisabledPickerContent<A>);
  v87 = v117;
  dispatch thunk of PickerContent._identifiedView.getter(v59, v86);
  v88 = v82 + *(int *)(v85 + 64);
  v89 = v110;
  sub_10000531C(v81, v110, &qword_1001192F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v89, 1, v84) == 1)
  {
    v90 = sub_100005360(&qword_100119338);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v88, 1, 1, v90);
  }
  else
  {
    v91 = v115;
    ((void (*)(char *, uint64_t, uint64_t))v108)(v115, v89, v84);
    dispatch thunk of PickerContent._identifiedView.getter(v84, v86);
    v92 = v91;
    v83 = v114;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v92, v84);
    v93 = sub_100005360(&qword_100119338);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v88, 0, 1, v93);
  }
  v94 = v116;
  sub_100004F48(v81, &qword_1001192F8);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v87, v84);
  return v94(v83, v46);
}

uint64_t sub_1000C3818@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C38BC(0x654D5F6369736142, 0xEA0000000000756ELL, a1);
}

uint64_t sub_1000C3840@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C38BC(0x6669746E65696353, 0xEF756E654D5F6369, a1);
}

uint64_t sub_1000C3870@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C38BC(0x6E654D5F6874614DLL, 0xE900000000000075, a1);
}

uint64_t sub_1000C3898@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C38BC(0x747265766E6F43, 0xE700000000000000, a1);
}

uint64_t sub_1000C38BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  result = Text.init(_:tableName:bundle:comment:)(v4);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7 & 1;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

uint64_t sub_1000C3928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50;
  uint64_t v51;

  v48 = a2;
  v3 = type metadata accessor for KeyEquivalent(0);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CalculatorAppScene(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  v11 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100119280);
  v43 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100005360(&qword_100119290);
  v16 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47, v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100005360(&qword_100119270);
  __chkstk_darwin(v44, v20);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014084(a1, (uint64_t)v11, type metadata accessor for CalculatorAppScene);
  v23 = *(unsigned __int8 *)(v8 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_10010E158, v24 + v9, v23 | 7);
  sub_1000C4C48((uint64_t)v11, v25 + v24);
  v50 = a1;
  v26 = sub_100005360(&qword_100115C98);
  v27 = sub_1000522F0();
  Button.init(action:label:)(sub_1000C4EE4, v25, sub_1000C4EF0, v49, v26, v27);
  v28 = KeyEquivalent.init(extendedGraphemeClusterLiteral:)(83, 0xE100000000000000);
  v29 = static EventModifiers.command.getter(v28);
  v30 = static EventModifiers.control.getter();
  v31 = EventModifiers.init(rawValue:)(0);
  v32 = EventModifiers.init(rawValue:)(v31);
  if (EventModifiers.init(rawValue:)(v32 & v29) != v29)
    v31 = EventModifiers.init(rawValue:)(v31 | v29);
  v33 = EventModifiers.init(rawValue:)(v31);
  if (EventModifiers.init(rawValue:)(v33 & v30) != v30)
    v31 = EventModifiers.init(rawValue:)(v31 | v30);
  v34 = sub_100008078(&qword_100119288, &qword_100119280, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.keyboardShortcut(_:modifiers:)(v6, v31, v12, v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v46);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v12);
  sub_100005360(&qword_100119138);
  LazyState.wrappedValue.getter(&v51);
  v35 = v51;
  sub_1000226AC();
  v37 = v36;
  swift_release(v35);
  KeyPath = swift_getKeyPath(&unk_1000D4C88);
  v39 = swift_allocObject(&unk_10010E180, 17, 7);
  *(_BYTE *)(v39 + 16) = (v37 & 1) == 0;
  v40 = v47;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v19, v47);
  v41 = (uint64_t *)&v22[*(int *)(v44 + 36)];
  *v41 = KeyPath;
  v41[1] = (uint64_t)sub_1000C4F58;
  v41[2] = v39;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v40);
  return sub_100007CD8((uint64_t)v22, v48, &qword_100119270);
}

double sub_1000C3C98(uint64_t a1)
{
  uint64_t v1;
  double result;
  _QWORD v3[4];

  v3[2] = a1;
  v1 = static Animation.default.getter(a1);
  withAnimation<A>(_:_:)(v1, sub_1000C4F78, v3, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

double sub_1000C3CF4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  type metadata accessor for CalculatorAppScene(0);
  sub_100005360(&qword_100119148);
  LazyState.wrappedValue.getter(&v11);
  v0 = v11;
  KeyPath = swift_getKeyPath(&unk_1000D4CB8);
  v11 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = v3 ^ 1;
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v5 = qword_10011FF08;
  sub_1000BF854();
  if ((v3 & 1) != 0
    || (v6 = swift_getKeyPath(&unk_1000D4CE0),
        v11 = v5,
        v7 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00), ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v6, v7), swift_release(v6), *(_BYTE *)(v5 + 64) != 1))
  {
    sub_100068F30(v4);
    v9 = v0;
  }
  else
  {
    v8 = swift_allocObject(&unk_10010E1A8, 25, 7);
    *(_QWORD *)(v8 + 16) = v0;
    *(_BYTE *)(v8 + 24) = v4;
    swift_retain(v0);
    sub_1000C00F4((uint64_t)sub_100035210, v8);
    swift_release(v0);
    v9 = v8;
  }
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

double sub_1000C3EAC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _OWORD v22[2];
  char v23;

  type metadata accessor for CalculatorAppScene(0);
  sub_100005360(&qword_100119148);
  LazyState.wrappedValue.getter(v22);
  v2 = *(_QWORD *)&v22[0];
  KeyPath = swift_getKeyPath(&unk_1000D4CB8);
  *(_QWORD *)&v22[0] = v2;
  v4 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v22, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(unsigned __int8 *)(v2 + 16);
  swift_release(v2);
  if (v5 == 1)
  {
    v6 = LocalizedStringKey.init(stringLiteral:)(0x7369482065646948, 0xEC00000079726F74);
    v17 = Text.init(_:tableName:bundle:comment:)(v6);
    v18 = v7;
    v19 = v8 & 1;
    v20 = v9;
    v21 = 0;
  }
  else
  {
    v10 = LocalizedStringKey.init(stringLiteral:)(0x73694820776F6853, 0xEC00000079726F74);
    v17 = Text.init(_:tableName:bundle:comment:)(v10);
    v18 = v12;
    v19 = v11 & 1;
    v20 = v13;
    v21 = 1;
  }
  _ConditionalContent<>.init(storage:)(v22, &v17, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  result = *(double *)v22;
  v15 = v22[1];
  v16 = v23;
  *(_OWORD *)a1 = v22[0];
  *(_OWORD *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 32) = v16;
  return result;
}

uint64_t sub_1000C4068()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1000C4088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4110(a1, a2, a3, a4, (uint64_t (*)(char *))&EnvironmentValues.horizontalSizeClass.setter);
}

uint64_t sub_1000C4094@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for CalculatorToolbarViewModel(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_WORD *)(v3 + 16) = 768;
  result = ObservationRegistrar.init()(v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000C40E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C4108(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000C0B78(*(void **)(v1 + 16), a1);
}

uint64_t sub_1000C4110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = sub_100005360(&qword_1001141C8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000531C(a1, (uint64_t)v10, &qword_1001141C8);
  return a5(v10);
}

void sub_1000C419C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for CalculatorLayout(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  sub_1000081C4();
  *a1 = v3;
}

_BYTE *sub_1000C41D8(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t *sub_1000C41EC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  id v35;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100005360(&qword_100119130);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(sub_100005360(&qword_100119138) + 28);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + v8) = v9;
    v10 = a3[5];
    v11 = a3[6];
    v12 = (uint64_t *)((char *)v4 + v10);
    v13 = (uint64_t *)((char *)a2 + v10);
    v14 = *v13;
    v15 = v13[1];
    *v12 = *v13;
    v12[1] = v15;
    v16 = (uint64_t *)((char *)v4 + v11);
    v17 = (uint64_t *)((char *)a2 + v11);
    v18 = *v17;
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    v20 = a3[7];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    swift_retain(v9);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v18);
    swift_retain(v19);
    v23 = sub_100005360(&qword_100119140);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = *(int *)(sub_100005360(&qword_100119148) + 28);
    v25 = *(_QWORD *)&v22[v24];
    *(_QWORD *)&v21[v24] = v25;
    v26 = a3[8];
    v27 = a3[9];
    v28 = (char *)v4 + v26;
    v29 = (char *)a2 + v26;
    *v28 = *v29;
    v30 = *((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 1) = v30;
    v31 = (uint64_t *)((char *)v4 + v27);
    v32 = (char *)a2 + v27;
    v34 = *(void **)v32;
    v33 = *((_QWORD *)v32 + 1);
    *v31 = *(_QWORD *)v32;
    v31[1] = v33;
    swift_retain(v25);
    swift_retain(v30);
    v35 = v34;
  }
  swift_retain(v33);
  return v4;
}

double sub_1000C436C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = sub_100005360(&qword_100119130);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = sub_100005360(&qword_100119138);
  swift_release(*(_QWORD *)(a1 + *(int *)(v5 + 28)));
  v6 = (_QWORD *)(a1 + a2[5]);
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (_QWORD *)(a1 + a2[6]);
  swift_release(*v7);
  swift_release(v7[1]);
  v8 = a1 + a2[7];
  v9 = sub_100005360(&qword_100119140);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = sub_100005360(&qword_100119148);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)));
  swift_release(*(_QWORD *)(a1 + a2[8] + 8));
  v11 = a1 + a2[9];

  *(_QWORD *)&result = swift_release(*(_QWORD *)(v11 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000C4460(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;

  v6 = sub_100005360(&qword_100119130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(sub_100005360(&qword_100119138) + 28);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = a3[5];
  v10 = a3[6];
  v11 = (uint64_t *)(a1 + v9);
  v12 = (uint64_t *)(a2 + v9);
  v13 = *v12;
  v14 = v12[1];
  *v11 = *v12;
  v11[1] = v14;
  v15 = (uint64_t *)(a1 + v10);
  v16 = (uint64_t *)(a2 + v10);
  v17 = *v16;
  v18 = v16[1];
  *v15 = *v16;
  v15[1] = v18;
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  swift_retain(v8);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v17);
  swift_retain(v18);
  v22 = sub_100005360(&qword_100119140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = *(int *)(sub_100005360(&qword_100119148) + 28);
  v24 = *(_QWORD *)(v21 + v23);
  *(_QWORD *)(v20 + v23) = v24;
  v25 = a3[8];
  v26 = a3[9];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  v29 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v27 + 8) = v29;
  v30 = (_QWORD *)(a1 + v26);
  v31 = a2 + v26;
  v33 = *(void **)v31;
  v32 = *(_QWORD *)(v31 + 8);
  *v30 = *(_QWORD *)v31;
  v30[1] = v32;
  swift_retain(v24);
  swift_retain(v29);
  v34 = v33;
  swift_retain(v32);
  return a1;
}

uint64_t sub_1000C45B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;

  v6 = sub_100005360(&qword_100119130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(sub_100005360(&qword_100119138) + 28);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a2 + v10);
  v14 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = *(_QWORD *)(v11 + 8);
  v16 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v11 + 8) = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17);
  v21 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = *(_QWORD *)(v18 + 8);
  v23 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v18 + 8) = v23;
  swift_retain(v23);
  swift_release(v22);
  v24 = a3[7];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = sub_100005360(&qword_100119140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = *(int *)(sub_100005360(&qword_100119148) + 28);
  v29 = *(_QWORD *)(v25 + v28);
  v30 = *(_QWORD *)(v26 + v28);
  *(_QWORD *)(v25 + v28) = v30;
  swift_retain(v30);
  swift_release(v29);
  v31 = a3[8];
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  v34 = *(_QWORD *)(v32 + 8);
  v35 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v32 + 8) = v35;
  swift_retain(v35);
  swift_release(v34);
  v36 = a3[9];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = *(void **)(a2 + v36);
  v40 = *(void **)v37;
  *(_QWORD *)v37 = v39;
  v41 = v39;

  v42 = *(_QWORD *)(v37 + 8);
  v43 = *(_QWORD *)(v38 + 8);
  *(_QWORD *)(v37 + 8) = v43;
  swift_retain(v43);
  swift_release(v42);
  return a1;
}

uint64_t sub_1000C4770(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_100005360(&qword_100119130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = sub_100005360(&qword_100119138);
  *(_QWORD *)(a1 + *(int *)(v7 + 28)) = *(_QWORD *)(a2 + *(int *)(v7 + 28));
  v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_100005360(&qword_100119140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = sub_100005360(&qword_100119148);
  *(_QWORD *)(v10 + *(int *)(v13 + 28)) = *(_QWORD *)(v11 + *(int *)(v13 + 28));
  v14 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  return a1;
}

uint64_t sub_1000C4854(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;

  v6 = sub_100005360(&qword_100119130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(sub_100005360(&qword_100119138) + 28);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_release(v12);
  v13 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_release(v13);
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_release(v18);
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_100005360(&qword_100119140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = *(int *)(sub_100005360(&qword_100119148) + 28);
  v24 = *(_QWORD *)(v20 + v23);
  *(_QWORD *)(v20 + v23) = *(_QWORD *)(v21 + v23);
  swift_release(v24);
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v28 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_release(v28);
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = (_QWORD *)(a2 + v29);
  v32 = *(void **)(a1 + v29);
  *(_QWORD *)(a1 + v29) = *v31;

  v33 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v30 + 8) = v31[1];
  swift_release(v33);
  return a1;
}

uint64_t sub_1000C49C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C49D4);
}

uint64_t sub_1000C49D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100005360(&qword_100119138);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100005360(&qword_100119148);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000C4A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C4A90);
}

uint64_t sub_1000C4A90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100005360(&qword_100119138);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = sub_100005360(&qword_100119148);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000C4B3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_1000ADB84(319, &qword_1001191B8, type metadata accessor for CalculatorViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LazyState);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1000D4C18;
    v6[2] = &unk_1000D4C18;
    sub_1000ADB84(319, (unint64_t *)&unk_1001191C0, type metadata accessor for CalculatorToolbarViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LazyState);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1000D4C30;
      v6[5] = &unk_1000D4C18;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000C4C08()
{
  return sub_100005178(&qword_100119128, type metadata accessor for CalculatorAppScene, (uint64_t)&unk_1000D4C48);
}

uint64_t sub_1000C4C34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F73D8, 1);
}

uint64_t sub_1000C4C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalculatorAppScene(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C4C8C@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CalculatorAppScene(0);
  return sub_1000C0BD0(a1);
}

uint64_t sub_1000C4CCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C2130(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000C4CD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000C2418(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000C4CDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C3928(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000C4CE4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100119278;
  if (!qword_100119278)
  {
    v1 = sub_100005608(&qword_100119270);
    v2[0] = sub_100005608(&qword_100119280);
    v2[1] = sub_100008078(&qword_100119288, &qword_100119280, (uint64_t)&protocol conformance descriptor for Button<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:modifiers:)>>, 1);
    sub_100008078(&qword_100116D80, &qword_100116D88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100119278);
  }
  return result;
}

uint64_t sub_1000C4DB4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for CalculatorAppScene(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = sub_100005360(&qword_100119130);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = sub_100005360(&qword_100119138);
  swift_release(*(_QWORD *)(v7 + *(int *)(v9 + 28)));
  v10 = (_QWORD *)(v7 + v1[5]);
  swift_release(*v10);
  swift_release(v10[1]);
  v11 = (_QWORD *)(v7 + v1[6]);
  swift_release(*v11);
  swift_release(v11[1]);
  v12 = v7 + v1[7];
  v13 = sub_100005360(&qword_100119140);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = sub_100005360(&qword_100119148);
  swift_release(*(_QWORD *)(v12 + *(int *)(v14 + 28)));
  swift_release(*(_QWORD *)(v7 + v1[8] + 8));
  v15 = v7 + v1[9];

  swift_release(*(_QWORD *)(v15 + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000C4EE4()
{
  return sub_1000C51D8((uint64_t (*)(uint64_t))sub_1000C3C98);
}

double sub_1000C4EF0@<D0>(uint64_t a1@<X8>)
{
  return sub_1000C3EAC(a1);
}

uint64_t sub_1000C4EF8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000C4F24(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_1000C4F48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_1000C4F58(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

double sub_1000C4F78()
{
  return sub_1000C3CF4();
}

uint64_t sub_1000C4F98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1000C4FC0(char *a1)
{
  sub_10001F808(*a1);
}

uint64_t sub_1000C4FE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C2F18(*(char **)(v1 + 16), a1);
}

unint64_t sub_1000C4FEC()
{
  unint64_t result;

  result = qword_1001192D0;
  if (!qword_1001192D0)
  {
    result = swift_getWitnessTable(&unk_1000CF7B4, &type metadata for CalculatorAppMode);
    atomic_store(result, (unint64_t *)&qword_1001192D0);
  }
  return result;
}

void sub_1000C5034(char *a1)
{
  sub_10001E770(*a1);
}

uint64_t sub_1000C5060()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000C5090()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1000C50B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4110(a1, a2, a3, a4, (uint64_t (*)(char *))&EnvironmentValues.horizontalSizeClass.setter);
}

uint64_t sub_1000C50CC()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_1000C50EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4110(a1, a2, a3, a4, (uint64_t (*)(char *))&EnvironmentValues.verticalSizeClass.setter);
}

uint64_t sub_1000C5108()
{
  return EnvironmentValues.layoutDirection.getter();
}

unint64_t sub_1000C512C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119378;
  if (!qword_100119378)
  {
    v1 = sub_100005608(&qword_100119348);
    sub_100005178(&qword_100119380, type metadata accessor for CalculatorAppContentView, (uint64_t)&unk_1000D3E38);
    sub_100008078((unint64_t *)&qword_100119388, &qword_100119390, (uint64_t)&protocol conformance descriptor for _PreferenceWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100119378);
  }
  return result;
}

uint64_t sub_1000C51CC()
{
  return sub_1000C51D8((uint64_t (*)(uint64_t))sub_1000C154C);
}

uint64_t sub_1000C51D8(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorAppScene(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1000C5214()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C523C()
{
  return sub_1000C51D8((uint64_t (*)(uint64_t))sub_1000C1BB0);
}

void sub_1000C5250()
{
  sub_1000C170C();
}

uint64_t sub_1000C5268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_100005608(&qword_100119208);
  v1 = sub_100005608(&qword_100119230);
  v5 = sub_100005608(&qword_100119200);
  v6 = sub_100008078(&qword_100119228, &qword_100119200, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of Scene.allowsSecureDrawing(_:)>>, 1);
  v3 = sub_100008078(&qword_100119238, &qword_100119230, (uint64_t)&protocol conformance descriptor for TupleCommandContent<A>);
  v5 = v0;
  v6 = v1;
  v7 = OpaqueTypeConformance2;
  v8 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of Scene.commands<A>(content:)>>, 1);
}

uint64_t sub_1000C5344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000C534C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "\t";
      v5[3] = "\t";
      swift_initStructMetadata(a1, 0, 4, v5, a1 + 48);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1000C53E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8) + 23) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v22 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v22 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v15 = ((unint64_t)v4 + v9) & v14;
    v16 = ((unint64_t)a2 + v9) & v14;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v15, v16, v5);
    v17 = (v15 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v18;
    v20 = (v15 + v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v16 + v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    LOBYTE(v21) = *(_BYTE *)(v21 + 8);
    *(_QWORD *)v20 = v22;
    *(_BYTE *)(v20 + 8) = v21;
    swift_retain(v19);
  }
  swift_retain(v22);
  return v4;
}

uint64_t sub_1000C5528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)((v8 + 7) & 0xFFFFFFFFFFFFF8));
  return swift_release(*(_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFF8));
}

uint64_t sub_1000C55AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v17;
  v19 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  LOBYTE(v20) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v20;
  swift_retain(v18);
  swift_retain(v21);
  return a1;
}

uint64_t sub_1000C5678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = *(_BYTE *)(v17 + 8);
  v19 = *(_QWORD *)v16;
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v17;
  swift_retain(v18);
  swift_release(v19);
  v20 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  LOBYTE(v21) = *(_BYTE *)(v21 + 8);
  v23 = *(_QWORD *)v20;
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v21;
  swift_retain(v22);
  swift_release(v23);
  return a1;
}

uint64_t sub_1000C5758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = v18;
  v19 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = v21;
  return a1;
}

uint64_t sub_1000C5818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = *(_BYTE *)(v17 + 8);
  v19 = *(_QWORD *)v16;
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v17;
  swift_release(v19);
  v20 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  LOBYTE(v21) = *(_BYTE *)(v21 + 8);
  v23 = *(_QWORD *)v20;
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v21;
  swift_release(v23);
  return a1;
}

uint64_t sub_1000C58E8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0xFE)
    v9 = 254;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v19 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v19);
      }
      else
      {
        v20 = *(unsigned __int8 *)(((v12 + v19 + 7) & 0xFFFFFFFFFFFFF8) + 8);
        if (v20 > 1)
          return (v20 ^ 0xFF) + 1;
        else
          return 0;
      }
    }
  }
  else
  {
    v13 = ((v12 + (v11 & ~(_DWORD)v10) + 23) & 0xFFFFFFF8) + 9;
    v14 = (a2 - v9 + 255) >> (8 * v13);
    if (v13 < 4)
      v15 = v14 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000C5994 + 4 * byte_1000D4EE0[v17]))();
  }
}

void sub_1000C5A44(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v7 = 254;
  v8 = ((*(_QWORD *)(v6 + 64)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v7 >= a3)
  {
    v11 = 0;
    if (v7 >= a2)
      goto LABEL_19;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_19:
      __asm { BR              X0 }
  }
  if (v8 >= 4)
    v12 = ~v7 + a2;
  else
    v12 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_1000C5B88()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000C5C24);
}

void sub_1000C5B90(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000C5B98);
  JUMPOUT(0x1000C5C24);
}

void sub_1000C5BDC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000C5C24);
}

void sub_1000C5BE4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000C5C24);
}

uint64_t sub_1000C5BEC(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x1000C5C24);
  if (v6 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t))(v9 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v10)
      JUMPOUT(0x1000C5BF8);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

uint64_t type metadata accessor for CalculatorSplitView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for CalculatorSplitView);
}

uint64_t sub_1000C5C48(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_1000F74AC, 1);
}

_QWORD *sub_1000C5C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v12 = type metadata accessor for _ConditionalContent.Storage(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(a2 - 8) + 16))((char *)&v18 - v15, a1, a2, v14);
  swift_storeEnumTagMultiPayload(v16, v12, 0);
  return _ConditionalContent<>.init(storage:)(a6, v16, a2, a3, a4, a5);
}

_QWORD *sub_1000C5D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v12 = type metadata accessor for _ConditionalContent.Storage(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(a3 - 8) + 16))((char *)&v18 - v15, a1, a3, v14);
  swift_storeEnumTagMultiPayload(v16, v12, 1);
  return _ConditionalContent<>.init(storage:)(a6, v16, a2, a3, a4, a5);
}

uint64_t sub_1000C5E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, __n128);
  uint64_t v13;
  void *v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD, __n128);
  unint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  void (*v67)(char *, uint64_t, uint64_t, __n128);
  void (*v68)(char *, uint64_t, uint64_t, __n128);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  void *v84;
  uint64_t OpaqueTypeConformance2;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t, uint64_t, __n128);
  void (*v98)(char *, uint64_t, uint64_t, __n128);
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  void (*v104)(char *, uint64_t, uint64_t, __n128);
  char *v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t, __n128);
  void (*v108)(char *, uint64_t, uint64_t, __n128);
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t, uint64_t, __n128);
  uint64_t v114;
  __n128 v115;
  void (*v116)(char *, uint64_t, uint64_t, __n128);
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  void (*v135)(char *, uint64_t, uint64_t, __n128);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t, uint64_t, __n128);
  void (*v165)(char *, uint64_t, uint64_t, __n128);
  void (*v166)(char *, uint64_t, uint64_t, __n128);
  void (*v167)(char *, uint64_t, uint64_t, __n128);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  unint64_t v189;
  void (*v190)(_QWORD, _QWORD, _QWORD, __n128);
  unint64_t v191;

  v162 = a2;
  v155 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v154 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155, v3);
  v153 = (char *)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v5, v6);
  v139 = v7;
  v149 = (char *)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005360(&qword_100119420);
  v10 = __chkstk_darwin(v8, v9);
  v152 = (void (**)(char *, uint64_t, uint64_t, __n128))((char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(a1 + 16);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for SidebarViewStyle, v10);
  v14 = *(void **)(a1 + 24);
  v16 = type metadata accessor for ModifiedContent(255, v14, &type metadata for DetailsViewStyle, v15);
  v18 = type metadata accessor for ModifiedContent(255, v16, &type metadata for _AppearanceActionModifier, v17);
  v19 = *(void (**)(_QWORD, _QWORD, _QWORD, __n128))(a1 + 32);
  v20 = sub_1000C72F8();
  v190 = v19;
  v191 = v20;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v22 = *(_QWORD *)(a1 + 40);
  v23 = sub_1000C733C();
  v188 = v22;
  v189 = v23;
  v186 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v187 = &protocol witness table for _AppearanceActionModifier;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v151 = v13;
  v180 = v13;
  v181 = &type metadata for EmptyView;
  v150 = v18;
  v182 = v18;
  v183 = WitnessTable;
  v148 = WitnessTable;
  v184 = &protocol witness table for EmptyView;
  v185 = v24;
  v140 = v24;
  v25 = type metadata accessor for NavigationSplitView(0, &v180);
  v142 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25, v26);
  v141 = (char *)&v135 - v28;
  v29 = type metadata accessor for ModifiedContent(0, v25, &type metadata for ForceRegularHorizontalSizeClassIPhoneOnly, v27);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  v143 = (char *)&v135 - v32;
  v144 = v25;
  v33 = swift_getWitnessTable(&protocol conformance descriptor for NavigationSplitView<A, B, C>, v25);
  v34 = sub_1000C7380();
  v137 = v33;
  v178 = v33;
  v179 = v34;
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v29);
  v169 = v29;
  v180 = v29;
  v181 = (void *)v35;
  v161 = (void *)v35;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v180, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v138 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v37);
  v147 = (char *)&v135 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39, v40);
  v146 = (uint64_t)&v135 - v41;
  v167 = v12;
  v180 = (uint64_t)v12;
  v181 = v14;
  v166 = (void (*)(char *, uint64_t, uint64_t, __n128))v14;
  v164 = (void (*)(char *, uint64_t, uint64_t, __n128))v19;
  v182 = (uint64_t)v19;
  v183 = v22;
  v165 = (void (*)(char *, uint64_t, uint64_t, __n128))v22;
  v42 = type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)&v180);
  v136 = *(_QWORD *)(v42 - 8);
  v43 = __chkstk_darwin(v42, v42);
  v45 = (char *)&v135 - v44;
  v158 = v46;
  v47 = type metadata accessor for ModifiedContent(0, v46, &type metadata for _SafeAreaRegionsIgnoringLayout, v43);
  v48 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47, v47);
  v50 = (char *)&v135 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __chkstk_darwin(v51, v52);
  v55 = (char *)&v135 - v54;
  v168 = v56;
  v160 = OpaqueTypeMetadata2;
  v57 = v163;
  v159 = type metadata accessor for _ConditionalContent(0, v53);
  v157 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159, v58);
  v156 = (void (**)(char *, uint64_t, uint64_t, __n128))((char *)&v135 - v59);
  v60 = (uint64_t *)(v57 + *(int *)(a1 + 56));
  v61 = *v60;
  LOBYTE(v33) = *((_BYTE *)v60 + 8);
  swift_retain(*v60);
  v63 = sub_1000436BC(v62, v33);
  swift_release(v61);
  LOBYTE(v61) = sub_100009638();
  v66 = swift_release(v63);
  if ((v61 & 1) != 0)
  {
    __chkstk_darwin(v64, v65);
    v67 = v166;
    *(&v135 - 6) = v167;
    *(&v135 - 5) = v67;
    v68 = v165;
    *(&v135 - 4) = v164;
    *(&v135 - 3) = v68;
    __chkstk_darwin(v69, v70);
    *(&v135 - 6) = (void (*)(char *, uint64_t, uint64_t, __n128))v71;
    *(&v135 - 5) = (void (*)(char *, uint64_t, uint64_t, __n128))v72;
    *(&v135 - 4) = (void (*)(char *, uint64_t, uint64_t, __n128))v73;
    *(&v135 - 3) = (void (*)(char *, uint64_t, uint64_t, __n128))v74;
    v75 = CalculatorCustomSplitView.init(sidebarWidthRatio:sidebarPresentationStyle:sidebarView:mainView:)(1, (uint64_t (*)(_QWORD *))sub_1000C8654, (uint64_t (*)(uint64_t))sub_1000C8660, v71, v72, v73, (uint64_t)v45, 0.85, v74);
    v76 = static SafeAreaRegions.keyboard.getter(v75);
    v77 = static Edge.Set.all.getter(v76);
    v78 = v48;
    v79 = v158;
    v80 = swift_getWitnessTable(&protocol conformance descriptor for CalculatorCustomSplitView<A, B>, v158);
    View.ignoresSafeArea(_:edges:)(v76, v77, v79, v80);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v45, v79);
    v170 = v80;
    v171 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
    v81 = v168;
    v82 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v168);
    sub_100046714((uint64_t)v50, v81, (uint64_t)v55);
    v83 = *(void (**)(char *, uint64_t))(v78 + 8);
    v83(v50, v81);
    sub_10003E144((uint64_t)v55, v81, (uint64_t)v50);
    v84 = v161;
    v180 = v169;
    v181 = v161;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v180, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v86 = v156;
    sub_1000C5C7C((uint64_t)v50, v81, v160, v82, OpaqueTypeConformance2, v156);
    v83(v50, v81);
    v87 = v55;
    v88 = v81;
  }
  else
  {
    v136 = v30;
    v89 = v145;
    v135 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v145 + 16);
    v90 = v149;
    v135(v149, v57, a1, v66);
    v91 = type metadata accessor for MainActor(0);
    v92 = static MainActor.shared.getter(v91);
    v93 = *(unsigned __int8 *)(v89 + 80);
    v94 = (v93 + 64) & ~v93;
    v95 = v94 + v139;
    v139 = v93 | 7;
    v96 = (char *)swift_allocObject(&unk_10010E360, v95, v93 | 7);
    *((_QWORD *)v96 + 2) = v92;
    *((_QWORD *)v96 + 3) = &protocol witness table for MainActor;
    v97 = v166;
    *((_QWORD *)v96 + 4) = v167;
    *((_QWORD *)v96 + 5) = v97;
    v98 = v165;
    *((_QWORD *)v96 + 6) = v164;
    *((_QWORD *)v96 + 7) = v98;
    v99 = v57;
    v100 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
    v100(&v96[v94], v90, a1);
    v101 = ((uint64_t (*)(char *, uint64_t, uint64_t))v135)(v90, v99, a1);
    v102 = static MainActor.shared.getter(v101);
    v103 = (_QWORD *)swift_allocObject(&unk_10010E388, v95, v139);
    v103[2] = v102;
    v104 = v167;
    v103[3] = &protocol witness table for MainActor;
    v103[4] = v104;
    v103[5] = v97;
    v105 = (char *)v103 + v94;
    v106 = v169;
    v107 = v164;
    v108 = v165;
    v103[6] = v164;
    v103[7] = v108;
    v100(v105, v90, a1);
    v109 = type metadata accessor for NavigationSplitViewVisibility(0);
    v110 = v152;
    v111 = Binding.init(get:set:)(v152, sub_1000C8464, v96, sub_1000C85C0, v103, v109);
    __chkstk_darwin(v111, v112);
    v113 = v166;
    *(&v135 - 6) = v104;
    *(&v135 - 5) = v113;
    *(&v135 - 4) = v107;
    *(&v135 - 3) = v108;
    v115 = __chkstk_darwin(v163, v114);
    *(&v135 - 6) = v104;
    *(&v135 - 5) = v116;
    *(&v135 - 4) = v107;
    *(&v135 - 3) = v108;
    v117 = v168;
    v134 = v140;
    v118 = v141;
    NavigationSplitView.init<>(columnVisibility:sidebar:detail:)(v110, sub_1000C863C, v115);
    v119 = v143;
    v120 = v144;
    v121 = sub_1000C724C(v144, v137, (uint64_t)&type metadata for ForceRegularHorizontalSizeClassIPhoneOnly);
    (*(void (**)(char *, uint64_t, double))(v142 + 8))(v118, v120, v121);
    v122 = v154;
    v123 = v153;
    v124 = v155;
    (*(void (**)(char *, _QWORD, uint64_t))(v154 + 104))(v153, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v155);
    v125 = (uint64_t)v147;
    v84 = v161;
    View.navigationBarTitleDisplayMode(_:)(v123, v106, v161);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v124);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v119, v106);
    v180 = v106;
    v181 = v84;
    v126 = swift_getOpaqueTypeConformance2(&v180, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v127 = v146;
    v128 = v160;
    sub_100046714(v125, v160, v146);
    v83 = *(void (**)(char *, uint64_t))(v138 + 8);
    v83((char *)v125, v128);
    sub_10003E144(v127, v128, v125);
    v79 = v158;
    v176 = swift_getWitnessTable(&protocol conformance descriptor for CalculatorCustomSplitView<A, B>, v158);
    v177 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
    v129 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v117);
    v86 = v156;
    sub_1000C5D40(v125, v117, v128, v129, v126, v156);
    v83((char *)v125, v128);
    v87 = (char *)v127;
    v88 = v128;
  }
  v83(v87, v88);
  v174 = swift_getWitnessTable(&protocol conformance descriptor for CalculatorCustomSplitView<A, B>, v79);
  v175 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v130 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v168);
  v180 = v169;
  v181 = v84;
  v131 = swift_getOpaqueTypeConformance2(&v180, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v172 = v130;
  v173 = v131;
  v132 = v159;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v159);
  sub_10003E144((uint64_t)v86, v132, v162);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v157 + 8))(v86, v132);
}

uint64_t sub_1000C6964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100046714(v8, v9, (uint64_t)v7);
  sub_10003E144((uint64_t)v7, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t sub_1000C69F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = v12;
  v16[3] = v13;
  v14 = type metadata accessor for CalculatorSplitView(0, (uint64_t)v16);
  sub_100046714(a1 + *(int *)(v14 + 52), a3, (uint64_t)v9);
  sub_10003E144((uint64_t)v9, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a3);
}

uint64_t sub_1000C6AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  __n128 v14;
  _QWORD v16[4];

  v16[0] = a4;
  v16[1] = a5;
  v16[2] = a6;
  v16[3] = a7;
  v7 = (uint64_t *)(a3 + *(int *)(type metadata accessor for CalculatorSplitView(0, (uint64_t)v16) + 60));
  v8 = *v7;
  v9 = *((_BYTE *)v7 + 8);
  swift_retain(*v7);
  v11 = sub_1000438AC(v10, v9);
  swift_release(v8);
  KeyPath = swift_getKeyPath(&unk_1000D4FE0);
  v16[0] = v11;
  v13 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v13);
  swift_release(KeyPath);
  LODWORD(v8) = *(unsigned __int8 *)(v11 + 16);
  v14 = swift_release(v11);
  if ((_DWORD)v8 == 1)
    return static NavigationSplitViewVisibility.all.getter(v14);
  else
    return static NavigationSplitViewVisibility.detailOnly.getter(v14);
}

double sub_1000C6B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  char v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  double result;
  _QWORD v30[4];

  v14 = type metadata accessor for NavigationSplitViewVisibility(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[0] = a5;
  v30[1] = a6;
  v30[2] = a7;
  v30[3] = a8;
  v19 = (uint64_t *)(a4 + *(int *)(type metadata accessor for CalculatorSplitView(0, (uint64_t)v30) + 60));
  v20 = *v19;
  LOBYTE(a8) = *((_BYTE *)v19 + 8);
  swift_retain(*v19);
  v22 = sub_1000438AC(v21, a8);
  v23 = swift_release(v20);
  static NavigationSplitViewVisibility.all.getter(v23);
  v24 = static NavigationSplitViewVisibility.== infix(_:_:)(a1, v18);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v25 = qword_10011FF08;
  sub_1000BF854();
  if ((v24 & 1) != 0
    && (KeyPath = swift_getKeyPath(&unk_1000D4FB8),
        v30[0] = v25,
        v27 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00), ObservationRegistrar.access<A, B>(_:keyPath:)(v30, KeyPath, v27), swift_release(KeyPath), *(_BYTE *)(v25 + 64) == 1))
  {
    v28 = swift_allocObject(&unk_10010E3D8, 25, 7);
    *(_QWORD *)(v28 + 16) = v22;
    *(_BYTE *)(v28 + 24) = 1;
    swift_retain(v22);
    sub_1000C00F4((uint64_t)sub_100035210, v28);
    swift_release(v22);
    v22 = v28;
  }
  else
  {
    sub_100068F30(v24 & 1);
  }
  *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  return result;
}

uint64_t sub_1000C6D90@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];

  v7 = type metadata accessor for ModifiedContent(0, a1, &type metadata for SidebarViewStyle, a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v19 - v14;
  sub_1000C724C(a1, a2, (uint64_t)&type metadata for SidebarViewStyle);
  v16 = sub_1000C72F8();
  v19[0] = a2;
  v19[1] = v16;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  sub_100046714((uint64_t)v11, v7, (uint64_t)v15);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  sub_10003E144((uint64_t)v15, v7, a3);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v7);
}

uint64_t sub_1000C6EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t WitnessTable;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD v54[4];

  v43 = a5;
  v45 = a2;
  v46 = a4;
  v49 = a6;
  v54[0] = a2;
  v54[1] = a3;
  v54[2] = a4;
  v54[3] = a5;
  v8 = type metadata accessor for CalculatorSplitView(0, (uint64_t)v54);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v14 = (char *)&v40 - v13;
  v41 = a3;
  v15 = type metadata accessor for ModifiedContent(0, a3, &type metadata for DetailsViewStyle, v12);
  v47 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v40 - v18;
  v20 = type metadata accessor for ModifiedContent(0, v15, &type metadata for _AppearanceActionModifier, v17);
  v48 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  v42 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v44 = (uint64_t)&v40 - v25;
  v26 = a3;
  v27 = v43;
  View.modifier<A>(_:)(v28, v26, &type metadata for DetailsViewStyle, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a1, v8);
  v29 = *(unsigned __int8 *)(v9 + 80);
  v30 = (v29 + 48) & ~v29;
  v31 = (char *)swift_allocObject(&unk_10010E3B0, v30 + v10, v29 | 7);
  v32 = v41;
  *((_QWORD *)v31 + 2) = v45;
  *((_QWORD *)v31 + 3) = v32;
  *((_QWORD *)v31 + 4) = v46;
  *((_QWORD *)v31 + 5) = v27;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v31[v30], v14, v8);
  v33 = sub_1000C733C();
  v52 = v27;
  v53 = v33;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  v35 = (uint64_t)v42;
  View.onAppear(perform:)(sub_1000C8740, v31, v15, WitnessTable);
  v36 = swift_release(v31);
  (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v19, v15, v36);
  v50 = WitnessTable;
  v51 = &protocol witness table for _AppearanceActionModifier;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  v37 = v44;
  sub_100046714(v35, v20, v44);
  v38 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v38(v35, v20);
  sub_10003E144(v37, v20, v49);
  return ((uint64_t (*)(uint64_t, uint64_t))v38)(v37, v20);
}

double sub_1000C715C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  double result;
  _QWORD v13[3];
  char v14;
  _QWORD v15[4];

  v15[0] = a2;
  v15[1] = a3;
  v15[2] = a4;
  v15[3] = a5;
  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CalculatorSplitView(0, (uint64_t)v15) + 60));
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 8);
  swift_retain(*v5);
  v9 = sub_1000438AC(v8, v7);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000D4F90);
  v13[2] = v9;
  v14 = 3;
  v15[0] = v9;
  v11 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v15, KeyPath, sub_1000438D0, v13, (char *)&type metadata for () + 8, v11);
  swift_release(v9);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1000C724C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  double result;
  uint64_t v11;
  char v12;

  v6 = type metadata accessor for CalculatorLayout(0);
  v7 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v8 = Environment.init<A>(_:)(v6, v6, v7);
  v11 = v8;
  v12 = v9 & 1;
  View.modifier<A>(_:)(&v11, a1, a3, a2);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

unint64_t sub_1000C72F8()
{
  unint64_t result;

  result = qword_100119428;
  if (!qword_100119428)
  {
    result = swift_getWitnessTable(&unk_1000D5114, &type metadata for SidebarViewStyle);
    atomic_store(result, (unint64_t *)&qword_100119428);
  }
  return result;
}

unint64_t sub_1000C733C()
{
  unint64_t result;

  result = qword_100119430;
  if (!qword_100119430)
  {
    result = swift_getWitnessTable(&unk_1000D50C4, &type metadata for DetailsViewStyle);
    atomic_store(result, (unint64_t *)&qword_100119430);
  }
  return result;
}

unint64_t sub_1000C7380()
{
  unint64_t result;

  result = qword_100119438;
  if (!qword_100119438)
  {
    result = swift_getWitnessTable(&unk_1000D5074, &type metadata for ForceRegularHorizontalSizeClassIPhoneOnly);
    atomic_store(result, (unint64_t *)&qword_100119438);
  }
  return result;
}

uint64_t sub_1000C73C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v32[3];

  v7 = a3 & 1;
  v8 = sub_100005360(&qword_1001141C8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v32[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100119508);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v32[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000D5190);
  swift_retain(a2);
  v18 = sub_1000436BC(v17, v7);
  swift_release(a2);
  v19 = sub_100008F40();
  swift_release(v18);
  if ((v19 & 1) != 0)
  {
    v20 = enum case for UserInterfaceSizeClass.regular(_:);
    v21 = type metadata accessor for UserInterfaceSizeClass(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v11, v20, v21);
  }
  else
  {
    swift_retain(a2);
    v23 = sub_1000436BC(v22, v7);
    swift_release(a2);
    v24 = swift_getKeyPath(&unk_1000D51C0);
    v32[0] = v23;
    v25 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v32, v24, v25);
    swift_release(v24);
    v26 = v23 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
    swift_beginAccess(v23 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v32, 0, 0);
    v21 = type metadata accessor for UserInterfaceSizeClass(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v11, v26, v21);
    swift_release(v23);
  }
  type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 0, 1, v21);
  v27 = (uint64_t *)&v15[*(int *)(v12 + 36)];
  v28 = sub_100005360(&qword_100119510);
  sub_10000531C((uint64_t)v11, (uint64_t)v27 + *(int *)(v28 + 28), &qword_1001141C8);
  *v27 = KeyPath;
  v29 = sub_100005360(&qword_100119518);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v15, a1, v29);
  sub_100004F48((uint64_t)v11, &qword_1001141C8);
  return sub_1000C8D00((uint64_t)v15, a4);
}

uint64_t sub_1000C764C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000C73C4(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t sub_1000C7658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t KeyPath;
  uint64_t v94;
  double v95;
  uint64_t v96;
  double v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t OpaqueTypeConformance2;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  void *v175;

  v147 = a1;
  v171 = a4;
  v151 = a3 & 1;
  v170 = type metadata accessor for ContainerBackgroundPlacement(0);
  v168 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170, v5);
  v169 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v146, v7);
  v9 = (_OWORD *)((char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v144 = sub_100005360(&qword_100119440);
  __chkstk_darwin(v144, v10);
  v12 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100005360(&qword_100119448);
  __chkstk_darwin(v145, v13);
  v15 = (char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100005360(&qword_100119450);
  __chkstk_darwin(v148, v16);
  v18 = (char *)&v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100005360(&qword_100119458);
  __chkstk_darwin(v149, v19);
  v150 = (uint64_t)&v143 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100005360(&qword_100119460);
  __chkstk_darwin(v153, v21);
  v152 = (uint64_t)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100005360(&qword_100119468);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156, v23);
  v154 = (char *)&v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100005360(&qword_100119470);
  v160 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164, v25);
  v158 = (char *)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100005360(&qword_100119478);
  v166 = *(_QWORD *)(v27 - 8);
  v167 = v27;
  __chkstk_darwin(v27, v28);
  v161 = (char *)&v143 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100005360(&qword_100119480);
  __chkstk_darwin(v165, v30);
  v163 = (char *)&v143 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100005360(&qword_100119488);
  v159 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162, v32);
  v157 = (char *)&v143 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113DE0 != -1)
    swift_once(&qword_100113DE0, sub_1000534C8);
  v34 = qword_10011FD88;
  swift_retain(qword_10011FD88);
  v36 = static Color.black.getter(v35);
  v37 = static Edge.Set.all.getter(v36);
  v38 = v37;
  v39 = static Alignment.center.getter(v37);
  v41 = v40;
  v42 = sub_100005360(&qword_100119490);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v12, v147, v42);
  v43 = &v12[*(int *)(v144 + 36)];
  *(_QWORD *)v43 = v34;
  *((_QWORD *)v43 + 1) = v36;
  v43[16] = v38;
  *((_QWORD *)v43 + 3) = v39;
  *((_QWORD *)v43 + 4) = v41;
  v44 = (char *)v9 + *(int *)(v146 + 20);
  v45 = enum case for RoundedCornerStyle.continuous(_:);
  v46 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v44, v45, v46);
  __asm { FMOV            V0.2D, #20.0 }
  *v9 = _Q0;
  v52 = (uint64_t)&v15[*(int *)(v145 + 36)];
  sub_1000674BC((uint64_t)v9, v52);
  *(_WORD *)(v52 + *(int *)(sub_100005360(&qword_100116678) + 36)) = 256;
  sub_10000531C((uint64_t)v12, (uint64_t)v15, &qword_100119440);
  sub_100067500((uint64_t)v9);
  v53 = sub_100004F48((uint64_t)v12, &qword_100119440);
  v54 = static Edge.Set.top.getter(v53);
  v55 = v54;
  if (qword_100113A50 != -1)
    v54 = swift_once(&qword_100113A50, sub_10001B8E0);
  v56 = EdgeInsets.init(_all:)(v54, *(double *)&qword_10011F8D8);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  sub_10000531C((uint64_t)v15, (uint64_t)v18, &qword_100119448);
  v63 = &v18[*(int *)(v148 + 36)];
  *v63 = v55;
  *((double *)v63 + 1) = v56;
  *((_QWORD *)v63 + 2) = v58;
  *((_QWORD *)v63 + 3) = v60;
  *((_QWORD *)v63 + 4) = v62;
  v63[40] = 0;
  v64 = sub_100004F48((uint64_t)v15, &qword_100119448);
  v65 = static Edge.Set.bottom.getter(v64);
  swift_retain(a2);
  v66 = v151;
  v68 = sub_1000436BC(v67, v151);
  swift_release(a2);
  sub_1000A5788();
  v70 = v69;
  swift_release(v68);
  v72 = EdgeInsets.init(_all:)(v71, v70);
  v74 = v73;
  v76 = v75;
  v78 = v77;
  v79 = v150;
  sub_10000531C((uint64_t)v18, v150, &qword_100119450);
  v80 = v79 + *(int *)(v149 + 36);
  *(_BYTE *)v80 = v65;
  *(double *)(v80 + 8) = v72;
  *(_QWORD *)(v80 + 16) = v74;
  *(_QWORD *)(v80 + 24) = v76;
  *(_QWORD *)(v80 + 32) = v78;
  *(_BYTE *)(v80 + 40) = 0;
  v81 = sub_100004F48((uint64_t)v18, &qword_100119450);
  v82 = static Edge.Set.leading.getter(v81);
  swift_retain(a2);
  v84 = sub_1000436BC(v83, v66);
  swift_release(a2);
  sub_1000A5788();
  v86 = v85;
  swift_release(v84);
  swift_retain(a2);
  v88 = sub_1000436BC(v87, v66);
  swift_release(a2);
  sub_1000A5868(v88);
  v90 = v89;
  swift_release(v88);
  swift_retain(a2);
  v92 = sub_1000436BC(v91, v66);
  swift_release(a2);
  KeyPath = swift_getKeyPath(&unk_1000D5168);
  v172 = v92;
  v94 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v172, KeyPath, v94);
  swift_release(KeyPath);
  v95 = *(double *)(v92 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
  swift_release(v92);
  if (qword_100113A58 != -1)
    v96 = swift_once(&qword_100113A58, sub_10001B8F0);
  v97 = v86 + v90;
  if (v95 + *(double *)&qword_10011F8E0 < v86 + v90)
    v97 = v95 + *(double *)&qword_10011F8E0;
  v98 = EdgeInsets.init(_all:)(v96, v97);
  v100 = v99;
  v102 = v101;
  v104 = v103;
  v105 = v152;
  sub_10000531C(v79, v152, &qword_100119458);
  v106 = v153;
  v107 = v105 + *(int *)(v153 + 36);
  *(_BYTE *)v107 = v82;
  *(double *)(v107 + 8) = v98;
  *(_QWORD *)(v107 + 16) = v100;
  *(_QWORD *)(v107 + 24) = v102;
  *(_QWORD *)(v107 + 32) = v104;
  *(_BYTE *)(v107 + 40) = 0;
  sub_100004F48(v79, &qword_100119458);
  v108 = sub_100005360(&qword_100119498);
  v109 = type metadata accessor for ToolbarPlacement(0);
  v110 = swift_allocObject(v108, ((*(unsigned __int8 *)(*(_QWORD *)(v109 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v109 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v109 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v109 - 8) + 80) | 7);
  *(_OWORD *)(v110 + 16) = xmmword_1000CD7E0;
  static ToolbarPlacement.navigationBar.getter();
  v111 = sub_100067320(&qword_1001194A0, &qword_100119460, (void (*)(void))sub_1000C8A74);
  v112 = v154;
  View.toolbar(_:for:)(2, v110, v106, v111);
  swift_bridgeObjectRelease(v110);
  v113 = sub_100004F48(v105, &qword_100119460);
  v114 = v169;
  v115 = static ContainerBackgroundPlacement.navigation.getter(v113);
  v116 = static Alignment.center.getter(v115);
  v118 = v117;
  v172 = v106;
  v173 = (void *)v111;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v120 = v158;
  v121 = v156;
  View.containerBackground<A>(for:alignment:content:)(v114, v116, v118, sub_1000C8F64, 0, v156, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  v122 = *(void (**)(char *, uint64_t))(v168 + 8);
  v123 = v170;
  v122(v114, v170);
  v124 = (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v112, v121);
  v125 = static ContainerBackgroundPlacement.navigationSplitView.getter(v124);
  v126 = static Alignment.center.getter(v125);
  v128 = v127;
  v172 = v121;
  v173 = &type metadata for Color;
  v174 = OpaqueTypeConformance2;
  v175 = &protocol witness table for Color;
  v129 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v130 = v161;
  v131 = v126;
  v132 = v164;
  View.containerBackground<A>(for:alignment:content:)(v114, v131, v128, sub_1000C8090, 0, v164, &type metadata for Color, v129, &protocol witness table for Color);
  v122(v114, v123);
  v133 = (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v120, v132);
  v134 = static SafeAreaRegions.keyboard.getter(v133);
  LOBYTE(v128) = static Edge.Set.all.getter(v134);
  v136 = v166;
  v135 = v167;
  v137 = (uint64_t)v163;
  (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v163, v130, v167);
  v138 = v165;
  v139 = v137 + *(int *)(v165 + 36);
  *(_QWORD *)v139 = v134;
  *(_BYTE *)(v139 + 8) = v128;
  (*(void (**)(char *, uint64_t))(v136 + 8))(v130, v135);
  v140 = sub_1000C8BCC();
  v141 = v157;
  View.sidebarDimmingIgnoresSafeArea(_:)(1, v138, v140);
  sub_100004F48(v137, &qword_100119480);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v159 + 32))(v171, v141, v162);
}

uint64_t sub_1000C8090@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Color.black.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000C80B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000C7658(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t sub_1000C80C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;

  v53 = a1;
  v48 = type metadata accessor for ContainerBackgroundPlacement(0);
  v1 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48, v2);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005360(&qword_1001194D8);
  v47 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100005360(&qword_1001194E0);
  v51 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49, v9);
  v45 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100005360(&qword_1001194E8);
  v50 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52, v11);
  v46 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100119498);
  v14 = type metadata accessor for ToolbarPlacement(0);
  v15 = swift_allocObject(v13, ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1000CD7E0;
  static ToolbarPlacement.navigationBar.getter();
  v16 = sub_100005360(&qword_1001194F0);
  v17 = sub_100008078(&qword_1001194F8, &qword_1001194F0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.toolbar(_:for:)(2, v15, v16, v17);
  swift_bridgeObjectRelease(v15);
  v19 = static ContainerBackgroundPlacement.navigation.getter(v18);
  v20 = static Alignment.center.getter(v19);
  v22 = v21;
  v54 = v16;
  v55 = (void *)v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  View.containerBackground<A>(for:alignment:content:)(v4, v20, v22, sub_1000C8F64, 0, v5, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  v24 = *(void (**)(char *, uint64_t))(v1 + 8);
  v25 = v48;
  v24(v4, v48);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v8, v5);
  v27 = static ContainerBackgroundPlacement.navigationSplitView.getter(v26);
  v28 = static Alignment.center.getter(v27);
  v30 = v29;
  v54 = v5;
  v55 = &type metadata for Color;
  v56 = OpaqueTypeConformance2;
  v57 = &protocol witness table for Color;
  v31 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v32 = v46;
  v33 = v28;
  v34 = v30;
  v35 = v49;
  v36 = v45;
  View.containerBackground<A>(for:alignment:content:)(v4, v33, v34, sub_1000C8438, 0, v49, &type metadata for Color, v31, &protocol witness table for Color);
  v24(v4, v25);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v36, v35);
  v38 = static SafeAreaRegions.keyboard.getter(v37);
  LOBYTE(v36) = static Edge.Set.all.getter(v38);
  v39 = v50;
  v41 = v52;
  v40 = v53;
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 16))(v53, v32, v52);
  v42 = v40 + *(int *)(sub_100005360(&qword_100119500) + 36);
  *(_QWORD *)v42 = v38;
  *(_BYTE *)(v42 + 8) = (_BYTE)v36;
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v32, v41);
}

uint64_t sub_1000C8438@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Color.clear.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000C8464()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v7[0] = v0[4];
  v1 = v7[0];
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v4;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorSplitView(0, (uint64_t)v7) - 8) + 80);
  return sub_1000C6AB4(v0[2], v0[3], (uint64_t)v0 + ((v5 + 64) & ~v5), v1, v2, v3, v4);
}

uint64_t sub_1000C84E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 32);
  v1 = v12;
  v13 = *(_OWORD *)(v0 + 40);
  v11 = v13;
  v14 = v2;
  v3 = (int *)type metadata accessor for CalculatorSplitView(0, (uint64_t)&v12);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 64) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 64);
  v8 = v5 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v9 = v0 + v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v9, v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9 + v3[13]);
  swift_release(*(_QWORD *)(v9 + v3[14]));
  swift_release(*(_QWORD *)(v9 + v3[15]));
  return swift_deallocObject(v0, v7, v8);
}

double sub_1000C85C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v9[0] = v1[4];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorSplitView(0, (uint64_t)v9) - 8) + 80);
  return sub_1000C6B9C(a1, v1[2], v1[3], (uint64_t)v1 + ((v7 + 64) & ~v7), v3, v4, v5, v6);
}

uint64_t sub_1000C863C()
{
  return sub_1000463B0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C6D90);
}

uint64_t sub_1000C8648()
{
  return sub_1000463B0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C6EBC);
}

uint64_t sub_1000C8654()
{
  return sub_1000463B0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C6964);
}

uint64_t sub_1000C8660()
{
  return sub_1000463B0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C69F8);
}

uint64_t sub_1000C866C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 16);
  v1 = v12;
  v13 = *(_OWORD *)(v0 + 24);
  v11 = v13;
  v14 = v2;
  v3 = (int *)type metadata accessor for CalculatorSplitView(0, (uint64_t)&v12);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 48) & ~v5;
  v7 = v6 + *(_QWORD *)(v4 + 64);
  v8 = v5 | 7;
  v9 = v0 + v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v6, v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9 + v3[13]);
  swift_release(*(_QWORD *)(v9 + v3[14]));
  swift_release(*(_QWORD *)(v9 + v3[15]));
  return swift_deallocObject(v0, v7, v8);
}

double sub_1000C8740()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v7[0] = v0[2];
  v1 = v7[0];
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v4;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorSplitView(0, (uint64_t)v7) - 8) + 80);
  return sub_1000C715C((uint64_t)v0 + ((v5 + 48) & ~v5), v1, v2, v3, v4);
}

uint64_t sub_1000C87C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

ValueMetadata *type metadata accessor for ForceRegularHorizontalSizeClassIPhoneOnly()
{
  return &type metadata for ForceRegularHorizontalSizeClassIPhoneOnly;
}

ValueMetadata *type metadata accessor for DetailsViewStyle()
{
  return &type metadata for DetailsViewStyle;
}

ValueMetadata *type metadata accessor for SidebarViewStyle()
{
  return &type metadata for SidebarViewStyle;
}

uint64_t sub_1000C8828(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t WitnessTable;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v2 = (void *)a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v25 = *a1;
  v1 = v25;
  v26 = v2;
  v27 = v3;
  v28 = v4;
  v5 = type metadata accessor for CalculatorCustomSplitView(255, (uint64_t)&v25);
  v7 = type metadata accessor for ModifiedContent(255, v5, &type metadata for _SafeAreaRegionsIgnoringLayout, v6);
  v9 = type metadata accessor for ModifiedContent(255, v1, &type metadata for SidebarViewStyle, v8);
  v11 = type metadata accessor for ModifiedContent(255, v2, &type metadata for DetailsViewStyle, v10);
  v13 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _AppearanceActionModifier, v12);
  v14 = sub_1000C72F8();
  v35 = v3;
  v36 = v14;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v16 = sub_1000C733C();
  v33 = v4;
  v34 = v16;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v32 = &protocol witness table for _AppearanceActionModifier;
  v17 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v25 = v9;
  v26 = &type metadata for EmptyView;
  v27 = v13;
  v28 = WitnessTable;
  v29 = &protocol witness table for EmptyView;
  v30 = v17;
  v18 = type metadata accessor for NavigationSplitView(255, &v25);
  v20 = type metadata accessor for ModifiedContent(255, v18, &type metadata for ForceRegularHorizontalSizeClassIPhoneOnly, v19);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationSplitView<A, B, C>, v18);
  sub_1000C7380();
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  v25 = v20;
  v26 = (void *)v21;
  swift_getOpaqueTypeMetadata2(255, &v25, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v23 = type metadata accessor for _ConditionalContent(255, v22);
  swift_getWitnessTable(&protocol conformance descriptor for CalculatorCustomSplitView<A, B>, v5);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v25 = v20;
  v26 = (void *)v21;
  swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v23);
}

uint64_t sub_1000C8A3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F753C, 1);
}

uint64_t sub_1000C8A4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F7514, 1);
}

uint64_t sub_1000C8A5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F74EC, 1);
}

uint64_t sub_1000C8A74()
{
  return sub_100067320(&qword_1001194A8, &qword_100119458, (void (*)(void))sub_1000C8A90);
}

uint64_t sub_1000C8A90()
{
  return sub_100067320(&qword_1001194B0, &qword_100119450, (void (*)(void))sub_1000C8AAC);
}

unint64_t sub_1000C8AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001194B8;
  if (!qword_1001194B8)
  {
    v1 = sub_100005608(&qword_100119448);
    sub_1000C8B30();
    sub_100008078(&qword_1001174C8, &qword_100116678, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001194B8);
  }
  return result;
}

unint64_t sub_1000C8B30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001194C0;
  if (!qword_1001194C0)
  {
    v1 = sub_100005608(&qword_100119440);
    sub_100008078(&qword_1001194C8, &qword_100119490, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100008078(&qword_1001174B8, &qword_1001174C0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001194C0);
  }
  return result;
}

unint64_t sub_1000C8BCC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  result = qword_1001194D0;
  if (!qword_1001194D0)
  {
    v1 = sub_100005608(&qword_100119480);
    v2 = sub_100005608(&qword_100119470);
    v3 = sub_100005608(&qword_100119468);
    v6 = sub_100005608(&qword_100119460);
    v7 = (void *)sub_100067320(&qword_1001194A0, &qword_100119460, (void (*)(void))sub_1000C8A74);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    v6 = v3;
    v7 = &type metadata for Color;
    v8 = OpaqueTypeConformance2;
    v9 = &protocol witness table for Color;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v6 = v2;
    v7 = &type metadata for Color;
    v8 = v5;
    v9 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001194D0);
  }
  return result;
}

uint64_t sub_1000C8D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100119508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C8D48()
{
  _QWORD v1[2];

  v1[0] = sub_100005608(&qword_100119480);
  v1[1] = sub_1000C8BCC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.sidebarDimmingIgnoresSafeArea(_:)>>, 1);
}

unint64_t sub_1000C8D98()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  result = qword_100119520;
  if (!qword_100119520)
  {
    v1 = sub_100005608(&qword_100119500);
    v2 = sub_100005608(&qword_1001194E0);
    v3 = sub_100005608(&qword_1001194D8);
    v6 = sub_100005608(&qword_1001194F0);
    v7 = (void *)sub_100008078(&qword_1001194F8, &qword_1001194F0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    v6 = v3;
    v7 = &type metadata for Color;
    v8 = OpaqueTypeConformance2;
    v9 = &protocol witness table for Color;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    v6 = v2;
    v7 = &type metadata for Color;
    v8 = v5;
    v9 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100119520);
  }
  return result;
}

unint64_t sub_1000C8EC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119528;
  if (!qword_100119528)
  {
    v1 = sub_100005608(&qword_100119508);
    sub_100008078(&qword_100119530, &qword_100119518, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100008078(&qword_100119538, &qword_100119510, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100119528);
  }
  return result;
}

uint64_t sub_1000C8F68@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v34 = a1;
  v2 = sub_100005360(&qword_100119390);
  __chkstk_darwin(v2, v3);
  v5 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100005360(&qword_100119340);
  __chkstk_darwin(v6, v7);
  v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = sub_100005360(&qword_100119638);
  __chkstk_darwin(v33, v10);
  v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = v1[1];
  v35 = *v1;
  v36 = v13;
  v37 = v1[2];
  v14 = sub_100005360(&qword_100119630);
  Binding.projectedValue.getter(&v38, v14);
  v15 = v38;
  v16 = v39;
  v32 = v40;
  v17 = v41;
  v18 = v42;
  v35 = v1[3];
  LOBYTE(v36) = *((_BYTE *)v1 + 64);
  v19 = sub_100005360(&qword_100115300);
  Binding.projectedValue.getter(&v38, v19);
  v20 = v38;
  v21 = v39;
  v31 = v40;
  v22 = enum case for ColorScheme.dark(_:);
  v23 = type metadata accessor for ColorScheme(0);
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 104))(v9, v22, v23);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v9, 0, 1, v23);
  sub_10000531C((uint64_t)v9, (uint64_t)v5, &qword_100119340);
  sub_10000531C((uint64_t)v5, (uint64_t)&v12[*(int *)(v33 + 36)], &qword_100119390);
  *(_QWORD *)v12 = v15;
  *((_QWORD *)v12 + 1) = v16;
  *((_OWORD *)v12 + 1) = v32;
  *((_QWORD *)v12 + 4) = v17;
  *((_QWORD *)v12 + 5) = v18;
  *((_QWORD *)v12 + 6) = v20;
  *((_QWORD *)v12 + 7) = v21;
  v12[64] = v31;
  swift_retain(v20);
  swift_retain(v21);
  swift_retain(v15);
  swift_retain(v16);
  sub_100004F48((uint64_t)v5, &qword_100119390);
  sub_100004F48((uint64_t)v9, &qword_100119340);
  swift_release(v21);
  swift_release(v20);
  swift_release(v16);
  v25 = swift_release(v15);
  v26 = static SafeAreaRegions.all.getter(v25);
  LOBYTE(v20) = static Edge.Set.all.getter(v26);
  v27 = v34;
  sub_10000531C((uint64_t)v12, v34, &qword_100119638);
  v28 = v27 + *(int *)(sub_100005360(&qword_100119640) + 36);
  *(_QWORD *)v28 = v26;
  *(_BYTE *)(v28 + 8) = v20;
  return sub_100004F48((uint64_t)v12, &qword_100119638);
}

uint64_t sub_1000C9218()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  swift_release(v0[3]);
  swift_release(v1);
  v2 = v0[8];
  swift_release(v0[9]);
  swift_release(v2);
  return swift_deallocClassInstance(v0, 81, 7);
}

uint64_t type metadata accessor for MathPaperViewWrapper.Coordinator()
{
  return objc_opt_self(_TtCV10Calculator20MathPaperViewWrapper11Coordinator);
}

__n128 sub_1000C927C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v0 = sub_100005360(&qword_100119630);
  Binding.projectedValue.getter(&v13, v0);
  v1 = v13;
  v2 = v14;
  v3 = v16;
  v4 = v17;
  v12 = v15;
  v5 = sub_100005360(&qword_100115300);
  Binding.projectedValue.getter(&v13, v5);
  v6 = v13;
  v7 = v14;
  v8 = v15.n128_u8[0];
  v9 = type metadata accessor for MathPaperViewWrapper.Coordinator();
  v10 = swift_allocObject(v9, 81, 7);
  *(_QWORD *)(v10 + 16) = v1;
  *(_QWORD *)(v10 + 24) = v2;
  result = v12;
  *(__n128 *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 48) = v3;
  *(_QWORD *)(v10 + 56) = v4;
  *(_QWORD *)(v10 + 64) = v6;
  *(_QWORD *)(v10 + 72) = v7;
  *(_BYTE *)(v10 + 80) = v8;
  return result;
}

uint64_t sub_1000C9344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C9C5C();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000C9394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C9C5C();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000C93E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C9C5C();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

id sub_1000C9408()
{
  id v0;
  uint64_t v1;
  _QWORD v3[5];

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MathNotesHostingViewController(0)), "init");
  v3[3] = type metadata accessor for MathPaperViewWrapper.Coordinator();
  v3[4] = sub_1000C9CA0();
  v1 = sub_100005360(&qword_100119670);
  UIViewControllerRepresentableContext.coordinator.getter(v3, v1);
  dispatch thunk of MathNotesHostingViewController.delegate.setter(v3);
  return v0;
}

void sub_1000C9484(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_1000C927C();
  *a1 = v2;
}

uint64_t sub_1000C94A8(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_1000C94E0(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v8 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = v8;
  v9 = *(_OWORD *)(a1 + 48);
  v18 = *(_OWORD *)(a1 + 32);
  v19 = v9;
  *(double *)v15 = a3;
  *(double *)&v15[1] = a4;
  *(double *)&v15[2] = a5;
  *(double *)&v15[3] = a6;
  v10 = sub_100005360(&qword_100119630);
  Binding.wrappedValue.setter(v15, v10);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_BYTE *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = v11;
  LOBYTE(v18) = v12;
  LOBYTE(v15[0]) = a2;
  v13 = sub_100005360(&qword_100115300);
  return Binding.wrappedValue.setter(v15, v13);
}

void sub_1000C9580(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, void *a7)
{
  sub_1000C95A8(a6, a7, a1, a2, a3, a4);
}

void sub_1000C95A8(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  char v7;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  double v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  double v36;
  _QWORD v37[7];
  char v38;
  __int128 v39;
  _BYTE v40[40];
  _BYTE v41[48];

  v7 = a1;
  if (!a2)
    goto LABEL_7;
  v13 = objc_opt_self(BSSpringAnimationSettings);
  v14 = (void *)swift_dynamicCastObjCClass(a2, v13);
  v15 = a2;
  v16 = v15;
  if (!v14)
  {
    v26 = objc_msgSend(v15, "timingFunction");
    if (v26)
    {
      v27 = v26;
      v28 = sub_100005360(&qword_100119628);
      inited = swift_initStackObject(v28, v41);
      v39 = xmmword_1000D0760;
      *(_OWORD *)(inited + 16) = xmmword_1000D0760;
      *(_QWORD *)(inited + 32) = 0;
      v30 = swift_initStackObject(v28, v40);
      *(_OWORD *)(v30 + 16) = v39;
      *(_QWORD *)(v30 + 32) = 0;
      objc_msgSend(v27, "getControlPointAtIndex:values:", 1, inited + 32);
      objc_msgSend(v27, "getControlPointAtIndex:values:", 2, v30 + 32);
      v31 = *(float *)(inited + 32);
      v32 = *(float *)(inited + 36);
      v33 = *(float *)(v30 + 32);
      v34 = *(float *)(v30 + 36);
      v35 = objc_msgSend(v16, "duration");
      v25 = static Animation.timingCurve(_:_:_:_:duration:)(v35, v31, v32, v33, v34, v36);
      swift_bridgeObjectRelease(inited);
      swift_bridgeObjectRelease(v30);

      goto LABEL_8;
    }

LABEL_7:
    v25 = 0;
    goto LABEL_8;
  }
  objc_msgSend(v14, "mass");
  v18 = v17;
  objc_msgSend(v14, "stiffness");
  v20 = v19;
  objc_msgSend(v14, "damping");
  v22 = v21;
  v23 = objc_msgSend(v14, "initialVelocity");
  v25 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(v23, v18, v20, v22, v24);

LABEL_8:
  __chkstk_darwin(a1, a2);
  v37[2] = v6;
  *(double *)&v37[3] = a3;
  *(double *)&v37[4] = a4;
  *(double *)&v37[5] = a5;
  *(double *)&v37[6] = a6;
  v38 = v7 & 1;
  withAnimation<A>(_:_:)(v25, sub_1000C9824, v37, (char *)&type metadata for () + 8);
  swift_release(v25);
}

uint64_t sub_1000C9824()
{
  uint64_t v0;

  return sub_1000C94E0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 56), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

ValueMetadata *type metadata accessor for MathPaperView()
{
  return &type metadata for MathPaperView;
}

uint64_t sub_1000C9870(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F7618, 1);
}

uint64_t _s10Calculator20MathPaperViewWrapperVwxx_0(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[6]);
  return swift_release(a1[7]);
}

uint64_t _s10Calculator20MathPaperViewWrapperVwcp_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = a2[6];
  v7 = a2[7];
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *_s10Calculator20MathPaperViewWrapperVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v8 = a1[6];
  v9 = a2[6];
  a1[6] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_retain(v10);
  swift_release(v11);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t _s10Calculator20MathPaperViewWrapperVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  swift_release(*(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v6);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t _s10Calculator20MathPaperViewWrapperVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000C9A7C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MathPaperViewWrapper()
{
  return &type metadata for MathPaperViewWrapper;
}

unint64_t sub_1000C9AE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119648;
  if (!qword_100119648)
  {
    v1 = sub_100005608(&qword_100119640);
    sub_1000C9B50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100119648);
  }
  return result;
}

unint64_t sub_1000C9B50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119650;
  if (!qword_100119650)
  {
    v1 = sub_100005608(&qword_100119638);
    sub_1000C9BBC();
    sub_1000C9C00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100119650);
  }
  return result;
}

unint64_t sub_1000C9BBC()
{
  unint64_t result;

  result = qword_100119658;
  if (!qword_100119658)
  {
    result = swift_getWitnessTable(&unk_1000D5340, &type metadata for MathPaperViewWrapper);
    atomic_store(result, (unint64_t *)&qword_100119658);
  }
  return result;
}

unint64_t sub_1000C9C00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119388;
  if (!qword_100119388)
  {
    v1 = sub_100005608(&qword_100119390);
    result = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100119388);
  }
  return result;
}

void *sub_1000C9C50()
{
  return &protocol witness table for Never;
}

unint64_t sub_1000C9C5C()
{
  unint64_t result;

  result = qword_100119660;
  if (!qword_100119660)
  {
    result = swift_getWitnessTable(&unk_1000D52C8, &type metadata for MathPaperViewWrapper);
    atomic_store(result, (unint64_t *)&qword_100119660);
  }
  return result;
}

unint64_t sub_1000C9CA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119668;
  if (!qword_100119668)
  {
    v1 = type metadata accessor for MathPaperViewWrapper.Coordinator();
    result = swift_getWitnessTable(&unk_1000D5238, v1);
    atomic_store(result, (unint64_t *)&qword_100119668);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC10CalculatorP33_A7F2E4DB3CA3808C454F43E31C596D4B19ResourceBundleClass);
}
